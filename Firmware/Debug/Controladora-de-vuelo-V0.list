
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126d0  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08012980  08012980  00013980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013770  08013770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013778  08013778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801377c  0801377c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000bc  24000000  08013780  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002aec  240000bc  0801383c  000150bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002ba8  0801383c  00015ba8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000150bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028682  00000000  00000000  000150ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000510a  00000000  00000000  0003d76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ec8  00000000  00000000  00042878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017f7  00000000  00000000  00044740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000375a9  00000000  00000000  00045f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030d70  00000000  00000000  0007d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154452  00000000  00000000  000ae250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002026a2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000084c0  00000000  00000000  002026e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0020aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000bc 	.word	0x240000bc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08012968 	.word	0x08012968

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000c0 	.word	0x240000c0
 80002ec:	08012968 	.word	0x08012968

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f006 fc7a 	bl	8006f90 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f009 fcb9 	bl	800a024 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f009 fcb3 	bl	800a024 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f006 fc63 	bl	8006f90 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002368 	.word	0x24002368

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f006 fc4a 	bl	8006f90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f009 fc8d 	bl	800a024 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f009 fe74 	bl	800a400 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f006 fc36 	bl	8006f90 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002368 	.word	0x24002368

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f006 fc0b 	bl	8006f90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f009 fc4e 	bl	800a024 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f009 fe36 	bl	800a400 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f006 fbf8 	bl	8006f90 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002368 	.word	0x24002368
 800088c:	240000ec 	.word	0x240000ec
 8000890:	240000f0 	.word	0x240000f0
 8000894:	240000f2 	.word	0x240000f2
 8000898:	240000ee 	.word	0x240000ee
 800089c:	240000f4 	.word	0x240000f4
 80008a0:	240000f6 	.word	0x240000f6
 80008a4:	240000f8 	.word	0x240000f8
 80008a8:	240000fa 	.word	0x240000fa
 80008ac:	240000fc 	.word	0x240000fc
 80008b0:	240000fe 	.word	0x240000fe
 80008b4:	24000100 	.word	0x24000100
 80008b8:	24000102 	.word	0x24000102

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 fb5b 	bl	8006f90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 fb9f 	bl	800a024 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f009 fd87 	bl	800a400 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 fb49 	bl	8006f90 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002368 	.word	0x24002368
 800093c:	24000108 	.word	0x24000108
 8000940:	24000104 	.word	0x24000104

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000104 	.word	0x24000104
 80009bc:	240000ec 	.word	0x240000ec
 80009c0:	240000f0 	.word	0x240000f0
 80009c4:	240000f2 	.word	0x240000f2
 80009c8:	2400010c 	.word	0x2400010c

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	2400010c 	.word	0x2400010c
 8000c9c:	240000fc 	.word	0x240000fc
 8000ca0:	240000fa 	.word	0x240000fa
 8000ca4:	240000f8 	.word	0x240000f8
 8000ca8:	240000f6 	.word	0x240000f6
 8000cac:	240000f4 	.word	0x240000f4
 8000cb0:	240000ee 	.word	0x240000ee
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000102 	.word	0x24000102
 8000f50:	24000100 	.word	0x24000100
 8000f54:	240000fe 	.word	0x240000fe

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f011 fbc5 	bl	8012710 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f005 ffb8 	bl	8006f90 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	240000d8 	.word	0x240000d8
 8001058:	24000104 	.word	0x24000104

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240000d8 	.word	0x240000d8
 80010c8:	24000104 	.word	0x24000104
 80010cc:	24000108 	.word	0x24000108

080010d0 <LED_Init>:

#include "Libraries/LED.h"

LED_Info_t LED_Info;

void LED_Init(void){
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	LED_Info.R_LED.LED_GPIO_GPIOx = LED_1_GPIO_Port;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <LED_Init+0x50>)
 80010d6:	4a13      	ldr	r2, [pc, #76]	@ (8001124 <LED_Init+0x54>)
 80010d8:	601a      	str	r2, [r3, #0]
	LED_Info.R_LED.LED_GPIO_Pin   = LED_1_Pin;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <LED_Init+0x50>)
 80010dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010e0:	809a      	strh	r2, [r3, #4]

	LED_Info.B_LED1.LED_GPIO_GPIOx = LED_2_GPIO_Port;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <LED_Init+0x50>)
 80010e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <LED_Init+0x54>)
 80010e6:	611a      	str	r2, [r3, #16]
	LED_Info.B_LED1.LED_GPIO_Pin   = LED_2_Pin;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <LED_Init+0x50>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	829a      	strh	r2, [r3, #20]

	LED_Info.B_LED2.LED_GPIO_GPIOx = LED_3_GPIO_Port;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <LED_Init+0x50>)
 80010f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <LED_Init+0x54>)
 80010f2:	621a      	str	r2, [r3, #32]
	LED_Info.B_LED2.LED_GPIO_Pin   = LED_3_Pin;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <LED_Init+0x50>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	849a      	strh	r2, [r3, #36]	@ 0x24

	LED_Info.B_LED3.LED_GPIO_GPIOx = LED_4_GPIO_Port;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <LED_Init+0x50>)
 80010fc:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <LED_Init+0x54>)
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
	LED_Info.B_LED3.LED_GPIO_Pin   = LED_4_Pin;
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <LED_Init+0x50>)
 8001102:	2204      	movs	r2, #4
 8001104:	869a      	strh	r2, [r3, #52]	@ 0x34

	LED_Info.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port;
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <LED_Init+0x50>)
 8001108:	4a06      	ldr	r2, [pc, #24]	@ (8001124 <LED_Init+0x54>)
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40
	LED_Info.G_LED.LED_GPIO_Pin   = LED_5_Pin;
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <LED_Init+0x50>)
 800110e:	2208      	movs	r2, #8
 8001110:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	24000110 	.word	0x24000110
 8001124:	58020800 	.word	0x58020800

08001128 <LED_blink>:

LED_config_t LED_blink(LED_config_t LED){
 8001128:	b084      	sub	sp, #16
 800112a:	b590      	push	{r4, r7, lr}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	f107 001c 	add.w	r0, r7, #28
 8001136:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 800113a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <LED_blink+0x20>
 8001142:	2b01      	cmp	r3, #1
 8001144:	d010      	beq.n	8001168 <LED_blink+0x40>
 8001146:	e01f      	b.n	8001188 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8001148:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800114a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800114c:	429a      	cmp	r2, r3
 800114e:	d31f      	bcc.n	8001190 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	8c39      	ldrh	r1, [r7, #32]
 8001154:	2201      	movs	r2, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f005 ff1a 	bl	8006f90 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001166:	e013      	b.n	8001190 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8001168:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800116a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800116c:	429a      	cmp	r2, r3
 800116e:	d311      	bcc.n	8001194 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	8c39      	ldrh	r1, [r7, #32]
 8001174:	2200      	movs	r2, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f005 ff0a 	bl	8006f90 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001186:	e005      	b.n	8001194 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 800118e:	e002      	b.n	8001196 <LED_blink+0x6e>
				break;
 8001190:	bf00      	nop
 8001192:	e000      	b.n	8001196 <LED_blink+0x6e>
				break;
 8001194:	bf00      	nop
		}

	LED.count++;
 8001196:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001198:	3301      	adds	r3, #1
 800119a:	b29b      	uxth	r3, r3
 800119c:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	461c      	mov	r4, r3
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011b6:	b004      	add	sp, #16
 80011b8:	4770      	bx	lr

080011ba <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 80011ba:	b084      	sub	sp, #16
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b085      	sub	sp, #20
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	f107 001c 	add.w	r0, r7, #28
 80011c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 80011cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d117      	bne.n	8001204 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 80011d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <LED_Rutine+0x28>
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d007      	beq.n	80011f0 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 80011e0:	e018      	b.n	8001214 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	8c39      	ldrh	r1, [r7, #32]
 80011e6:	2201      	movs	r2, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f005 fed1 	bl	8006f90 <HAL_GPIO_WritePin>
				break;
 80011ee:	e011      	b.n	8001214 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 80011f0:	f107 001c 	add.w	r0, r7, #28
 80011f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011fe:	f7ff ff93 	bl	8001128 <LED_blink>
				break;
 8001202:	e007      	b.n	8001214 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	8c39      	ldrh	r1, [r7, #32]
 8001208:	2200      	movs	r2, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f005 fec0 	bl	8006f90 <HAL_GPIO_WritePin>
		LED.count = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	461c      	mov	r4, r3
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800121e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800122c:	b004      	add	sp, #16
 800122e:	4770      	bx	lr

08001230 <LED_Tasks>:

void LED_Tasks (void){
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b087      	sub	sp, #28
 8001234:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8001236:	4c24      	ldr	r4, [pc, #144]	@ (80012c8 <LED_Tasks+0x98>)
 8001238:	4638      	mov	r0, r7
 800123a:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <LED_Tasks+0x98>)
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001242:	f7ff ffba 	bl	80011ba <LED_Rutine>
 8001246:	463b      	mov	r3, r7
 8001248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800124a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 800124e:	4c1e      	ldr	r4, [pc, #120]	@ (80012c8 <LED_Tasks+0x98>)
 8001250:	4638      	mov	r0, r7
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <LED_Tasks+0x98>)
 8001254:	69da      	ldr	r2, [r3, #28]
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	3310      	adds	r3, #16
 800125a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125c:	f7ff ffad 	bl	80011ba <LED_Rutine>
 8001260:	3410      	adds	r4, #16
 8001262:	463b      	mov	r3, r7
 8001264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 800126a:	4c17      	ldr	r4, [pc, #92]	@ (80012c8 <LED_Tasks+0x98>)
 800126c:	4638      	mov	r0, r7
 800126e:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <LED_Tasks+0x98>)
 8001270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001272:	9200      	str	r2, [sp, #0]
 8001274:	3320      	adds	r3, #32
 8001276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001278:	f7ff ff9f 	bl	80011ba <LED_Rutine>
 800127c:	3420      	adds	r4, #32
 800127e:	463b      	mov	r3, r7
 8001280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8001286:	4c10      	ldr	r4, [pc, #64]	@ (80012c8 <LED_Tasks+0x98>)
 8001288:	4638      	mov	r0, r7
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <LED_Tasks+0x98>)
 800128c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	3330      	adds	r3, #48	@ 0x30
 8001292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001294:	f7ff ff91 	bl	80011ba <LED_Rutine>
 8001298:	3430      	adds	r4, #48	@ 0x30
 800129a:	463b      	mov	r3, r7
 800129c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 80012a2:	4c09      	ldr	r4, [pc, #36]	@ (80012c8 <LED_Tasks+0x98>)
 80012a4:	4638      	mov	r0, r7
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <LED_Tasks+0x98>)
 80012a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	3340      	adds	r3, #64	@ 0x40
 80012ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b0:	f7ff ff83 	bl	80011ba <LED_Rutine>
 80012b4:	3440      	adds	r4, #64	@ 0x40
 80012b6:	463b      	mov	r3, r7
 80012b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	24000110 	.word	0x24000110

080012cc <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 80012d0:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <PWM_Assing+0xb0>)
 80012d2:	881a      	ldrh	r2, [r3, #0]
 80012d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 80012da:	4b28      	ldr	r3, [pc, #160]	@ (800137c <PWM_Assing+0xb0>)
 80012dc:	885a      	ldrh	r2, [r3, #2]
 80012de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e2:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 80012e4:	4b25      	ldr	r3, [pc, #148]	@ (800137c <PWM_Assing+0xb0>)
 80012e6:	889a      	ldrh	r2, [r3, #4]
 80012e8:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <PWM_Assing+0xb4>)
 80012ea:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 80012ec:	4b23      	ldr	r3, [pc, #140]	@ (800137c <PWM_Assing+0xb0>)
 80012ee:	88da      	ldrh	r2, [r3, #6]
 80012f0:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <PWM_Assing+0xb4>)
 80012f2:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <PWM_Assing+0xb0>)
 80012f6:	891a      	ldrh	r2, [r3, #8]
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <PWM_Assing+0xb8>)
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <PWM_Assing+0xb0>)
 80012fe:	895a      	ldrh	r2, [r3, #10]
 8001300:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <PWM_Assing+0xb8>)
 8001302:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8001304:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <PWM_Assing+0xb0>)
 8001306:	899a      	ldrh	r2, [r3, #12]
 8001308:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <PWM_Assing+0xb8>)
 800130a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <PWM_Assing+0xb0>)
 800130e:	89da      	ldrh	r2, [r3, #14]
 8001310:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <PWM_Assing+0xb8>)
 8001312:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <PWM_Assing+0xb0>)
 8001316:	8a1a      	ldrh	r2, [r3, #16]
 8001318:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800131c:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <PWM_Assing+0xb0>)
 8001320:	8a5a      	ldrh	r2, [r3, #18]
 8001322:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001326:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001328:	2100      	movs	r1, #0
 800132a:	4817      	ldr	r0, [pc, #92]	@ (8001388 <PWM_Assing+0xbc>)
 800132c:	f00a f824 	bl	800b378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001330:	2104      	movs	r1, #4
 8001332:	4815      	ldr	r0, [pc, #84]	@ (8001388 <PWM_Assing+0xbc>)
 8001334:	f00a f820 	bl	800b378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001338:	2108      	movs	r1, #8
 800133a:	4813      	ldr	r0, [pc, #76]	@ (8001388 <PWM_Assing+0xbc>)
 800133c:	f00a f81c 	bl	800b378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001340:	210c      	movs	r1, #12
 8001342:	4811      	ldr	r0, [pc, #68]	@ (8001388 <PWM_Assing+0xbc>)
 8001344:	f00a f818 	bl	800b378 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001348:	2100      	movs	r1, #0
 800134a:	4810      	ldr	r0, [pc, #64]	@ (800138c <PWM_Assing+0xc0>)
 800134c:	f00a f814 	bl	800b378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001350:	2104      	movs	r1, #4
 8001352:	480e      	ldr	r0, [pc, #56]	@ (800138c <PWM_Assing+0xc0>)
 8001354:	f00a f810 	bl	800b378 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001358:	2100      	movs	r1, #0
 800135a:	480d      	ldr	r0, [pc, #52]	@ (8001390 <PWM_Assing+0xc4>)
 800135c:	f00a f80c 	bl	800b378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001360:	2104      	movs	r1, #4
 8001362:	480b      	ldr	r0, [pc, #44]	@ (8001390 <PWM_Assing+0xc4>)
 8001364:	f00a f808 	bl	800b378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001368:	2108      	movs	r1, #8
 800136a:	4809      	ldr	r0, [pc, #36]	@ (8001390 <PWM_Assing+0xc4>)
 800136c:	f00a f804 	bl	800b378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001370:	210c      	movs	r1, #12
 8001372:	4807      	ldr	r0, [pc, #28]	@ (8001390 <PWM_Assing+0xc4>)
 8001374:	f00a f800 	bl	800b378 <HAL_TIM_PWM_Start>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	24000000 	.word	0x24000000
 8001380:	40000400 	.word	0x40000400
 8001384:	40000800 	.word	0x40000800
 8001388:	24002478 	.word	0x24002478
 800138c:	240024c4 	.word	0x240024c4
 8001390:	24002510 	.word	0x24002510

08001394 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8001398:	2201      	movs	r2, #1
 800139a:	4903      	ldr	r1, [pc, #12]	@ (80013a8 <SBUS_init+0x14>)
 800139c:	4803      	ldr	r0, [pc, #12]	@ (80013ac <SBUS_init+0x18>)
 800139e:	f00a ffdb 	bl	800c358 <HAL_UART_Receive_DMA>

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	24000179 	.word	0x24000179
 80013ac:	24002688 	.word	0x24002688

080013b0 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <SBUS_Receive+0x8c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <SBUS_Receive+0x18>
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d017      	beq.n	80013f6 <SBUS_Receive+0x46>
 80013c6:	e02f      	b.n	8001428 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	d10f      	bne.n	80013ee <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <SBUS_Receive+0x90>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <SBUS_Receive+0x94>)
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <SBUS_Receive+0x8c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
				RxCount++;
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <SBUS_Receive+0x90>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <SBUS_Receive+0x90>)
 80013ea:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 80013ec:	e021      	b.n	8001432 <SBUS_Receive+0x82>
				RxCount = 0;
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <SBUS_Receive+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
			break;
 80013f4:	e01d      	b.n	8001432 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <SBUS_Receive+0x90>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <SBUS_Receive+0x94>)
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <SBUS_Receive+0x90>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <SBUS_Receive+0x90>)
 800140c:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <SBUS_Receive+0x90>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b18      	cmp	r3, #24
 8001414:	d10c      	bne.n	8001430 <SBUS_Receive+0x80>
				RxCount = 0;
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <SBUS_Receive+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <SBUS_Receive+0x8c>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8001422:	f000 f843 	bl	80014ac <SBUS_getData>
			}
			break;
 8001426:	e003      	b.n	8001430 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <SBUS_Receive+0x8c>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
			break;
 800142e:	e000      	b.n	8001432 <SBUS_Receive+0x82>
			break;
 8001430:	bf00      	nop
	}
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2400017a 	.word	0x2400017a
 8001440:	2400017b 	.word	0x2400017b
 8001444:	24000160 	.word	0x24000160

08001448 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 800144e:	881a      	ldrh	r2, [r3, #0]
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <Temp_BypassFunct+0x60>)
 8001452:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 8001456:	885a      	ldrh	r2, [r3, #2]
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <Temp_BypassFunct+0x60>)
 800145a:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 800145e:	889a      	ldrh	r2, [r3, #4]
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <Temp_BypassFunct+0x60>)
 8001462:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 8001466:	88da      	ldrh	r2, [r3, #6]
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <Temp_BypassFunct+0x60>)
 800146a:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 800146e:	891a      	ldrh	r2, [r3, #8]
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <Temp_BypassFunct+0x60>)
 8001472:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 8001476:	895a      	ldrh	r2, [r3, #10]
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <Temp_BypassFunct+0x60>)
 800147a:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 800147e:	899a      	ldrh	r2, [r3, #12]
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <Temp_BypassFunct+0x60>)
 8001482:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 8001486:	89da      	ldrh	r2, [r3, #14]
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <Temp_BypassFunct+0x60>)
 800148a:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 800148e:	8a1a      	ldrh	r2, [r3, #16]
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <Temp_BypassFunct+0x60>)
 8001492:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <Temp_BypassFunct+0x5c>)
 8001496:	8a5a      	ldrh	r2, [r3, #18]
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <Temp_BypassFunct+0x60>)
 800149a:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 800149c:	f7ff ff16 	bl	80012cc <PWM_Assing>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	24000014 	.word	0x24000014
 80014a8:	24000000 	.word	0x24000000

080014ac <SBUS_getData>:

void SBUS_getData(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 80014b0:	4b95      	ldr	r3, [pc, #596]	@ (8001708 <SBUS_getData+0x25c>)
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	4b94      	ldr	r3, [pc, #592]	@ (8001708 <SBUS_getData+0x25c>)
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b90      	ldr	r3, [pc, #576]	@ (800170c <SBUS_getData+0x260>)
 80014cc:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 80014ce:	4b8e      	ldr	r3, [pc, #568]	@ (8001708 <SBUS_getData+0x25c>)
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b8b      	ldr	r3, [pc, #556]	@ (8001708 <SBUS_getData+0x25c>)
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	015b      	lsls	r3, r3, #5
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b87      	ldr	r3, [pc, #540]	@ (800170c <SBUS_getData+0x260>)
 80014ee:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 80014f0:	4b85      	ldr	r3, [pc, #532]	@ (8001708 <SBUS_getData+0x25c>)
 80014f2:	78db      	ldrb	r3, [r3, #3]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b83      	ldr	r3, [pc, #524]	@ (8001708 <SBUS_getData+0x25c>)
 80014fc:	791b      	ldrb	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21a      	sxth	r2, r3
 8001506:	4b80      	ldr	r3, [pc, #512]	@ (8001708 <SBUS_getData+0x25c>)
 8001508:	795b      	ldrb	r3, [r3, #5]
 800150a:	029b      	lsls	r3, r3, #10
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b7c      	ldr	r3, [pc, #496]	@ (800170c <SBUS_getData+0x260>)
 800151c:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 800151e:	4b7a      	ldr	r3, [pc, #488]	@ (8001708 <SBUS_getData+0x25c>)
 8001520:	795b      	ldrb	r3, [r3, #5]
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b77      	ldr	r3, [pc, #476]	@ (8001708 <SBUS_getData+0x25c>)
 800152a:	799b      	ldrb	r3, [r3, #6]
 800152c:	01db      	lsls	r3, r3, #7
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21b      	sxth	r3, r3
 8001534:	b29b      	uxth	r3, r3
 8001536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b73      	ldr	r3, [pc, #460]	@ (800170c <SBUS_getData+0x260>)
 800153e:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8001540:	4b71      	ldr	r3, [pc, #452]	@ (8001708 <SBUS_getData+0x25c>)
 8001542:	799b      	ldrb	r3, [r3, #6]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b6f      	ldr	r3, [pc, #444]	@ (8001708 <SBUS_getData+0x25c>)
 800154c:	79db      	ldrb	r3, [r3, #7]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b6b      	ldr	r3, [pc, #428]	@ (800170c <SBUS_getData+0x260>)
 8001560:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8001562:	4b69      	ldr	r3, [pc, #420]	@ (8001708 <SBUS_getData+0x25c>)
 8001564:	79db      	ldrb	r3, [r3, #7]
 8001566:	09db      	lsrs	r3, r3, #7
 8001568:	b2db      	uxtb	r3, r3
 800156a:	b21a      	sxth	r2, r3
 800156c:	4b66      	ldr	r3, [pc, #408]	@ (8001708 <SBUS_getData+0x25c>)
 800156e:	7a1b      	ldrb	r3, [r3, #8]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b63      	ldr	r3, [pc, #396]	@ (8001708 <SBUS_getData+0x25c>)
 800157a:	7a5b      	ldrb	r3, [r3, #9]
 800157c:	025b      	lsls	r3, r3, #9
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b5f      	ldr	r3, [pc, #380]	@ (800170c <SBUS_getData+0x260>)
 800158e:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001590:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <SBUS_getData+0x25c>)
 8001592:	7a5b      	ldrb	r3, [r3, #9]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b5b      	ldr	r3, [pc, #364]	@ (8001708 <SBUS_getData+0x25c>)
 800159c:	7a9b      	ldrb	r3, [r3, #10]
 800159e:	019b      	lsls	r3, r3, #6
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b57      	ldr	r3, [pc, #348]	@ (800170c <SBUS_getData+0x260>)
 80015b0:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 80015b2:	4b55      	ldr	r3, [pc, #340]	@ (8001708 <SBUS_getData+0x25c>)
 80015b4:	7a9b      	ldrb	r3, [r3, #10]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b52      	ldr	r3, [pc, #328]	@ (8001708 <SBUS_getData+0x25c>)
 80015be:	7adb      	ldrb	r3, [r3, #11]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b4e      	ldr	r3, [pc, #312]	@ (800170c <SBUS_getData+0x260>)
 80015d2:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80015d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001708 <SBUS_getData+0x25c>)
 80015d6:	7b1b      	ldrb	r3, [r3, #12]
 80015d8:	b21a      	sxth	r2, r3
 80015da:	4b4b      	ldr	r3, [pc, #300]	@ (8001708 <SBUS_getData+0x25c>)
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	4b47      	ldr	r3, [pc, #284]	@ (800170c <SBUS_getData+0x260>)
 80015f0:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80015f2:	4b45      	ldr	r3, [pc, #276]	@ (8001708 <SBUS_getData+0x25c>)
 80015f4:	7b5b      	ldrb	r3, [r3, #13]
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b42      	ldr	r3, [pc, #264]	@ (8001708 <SBUS_getData+0x25c>)
 80015fe:	7b9b      	ldrb	r3, [r3, #14]
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21b      	sxth	r3, r3
 8001608:	b29b      	uxth	r3, r3
 800160a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b3e      	ldr	r3, [pc, #248]	@ (800170c <SBUS_getData+0x260>)
 8001612:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8001614:	4b3c      	ldr	r3, [pc, #240]	@ (8001708 <SBUS_getData+0x25c>)
 8001616:	7b9b      	ldrb	r3, [r3, #14]
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	b2db      	uxtb	r3, r3
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <SBUS_getData+0x25c>)
 8001620:	7bdb      	ldrb	r3, [r3, #15]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <SBUS_getData+0x25c>)
 800162c:	7c1b      	ldrb	r3, [r3, #16]
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	b21b      	sxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b21b      	sxth	r3, r3
 8001636:	b29b      	uxth	r3, r3
 8001638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b33      	ldr	r3, [pc, #204]	@ (800170c <SBUS_getData+0x260>)
 8001640:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <SBUS_getData+0x25c>)
 8001644:	7c1b      	ldrb	r3, [r3, #16]
 8001646:	085b      	lsrs	r3, r3, #1
 8001648:	b2db      	uxtb	r3, r3
 800164a:	b21a      	sxth	r2, r3
 800164c:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <SBUS_getData+0x25c>)
 800164e:	7c5b      	ldrb	r3, [r3, #17]
 8001650:	01db      	lsls	r3, r3, #7
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	b29b      	uxth	r3, r3
 800165a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <SBUS_getData+0x260>)
 8001662:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8001664:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <SBUS_getData+0x25c>)
 8001666:	7c5b      	ldrb	r3, [r3, #17]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	b2db      	uxtb	r3, r3
 800166c:	b21a      	sxth	r2, r3
 800166e:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <SBUS_getData+0x25c>)
 8001670:	7c9b      	ldrb	r3, [r3, #18]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21b      	sxth	r3, r3
 800167a:	b29b      	uxth	r3, r3
 800167c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <SBUS_getData+0x260>)
 8001684:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <SBUS_getData+0x25c>)
 8001688:	7c9b      	ldrb	r3, [r3, #18]
 800168a:	09db      	lsrs	r3, r3, #7
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <SBUS_getData+0x25c>)
 8001692:	7cdb      	ldrb	r3, [r3, #19]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21a      	sxth	r2, r3
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <SBUS_getData+0x25c>)
 800169e:	7d1b      	ldrb	r3, [r3, #20]
 80016a0:	025b      	lsls	r3, r3, #9
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <SBUS_getData+0x260>)
 80016b2:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 80016b4:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <SBUS_getData+0x25c>)
 80016b6:	7d1b      	ldrb	r3, [r3, #20]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	b21a      	sxth	r2, r3
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <SBUS_getData+0x25c>)
 80016c0:	7d5b      	ldrb	r3, [r3, #21]
 80016c2:	019b      	lsls	r3, r3, #6
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <SBUS_getData+0x260>)
 80016d4:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <SBUS_getData+0x25c>)
 80016d8:	7d5b      	ldrb	r3, [r3, #21]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <SBUS_getData+0x25c>)
 80016e2:	7d9b      	ldrb	r3, [r3, #22]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <SBUS_getData+0x260>)
 80016f6:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <SBUS_getData+0x260>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	e00a      	b.n	800171c <SBUS_getData+0x270>
 8001706:	bf00      	nop
 8001708:	24000160 	.word	0x24000160
 800170c:	24000014 	.word	0x24000014
 8001710:	43b00000 	.word	0x43b00000
 8001714:	44a80000 	.word	0x44a80000
 8001718:	447a0000 	.word	0x447a0000
 800171c:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8001710 <SBUS_getData+0x264>
 8001720:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001724:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8001714 <SBUS_getData+0x268>
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8001718 <SBUS_getData+0x26c>
 8001730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001738:	ee17 3a90 	vmov	r3, s15
 800173c:	b29b      	uxth	r3, r3
 800173e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001742:	b29a      	uxth	r2, r3
 8001744:	4bd1      	ldr	r3, [pc, #836]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001746:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8001748:	4bd0      	ldr	r3, [pc, #832]	@ (8001a8c <SBUS_getData+0x5e0>)
 800174a:	885b      	ldrh	r3, [r3, #2]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001754:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8001a90 <SBUS_getData+0x5e4>
 8001758:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800175c:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8001a94 <SBUS_getData+0x5e8>
 8001760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001764:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001a98 <SBUS_getData+0x5ec>
 8001768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001770:	ee17 3a90 	vmov	r3, s15
 8001774:	b29b      	uxth	r3, r3
 8001776:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800177a:	b29a      	uxth	r2, r3
 800177c:	4bc3      	ldr	r3, [pc, #780]	@ (8001a8c <SBUS_getData+0x5e0>)
 800177e:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001780:	4bc2      	ldr	r3, [pc, #776]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001782:	889b      	ldrh	r3, [r3, #4]
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8001a90 <SBUS_getData+0x5e4>
 8001790:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001794:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001a94 <SBUS_getData+0x5e8>
 8001798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800179c:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001a98 <SBUS_getData+0x5ec>
 80017a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a8:	ee17 3a90 	vmov	r3, s15
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4bb5      	ldr	r3, [pc, #724]	@ (8001a8c <SBUS_getData+0x5e0>)
 80017b6:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 80017b8:	4bb4      	ldr	r3, [pc, #720]	@ (8001a8c <SBUS_getData+0x5e0>)
 80017ba:	88db      	ldrh	r3, [r3, #6]
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c4:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001a90 <SBUS_getData+0x5e4>
 80017c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017cc:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001a94 <SBUS_getData+0x5e8>
 80017d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d4:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001a98 <SBUS_getData+0x5ec>
 80017d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e0:	ee17 3a90 	vmov	r3, s15
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4ba7      	ldr	r3, [pc, #668]	@ (8001a8c <SBUS_getData+0x5e0>)
 80017ee:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80017f0:	4ba6      	ldr	r3, [pc, #664]	@ (8001a8c <SBUS_getData+0x5e0>)
 80017f2:	891b      	ldrh	r3, [r3, #8]
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fc:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001a90 <SBUS_getData+0x5e4>
 8001800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001804:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001a94 <SBUS_getData+0x5e8>
 8001808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180c:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001a98 <SBUS_getData+0x5ec>
 8001810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001818:	ee17 3a90 	vmov	r3, s15
 800181c:	b29b      	uxth	r3, r3
 800181e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b99      	ldr	r3, [pc, #612]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001826:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8001828:	4b98      	ldr	r3, [pc, #608]	@ (8001a8c <SBUS_getData+0x5e0>)
 800182a:	895b      	ldrh	r3, [r3, #10]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001834:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001a90 <SBUS_getData+0x5e4>
 8001838:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800183c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8001a94 <SBUS_getData+0x5e8>
 8001840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001844:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001a98 <SBUS_getData+0x5ec>
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001850:	ee17 3a90 	vmov	r3, s15
 8001854:	b29b      	uxth	r3, r3
 8001856:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a8c <SBUS_getData+0x5e0>)
 800185e:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001860:	4b8a      	ldr	r3, [pc, #552]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001862:	899b      	ldrh	r3, [r3, #12]
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001a90 <SBUS_getData+0x5e4>
 8001870:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001874:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001a94 <SBUS_getData+0x5e8>
 8001878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800187c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001a98 <SBUS_getData+0x5ec>
 8001880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001888:	ee17 3a90 	vmov	r3, s15
 800188c:	b29b      	uxth	r3, r3
 800188e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b7d      	ldr	r3, [pc, #500]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001896:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8001898:	4b7c      	ldr	r3, [pc, #496]	@ (8001a8c <SBUS_getData+0x5e0>)
 800189a:	89db      	ldrh	r3, [r3, #14]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a4:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001a90 <SBUS_getData+0x5e4>
 80018a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018ac:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001a94 <SBUS_getData+0x5e8>
 80018b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b4:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001a98 <SBUS_getData+0x5ec>
 80018b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c0:	ee17 3a90 	vmov	r3, s15
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b6f      	ldr	r3, [pc, #444]	@ (8001a8c <SBUS_getData+0x5e0>)
 80018ce:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80018d0:	4b6e      	ldr	r3, [pc, #440]	@ (8001a8c <SBUS_getData+0x5e0>)
 80018d2:	8a1b      	ldrh	r3, [r3, #16]
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018dc:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001a90 <SBUS_getData+0x5e4>
 80018e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018e4:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001a94 <SBUS_getData+0x5e8>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001a98 <SBUS_getData+0x5ec>
 80018f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f8:	ee17 3a90 	vmov	r3, s15
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b61      	ldr	r3, [pc, #388]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001906:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8001908:	4b60      	ldr	r3, [pc, #384]	@ (8001a8c <SBUS_getData+0x5e0>)
 800190a:	8a5b      	ldrh	r3, [r3, #18]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001914:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001a90 <SBUS_getData+0x5e4>
 8001918:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800191c:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001a94 <SBUS_getData+0x5e8>
 8001920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001924:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001a98 <SBUS_getData+0x5ec>
 8001928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001930:	ee17 3a90 	vmov	r3, s15
 8001934:	b29b      	uxth	r3, r3
 8001936:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <SBUS_getData+0x5e0>)
 800193e:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8001940:	4b52      	ldr	r3, [pc, #328]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001942:	8a9b      	ldrh	r3, [r3, #20]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194c:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001a90 <SBUS_getData+0x5e4>
 8001950:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001954:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001a94 <SBUS_getData+0x5e8>
 8001958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001a98 <SBUS_getData+0x5ec>
 8001960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001968:	ee17 3a90 	vmov	r3, s15
 800196c:	b29b      	uxth	r3, r3
 800196e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b45      	ldr	r3, [pc, #276]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001976:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8001978:	4b44      	ldr	r3, [pc, #272]	@ (8001a8c <SBUS_getData+0x5e0>)
 800197a:	8adb      	ldrh	r3, [r3, #22]
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001984:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001a90 <SBUS_getData+0x5e4>
 8001988:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800198c:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001a94 <SBUS_getData+0x5e8>
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001a98 <SBUS_getData+0x5ec>
 8001998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a0:	ee17 3a90 	vmov	r3, s15
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b37      	ldr	r3, [pc, #220]	@ (8001a8c <SBUS_getData+0x5e0>)
 80019ae:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 80019b0:	4b36      	ldr	r3, [pc, #216]	@ (8001a8c <SBUS_getData+0x5e0>)
 80019b2:	8b1b      	ldrh	r3, [r3, #24]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019bc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001a90 <SBUS_getData+0x5e4>
 80019c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019c4:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001a94 <SBUS_getData+0x5e8>
 80019c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019cc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001a98 <SBUS_getData+0x5ec>
 80019d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d8:	ee17 3a90 	vmov	r3, s15
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <SBUS_getData+0x5e0>)
 80019e6:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80019e8:	4b28      	ldr	r3, [pc, #160]	@ (8001a8c <SBUS_getData+0x5e0>)
 80019ea:	8b5b      	ldrh	r3, [r3, #26]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a90 <SBUS_getData+0x5e4>
 80019f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019fc:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001a94 <SBUS_getData+0x5e8>
 8001a00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a04:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001a98 <SBUS_getData+0x5ec>
 8001a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a10:	ee17 3a90 	vmov	r3, s15
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001a1e:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001a22:	8b9b      	ldrh	r3, [r3, #28]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001a90 <SBUS_getData+0x5e4>
 8001a30:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a34:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001a94 <SBUS_getData+0x5e8>
 8001a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001a98 <SBUS_getData+0x5ec>
 8001a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a48:	ee17 3a90 	vmov	r3, s15
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001a56:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <SBUS_getData+0x5e0>)
 8001a5a:	8bdb      	ldrh	r3, [r3, #30]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a64:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001a90 <SBUS_getData+0x5e4>
 8001a68:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a6c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001a94 <SBUS_getData+0x5e8>
 8001a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a74:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001a98 <SBUS_getData+0x5ec>
 8001a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a80:	ee17 3a90 	vmov	r3, s15
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a8a:	e007      	b.n	8001a9c <SBUS_getData+0x5f0>
 8001a8c:	24000014 	.word	0x24000014
 8001a90:	43b00000 	.word	0x43b00000
 8001a94:	44a80000 	.word	0x44a80000
 8001a98:	447a0000 	.word	0x447a0000
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <SBUS_getData+0x67c>)
 8001aa0:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 8001aa2:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <SBUS_getData+0x680>)
 8001aa4:	7ddb      	ldrb	r3, [r3, #23]
 8001aa6:	2b07      	cmp	r3, #7
 8001aa8:	d90a      	bls.n	8001ac0 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <SBUS_getData+0x680>)
 8001aac:	7ddb      	ldrb	r3, [r3, #23]
 8001aae:	3b08      	subs	r3, #8
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <SBUS_getData+0x680>)
 8001ab4:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = 1;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <SBUS_getData+0x67c>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001abe:	e003      	b.n	8001ac8 <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= 0;
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <SBUS_getData+0x67c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <SBUS_getData+0x680>)
 8001aca:	7ddb      	ldrb	r3, [r3, #23]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d90a      	bls.n	8001ae6 <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <SBUS_getData+0x680>)
 8001ad2:	7ddb      	ldrb	r3, [r3, #23]
 8001ad4:	3b04      	subs	r3, #4
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <SBUS_getData+0x680>)
 8001ada:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = 1;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <SBUS_getData+0x67c>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001ae4:	e003      	b.n	8001aee <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=0;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <SBUS_getData+0x67c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <SBUS_getData+0x680>)
 8001af0:	7ddb      	ldrb	r3, [r3, #23]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d90a      	bls.n	8001b0c <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <SBUS_getData+0x680>)
 8001af8:	7ddb      	ldrb	r3, [r3, #23]
 8001afa:	3b02      	subs	r3, #2
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <SBUS_getData+0x680>)
 8001b00:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=1;
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <SBUS_getData+0x67c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001b0a:	e003      	b.n	8001b14 <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=0;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <SBUS_getData+0x67c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21


	Radio_input.Interruptor_1=SBUS_UART_Rx[23];
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <SBUS_getData+0x680>)
 8001b16:	7dda      	ldrb	r2, [r3, #23]
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <SBUS_getData+0x67c>)
 8001b1a:	f883 2020 	strb.w	r2, [r3, #32]


	Temp_BypassFunct();
 8001b1e:	f7ff fc93 	bl	8001448 <Temp_BypassFunct>

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	24000014 	.word	0x24000014
 8001b2c:	24000160 	.word	0x24000160

08001b30 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8001b34:	2201      	movs	r2, #1
 8001b36:	4910      	ldr	r1, [pc, #64]	@ (8001b78 <SD_init+0x48>)
 8001b38:	4810      	ldr	r0, [pc, #64]	@ (8001b7c <SD_init+0x4c>)
 8001b3a:	f00f fb83 	bl	8011244 <f_mount>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <SD_init+0x50>)
 8001b44:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b46:	2213      	movs	r2, #19
 8001b48:	490e      	ldr	r1, [pc, #56]	@ (8001b84 <SD_init+0x54>)
 8001b4a:	480f      	ldr	r0, [pc, #60]	@ (8001b88 <SD_init+0x58>)
 8001b4c:	f00f fbc0 	bl	80112d0 <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8001b50:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <SD_init+0x58>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4619      	mov	r1, r3
 8001b56:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <SD_init+0x58>)
 8001b58:	f00f ffbe 	bl	8011ad8 <f_lseek>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b07      	ldr	r3, [pc, #28]	@ (8001b80 <SD_init+0x50>)
 8001b62:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,Pitch,Roll,Yaw,Alt,Pressure,Temp\n");
 8001b64:	4909      	ldr	r1, [pc, #36]	@ (8001b8c <SD_init+0x5c>)
 8001b66:	4808      	ldr	r0, [pc, #32]	@ (8001b88 <SD_init+0x58>)
 8001b68:	f010 fa52 	bl	8012010 <f_printf>
	  f_close(&fil);
 8001b6c:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <SD_init+0x58>)
 8001b6e:	f00f ff89 	bl	8011a84 <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	08012980 	.word	0x08012980
 8001b7c:	2400017c 	.word	0x2400017c
 8001b80:	240021e8 	.word	0x240021e8
 8001b84:	24000038 	.word	0x24000038
 8001b88:	240011b8 	.word	0x240011b8
 8001b8c:	08012984 	.word	0x08012984

08001b90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <MX_DMA_Init+0x3c>)
 8001b98:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <MX_DMA_Init+0x3c>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <MX_DMA_Init+0x3c>)
 8001ba8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	200b      	movs	r0, #11
 8001bba:	f001 fd4a 	bl	8003652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bbe:	200b      	movs	r0, #11
 8001bc0:	f001 fd61 	bl	8003686 <HAL_NVIC_EnableIRQ>

}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58024400 	.word	0x58024400

08001bd0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001c94 <MX_FDCAN1_Init+0xc4>)
 8001bd8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001bda:	4b2d      	ldr	r3, [pc, #180]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001be0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001be6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001bec:	4b28      	ldr	r3, [pc, #160]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001bf2:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001bfe:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001c04:	4b22      	ldr	r3, [pc, #136]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c06:	2202      	movs	r2, #2
 8001c08:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001c0a:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c42:	2204      	movs	r2, #4
 8001c44:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001c46:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c4e:	2204      	movs	r2, #4
 8001c50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c58:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c70:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c78:	2204      	movs	r2, #4
 8001c7a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c7c:	4804      	ldr	r0, [pc, #16]	@ (8001c90 <MX_FDCAN1_Init+0xc0>)
 8001c7e:	f004 fc73 	bl	8006568 <HAL_FDCAN_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001c88:	f000 fb00 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	240021ec 	.word	0x240021ec
 8001c94:	4000a000 	.word	0x4000a000

08001c98 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0ba      	sub	sp, #232	@ 0xe8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	22c0      	movs	r2, #192	@ 0xc0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f010 fce9 	bl	8012690 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d80 <HAL_FDCAN_MspInit+0xe8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d157      	bne.n	8001d78 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001cc8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001ce8:	23c0      	movs	r3, #192	@ 0xc0
 8001cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001cf4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001cf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	4618      	mov	r0, r3
 8001d02:	f006 fa8b 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001d0c:	f000 fabe 	bl	800228c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d10:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <HAL_FDCAN_MspInit+0xec>)
 8001d12:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001d16:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_FDCAN_MspInit+0xec>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_FDCAN_MspInit+0xec>)
 8001d22:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_FDCAN_MspInit+0xec>)
 8001d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d34:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <HAL_FDCAN_MspInit+0xec>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_FDCAN_MspInit+0xec>)
 8001d40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d4c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d66:	2309      	movs	r3, #9
 8001d68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <HAL_FDCAN_MspInit+0xf0>)
 8001d74:	f004 ff5c 	bl	8006c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001d78:	bf00      	nop
 8001d7a:	37e8      	adds	r7, #232	@ 0xe8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	4000a000 	.word	0x4000a000
 8001d84:	58024400 	.word	0x58024400
 8001d88:	58020000 	.word	0x58020000

08001d8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	4b48      	ldr	r3, [pc, #288]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001da4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001da8:	4a46      	ldr	r2, [pc, #280]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001db2:	4b44      	ldr	r3, [pc, #272]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001db4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4b40      	ldr	r3, [pc, #256]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001dc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001dd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001de0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001de4:	4a37      	ldr	r2, [pc, #220]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001dee:	4b35      	ldr	r3, [pc, #212]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001df0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001dfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e02:	4a30      	ldr	r2, [pc, #192]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001e20:	4829      	ldr	r0, [pc, #164]	@ (8001ec8 <MX_GPIO_Init+0x13c>)
 8001e22:	f005 f8b5 	bl	8006f90 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2110      	movs	r1, #16
 8001e2a:	4828      	ldr	r0, [pc, #160]	@ (8001ecc <MX_GPIO_Init+0x140>)
 8001e2c:	f005 f8b0 	bl	8006f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME_NSS_GPIO_Port, BME_NSS_Pin, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e36:	4826      	ldr	r0, [pc, #152]	@ (8001ed0 <MX_GPIO_Init+0x144>)
 8001e38:	f005 f8aa 	bl	8006f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2104      	movs	r1, #4
 8001e40:	4824      	ldr	r0, [pc, #144]	@ (8001ed4 <MX_GPIO_Init+0x148>)
 8001e42:	f005 f8a5 	bl	8006f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001e46:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001e4a:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	481a      	ldr	r0, [pc, #104]	@ (8001ec8 <MX_GPIO_Init+0x13c>)
 8001e60:	f004 fee6 	bl	8006c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8001e64:	2310      	movs	r3, #16
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4814      	ldr	r0, [pc, #80]	@ (8001ecc <MX_GPIO_Init+0x140>)
 8001e7c:	f004 fed8 	bl	8006c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME_NSS_Pin;
 8001e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BME_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <MX_GPIO_Init+0x144>)
 8001e9a:	f004 fec9 	bl	8006c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4807      	ldr	r0, [pc, #28]	@ (8001ed4 <MX_GPIO_Init+0x148>)
 8001eb6:	f004 febb 	bl	8006c30 <HAL_GPIO_Init>

}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	@ 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58020800 	.word	0x58020800
 8001ecc:	58020000 	.word	0x58020000
 8001ed0:	58020400 	.word	0x58020400
 8001ed4:	58020c00 	.word	0x58020c00

08001ed8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001ede:	4a1c      	ldr	r2, [pc, #112]	@ (8001f50 <MX_I2C3_Init+0x78>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f54 <MX_I2C3_Init+0x7c>)
 8001ee6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eee:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef4:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f12:	480e      	ldr	r0, [pc, #56]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001f14:	f005 f856 	bl	8006fc4 <HAL_I2C_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001f1e:	f000 f9b5 	bl	800228c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f22:	2100      	movs	r1, #0
 8001f24:	4809      	ldr	r0, [pc, #36]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001f26:	f005 f8e9 	bl	80070fc <HAL_I2CEx_ConfigAnalogFilter>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001f30:	f000 f9ac 	bl	800228c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f34:	2100      	movs	r1, #0
 8001f36:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <MX_I2C3_Init+0x74>)
 8001f38:	f005 f92b 	bl	8007192 <HAL_I2CEx_ConfigDigitalFilter>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001f42:	f000 f9a3 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2400228c 	.word	0x2400228c
 8001f50:	40005c00 	.word	0x40005c00
 8001f54:	20b0ccff 	.word	0x20b0ccff

08001f58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0bc      	sub	sp, #240	@ 0xf0
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	22c0      	movs	r2, #192	@ 0xc0
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f010 fb89 	bl	8012690 <memset>
  if(i2cHandle->Instance==I2C3)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a39      	ldr	r2, [pc, #228]	@ (8002068 <HAL_I2C_MspInit+0x110>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d16b      	bne.n	8002060 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f88:	f04f 0208 	mov.w	r2, #8
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9a:	f107 0318 	add.w	r3, r7, #24
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f006 f93c 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001faa:	f000 f96f 	bl	800228c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b2f      	ldr	r3, [pc, #188]	@ (800206c <HAL_I2C_MspInit+0x114>)
 8001fb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800206c <HAL_I2C_MspInit+0x114>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <HAL_I2C_MspInit+0x114>)
 8001fc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b27      	ldr	r3, [pc, #156]	@ (800206c <HAL_I2C_MspInit+0x114>)
 8001fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fd2:	4a26      	ldr	r2, [pc, #152]	@ (800206c <HAL_I2C_MspInit+0x114>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fdc:	4b23      	ldr	r3, [pc, #140]	@ (800206c <HAL_I2C_MspInit+0x114>)
 8001fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff2:	2312      	movs	r3, #18
 8001ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002004:	2304      	movs	r3, #4
 8002006:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800200e:	4619      	mov	r1, r3
 8002010:	4817      	ldr	r0, [pc, #92]	@ (8002070 <HAL_I2C_MspInit+0x118>)
 8002012:	f004 fe0d 	bl	8006c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002016:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800201a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201e:	2312      	movs	r3, #18
 8002020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002030:	2304      	movs	r3, #4
 8002032:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800203a:	4619      	mov	r1, r3
 800203c:	480d      	ldr	r0, [pc, #52]	@ (8002074 <HAL_I2C_MspInit+0x11c>)
 800203e:	f004 fdf7 	bl	8006c30 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_I2C_MspInit+0x114>)
 8002044:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002048:	4a08      	ldr	r2, [pc, #32]	@ (800206c <HAL_I2C_MspInit+0x114>)
 800204a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800204e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_I2C_MspInit+0x114>)
 8002054:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002060:	bf00      	nop
 8002062:	37f0      	adds	r7, #240	@ 0xf0
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40005c00 	.word	0x40005c00
 800206c:	58024400 	.word	0x58024400
 8002070:	58020800 	.word	0x58020800
 8002074:	58020000 	.word	0x58020000

08002078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800207c:	f000 f8da 	bl	8002234 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002080:	f001 f956 	bl	8003330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002084:	f000 f830 	bl	80020e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002088:	f7ff fe80 	bl	8001d8c <MX_GPIO_Init>
  MX_DMA_Init();
 800208c:	f7ff fd80 	bl	8001b90 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002090:	f7ff fd9e 	bl	8001bd0 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002094:	f7ff ff20 	bl	8001ed8 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002098:	f000 f8fe 	bl	8002298 <MX_SPI1_Init>
  MX_SPI2_Init();
 800209c:	f000 f952 	bl	8002344 <MX_SPI2_Init>
  MX_SPI3_Init();
 80020a0:	f000 f9a6 	bl	80023f0 <MX_SPI3_Init>
  MX_TIM2_Init();
 80020a4:	f000 fbfc 	bl	80028a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80020a8:	f000 fc76 	bl	8002998 <MX_TIM3_Init>
  MX_TIM4_Init();
 80020ac:	f000 fcda 	bl	8002a64 <MX_TIM4_Init>
  MX_UART4_Init();
 80020b0:	f000 feea 	bl	8002e88 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80020b4:	f000 ff34 	bl	8002f20 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80020b8:	f000 ff82 	bl	8002fc0 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 80020bc:	f000 fd88 	bl	8002bd0 <MX_TIM13_Init>
  MX_FATFS_Init();
 80020c0:	f00c f944 	bl	800e34c <MX_FATFS_Init>
  MX_TIM6_Init();
 80020c4:	f000 fd4a 	bl	8002b5c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 80020c8:	f7fe ffa2 	bl	8001010 <BMP280_init>
  SD_init();
 80020cc:	f7ff fd30 	bl	8001b30 <SD_init>
  SBUS_init();
 80020d0:	f7ff f960 	bl	8001394 <SBUS_init>
  LED_Init();
 80020d4:	f7fe fffc 	bl	80010d0 <LED_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 80020d8:	f7fe ffc0 	bl	800105c <BMP280_calculate>

	  HAL_Delay(50);
 80020dc:	2032      	movs	r0, #50	@ 0x32
 80020de:	f001 f9b9 	bl	8003454 <HAL_Delay>
	  BMP280_calculate();
 80020e2:	bf00      	nop
 80020e4:	e7f8      	b.n	80020d8 <main+0x60>
	...

080020e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b09c      	sub	sp, #112	@ 0x70
 80020ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f2:	224c      	movs	r2, #76	@ 0x4c
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f010 faca 	bl	8012690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2220      	movs	r2, #32
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f010 fac4 	bl	8012690 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002108:	4b30      	ldr	r3, [pc, #192]	@ (80021cc <SystemClock_Config+0xe4>)
 800210a:	f04f 32ff 	mov.w	r2, #4294967295
 800210e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002112:	2002      	movs	r0, #2
 8002114:	f005 f88a 	bl	800722c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002118:	2300      	movs	r3, #0
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	4b2c      	ldr	r3, [pc, #176]	@ (80021d0 <SystemClock_Config+0xe8>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a2b      	ldr	r2, [pc, #172]	@ (80021d0 <SystemClock_Config+0xe8>)
 8002122:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <SystemClock_Config+0xe8>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002134:	bf00      	nop
 8002136:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <SystemClock_Config+0xe8>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800213e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002142:	d1f8      	bne.n	8002136 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002144:	2302      	movs	r3, #2
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002148:	2301      	movs	r3, #1
 800214a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800214c:	2340      	movs	r3, #64	@ 0x40
 800214e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002150:	2302      	movs	r3, #2
 8002152:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002154:	2300      	movs	r3, #0
 8002156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002158:	2304      	movs	r3, #4
 800215a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800215c:	2323      	movs	r3, #35	@ 0x23
 800215e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002160:	2302      	movs	r3, #2
 8002162:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002164:	2302      	movs	r3, #2
 8002166:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002168:	2302      	movs	r3, #2
 800216a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800216c:	230c      	movs	r3, #12
 800216e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002170:	2300      	movs	r3, #0
 8002172:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800217c:	4618      	mov	r0, r3
 800217e:	f005 f88f 	bl	80072a0 <HAL_RCC_OscConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002188:	f000 f880 	bl	800228c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218c:	233f      	movs	r3, #63	@ 0x3f
 800218e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002190:	2303      	movs	r3, #3
 8002192:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800219c:	2340      	movs	r3, #64	@ 0x40
 800219e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80021a0:	2340      	movs	r3, #64	@ 0x40
 80021a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80021a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80021aa:	2340      	movs	r3, #64	@ 0x40
 80021ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	2106      	movs	r1, #6
 80021b2:	4618      	mov	r0, r3
 80021b4:	f005 fca6 	bl	8007b04 <HAL_RCC_ClockConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80021be:	f000 f865 	bl	800228c <Error_Handler>
  }
}
 80021c2:	bf00      	nop
 80021c4:	3770      	adds	r7, #112	@ 0x70
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	58024400 	.word	0x58024400
 80021d0:	58024800 	.word	0x58024800

080021d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a08      	ldr	r2, [pc, #32]	@ (8002204 <HAL_UART_RxCpltCallback+0x30>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d109      	bne.n	80021fa <HAL_UART_RxCpltCallback+0x26>
		SBUS_Receive(SBUS_RxBuffer);
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_UART_RxCpltCallback+0x34>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f8e0 	bl	80013b0 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 80021f0:	2201      	movs	r2, #1
 80021f2:	4905      	ldr	r1, [pc, #20]	@ (8002208 <HAL_UART_RxCpltCallback+0x34>)
 80021f4:	4805      	ldr	r0, [pc, #20]	@ (800220c <HAL_UART_RxCpltCallback+0x38>)
 80021f6:	f00a f8af 	bl	800c358 <HAL_UART_Receive_DMA>
	}


}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40011000 	.word	0x40011000
 8002208:	24000179 	.word	0x24000179
 800220c:	24002688 	.word	0x24002688

08002210 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x16>
		LED_Tasks();
 8002222:	f7ff f805 	bl	8001230 <LED_Tasks>
	}

}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40001000 	.word	0x40001000

08002234 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800223a:	463b      	mov	r3, r7
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002246:	f001 fa39 	bl	80036bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800224a:	2301      	movs	r3, #1
 800224c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800224e:	2300      	movs	r3, #0
 8002250:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002256:	231f      	movs	r3, #31
 8002258:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800225a:	2387      	movs	r3, #135	@ 0x87
 800225c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800225e:	2300      	movs	r3, #0
 8002260:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002262:	2300      	movs	r3, #0
 8002264:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002266:	2301      	movs	r3, #1
 8002268:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800226a:	2301      	movs	r3, #1
 800226c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002276:	463b      	mov	r3, r7
 8002278:	4618      	mov	r0, r3
 800227a:	f001 fa57 	bl	800372c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800227e:	2004      	movs	r0, #4
 8002280:	f001 fa34 	bl	80036ec <HAL_MPU_Enable>

}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002290:	b672      	cpsid	i
}
 8002292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <Error_Handler+0x8>

08002298 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800229c:	4b27      	ldr	r3, [pc, #156]	@ (800233c <MX_SPI1_Init+0xa4>)
 800229e:	4a28      	ldr	r2, [pc, #160]	@ (8002340 <MX_SPI1_Init+0xa8>)
 80022a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022a2:	4b26      	ldr	r3, [pc, #152]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022aa:	4b24      	ldr	r3, [pc, #144]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022b0:	4b22      	ldr	r3, [pc, #136]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022b2:	2207      	movs	r2, #7
 80022b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b6:	4b21      	ldr	r3, [pc, #132]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022bc:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022c2:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80022ca:	4b1c      	ldr	r3, [pc, #112]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022cc:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80022d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d8:	4b18      	ldr	r3, [pc, #96]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022de:	4b17      	ldr	r3, [pc, #92]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80022e4:	4b15      	ldr	r3, [pc, #84]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022ea:	4b14      	ldr	r3, [pc, #80]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022f2:	4b12      	ldr	r3, [pc, #72]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022f8:	4b10      	ldr	r3, [pc, #64]	@ (800233c <MX_SPI1_Init+0xa4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022fe:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <MX_SPI1_Init+0xa4>)
 8002300:	2200      	movs	r2, #0
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <MX_SPI1_Init+0xa4>)
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <MX_SPI1_Init+0xa4>)
 800230c:	2200      	movs	r2, #0
 800230e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002310:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <MX_SPI1_Init+0xa4>)
 8002312:	2200      	movs	r2, #0
 8002314:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <MX_SPI1_Init+0xa4>)
 8002318:	2200      	movs	r2, #0
 800231a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800231c:	4b07      	ldr	r3, [pc, #28]	@ (800233c <MX_SPI1_Init+0xa4>)
 800231e:	2200      	movs	r2, #0
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <MX_SPI1_Init+0xa4>)
 8002324:	2200      	movs	r2, #0
 8002326:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002328:	4804      	ldr	r0, [pc, #16]	@ (800233c <MX_SPI1_Init+0xa4>)
 800232a:	f007 fd57 	bl	8009ddc <HAL_SPI_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002334:	f7ff ffaa 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	240022e0 	.word	0x240022e0
 8002340:	40013000 	.word	0x40013000

08002344 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002348:	4b27      	ldr	r3, [pc, #156]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 800234a:	4a28      	ldr	r2, [pc, #160]	@ (80023ec <MX_SPI2_Init+0xa8>)
 800234c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800234e:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 8002350:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002354:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002356:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800235c:	4b22      	ldr	r3, [pc, #136]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 800235e:	2207      	movs	r2, #7
 8002360:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002362:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002368:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800236e:	4b1e      	ldr	r3, [pc, #120]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 8002370:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002374:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002376:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 8002378:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800237c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002384:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238a:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 800238c:	2200      	movs	r2, #0
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 8002392:	2200      	movs	r2, #0
 8002394:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002396:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 8002398:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800239c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023a4:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023aa:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023b6:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023c8:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023d4:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <MX_SPI2_Init+0xa4>)
 80023d6:	f007 fd01 	bl	8009ddc <HAL_SPI_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80023e0:	f7ff ff54 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	24002368 	.word	0x24002368
 80023ec:	40003800 	.word	0x40003800

080023f0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80023f4:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <MX_SPI3_Init+0xa4>)
 80023f6:	4a28      	ldr	r2, [pc, #160]	@ (8002498 <MX_SPI3_Init+0xa8>)
 80023f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023fa:	4b26      	ldr	r3, [pc, #152]	@ (8002494 <MX_SPI3_Init+0xa4>)
 80023fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002400:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002402:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002408:	4b22      	ldr	r3, [pc, #136]	@ (8002494 <MX_SPI3_Init+0xa4>)
 800240a:	2207      	movs	r2, #7
 800240c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800240e:	4b21      	ldr	r3, [pc, #132]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002414:	4b1f      	ldr	r3, [pc, #124]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800241a:	4b1e      	ldr	r3, [pc, #120]	@ (8002494 <MX_SPI3_Init+0xa4>)
 800241c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002420:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002422:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002424:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8002428:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800242a:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <MX_SPI3_Init+0xa4>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002430:	4b18      	ldr	r3, [pc, #96]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002436:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002438:	2200      	movs	r2, #0
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800243c:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <MX_SPI3_Init+0xa4>)
 800243e:	2200      	movs	r2, #0
 8002440:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002442:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002444:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002448:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800244a:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <MX_SPI3_Init+0xa4>)
 800244c:	2200      	movs	r2, #0
 800244e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002450:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002452:	2200      	movs	r2, #0
 8002454:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002456:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800245c:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <MX_SPI3_Init+0xa4>)
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002462:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002464:	2200      	movs	r2, #0
 8002466:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002468:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <MX_SPI3_Init+0xa4>)
 800246a:	2200      	movs	r2, #0
 800246c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800246e:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002470:	2200      	movs	r2, #0
 8002472:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002474:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002476:	2200      	movs	r2, #0
 8002478:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <MX_SPI3_Init+0xa4>)
 800247c:	2200      	movs	r2, #0
 800247e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002480:	4804      	ldr	r0, [pc, #16]	@ (8002494 <MX_SPI3_Init+0xa4>)
 8002482:	f007 fcab 	bl	8009ddc <HAL_SPI_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800248c:	f7ff fefe 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	240023f0 	.word	0x240023f0
 8002498:	40003c00 	.word	0x40003c00

0800249c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0be      	sub	sp, #248	@ 0xf8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b4:	f107 0320 	add.w	r3, r7, #32
 80024b8:	22c0      	movs	r2, #192	@ 0xc0
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f010 f8e7 	bl	8012690 <memset>
  if(spiHandle->Instance==SPI1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a73      	ldr	r2, [pc, #460]	@ (8002694 <HAL_SPI_MspInit+0x1f8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d146      	bne.n	800255a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80024cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024de:	f107 0320 	add.w	r3, r7, #32
 80024e2:	4618      	mov	r0, r3
 80024e4:	f005 fe9a 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80024ee:	f7ff fecd 	bl	800228c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024f2:	4b69      	ldr	r3, [pc, #420]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 80024f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80024f8:	4a67      	ldr	r2, [pc, #412]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 80024fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024fe:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002502:	4b65      	ldr	r3, [pc, #404]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 8002504:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	4b61      	ldr	r3, [pc, #388]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 8002512:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002516:	4a60      	ldr	r2, [pc, #384]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002520:	4b5d      	ldr	r3, [pc, #372]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 8002522:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800252e:	23e0      	movs	r3, #224	@ 0xe0
 8002530:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002546:	2305      	movs	r3, #5
 8002548:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002550:	4619      	mov	r1, r3
 8002552:	4852      	ldr	r0, [pc, #328]	@ (800269c <HAL_SPI_MspInit+0x200>)
 8002554:	f004 fb6c 	bl	8006c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002558:	e098      	b.n	800268c <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a50      	ldr	r2, [pc, #320]	@ (80026a0 <HAL_SPI_MspInit+0x204>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d147      	bne.n	80025f4 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002564:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002570:	2300      	movs	r3, #0
 8002572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002576:	f107 0320 	add.w	r3, r7, #32
 800257a:	4618      	mov	r0, r3
 800257c:	f005 fe4e 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8002586:	f7ff fe81 	bl	800228c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800258a:	4b43      	ldr	r3, [pc, #268]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 800258c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002590:	4a41      	ldr	r2, [pc, #260]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 8002592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002596:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800259a:	4b3f      	ldr	r3, [pc, #252]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 800259c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80025a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 80025aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80025b8:	4b37      	ldr	r3, [pc, #220]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 80025ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 80025c6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80025ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025e0:	2305      	movs	r3, #5
 80025e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025ea:	4619      	mov	r1, r3
 80025ec:	482d      	ldr	r0, [pc, #180]	@ (80026a4 <HAL_SPI_MspInit+0x208>)
 80025ee:	f004 fb1f 	bl	8006c30 <HAL_GPIO_Init>
}
 80025f2:	e04b      	b.n	800268c <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI3)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2b      	ldr	r2, [pc, #172]	@ (80026a8 <HAL_SPI_MspInit+0x20c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d146      	bne.n	800268c <HAL_SPI_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80025fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002610:	f107 0320 	add.w	r3, r7, #32
 8002614:	4618      	mov	r0, r3
 8002616:	f005 fe01 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 8002620:	f7ff fe34 	bl	800228c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002624:	4b1c      	ldr	r3, [pc, #112]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 8002626:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800262a:	4a1b      	ldr	r2, [pc, #108]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 800262c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002630:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002634:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 8002636:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800263a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 8002644:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002648:	4a13      	ldr	r2, [pc, #76]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_SPI_MspInit+0x1fc>)
 8002654:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002660:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002664:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800267a:	2306      	movs	r3, #6
 800267c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002680:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002684:	4619      	mov	r1, r3
 8002686:	4809      	ldr	r0, [pc, #36]	@ (80026ac <HAL_SPI_MspInit+0x210>)
 8002688:	f004 fad2 	bl	8006c30 <HAL_GPIO_Init>
}
 800268c:	bf00      	nop
 800268e:	37f8      	adds	r7, #248	@ 0xf8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40013000 	.word	0x40013000
 8002698:	58024400 	.word	0x58024400
 800269c:	58020000 	.word	0x58020000
 80026a0:	40003800 	.word	0x40003800
 80026a4:	58020400 	.word	0x58020400
 80026a8:	40003c00 	.word	0x40003c00
 80026ac:	58020800 	.word	0x58020800

080026b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_MspInit+0x30>)
 80026b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80026bc:	4a08      	ldr	r2, [pc, #32]	@ (80026e0 <HAL_MspInit+0x30>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_MspInit+0x30>)
 80026c8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	58024400 	.word	0x58024400

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <NMI_Handler+0x4>

080026ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <HardFault_Handler+0x4>

080026f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <MemManage_Handler+0x4>

080026fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <BusFault_Handler+0x4>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <UsageFault_Handler+0x4>

0800270c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <SysTick_Handler+0x34>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <SysTick_Handler+0x18>
	    Timer1--;
 8002744:	4b09      	ldr	r3, [pc, #36]	@ (800276c <SysTick_Handler+0x34>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b07      	ldr	r3, [pc, #28]	@ (800276c <SysTick_Handler+0x34>)
 800274e:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8002750:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <SysTick_Handler+0x38>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <SysTick_Handler+0x2c>
	    Timer2--;
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <SysTick_Handler+0x38>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b03      	ldr	r3, [pc, #12]	@ (8002770 <SysTick_Handler+0x38>)
 8002762:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002764:	f000 fe56 	bl	8003414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	24002834 	.word	0x24002834
 8002770:	24002836 	.word	0x24002836

08002774 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <DMA1_Stream0_IRQHandler+0x10>)
 800277a:	f002 fb73 	bl	8004e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	240027b0 	.word	0x240027b0

08002788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <USART1_IRQHandler+0x10>)
 800278e:	f009 fe2f 	bl	800c3f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	24002688 	.word	0x24002688

0800279c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <TIM6_DAC_IRQHandler+0x10>)
 80027a2:	f008 fef7 	bl	800b594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2400255c 	.word	0x2400255c

080027b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027b4:	4b32      	ldr	r3, [pc, #200]	@ (8002880 <SystemInit+0xd0>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	4a31      	ldr	r2, [pc, #196]	@ (8002880 <SystemInit+0xd0>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002884 <SystemInit+0xd4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d807      	bhi.n	80027e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002884 <SystemInit+0xd4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 030f 	bic.w	r3, r3, #15
 80027d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002884 <SystemInit+0xd4>)
 80027da:	f043 0303 	orr.w	r3, r3, #3
 80027de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027e0:	4b29      	ldr	r3, [pc, #164]	@ (8002888 <SystemInit+0xd8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a28      	ldr	r2, [pc, #160]	@ (8002888 <SystemInit+0xd8>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027ec:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <SystemInit+0xd8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027f2:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <SystemInit+0xd8>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4924      	ldr	r1, [pc, #144]	@ (8002888 <SystemInit+0xd8>)
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <SystemInit+0xdc>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027fe:	4b21      	ldr	r3, [pc, #132]	@ (8002884 <SystemInit+0xd4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <SystemInit+0xd4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 030f 	bic.w	r3, r3, #15
 8002812:	4a1c      	ldr	r2, [pc, #112]	@ (8002884 <SystemInit+0xd4>)
 8002814:	f043 0303 	orr.w	r3, r3, #3
 8002818:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800281a:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <SystemInit+0xd8>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002820:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <SystemInit+0xd8>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <SystemInit+0xd8>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800282c:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <SystemInit+0xd8>)
 800282e:	4a18      	ldr	r2, [pc, #96]	@ (8002890 <SystemInit+0xe0>)
 8002830:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002832:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <SystemInit+0xd8>)
 8002834:	4a17      	ldr	r2, [pc, #92]	@ (8002894 <SystemInit+0xe4>)
 8002836:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002838:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <SystemInit+0xd8>)
 800283a:	4a17      	ldr	r2, [pc, #92]	@ (8002898 <SystemInit+0xe8>)
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800283e:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <SystemInit+0xd8>)
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <SystemInit+0xd8>)
 8002846:	4a14      	ldr	r2, [pc, #80]	@ (8002898 <SystemInit+0xe8>)
 8002848:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800284a:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <SystemInit+0xd8>)
 800284c:	2200      	movs	r2, #0
 800284e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002850:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <SystemInit+0xd8>)
 8002852:	4a11      	ldr	r2, [pc, #68]	@ (8002898 <SystemInit+0xe8>)
 8002854:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002856:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <SystemInit+0xd8>)
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <SystemInit+0xd8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <SystemInit+0xd8>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002866:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002868:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <SystemInit+0xd8>)
 800286a:	2200      	movs	r2, #0
 800286c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800286e:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <SystemInit+0xec>)
 8002870:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002874:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00
 8002884:	52002000 	.word	0x52002000
 8002888:	58024400 	.word	0x58024400
 800288c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002890:	02020200 	.word	0x02020200
 8002894:	01ff0000 	.word	0x01ff0000
 8002898:	01010280 	.word	0x01010280
 800289c:	52004000 	.word	0x52004000

080028a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028b2:	463b      	mov	r3, r7
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
 80028c0:	615a      	str	r2, [r3, #20]
 80028c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028c4:	4b33      	ldr	r3, [pc, #204]	@ (8002994 <MX_TIM2_Init+0xf4>)
 80028c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 80028cc:	4b31      	ldr	r3, [pc, #196]	@ (8002994 <MX_TIM2_Init+0xf4>)
 80028ce:	f240 1217 	movw	r2, #279	@ 0x117
 80028d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002994 <MX_TIM2_Init+0xf4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80028da:	4b2e      	ldr	r3, [pc, #184]	@ (8002994 <MX_TIM2_Init+0xf4>)
 80028dc:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80028e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <MX_TIM2_Init+0xf4>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002994 <MX_TIM2_Init+0xf4>)
 80028ea:	2280      	movs	r2, #128	@ 0x80
 80028ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028ee:	4829      	ldr	r0, [pc, #164]	@ (8002994 <MX_TIM2_Init+0xf4>)
 80028f0:	f008 fcea 	bl	800b2c8 <HAL_TIM_PWM_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80028fa:	f7ff fcc7 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002906:	f107 031c 	add.w	r3, r7, #28
 800290a:	4619      	mov	r1, r3
 800290c:	4821      	ldr	r0, [pc, #132]	@ (8002994 <MX_TIM2_Init+0xf4>)
 800290e:	f009 fc27 	bl	800c160 <HAL_TIMEx_MasterConfigSynchronization>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002918:	f7ff fcb8 	bl	800228c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800291c:	2360      	movs	r3, #96	@ 0x60
 800291e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800292c:	463b      	mov	r3, r7
 800292e:	2200      	movs	r2, #0
 8002930:	4619      	mov	r1, r3
 8002932:	4818      	ldr	r0, [pc, #96]	@ (8002994 <MX_TIM2_Init+0xf4>)
 8002934:	f008 ff36 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800293e:	f7ff fca5 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002942:	463b      	mov	r3, r7
 8002944:	2204      	movs	r2, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4812      	ldr	r0, [pc, #72]	@ (8002994 <MX_TIM2_Init+0xf4>)
 800294a:	f008 ff2b 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002954:	f7ff fc9a 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002958:	463b      	mov	r3, r7
 800295a:	2208      	movs	r2, #8
 800295c:	4619      	mov	r1, r3
 800295e:	480d      	ldr	r0, [pc, #52]	@ (8002994 <MX_TIM2_Init+0xf4>)
 8002960:	f008 ff20 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 800296a:	f7ff fc8f 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800296e:	463b      	mov	r3, r7
 8002970:	220c      	movs	r2, #12
 8002972:	4619      	mov	r1, r3
 8002974:	4807      	ldr	r0, [pc, #28]	@ (8002994 <MX_TIM2_Init+0xf4>)
 8002976:	f008 ff15 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002980:	f7ff fc84 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002984:	4803      	ldr	r0, [pc, #12]	@ (8002994 <MX_TIM2_Init+0xf4>)
 8002986:	f000 f9d5 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 800298a:	bf00      	nop
 800298c:	3728      	adds	r7, #40	@ 0x28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	24002478 	.word	0x24002478

08002998 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299e:	f107 031c 	add.w	r3, r7, #28
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029aa:	463b      	mov	r3, r7
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	615a      	str	r2, [r3, #20]
 80029ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029bc:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 80029be:	4a28      	ldr	r2, [pc, #160]	@ (8002a60 <MX_TIM3_Init+0xc8>)
 80029c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 80029c2:	4b26      	ldr	r3, [pc, #152]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 80029c4:	f240 1217 	movw	r2, #279	@ 0x117
 80029c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ca:	4b24      	ldr	r3, [pc, #144]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80029d0:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 80029d2:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80029d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d8:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029de:	4b1f      	ldr	r3, [pc, #124]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 80029e0:	2280      	movs	r2, #128	@ 0x80
 80029e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029e4:	481d      	ldr	r0, [pc, #116]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 80029e6:	f008 fc6f 	bl	800b2c8 <HAL_TIM_PWM_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80029f0:	f7ff fc4c 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	4619      	mov	r1, r3
 8002a02:	4816      	ldr	r0, [pc, #88]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 8002a04:	f009 fbac 	bl	800c160 <HAL_TIMEx_MasterConfigSynchronization>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002a0e:	f7ff fc3d 	bl	800228c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a12:	2360      	movs	r3, #96	@ 0x60
 8002a14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a22:	463b      	mov	r3, r7
 8002a24:	2200      	movs	r2, #0
 8002a26:	4619      	mov	r1, r3
 8002a28:	480c      	ldr	r0, [pc, #48]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 8002a2a:	f008 febb 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002a34:	f7ff fc2a 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a38:	463b      	mov	r3, r7
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4807      	ldr	r0, [pc, #28]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 8002a40:	f008 feb0 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002a4a:	f7ff fc1f 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a4e:	4803      	ldr	r0, [pc, #12]	@ (8002a5c <MX_TIM3_Init+0xc4>)
 8002a50:	f000 f970 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 8002a54:	bf00      	nop
 8002a56:	3728      	adds	r7, #40	@ 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	240024c4 	.word	0x240024c4
 8002a60:	40000400 	.word	0x40000400

08002a64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a76:	463b      	mov	r3, r7
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
 8002a84:	615a      	str	r2, [r3, #20]
 8002a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a88:	4b32      	ldr	r3, [pc, #200]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002a8a:	4a33      	ldr	r2, [pc, #204]	@ (8002b58 <MX_TIM4_Init+0xf4>)
 8002a8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002a8e:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002a90:	f240 1217 	movw	r2, #279	@ 0x117
 8002a94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a96:	4b2f      	ldr	r3, [pc, #188]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002a9e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002aa2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002aac:	2280      	movs	r2, #128	@ 0x80
 8002aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ab0:	4828      	ldr	r0, [pc, #160]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002ab2:	f008 fc09 	bl	800b2c8 <HAL_TIM_PWM_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002abc:	f7ff fbe6 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4821      	ldr	r0, [pc, #132]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002ad0:	f009 fb46 	bl	800c160 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002ada:	f7ff fbd7 	bl	800228c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ade:	2360      	movs	r3, #96	@ 0x60
 8002ae0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aee:	463b      	mov	r3, r7
 8002af0:	2200      	movs	r2, #0
 8002af2:	4619      	mov	r1, r3
 8002af4:	4817      	ldr	r0, [pc, #92]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002af6:	f008 fe55 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002b00:	f7ff fbc4 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b04:	463b      	mov	r3, r7
 8002b06:	2204      	movs	r2, #4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4812      	ldr	r0, [pc, #72]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002b0c:	f008 fe4a 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002b16:	f7ff fbb9 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	4619      	mov	r1, r3
 8002b20:	480c      	ldr	r0, [pc, #48]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002b22:	f008 fe3f 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002b2c:	f7ff fbae 	bl	800228c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b30:	463b      	mov	r3, r7
 8002b32:	220c      	movs	r2, #12
 8002b34:	4619      	mov	r1, r3
 8002b36:	4807      	ldr	r0, [pc, #28]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002b38:	f008 fe34 	bl	800b7a4 <HAL_TIM_PWM_ConfigChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002b42:	f7ff fba3 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b46:	4803      	ldr	r0, [pc, #12]	@ (8002b54 <MX_TIM4_Init+0xf0>)
 8002b48:	f000 f8f4 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 8002b4c:	bf00      	nop
 8002b4e:	3728      	adds	r7, #40	@ 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	24002510 	.word	0x24002510
 8002b58:	40000800 	.word	0x40000800

08002b5c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <MX_TIM6_Init+0x6c>)
 8002b6e:	4a17      	ldr	r2, [pc, #92]	@ (8002bcc <MX_TIM6_Init+0x70>)
 8002b70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <MX_TIM6_Init+0x6c>)
 8002b74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7a:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <MX_TIM6_Init+0x6c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8002b80:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <MX_TIM6_Init+0x6c>)
 8002b82:	f240 1217 	movw	r2, #279	@ 0x117
 8002b86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b88:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <MX_TIM6_Init+0x6c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b8e:	480e      	ldr	r0, [pc, #56]	@ (8002bc8 <MX_TIM6_Init+0x6c>)
 8002b90:	f008 facb 	bl	800b12a <HAL_TIM_Base_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002b9a:	f7ff fb77 	bl	800228c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4807      	ldr	r0, [pc, #28]	@ (8002bc8 <MX_TIM6_Init+0x6c>)
 8002bac:	f009 fad8 	bl	800c160 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002bb6:	f7ff fb69 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002bba:	4803      	ldr	r0, [pc, #12]	@ (8002bc8 <MX_TIM6_Init+0x6c>)
 8002bbc:	f008 fb0c 	bl	800b1d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	2400255c 	.word	0x2400255c
 8002bcc:	40001000 	.word	0x40001000

08002bd0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <MX_TIM13_Init+0x40>)
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002c14 <MX_TIM13_Init+0x44>)
 8002bd8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <MX_TIM13_Init+0x40>)
 8002bdc:	f240 1217 	movw	r2, #279	@ 0x117
 8002be0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <MX_TIM13_Init+0x40>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002be8:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <MX_TIM13_Init+0x40>)
 8002bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bee:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf0:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <MX_TIM13_Init+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <MX_TIM13_Init+0x40>)
 8002bf8:	2280      	movs	r2, #128	@ 0x80
 8002bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002bfc:	4804      	ldr	r0, [pc, #16]	@ (8002c10 <MX_TIM13_Init+0x40>)
 8002bfe:	f008 fa94 	bl	800b12a <HAL_TIM_Base_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002c08:	f7ff fb40 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	240025a8 	.word	0x240025a8
 8002c14:	40001c00 	.word	0x40001c00

08002c18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c28:	d10f      	bne.n	8002c4a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c48:	e028      	b.n	8002c9c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a17      	ldr	r2, [pc, #92]	@ (8002cac <HAL_TIM_PWM_MspInit+0x94>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d10f      	bne.n	8002c74 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c54:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c56:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c5a:	4a13      	ldr	r2, [pc, #76]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002c64:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c66:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]
}
 8002c72:	e013      	b.n	8002c9c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb0 <HAL_TIM_PWM_MspInit+0x98>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10e      	bne.n	8002c9c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c80:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c84:	4a08      	ldr	r2, [pc, #32]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_TIM_PWM_MspInit+0x90>)
 8002c90:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	58024400 	.word	0x58024400
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800

08002cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a19      	ldr	r2, [pc, #100]	@ (8002d28 <HAL_TIM_Base_MspInit+0x74>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d117      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cc6:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <HAL_TIM_Base_MspInit+0x78>)
 8002cc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ccc:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <HAL_TIM_Base_MspInit+0x78>)
 8002cce:	f043 0310 	orr.w	r3, r3, #16
 8002cd2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <HAL_TIM_Base_MspInit+0x78>)
 8002cd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2036      	movs	r0, #54	@ 0x36
 8002cea:	f000 fcb2 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cee:	2036      	movs	r0, #54	@ 0x36
 8002cf0:	f000 fcc9 	bl	8003686 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002cf4:	e013      	b.n	8002d1e <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM13)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8002d30 <HAL_TIM_Base_MspInit+0x7c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10e      	bne.n	8002d1e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002d00:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <HAL_TIM_Base_MspInit+0x78>)
 8002d02:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002d06:	4a09      	ldr	r2, [pc, #36]	@ (8002d2c <HAL_TIM_Base_MspInit+0x78>)
 8002d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d0c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_TIM_Base_MspInit+0x78>)
 8002d12:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40001000 	.word	0x40001000
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	40001c00 	.word	0x40001c00

08002d34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	@ 0x30
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d54:	d13f      	bne.n	8002dd6 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	4b47      	ldr	r3, [pc, #284]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002d58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d5c:	4a45      	ldr	r2, [pc, #276]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d66:	4b43      	ldr	r3, [pc, #268]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002d68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d74:	4b3f      	ldr	r3, [pc, #252]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002d76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d84:	4b3b      	ldr	r3, [pc, #236]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002d92:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002da4:	2301      	movs	r3, #1
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	f107 031c 	add.w	r3, r7, #28
 8002dac:	4619      	mov	r1, r3
 8002dae:	4832      	ldr	r0, [pc, #200]	@ (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002db0:	f003 ff3e 	bl	8006c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002db4:	2308      	movs	r3, #8
 8002db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc8:	f107 031c 	add.w	r3, r7, #28
 8002dcc:	4619      	mov	r1, r3
 8002dce:	482b      	ldr	r0, [pc, #172]	@ (8002e7c <HAL_TIM_MspPostInit+0x148>)
 8002dd0:	f003 ff2e 	bl	8006c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002dd4:	e049      	b.n	8002e6a <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a29      	ldr	r2, [pc, #164]	@ (8002e80 <HAL_TIM_MspPostInit+0x14c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d11f      	bne.n	8002e20 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de0:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002de2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002de6:	4a23      	ldr	r2, [pc, #140]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002df0:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002df2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002dfe:	2330      	movs	r3, #48	@ 0x30
 8002e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e12:	f107 031c 	add.w	r3, r7, #28
 8002e16:	4619      	mov	r1, r3
 8002e18:	4818      	ldr	r0, [pc, #96]	@ (8002e7c <HAL_TIM_MspPostInit+0x148>)
 8002e1a:	f003 ff09 	bl	8006c30 <HAL_GPIO_Init>
}
 8002e1e:	e024      	b.n	8002e6a <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a17      	ldr	r2, [pc, #92]	@ (8002e84 <HAL_TIM_MspPostInit+0x150>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d11f      	bne.n	8002e6a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e30:	4a10      	ldr	r2, [pc, #64]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002e3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002e48:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	4805      	ldr	r0, [pc, #20]	@ (8002e7c <HAL_TIM_MspPostInit+0x148>)
 8002e66:	f003 fee3 	bl	8006c30 <HAL_GPIO_Init>
}
 8002e6a:	bf00      	nop
 8002e6c:	3730      	adds	r7, #48	@ 0x30
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400
 8002e78:	58020000 	.word	0x58020000
 8002e7c:	58020400 	.word	0x58020400
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800

08002e88 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e8c:	4b22      	ldr	r3, [pc, #136]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002e8e:	4a23      	ldr	r2, [pc, #140]	@ (8002f1c <MX_UART4_Init+0x94>)
 8002e90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002e92:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002eac:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002eae:	220c      	movs	r2, #12
 8002eb0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ebe:	4b16      	ldr	r3, [pc, #88]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eca:	4b13      	ldr	r3, [pc, #76]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ed0:	4811      	ldr	r0, [pc, #68]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002ed2:	f009 f9f1 	bl	800c2b8 <HAL_UART_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002edc:	f7ff f9d6 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002ee4:	f00b f967 	bl	800e1b6 <HAL_UARTEx_SetTxFifoThreshold>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002eee:	f7ff f9cd 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4808      	ldr	r0, [pc, #32]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002ef6:	f00b f99c 	bl	800e232 <HAL_UARTEx_SetRxFifoThreshold>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002f00:	f7ff f9c4 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002f04:	4804      	ldr	r0, [pc, #16]	@ (8002f18 <MX_UART4_Init+0x90>)
 8002f06:	f00b f91d 	bl	800e144 <HAL_UARTEx_DisableFifoMode>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002f10:	f7ff f9bc 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	240025f4 	.word	0x240025f4
 8002f1c:	40004c00 	.word	0x40004c00

08002f20 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f24:	4b23      	ldr	r3, [pc, #140]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f26:	4a24      	ldr	r2, [pc, #144]	@ (8002fb8 <MX_USART1_UART_Init+0x98>)
 8002f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002f2a:	4b22      	ldr	r3, [pc, #136]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f2c:	4a23      	ldr	r2, [pc, #140]	@ (8002fbc <MX_USART1_UART_Init+0x9c>)
 8002f2e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f38:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f44:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f46:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f48:	220c      	movs	r2, #12
 8002f4a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f52:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f58:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f5e:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f64:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f6a:	4812      	ldr	r0, [pc, #72]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f6c:	f009 f9a4 	bl	800c2b8 <HAL_UART_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002f76:	f7ff f989 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	480d      	ldr	r0, [pc, #52]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f7e:	f00b f91a 	bl	800e1b6 <HAL_UARTEx_SetTxFifoThreshold>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002f88:	f7ff f980 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4809      	ldr	r0, [pc, #36]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f90:	f00b f94f 	bl	800e232 <HAL_UARTEx_SetRxFifoThreshold>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002f9a:	f7ff f977 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f9e:	4805      	ldr	r0, [pc, #20]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002fa0:	f00b f8d0 	bl	800e144 <HAL_UARTEx_DisableFifoMode>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002faa:	f7ff f96f 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	24002688 	.word	0x24002688
 8002fb8:	40011000 	.word	0x40011000
 8002fbc:	000186a0 	.word	0x000186a0

08002fc0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002fc4:	4b22      	ldr	r3, [pc, #136]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002fc6:	4a23      	ldr	r2, [pc, #140]	@ (8003054 <MX_USART6_UART_Init+0x94>)
 8002fc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002fca:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002fcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002fe6:	220c      	movs	r2, #12
 8002fe8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fea:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff0:	4b17      	ldr	r3, [pc, #92]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ff6:	4b16      	ldr	r3, [pc, #88]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ffc:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003002:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 8003004:	2200      	movs	r2, #0
 8003006:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003008:	4811      	ldr	r0, [pc, #68]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 800300a:	f009 f955 	bl	800c2b8 <HAL_UART_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003014:	f7ff f93a 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003018:	2100      	movs	r1, #0
 800301a:	480d      	ldr	r0, [pc, #52]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 800301c:	f00b f8cb 	bl	800e1b6 <HAL_UARTEx_SetTxFifoThreshold>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003026:	f7ff f931 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800302a:	2100      	movs	r1, #0
 800302c:	4808      	ldr	r0, [pc, #32]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 800302e:	f00b f900 	bl	800e232 <HAL_UARTEx_SetRxFifoThreshold>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003038:	f7ff f928 	bl	800228c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800303c:	4804      	ldr	r0, [pc, #16]	@ (8003050 <MX_USART6_UART_Init+0x90>)
 800303e:	f00b f881 	bl	800e144 <HAL_UARTEx_DisableFifoMode>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003048:	f7ff f920 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}
 8003050:	2400271c 	.word	0x2400271c
 8003054:	40011400 	.word	0x40011400

08003058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b0be      	sub	sp, #248	@ 0xf8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003070:	f107 0320 	add.w	r3, r7, #32
 8003074:	22c0      	movs	r2, #192	@ 0xc0
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f00f fb09 	bl	8012690 <memset>
  if(uartHandle->Instance==UART4)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a8e      	ldr	r2, [pc, #568]	@ (80032bc <HAL_UART_MspInit+0x264>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d146      	bne.n	8003116 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003088:	f04f 0202 	mov.w	r2, #2
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800309a:	f107 0320 	add.w	r3, r7, #32
 800309e:	4618      	mov	r0, r3
 80030a0:	f005 f8bc 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80030aa:	f7ff f8ef 	bl	800228c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80030ae:	4b84      	ldr	r3, [pc, #528]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 80030b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030b4:	4a82      	ldr	r2, [pc, #520]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 80030b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80030ba:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80030be:	4b80      	ldr	r3, [pc, #512]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 80030c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030cc:	4b7c      	ldr	r3, [pc, #496]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 80030ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030d2:	4a7b      	ldr	r2, [pc, #492]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80030dc:	4b78      	ldr	r3, [pc, #480]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 80030de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030ea:	2303      	movs	r3, #3
 80030ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	2302      	movs	r3, #2
 80030f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003102:	2308      	movs	r3, #8
 8003104:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003108:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800310c:	4619      	mov	r1, r3
 800310e:	486d      	ldr	r0, [pc, #436]	@ (80032c4 <HAL_UART_MspInit+0x26c>)
 8003110:	f003 fd8e 	bl	8006c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003114:	e0ce      	b.n	80032b4 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6b      	ldr	r2, [pc, #428]	@ (80032c8 <HAL_UART_MspInit+0x270>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d17e      	bne.n	800321e <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003120:	f04f 0201 	mov.w	r2, #1
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003132:	f107 0320 	add.w	r3, r7, #32
 8003136:	4618      	mov	r0, r3
 8003138:	f005 f870 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003142:	f7ff f8a3 	bl	800228c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003146:	4b5e      	ldr	r3, [pc, #376]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 8003148:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800314c:	4a5c      	ldr	r2, [pc, #368]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 800314e:	f043 0310 	orr.w	r3, r3, #16
 8003152:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003156:	4b5a      	ldr	r3, [pc, #360]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 8003158:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003164:	4b56      	ldr	r3, [pc, #344]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 8003166:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800316a:	4a55      	ldr	r2, [pc, #340]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003174:	4b52      	ldr	r3, [pc, #328]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 8003176:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8003182:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800319c:	2307      	movs	r3, #7
 800319e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4846      	ldr	r0, [pc, #280]	@ (80032c4 <HAL_UART_MspInit+0x26c>)
 80031aa:	f003 fd41 	bl	8006c30 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80031ae:	4b47      	ldr	r3, [pc, #284]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031b0:	4a47      	ldr	r2, [pc, #284]	@ (80032d0 <HAL_UART_MspInit+0x278>)
 80031b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80031b4:	4b45      	ldr	r3, [pc, #276]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031b6:	2229      	movs	r2, #41	@ 0x29
 80031b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ba:	4b44      	ldr	r3, [pc, #272]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c0:	4b42      	ldr	r3, [pc, #264]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031c6:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ce:	4b3f      	ldr	r3, [pc, #252]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d4:	4b3d      	ldr	r3, [pc, #244]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80031da:	4b3c      	ldr	r3, [pc, #240]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031e2:	4b3a      	ldr	r3, [pc, #232]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031e8:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80031ee:	4837      	ldr	r0, [pc, #220]	@ (80032cc <HAL_UART_MspInit+0x274>)
 80031f0:	f000 fadc 	bl	80037ac <HAL_DMA_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80031fa:	f7ff f847 	bl	800228c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a32      	ldr	r2, [pc, #200]	@ (80032cc <HAL_UART_MspInit+0x274>)
 8003202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003206:	4a31      	ldr	r2, [pc, #196]	@ (80032cc <HAL_UART_MspInit+0x274>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	2100      	movs	r1, #0
 8003210:	2025      	movs	r0, #37	@ 0x25
 8003212:	f000 fa1e 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003216:	2025      	movs	r0, #37	@ 0x25
 8003218:	f000 fa35 	bl	8003686 <HAL_NVIC_EnableIRQ>
}
 800321c:	e04a      	b.n	80032b4 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART6)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2c      	ldr	r2, [pc, #176]	@ (80032d4 <HAL_UART_MspInit+0x27c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d145      	bne.n	80032b4 <HAL_UART_MspInit+0x25c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003228:	f04f 0201 	mov.w	r2, #1
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800323a:	f107 0320 	add.w	r3, r7, #32
 800323e:	4618      	mov	r0, r3
 8003240:	f004 ffec 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 800324a:	f7ff f81f 	bl	800228c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800324e:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 8003250:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003254:	4a1a      	ldr	r2, [pc, #104]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 8003256:	f043 0320 	orr.w	r3, r3, #32
 800325a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800325e:	4b18      	ldr	r3, [pc, #96]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 8003260:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800326c:	4b14      	ldr	r3, [pc, #80]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 800326e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003272:	4a13      	ldr	r2, [pc, #76]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800327c:	4b10      	ldr	r3, [pc, #64]	@ (80032c0 <HAL_UART_MspInit+0x268>)
 800327e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800328a:	23c0      	movs	r3, #192	@ 0xc0
 800328c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80032a2:	2307      	movs	r3, #7
 80032a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80032ac:	4619      	mov	r1, r3
 80032ae:	480a      	ldr	r0, [pc, #40]	@ (80032d8 <HAL_UART_MspInit+0x280>)
 80032b0:	f003 fcbe 	bl	8006c30 <HAL_GPIO_Init>
}
 80032b4:	bf00      	nop
 80032b6:	37f8      	adds	r7, #248	@ 0xf8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40004c00 	.word	0x40004c00
 80032c0:	58024400 	.word	0x58024400
 80032c4:	58020000 	.word	0x58020000
 80032c8:	40011000 	.word	0x40011000
 80032cc:	240027b0 	.word	0x240027b0
 80032d0:	40020010 	.word	0x40020010
 80032d4:	40011400 	.word	0x40011400
 80032d8:	58020800 	.word	0x58020800

080032dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003314 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80032e0:	f7ff fa66 	bl	80027b0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032e4:	480c      	ldr	r0, [pc, #48]	@ (8003318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032e6:	490d      	ldr	r1, [pc, #52]	@ (800331c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032ec:	e002      	b.n	80032f4 <LoopCopyDataInit>

080032ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032f2:	3304      	adds	r3, #4

080032f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80032f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f8:	d3f9      	bcc.n	80032ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003300:	e001      	b.n	8003306 <LoopFillZerobss>

08003302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003304:	3204      	adds	r2, #4

08003306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003308:	d3fb      	bcc.n	8003302 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800330a:	f00f f9cf 	bl	80126ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800330e:	f7fe feb3 	bl	8002078 <main>
  bx  lr
 8003312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003314:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003318:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800331c:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 8003320:	08013780 	.word	0x08013780
  ldr r2, =_sbss
 8003324:	240000bc 	.word	0x240000bc
  ldr r4, =_ebss
 8003328:	24002ba8 	.word	0x24002ba8

0800332c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC_IRQHandler>
	...

08003330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003336:	2003      	movs	r0, #3
 8003338:	f000 f980 	bl	800363c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800333c:	f004 fd98 	bl	8007e70 <HAL_RCC_GetSysClockFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b15      	ldr	r3, [pc, #84]	@ (8003398 <HAL_Init+0x68>)
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	4913      	ldr	r1, [pc, #76]	@ (800339c <HAL_Init+0x6c>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800335a:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <HAL_Init+0x68>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a0e      	ldr	r2, [pc, #56]	@ (800339c <HAL_Init+0x6c>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	4a0b      	ldr	r2, [pc, #44]	@ (80033a0 <HAL_Init+0x70>)
 8003372:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003374:	4a0b      	ldr	r2, [pc, #44]	@ (80033a4 <HAL_Init+0x74>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800337a:	200f      	movs	r0, #15
 800337c:	f000 f814 	bl	80033a8 <HAL_InitTick>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e002      	b.n	8003390 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800338a:	f7ff f991 	bl	80026b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	58024400 	.word	0x58024400
 800339c:	08012a60 	.word	0x08012a60
 80033a0:	24000048 	.word	0x24000048
 80033a4:	24000044 	.word	0x24000044

080033a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80033b0:	4b15      	ldr	r3, [pc, #84]	@ (8003408 <HAL_InitTick+0x60>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e021      	b.n	8003400 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80033bc:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_InitTick+0x64>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <HAL_InitTick+0x60>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4619      	mov	r1, r3
 80033c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f965 	bl	80036a2 <HAL_SYSTICK_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e00e      	b.n	8003400 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b0f      	cmp	r3, #15
 80033e6:	d80a      	bhi.n	80033fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e8:	2200      	movs	r2, #0
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	f000 f92f 	bl	8003652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033f4:	4a06      	ldr	r2, [pc, #24]	@ (8003410 <HAL_InitTick+0x68>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	24000050 	.word	0x24000050
 800340c:	24000044 	.word	0x24000044
 8003410:	2400004c 	.word	0x2400004c

08003414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003418:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <HAL_IncTick+0x20>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_IncTick+0x24>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4413      	add	r3, r2
 8003424:	4a04      	ldr	r2, [pc, #16]	@ (8003438 <HAL_IncTick+0x24>)
 8003426:	6013      	str	r3, [r2, #0]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	24000050 	.word	0x24000050
 8003438:	24002828 	.word	0x24002828

0800343c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return uwTick;
 8003440:	4b03      	ldr	r3, [pc, #12]	@ (8003450 <HAL_GetTick+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	24002828 	.word	0x24002828

08003454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff ffee 	bl	800343c <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d005      	beq.n	800347a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <HAL_Delay+0x44>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800347a:	bf00      	nop
 800347c:	f7ff ffde 	bl	800343c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	429a      	cmp	r2, r3
 800348a:	d8f7      	bhi.n	800347c <HAL_Delay+0x28>
  {
  }
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	24000050 	.word	0x24000050

0800349c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ac:	4b0b      	ldr	r3, [pc, #44]	@ (80034dc <__NVIC_SetPriorityGrouping+0x40>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034b8:	4013      	ands	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <__NVIC_SetPriorityGrouping+0x44>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ca:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <__NVIC_SetPriorityGrouping+0x40>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60d3      	str	r3, [r2, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00
 80034e0:	05fa0000 	.word	0x05fa0000

080034e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e8:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <__NVIC_GetPriorityGrouping+0x18>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	f003 0307 	and.w	r3, r3, #7
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350e:	2b00      	cmp	r3, #0
 8003510:	db0b      	blt.n	800352a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4907      	ldr	r1, [pc, #28]	@ (8003538 <__NVIC_EnableIRQ+0x38>)
 800351a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2001      	movs	r0, #1
 8003522:	fa00 f202 	lsl.w	r2, r0, r2
 8003526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000e100 	.word	0xe000e100

0800353c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354c:	2b00      	cmp	r3, #0
 800354e:	db0a      	blt.n	8003566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	490c      	ldr	r1, [pc, #48]	@ (8003588 <__NVIC_SetPriority+0x4c>)
 8003556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	440b      	add	r3, r1
 8003560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003564:	e00a      	b.n	800357c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4908      	ldr	r1, [pc, #32]	@ (800358c <__NVIC_SetPriority+0x50>)
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3b04      	subs	r3, #4
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	440b      	add	r3, r1
 800357a:	761a      	strb	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000e100 	.word	0xe000e100
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	@ 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f1c3 0307 	rsb	r3, r3, #7
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	bf28      	it	cs
 80035ae:	2304      	movcs	r3, #4
 80035b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d902      	bls.n	80035c0 <NVIC_EncodePriority+0x30>
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3b03      	subs	r3, #3
 80035be:	e000      	b.n	80035c2 <NVIC_EncodePriority+0x32>
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	43d9      	mvns	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	4313      	orrs	r3, r2
         );
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3724      	adds	r7, #36	@ 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003608:	d301      	bcc.n	800360e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800360a:	2301      	movs	r3, #1
 800360c:	e00f      	b.n	800362e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360e:	4a0a      	ldr	r2, [pc, #40]	@ (8003638 <SysTick_Config+0x40>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003616:	210f      	movs	r1, #15
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	f7ff ff8e 	bl	800353c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003620:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <SysTick_Config+0x40>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003626:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <SysTick_Config+0x40>)
 8003628:	2207      	movs	r2, #7
 800362a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	e000e010 	.word	0xe000e010

0800363c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ff29 	bl	800349c <__NVIC_SetPriorityGrouping>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003660:	f7ff ff40 	bl	80034e4 <__NVIC_GetPriorityGrouping>
 8003664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f7ff ff90 	bl	8003590 <NVIC_EncodePriority>
 8003670:	4602      	mov	r2, r0
 8003672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff5f 	bl	800353c <__NVIC_SetPriority>
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff33 	bl	8003500 <__NVIC_EnableIRQ>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ffa4 	bl	80035f8 <SysTick_Config>
 80036b0:	4603      	mov	r3, r0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80036c0:	f3bf 8f5f 	dmb	sy
}
 80036c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80036c6:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <HAL_MPU_Disable+0x28>)
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	4a06      	ldr	r2, [pc, #24]	@ (80036e4 <HAL_MPU_Disable+0x28>)
 80036cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80036d2:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <HAL_MPU_Disable+0x2c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	605a      	str	r2, [r3, #4]
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000ed00 	.word	0xe000ed00
 80036e8:	e000ed90 	.word	0xe000ed90

080036ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80036f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003724 <HAL_MPU_Enable+0x38>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <HAL_MPU_Enable+0x3c>)
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	4a09      	ldr	r2, [pc, #36]	@ (8003728 <HAL_MPU_Enable+0x3c>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003708:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800370a:	f3bf 8f4f 	dsb	sy
}
 800370e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003710:	f3bf 8f6f 	isb	sy
}
 8003714:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000ed90 	.word	0xe000ed90
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	785a      	ldrb	r2, [r3, #1]
 8003738:	4b1b      	ldr	r3, [pc, #108]	@ (80037a8 <HAL_MPU_ConfigRegion+0x7c>)
 800373a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800373c:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <HAL_MPU_ConfigRegion+0x7c>)
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	4a19      	ldr	r2, [pc, #100]	@ (80037a8 <HAL_MPU_ConfigRegion+0x7c>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003748:	4a17      	ldr	r2, [pc, #92]	@ (80037a8 <HAL_MPU_ConfigRegion+0x7c>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7b1b      	ldrb	r3, [r3, #12]
 8003754:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7adb      	ldrb	r3, [r3, #11]
 800375a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800375c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7a9b      	ldrb	r3, [r3, #10]
 8003762:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7b5b      	ldrb	r3, [r3, #13]
 800376a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800376c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7b9b      	ldrb	r3, [r3, #14]
 8003772:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7bdb      	ldrb	r3, [r3, #15]
 800377a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800377c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7a5b      	ldrb	r3, [r3, #9]
 8003782:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003784:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7a1b      	ldrb	r3, [r3, #8]
 800378a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800378c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	7812      	ldrb	r2, [r2, #0]
 8003792:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003794:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003796:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003798:	6113      	str	r3, [r2, #16]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000ed90 	.word	0xe000ed90

080037ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037b4:	f7ff fe42 	bl	800343c <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e37d      	b.n	8003ec0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a66      	ldr	r2, [pc, #408]	@ (8003964 <HAL_DMA_Init+0x1b8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d04a      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a65      	ldr	r2, [pc, #404]	@ (8003968 <HAL_DMA_Init+0x1bc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d045      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a63      	ldr	r2, [pc, #396]	@ (800396c <HAL_DMA_Init+0x1c0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d040      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a62      	ldr	r2, [pc, #392]	@ (8003970 <HAL_DMA_Init+0x1c4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d03b      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a60      	ldr	r2, [pc, #384]	@ (8003974 <HAL_DMA_Init+0x1c8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d036      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003978 <HAL_DMA_Init+0x1cc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d031      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5d      	ldr	r2, [pc, #372]	@ (800397c <HAL_DMA_Init+0x1d0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02c      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5c      	ldr	r2, [pc, #368]	@ (8003980 <HAL_DMA_Init+0x1d4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d027      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5a      	ldr	r2, [pc, #360]	@ (8003984 <HAL_DMA_Init+0x1d8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d022      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a59      	ldr	r2, [pc, #356]	@ (8003988 <HAL_DMA_Init+0x1dc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d01d      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a57      	ldr	r2, [pc, #348]	@ (800398c <HAL_DMA_Init+0x1e0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d018      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a56      	ldr	r2, [pc, #344]	@ (8003990 <HAL_DMA_Init+0x1e4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a54      	ldr	r2, [pc, #336]	@ (8003994 <HAL_DMA_Init+0x1e8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00e      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a53      	ldr	r2, [pc, #332]	@ (8003998 <HAL_DMA_Init+0x1ec>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d009      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a51      	ldr	r2, [pc, #324]	@ (800399c <HAL_DMA_Init+0x1f0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_DMA_Init+0xb8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a50      	ldr	r2, [pc, #320]	@ (80039a0 <HAL_DMA_Init+0x1f4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d101      	bne.n	8003868 <HAL_DMA_Init+0xbc>
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_DMA_Init+0xbe>
 8003868:	2300      	movs	r3, #0
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 813c 	beq.w	8003ae8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a37      	ldr	r2, [pc, #220]	@ (8003964 <HAL_DMA_Init+0x1b8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d04a      	beq.n	8003920 <HAL_DMA_Init+0x174>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a36      	ldr	r2, [pc, #216]	@ (8003968 <HAL_DMA_Init+0x1bc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d045      	beq.n	8003920 <HAL_DMA_Init+0x174>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a34      	ldr	r2, [pc, #208]	@ (800396c <HAL_DMA_Init+0x1c0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d040      	beq.n	8003920 <HAL_DMA_Init+0x174>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a33      	ldr	r2, [pc, #204]	@ (8003970 <HAL_DMA_Init+0x1c4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d03b      	beq.n	8003920 <HAL_DMA_Init+0x174>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a31      	ldr	r2, [pc, #196]	@ (8003974 <HAL_DMA_Init+0x1c8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d036      	beq.n	8003920 <HAL_DMA_Init+0x174>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a30      	ldr	r2, [pc, #192]	@ (8003978 <HAL_DMA_Init+0x1cc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d031      	beq.n	8003920 <HAL_DMA_Init+0x174>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a2e      	ldr	r2, [pc, #184]	@ (800397c <HAL_DMA_Init+0x1d0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d02c      	beq.n	8003920 <HAL_DMA_Init+0x174>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003980 <HAL_DMA_Init+0x1d4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d027      	beq.n	8003920 <HAL_DMA_Init+0x174>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003984 <HAL_DMA_Init+0x1d8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d022      	beq.n	8003920 <HAL_DMA_Init+0x174>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2a      	ldr	r2, [pc, #168]	@ (8003988 <HAL_DMA_Init+0x1dc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01d      	beq.n	8003920 <HAL_DMA_Init+0x174>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a28      	ldr	r2, [pc, #160]	@ (800398c <HAL_DMA_Init+0x1e0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d018      	beq.n	8003920 <HAL_DMA_Init+0x174>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a27      	ldr	r2, [pc, #156]	@ (8003990 <HAL_DMA_Init+0x1e4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <HAL_DMA_Init+0x174>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a25      	ldr	r2, [pc, #148]	@ (8003994 <HAL_DMA_Init+0x1e8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <HAL_DMA_Init+0x174>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a24      	ldr	r2, [pc, #144]	@ (8003998 <HAL_DMA_Init+0x1ec>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_DMA_Init+0x174>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a22      	ldr	r2, [pc, #136]	@ (800399c <HAL_DMA_Init+0x1f0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_DMA_Init+0x174>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a21      	ldr	r2, [pc, #132]	@ (80039a0 <HAL_DMA_Init+0x1f4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <HAL_DMA_Init+0x186>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e007      	b.n	8003942 <HAL_DMA_Init+0x196>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003942:	e02f      	b.n	80039a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003944:	f7ff fd7a 	bl	800343c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b05      	cmp	r3, #5
 8003950:	d928      	bls.n	80039a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2203      	movs	r2, #3
 800395c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e2ad      	b.n	8003ec0 <HAL_DMA_Init+0x714>
 8003964:	40020010 	.word	0x40020010
 8003968:	40020028 	.word	0x40020028
 800396c:	40020040 	.word	0x40020040
 8003970:	40020058 	.word	0x40020058
 8003974:	40020070 	.word	0x40020070
 8003978:	40020088 	.word	0x40020088
 800397c:	400200a0 	.word	0x400200a0
 8003980:	400200b8 	.word	0x400200b8
 8003984:	40020410 	.word	0x40020410
 8003988:	40020428 	.word	0x40020428
 800398c:	40020440 	.word	0x40020440
 8003990:	40020458 	.word	0x40020458
 8003994:	40020470 	.word	0x40020470
 8003998:	40020488 	.word	0x40020488
 800399c:	400204a0 	.word	0x400204a0
 80039a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1c8      	bne.n	8003944 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4b73      	ldr	r3, [pc, #460]	@ (8003b8c <HAL_DMA_Init+0x3e0>)
 80039be:	4013      	ands	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d107      	bne.n	8003a08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a00:	4313      	orrs	r3, r2
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b28      	cmp	r3, #40	@ 0x28
 8003a0e:	d903      	bls.n	8003a18 <HAL_DMA_Init+0x26c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a16:	d91f      	bls.n	8003a58 <HAL_DMA_Init+0x2ac>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a1e:	d903      	bls.n	8003a28 <HAL_DMA_Init+0x27c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b42      	cmp	r3, #66	@ 0x42
 8003a26:	d917      	bls.n	8003a58 <HAL_DMA_Init+0x2ac>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b46      	cmp	r3, #70	@ 0x46
 8003a2e:	d903      	bls.n	8003a38 <HAL_DMA_Init+0x28c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b48      	cmp	r3, #72	@ 0x48
 8003a36:	d90f      	bls.n	8003a58 <HAL_DMA_Init+0x2ac>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a3e:	d903      	bls.n	8003a48 <HAL_DMA_Init+0x29c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b52      	cmp	r3, #82	@ 0x52
 8003a46:	d907      	bls.n	8003a58 <HAL_DMA_Init+0x2ac>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b73      	cmp	r3, #115	@ 0x73
 8003a4e:	d905      	bls.n	8003a5c <HAL_DMA_Init+0x2b0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b77      	cmp	r3, #119	@ 0x77
 8003a56:	d801      	bhi.n	8003a5c <HAL_DMA_Init+0x2b0>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_DMA_Init+0x2b2>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a68:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 0307 	bic.w	r3, r3, #7
 8003a80:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d117      	bne.n	8003ac4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f002 fbd4 	bl	8006254 <DMA_CheckFifoParam>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2240      	movs	r2, #64	@ 0x40
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e1fd      	b.n	8003ec0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f002 fb0f 	bl	80060f0 <DMA_CalcBaseAndBitshift>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	223f      	movs	r2, #63	@ 0x3f
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	e0fd      	b.n	8003ce4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <HAL_DMA_Init+0x3e4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d04a      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <HAL_DMA_Init+0x3e8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d045      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a25      	ldr	r2, [pc, #148]	@ (8003b98 <HAL_DMA_Init+0x3ec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d040      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a24      	ldr	r2, [pc, #144]	@ (8003b9c <HAL_DMA_Init+0x3f0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d03b      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a22      	ldr	r2, [pc, #136]	@ (8003ba0 <HAL_DMA_Init+0x3f4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d036      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ba4 <HAL_DMA_Init+0x3f8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d031      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba8 <HAL_DMA_Init+0x3fc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02c      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1e      	ldr	r2, [pc, #120]	@ (8003bac <HAL_DMA_Init+0x400>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d027      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb0 <HAL_DMA_Init+0x404>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d022      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb4 <HAL_DMA_Init+0x408>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d01d      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a19      	ldr	r2, [pc, #100]	@ (8003bb8 <HAL_DMA_Init+0x40c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d018      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <HAL_DMA_Init+0x410>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a16      	ldr	r2, [pc, #88]	@ (8003bc0 <HAL_DMA_Init+0x414>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a15      	ldr	r2, [pc, #84]	@ (8003bc4 <HAL_DMA_Init+0x418>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a13      	ldr	r2, [pc, #76]	@ (8003bc8 <HAL_DMA_Init+0x41c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_DMA_Init+0x3dc>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <HAL_DMA_Init+0x420>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d123      	bne.n	8003bd0 <HAL_DMA_Init+0x424>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e022      	b.n	8003bd2 <HAL_DMA_Init+0x426>
 8003b8c:	fe10803f 	.word	0xfe10803f
 8003b90:	48022c08 	.word	0x48022c08
 8003b94:	48022c1c 	.word	0x48022c1c
 8003b98:	48022c30 	.word	0x48022c30
 8003b9c:	48022c44 	.word	0x48022c44
 8003ba0:	48022c58 	.word	0x48022c58
 8003ba4:	48022c6c 	.word	0x48022c6c
 8003ba8:	48022c80 	.word	0x48022c80
 8003bac:	48022c94 	.word	0x48022c94
 8003bb0:	58025408 	.word	0x58025408
 8003bb4:	5802541c 	.word	0x5802541c
 8003bb8:	58025430 	.word	0x58025430
 8003bbc:	58025444 	.word	0x58025444
 8003bc0:	58025458 	.word	0x58025458
 8003bc4:	5802546c 	.word	0x5802546c
 8003bc8:	58025480 	.word	0x58025480
 8003bcc:	58025494 	.word	0x58025494
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d07d      	beq.n	8003cd2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a7f      	ldr	r2, [pc, #508]	@ (8003dd8 <HAL_DMA_Init+0x62c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d021      	beq.n	8003c24 <HAL_DMA_Init+0x478>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a7d      	ldr	r2, [pc, #500]	@ (8003ddc <HAL_DMA_Init+0x630>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01c      	beq.n	8003c24 <HAL_DMA_Init+0x478>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a7c      	ldr	r2, [pc, #496]	@ (8003de0 <HAL_DMA_Init+0x634>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d017      	beq.n	8003c24 <HAL_DMA_Init+0x478>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a7a      	ldr	r2, [pc, #488]	@ (8003de4 <HAL_DMA_Init+0x638>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d012      	beq.n	8003c24 <HAL_DMA_Init+0x478>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a79      	ldr	r2, [pc, #484]	@ (8003de8 <HAL_DMA_Init+0x63c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00d      	beq.n	8003c24 <HAL_DMA_Init+0x478>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a77      	ldr	r2, [pc, #476]	@ (8003dec <HAL_DMA_Init+0x640>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d008      	beq.n	8003c24 <HAL_DMA_Init+0x478>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a76      	ldr	r2, [pc, #472]	@ (8003df0 <HAL_DMA_Init+0x644>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <HAL_DMA_Init+0x478>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a74      	ldr	r2, [pc, #464]	@ (8003df4 <HAL_DMA_Init+0x648>)
 8003c22:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8003df8 <HAL_DMA_Init+0x64c>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b40      	cmp	r3, #64	@ 0x40
 8003c4a:	d008      	beq.n	8003c5e <HAL_DMA_Init+0x4b2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b80      	cmp	r3, #128	@ 0x80
 8003c52:	d102      	bne.n	8003c5a <HAL_DMA_Init+0x4ae>
 8003c54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c58:	e002      	b.n	8003c60 <HAL_DMA_Init+0x4b4>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e000      	b.n	8003c60 <HAL_DMA_Init+0x4b4>
 8003c5e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68d2      	ldr	r2, [r2, #12]
 8003c64:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c66:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c6e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c76:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c7e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c86:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c8e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b55      	ldr	r3, [pc, #340]	@ (8003dfc <HAL_DMA_Init+0x650>)
 8003ca6:	4413      	add	r3, r2
 8003ca8:	4a55      	ldr	r2, [pc, #340]	@ (8003e00 <HAL_DMA_Init+0x654>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	009a      	lsls	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f002 fa1a 	bl	80060f0 <DMA_CalcBaseAndBitshift>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2201      	movs	r2, #1
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	e008      	b.n	8003ce4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2240      	movs	r2, #64	@ 0x40
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0ed      	b.n	8003ec0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a46      	ldr	r2, [pc, #280]	@ (8003e04 <HAL_DMA_Init+0x658>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d072      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a45      	ldr	r2, [pc, #276]	@ (8003e08 <HAL_DMA_Init+0x65c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d06d      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a43      	ldr	r2, [pc, #268]	@ (8003e0c <HAL_DMA_Init+0x660>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d068      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a42      	ldr	r2, [pc, #264]	@ (8003e10 <HAL_DMA_Init+0x664>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d063      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a40      	ldr	r2, [pc, #256]	@ (8003e14 <HAL_DMA_Init+0x668>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d05e      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e18 <HAL_DMA_Init+0x66c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d059      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a3d      	ldr	r2, [pc, #244]	@ (8003e1c <HAL_DMA_Init+0x670>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d054      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a3c      	ldr	r2, [pc, #240]	@ (8003e20 <HAL_DMA_Init+0x674>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d04f      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a3a      	ldr	r2, [pc, #232]	@ (8003e24 <HAL_DMA_Init+0x678>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d04a      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a39      	ldr	r2, [pc, #228]	@ (8003e28 <HAL_DMA_Init+0x67c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d045      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a37      	ldr	r2, [pc, #220]	@ (8003e2c <HAL_DMA_Init+0x680>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d040      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a36      	ldr	r2, [pc, #216]	@ (8003e30 <HAL_DMA_Init+0x684>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d03b      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a34      	ldr	r2, [pc, #208]	@ (8003e34 <HAL_DMA_Init+0x688>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d036      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a33      	ldr	r2, [pc, #204]	@ (8003e38 <HAL_DMA_Init+0x68c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d031      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a31      	ldr	r2, [pc, #196]	@ (8003e3c <HAL_DMA_Init+0x690>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02c      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a30      	ldr	r2, [pc, #192]	@ (8003e40 <HAL_DMA_Init+0x694>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d027      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a13      	ldr	r2, [pc, #76]	@ (8003dd8 <HAL_DMA_Init+0x62c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d022      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a12      	ldr	r2, [pc, #72]	@ (8003ddc <HAL_DMA_Init+0x630>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d01d      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a10      	ldr	r2, [pc, #64]	@ (8003de0 <HAL_DMA_Init+0x634>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d018      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a0f      	ldr	r2, [pc, #60]	@ (8003de4 <HAL_DMA_Init+0x638>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0d      	ldr	r2, [pc, #52]	@ (8003de8 <HAL_DMA_Init+0x63c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00e      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a0c      	ldr	r2, [pc, #48]	@ (8003dec <HAL_DMA_Init+0x640>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d009      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8003df0 <HAL_DMA_Init+0x644>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_DMA_Init+0x628>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a09      	ldr	r2, [pc, #36]	@ (8003df4 <HAL_DMA_Init+0x648>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d137      	bne.n	8003e44 <HAL_DMA_Init+0x698>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e036      	b.n	8003e46 <HAL_DMA_Init+0x69a>
 8003dd8:	58025408 	.word	0x58025408
 8003ddc:	5802541c 	.word	0x5802541c
 8003de0:	58025430 	.word	0x58025430
 8003de4:	58025444 	.word	0x58025444
 8003de8:	58025458 	.word	0x58025458
 8003dec:	5802546c 	.word	0x5802546c
 8003df0:	58025480 	.word	0x58025480
 8003df4:	58025494 	.word	0x58025494
 8003df8:	fffe000f 	.word	0xfffe000f
 8003dfc:	a7fdabf8 	.word	0xa7fdabf8
 8003e00:	cccccccd 	.word	0xcccccccd
 8003e04:	40020010 	.word	0x40020010
 8003e08:	40020028 	.word	0x40020028
 8003e0c:	40020040 	.word	0x40020040
 8003e10:	40020058 	.word	0x40020058
 8003e14:	40020070 	.word	0x40020070
 8003e18:	40020088 	.word	0x40020088
 8003e1c:	400200a0 	.word	0x400200a0
 8003e20:	400200b8 	.word	0x400200b8
 8003e24:	40020410 	.word	0x40020410
 8003e28:	40020428 	.word	0x40020428
 8003e2c:	40020440 	.word	0x40020440
 8003e30:	40020458 	.word	0x40020458
 8003e34:	40020470 	.word	0x40020470
 8003e38:	40020488 	.word	0x40020488
 8003e3c:	400204a0 	.word	0x400204a0
 8003e40:	400204b8 	.word	0x400204b8
 8003e44:	2300      	movs	r3, #0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d032      	beq.n	8003eb0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f002 fa7e 	bl	800634c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b80      	cmp	r3, #128	@ 0x80
 8003e56:	d102      	bne.n	8003e5e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e72:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <HAL_DMA_Init+0x6f2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d80c      	bhi.n	8003e9e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f002 fafb 	bl	8006480 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	e008      	b.n	8003eb0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e226      	b.n	8004332 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_DMA_Start_IT+0x2a>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e21f      	b.n	8004332 <HAL_DMA_Start_IT+0x46a>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	f040 820a 	bne.w	800431c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a68      	ldr	r2, [pc, #416]	@ (80040bc <HAL_DMA_Start_IT+0x1f4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d04a      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a66      	ldr	r2, [pc, #408]	@ (80040c0 <HAL_DMA_Start_IT+0x1f8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d045      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a65      	ldr	r2, [pc, #404]	@ (80040c4 <HAL_DMA_Start_IT+0x1fc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d040      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a63      	ldr	r2, [pc, #396]	@ (80040c8 <HAL_DMA_Start_IT+0x200>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d03b      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a62      	ldr	r2, [pc, #392]	@ (80040cc <HAL_DMA_Start_IT+0x204>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d036      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a60      	ldr	r2, [pc, #384]	@ (80040d0 <HAL_DMA_Start_IT+0x208>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a5f      	ldr	r2, [pc, #380]	@ (80040d4 <HAL_DMA_Start_IT+0x20c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d02c      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a5d      	ldr	r2, [pc, #372]	@ (80040d8 <HAL_DMA_Start_IT+0x210>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d027      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a5c      	ldr	r2, [pc, #368]	@ (80040dc <HAL_DMA_Start_IT+0x214>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a5a      	ldr	r2, [pc, #360]	@ (80040e0 <HAL_DMA_Start_IT+0x218>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a59      	ldr	r2, [pc, #356]	@ (80040e4 <HAL_DMA_Start_IT+0x21c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a57      	ldr	r2, [pc, #348]	@ (80040e8 <HAL_DMA_Start_IT+0x220>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a56      	ldr	r2, [pc, #344]	@ (80040ec <HAL_DMA_Start_IT+0x224>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a54      	ldr	r2, [pc, #336]	@ (80040f0 <HAL_DMA_Start_IT+0x228>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a53      	ldr	r2, [pc, #332]	@ (80040f4 <HAL_DMA_Start_IT+0x22c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xee>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a51      	ldr	r2, [pc, #324]	@ (80040f8 <HAL_DMA_Start_IT+0x230>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <HAL_DMA_Start_IT+0x100>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e007      	b.n	8003fd8 <HAL_DMA_Start_IT+0x110>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f001 fea2 	bl	8005d28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a34      	ldr	r2, [pc, #208]	@ (80040bc <HAL_DMA_Start_IT+0x1f4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d04a      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a33      	ldr	r2, [pc, #204]	@ (80040c0 <HAL_DMA_Start_IT+0x1f8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d045      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a31      	ldr	r2, [pc, #196]	@ (80040c4 <HAL_DMA_Start_IT+0x1fc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d040      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a30      	ldr	r2, [pc, #192]	@ (80040c8 <HAL_DMA_Start_IT+0x200>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d03b      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2e      	ldr	r2, [pc, #184]	@ (80040cc <HAL_DMA_Start_IT+0x204>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d036      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2d      	ldr	r2, [pc, #180]	@ (80040d0 <HAL_DMA_Start_IT+0x208>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d031      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2b      	ldr	r2, [pc, #172]	@ (80040d4 <HAL_DMA_Start_IT+0x20c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02c      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2a      	ldr	r2, [pc, #168]	@ (80040d8 <HAL_DMA_Start_IT+0x210>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d027      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a28      	ldr	r2, [pc, #160]	@ (80040dc <HAL_DMA_Start_IT+0x214>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d022      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a27      	ldr	r2, [pc, #156]	@ (80040e0 <HAL_DMA_Start_IT+0x218>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d01d      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a25      	ldr	r2, [pc, #148]	@ (80040e4 <HAL_DMA_Start_IT+0x21c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d018      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a24      	ldr	r2, [pc, #144]	@ (80040e8 <HAL_DMA_Start_IT+0x220>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a22      	ldr	r2, [pc, #136]	@ (80040ec <HAL_DMA_Start_IT+0x224>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a21      	ldr	r2, [pc, #132]	@ (80040f0 <HAL_DMA_Start_IT+0x228>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1f      	ldr	r2, [pc, #124]	@ (80040f4 <HAL_DMA_Start_IT+0x22c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_DMA_Start_IT+0x1bc>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1e      	ldr	r2, [pc, #120]	@ (80040f8 <HAL_DMA_Start_IT+0x230>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_DMA_Start_IT+0x1c0>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <HAL_DMA_Start_IT+0x1c2>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d036      	beq.n	80040fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 021e 	bic.w	r2, r3, #30
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0216 	orr.w	r2, r2, #22
 80040a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d03e      	beq.n	8004128 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0208 	orr.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e035      	b.n	8004128 <HAL_DMA_Start_IT+0x260>
 80040bc:	40020010 	.word	0x40020010
 80040c0:	40020028 	.word	0x40020028
 80040c4:	40020040 	.word	0x40020040
 80040c8:	40020058 	.word	0x40020058
 80040cc:	40020070 	.word	0x40020070
 80040d0:	40020088 	.word	0x40020088
 80040d4:	400200a0 	.word	0x400200a0
 80040d8:	400200b8 	.word	0x400200b8
 80040dc:	40020410 	.word	0x40020410
 80040e0:	40020428 	.word	0x40020428
 80040e4:	40020440 	.word	0x40020440
 80040e8:	40020458 	.word	0x40020458
 80040ec:	40020470 	.word	0x40020470
 80040f0:	40020488 	.word	0x40020488
 80040f4:	400204a0 	.word	0x400204a0
 80040f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 020e 	bic.w	r2, r3, #14
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 020a 	orr.w	r2, r2, #10
 800410e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0204 	orr.w	r2, r2, #4
 8004126:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a83      	ldr	r2, [pc, #524]	@ (800433c <HAL_DMA_Start_IT+0x474>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d072      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a82      	ldr	r2, [pc, #520]	@ (8004340 <HAL_DMA_Start_IT+0x478>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d06d      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a80      	ldr	r2, [pc, #512]	@ (8004344 <HAL_DMA_Start_IT+0x47c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d068      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a7f      	ldr	r2, [pc, #508]	@ (8004348 <HAL_DMA_Start_IT+0x480>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d063      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a7d      	ldr	r2, [pc, #500]	@ (800434c <HAL_DMA_Start_IT+0x484>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d05e      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a7c      	ldr	r2, [pc, #496]	@ (8004350 <HAL_DMA_Start_IT+0x488>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d059      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a7a      	ldr	r2, [pc, #488]	@ (8004354 <HAL_DMA_Start_IT+0x48c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d054      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a79      	ldr	r2, [pc, #484]	@ (8004358 <HAL_DMA_Start_IT+0x490>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d04f      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a77      	ldr	r2, [pc, #476]	@ (800435c <HAL_DMA_Start_IT+0x494>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a76      	ldr	r2, [pc, #472]	@ (8004360 <HAL_DMA_Start_IT+0x498>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a74      	ldr	r2, [pc, #464]	@ (8004364 <HAL_DMA_Start_IT+0x49c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a73      	ldr	r2, [pc, #460]	@ (8004368 <HAL_DMA_Start_IT+0x4a0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a71      	ldr	r2, [pc, #452]	@ (800436c <HAL_DMA_Start_IT+0x4a4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a70      	ldr	r2, [pc, #448]	@ (8004370 <HAL_DMA_Start_IT+0x4a8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004374 <HAL_DMA_Start_IT+0x4ac>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004378 <HAL_DMA_Start_IT+0x4b0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6b      	ldr	r2, [pc, #428]	@ (800437c <HAL_DMA_Start_IT+0x4b4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004380 <HAL_DMA_Start_IT+0x4b8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a68      	ldr	r2, [pc, #416]	@ (8004384 <HAL_DMA_Start_IT+0x4bc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a67      	ldr	r2, [pc, #412]	@ (8004388 <HAL_DMA_Start_IT+0x4c0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a65      	ldr	r2, [pc, #404]	@ (800438c <HAL_DMA_Start_IT+0x4c4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a64      	ldr	r2, [pc, #400]	@ (8004390 <HAL_DMA_Start_IT+0x4c8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a62      	ldr	r2, [pc, #392]	@ (8004394 <HAL_DMA_Start_IT+0x4cc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_DMA_Start_IT+0x350>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a61      	ldr	r2, [pc, #388]	@ (8004398 <HAL_DMA_Start_IT+0x4d0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <HAL_DMA_Start_IT+0x354>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_DMA_Start_IT+0x356>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01a      	beq.n	8004258 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800423e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004252:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004256:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a37      	ldr	r2, [pc, #220]	@ (800433c <HAL_DMA_Start_IT+0x474>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d04a      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a36      	ldr	r2, [pc, #216]	@ (8004340 <HAL_DMA_Start_IT+0x478>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d045      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a34      	ldr	r2, [pc, #208]	@ (8004344 <HAL_DMA_Start_IT+0x47c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d040      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a33      	ldr	r2, [pc, #204]	@ (8004348 <HAL_DMA_Start_IT+0x480>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d03b      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a31      	ldr	r2, [pc, #196]	@ (800434c <HAL_DMA_Start_IT+0x484>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d036      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <HAL_DMA_Start_IT+0x488>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d031      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2e      	ldr	r2, [pc, #184]	@ (8004354 <HAL_DMA_Start_IT+0x48c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d02c      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004358 <HAL_DMA_Start_IT+0x490>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d027      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2b      	ldr	r2, [pc, #172]	@ (800435c <HAL_DMA_Start_IT+0x494>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d022      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004360 <HAL_DMA_Start_IT+0x498>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d01d      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a28      	ldr	r2, [pc, #160]	@ (8004364 <HAL_DMA_Start_IT+0x49c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d018      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a27      	ldr	r2, [pc, #156]	@ (8004368 <HAL_DMA_Start_IT+0x4a0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a25      	ldr	r2, [pc, #148]	@ (800436c <HAL_DMA_Start_IT+0x4a4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00e      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a24      	ldr	r2, [pc, #144]	@ (8004370 <HAL_DMA_Start_IT+0x4a8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a22      	ldr	r2, [pc, #136]	@ (8004374 <HAL_DMA_Start_IT+0x4ac>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_DMA_Start_IT+0x430>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a21      	ldr	r2, [pc, #132]	@ (8004378 <HAL_DMA_Start_IT+0x4b0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d108      	bne.n	800430a <HAL_DMA_Start_IT+0x442>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	e012      	b.n	8004330 <HAL_DMA_Start_IT+0x468>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0201 	orr.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	e009      	b.n	8004330 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004330:	7dfb      	ldrb	r3, [r7, #23]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40020010 	.word	0x40020010
 8004340:	40020028 	.word	0x40020028
 8004344:	40020040 	.word	0x40020040
 8004348:	40020058 	.word	0x40020058
 800434c:	40020070 	.word	0x40020070
 8004350:	40020088 	.word	0x40020088
 8004354:	400200a0 	.word	0x400200a0
 8004358:	400200b8 	.word	0x400200b8
 800435c:	40020410 	.word	0x40020410
 8004360:	40020428 	.word	0x40020428
 8004364:	40020440 	.word	0x40020440
 8004368:	40020458 	.word	0x40020458
 800436c:	40020470 	.word	0x40020470
 8004370:	40020488 	.word	0x40020488
 8004374:	400204a0 	.word	0x400204a0
 8004378:	400204b8 	.word	0x400204b8
 800437c:	58025408 	.word	0x58025408
 8004380:	5802541c 	.word	0x5802541c
 8004384:	58025430 	.word	0x58025430
 8004388:	58025444 	.word	0x58025444
 800438c:	58025458 	.word	0x58025458
 8004390:	5802546c 	.word	0x5802546c
 8004394:	58025480 	.word	0x58025480
 8004398:	58025494 	.word	0x58025494

0800439c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80043a4:	f7ff f84a 	bl	800343c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e2dc      	b.n	800496e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d008      	beq.n	80043d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2280      	movs	r2, #128	@ 0x80
 80043c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e2cd      	b.n	800496e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a76      	ldr	r2, [pc, #472]	@ (80045b0 <HAL_DMA_Abort+0x214>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d04a      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a74      	ldr	r2, [pc, #464]	@ (80045b4 <HAL_DMA_Abort+0x218>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d045      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a73      	ldr	r2, [pc, #460]	@ (80045b8 <HAL_DMA_Abort+0x21c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d040      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a71      	ldr	r2, [pc, #452]	@ (80045bc <HAL_DMA_Abort+0x220>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d03b      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a70      	ldr	r2, [pc, #448]	@ (80045c0 <HAL_DMA_Abort+0x224>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d036      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a6e      	ldr	r2, [pc, #440]	@ (80045c4 <HAL_DMA_Abort+0x228>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d031      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6d      	ldr	r2, [pc, #436]	@ (80045c8 <HAL_DMA_Abort+0x22c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d02c      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a6b      	ldr	r2, [pc, #428]	@ (80045cc <HAL_DMA_Abort+0x230>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d027      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6a      	ldr	r2, [pc, #424]	@ (80045d0 <HAL_DMA_Abort+0x234>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d022      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a68      	ldr	r2, [pc, #416]	@ (80045d4 <HAL_DMA_Abort+0x238>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01d      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a67      	ldr	r2, [pc, #412]	@ (80045d8 <HAL_DMA_Abort+0x23c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a65      	ldr	r2, [pc, #404]	@ (80045dc <HAL_DMA_Abort+0x240>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a64      	ldr	r2, [pc, #400]	@ (80045e0 <HAL_DMA_Abort+0x244>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00e      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a62      	ldr	r2, [pc, #392]	@ (80045e4 <HAL_DMA_Abort+0x248>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d009      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a61      	ldr	r2, [pc, #388]	@ (80045e8 <HAL_DMA_Abort+0x24c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <HAL_DMA_Abort+0xd6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a5f      	ldr	r2, [pc, #380]	@ (80045ec <HAL_DMA_Abort+0x250>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d101      	bne.n	8004476 <HAL_DMA_Abort+0xda>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_DMA_Abort+0xdc>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 021e 	bic.w	r2, r2, #30
 800448a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800449a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e00a      	b.n	80044ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 020e 	bic.w	r2, r2, #14
 80044b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3c      	ldr	r2, [pc, #240]	@ (80045b0 <HAL_DMA_Abort+0x214>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d072      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a3a      	ldr	r2, [pc, #232]	@ (80045b4 <HAL_DMA_Abort+0x218>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d06d      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a39      	ldr	r2, [pc, #228]	@ (80045b8 <HAL_DMA_Abort+0x21c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d068      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a37      	ldr	r2, [pc, #220]	@ (80045bc <HAL_DMA_Abort+0x220>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d063      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a36      	ldr	r2, [pc, #216]	@ (80045c0 <HAL_DMA_Abort+0x224>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d05e      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a34      	ldr	r2, [pc, #208]	@ (80045c4 <HAL_DMA_Abort+0x228>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d059      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a33      	ldr	r2, [pc, #204]	@ (80045c8 <HAL_DMA_Abort+0x22c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d054      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a31      	ldr	r2, [pc, #196]	@ (80045cc <HAL_DMA_Abort+0x230>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d04f      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a30      	ldr	r2, [pc, #192]	@ (80045d0 <HAL_DMA_Abort+0x234>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d04a      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2e      	ldr	r2, [pc, #184]	@ (80045d4 <HAL_DMA_Abort+0x238>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d045      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2d      	ldr	r2, [pc, #180]	@ (80045d8 <HAL_DMA_Abort+0x23c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d040      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2b      	ldr	r2, [pc, #172]	@ (80045dc <HAL_DMA_Abort+0x240>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d03b      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2a      	ldr	r2, [pc, #168]	@ (80045e0 <HAL_DMA_Abort+0x244>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d036      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a28      	ldr	r2, [pc, #160]	@ (80045e4 <HAL_DMA_Abort+0x248>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d031      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a27      	ldr	r2, [pc, #156]	@ (80045e8 <HAL_DMA_Abort+0x24c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d02c      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a25      	ldr	r2, [pc, #148]	@ (80045ec <HAL_DMA_Abort+0x250>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d027      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a24      	ldr	r2, [pc, #144]	@ (80045f0 <HAL_DMA_Abort+0x254>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d022      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a22      	ldr	r2, [pc, #136]	@ (80045f4 <HAL_DMA_Abort+0x258>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01d      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a21      	ldr	r2, [pc, #132]	@ (80045f8 <HAL_DMA_Abort+0x25c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d018      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1f      	ldr	r2, [pc, #124]	@ (80045fc <HAL_DMA_Abort+0x260>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1e      	ldr	r2, [pc, #120]	@ (8004600 <HAL_DMA_Abort+0x264>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00e      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1c      	ldr	r2, [pc, #112]	@ (8004604 <HAL_DMA_Abort+0x268>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1b      	ldr	r2, [pc, #108]	@ (8004608 <HAL_DMA_Abort+0x26c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_DMA_Abort+0x20e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a19      	ldr	r2, [pc, #100]	@ (800460c <HAL_DMA_Abort+0x270>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d132      	bne.n	8004610 <HAL_DMA_Abort+0x274>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e031      	b.n	8004612 <HAL_DMA_Abort+0x276>
 80045ae:	bf00      	nop
 80045b0:	40020010 	.word	0x40020010
 80045b4:	40020028 	.word	0x40020028
 80045b8:	40020040 	.word	0x40020040
 80045bc:	40020058 	.word	0x40020058
 80045c0:	40020070 	.word	0x40020070
 80045c4:	40020088 	.word	0x40020088
 80045c8:	400200a0 	.word	0x400200a0
 80045cc:	400200b8 	.word	0x400200b8
 80045d0:	40020410 	.word	0x40020410
 80045d4:	40020428 	.word	0x40020428
 80045d8:	40020440 	.word	0x40020440
 80045dc:	40020458 	.word	0x40020458
 80045e0:	40020470 	.word	0x40020470
 80045e4:	40020488 	.word	0x40020488
 80045e8:	400204a0 	.word	0x400204a0
 80045ec:	400204b8 	.word	0x400204b8
 80045f0:	58025408 	.word	0x58025408
 80045f4:	5802541c 	.word	0x5802541c
 80045f8:	58025430 	.word	0x58025430
 80045fc:	58025444 	.word	0x58025444
 8004600:	58025458 	.word	0x58025458
 8004604:	5802546c 	.word	0x5802546c
 8004608:	58025480 	.word	0x58025480
 800460c:	58025494 	.word	0x58025494
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004620:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004624:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a6d      	ldr	r2, [pc, #436]	@ (80047e0 <HAL_DMA_Abort+0x444>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d04a      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a6b      	ldr	r2, [pc, #428]	@ (80047e4 <HAL_DMA_Abort+0x448>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d045      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6a      	ldr	r2, [pc, #424]	@ (80047e8 <HAL_DMA_Abort+0x44c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d040      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a68      	ldr	r2, [pc, #416]	@ (80047ec <HAL_DMA_Abort+0x450>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d03b      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a67      	ldr	r2, [pc, #412]	@ (80047f0 <HAL_DMA_Abort+0x454>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d036      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a65      	ldr	r2, [pc, #404]	@ (80047f4 <HAL_DMA_Abort+0x458>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d031      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a64      	ldr	r2, [pc, #400]	@ (80047f8 <HAL_DMA_Abort+0x45c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d02c      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a62      	ldr	r2, [pc, #392]	@ (80047fc <HAL_DMA_Abort+0x460>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d027      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a61      	ldr	r2, [pc, #388]	@ (8004800 <HAL_DMA_Abort+0x464>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5f      	ldr	r2, [pc, #380]	@ (8004804 <HAL_DMA_Abort+0x468>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01d      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a5e      	ldr	r2, [pc, #376]	@ (8004808 <HAL_DMA_Abort+0x46c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a5c      	ldr	r2, [pc, #368]	@ (800480c <HAL_DMA_Abort+0x470>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004810 <HAL_DMA_Abort+0x474>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a59      	ldr	r2, [pc, #356]	@ (8004814 <HAL_DMA_Abort+0x478>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a58      	ldr	r2, [pc, #352]	@ (8004818 <HAL_DMA_Abort+0x47c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_DMA_Abort+0x32a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a56      	ldr	r2, [pc, #344]	@ (800481c <HAL_DMA_Abort+0x480>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d108      	bne.n	80046d8 <HAL_DMA_Abort+0x33c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e007      	b.n	80046e8 <HAL_DMA_Abort+0x34c>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80046e8:	e013      	b.n	8004712 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046ea:	f7fe fea7 	bl	800343c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d90c      	bls.n	8004712 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2203      	movs	r2, #3
 8004702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e12d      	b.n	800496e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e5      	bne.n	80046ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2f      	ldr	r2, [pc, #188]	@ (80047e0 <HAL_DMA_Abort+0x444>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d04a      	beq.n	80047be <HAL_DMA_Abort+0x422>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2d      	ldr	r2, [pc, #180]	@ (80047e4 <HAL_DMA_Abort+0x448>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d045      	beq.n	80047be <HAL_DMA_Abort+0x422>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2c      	ldr	r2, [pc, #176]	@ (80047e8 <HAL_DMA_Abort+0x44c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d040      	beq.n	80047be <HAL_DMA_Abort+0x422>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2a      	ldr	r2, [pc, #168]	@ (80047ec <HAL_DMA_Abort+0x450>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d03b      	beq.n	80047be <HAL_DMA_Abort+0x422>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a29      	ldr	r2, [pc, #164]	@ (80047f0 <HAL_DMA_Abort+0x454>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d036      	beq.n	80047be <HAL_DMA_Abort+0x422>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a27      	ldr	r2, [pc, #156]	@ (80047f4 <HAL_DMA_Abort+0x458>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d031      	beq.n	80047be <HAL_DMA_Abort+0x422>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a26      	ldr	r2, [pc, #152]	@ (80047f8 <HAL_DMA_Abort+0x45c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d02c      	beq.n	80047be <HAL_DMA_Abort+0x422>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a24      	ldr	r2, [pc, #144]	@ (80047fc <HAL_DMA_Abort+0x460>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d027      	beq.n	80047be <HAL_DMA_Abort+0x422>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a23      	ldr	r2, [pc, #140]	@ (8004800 <HAL_DMA_Abort+0x464>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <HAL_DMA_Abort+0x422>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a21      	ldr	r2, [pc, #132]	@ (8004804 <HAL_DMA_Abort+0x468>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01d      	beq.n	80047be <HAL_DMA_Abort+0x422>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a20      	ldr	r2, [pc, #128]	@ (8004808 <HAL_DMA_Abort+0x46c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_DMA_Abort+0x422>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <HAL_DMA_Abort+0x470>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_DMA_Abort+0x422>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1d      	ldr	r2, [pc, #116]	@ (8004810 <HAL_DMA_Abort+0x474>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_DMA_Abort+0x422>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004814 <HAL_DMA_Abort+0x478>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_DMA_Abort+0x422>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004818 <HAL_DMA_Abort+0x47c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_DMA_Abort+0x422>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a18      	ldr	r2, [pc, #96]	@ (800481c <HAL_DMA_Abort+0x480>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_DMA_Abort+0x426>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <HAL_DMA_Abort+0x428>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02b      	beq.n	8004820 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	223f      	movs	r2, #63	@ 0x3f
 80047d8:	409a      	lsls	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	e02a      	b.n	8004836 <HAL_DMA_Abort+0x49a>
 80047e0:	40020010 	.word	0x40020010
 80047e4:	40020028 	.word	0x40020028
 80047e8:	40020040 	.word	0x40020040
 80047ec:	40020058 	.word	0x40020058
 80047f0:	40020070 	.word	0x40020070
 80047f4:	40020088 	.word	0x40020088
 80047f8:	400200a0 	.word	0x400200a0
 80047fc:	400200b8 	.word	0x400200b8
 8004800:	40020410 	.word	0x40020410
 8004804:	40020428 	.word	0x40020428
 8004808:	40020440 	.word	0x40020440
 800480c:	40020458 	.word	0x40020458
 8004810:	40020470 	.word	0x40020470
 8004814:	40020488 	.word	0x40020488
 8004818:	400204a0 	.word	0x400204a0
 800481c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004824:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	2201      	movs	r2, #1
 8004830:	409a      	lsls	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a4f      	ldr	r2, [pc, #316]	@ (8004978 <HAL_DMA_Abort+0x5dc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d072      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a4d      	ldr	r2, [pc, #308]	@ (800497c <HAL_DMA_Abort+0x5e0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d06d      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a4c      	ldr	r2, [pc, #304]	@ (8004980 <HAL_DMA_Abort+0x5e4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d068      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a4a      	ldr	r2, [pc, #296]	@ (8004984 <HAL_DMA_Abort+0x5e8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d063      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a49      	ldr	r2, [pc, #292]	@ (8004988 <HAL_DMA_Abort+0x5ec>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d05e      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a47      	ldr	r2, [pc, #284]	@ (800498c <HAL_DMA_Abort+0x5f0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d059      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a46      	ldr	r2, [pc, #280]	@ (8004990 <HAL_DMA_Abort+0x5f4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d054      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a44      	ldr	r2, [pc, #272]	@ (8004994 <HAL_DMA_Abort+0x5f8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d04f      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a43      	ldr	r2, [pc, #268]	@ (8004998 <HAL_DMA_Abort+0x5fc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d04a      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a41      	ldr	r2, [pc, #260]	@ (800499c <HAL_DMA_Abort+0x600>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d045      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a40      	ldr	r2, [pc, #256]	@ (80049a0 <HAL_DMA_Abort+0x604>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d040      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a3e      	ldr	r2, [pc, #248]	@ (80049a4 <HAL_DMA_Abort+0x608>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d03b      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a3d      	ldr	r2, [pc, #244]	@ (80049a8 <HAL_DMA_Abort+0x60c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d036      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3b      	ldr	r2, [pc, #236]	@ (80049ac <HAL_DMA_Abort+0x610>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d031      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a3a      	ldr	r2, [pc, #232]	@ (80049b0 <HAL_DMA_Abort+0x614>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d02c      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a38      	ldr	r2, [pc, #224]	@ (80049b4 <HAL_DMA_Abort+0x618>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d027      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a37      	ldr	r2, [pc, #220]	@ (80049b8 <HAL_DMA_Abort+0x61c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d022      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a35      	ldr	r2, [pc, #212]	@ (80049bc <HAL_DMA_Abort+0x620>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d01d      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a34      	ldr	r2, [pc, #208]	@ (80049c0 <HAL_DMA_Abort+0x624>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d018      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a32      	ldr	r2, [pc, #200]	@ (80049c4 <HAL_DMA_Abort+0x628>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a31      	ldr	r2, [pc, #196]	@ (80049c8 <HAL_DMA_Abort+0x62c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2f      	ldr	r2, [pc, #188]	@ (80049cc <HAL_DMA_Abort+0x630>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d009      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2e      	ldr	r2, [pc, #184]	@ (80049d0 <HAL_DMA_Abort+0x634>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_DMA_Abort+0x58a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2c      	ldr	r2, [pc, #176]	@ (80049d4 <HAL_DMA_Abort+0x638>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_DMA_Abort+0x58e>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <HAL_DMA_Abort+0x590>
 800492a:	2300      	movs	r3, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004938:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800494c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004950:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800495a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40020010 	.word	0x40020010
 800497c:	40020028 	.word	0x40020028
 8004980:	40020040 	.word	0x40020040
 8004984:	40020058 	.word	0x40020058
 8004988:	40020070 	.word	0x40020070
 800498c:	40020088 	.word	0x40020088
 8004990:	400200a0 	.word	0x400200a0
 8004994:	400200b8 	.word	0x400200b8
 8004998:	40020410 	.word	0x40020410
 800499c:	40020428 	.word	0x40020428
 80049a0:	40020440 	.word	0x40020440
 80049a4:	40020458 	.word	0x40020458
 80049a8:	40020470 	.word	0x40020470
 80049ac:	40020488 	.word	0x40020488
 80049b0:	400204a0 	.word	0x400204a0
 80049b4:	400204b8 	.word	0x400204b8
 80049b8:	58025408 	.word	0x58025408
 80049bc:	5802541c 	.word	0x5802541c
 80049c0:	58025430 	.word	0x58025430
 80049c4:	58025444 	.word	0x58025444
 80049c8:	58025458 	.word	0x58025458
 80049cc:	5802546c 	.word	0x5802546c
 80049d0:	58025480 	.word	0x58025480
 80049d4:	58025494 	.word	0x58025494

080049d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e237      	b.n	8004e5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d004      	beq.n	8004a00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2280      	movs	r2, #128	@ 0x80
 80049fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e22c      	b.n	8004e5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a5c      	ldr	r2, [pc, #368]	@ (8004b78 <HAL_DMA_Abort_IT+0x1a0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d04a      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8004b7c <HAL_DMA_Abort_IT+0x1a4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d045      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a59      	ldr	r2, [pc, #356]	@ (8004b80 <HAL_DMA_Abort_IT+0x1a8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d040      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a58      	ldr	r2, [pc, #352]	@ (8004b84 <HAL_DMA_Abort_IT+0x1ac>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d03b      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a56      	ldr	r2, [pc, #344]	@ (8004b88 <HAL_DMA_Abort_IT+0x1b0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d036      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a55      	ldr	r2, [pc, #340]	@ (8004b8c <HAL_DMA_Abort_IT+0x1b4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d031      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a53      	ldr	r2, [pc, #332]	@ (8004b90 <HAL_DMA_Abort_IT+0x1b8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d02c      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a52      	ldr	r2, [pc, #328]	@ (8004b94 <HAL_DMA_Abort_IT+0x1bc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d027      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a50      	ldr	r2, [pc, #320]	@ (8004b98 <HAL_DMA_Abort_IT+0x1c0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d022      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a4f      	ldr	r2, [pc, #316]	@ (8004b9c <HAL_DMA_Abort_IT+0x1c4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01d      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a4d      	ldr	r2, [pc, #308]	@ (8004ba0 <HAL_DMA_Abort_IT+0x1c8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a4c      	ldr	r2, [pc, #304]	@ (8004ba4 <HAL_DMA_Abort_IT+0x1cc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8004ba8 <HAL_DMA_Abort_IT+0x1d0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a49      	ldr	r2, [pc, #292]	@ (8004bac <HAL_DMA_Abort_IT+0x1d4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a47      	ldr	r2, [pc, #284]	@ (8004bb0 <HAL_DMA_Abort_IT+0x1d8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_DMA_Abort_IT+0xc8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a46      	ldr	r2, [pc, #280]	@ (8004bb4 <HAL_DMA_Abort_IT+0x1dc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_DMA_Abort_IT+0xcc>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_DMA_Abort_IT+0xce>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8086 	beq.w	8004bb8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8004b78 <HAL_DMA_Abort_IT+0x1a0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d04a      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8004b7c <HAL_DMA_Abort_IT+0x1a4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d045      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a2c      	ldr	r2, [pc, #176]	@ (8004b80 <HAL_DMA_Abort_IT+0x1a8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d040      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b84 <HAL_DMA_Abort_IT+0x1ac>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d03b      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a29      	ldr	r2, [pc, #164]	@ (8004b88 <HAL_DMA_Abort_IT+0x1b0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d036      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a28      	ldr	r2, [pc, #160]	@ (8004b8c <HAL_DMA_Abort_IT+0x1b4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d031      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a26      	ldr	r2, [pc, #152]	@ (8004b90 <HAL_DMA_Abort_IT+0x1b8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d02c      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a25      	ldr	r2, [pc, #148]	@ (8004b94 <HAL_DMA_Abort_IT+0x1bc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d027      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a23      	ldr	r2, [pc, #140]	@ (8004b98 <HAL_DMA_Abort_IT+0x1c0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d022      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a22      	ldr	r2, [pc, #136]	@ (8004b9c <HAL_DMA_Abort_IT+0x1c4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d01d      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	@ (8004ba0 <HAL_DMA_Abort_IT+0x1c8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d018      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba4 <HAL_DMA_Abort_IT+0x1cc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba8 <HAL_DMA_Abort_IT+0x1d0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00e      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bac <HAL_DMA_Abort_IT+0x1d4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb0 <HAL_DMA_Abort_IT+0x1d8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x17c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a19      	ldr	r2, [pc, #100]	@ (8004bb4 <HAL_DMA_Abort_IT+0x1dc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d108      	bne.n	8004b66 <HAL_DMA_Abort_IT+0x18e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e178      	b.n	8004e58 <HAL_DMA_Abort_IT+0x480>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e16f      	b.n	8004e58 <HAL_DMA_Abort_IT+0x480>
 8004b78:	40020010 	.word	0x40020010
 8004b7c:	40020028 	.word	0x40020028
 8004b80:	40020040 	.word	0x40020040
 8004b84:	40020058 	.word	0x40020058
 8004b88:	40020070 	.word	0x40020070
 8004b8c:	40020088 	.word	0x40020088
 8004b90:	400200a0 	.word	0x400200a0
 8004b94:	400200b8 	.word	0x400200b8
 8004b98:	40020410 	.word	0x40020410
 8004b9c:	40020428 	.word	0x40020428
 8004ba0:	40020440 	.word	0x40020440
 8004ba4:	40020458 	.word	0x40020458
 8004ba8:	40020470 	.word	0x40020470
 8004bac:	40020488 	.word	0x40020488
 8004bb0:	400204a0 	.word	0x400204a0
 8004bb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 020e 	bic.w	r2, r2, #14
 8004bc6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a6c      	ldr	r2, [pc, #432]	@ (8004d80 <HAL_DMA_Abort_IT+0x3a8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d04a      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a6b      	ldr	r2, [pc, #428]	@ (8004d84 <HAL_DMA_Abort_IT+0x3ac>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d045      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a69      	ldr	r2, [pc, #420]	@ (8004d88 <HAL_DMA_Abort_IT+0x3b0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d040      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a68      	ldr	r2, [pc, #416]	@ (8004d8c <HAL_DMA_Abort_IT+0x3b4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d03b      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a66      	ldr	r2, [pc, #408]	@ (8004d90 <HAL_DMA_Abort_IT+0x3b8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d036      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a65      	ldr	r2, [pc, #404]	@ (8004d94 <HAL_DMA_Abort_IT+0x3bc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d031      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a63      	ldr	r2, [pc, #396]	@ (8004d98 <HAL_DMA_Abort_IT+0x3c0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d02c      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a62      	ldr	r2, [pc, #392]	@ (8004d9c <HAL_DMA_Abort_IT+0x3c4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d027      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a60      	ldr	r2, [pc, #384]	@ (8004da0 <HAL_DMA_Abort_IT+0x3c8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d022      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a5f      	ldr	r2, [pc, #380]	@ (8004da4 <HAL_DMA_Abort_IT+0x3cc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d01d      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5d      	ldr	r2, [pc, #372]	@ (8004da8 <HAL_DMA_Abort_IT+0x3d0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8004dac <HAL_DMA_Abort_IT+0x3d4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5a      	ldr	r2, [pc, #360]	@ (8004db0 <HAL_DMA_Abort_IT+0x3d8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a59      	ldr	r2, [pc, #356]	@ (8004db4 <HAL_DMA_Abort_IT+0x3dc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a57      	ldr	r2, [pc, #348]	@ (8004db8 <HAL_DMA_Abort_IT+0x3e0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_DMA_Abort_IT+0x290>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a56      	ldr	r2, [pc, #344]	@ (8004dbc <HAL_DMA_Abort_IT+0x3e4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d108      	bne.n	8004c7a <HAL_DMA_Abort_IT+0x2a2>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e007      	b.n	8004c8a <HAL_DMA_Abort_IT+0x2b2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a3c      	ldr	r2, [pc, #240]	@ (8004d80 <HAL_DMA_Abort_IT+0x3a8>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d072      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a3a      	ldr	r2, [pc, #232]	@ (8004d84 <HAL_DMA_Abort_IT+0x3ac>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d06d      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a39      	ldr	r2, [pc, #228]	@ (8004d88 <HAL_DMA_Abort_IT+0x3b0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d068      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a37      	ldr	r2, [pc, #220]	@ (8004d8c <HAL_DMA_Abort_IT+0x3b4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d063      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a36      	ldr	r2, [pc, #216]	@ (8004d90 <HAL_DMA_Abort_IT+0x3b8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d05e      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a34      	ldr	r2, [pc, #208]	@ (8004d94 <HAL_DMA_Abort_IT+0x3bc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d059      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a33      	ldr	r2, [pc, #204]	@ (8004d98 <HAL_DMA_Abort_IT+0x3c0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d054      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a31      	ldr	r2, [pc, #196]	@ (8004d9c <HAL_DMA_Abort_IT+0x3c4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d04f      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a30      	ldr	r2, [pc, #192]	@ (8004da0 <HAL_DMA_Abort_IT+0x3c8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d04a      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8004da4 <HAL_DMA_Abort_IT+0x3cc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d045      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8004da8 <HAL_DMA_Abort_IT+0x3d0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d040      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004dac <HAL_DMA_Abort_IT+0x3d4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d03b      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2a      	ldr	r2, [pc, #168]	@ (8004db0 <HAL_DMA_Abort_IT+0x3d8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d036      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a28      	ldr	r2, [pc, #160]	@ (8004db4 <HAL_DMA_Abort_IT+0x3dc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d031      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a27      	ldr	r2, [pc, #156]	@ (8004db8 <HAL_DMA_Abort_IT+0x3e0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d02c      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a25      	ldr	r2, [pc, #148]	@ (8004dbc <HAL_DMA_Abort_IT+0x3e4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d027      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a24      	ldr	r2, [pc, #144]	@ (8004dc0 <HAL_DMA_Abort_IT+0x3e8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d022      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a22      	ldr	r2, [pc, #136]	@ (8004dc4 <HAL_DMA_Abort_IT+0x3ec>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01d      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a21      	ldr	r2, [pc, #132]	@ (8004dc8 <HAL_DMA_Abort_IT+0x3f0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d018      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dcc <HAL_DMA_Abort_IT+0x3f4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd0 <HAL_DMA_Abort_IT+0x3f8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1c      	ldr	r2, [pc, #112]	@ (8004dd4 <HAL_DMA_Abort_IT+0x3fc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd8 <HAL_DMA_Abort_IT+0x400>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_DMA_Abort_IT+0x3a2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a19      	ldr	r2, [pc, #100]	@ (8004ddc <HAL_DMA_Abort_IT+0x404>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d132      	bne.n	8004de0 <HAL_DMA_Abort_IT+0x408>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e031      	b.n	8004de2 <HAL_DMA_Abort_IT+0x40a>
 8004d7e:	bf00      	nop
 8004d80:	40020010 	.word	0x40020010
 8004d84:	40020028 	.word	0x40020028
 8004d88:	40020040 	.word	0x40020040
 8004d8c:	40020058 	.word	0x40020058
 8004d90:	40020070 	.word	0x40020070
 8004d94:	40020088 	.word	0x40020088
 8004d98:	400200a0 	.word	0x400200a0
 8004d9c:	400200b8 	.word	0x400200b8
 8004da0:	40020410 	.word	0x40020410
 8004da4:	40020428 	.word	0x40020428
 8004da8:	40020440 	.word	0x40020440
 8004dac:	40020458 	.word	0x40020458
 8004db0:	40020470 	.word	0x40020470
 8004db4:	40020488 	.word	0x40020488
 8004db8:	400204a0 	.word	0x400204a0
 8004dbc:	400204b8 	.word	0x400204b8
 8004dc0:	58025408 	.word	0x58025408
 8004dc4:	5802541c 	.word	0x5802541c
 8004dc8:	58025430 	.word	0x58025430
 8004dcc:	58025444 	.word	0x58025444
 8004dd0:	58025458 	.word	0x58025458
 8004dd4:	5802546c 	.word	0x5802546c
 8004dd8:	58025480 	.word	0x58025480
 8004ddc:	58025494 	.word	0x58025494
 8004de0:	2300      	movs	r3, #0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d028      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004df4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2201      	movs	r2, #1
 8004e06:	409a      	lsls	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop

08004e64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	@ 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e70:	4b67      	ldr	r3, [pc, #412]	@ (8005010 <HAL_DMA_IRQHandler+0x1ac>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a67      	ldr	r2, [pc, #412]	@ (8005014 <HAL_DMA_IRQHandler+0x1b0>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	0a9b      	lsrs	r3, r3, #10
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a5f      	ldr	r2, [pc, #380]	@ (8005018 <HAL_DMA_IRQHandler+0x1b4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d04a      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800501c <HAL_DMA_IRQHandler+0x1b8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d045      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a5c      	ldr	r2, [pc, #368]	@ (8005020 <HAL_DMA_IRQHandler+0x1bc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d040      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a5a      	ldr	r2, [pc, #360]	@ (8005024 <HAL_DMA_IRQHandler+0x1c0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d03b      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a59      	ldr	r2, [pc, #356]	@ (8005028 <HAL_DMA_IRQHandler+0x1c4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d036      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a57      	ldr	r2, [pc, #348]	@ (800502c <HAL_DMA_IRQHandler+0x1c8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d031      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a56      	ldr	r2, [pc, #344]	@ (8005030 <HAL_DMA_IRQHandler+0x1cc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d02c      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a54      	ldr	r2, [pc, #336]	@ (8005034 <HAL_DMA_IRQHandler+0x1d0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d027      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a53      	ldr	r2, [pc, #332]	@ (8005038 <HAL_DMA_IRQHandler+0x1d4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d022      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a51      	ldr	r2, [pc, #324]	@ (800503c <HAL_DMA_IRQHandler+0x1d8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01d      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a50      	ldr	r2, [pc, #320]	@ (8005040 <HAL_DMA_IRQHandler+0x1dc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d018      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a4e      	ldr	r2, [pc, #312]	@ (8005044 <HAL_DMA_IRQHandler+0x1e0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a4d      	ldr	r2, [pc, #308]	@ (8005048 <HAL_DMA_IRQHandler+0x1e4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800504c <HAL_DMA_IRQHandler+0x1e8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a4a      	ldr	r2, [pc, #296]	@ (8005050 <HAL_DMA_IRQHandler+0x1ec>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xd2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a48      	ldr	r2, [pc, #288]	@ (8005054 <HAL_DMA_IRQHandler+0x1f0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <HAL_DMA_IRQHandler+0xd6>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <HAL_DMA_IRQHandler+0xd8>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 842b 	beq.w	8005798 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80a2 	beq.w	800509c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8005018 <HAL_DMA_IRQHandler+0x1b4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d04a      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2d      	ldr	r2, [pc, #180]	@ (800501c <HAL_DMA_IRQHandler+0x1b8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d045      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2b      	ldr	r2, [pc, #172]	@ (8005020 <HAL_DMA_IRQHandler+0x1bc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d040      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8005024 <HAL_DMA_IRQHandler+0x1c0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d03b      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a28      	ldr	r2, [pc, #160]	@ (8005028 <HAL_DMA_IRQHandler+0x1c4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d036      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a27      	ldr	r2, [pc, #156]	@ (800502c <HAL_DMA_IRQHandler+0x1c8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d031      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a25      	ldr	r2, [pc, #148]	@ (8005030 <HAL_DMA_IRQHandler+0x1cc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02c      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	@ (8005034 <HAL_DMA_IRQHandler+0x1d0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d027      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a22      	ldr	r2, [pc, #136]	@ (8005038 <HAL_DMA_IRQHandler+0x1d4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d022      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a21      	ldr	r2, [pc, #132]	@ (800503c <HAL_DMA_IRQHandler+0x1d8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d01d      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005040 <HAL_DMA_IRQHandler+0x1dc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d018      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1e      	ldr	r2, [pc, #120]	@ (8005044 <HAL_DMA_IRQHandler+0x1e0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005048 <HAL_DMA_IRQHandler+0x1e4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	@ (800504c <HAL_DMA_IRQHandler+0x1e8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	@ (8005050 <HAL_DMA_IRQHandler+0x1ec>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x194>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a18      	ldr	r2, [pc, #96]	@ (8005054 <HAL_DMA_IRQHandler+0x1f0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d12f      	bne.n	8005058 <HAL_DMA_IRQHandler+0x1f4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	bf14      	ite	ne
 8005006:	2301      	movne	r3, #1
 8005008:	2300      	moveq	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	e02e      	b.n	800506c <HAL_DMA_IRQHandler+0x208>
 800500e:	bf00      	nop
 8005010:	24000044 	.word	0x24000044
 8005014:	1b4e81b5 	.word	0x1b4e81b5
 8005018:	40020010 	.word	0x40020010
 800501c:	40020028 	.word	0x40020028
 8005020:	40020040 	.word	0x40020040
 8005024:	40020058 	.word	0x40020058
 8005028:	40020070 	.word	0x40020070
 800502c:	40020088 	.word	0x40020088
 8005030:	400200a0 	.word	0x400200a0
 8005034:	400200b8 	.word	0x400200b8
 8005038:	40020410 	.word	0x40020410
 800503c:	40020428 	.word	0x40020428
 8005040:	40020440 	.word	0x40020440
 8005044:	40020458 	.word	0x40020458
 8005048:	40020470 	.word	0x40020470
 800504c:	40020488 	.word	0x40020488
 8005050:	400204a0 	.word	0x400204a0
 8005054:	400204b8 	.word	0x400204b8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d015      	beq.n	800509c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0204 	bic.w	r2, r2, #4
 800507e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	2208      	movs	r2, #8
 800508a:	409a      	lsls	r2, r3
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005094:	f043 0201 	orr.w	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	fa22 f303 	lsr.w	r3, r2, r3
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d06e      	beq.n	8005190 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a69      	ldr	r2, [pc, #420]	@ (800525c <HAL_DMA_IRQHandler+0x3f8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d04a      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a67      	ldr	r2, [pc, #412]	@ (8005260 <HAL_DMA_IRQHandler+0x3fc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d045      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a66      	ldr	r2, [pc, #408]	@ (8005264 <HAL_DMA_IRQHandler+0x400>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d040      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a64      	ldr	r2, [pc, #400]	@ (8005268 <HAL_DMA_IRQHandler+0x404>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d03b      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a63      	ldr	r2, [pc, #396]	@ (800526c <HAL_DMA_IRQHandler+0x408>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d036      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a61      	ldr	r2, [pc, #388]	@ (8005270 <HAL_DMA_IRQHandler+0x40c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d031      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a60      	ldr	r2, [pc, #384]	@ (8005274 <HAL_DMA_IRQHandler+0x410>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d02c      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a5e      	ldr	r2, [pc, #376]	@ (8005278 <HAL_DMA_IRQHandler+0x414>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d027      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a5d      	ldr	r2, [pc, #372]	@ (800527c <HAL_DMA_IRQHandler+0x418>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d022      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a5b      	ldr	r2, [pc, #364]	@ (8005280 <HAL_DMA_IRQHandler+0x41c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01d      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a5a      	ldr	r2, [pc, #360]	@ (8005284 <HAL_DMA_IRQHandler+0x420>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d018      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a58      	ldr	r2, [pc, #352]	@ (8005288 <HAL_DMA_IRQHandler+0x424>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a57      	ldr	r2, [pc, #348]	@ (800528c <HAL_DMA_IRQHandler+0x428>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a55      	ldr	r2, [pc, #340]	@ (8005290 <HAL_DMA_IRQHandler+0x42c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a54      	ldr	r2, [pc, #336]	@ (8005294 <HAL_DMA_IRQHandler+0x430>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_DMA_IRQHandler+0x2ee>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a52      	ldr	r2, [pc, #328]	@ (8005298 <HAL_DMA_IRQHandler+0x434>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10a      	bne.n	8005168 <HAL_DMA_IRQHandler+0x304>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	e003      	b.n	8005170 <HAL_DMA_IRQHandler+0x30c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2201      	movs	r2, #1
 800517e:	409a      	lsls	r2, r3
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005188:	f043 0202 	orr.w	r2, r3, #2
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	2204      	movs	r2, #4
 800519a:	409a      	lsls	r2, r3
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 808f 	beq.w	80052c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2c      	ldr	r2, [pc, #176]	@ (800525c <HAL_DMA_IRQHandler+0x3f8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d04a      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005260 <HAL_DMA_IRQHandler+0x3fc>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d045      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a29      	ldr	r2, [pc, #164]	@ (8005264 <HAL_DMA_IRQHandler+0x400>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d040      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a27      	ldr	r2, [pc, #156]	@ (8005268 <HAL_DMA_IRQHandler+0x404>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d03b      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a26      	ldr	r2, [pc, #152]	@ (800526c <HAL_DMA_IRQHandler+0x408>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d036      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a24      	ldr	r2, [pc, #144]	@ (8005270 <HAL_DMA_IRQHandler+0x40c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d031      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a23      	ldr	r2, [pc, #140]	@ (8005274 <HAL_DMA_IRQHandler+0x410>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d02c      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <HAL_DMA_IRQHandler+0x414>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d027      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a20      	ldr	r2, [pc, #128]	@ (800527c <HAL_DMA_IRQHandler+0x418>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d022      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1e      	ldr	r2, [pc, #120]	@ (8005280 <HAL_DMA_IRQHandler+0x41c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01d      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1d      	ldr	r2, [pc, #116]	@ (8005284 <HAL_DMA_IRQHandler+0x420>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d018      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1b      	ldr	r2, [pc, #108]	@ (8005288 <HAL_DMA_IRQHandler+0x424>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1a      	ldr	r2, [pc, #104]	@ (800528c <HAL_DMA_IRQHandler+0x428>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <HAL_DMA_IRQHandler+0x42c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a17      	ldr	r2, [pc, #92]	@ (8005294 <HAL_DMA_IRQHandler+0x430>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_DMA_IRQHandler+0x3e2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a15      	ldr	r2, [pc, #84]	@ (8005298 <HAL_DMA_IRQHandler+0x434>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d12a      	bne.n	800529c <HAL_DMA_IRQHandler+0x438>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e023      	b.n	80052a4 <HAL_DMA_IRQHandler+0x440>
 800525c:	40020010 	.word	0x40020010
 8005260:	40020028 	.word	0x40020028
 8005264:	40020040 	.word	0x40020040
 8005268:	40020058 	.word	0x40020058
 800526c:	40020070 	.word	0x40020070
 8005270:	40020088 	.word	0x40020088
 8005274:	400200a0 	.word	0x400200a0
 8005278:	400200b8 	.word	0x400200b8
 800527c:	40020410 	.word	0x40020410
 8005280:	40020428 	.word	0x40020428
 8005284:	40020440 	.word	0x40020440
 8005288:	40020458 	.word	0x40020458
 800528c:	40020470 	.word	0x40020470
 8005290:	40020488 	.word	0x40020488
 8005294:	400204a0 	.word	0x400204a0
 8005298:	400204b8 	.word	0x400204b8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00d      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2204      	movs	r2, #4
 80052b2:	409a      	lsls	r2, r3
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052bc:	f043 0204 	orr.w	r2, r3, #4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2210      	movs	r2, #16
 80052ce:	409a      	lsls	r2, r3
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80a6 	beq.w	8005426 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a85      	ldr	r2, [pc, #532]	@ (80054f4 <HAL_DMA_IRQHandler+0x690>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d04a      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a83      	ldr	r2, [pc, #524]	@ (80054f8 <HAL_DMA_IRQHandler+0x694>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d045      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a82      	ldr	r2, [pc, #520]	@ (80054fc <HAL_DMA_IRQHandler+0x698>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d040      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a80      	ldr	r2, [pc, #512]	@ (8005500 <HAL_DMA_IRQHandler+0x69c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d03b      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a7f      	ldr	r2, [pc, #508]	@ (8005504 <HAL_DMA_IRQHandler+0x6a0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d036      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a7d      	ldr	r2, [pc, #500]	@ (8005508 <HAL_DMA_IRQHandler+0x6a4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d031      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a7c      	ldr	r2, [pc, #496]	@ (800550c <HAL_DMA_IRQHandler+0x6a8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d02c      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a7a      	ldr	r2, [pc, #488]	@ (8005510 <HAL_DMA_IRQHandler+0x6ac>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d027      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a79      	ldr	r2, [pc, #484]	@ (8005514 <HAL_DMA_IRQHandler+0x6b0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d022      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a77      	ldr	r2, [pc, #476]	@ (8005518 <HAL_DMA_IRQHandler+0x6b4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01d      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a76      	ldr	r2, [pc, #472]	@ (800551c <HAL_DMA_IRQHandler+0x6b8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d018      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a74      	ldr	r2, [pc, #464]	@ (8005520 <HAL_DMA_IRQHandler+0x6bc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d013      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a73      	ldr	r2, [pc, #460]	@ (8005524 <HAL_DMA_IRQHandler+0x6c0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00e      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a71      	ldr	r2, [pc, #452]	@ (8005528 <HAL_DMA_IRQHandler+0x6c4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d009      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a70      	ldr	r2, [pc, #448]	@ (800552c <HAL_DMA_IRQHandler+0x6c8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d004      	beq.n	800537a <HAL_DMA_IRQHandler+0x516>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a6e      	ldr	r2, [pc, #440]	@ (8005530 <HAL_DMA_IRQHandler+0x6cc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d10a      	bne.n	8005390 <HAL_DMA_IRQHandler+0x52c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	e009      	b.n	80053a4 <HAL_DMA_IRQHandler+0x540>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d03e      	beq.n	8005426 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2210      	movs	r2, #16
 80053b2:	409a      	lsls	r2, r3
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d018      	beq.n	80053f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d108      	bne.n	80053e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d024      	beq.n	8005426 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	4798      	blx	r3
 80053e4:	e01f      	b.n	8005426 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01b      	beq.n	8005426 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
 80053f6:	e016      	b.n	8005426 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d107      	bne.n	8005416 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0208 	bic.w	r2, r2, #8
 8005414:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2220      	movs	r2, #32
 8005430:	409a      	lsls	r2, r3
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8110 	beq.w	800565c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a2c      	ldr	r2, [pc, #176]	@ (80054f4 <HAL_DMA_IRQHandler+0x690>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d04a      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2b      	ldr	r2, [pc, #172]	@ (80054f8 <HAL_DMA_IRQHandler+0x694>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d045      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a29      	ldr	r2, [pc, #164]	@ (80054fc <HAL_DMA_IRQHandler+0x698>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d040      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a28      	ldr	r2, [pc, #160]	@ (8005500 <HAL_DMA_IRQHandler+0x69c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d03b      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a26      	ldr	r2, [pc, #152]	@ (8005504 <HAL_DMA_IRQHandler+0x6a0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d036      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a25      	ldr	r2, [pc, #148]	@ (8005508 <HAL_DMA_IRQHandler+0x6a4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d031      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a23      	ldr	r2, [pc, #140]	@ (800550c <HAL_DMA_IRQHandler+0x6a8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d02c      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a22      	ldr	r2, [pc, #136]	@ (8005510 <HAL_DMA_IRQHandler+0x6ac>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d027      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a20      	ldr	r2, [pc, #128]	@ (8005514 <HAL_DMA_IRQHandler+0x6b0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d022      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1f      	ldr	r2, [pc, #124]	@ (8005518 <HAL_DMA_IRQHandler+0x6b4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d01d      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1d      	ldr	r2, [pc, #116]	@ (800551c <HAL_DMA_IRQHandler+0x6b8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d018      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005520 <HAL_DMA_IRQHandler+0x6bc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005524 <HAL_DMA_IRQHandler+0x6c0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00e      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a19      	ldr	r2, [pc, #100]	@ (8005528 <HAL_DMA_IRQHandler+0x6c4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d009      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a17      	ldr	r2, [pc, #92]	@ (800552c <HAL_DMA_IRQHandler+0x6c8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <HAL_DMA_IRQHandler+0x678>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a16      	ldr	r2, [pc, #88]	@ (8005530 <HAL_DMA_IRQHandler+0x6cc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d12b      	bne.n	8005534 <HAL_DMA_IRQHandler+0x6d0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bf14      	ite	ne
 80054ea:	2301      	movne	r3, #1
 80054ec:	2300      	moveq	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	e02a      	b.n	8005548 <HAL_DMA_IRQHandler+0x6e4>
 80054f2:	bf00      	nop
 80054f4:	40020010 	.word	0x40020010
 80054f8:	40020028 	.word	0x40020028
 80054fc:	40020040 	.word	0x40020040
 8005500:	40020058 	.word	0x40020058
 8005504:	40020070 	.word	0x40020070
 8005508:	40020088 	.word	0x40020088
 800550c:	400200a0 	.word	0x400200a0
 8005510:	400200b8 	.word	0x400200b8
 8005514:	40020410 	.word	0x40020410
 8005518:	40020428 	.word	0x40020428
 800551c:	40020440 	.word	0x40020440
 8005520:	40020458 	.word	0x40020458
 8005524:	40020470 	.word	0x40020470
 8005528:	40020488 	.word	0x40020488
 800552c:	400204a0 	.word	0x400204a0
 8005530:	400204b8 	.word	0x400204b8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8087 	beq.w	800565c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2220      	movs	r2, #32
 8005558:	409a      	lsls	r2, r3
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b04      	cmp	r3, #4
 8005568:	d139      	bne.n	80055de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0216 	bic.w	r2, r2, #22
 8005578:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005588:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <HAL_DMA_IRQHandler+0x736>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0208 	bic.w	r2, r2, #8
 80055a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	223f      	movs	r2, #63	@ 0x3f
 80055b4:	409a      	lsls	r2, r3
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8382 	beq.w	8005cd8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
          }
          return;
 80055dc:	e37c      	b.n	8005cd8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d018      	beq.n	800561e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d108      	bne.n	800560c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d02c      	beq.n	800565c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
 800560a:	e027      	b.n	800565c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d023      	beq.n	800565c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4798      	blx	r3
 800561c:	e01e      	b.n	800565c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10f      	bne.n	800564c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0210 	bic.w	r2, r2, #16
 800563a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 833e 	beq.w	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8088 	beq.w	8005784 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2204      	movs	r2, #4
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a89      	ldr	r2, [pc, #548]	@ (80058a8 <HAL_DMA_IRQHandler+0xa44>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d04a      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a88      	ldr	r2, [pc, #544]	@ (80058ac <HAL_DMA_IRQHandler+0xa48>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d045      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a86      	ldr	r2, [pc, #536]	@ (80058b0 <HAL_DMA_IRQHandler+0xa4c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d040      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a85      	ldr	r2, [pc, #532]	@ (80058b4 <HAL_DMA_IRQHandler+0xa50>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d03b      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a83      	ldr	r2, [pc, #524]	@ (80058b8 <HAL_DMA_IRQHandler+0xa54>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d036      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a82      	ldr	r2, [pc, #520]	@ (80058bc <HAL_DMA_IRQHandler+0xa58>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d031      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a80      	ldr	r2, [pc, #512]	@ (80058c0 <HAL_DMA_IRQHandler+0xa5c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d02c      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a7f      	ldr	r2, [pc, #508]	@ (80058c4 <HAL_DMA_IRQHandler+0xa60>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d027      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a7d      	ldr	r2, [pc, #500]	@ (80058c8 <HAL_DMA_IRQHandler+0xa64>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d022      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7c      	ldr	r2, [pc, #496]	@ (80058cc <HAL_DMA_IRQHandler+0xa68>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d01d      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a7a      	ldr	r2, [pc, #488]	@ (80058d0 <HAL_DMA_IRQHandler+0xa6c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d018      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a79      	ldr	r2, [pc, #484]	@ (80058d4 <HAL_DMA_IRQHandler+0xa70>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a77      	ldr	r2, [pc, #476]	@ (80058d8 <HAL_DMA_IRQHandler+0xa74>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00e      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a76      	ldr	r2, [pc, #472]	@ (80058dc <HAL_DMA_IRQHandler+0xa78>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a74      	ldr	r2, [pc, #464]	@ (80058e0 <HAL_DMA_IRQHandler+0xa7c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_DMA_IRQHandler+0x8b8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a73      	ldr	r2, [pc, #460]	@ (80058e4 <HAL_DMA_IRQHandler+0xa80>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <HAL_DMA_IRQHandler+0x8ca>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0201 	bic.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	e007      	b.n	800573e <HAL_DMA_IRQHandler+0x8da>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005746:	429a      	cmp	r2, r3
 8005748:	d307      	bcc.n	800575a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f2      	bne.n	800573e <HAL_DMA_IRQHandler+0x8da>
 8005758:	e000      	b.n	800575c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800575a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2203      	movs	r2, #3
 800576e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005772:	e003      	b.n	800577c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 82aa 	beq.w	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	4798      	blx	r3
 8005796:	e2a4      	b.n	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a52      	ldr	r2, [pc, #328]	@ (80058e8 <HAL_DMA_IRQHandler+0xa84>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d04a      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a51      	ldr	r2, [pc, #324]	@ (80058ec <HAL_DMA_IRQHandler+0xa88>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d045      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a4f      	ldr	r2, [pc, #316]	@ (80058f0 <HAL_DMA_IRQHandler+0xa8c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d040      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a4e      	ldr	r2, [pc, #312]	@ (80058f4 <HAL_DMA_IRQHandler+0xa90>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d03b      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a4c      	ldr	r2, [pc, #304]	@ (80058f8 <HAL_DMA_IRQHandler+0xa94>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d036      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a4b      	ldr	r2, [pc, #300]	@ (80058fc <HAL_DMA_IRQHandler+0xa98>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d031      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a49      	ldr	r2, [pc, #292]	@ (8005900 <HAL_DMA_IRQHandler+0xa9c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d02c      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a48      	ldr	r2, [pc, #288]	@ (8005904 <HAL_DMA_IRQHandler+0xaa0>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d027      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a46      	ldr	r2, [pc, #280]	@ (8005908 <HAL_DMA_IRQHandler+0xaa4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d022      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a45      	ldr	r2, [pc, #276]	@ (800590c <HAL_DMA_IRQHandler+0xaa8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d01d      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a43      	ldr	r2, [pc, #268]	@ (8005910 <HAL_DMA_IRQHandler+0xaac>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d018      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a42      	ldr	r2, [pc, #264]	@ (8005914 <HAL_DMA_IRQHandler+0xab0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a40      	ldr	r2, [pc, #256]	@ (8005918 <HAL_DMA_IRQHandler+0xab4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00e      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a3f      	ldr	r2, [pc, #252]	@ (800591c <HAL_DMA_IRQHandler+0xab8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a3d      	ldr	r2, [pc, #244]	@ (8005920 <HAL_DMA_IRQHandler+0xabc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_DMA_IRQHandler+0x9d4>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a3c      	ldr	r2, [pc, #240]	@ (8005924 <HAL_DMA_IRQHandler+0xac0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d101      	bne.n	800583c <HAL_DMA_IRQHandler+0x9d8>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <HAL_DMA_IRQHandler+0x9da>
 800583c:	2300      	movs	r3, #0
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 824f 	beq.w	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	2204      	movs	r2, #4
 8005856:	409a      	lsls	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80dd 	beq.w	8005a1c <HAL_DMA_IRQHandler+0xbb8>
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80d7 	beq.w	8005a1c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2204      	movs	r2, #4
 8005878:	409a      	lsls	r2, r3
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d059      	beq.n	800593c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d14a      	bne.n	8005928 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8220 	beq.w	8005cdc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058a4:	e21a      	b.n	8005cdc <HAL_DMA_IRQHandler+0xe78>
 80058a6:	bf00      	nop
 80058a8:	40020010 	.word	0x40020010
 80058ac:	40020028 	.word	0x40020028
 80058b0:	40020040 	.word	0x40020040
 80058b4:	40020058 	.word	0x40020058
 80058b8:	40020070 	.word	0x40020070
 80058bc:	40020088 	.word	0x40020088
 80058c0:	400200a0 	.word	0x400200a0
 80058c4:	400200b8 	.word	0x400200b8
 80058c8:	40020410 	.word	0x40020410
 80058cc:	40020428 	.word	0x40020428
 80058d0:	40020440 	.word	0x40020440
 80058d4:	40020458 	.word	0x40020458
 80058d8:	40020470 	.word	0x40020470
 80058dc:	40020488 	.word	0x40020488
 80058e0:	400204a0 	.word	0x400204a0
 80058e4:	400204b8 	.word	0x400204b8
 80058e8:	48022c08 	.word	0x48022c08
 80058ec:	48022c1c 	.word	0x48022c1c
 80058f0:	48022c30 	.word	0x48022c30
 80058f4:	48022c44 	.word	0x48022c44
 80058f8:	48022c58 	.word	0x48022c58
 80058fc:	48022c6c 	.word	0x48022c6c
 8005900:	48022c80 	.word	0x48022c80
 8005904:	48022c94 	.word	0x48022c94
 8005908:	58025408 	.word	0x58025408
 800590c:	5802541c 	.word	0x5802541c
 8005910:	58025430 	.word	0x58025430
 8005914:	58025444 	.word	0x58025444
 8005918:	58025458 	.word	0x58025458
 800591c:	5802546c 	.word	0x5802546c
 8005920:	58025480 	.word	0x58025480
 8005924:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 81d5 	beq.w	8005cdc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800593a:	e1cf      	b.n	8005cdc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d160      	bne.n	8005a08 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a7f      	ldr	r2, [pc, #508]	@ (8005b48 <HAL_DMA_IRQHandler+0xce4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d04a      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a7d      	ldr	r2, [pc, #500]	@ (8005b4c <HAL_DMA_IRQHandler+0xce8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d045      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b50 <HAL_DMA_IRQHandler+0xcec>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d040      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a7a      	ldr	r2, [pc, #488]	@ (8005b54 <HAL_DMA_IRQHandler+0xcf0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d03b      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a79      	ldr	r2, [pc, #484]	@ (8005b58 <HAL_DMA_IRQHandler+0xcf4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d036      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a77      	ldr	r2, [pc, #476]	@ (8005b5c <HAL_DMA_IRQHandler+0xcf8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d031      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a76      	ldr	r2, [pc, #472]	@ (8005b60 <HAL_DMA_IRQHandler+0xcfc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d02c      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a74      	ldr	r2, [pc, #464]	@ (8005b64 <HAL_DMA_IRQHandler+0xd00>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d027      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a73      	ldr	r2, [pc, #460]	@ (8005b68 <HAL_DMA_IRQHandler+0xd04>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d022      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a71      	ldr	r2, [pc, #452]	@ (8005b6c <HAL_DMA_IRQHandler+0xd08>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01d      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a70      	ldr	r2, [pc, #448]	@ (8005b70 <HAL_DMA_IRQHandler+0xd0c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005b74 <HAL_DMA_IRQHandler+0xd10>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005b78 <HAL_DMA_IRQHandler+0xd14>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a6b      	ldr	r2, [pc, #428]	@ (8005b7c <HAL_DMA_IRQHandler+0xd18>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005b80 <HAL_DMA_IRQHandler+0xd1c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_DMA_IRQHandler+0xb82>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a68      	ldr	r2, [pc, #416]	@ (8005b84 <HAL_DMA_IRQHandler+0xd20>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d108      	bne.n	80059f8 <HAL_DMA_IRQHandler+0xb94>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0208 	bic.w	r2, r2, #8
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e007      	b.n	8005a08 <HAL_DMA_IRQHandler+0xba4>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0204 	bic.w	r2, r2, #4
 8005a06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8165 	beq.w	8005cdc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a1a:	e15f      	b.n	8005cdc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	2202      	movs	r2, #2
 8005a26:	409a      	lsls	r2, r3
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80c5 	beq.w	8005bbc <HAL_DMA_IRQHandler+0xd58>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80bf 	beq.w	8005bbc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2202      	movs	r2, #2
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d018      	beq.n	8005a8a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 813a 	beq.w	8005ce0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a74:	e134      	b.n	8005ce0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8130 	beq.w	8005ce0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a88:	e12a      	b.n	8005ce0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f040 8089 	bne.w	8005ba8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b48 <HAL_DMA_IRQHandler+0xce4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d04a      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	@ (8005b4c <HAL_DMA_IRQHandler+0xce8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d045      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a28      	ldr	r2, [pc, #160]	@ (8005b50 <HAL_DMA_IRQHandler+0xcec>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d040      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a26      	ldr	r2, [pc, #152]	@ (8005b54 <HAL_DMA_IRQHandler+0xcf0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d03b      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a25      	ldr	r2, [pc, #148]	@ (8005b58 <HAL_DMA_IRQHandler+0xcf4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d036      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a23      	ldr	r2, [pc, #140]	@ (8005b5c <HAL_DMA_IRQHandler+0xcf8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d031      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a22      	ldr	r2, [pc, #136]	@ (8005b60 <HAL_DMA_IRQHandler+0xcfc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d02c      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a20      	ldr	r2, [pc, #128]	@ (8005b64 <HAL_DMA_IRQHandler+0xd00>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d027      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1f      	ldr	r2, [pc, #124]	@ (8005b68 <HAL_DMA_IRQHandler+0xd04>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b6c <HAL_DMA_IRQHandler+0xd08>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01d      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b70 <HAL_DMA_IRQHandler+0xd0c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1a      	ldr	r2, [pc, #104]	@ (8005b74 <HAL_DMA_IRQHandler+0xd10>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a19      	ldr	r2, [pc, #100]	@ (8005b78 <HAL_DMA_IRQHandler+0xd14>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a17      	ldr	r2, [pc, #92]	@ (8005b7c <HAL_DMA_IRQHandler+0xd18>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a16      	ldr	r2, [pc, #88]	@ (8005b80 <HAL_DMA_IRQHandler+0xd1c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_DMA_IRQHandler+0xcd2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a14      	ldr	r2, [pc, #80]	@ (8005b84 <HAL_DMA_IRQHandler+0xd20>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d128      	bne.n	8005b88 <HAL_DMA_IRQHandler+0xd24>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0214 	bic.w	r2, r2, #20
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	e027      	b.n	8005b98 <HAL_DMA_IRQHandler+0xd34>
 8005b48:	40020010 	.word	0x40020010
 8005b4c:	40020028 	.word	0x40020028
 8005b50:	40020040 	.word	0x40020040
 8005b54:	40020058 	.word	0x40020058
 8005b58:	40020070 	.word	0x40020070
 8005b5c:	40020088 	.word	0x40020088
 8005b60:	400200a0 	.word	0x400200a0
 8005b64:	400200b8 	.word	0x400200b8
 8005b68:	40020410 	.word	0x40020410
 8005b6c:	40020428 	.word	0x40020428
 8005b70:	40020440 	.word	0x40020440
 8005b74:	40020458 	.word	0x40020458
 8005b78:	40020470 	.word	0x40020470
 8005b7c:	40020488 	.word	0x40020488
 8005b80:	400204a0 	.word	0x400204a0
 8005b84:	400204b8 	.word	0x400204b8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 020a 	bic.w	r2, r2, #10
 8005b96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8097 	beq.w	8005ce0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bba:	e091      	b.n	8005ce0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8088 	beq.w	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8082 	beq.w	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a41      	ldr	r2, [pc, #260]	@ (8005ce8 <HAL_DMA_IRQHandler+0xe84>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d04a      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a3f      	ldr	r2, [pc, #252]	@ (8005cec <HAL_DMA_IRQHandler+0xe88>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d045      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a3e      	ldr	r2, [pc, #248]	@ (8005cf0 <HAL_DMA_IRQHandler+0xe8c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d040      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a3c      	ldr	r2, [pc, #240]	@ (8005cf4 <HAL_DMA_IRQHandler+0xe90>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d03b      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8005cf8 <HAL_DMA_IRQHandler+0xe94>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d036      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a39      	ldr	r2, [pc, #228]	@ (8005cfc <HAL_DMA_IRQHandler+0xe98>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d031      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a38      	ldr	r2, [pc, #224]	@ (8005d00 <HAL_DMA_IRQHandler+0xe9c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d02c      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a36      	ldr	r2, [pc, #216]	@ (8005d04 <HAL_DMA_IRQHandler+0xea0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d027      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a35      	ldr	r2, [pc, #212]	@ (8005d08 <HAL_DMA_IRQHandler+0xea4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d022      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a33      	ldr	r2, [pc, #204]	@ (8005d0c <HAL_DMA_IRQHandler+0xea8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01d      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a32      	ldr	r2, [pc, #200]	@ (8005d10 <HAL_DMA_IRQHandler+0xeac>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d018      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a30      	ldr	r2, [pc, #192]	@ (8005d14 <HAL_DMA_IRQHandler+0xeb0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d18 <HAL_DMA_IRQHandler+0xeb4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00e      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2d      	ldr	r2, [pc, #180]	@ (8005d1c <HAL_DMA_IRQHandler+0xeb8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d009      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d20 <HAL_DMA_IRQHandler+0xebc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xe1a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2a      	ldr	r2, [pc, #168]	@ (8005d24 <HAL_DMA_IRQHandler+0xec0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d108      	bne.n	8005c90 <HAL_DMA_IRQHandler+0xe2c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 021c 	bic.w	r2, r2, #28
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e007      	b.n	8005ca0 <HAL_DMA_IRQHandler+0xe3c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 020e 	bic.w	r2, r2, #14
 8005c9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	2201      	movs	r2, #1
 8005caa:	409a      	lsls	r2, r3
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	4798      	blx	r3
 8005cd6:	e004      	b.n	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005cd8:	bf00      	nop
 8005cda:	e002      	b.n	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ce0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ce2:	3728      	adds	r7, #40	@ 0x28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40020010 	.word	0x40020010
 8005cec:	40020028 	.word	0x40020028
 8005cf0:	40020040 	.word	0x40020040
 8005cf4:	40020058 	.word	0x40020058
 8005cf8:	40020070 	.word	0x40020070
 8005cfc:	40020088 	.word	0x40020088
 8005d00:	400200a0 	.word	0x400200a0
 8005d04:	400200b8 	.word	0x400200b8
 8005d08:	40020410 	.word	0x40020410
 8005d0c:	40020428 	.word	0x40020428
 8005d10:	40020440 	.word	0x40020440
 8005d14:	40020458 	.word	0x40020458
 8005d18:	40020470 	.word	0x40020470
 8005d1c:	40020488 	.word	0x40020488
 8005d20:	400204a0 	.word	0x400204a0
 8005d24:	400204b8 	.word	0x400204b8

08005d28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a7f      	ldr	r2, [pc, #508]	@ (8005f44 <DMA_SetConfig+0x21c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d072      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a7d      	ldr	r2, [pc, #500]	@ (8005f48 <DMA_SetConfig+0x220>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d06d      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a7c      	ldr	r2, [pc, #496]	@ (8005f4c <DMA_SetConfig+0x224>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d068      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a7a      	ldr	r2, [pc, #488]	@ (8005f50 <DMA_SetConfig+0x228>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d063      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a79      	ldr	r2, [pc, #484]	@ (8005f54 <DMA_SetConfig+0x22c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d05e      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a77      	ldr	r2, [pc, #476]	@ (8005f58 <DMA_SetConfig+0x230>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d059      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a76      	ldr	r2, [pc, #472]	@ (8005f5c <DMA_SetConfig+0x234>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d054      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a74      	ldr	r2, [pc, #464]	@ (8005f60 <DMA_SetConfig+0x238>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d04f      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a73      	ldr	r2, [pc, #460]	@ (8005f64 <DMA_SetConfig+0x23c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d04a      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a71      	ldr	r2, [pc, #452]	@ (8005f68 <DMA_SetConfig+0x240>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d045      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a70      	ldr	r2, [pc, #448]	@ (8005f6c <DMA_SetConfig+0x244>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d040      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a6e      	ldr	r2, [pc, #440]	@ (8005f70 <DMA_SetConfig+0x248>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d03b      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a6d      	ldr	r2, [pc, #436]	@ (8005f74 <DMA_SetConfig+0x24c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d036      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8005f78 <DMA_SetConfig+0x250>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d031      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a6a      	ldr	r2, [pc, #424]	@ (8005f7c <DMA_SetConfig+0x254>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d02c      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a68      	ldr	r2, [pc, #416]	@ (8005f80 <DMA_SetConfig+0x258>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d027      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a67      	ldr	r2, [pc, #412]	@ (8005f84 <DMA_SetConfig+0x25c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d022      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a65      	ldr	r2, [pc, #404]	@ (8005f88 <DMA_SetConfig+0x260>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01d      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a64      	ldr	r2, [pc, #400]	@ (8005f8c <DMA_SetConfig+0x264>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d018      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a62      	ldr	r2, [pc, #392]	@ (8005f90 <DMA_SetConfig+0x268>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a61      	ldr	r2, [pc, #388]	@ (8005f94 <DMA_SetConfig+0x26c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00e      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a5f      	ldr	r2, [pc, #380]	@ (8005f98 <DMA_SetConfig+0x270>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d009      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a5e      	ldr	r2, [pc, #376]	@ (8005f9c <DMA_SetConfig+0x274>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <DMA_SetConfig+0x10a>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a5c      	ldr	r2, [pc, #368]	@ (8005fa0 <DMA_SetConfig+0x278>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d101      	bne.n	8005e36 <DMA_SetConfig+0x10e>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <DMA_SetConfig+0x110>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00d      	beq.n	8005e58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a39      	ldr	r2, [pc, #228]	@ (8005f44 <DMA_SetConfig+0x21c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d04a      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a38      	ldr	r2, [pc, #224]	@ (8005f48 <DMA_SetConfig+0x220>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d045      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a36      	ldr	r2, [pc, #216]	@ (8005f4c <DMA_SetConfig+0x224>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d040      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a35      	ldr	r2, [pc, #212]	@ (8005f50 <DMA_SetConfig+0x228>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d03b      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a33      	ldr	r2, [pc, #204]	@ (8005f54 <DMA_SetConfig+0x22c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d036      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a32      	ldr	r2, [pc, #200]	@ (8005f58 <DMA_SetConfig+0x230>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d031      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a30      	ldr	r2, [pc, #192]	@ (8005f5c <DMA_SetConfig+0x234>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d02c      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8005f60 <DMA_SetConfig+0x238>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d027      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a2d      	ldr	r2, [pc, #180]	@ (8005f64 <DMA_SetConfig+0x23c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d022      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8005f68 <DMA_SetConfig+0x240>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d01d      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f6c <DMA_SetConfig+0x244>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a29      	ldr	r2, [pc, #164]	@ (8005f70 <DMA_SetConfig+0x248>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a27      	ldr	r2, [pc, #156]	@ (8005f74 <DMA_SetConfig+0x24c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a26      	ldr	r2, [pc, #152]	@ (8005f78 <DMA_SetConfig+0x250>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a24      	ldr	r2, [pc, #144]	@ (8005f7c <DMA_SetConfig+0x254>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <DMA_SetConfig+0x1d0>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a23      	ldr	r2, [pc, #140]	@ (8005f80 <DMA_SetConfig+0x258>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <DMA_SetConfig+0x1d4>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <DMA_SetConfig+0x1d6>
 8005efc:	2300      	movs	r3, #0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d059      	beq.n	8005fb6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	223f      	movs	r2, #63	@ 0x3f
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f20:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d138      	bne.n	8005fa4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f42:	e0ae      	b.n	80060a2 <DMA_SetConfig+0x37a>
 8005f44:	40020010 	.word	0x40020010
 8005f48:	40020028 	.word	0x40020028
 8005f4c:	40020040 	.word	0x40020040
 8005f50:	40020058 	.word	0x40020058
 8005f54:	40020070 	.word	0x40020070
 8005f58:	40020088 	.word	0x40020088
 8005f5c:	400200a0 	.word	0x400200a0
 8005f60:	400200b8 	.word	0x400200b8
 8005f64:	40020410 	.word	0x40020410
 8005f68:	40020428 	.word	0x40020428
 8005f6c:	40020440 	.word	0x40020440
 8005f70:	40020458 	.word	0x40020458
 8005f74:	40020470 	.word	0x40020470
 8005f78:	40020488 	.word	0x40020488
 8005f7c:	400204a0 	.word	0x400204a0
 8005f80:	400204b8 	.word	0x400204b8
 8005f84:	58025408 	.word	0x58025408
 8005f88:	5802541c 	.word	0x5802541c
 8005f8c:	58025430 	.word	0x58025430
 8005f90:	58025444 	.word	0x58025444
 8005f94:	58025458 	.word	0x58025458
 8005f98:	5802546c 	.word	0x5802546c
 8005f9c:	58025480 	.word	0x58025480
 8005fa0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]
}
 8005fb4:	e075      	b.n	80060a2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a3d      	ldr	r2, [pc, #244]	@ (80060b0 <DMA_SetConfig+0x388>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d04a      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a3b      	ldr	r2, [pc, #236]	@ (80060b4 <DMA_SetConfig+0x38c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d045      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a3a      	ldr	r2, [pc, #232]	@ (80060b8 <DMA_SetConfig+0x390>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d040      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a38      	ldr	r2, [pc, #224]	@ (80060bc <DMA_SetConfig+0x394>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d03b      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a37      	ldr	r2, [pc, #220]	@ (80060c0 <DMA_SetConfig+0x398>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d036      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a35      	ldr	r2, [pc, #212]	@ (80060c4 <DMA_SetConfig+0x39c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d031      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a34      	ldr	r2, [pc, #208]	@ (80060c8 <DMA_SetConfig+0x3a0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d02c      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a32      	ldr	r2, [pc, #200]	@ (80060cc <DMA_SetConfig+0x3a4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d027      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a31      	ldr	r2, [pc, #196]	@ (80060d0 <DMA_SetConfig+0x3a8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d022      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2f      	ldr	r2, [pc, #188]	@ (80060d4 <DMA_SetConfig+0x3ac>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01d      	beq.n	8006056 <DMA_SetConfig+0x32e>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2e      	ldr	r2, [pc, #184]	@ (80060d8 <DMA_SetConfig+0x3b0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d018      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2c      	ldr	r2, [pc, #176]	@ (80060dc <DMA_SetConfig+0x3b4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <DMA_SetConfig+0x32e>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2b      	ldr	r2, [pc, #172]	@ (80060e0 <DMA_SetConfig+0x3b8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a29      	ldr	r2, [pc, #164]	@ (80060e4 <DMA_SetConfig+0x3bc>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <DMA_SetConfig+0x32e>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a28      	ldr	r2, [pc, #160]	@ (80060e8 <DMA_SetConfig+0x3c0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <DMA_SetConfig+0x32e>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a26      	ldr	r2, [pc, #152]	@ (80060ec <DMA_SetConfig+0x3c4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <DMA_SetConfig+0x332>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <DMA_SetConfig+0x334>
 800605a:	2300      	movs	r3, #0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d020      	beq.n	80060a2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	2201      	movs	r2, #1
 800606a:	409a      	lsls	r2, r3
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b40      	cmp	r3, #64	@ 0x40
 800607e:	d108      	bne.n	8006092 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	60da      	str	r2, [r3, #12]
}
 8006090:	e007      	b.n	80060a2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	60da      	str	r2, [r3, #12]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	48022c08 	.word	0x48022c08
 80060b4:	48022c1c 	.word	0x48022c1c
 80060b8:	48022c30 	.word	0x48022c30
 80060bc:	48022c44 	.word	0x48022c44
 80060c0:	48022c58 	.word	0x48022c58
 80060c4:	48022c6c 	.word	0x48022c6c
 80060c8:	48022c80 	.word	0x48022c80
 80060cc:	48022c94 	.word	0x48022c94
 80060d0:	58025408 	.word	0x58025408
 80060d4:	5802541c 	.word	0x5802541c
 80060d8:	58025430 	.word	0x58025430
 80060dc:	58025444 	.word	0x58025444
 80060e0:	58025458 	.word	0x58025458
 80060e4:	5802546c 	.word	0x5802546c
 80060e8:	58025480 	.word	0x58025480
 80060ec:	58025494 	.word	0x58025494

080060f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a42      	ldr	r2, [pc, #264]	@ (8006208 <DMA_CalcBaseAndBitshift+0x118>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d04a      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a41      	ldr	r2, [pc, #260]	@ (800620c <DMA_CalcBaseAndBitshift+0x11c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d045      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3f      	ldr	r2, [pc, #252]	@ (8006210 <DMA_CalcBaseAndBitshift+0x120>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d040      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3e      	ldr	r2, [pc, #248]	@ (8006214 <DMA_CalcBaseAndBitshift+0x124>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d03b      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3c      	ldr	r2, [pc, #240]	@ (8006218 <DMA_CalcBaseAndBitshift+0x128>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d036      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a3b      	ldr	r2, [pc, #236]	@ (800621c <DMA_CalcBaseAndBitshift+0x12c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d031      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a39      	ldr	r2, [pc, #228]	@ (8006220 <DMA_CalcBaseAndBitshift+0x130>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d02c      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a38      	ldr	r2, [pc, #224]	@ (8006224 <DMA_CalcBaseAndBitshift+0x134>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d027      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a36      	ldr	r2, [pc, #216]	@ (8006228 <DMA_CalcBaseAndBitshift+0x138>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d022      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a35      	ldr	r2, [pc, #212]	@ (800622c <DMA_CalcBaseAndBitshift+0x13c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d01d      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a33      	ldr	r2, [pc, #204]	@ (8006230 <DMA_CalcBaseAndBitshift+0x140>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d018      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a32      	ldr	r2, [pc, #200]	@ (8006234 <DMA_CalcBaseAndBitshift+0x144>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d013      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a30      	ldr	r2, [pc, #192]	@ (8006238 <DMA_CalcBaseAndBitshift+0x148>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00e      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2f      	ldr	r2, [pc, #188]	@ (800623c <DMA_CalcBaseAndBitshift+0x14c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d009      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2d      	ldr	r2, [pc, #180]	@ (8006240 <DMA_CalcBaseAndBitshift+0x150>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <DMA_CalcBaseAndBitshift+0xa8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2c      	ldr	r2, [pc, #176]	@ (8006244 <DMA_CalcBaseAndBitshift+0x154>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d101      	bne.n	800619c <DMA_CalcBaseAndBitshift+0xac>
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <DMA_CalcBaseAndBitshift+0xae>
 800619c:	2300      	movs	r3, #0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d024      	beq.n	80061ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	3b10      	subs	r3, #16
 80061aa:	4a27      	ldr	r2, [pc, #156]	@ (8006248 <DMA_CalcBaseAndBitshift+0x158>)
 80061ac:	fba2 2303 	umull	r2, r3, r2, r3
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	4a24      	ldr	r2, [pc, #144]	@ (800624c <DMA_CalcBaseAndBitshift+0x15c>)
 80061bc:	5cd3      	ldrb	r3, [r2, r3]
 80061be:	461a      	mov	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d908      	bls.n	80061dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006250 <DMA_CalcBaseAndBitshift+0x160>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80061da:	e00d      	b.n	80061f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006250 <DMA_CalcBaseAndBitshift+0x160>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ea:	e005      	b.n	80061f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	40020010 	.word	0x40020010
 800620c:	40020028 	.word	0x40020028
 8006210:	40020040 	.word	0x40020040
 8006214:	40020058 	.word	0x40020058
 8006218:	40020070 	.word	0x40020070
 800621c:	40020088 	.word	0x40020088
 8006220:	400200a0 	.word	0x400200a0
 8006224:	400200b8 	.word	0x400200b8
 8006228:	40020410 	.word	0x40020410
 800622c:	40020428 	.word	0x40020428
 8006230:	40020440 	.word	0x40020440
 8006234:	40020458 	.word	0x40020458
 8006238:	40020470 	.word	0x40020470
 800623c:	40020488 	.word	0x40020488
 8006240:	400204a0 	.word	0x400204a0
 8006244:	400204b8 	.word	0x400204b8
 8006248:	aaaaaaab 	.word	0xaaaaaaab
 800624c:	08012a70 	.word	0x08012a70
 8006250:	fffffc00 	.word	0xfffffc00

08006254 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d120      	bne.n	80062aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626c:	2b03      	cmp	r3, #3
 800626e:	d858      	bhi.n	8006322 <DMA_CheckFifoParam+0xce>
 8006270:	a201      	add	r2, pc, #4	@ (adr r2, 8006278 <DMA_CheckFifoParam+0x24>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	08006289 	.word	0x08006289
 800627c:	0800629b 	.word	0x0800629b
 8006280:	08006289 	.word	0x08006289
 8006284:	08006323 	.word	0x08006323
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d048      	beq.n	8006326 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006298:	e045      	b.n	8006326 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062a2:	d142      	bne.n	800632a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062a8:	e03f      	b.n	800632a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062b2:	d123      	bne.n	80062fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d838      	bhi.n	800632e <DMA_CheckFifoParam+0xda>
 80062bc:	a201      	add	r2, pc, #4	@ (adr r2, 80062c4 <DMA_CheckFifoParam+0x70>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	080062db 	.word	0x080062db
 80062cc:	080062d5 	.word	0x080062d5
 80062d0:	080062ed 	.word	0x080062ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
        break;
 80062d8:	e030      	b.n	800633c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d025      	beq.n	8006332 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062ea:	e022      	b.n	8006332 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062f4:	d11f      	bne.n	8006336 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062fa:	e01c      	b.n	8006336 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006300:	2b02      	cmp	r3, #2
 8006302:	d902      	bls.n	800630a <DMA_CheckFifoParam+0xb6>
 8006304:	2b03      	cmp	r3, #3
 8006306:	d003      	beq.n	8006310 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006308:	e018      	b.n	800633c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	73fb      	strb	r3, [r7, #15]
        break;
 800630e:	e015      	b.n	800633c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00e      	beq.n	800633a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
    break;
 8006320:	e00b      	b.n	800633a <DMA_CheckFifoParam+0xe6>
        break;
 8006322:	bf00      	nop
 8006324:	e00a      	b.n	800633c <DMA_CheckFifoParam+0xe8>
        break;
 8006326:	bf00      	nop
 8006328:	e008      	b.n	800633c <DMA_CheckFifoParam+0xe8>
        break;
 800632a:	bf00      	nop
 800632c:	e006      	b.n	800633c <DMA_CheckFifoParam+0xe8>
        break;
 800632e:	bf00      	nop
 8006330:	e004      	b.n	800633c <DMA_CheckFifoParam+0xe8>
        break;
 8006332:	bf00      	nop
 8006334:	e002      	b.n	800633c <DMA_CheckFifoParam+0xe8>
        break;
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <DMA_CheckFifoParam+0xe8>
    break;
 800633a:	bf00      	nop
    }
  }

  return status;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop

0800634c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a38      	ldr	r2, [pc, #224]	@ (8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d022      	beq.n	80063aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a36      	ldr	r2, [pc, #216]	@ (8006444 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d01d      	beq.n	80063aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a35      	ldr	r2, [pc, #212]	@ (8006448 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d018      	beq.n	80063aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a33      	ldr	r2, [pc, #204]	@ (800644c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a32      	ldr	r2, [pc, #200]	@ (8006450 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a30      	ldr	r2, [pc, #192]	@ (8006454 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a2f      	ldr	r2, [pc, #188]	@ (8006458 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2d      	ldr	r2, [pc, #180]	@ (800645c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d101      	bne.n	80063ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80063ae:	2300      	movs	r3, #0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01a      	beq.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	3b08      	subs	r3, #8
 80063bc:	4a28      	ldr	r2, [pc, #160]	@ (8006460 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	091b      	lsrs	r3, r3, #4
 80063c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4b26      	ldr	r3, [pc, #152]	@ (8006464 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a24      	ldr	r2, [pc, #144]	@ (8006468 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80063d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2201      	movs	r2, #1
 80063e2:	409a      	lsls	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80063e8:	e024      	b.n	8006434 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3b10      	subs	r3, #16
 80063f2:	4a1e      	ldr	r2, [pc, #120]	@ (800646c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80063f4:	fba2 2303 	umull	r2, r3, r2, r3
 80063f8:	091b      	lsrs	r3, r3, #4
 80063fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006470 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d806      	bhi.n	8006412 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4a1b      	ldr	r2, [pc, #108]	@ (8006474 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d902      	bls.n	8006412 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3308      	adds	r3, #8
 8006410:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4b18      	ldr	r3, [pc, #96]	@ (8006478 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a16      	ldr	r2, [pc, #88]	@ (800647c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006424:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	2201      	movs	r2, #1
 800642e:	409a      	lsls	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	58025408 	.word	0x58025408
 8006444:	5802541c 	.word	0x5802541c
 8006448:	58025430 	.word	0x58025430
 800644c:	58025444 	.word	0x58025444
 8006450:	58025458 	.word	0x58025458
 8006454:	5802546c 	.word	0x5802546c
 8006458:	58025480 	.word	0x58025480
 800645c:	58025494 	.word	0x58025494
 8006460:	cccccccd 	.word	0xcccccccd
 8006464:	16009600 	.word	0x16009600
 8006468:	58025880 	.word	0x58025880
 800646c:	aaaaaaab 	.word	0xaaaaaaab
 8006470:	400204b8 	.word	0x400204b8
 8006474:	4002040f 	.word	0x4002040f
 8006478:	10008200 	.word	0x10008200
 800647c:	40020880 	.word	0x40020880

08006480 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d04a      	beq.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b08      	cmp	r3, #8
 800649a:	d847      	bhi.n	800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a25      	ldr	r2, [pc, #148]	@ (8006538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d022      	beq.n	80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a24      	ldr	r2, [pc, #144]	@ (800653c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d01d      	beq.n	80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a22      	ldr	r2, [pc, #136]	@ (8006540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d018      	beq.n	80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a21      	ldr	r2, [pc, #132]	@ (8006544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d013      	beq.n	80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00e      	beq.n	80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1e      	ldr	r2, [pc, #120]	@ (800654c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d009      	beq.n	80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d101      	bne.n	80064f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80064f0:	2300      	movs	r3, #0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4b17      	ldr	r3, [pc, #92]	@ (8006558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	461a      	mov	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a15      	ldr	r2, [pc, #84]	@ (800655c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006508:	671a      	str	r2, [r3, #112]	@ 0x70
 800650a:	e009      	b.n	8006520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4b14      	ldr	r3, [pc, #80]	@ (8006560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	461a      	mov	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a11      	ldr	r2, [pc, #68]	@ (8006564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800651e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3b01      	subs	r3, #1
 8006524:	2201      	movs	r2, #1
 8006526:	409a      	lsls	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800652c:	bf00      	nop
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	58025408 	.word	0x58025408
 800653c:	5802541c 	.word	0x5802541c
 8006540:	58025430 	.word	0x58025430
 8006544:	58025444 	.word	0x58025444
 8006548:	58025458 	.word	0x58025458
 800654c:	5802546c 	.word	0x5802546c
 8006550:	58025480 	.word	0x58025480
 8006554:	58025494 	.word	0x58025494
 8006558:	1600963f 	.word	0x1600963f
 800655c:	58025940 	.word	0x58025940
 8006560:	1000823f 	.word	0x1000823f
 8006564:	40020940 	.word	0x40020940

08006568 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b098      	sub	sp, #96	@ 0x60
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006570:	4a84      	ldr	r2, [pc, #528]	@ (8006784 <HAL_FDCAN_Init+0x21c>)
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	4611      	mov	r1, r2
 8006578:	224c      	movs	r2, #76	@ 0x4c
 800657a:	4618      	mov	r0, r3
 800657c:	f00c f8ba 	bl	80126f4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e1c6      	b.n	8006918 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a7e      	ldr	r2, [pc, #504]	@ (8006788 <HAL_FDCAN_Init+0x220>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d106      	bne.n	80065a2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fb fb6e 	bl	8001c98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0210 	bic.w	r2, r2, #16
 80065ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065cc:	f7fc ff36 	bl	800343c <HAL_GetTick>
 80065d0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80065d2:	e014      	b.n	80065fe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80065d4:	f7fc ff32 	bl	800343c <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b0a      	cmp	r3, #10
 80065e0:	d90d      	bls.n	80065fe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065e8:	f043 0201 	orr.w	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2203      	movs	r2, #3
 80065f6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e18c      	b.n	8006918 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d0e3      	beq.n	80065d4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800661c:	f7fc ff0e 	bl	800343c <HAL_GetTick>
 8006620:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006622:	e014      	b.n	800664e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006624:	f7fc ff0a 	bl	800343c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b0a      	cmp	r3, #10
 8006630:	d90d      	bls.n	800664e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006638:	f043 0201 	orr.w	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2203      	movs	r2, #3
 8006646:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e164      	b.n	8006918 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0e3      	beq.n	8006624 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0202 	orr.w	r2, r2, #2
 800666a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7c1b      	ldrb	r3, [r3, #16]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d108      	bne.n	8006686 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006682:	619a      	str	r2, [r3, #24]
 8006684:	e007      	b.n	8006696 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699a      	ldr	r2, [r3, #24]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006694:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7c5b      	ldrb	r3, [r3, #17]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d108      	bne.n	80066b0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066ac:	619a      	str	r2, [r3, #24]
 80066ae:	e007      	b.n	80066c0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066be:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7c9b      	ldrb	r3, [r3, #18]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d108      	bne.n	80066da <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066d6:	619a      	str	r2, [r3, #24]
 80066d8:	e007      	b.n	80066ea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066e8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800670e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691a      	ldr	r2, [r3, #16]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0210 	bic.w	r2, r2, #16
 800671e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d108      	bne.n	800673a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699a      	ldr	r2, [r3, #24]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0204 	orr.w	r2, r2, #4
 8006736:	619a      	str	r2, [r3, #24]
 8006738:	e030      	b.n	800679c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d02c      	beq.n	800679c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b02      	cmp	r3, #2
 8006748:	d020      	beq.n	800678c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006758:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0210 	orr.w	r2, r2, #16
 8006768:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b03      	cmp	r3, #3
 8006770:	d114      	bne.n	800679c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0220 	orr.w	r2, r2, #32
 8006780:	619a      	str	r2, [r3, #24]
 8006782:	e00b      	b.n	800679c <HAL_FDCAN_Init+0x234>
 8006784:	080129cc 	.word	0x080129cc
 8006788:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0220 	orr.w	r2, r2, #32
 800679a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067ac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80067b4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	3b01      	subs	r3, #1
 80067be:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80067c4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067c6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067d0:	d115      	bne.n	80067fe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	3b01      	subs	r3, #1
 80067de:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80067e0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e6:	3b01      	subs	r3, #1
 80067e8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80067ea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f2:	3b01      	subs	r3, #1
 80067f4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80067fa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80067fc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006824:	4413      	add	r3, r2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d011      	beq.n	800684e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006832:	f023 0107 	bic.w	r1, r3, #7
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	3360      	adds	r3, #96	@ 0x60
 800683e:	443b      	add	r3, r7
 8006840:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d011      	beq.n	800687a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800685e:	f023 0107 	bic.w	r1, r3, #7
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	3360      	adds	r3, #96	@ 0x60
 800686a:	443b      	add	r3, r7
 800686c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687e:	2b00      	cmp	r3, #0
 8006880:	d012      	beq.n	80068a8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800688a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	3360      	adds	r3, #96	@ 0x60
 8006896:	443b      	add	r3, r7
 8006898:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800689c:	011a      	lsls	r2, r3, #4
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d012      	beq.n	80068d6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80068b8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	3360      	adds	r3, #96	@ 0x60
 80068c4:	443b      	add	r3, r7
 80068c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a11      	ldr	r2, [pc, #68]	@ (8006920 <HAL_FDCAN_Init+0x3b8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d107      	bne.n	80068f0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f022 0203 	bic.w	r2, r2, #3
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f80b 	bl	8006924 <FDCAN_CalcultateRamBlockAddresses>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006914:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006918:	4618      	mov	r0, r3
 800691a:	3760      	adds	r7, #96	@ 0x60
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	4000a000 	.word	0x4000a000

08006924 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006930:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800693a:	4ba7      	ldr	r3, [pc, #668]	@ (8006bd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800693c:	4013      	ands	r3, r2
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	0091      	lsls	r1, r2, #2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	430b      	orrs	r3, r1
 8006948:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006954:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695c:	041a      	lsls	r2, r3, #16
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	4413      	add	r3, r2
 8006970:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800697a:	4b97      	ldr	r3, [pc, #604]	@ (8006bd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800697c:	4013      	ands	r3, r2
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	0091      	lsls	r1, r2, #2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	430b      	orrs	r3, r1
 8006988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006994:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800699c:	041a      	lsls	r2, r3, #16
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	4413      	add	r3, r2
 80069b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80069bc:	4b86      	ldr	r3, [pc, #536]	@ (8006bd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069be:	4013      	ands	r3, r2
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	0091      	lsls	r1, r2, #2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	430b      	orrs	r3, r1
 80069ca:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069d6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069de:	041a      	lsls	r2, r3, #16
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	4413      	add	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006a04:	4b74      	ldr	r3, [pc, #464]	@ (8006bd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a06:	4013      	ands	r3, r2
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	0091      	lsls	r1, r2, #2
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6812      	ldr	r2, [r2, #0]
 8006a10:	430b      	orrs	r3, r1
 8006a12:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a1e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a26:	041a      	lsls	r2, r3, #16
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4413      	add	r3, r2
 8006a42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006a4c:	4b62      	ldr	r3, [pc, #392]	@ (8006bd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	0091      	lsls	r1, r2, #2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6812      	ldr	r2, [r2, #0]
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006a66:	fb02 f303 	mul.w	r3, r2, r3
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006a78:	4b57      	ldr	r3, [pc, #348]	@ (8006bd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	0091      	lsls	r1, r2, #2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	430b      	orrs	r3, r1
 8006a86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a92:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9a:	041a      	lsls	r2, r3, #16
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	4413      	add	r3, r2
 8006ab0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006aba:	4b47      	ldr	r3, [pc, #284]	@ (8006bd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	0091      	lsls	r1, r2, #2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006ad4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006adc:	041a      	lsls	r2, r3, #16
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006af0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006af8:	061a      	lsls	r2, r3, #24
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b08:	4b34      	ldr	r3, [pc, #208]	@ (8006bdc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009a      	lsls	r2, r3, #2
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	441a      	add	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	441a      	add	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006b3e:	fb01 f303 	mul.w	r3, r1, r3
 8006b42:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006b44:	441a      	add	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006b5c:	441a      	add	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006b6e:	fb01 f303 	mul.w	r3, r1, r3
 8006b72:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006b74:	441a      	add	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	441a      	add	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006b9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006bba:	fb01 f303 	mul.w	r3, r1, r3
 8006bbe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006bc0:	441a      	add	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bce:	4a04      	ldr	r2, [pc, #16]	@ (8006be0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d915      	bls.n	8006c00 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006bd4:	e006      	b.n	8006be4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006bd6:	bf00      	nop
 8006bd8:	ffff0003 	.word	0xffff0003
 8006bdc:	10002b00 	.word	0x10002b00
 8006be0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bea:	f043 0220 	orr.w	r2, r3, #32
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e010      	b.n	8006c22 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	e005      	b.n	8006c14 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3304      	adds	r3, #4
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d3f3      	bcc.n	8006c08 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop

08006c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b089      	sub	sp, #36	@ 0x24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c3e:	4b89      	ldr	r3, [pc, #548]	@ (8006e64 <HAL_GPIO_Init+0x234>)
 8006c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c42:	e194      	b.n	8006f6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	2101      	movs	r1, #1
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c50:	4013      	ands	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8186 	beq.w	8006f68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d005      	beq.n	8006c74 <HAL_GPIO_Init+0x44>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d130      	bne.n	8006cd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	2203      	movs	r2, #3
 8006c80:	fa02 f303 	lsl.w	r3, r2, r3
 8006c84:	43db      	mvns	r3, r3
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006caa:	2201      	movs	r2, #1
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	091b      	lsrs	r3, r3, #4
 8006cc0:	f003 0201 	and.w	r2, r3, #1
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d017      	beq.n	8006d12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	2203      	movs	r2, #3
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d123      	bne.n	8006d66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	08da      	lsrs	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3208      	adds	r2, #8
 8006d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	220f      	movs	r2, #15
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	43db      	mvns	r3, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	691a      	ldr	r2, [r3, #16]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	08da      	lsrs	r2, r3, #3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3208      	adds	r2, #8
 8006d60:	69b9      	ldr	r1, [r7, #24]
 8006d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	2203      	movs	r2, #3
 8006d72:	fa02 f303 	lsl.w	r3, r2, r3
 8006d76:	43db      	mvns	r3, r3
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 0203 	and.w	r2, r3, #3
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 80e0 	beq.w	8006f68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006da8:	4b2f      	ldr	r3, [pc, #188]	@ (8006e68 <HAL_GPIO_Init+0x238>)
 8006daa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006dae:	4a2e      	ldr	r2, [pc, #184]	@ (8006e68 <HAL_GPIO_Init+0x238>)
 8006db0:	f043 0302 	orr.w	r3, r3, #2
 8006db4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006db8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e68 <HAL_GPIO_Init+0x238>)
 8006dba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dc6:	4a29      	ldr	r2, [pc, #164]	@ (8006e6c <HAL_GPIO_Init+0x23c>)
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	089b      	lsrs	r3, r3, #2
 8006dcc:	3302      	adds	r3, #2
 8006dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	220f      	movs	r2, #15
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	43db      	mvns	r3, r3
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	4013      	ands	r3, r2
 8006de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a20      	ldr	r2, [pc, #128]	@ (8006e70 <HAL_GPIO_Init+0x240>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d052      	beq.n	8006e98 <HAL_GPIO_Init+0x268>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e74 <HAL_GPIO_Init+0x244>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d031      	beq.n	8006e5e <HAL_GPIO_Init+0x22e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8006e78 <HAL_GPIO_Init+0x248>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d02b      	beq.n	8006e5a <HAL_GPIO_Init+0x22a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1d      	ldr	r2, [pc, #116]	@ (8006e7c <HAL_GPIO_Init+0x24c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d025      	beq.n	8006e56 <HAL_GPIO_Init+0x226>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006e80 <HAL_GPIO_Init+0x250>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d01f      	beq.n	8006e52 <HAL_GPIO_Init+0x222>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a1b      	ldr	r2, [pc, #108]	@ (8006e84 <HAL_GPIO_Init+0x254>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d019      	beq.n	8006e4e <HAL_GPIO_Init+0x21e>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8006e88 <HAL_GPIO_Init+0x258>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <HAL_GPIO_Init+0x21a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a19      	ldr	r2, [pc, #100]	@ (8006e8c <HAL_GPIO_Init+0x25c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00d      	beq.n	8006e46 <HAL_GPIO_Init+0x216>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a18      	ldr	r2, [pc, #96]	@ (8006e90 <HAL_GPIO_Init+0x260>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d007      	beq.n	8006e42 <HAL_GPIO_Init+0x212>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a17      	ldr	r2, [pc, #92]	@ (8006e94 <HAL_GPIO_Init+0x264>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d101      	bne.n	8006e3e <HAL_GPIO_Init+0x20e>
 8006e3a:	2309      	movs	r3, #9
 8006e3c:	e02d      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e3e:	230a      	movs	r3, #10
 8006e40:	e02b      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e42:	2308      	movs	r3, #8
 8006e44:	e029      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e46:	2307      	movs	r3, #7
 8006e48:	e027      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e4a:	2306      	movs	r3, #6
 8006e4c:	e025      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e4e:	2305      	movs	r3, #5
 8006e50:	e023      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e52:	2304      	movs	r3, #4
 8006e54:	e021      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e56:	2303      	movs	r3, #3
 8006e58:	e01f      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e01d      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e01b      	b.n	8006e9a <HAL_GPIO_Init+0x26a>
 8006e62:	bf00      	nop
 8006e64:	58000080 	.word	0x58000080
 8006e68:	58024400 	.word	0x58024400
 8006e6c:	58000400 	.word	0x58000400
 8006e70:	58020000 	.word	0x58020000
 8006e74:	58020400 	.word	0x58020400
 8006e78:	58020800 	.word	0x58020800
 8006e7c:	58020c00 	.word	0x58020c00
 8006e80:	58021000 	.word	0x58021000
 8006e84:	58021400 	.word	0x58021400
 8006e88:	58021800 	.word	0x58021800
 8006e8c:	58021c00 	.word	0x58021c00
 8006e90:	58022000 	.word	0x58022000
 8006e94:	58022400 	.word	0x58022400
 8006e98:	2300      	movs	r3, #0
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	f002 0203 	and.w	r2, r2, #3
 8006ea0:	0092      	lsls	r2, r2, #2
 8006ea2:	4093      	lsls	r3, r2
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006eaa:	4938      	ldr	r1, [pc, #224]	@ (8006f8c <HAL_GPIO_Init+0x35c>)
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	089b      	lsrs	r3, r3, #2
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006ede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	4013      	ands	r3, r2
 8006f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	43db      	mvns	r3, r3
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	fa22 f303 	lsr.w	r3, r2, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f47f ae63 	bne.w	8006c44 <HAL_GPIO_Init+0x14>
  }
}
 8006f7e:	bf00      	nop
 8006f80:	bf00      	nop
 8006f82:	3724      	adds	r7, #36	@ 0x24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	58000400 	.word	0x58000400

08006f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	807b      	strh	r3, [r7, #2]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fa0:	787b      	ldrb	r3, [r7, #1]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fa6:	887a      	ldrh	r2, [r7, #2]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006fac:	e003      	b.n	8006fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006fae:	887b      	ldrh	r3, [r7, #2]
 8006fb0:	041a      	lsls	r2, r3, #16
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	619a      	str	r2, [r3, #24]
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
	...

08006fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e08b      	b.n	80070ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fa ffb4 	bl	8001f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2224      	movs	r2, #36	@ 0x24
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0201 	bic.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d107      	bne.n	800703e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800703a:	609a      	str	r2, [r3, #8]
 800703c:	e006      	b.n	800704c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800704a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d108      	bne.n	8007066 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007062:	605a      	str	r2, [r3, #4]
 8007064:	e007      	b.n	8007076 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007074:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6859      	ldr	r1, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	4b1d      	ldr	r3, [pc, #116]	@ (80070f8 <HAL_I2C_Init+0x134>)
 8007082:	430b      	orrs	r3, r1
 8007084:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007094:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69d9      	ldr	r1, [r3, #28]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1a      	ldr	r2, [r3, #32]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	02008000 	.word	0x02008000

080070fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b20      	cmp	r3, #32
 8007110:	d138      	bne.n	8007184 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800711c:	2302      	movs	r3, #2
 800711e:	e032      	b.n	8007186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2224      	movs	r2, #36	@ 0x24
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0201 	bic.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800714e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6819      	ldr	r1, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	e000      	b.n	8007186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007184:	2302      	movs	r3, #2
  }
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007192:	b480      	push	{r7}
 8007194:	b085      	sub	sp, #20
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d139      	bne.n	800721c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e033      	b.n	800721e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2224      	movs	r2, #36	@ 0x24
 80071c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80071e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	e000      	b.n	800721e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800721c:	2302      	movs	r3, #2
  }
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007234:	4b19      	ldr	r3, [pc, #100]	@ (800729c <HAL_PWREx_ConfigSupply+0x70>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b04      	cmp	r3, #4
 800723e:	d00a      	beq.n	8007256 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007240:	4b16      	ldr	r3, [pc, #88]	@ (800729c <HAL_PWREx_ConfigSupply+0x70>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	429a      	cmp	r2, r3
 800724c:	d001      	beq.n	8007252 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e01f      	b.n	8007292 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e01d      	b.n	8007292 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007256:	4b11      	ldr	r3, [pc, #68]	@ (800729c <HAL_PWREx_ConfigSupply+0x70>)
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f023 0207 	bic.w	r2, r3, #7
 800725e:	490f      	ldr	r1, [pc, #60]	@ (800729c <HAL_PWREx_ConfigSupply+0x70>)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4313      	orrs	r3, r2
 8007264:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007266:	f7fc f8e9 	bl	800343c <HAL_GetTick>
 800726a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800726c:	e009      	b.n	8007282 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800726e:	f7fc f8e5 	bl	800343c <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800727c:	d901      	bls.n	8007282 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e007      	b.n	8007292 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007282:	4b06      	ldr	r3, [pc, #24]	@ (800729c <HAL_PWREx_ConfigSupply+0x70>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800728a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800728e:	d1ee      	bne.n	800726e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	58024800 	.word	0x58024800

080072a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08c      	sub	sp, #48	@ 0x30
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f000 bc1f 	b.w	8007af2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80b3 	beq.w	8007428 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072c2:	4b95      	ldr	r3, [pc, #596]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072cc:	4b92      	ldr	r3, [pc, #584]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80072ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d007      	beq.n	80072e8 <HAL_RCC_OscConfig+0x48>
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	2b18      	cmp	r3, #24
 80072dc:	d112      	bne.n	8007304 <HAL_RCC_OscConfig+0x64>
 80072de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d10d      	bne.n	8007304 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072e8:	4b8b      	ldr	r3, [pc, #556]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 8098 	beq.w	8007426 <HAL_RCC_OscConfig+0x186>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f040 8093 	bne.w	8007426 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e3f6      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800730c:	d106      	bne.n	800731c <HAL_RCC_OscConfig+0x7c>
 800730e:	4b82      	ldr	r3, [pc, #520]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a81      	ldr	r2, [pc, #516]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e058      	b.n	80073ce <HAL_RCC_OscConfig+0x12e>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d112      	bne.n	800734a <HAL_RCC_OscConfig+0xaa>
 8007324:	4b7c      	ldr	r3, [pc, #496]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a7b      	ldr	r2, [pc, #492]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 800732a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	4b79      	ldr	r3, [pc, #484]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a78      	ldr	r2, [pc, #480]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007336:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	4b76      	ldr	r3, [pc, #472]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a75      	ldr	r2, [pc, #468]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	e041      	b.n	80073ce <HAL_RCC_OscConfig+0x12e>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007352:	d112      	bne.n	800737a <HAL_RCC_OscConfig+0xda>
 8007354:	4b70      	ldr	r3, [pc, #448]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a6f      	ldr	r2, [pc, #444]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 800735a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	4b6d      	ldr	r3, [pc, #436]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a6c      	ldr	r2, [pc, #432]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007366:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	4b6a      	ldr	r3, [pc, #424]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a69      	ldr	r2, [pc, #420]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	e029      	b.n	80073ce <HAL_RCC_OscConfig+0x12e>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007382:	d112      	bne.n	80073aa <HAL_RCC_OscConfig+0x10a>
 8007384:	4b64      	ldr	r3, [pc, #400]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a63      	ldr	r2, [pc, #396]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 800738a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	4b61      	ldr	r3, [pc, #388]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a60      	ldr	r2, [pc, #384]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	4b5e      	ldr	r3, [pc, #376]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a5d      	ldr	r2, [pc, #372]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80073a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	e011      	b.n	80073ce <HAL_RCC_OscConfig+0x12e>
 80073aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a5a      	ldr	r2, [pc, #360]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80073b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	4b58      	ldr	r3, [pc, #352]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a57      	ldr	r2, [pc, #348]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80073bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	4b55      	ldr	r3, [pc, #340]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a54      	ldr	r2, [pc, #336]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80073c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80073cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d013      	beq.n	80073fe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d6:	f7fc f831 	bl	800343c <HAL_GetTick>
 80073da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073dc:	e008      	b.n	80073f0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073de:	f7fc f82d 	bl	800343c <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b64      	cmp	r3, #100	@ 0x64
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e380      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073f0:	4b49      	ldr	r3, [pc, #292]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0f0      	beq.n	80073de <HAL_RCC_OscConfig+0x13e>
 80073fc:	e014      	b.n	8007428 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fe:	f7fc f81d 	bl	800343c <HAL_GetTick>
 8007402:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007404:	e008      	b.n	8007418 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007406:	f7fc f819 	bl	800343c <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b64      	cmp	r3, #100	@ 0x64
 8007412:	d901      	bls.n	8007418 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e36c      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007418:	4b3f      	ldr	r3, [pc, #252]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f0      	bne.n	8007406 <HAL_RCC_OscConfig+0x166>
 8007424:	e000      	b.n	8007428 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007426:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 808c 	beq.w	800754e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007436:	4b38      	ldr	r3, [pc, #224]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800743e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007440:	4b35      	ldr	r3, [pc, #212]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007444:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <HAL_RCC_OscConfig+0x1bc>
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	2b18      	cmp	r3, #24
 8007450:	d137      	bne.n	80074c2 <HAL_RCC_OscConfig+0x222>
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d132      	bne.n	80074c2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800745c:	4b2e      	ldr	r3, [pc, #184]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_OscConfig+0x1d4>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e33e      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007474:	4b28      	ldr	r3, [pc, #160]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f023 0219 	bic.w	r2, r3, #25
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	4925      	ldr	r1, [pc, #148]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007482:	4313      	orrs	r3, r2
 8007484:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007486:	f7fb ffd9 	bl	800343c <HAL_GetTick>
 800748a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800748e:	f7fb ffd5 	bl	800343c <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e328      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0f0      	beq.n	800748e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	061b      	lsls	r3, r3, #24
 80074ba:	4917      	ldr	r1, [pc, #92]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074c0:	e045      	b.n	800754e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d028      	beq.n	800751c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074ca:	4b13      	ldr	r3, [pc, #76]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f023 0219 	bic.w	r2, r3, #25
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	4910      	ldr	r1, [pc, #64]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074dc:	f7fb ffae 	bl	800343c <HAL_GetTick>
 80074e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074e4:	f7fb ffaa 	bl	800343c <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e2fd      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074f6:	4b08      	ldr	r3, [pc, #32]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007502:	4b05      	ldr	r3, [pc, #20]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	061b      	lsls	r3, r3, #24
 8007510:	4901      	ldr	r1, [pc, #4]	@ (8007518 <HAL_RCC_OscConfig+0x278>)
 8007512:	4313      	orrs	r3, r2
 8007514:	604b      	str	r3, [r1, #4]
 8007516:	e01a      	b.n	800754e <HAL_RCC_OscConfig+0x2ae>
 8007518:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800751c:	4b97      	ldr	r3, [pc, #604]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a96      	ldr	r2, [pc, #600]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 8007522:	f023 0301 	bic.w	r3, r3, #1
 8007526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007528:	f7fb ff88 	bl	800343c <HAL_GetTick>
 800752c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800752e:	e008      	b.n	8007542 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007530:	f7fb ff84 	bl	800343c <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e2d7      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007542:	4b8e      	ldr	r3, [pc, #568]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f0      	bne.n	8007530 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b00      	cmp	r3, #0
 8007558:	d06a      	beq.n	8007630 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800755a:	4b88      	ldr	r3, [pc, #544]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007562:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007564:	4b85      	ldr	r3, [pc, #532]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 8007566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007568:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b08      	cmp	r3, #8
 800756e:	d007      	beq.n	8007580 <HAL_RCC_OscConfig+0x2e0>
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	2b18      	cmp	r3, #24
 8007574:	d11b      	bne.n	80075ae <HAL_RCC_OscConfig+0x30e>
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	2b01      	cmp	r3, #1
 800757e:	d116      	bne.n	80075ae <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007580:	4b7e      	ldr	r3, [pc, #504]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_RCC_OscConfig+0x2f8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	2b80      	cmp	r3, #128	@ 0x80
 8007592:	d001      	beq.n	8007598 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e2ac      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007598:	4b78      	ldr	r3, [pc, #480]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	061b      	lsls	r3, r3, #24
 80075a6:	4975      	ldr	r1, [pc, #468]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075ac:	e040      	b.n	8007630 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d023      	beq.n	80075fe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80075b6:	4b71      	ldr	r3, [pc, #452]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a70      	ldr	r2, [pc, #448]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80075bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c2:	f7fb ff3b 	bl	800343c <HAL_GetTick>
 80075c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075c8:	e008      	b.n	80075dc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80075ca:	f7fb ff37 	bl	800343c <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e28a      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075dc:	4b67      	ldr	r3, [pc, #412]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075e8:	4b64      	ldr	r3, [pc, #400]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	061b      	lsls	r3, r3, #24
 80075f6:	4961      	ldr	r1, [pc, #388]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60cb      	str	r3, [r1, #12]
 80075fc:	e018      	b.n	8007630 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80075fe:	4b5f      	ldr	r3, [pc, #380]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a5e      	ldr	r2, [pc, #376]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 8007604:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760a:	f7fb ff17 	bl	800343c <HAL_GetTick>
 800760e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007612:	f7fb ff13 	bl	800343c <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e266      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007624:	4b55      	ldr	r3, [pc, #340]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f0      	bne.n	8007612 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b00      	cmp	r3, #0
 800763a:	d036      	beq.n	80076aa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d019      	beq.n	8007678 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007644:	4b4d      	ldr	r3, [pc, #308]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 8007646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007648:	4a4c      	ldr	r2, [pc, #304]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007650:	f7fb fef4 	bl	800343c <HAL_GetTick>
 8007654:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007658:	f7fb fef0 	bl	800343c <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e243      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800766a:	4b44      	ldr	r3, [pc, #272]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 800766c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0x3b8>
 8007676:	e018      	b.n	80076aa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007678:	4b40      	ldr	r3, [pc, #256]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 800767a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800767c:	4a3f      	ldr	r2, [pc, #252]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007684:	f7fb feda 	bl	800343c <HAL_GetTick>
 8007688:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800768c:	f7fb fed6 	bl	800343c <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e229      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800769e:	4b37      	ldr	r3, [pc, #220]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80076a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1f0      	bne.n	800768c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d036      	beq.n	8007724 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d019      	beq.n	80076f2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80076be:	4b2f      	ldr	r3, [pc, #188]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a2e      	ldr	r2, [pc, #184]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80076c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80076c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80076ca:	f7fb feb7 	bl	800343c <HAL_GetTick>
 80076ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80076d0:	e008      	b.n	80076e4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076d2:	f7fb feb3 	bl	800343c <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e206      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80076e4:	4b25      	ldr	r3, [pc, #148]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0f0      	beq.n	80076d2 <HAL_RCC_OscConfig+0x432>
 80076f0:	e018      	b.n	8007724 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076f2:	4b22      	ldr	r3, [pc, #136]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a21      	ldr	r2, [pc, #132]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 80076f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80076fe:	f7fb fe9d 	bl	800343c <HAL_GetTick>
 8007702:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007704:	e008      	b.n	8007718 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007706:	f7fb fe99 	bl	800343c <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d901      	bls.n	8007718 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e1ec      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007718:	4b18      	ldr	r3, [pc, #96]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1f0      	bne.n	8007706 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80af 	beq.w	8007890 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007732:	4b13      	ldr	r3, [pc, #76]	@ (8007780 <HAL_RCC_OscConfig+0x4e0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a12      	ldr	r2, [pc, #72]	@ (8007780 <HAL_RCC_OscConfig+0x4e0>)
 8007738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800773c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800773e:	f7fb fe7d 	bl	800343c <HAL_GetTick>
 8007742:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007746:	f7fb fe79 	bl	800343c <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b64      	cmp	r3, #100	@ 0x64
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e1cc      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007758:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <HAL_RCC_OscConfig+0x4e0>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f0      	beq.n	8007746 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d10b      	bne.n	8007784 <HAL_RCC_OscConfig+0x4e4>
 800776c:	4b03      	ldr	r3, [pc, #12]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 800776e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007770:	4a02      	ldr	r2, [pc, #8]	@ (800777c <HAL_RCC_OscConfig+0x4dc>)
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	6713      	str	r3, [r2, #112]	@ 0x70
 8007778:	e05b      	b.n	8007832 <HAL_RCC_OscConfig+0x592>
 800777a:	bf00      	nop
 800777c:	58024400 	.word	0x58024400
 8007780:	58024800 	.word	0x58024800
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d112      	bne.n	80077b2 <HAL_RCC_OscConfig+0x512>
 800778c:	4b9d      	ldr	r3, [pc, #628]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800778e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007790:	4a9c      	ldr	r2, [pc, #624]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007792:	f023 0301 	bic.w	r3, r3, #1
 8007796:	6713      	str	r3, [r2, #112]	@ 0x70
 8007798:	4b9a      	ldr	r3, [pc, #616]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800779a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800779c:	4a99      	ldr	r2, [pc, #612]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800779e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80077a4:	4b97      	ldr	r3, [pc, #604]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077a8:	4a96      	ldr	r2, [pc, #600]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077aa:	f023 0304 	bic.w	r3, r3, #4
 80077ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80077b0:	e03f      	b.n	8007832 <HAL_RCC_OscConfig+0x592>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b05      	cmp	r3, #5
 80077b8:	d112      	bne.n	80077e0 <HAL_RCC_OscConfig+0x540>
 80077ba:	4b92      	ldr	r3, [pc, #584]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077be:	4a91      	ldr	r2, [pc, #580]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077c0:	f043 0304 	orr.w	r3, r3, #4
 80077c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80077c6:	4b8f      	ldr	r3, [pc, #572]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ca:	4a8e      	ldr	r2, [pc, #568]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80077d2:	4b8c      	ldr	r3, [pc, #560]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d6:	4a8b      	ldr	r2, [pc, #556]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077d8:	f043 0301 	orr.w	r3, r3, #1
 80077dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80077de:	e028      	b.n	8007832 <HAL_RCC_OscConfig+0x592>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b85      	cmp	r3, #133	@ 0x85
 80077e6:	d112      	bne.n	800780e <HAL_RCC_OscConfig+0x56e>
 80077e8:	4b86      	ldr	r3, [pc, #536]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ec:	4a85      	ldr	r2, [pc, #532]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077ee:	f043 0304 	orr.w	r3, r3, #4
 80077f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80077f4:	4b83      	ldr	r3, [pc, #524]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f8:	4a82      	ldr	r2, [pc, #520]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80077fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007800:	4b80      	ldr	r3, [pc, #512]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007804:	4a7f      	ldr	r2, [pc, #508]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007806:	f043 0301 	orr.w	r3, r3, #1
 800780a:	6713      	str	r3, [r2, #112]	@ 0x70
 800780c:	e011      	b.n	8007832 <HAL_RCC_OscConfig+0x592>
 800780e:	4b7d      	ldr	r3, [pc, #500]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007812:	4a7c      	ldr	r2, [pc, #496]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	6713      	str	r3, [r2, #112]	@ 0x70
 800781a:	4b7a      	ldr	r3, [pc, #488]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800781c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800781e:	4a79      	ldr	r2, [pc, #484]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007820:	f023 0304 	bic.w	r3, r3, #4
 8007824:	6713      	str	r3, [r2, #112]	@ 0x70
 8007826:	4b77      	ldr	r3, [pc, #476]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782a:	4a76      	ldr	r2, [pc, #472]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800782c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007830:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d015      	beq.n	8007866 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800783a:	f7fb fdff 	bl	800343c <HAL_GetTick>
 800783e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007840:	e00a      	b.n	8007858 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007842:	f7fb fdfb 	bl	800343c <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007850:	4293      	cmp	r3, r2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e14c      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007858:	4b6a      	ldr	r3, [pc, #424]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800785a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0ee      	beq.n	8007842 <HAL_RCC_OscConfig+0x5a2>
 8007864:	e014      	b.n	8007890 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007866:	f7fb fde9 	bl	800343c <HAL_GetTick>
 800786a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800786c:	e00a      	b.n	8007884 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800786e:	f7fb fde5 	bl	800343c <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800787c:	4293      	cmp	r3, r2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e136      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007884:	4b5f      	ldr	r3, [pc, #380]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1ee      	bne.n	800786e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 812b 	beq.w	8007af0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800789a:	4b5a      	ldr	r3, [pc, #360]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078a2:	2b18      	cmp	r3, #24
 80078a4:	f000 80bb 	beq.w	8007a1e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	f040 8095 	bne.w	80079dc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b2:	4b54      	ldr	r3, [pc, #336]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a53      	ldr	r2, [pc, #332]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80078b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078be:	f7fb fdbd 	bl	800343c <HAL_GetTick>
 80078c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078c4:	e008      	b.n	80078d8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c6:	f7fb fdb9 	bl	800343c <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d901      	bls.n	80078d8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e10c      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078d8:	4b4a      	ldr	r3, [pc, #296]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f0      	bne.n	80078c6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078e4:	4b47      	ldr	r3, [pc, #284]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80078e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078e8:	4b47      	ldr	r3, [pc, #284]	@ (8007a08 <HAL_RCC_OscConfig+0x768>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80078f4:	0112      	lsls	r2, r2, #4
 80078f6:	430a      	orrs	r2, r1
 80078f8:	4942      	ldr	r1, [pc, #264]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	3b01      	subs	r3, #1
 8007904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800790c:	3b01      	subs	r3, #1
 800790e:	025b      	lsls	r3, r3, #9
 8007910:	b29b      	uxth	r3, r3
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007918:	3b01      	subs	r3, #1
 800791a:	041b      	lsls	r3, r3, #16
 800791c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007926:	3b01      	subs	r3, #1
 8007928:	061b      	lsls	r3, r3, #24
 800792a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800792e:	4935      	ldr	r1, [pc, #212]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007930:	4313      	orrs	r3, r2
 8007932:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007934:	4b33      	ldr	r3, [pc, #204]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	4a32      	ldr	r2, [pc, #200]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800793a:	f023 0301 	bic.w	r3, r3, #1
 800793e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007940:	4b30      	ldr	r3, [pc, #192]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007944:	4b31      	ldr	r3, [pc, #196]	@ (8007a0c <HAL_RCC_OscConfig+0x76c>)
 8007946:	4013      	ands	r3, r2
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800794c:	00d2      	lsls	r2, r2, #3
 800794e:	492d      	ldr	r1, [pc, #180]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007950:	4313      	orrs	r3, r2
 8007952:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007954:	4b2b      	ldr	r3, [pc, #172]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	f023 020c 	bic.w	r2, r3, #12
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007960:	4928      	ldr	r1, [pc, #160]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007962:	4313      	orrs	r3, r2
 8007964:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007966:	4b27      	ldr	r3, [pc, #156]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	f023 0202 	bic.w	r2, r3, #2
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007972:	4924      	ldr	r1, [pc, #144]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007974:	4313      	orrs	r3, r2
 8007976:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007978:	4b22      	ldr	r3, [pc, #136]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800797a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797c:	4a21      	ldr	r2, [pc, #132]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800797e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007984:	4b1f      	ldr	r3, [pc, #124]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007988:	4a1e      	ldr	r2, [pc, #120]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800798a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800798e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007990:	4b1c      	ldr	r3, [pc, #112]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007994:	4a1b      	ldr	r2, [pc, #108]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 8007996:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800799a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800799c:	4b19      	ldr	r3, [pc, #100]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 800799e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a0:	4a18      	ldr	r2, [pc, #96]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80079a2:	f043 0301 	orr.w	r3, r3, #1
 80079a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079a8:	4b16      	ldr	r3, [pc, #88]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a15      	ldr	r2, [pc, #84]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80079ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fb fd42 	bl	800343c <HAL_GetTick>
 80079b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079bc:	f7fb fd3e 	bl	800343c <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e091      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0f0      	beq.n	80079bc <HAL_RCC_OscConfig+0x71c>
 80079da:	e089      	b.n	8007af0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079dc:	4b09      	ldr	r3, [pc, #36]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a08      	ldr	r2, [pc, #32]	@ (8007a04 <HAL_RCC_OscConfig+0x764>)
 80079e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e8:	f7fb fd28 	bl	800343c <HAL_GetTick>
 80079ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079ee:	e00f      	b.n	8007a10 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079f0:	f7fb fd24 	bl	800343c <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d908      	bls.n	8007a10 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e077      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
 8007a02:	bf00      	nop
 8007a04:	58024400 	.word	0x58024400
 8007a08:	fffffc0c 	.word	0xfffffc0c
 8007a0c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a10:	4b3a      	ldr	r3, [pc, #232]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e9      	bne.n	80079f0 <HAL_RCC_OscConfig+0x750>
 8007a1c:	e068      	b.n	8007af0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007a1e:	4b37      	ldr	r3, [pc, #220]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a24:	4b35      	ldr	r3, [pc, #212]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a28:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d031      	beq.n	8007a96 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f003 0203 	and.w	r2, r3, #3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d12a      	bne.n	8007a96 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	091b      	lsrs	r3, r3, #4
 8007a44:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d122      	bne.n	8007a96 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d11a      	bne.n	8007a96 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0a5b      	lsrs	r3, r3, #9
 8007a64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a6c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d111      	bne.n	8007a96 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	0c1b      	lsrs	r3, r3, #16
 8007a76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d108      	bne.n	8007a96 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	0e1b      	lsrs	r3, r3, #24
 8007a88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d001      	beq.n	8007a9a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e02b      	b.n	8007af2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007a9a:	4b18      	ldr	r3, [pc, #96]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9e:	08db      	lsrs	r3, r3, #3
 8007aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007aa4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d01f      	beq.n	8007af0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007ab0:	4b12      	ldr	r3, [pc, #72]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	4a11      	ldr	r2, [pc, #68]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007ab6:	f023 0301 	bic.w	r3, r3, #1
 8007aba:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007abc:	f7fb fcbe 	bl	800343c <HAL_GetTick>
 8007ac0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007ac2:	bf00      	nop
 8007ac4:	f7fb fcba 	bl	800343c <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d0f9      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8007b00 <HAL_RCC_OscConfig+0x860>)
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007adc:	00d2      	lsls	r2, r2, #3
 8007ade:	4907      	ldr	r1, [pc, #28]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007ae4:	4b05      	ldr	r3, [pc, #20]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	4a04      	ldr	r2, [pc, #16]	@ (8007afc <HAL_RCC_OscConfig+0x85c>)
 8007aea:	f043 0301 	orr.w	r3, r3, #1
 8007aee:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3730      	adds	r7, #48	@ 0x30
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	58024400 	.word	0x58024400
 8007b00:	ffff0007 	.word	0xffff0007

08007b04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e19c      	b.n	8007e52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b18:	4b8a      	ldr	r3, [pc, #552]	@ (8007d44 <HAL_RCC_ClockConfig+0x240>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 030f 	and.w	r3, r3, #15
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d910      	bls.n	8007b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b26:	4b87      	ldr	r3, [pc, #540]	@ (8007d44 <HAL_RCC_ClockConfig+0x240>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f023 020f 	bic.w	r2, r3, #15
 8007b2e:	4985      	ldr	r1, [pc, #532]	@ (8007d44 <HAL_RCC_ClockConfig+0x240>)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b36:	4b83      	ldr	r3, [pc, #524]	@ (8007d44 <HAL_RCC_ClockConfig+0x240>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d001      	beq.n	8007b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e184      	b.n	8007e52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d010      	beq.n	8007b76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	4b7b      	ldr	r3, [pc, #492]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d908      	bls.n	8007b76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b64:	4b78      	ldr	r3, [pc, #480]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	4975      	ldr	r1, [pc, #468]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0308 	and.w	r3, r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d010      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695a      	ldr	r2, [r3, #20]
 8007b86:	4b70      	ldr	r3, [pc, #448]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d908      	bls.n	8007ba4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b92:	4b6d      	ldr	r3, [pc, #436]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	496a      	ldr	r1, [pc, #424]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d010      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	4b64      	ldr	r3, [pc, #400]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d908      	bls.n	8007bd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007bc0:	4b61      	ldr	r3, [pc, #388]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	495e      	ldr	r1, [pc, #376]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d010      	beq.n	8007c00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69da      	ldr	r2, [r3, #28]
 8007be2:	4b59      	ldr	r3, [pc, #356]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d908      	bls.n	8007c00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007bee:	4b56      	ldr	r3, [pc, #344]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	4953      	ldr	r1, [pc, #332]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d010      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	4b4d      	ldr	r3, [pc, #308]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	f003 030f 	and.w	r3, r3, #15
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d908      	bls.n	8007c2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	f023 020f 	bic.w	r2, r3, #15
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	4947      	ldr	r1, [pc, #284]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d055      	beq.n	8007ce6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007c3a:	4b43      	ldr	r3, [pc, #268]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	4940      	ldr	r1, [pc, #256]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d107      	bne.n	8007c64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c54:	4b3c      	ldr	r3, [pc, #240]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d121      	bne.n	8007ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e0f6      	b.n	8007e52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d107      	bne.n	8007c7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c6c:	4b36      	ldr	r3, [pc, #216]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d115      	bne.n	8007ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e0ea      	b.n	8007e52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d107      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c84:	4b30      	ldr	r3, [pc, #192]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0de      	b.n	8007e52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c94:	4b2c      	ldr	r3, [pc, #176]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e0d6      	b.n	8007e52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ca4:	4b28      	ldr	r3, [pc, #160]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f023 0207 	bic.w	r2, r3, #7
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	4925      	ldr	r1, [pc, #148]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cb6:	f7fb fbc1 	bl	800343c <HAL_GetTick>
 8007cba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cbc:	e00a      	b.n	8007cd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cbe:	f7fb fbbd 	bl	800343c <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e0be      	b.n	8007e52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d1eb      	bne.n	8007cbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d010      	beq.n	8007d14 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	4b14      	ldr	r3, [pc, #80]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d208      	bcs.n	8007d14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d02:	4b11      	ldr	r3, [pc, #68]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	f023 020f 	bic.w	r2, r3, #15
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	490e      	ldr	r1, [pc, #56]	@ (8007d48 <HAL_RCC_ClockConfig+0x244>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d14:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <HAL_RCC_ClockConfig+0x240>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d214      	bcs.n	8007d4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d22:	4b08      	ldr	r3, [pc, #32]	@ (8007d44 <HAL_RCC_ClockConfig+0x240>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f023 020f 	bic.w	r2, r3, #15
 8007d2a:	4906      	ldr	r1, [pc, #24]	@ (8007d44 <HAL_RCC_ClockConfig+0x240>)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d32:	4b04      	ldr	r3, [pc, #16]	@ (8007d44 <HAL_RCC_ClockConfig+0x240>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d005      	beq.n	8007d4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e086      	b.n	8007e52 <HAL_RCC_ClockConfig+0x34e>
 8007d44:	52002000 	.word	0x52002000
 8007d48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d010      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691a      	ldr	r2, [r3, #16]
 8007d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d208      	bcs.n	8007d7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d68:	4b3c      	ldr	r3, [pc, #240]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	4939      	ldr	r1, [pc, #228]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d010      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695a      	ldr	r2, [r3, #20]
 8007d8a:	4b34      	ldr	r3, [pc, #208]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d208      	bcs.n	8007da8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d96:	4b31      	ldr	r3, [pc, #196]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	492e      	ldr	r1, [pc, #184]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0310 	and.w	r3, r3, #16
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d010      	beq.n	8007dd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699a      	ldr	r2, [r3, #24]
 8007db8:	4b28      	ldr	r3, [pc, #160]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d208      	bcs.n	8007dd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007dc4:	4b25      	ldr	r3, [pc, #148]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	4922      	ldr	r1, [pc, #136]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d010      	beq.n	8007e04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69da      	ldr	r2, [r3, #28]
 8007de6:	4b1d      	ldr	r3, [pc, #116]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d208      	bcs.n	8007e04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007df2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	4917      	ldr	r1, [pc, #92]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007e04:	f000 f834 	bl	8007e70 <HAL_RCC_GetSysClockFreq>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	4b14      	ldr	r3, [pc, #80]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	0a1b      	lsrs	r3, r3, #8
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	4912      	ldr	r1, [pc, #72]	@ (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007e16:	5ccb      	ldrb	r3, [r1, r3]
 8007e18:	f003 031f 	and.w	r3, r3, #31
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007e22:	4b0e      	ldr	r3, [pc, #56]	@ (8007e5c <HAL_RCC_ClockConfig+0x358>)
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007e2c:	5cd3      	ldrb	r3, [r2, r3]
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	fa22 f303 	lsr.w	r3, r2, r3
 8007e38:	4a0a      	ldr	r2, [pc, #40]	@ (8007e64 <HAL_RCC_ClockConfig+0x360>)
 8007e3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e68 <HAL_RCC_ClockConfig+0x364>)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007e42:	4b0a      	ldr	r3, [pc, #40]	@ (8007e6c <HAL_RCC_ClockConfig+0x368>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fb faae 	bl	80033a8 <HAL_InitTick>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	58024400 	.word	0x58024400
 8007e60:	08012a60 	.word	0x08012a60
 8007e64:	24000048 	.word	0x24000048
 8007e68:	24000044 	.word	0x24000044
 8007e6c:	2400004c 	.word	0x2400004c

08007e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b089      	sub	sp, #36	@ 0x24
 8007e74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e76:	4bb3      	ldr	r3, [pc, #716]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e7e:	2b18      	cmp	r3, #24
 8007e80:	f200 8155 	bhi.w	800812e <HAL_RCC_GetSysClockFreq+0x2be>
 8007e84:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007ef1 	.word	0x08007ef1
 8007e90:	0800812f 	.word	0x0800812f
 8007e94:	0800812f 	.word	0x0800812f
 8007e98:	0800812f 	.word	0x0800812f
 8007e9c:	0800812f 	.word	0x0800812f
 8007ea0:	0800812f 	.word	0x0800812f
 8007ea4:	0800812f 	.word	0x0800812f
 8007ea8:	0800812f 	.word	0x0800812f
 8007eac:	08007f17 	.word	0x08007f17
 8007eb0:	0800812f 	.word	0x0800812f
 8007eb4:	0800812f 	.word	0x0800812f
 8007eb8:	0800812f 	.word	0x0800812f
 8007ebc:	0800812f 	.word	0x0800812f
 8007ec0:	0800812f 	.word	0x0800812f
 8007ec4:	0800812f 	.word	0x0800812f
 8007ec8:	0800812f 	.word	0x0800812f
 8007ecc:	08007f1d 	.word	0x08007f1d
 8007ed0:	0800812f 	.word	0x0800812f
 8007ed4:	0800812f 	.word	0x0800812f
 8007ed8:	0800812f 	.word	0x0800812f
 8007edc:	0800812f 	.word	0x0800812f
 8007ee0:	0800812f 	.word	0x0800812f
 8007ee4:	0800812f 	.word	0x0800812f
 8007ee8:	0800812f 	.word	0x0800812f
 8007eec:	08007f23 	.word	0x08007f23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ef0:	4b94      	ldr	r3, [pc, #592]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007efc:	4b91      	ldr	r3, [pc, #580]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	08db      	lsrs	r3, r3, #3
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	4a90      	ldr	r2, [pc, #576]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f08:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007f0e:	e111      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007f10:	4b8d      	ldr	r3, [pc, #564]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f12:	61bb      	str	r3, [r7, #24]
      break;
 8007f14:	e10e      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007f16:	4b8d      	ldr	r3, [pc, #564]	@ (800814c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f18:	61bb      	str	r3, [r7, #24]
      break;
 8007f1a:	e10b      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8008150 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007f1e:	61bb      	str	r3, [r7, #24]
      break;
 8007f20:	e108      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f22:	4b88      	ldr	r3, [pc, #544]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007f2c:	4b85      	ldr	r3, [pc, #532]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f30:	091b      	lsrs	r3, r3, #4
 8007f32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f38:	4b82      	ldr	r3, [pc, #520]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f42:	4b80      	ldr	r3, [pc, #512]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f46:	08db      	lsrs	r3, r3, #3
 8007f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	ee07 3a90 	vmov	s15, r3
 8007f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 80e1 	beq.w	8008128 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	f000 8083 	beq.w	8008074 <HAL_RCC_GetSysClockFreq+0x204>
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	f200 80a1 	bhi.w	80080b8 <HAL_RCC_GetSysClockFreq+0x248>
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <HAL_RCC_GetSysClockFreq+0x114>
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d056      	beq.n	8008030 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007f82:	e099      	b.n	80080b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f84:	4b6f      	ldr	r3, [pc, #444]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d02d      	beq.n	8007fec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f90:	4b6c      	ldr	r3, [pc, #432]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	08db      	lsrs	r3, r3, #3
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8008148 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	ee07 3a90 	vmov	s15, r3
 8007fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fba:	4b62      	ldr	r3, [pc, #392]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008154 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007fea:	e087      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008158 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffe:	4b51      	ldr	r3, [pc, #324]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008012:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008154 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800802e:	e065      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800815c <HAL_RCC_GetSysClockFreq+0x2ec>
 800803e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008042:	4b40      	ldr	r3, [pc, #256]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008052:	ed97 6a02 	vldr	s12, [r7, #8]
 8008056:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008154 <HAL_RCC_GetSysClockFreq+0x2e4>
 800805a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800805e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800806a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008072:	e043      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008160 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008086:	4b2f      	ldr	r3, [pc, #188]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008096:	ed97 6a02 	vldr	s12, [r7, #8]
 800809a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008154 <HAL_RCC_GetSysClockFreq+0x2e4>
 800809e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080b6:	e021      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	ee07 3a90 	vmov	s15, r3
 80080be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800815c <HAL_RCC_GetSysClockFreq+0x2ec>
 80080c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d2:	ee07 3a90 	vmov	s15, r3
 80080d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080da:	ed97 6a02 	vldr	s12, [r7, #8]
 80080de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008154 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80080fc:	4b11      	ldr	r3, [pc, #68]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008100:	0a5b      	lsrs	r3, r3, #9
 8008102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008106:	3301      	adds	r3, #1
 8008108:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	ee07 3a90 	vmov	s15, r3
 8008110:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008114:	edd7 6a07 	vldr	s13, [r7, #28]
 8008118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800811c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008120:	ee17 3a90 	vmov	r3, s15
 8008124:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008126:	e005      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	61bb      	str	r3, [r7, #24]
      break;
 800812c:	e002      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800812e:	4b07      	ldr	r3, [pc, #28]	@ (800814c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008130:	61bb      	str	r3, [r7, #24]
      break;
 8008132:	bf00      	nop
  }

  return sysclockfreq;
 8008134:	69bb      	ldr	r3, [r7, #24]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3724      	adds	r7, #36	@ 0x24
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	58024400 	.word	0x58024400
 8008148:	03d09000 	.word	0x03d09000
 800814c:	003d0900 	.word	0x003d0900
 8008150:	016e3600 	.word	0x016e3600
 8008154:	46000000 	.word	0x46000000
 8008158:	4c742400 	.word	0x4c742400
 800815c:	4a742400 	.word	0x4a742400
 8008160:	4bb71b00 	.word	0x4bb71b00

08008164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800816a:	f7ff fe81 	bl	8007e70 <HAL_RCC_GetSysClockFreq>
 800816e:	4602      	mov	r2, r0
 8008170:	4b10      	ldr	r3, [pc, #64]	@ (80081b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	0a1b      	lsrs	r3, r3, #8
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	490f      	ldr	r1, [pc, #60]	@ (80081b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800817c:	5ccb      	ldrb	r3, [r1, r3]
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	fa22 f303 	lsr.w	r3, r2, r3
 8008186:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008188:	4b0a      	ldr	r3, [pc, #40]	@ (80081b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	4a09      	ldr	r2, [pc, #36]	@ (80081b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008192:	5cd3      	ldrb	r3, [r2, r3]
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	fa22 f303 	lsr.w	r3, r2, r3
 800819e:	4a07      	ldr	r2, [pc, #28]	@ (80081bc <HAL_RCC_GetHCLKFreq+0x58>)
 80081a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081a2:	4a07      	ldr	r2, [pc, #28]	@ (80081c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <HAL_RCC_GetHCLKFreq+0x58>)
 80081aa:	681b      	ldr	r3, [r3, #0]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	58024400 	.word	0x58024400
 80081b8:	08012a60 	.word	0x08012a60
 80081bc:	24000048 	.word	0x24000048
 80081c0:	24000044 	.word	0x24000044

080081c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80081c8:	f7ff ffcc 	bl	8008164 <HAL_RCC_GetHCLKFreq>
 80081cc:	4602      	mov	r2, r0
 80081ce:	4b06      	ldr	r3, [pc, #24]	@ (80081e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	091b      	lsrs	r3, r3, #4
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	4904      	ldr	r1, [pc, #16]	@ (80081ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80081da:	5ccb      	ldrb	r3, [r1, r3]
 80081dc:	f003 031f 	and.w	r3, r3, #31
 80081e0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	58024400 	.word	0x58024400
 80081ec:	08012a60 	.word	0x08012a60

080081f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80081f4:	f7ff ffb6 	bl	8008164 <HAL_RCC_GetHCLKFreq>
 80081f8:	4602      	mov	r2, r0
 80081fa:	4b06      	ldr	r3, [pc, #24]	@ (8008214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	4904      	ldr	r1, [pc, #16]	@ (8008218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008206:	5ccb      	ldrb	r3, [r1, r3]
 8008208:	f003 031f 	and.w	r3, r3, #31
 800820c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008210:	4618      	mov	r0, r3
 8008212:	bd80      	pop	{r7, pc}
 8008214:	58024400 	.word	0x58024400
 8008218:	08012a60 	.word	0x08012a60

0800821c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800821c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008220:	b0c8      	sub	sp, #288	@ 0x120
 8008222:	af00      	add	r7, sp, #0
 8008224:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008228:	2300      	movs	r3, #0
 800822a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800822e:	2300      	movs	r3, #0
 8008230:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008240:	2500      	movs	r5, #0
 8008242:	ea54 0305 	orrs.w	r3, r4, r5
 8008246:	d049      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800824c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800824e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008252:	d02f      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008254:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008258:	d828      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800825a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800825e:	d01a      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008264:	d822      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800826a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800826e:	d007      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008270:	e01c      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008272:	4ba7      	ldr	r3, [pc, #668]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	4aa6      	ldr	r2, [pc, #664]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800827c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800827e:	e01a      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008284:	3308      	adds	r3, #8
 8008286:	2102      	movs	r1, #2
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fc43 	bl	8009b14 <RCCEx_PLL2_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008294:	e00f      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800829a:	3328      	adds	r3, #40	@ 0x28
 800829c:	2102      	movs	r1, #2
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fcea 	bl	8009c78 <RCCEx_PLL3_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80082aa:	e004      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082b2:	e000      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80082b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10a      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80082be:	4b94      	ldr	r3, [pc, #592]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80082c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082cc:	4a90      	ldr	r2, [pc, #576]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082ce:	430b      	orrs	r3, r1
 80082d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80082d2:	e003      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80082e8:	f04f 0900 	mov.w	r9, #0
 80082ec:	ea58 0309 	orrs.w	r3, r8, r9
 80082f0:	d047      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80082f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d82a      	bhi.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80082fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80082fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008302:	bf00      	nop
 8008304:	08008319 	.word	0x08008319
 8008308:	08008327 	.word	0x08008327
 800830c:	0800833d 	.word	0x0800833d
 8008310:	0800835b 	.word	0x0800835b
 8008314:	0800835b 	.word	0x0800835b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008318:	4b7d      	ldr	r3, [pc, #500]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800831a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831c:	4a7c      	ldr	r2, [pc, #496]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800831e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008324:	e01a      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832a:	3308      	adds	r3, #8
 800832c:	2100      	movs	r1, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f001 fbf0 	bl	8009b14 <RCCEx_PLL2_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800833a:	e00f      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800833c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008340:	3328      	adds	r3, #40	@ 0x28
 8008342:	2100      	movs	r1, #0
 8008344:	4618      	mov	r0, r3
 8008346:	f001 fc97 	bl	8009c78 <RCCEx_PLL3_Config>
 800834a:	4603      	mov	r3, r0
 800834c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008350:	e004      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008358:	e000      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800835a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800835c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008364:	4b6a      	ldr	r3, [pc, #424]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008368:	f023 0107 	bic.w	r1, r3, #7
 800836c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008372:	4a67      	ldr	r2, [pc, #412]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008374:	430b      	orrs	r3, r1
 8008376:	6513      	str	r3, [r2, #80]	@ 0x50
 8008378:	e003      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800837e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800838e:	f04f 0b00 	mov.w	fp, #0
 8008392:	ea5a 030b 	orrs.w	r3, sl, fp
 8008396:	d054      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800839e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80083a2:	d036      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80083a4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80083a8:	d82f      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80083aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ae:	d032      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80083b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b4:	d829      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80083b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80083b8:	d02f      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80083ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80083bc:	d825      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80083be:	2b80      	cmp	r3, #128	@ 0x80
 80083c0:	d018      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80083c2:	2b80      	cmp	r3, #128	@ 0x80
 80083c4:	d821      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80083ca:	2b40      	cmp	r3, #64	@ 0x40
 80083cc:	d007      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80083ce:	e01c      	b.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d0:	4b4f      	ldr	r3, [pc, #316]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d4:	4a4e      	ldr	r2, [pc, #312]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80083dc:	e01e      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e2:	3308      	adds	r3, #8
 80083e4:	2100      	movs	r1, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 fb94 	bl	8009b14 <RCCEx_PLL2_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80083f2:	e013      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f8:	3328      	adds	r3, #40	@ 0x28
 80083fa:	2100      	movs	r1, #0
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 fc3b 	bl	8009c78 <RCCEx_PLL3_Config>
 8008402:	4603      	mov	r3, r0
 8008404:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008408:	e008      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008410:	e004      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008412:	bf00      	nop
 8008414:	e002      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008416:	bf00      	nop
 8008418:	e000      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800841a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800841c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008424:	4b3a      	ldr	r3, [pc, #232]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008428:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800842c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008432:	4a37      	ldr	r2, [pc, #220]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008434:	430b      	orrs	r3, r1
 8008436:	6513      	str	r3, [r2, #80]	@ 0x50
 8008438:	e003      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800843e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800844e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008452:	2300      	movs	r3, #0
 8008454:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008458:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800845c:	460b      	mov	r3, r1
 800845e:	4313      	orrs	r3, r2
 8008460:	d05c      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008468:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800846c:	d03b      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800846e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008472:	d834      	bhi.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008478:	d037      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800847a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800847e:	d82e      	bhi.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008480:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008484:	d033      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008486:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800848a:	d828      	bhi.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800848c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008490:	d01a      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008496:	d822      	bhi.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800849c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084a0:	d007      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80084a2:	e01c      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a8:	4a19      	ldr	r2, [pc, #100]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80084b0:	e01e      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b6:	3308      	adds	r3, #8
 80084b8:	2100      	movs	r1, #0
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 fb2a 	bl	8009b14 <RCCEx_PLL2_Config>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80084c6:	e013      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084cc:	3328      	adds	r3, #40	@ 0x28
 80084ce:	2100      	movs	r1, #0
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 fbd1 	bl	8009c78 <RCCEx_PLL3_Config>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80084dc:	e008      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084e4:	e004      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80084e6:	bf00      	nop
 80084e8:	e002      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80084ea:	bf00      	nop
 80084ec:	e000      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80084ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10d      	bne.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80084f8:	4b05      	ldr	r3, [pc, #20]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008506:	4a02      	ldr	r2, [pc, #8]	@ (8008510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008508:	430b      	orrs	r3, r1
 800850a:	6513      	str	r3, [r2, #80]	@ 0x50
 800850c:	e006      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800850e:	bf00      	nop
 8008510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008514:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008518:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800851c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008528:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800852c:	2300      	movs	r3, #0
 800852e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008532:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008536:	460b      	mov	r3, r1
 8008538:	4313      	orrs	r3, r2
 800853a:	d03a      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800853c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008542:	2b30      	cmp	r3, #48	@ 0x30
 8008544:	d01f      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008546:	2b30      	cmp	r3, #48	@ 0x30
 8008548:	d819      	bhi.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800854a:	2b20      	cmp	r3, #32
 800854c:	d00c      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800854e:	2b20      	cmp	r3, #32
 8008550:	d815      	bhi.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d019      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008556:	2b10      	cmp	r3, #16
 8008558:	d111      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855a:	4bae      	ldr	r3, [pc, #696]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	4aad      	ldr	r2, [pc, #692]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008566:	e011      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800856c:	3308      	adds	r3, #8
 800856e:	2102      	movs	r1, #2
 8008570:	4618      	mov	r0, r3
 8008572:	f001 facf 	bl	8009b14 <RCCEx_PLL2_Config>
 8008576:	4603      	mov	r3, r0
 8008578:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800857c:	e006      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008584:	e002      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008586:	bf00      	nop
 8008588:	e000      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800858a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800858c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008594:	4b9f      	ldr	r3, [pc, #636]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008598:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800859c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085a2:	4a9c      	ldr	r2, [pc, #624]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085a4:	430b      	orrs	r3, r1
 80085a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085a8:	e003      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80085b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80085be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80085c2:	2300      	movs	r3, #0
 80085c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80085c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	d051      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80085d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085dc:	d035      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80085de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085e2:	d82e      	bhi.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80085e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085e8:	d031      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80085ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085ee:	d828      	bhi.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80085f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085f4:	d01a      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80085f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085fa:	d822      	bhi.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008604:	d007      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008606:	e01c      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008608:	4b82      	ldr	r3, [pc, #520]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	4a81      	ldr	r2, [pc, #516]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800860e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008614:	e01c      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861a:	3308      	adds	r3, #8
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f001 fa78 	bl	8009b14 <RCCEx_PLL2_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800862a:	e011      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800862c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008630:	3328      	adds	r3, #40	@ 0x28
 8008632:	2100      	movs	r1, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f001 fb1f 	bl	8009c78 <RCCEx_PLL3_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008640:	e006      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008648:	e002      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800864a:	bf00      	nop
 800864c:	e000      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800864e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008650:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008658:	4b6e      	ldr	r3, [pc, #440]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800865a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800865c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008666:	4a6b      	ldr	r2, [pc, #428]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008668:	430b      	orrs	r3, r1
 800866a:	6513      	str	r3, [r2, #80]	@ 0x50
 800866c:	e003      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008672:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008682:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008686:	2300      	movs	r3, #0
 8008688:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800868c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008690:	460b      	mov	r3, r1
 8008692:	4313      	orrs	r3, r2
 8008694:	d053      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800869a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800869c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086a0:	d033      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80086a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086a6:	d82c      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80086a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086ac:	d02f      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80086ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086b2:	d826      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80086b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086b8:	d02b      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80086ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086be:	d820      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80086c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086c4:	d012      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80086c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ca:	d81a      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d022      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80086d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086d4:	d115      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086da:	3308      	adds	r3, #8
 80086dc:	2101      	movs	r1, #1
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 fa18 	bl	8009b14 <RCCEx_PLL2_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086ea:	e015      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f0:	3328      	adds	r3, #40	@ 0x28
 80086f2:	2101      	movs	r1, #1
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fabf 	bl	8009c78 <RCCEx_PLL3_Config>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008700:	e00a      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008708:	e006      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800870a:	bf00      	nop
 800870c:	e004      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800870e:	bf00      	nop
 8008710:	e002      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008712:	bf00      	nop
 8008714:	e000      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008718:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008720:	4b3c      	ldr	r3, [pc, #240]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008724:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800872c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800872e:	4a39      	ldr	r2, [pc, #228]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008730:	430b      	orrs	r3, r1
 8008732:	6513      	str	r3, [r2, #80]	@ 0x50
 8008734:	e003      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008736:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800873a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800873e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800874a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800874e:	2300      	movs	r3, #0
 8008750:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008754:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008758:	460b      	mov	r3, r1
 800875a:	4313      	orrs	r3, r2
 800875c:	d060      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800875e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008766:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800876a:	d039      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800876c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008770:	d832      	bhi.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008776:	d035      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800877c:	d82c      	bhi.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800877e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008782:	d031      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008788:	d826      	bhi.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800878a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800878e:	d02d      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008790:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008794:	d820      	bhi.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800879a:	d012      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800879c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087a0:	d81a      	bhi.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d024      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80087a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087aa:	d115      	bne.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b0:	3308      	adds	r3, #8
 80087b2:	2101      	movs	r1, #1
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 f9ad 	bl	8009b14 <RCCEx_PLL2_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087c0:	e017      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c6:	3328      	adds	r3, #40	@ 0x28
 80087c8:	2101      	movs	r1, #1
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 fa54 	bl	8009c78 <RCCEx_PLL3_Config>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087d6:	e00c      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087de:	e008      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087e0:	bf00      	nop
 80087e2:	e006      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087e4:	bf00      	nop
 80087e6:	e004      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087e8:	bf00      	nop
 80087ea:	e002      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087ec:	bf00      	nop
 80087ee:	e000      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10e      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087fa:	4b06      	ldr	r3, [pc, #24]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800880a:	4a02      	ldr	r2, [pc, #8]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800880c:	430b      	orrs	r3, r1
 800880e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008810:	e006      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008812:	bf00      	nop
 8008814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800881c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800882c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008830:	2300      	movs	r3, #0
 8008832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008836:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800883a:	460b      	mov	r3, r1
 800883c:	4313      	orrs	r3, r2
 800883e:	d037      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800884a:	d00e      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800884c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008850:	d816      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d018      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800885a:	d111      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800885c:	4bc4      	ldr	r3, [pc, #784]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	4ac3      	ldr	r2, [pc, #780]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008868:	e00f      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800886a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800886e:	3308      	adds	r3, #8
 8008870:	2101      	movs	r1, #1
 8008872:	4618      	mov	r0, r3
 8008874:	f001 f94e 	bl	8009b14 <RCCEx_PLL2_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800887e:	e004      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008886:	e000      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800888a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008892:	4bb7      	ldr	r3, [pc, #732]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008896:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800889a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088a0:	4ab3      	ldr	r2, [pc, #716]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088a2:	430b      	orrs	r3, r1
 80088a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80088a6:	e003      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80088b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80088bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088c0:	2300      	movs	r3, #0
 80088c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80088c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4313      	orrs	r3, r2
 80088ce:	d039      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80088d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d81c      	bhi.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80088da:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	0800891d 	.word	0x0800891d
 80088e4:	080088f1 	.word	0x080088f1
 80088e8:	080088ff 	.word	0x080088ff
 80088ec:	0800891d 	.word	0x0800891d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088f0:	4b9f      	ldr	r3, [pc, #636]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f4:	4a9e      	ldr	r2, [pc, #632]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088fc:	e00f      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008902:	3308      	adds	r3, #8
 8008904:	2102      	movs	r1, #2
 8008906:	4618      	mov	r0, r3
 8008908:	f001 f904 	bl	8009b14 <RCCEx_PLL2_Config>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008912:	e004      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800891a:	e000      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800891c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800891e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10a      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008926:	4b92      	ldr	r3, [pc, #584]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800892a:	f023 0103 	bic.w	r1, r3, #3
 800892e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008934:	4a8e      	ldr	r2, [pc, #568]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008936:	430b      	orrs	r3, r1
 8008938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800893a:	e003      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008940:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008950:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008954:	2300      	movs	r3, #0
 8008956:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800895a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800895e:	460b      	mov	r3, r1
 8008960:	4313      	orrs	r3, r2
 8008962:	f000 8099 	beq.w	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008966:	4b83      	ldr	r3, [pc, #524]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a82      	ldr	r2, [pc, #520]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800896c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008972:	f7fa fd63 	bl	800343c <HAL_GetTick>
 8008976:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800897a:	e00b      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800897c:	f7fa fd5e 	bl	800343c <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b64      	cmp	r3, #100	@ 0x64
 800898a:	d903      	bls.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008992:	e005      	b.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008994:	4b77      	ldr	r3, [pc, #476]	@ (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0ed      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80089a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d173      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80089a8:	4b71      	ldr	r3, [pc, #452]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80089ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089b4:	4053      	eors	r3, r2
 80089b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d015      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089be:	4b6c      	ldr	r3, [pc, #432]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089ca:	4b69      	ldr	r3, [pc, #420]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ce:	4a68      	ldr	r2, [pc, #416]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089d6:	4b66      	ldr	r3, [pc, #408]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089da:	4a65      	ldr	r2, [pc, #404]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089e2:	4a63      	ldr	r2, [pc, #396]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f6:	d118      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f8:	f7fa fd20 	bl	800343c <HAL_GetTick>
 80089fc:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a00:	e00d      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a02:	f7fa fd1b 	bl	800343c <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008a0c:	1ad2      	subs	r2, r2, r3
 8008a0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d903      	bls.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008a1c:	e005      	b.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a1e:	4b54      	ldr	r3, [pc, #336]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0eb      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008a2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d129      	bne.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a42:	d10e      	bne.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008a44:	4b4a      	ldr	r3, [pc, #296]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a54:	091a      	lsrs	r2, r3, #4
 8008a56:	4b48      	ldr	r3, [pc, #288]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	4a45      	ldr	r2, [pc, #276]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	6113      	str	r3, [r2, #16]
 8008a60:	e005      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008a62:	4b43      	ldr	r3, [pc, #268]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	4a42      	ldr	r2, [pc, #264]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a6c:	6113      	str	r3, [r2, #16]
 8008a6e:	4b40      	ldr	r3, [pc, #256]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a70:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a80:	430b      	orrs	r3, r1
 8008a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a84:	e008      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008a8e:	e003      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f002 0301 	and.w	r3, r2, #1
 8008aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008aae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	f000 8090 	beq.w	8008bda <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ac2:	2b28      	cmp	r3, #40	@ 0x28
 8008ac4:	d870      	bhi.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8008acc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008bb1 	.word	0x08008bb1
 8008ad0:	08008ba9 	.word	0x08008ba9
 8008ad4:	08008ba9 	.word	0x08008ba9
 8008ad8:	08008ba9 	.word	0x08008ba9
 8008adc:	08008ba9 	.word	0x08008ba9
 8008ae0:	08008ba9 	.word	0x08008ba9
 8008ae4:	08008ba9 	.word	0x08008ba9
 8008ae8:	08008ba9 	.word	0x08008ba9
 8008aec:	08008b7d 	.word	0x08008b7d
 8008af0:	08008ba9 	.word	0x08008ba9
 8008af4:	08008ba9 	.word	0x08008ba9
 8008af8:	08008ba9 	.word	0x08008ba9
 8008afc:	08008ba9 	.word	0x08008ba9
 8008b00:	08008ba9 	.word	0x08008ba9
 8008b04:	08008ba9 	.word	0x08008ba9
 8008b08:	08008ba9 	.word	0x08008ba9
 8008b0c:	08008b93 	.word	0x08008b93
 8008b10:	08008ba9 	.word	0x08008ba9
 8008b14:	08008ba9 	.word	0x08008ba9
 8008b18:	08008ba9 	.word	0x08008ba9
 8008b1c:	08008ba9 	.word	0x08008ba9
 8008b20:	08008ba9 	.word	0x08008ba9
 8008b24:	08008ba9 	.word	0x08008ba9
 8008b28:	08008ba9 	.word	0x08008ba9
 8008b2c:	08008bb1 	.word	0x08008bb1
 8008b30:	08008ba9 	.word	0x08008ba9
 8008b34:	08008ba9 	.word	0x08008ba9
 8008b38:	08008ba9 	.word	0x08008ba9
 8008b3c:	08008ba9 	.word	0x08008ba9
 8008b40:	08008ba9 	.word	0x08008ba9
 8008b44:	08008ba9 	.word	0x08008ba9
 8008b48:	08008ba9 	.word	0x08008ba9
 8008b4c:	08008bb1 	.word	0x08008bb1
 8008b50:	08008ba9 	.word	0x08008ba9
 8008b54:	08008ba9 	.word	0x08008ba9
 8008b58:	08008ba9 	.word	0x08008ba9
 8008b5c:	08008ba9 	.word	0x08008ba9
 8008b60:	08008ba9 	.word	0x08008ba9
 8008b64:	08008ba9 	.word	0x08008ba9
 8008b68:	08008ba9 	.word	0x08008ba9
 8008b6c:	08008bb1 	.word	0x08008bb1
 8008b70:	58024400 	.word	0x58024400
 8008b74:	58024800 	.word	0x58024800
 8008b78:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b80:	3308      	adds	r3, #8
 8008b82:	2101      	movs	r1, #1
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 ffc5 	bl	8009b14 <RCCEx_PLL2_Config>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b90:	e00f      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b96:	3328      	adds	r3, #40	@ 0x28
 8008b98:	2101      	movs	r1, #1
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f001 f86c 	bl	8009c78 <RCCEx_PLL3_Config>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008ba6:	e004      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bae:	e000      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008bba:	4bc0      	ldr	r3, [pc, #768]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bbe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bca:	4abc      	ldr	r2, [pc, #752]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6553      	str	r3, [r2, #84]	@ 0x54
 8008bd0:	e003      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	f002 0302 	and.w	r3, r2, #2
 8008be6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bea:	2300      	movs	r3, #0
 8008bec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008bf0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	d043      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c02:	2b05      	cmp	r3, #5
 8008c04:	d824      	bhi.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008c06:	a201      	add	r2, pc, #4	@ (adr r2, 8008c0c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c59 	.word	0x08008c59
 8008c10:	08008c25 	.word	0x08008c25
 8008c14:	08008c3b 	.word	0x08008c3b
 8008c18:	08008c59 	.word	0x08008c59
 8008c1c:	08008c59 	.word	0x08008c59
 8008c20:	08008c59 	.word	0x08008c59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c28:	3308      	adds	r3, #8
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f000 ff71 	bl	8009b14 <RCCEx_PLL2_Config>
 8008c32:	4603      	mov	r3, r0
 8008c34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c38:	e00f      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c3e:	3328      	adds	r3, #40	@ 0x28
 8008c40:	2101      	movs	r1, #1
 8008c42:	4618      	mov	r0, r3
 8008c44:	f001 f818 	bl	8009c78 <RCCEx_PLL3_Config>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c4e:	e004      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c56:	e000      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10b      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c62:	4b96      	ldr	r3, [pc, #600]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c66:	f023 0107 	bic.w	r1, r3, #7
 8008c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c72:	4a92      	ldr	r2, [pc, #584]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008c74:	430b      	orrs	r3, r1
 8008c76:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c78:	e003      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	f002 0304 	and.w	r3, r2, #4
 8008c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c92:	2300      	movs	r3, #0
 8008c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c98:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	d043      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008caa:	2b05      	cmp	r3, #5
 8008cac:	d824      	bhi.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008cae:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008d01 	.word	0x08008d01
 8008cb8:	08008ccd 	.word	0x08008ccd
 8008cbc:	08008ce3 	.word	0x08008ce3
 8008cc0:	08008d01 	.word	0x08008d01
 8008cc4:	08008d01 	.word	0x08008d01
 8008cc8:	08008d01 	.word	0x08008d01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 ff1d 	bl	8009b14 <RCCEx_PLL2_Config>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ce0:	e00f      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ce6:	3328      	adds	r3, #40	@ 0x28
 8008ce8:	2101      	movs	r1, #1
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 ffc4 	bl	8009c78 <RCCEx_PLL3_Config>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cf6:	e004      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008cfe:	e000      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10b      	bne.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d0e:	f023 0107 	bic.w	r1, r3, #7
 8008d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d1a:	4a68      	ldr	r2, [pc, #416]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d20:	e003      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f002 0320 	and.w	r3, r2, #32
 8008d36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d44:	460b      	mov	r3, r1
 8008d46:	4313      	orrs	r3, r2
 8008d48:	d055      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d56:	d033      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d5c:	d82c      	bhi.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d62:	d02f      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d68:	d826      	bhi.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008d6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d6e:	d02b      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008d70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d74:	d820      	bhi.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d7a:	d012      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d80:	d81a      	bhi.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d022      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008d86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d8a:	d115      	bne.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d90:	3308      	adds	r3, #8
 8008d92:	2100      	movs	r1, #0
 8008d94:	4618      	mov	r0, r3
 8008d96:	f000 febd 	bl	8009b14 <RCCEx_PLL2_Config>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008da0:	e015      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da6:	3328      	adds	r3, #40	@ 0x28
 8008da8:	2102      	movs	r1, #2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 ff64 	bl	8009c78 <RCCEx_PLL3_Config>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008db6:	e00a      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dbe:	e006      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008dc0:	bf00      	nop
 8008dc2:	e004      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008dc4:	bf00      	nop
 8008dc6:	e002      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008dc8:	bf00      	nop
 8008dca:	e000      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008dd6:	4b39      	ldr	r3, [pc, #228]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008de6:	4a35      	ldr	r2, [pc, #212]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008de8:	430b      	orrs	r3, r1
 8008dea:	6553      	str	r3, [r2, #84]	@ 0x54
 8008dec:	e003      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008df2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e06:	2300      	movs	r3, #0
 8008e08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4313      	orrs	r3, r2
 8008e14:	d058      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008e22:	d033      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008e24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008e28:	d82c      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e2e:	d02f      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e34:	d826      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008e36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e3a:	d02b      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008e3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e40:	d820      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e46:	d012      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008e48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e4c:	d81a      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d022      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e56:	d115      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	2100      	movs	r1, #0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fe57 	bl	8009b14 <RCCEx_PLL2_Config>
 8008e66:	4603      	mov	r3, r0
 8008e68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e6c:	e015      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e72:	3328      	adds	r3, #40	@ 0x28
 8008e74:	2102      	movs	r1, #2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fefe 	bl	8009c78 <RCCEx_PLL3_Config>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e82:	e00a      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e8a:	e006      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008e8c:	bf00      	nop
 8008e8e:	e004      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008e90:	bf00      	nop
 8008e92:	e002      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008e94:	bf00      	nop
 8008e96:	e000      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10e      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ea2:	4b06      	ldr	r3, [pc, #24]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008eb2:	4a02      	ldr	r2, [pc, #8]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008eb4:	430b      	orrs	r3, r1
 8008eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008eb8:	e006      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008eba:	bf00      	nop
 8008ebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ec4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ede:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	d055      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ef0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ef4:	d033      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008ef6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008efa:	d82c      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f00:	d02f      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f06:	d826      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008f08:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008f0c:	d02b      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008f0e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008f12:	d820      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f18:	d012      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008f1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f1e:	d81a      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d022      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f28:	d115      	bne.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2e:	3308      	adds	r3, #8
 8008f30:	2100      	movs	r1, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fdee 	bl	8009b14 <RCCEx_PLL2_Config>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f3e:	e015      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f44:	3328      	adds	r3, #40	@ 0x28
 8008f46:	2102      	movs	r1, #2
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fe95 	bl	8009c78 <RCCEx_PLL3_Config>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f54:	e00a      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f5c:	e006      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008f5e:	bf00      	nop
 8008f60:	e004      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008f62:	bf00      	nop
 8008f64:	e002      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008f66:	bf00      	nop
 8008f68:	e000      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10b      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f74:	4ba1      	ldr	r3, [pc, #644]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f78:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f84:	4a9d      	ldr	r2, [pc, #628]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f86:	430b      	orrs	r3, r1
 8008f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f8a:	e003      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f002 0308 	and.w	r3, r2, #8
 8008fa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008faa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	d01e      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fc0:	d10c      	bne.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc6:	3328      	adds	r3, #40	@ 0x28
 8008fc8:	2102      	movs	r1, #2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fe54 	bl	8009c78 <RCCEx_PLL3_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008fdc:	4b87      	ldr	r3, [pc, #540]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fec:	4a83      	ldr	r2, [pc, #524]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	f002 0310 	and.w	r3, r2, #16
 8008ffe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009002:	2300      	movs	r3, #0
 8009004:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009008:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800900c:	460b      	mov	r3, r1
 800900e:	4313      	orrs	r3, r2
 8009010:	d01e      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009016:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800901a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800901e:	d10c      	bne.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009024:	3328      	adds	r3, #40	@ 0x28
 8009026:	2102      	movs	r1, #2
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fe25 	bl	8009c78 <RCCEx_PLL3_Config>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800903a:	4b70      	ldr	r3, [pc, #448]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800903c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800903e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009046:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800904a:	4a6c      	ldr	r2, [pc, #432]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800904c:	430b      	orrs	r3, r1
 800904e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800905c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009060:	2300      	movs	r3, #0
 8009062:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009066:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800906a:	460b      	mov	r3, r1
 800906c:	4313      	orrs	r3, r2
 800906e:	d03e      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009074:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800907c:	d022      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800907e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009082:	d81b      	bhi.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800908c:	d00b      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800908e:	e015      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009094:	3308      	adds	r3, #8
 8009096:	2100      	movs	r1, #0
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fd3b 	bl	8009b14 <RCCEx_PLL2_Config>
 800909e:	4603      	mov	r3, r0
 80090a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80090a4:	e00f      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090aa:	3328      	adds	r3, #40	@ 0x28
 80090ac:	2102      	movs	r1, #2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fde2 	bl	8009c78 <RCCEx_PLL3_Config>
 80090b4:	4603      	mov	r3, r0
 80090b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80090ba:	e004      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80090c2:	e000      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80090c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10b      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090ce:	4b4b      	ldr	r3, [pc, #300]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80090d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80090d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090de:	4a47      	ldr	r2, [pc, #284]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80090e4:	e003      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80090fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090fc:	2300      	movs	r3, #0
 80090fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009100:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009104:	460b      	mov	r3, r1
 8009106:	4313      	orrs	r3, r2
 8009108:	d03b      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800910a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800910e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009112:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009116:	d01f      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8009118:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800911c:	d818      	bhi.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800911e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009122:	d003      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8009124:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009128:	d007      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800912a:	e011      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800912c:	4b33      	ldr	r3, [pc, #204]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800912e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009130:	4a32      	ldr	r2, [pc, #200]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009138:	e00f      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800913a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800913e:	3328      	adds	r3, #40	@ 0x28
 8009140:	2101      	movs	r1, #1
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fd98 	bl	8009c78 <RCCEx_PLL3_Config>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800914e:	e004      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009156:	e000      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8009158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800915a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10b      	bne.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009162:	4b26      	ldr	r3, [pc, #152]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009166:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800916a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800916e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009172:	4a22      	ldr	r2, [pc, #136]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009174:	430b      	orrs	r3, r1
 8009176:	6553      	str	r3, [r2, #84]	@ 0x54
 8009178:	e003      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800917e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800918e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009190:	2300      	movs	r3, #0
 8009192:	677b      	str	r3, [r7, #116]	@ 0x74
 8009194:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009198:	460b      	mov	r3, r1
 800919a:	4313      	orrs	r3, r2
 800919c:	d034      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800919e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80091a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ac:	d007      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80091ae:	e011      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b0:	4b12      	ldr	r3, [pc, #72]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b4:	4a11      	ldr	r2, [pc, #68]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80091bc:	e00e      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c2:	3308      	adds	r3, #8
 80091c4:	2102      	movs	r1, #2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fca4 	bl	8009b14 <RCCEx_PLL2_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80091d2:	e003      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80091da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10d      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091e4:	4b05      	ldr	r3, [pc, #20]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f2:	4a02      	ldr	r2, [pc, #8]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091f4:	430b      	orrs	r3, r1
 80091f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091f8:	e006      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80091fa:	bf00      	nop
 80091fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009200:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009204:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009210:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009214:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009216:	2300      	movs	r3, #0
 8009218:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800921a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800921e:	460b      	mov	r3, r1
 8009220:	4313      	orrs	r3, r2
 8009222:	d00c      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009228:	3328      	adds	r3, #40	@ 0x28
 800922a:	2102      	movs	r1, #2
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fd23 	bl	8009c78 <RCCEx_PLL3_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800923e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800924a:	663b      	str	r3, [r7, #96]	@ 0x60
 800924c:	2300      	movs	r3, #0
 800924e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009250:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009254:	460b      	mov	r3, r1
 8009256:	4313      	orrs	r3, r2
 8009258:	d038      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800925a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800925e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009266:	d018      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8009268:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800926c:	d811      	bhi.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800926e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009272:	d014      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009278:	d80b      	bhi.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d011      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800927e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009282:	d106      	bne.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009284:	4bc3      	ldr	r3, [pc, #780]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009288:	4ac2      	ldr	r2, [pc, #776]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800928a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800928e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009290:	e008      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009298:	e004      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800929a:	bf00      	nop
 800929c:	e002      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800929e:	bf00      	nop
 80092a0:	e000      	b.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80092a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10b      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80092ac:	4bb9      	ldr	r3, [pc, #740]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80092b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092bc:	4ab5      	ldr	r2, [pc, #724]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092be:	430b      	orrs	r3, r1
 80092c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80092c2:	e003      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80092d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092da:	2300      	movs	r3, #0
 80092dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80092e2:	460b      	mov	r3, r1
 80092e4:	4313      	orrs	r3, r2
 80092e6:	d009      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092e8:	4baa      	ldr	r3, [pc, #680]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092f6:	4aa7      	ldr	r2, [pc, #668]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092f8:	430b      	orrs	r3, r1
 80092fa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009304:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009308:	653b      	str	r3, [r7, #80]	@ 0x50
 800930a:	2300      	movs	r3, #0
 800930c:	657b      	str	r3, [r7, #84]	@ 0x54
 800930e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009312:	460b      	mov	r3, r1
 8009314:	4313      	orrs	r3, r2
 8009316:	d009      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009318:	4b9e      	ldr	r3, [pc, #632]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800931a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800931c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009326:	4a9b      	ldr	r2, [pc, #620]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009328:	430b      	orrs	r3, r1
 800932a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800932c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800933a:	2300      	movs	r3, #0
 800933c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800933e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009342:	460b      	mov	r3, r1
 8009344:	4313      	orrs	r3, r2
 8009346:	d009      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009348:	4b92      	ldr	r3, [pc, #584]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800934a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800934c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009356:	4a8f      	ldr	r2, [pc, #572]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009358:	430b      	orrs	r3, r1
 800935a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800935c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009368:	643b      	str	r3, [r7, #64]	@ 0x40
 800936a:	2300      	movs	r3, #0
 800936c:	647b      	str	r3, [r7, #68]	@ 0x44
 800936e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009372:	460b      	mov	r3, r1
 8009374:	4313      	orrs	r3, r2
 8009376:	d00e      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009378:	4b86      	ldr	r3, [pc, #536]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	4a85      	ldr	r2, [pc, #532]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800937e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009382:	6113      	str	r3, [r2, #16]
 8009384:	4b83      	ldr	r3, [pc, #524]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009386:	6919      	ldr	r1, [r3, #16]
 8009388:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800938c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009390:	4a80      	ldr	r2, [pc, #512]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009392:	430b      	orrs	r3, r1
 8009394:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80093a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093a4:	2300      	movs	r3, #0
 80093a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80093ac:	460b      	mov	r3, r1
 80093ae:	4313      	orrs	r3, r2
 80093b0:	d009      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80093b2:	4b78      	ldr	r3, [pc, #480]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80093ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c0:	4a74      	ldr	r2, [pc, #464]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093c2:	430b      	orrs	r3, r1
 80093c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80093c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80093d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80093d4:	2300      	movs	r3, #0
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80093dc:	460b      	mov	r3, r1
 80093de:	4313      	orrs	r3, r2
 80093e0:	d00a      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093e2:	4b6c      	ldr	r3, [pc, #432]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80093ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093f2:	4a68      	ldr	r2, [pc, #416]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093f4:	430b      	orrs	r3, r1
 80093f6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80093f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	2100      	movs	r1, #0
 8009402:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800940a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800940e:	460b      	mov	r3, r1
 8009410:	4313      	orrs	r3, r2
 8009412:	d011      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009418:	3308      	adds	r3, #8
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fb79 	bl	8009b14 <RCCEx_PLL2_Config>
 8009422:	4603      	mov	r3, r0
 8009424:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009428:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009430:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009434:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	2100      	movs	r1, #0
 8009442:	6239      	str	r1, [r7, #32]
 8009444:	f003 0302 	and.w	r3, r3, #2
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
 800944a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800944e:	460b      	mov	r3, r1
 8009450:	4313      	orrs	r3, r2
 8009452:	d011      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009458:	3308      	adds	r3, #8
 800945a:	2101      	movs	r1, #1
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fb59 	bl	8009b14 <RCCEx_PLL2_Config>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009470:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009474:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	2100      	movs	r1, #0
 8009482:	61b9      	str	r1, [r7, #24]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	61fb      	str	r3, [r7, #28]
 800948a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800948e:	460b      	mov	r3, r1
 8009490:	4313      	orrs	r3, r2
 8009492:	d011      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009498:	3308      	adds	r3, #8
 800949a:	2102      	movs	r1, #2
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fb39 	bl	8009b14 <RCCEx_PLL2_Config>
 80094a2:	4603      	mov	r3, r0
 80094a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80094a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80094b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	2100      	movs	r1, #0
 80094c2:	6139      	str	r1, [r7, #16]
 80094c4:	f003 0308 	and.w	r3, r3, #8
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80094ce:	460b      	mov	r3, r1
 80094d0:	4313      	orrs	r3, r2
 80094d2:	d011      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094d8:	3328      	adds	r3, #40	@ 0x28
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fbcb 	bl	8009c78 <RCCEx_PLL3_Config>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80094e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80094f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	2100      	movs	r1, #0
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	f003 0310 	and.w	r3, r3, #16
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800950e:	460b      	mov	r3, r1
 8009510:	4313      	orrs	r3, r2
 8009512:	d011      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009518:	3328      	adds	r3, #40	@ 0x28
 800951a:	2101      	movs	r1, #1
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fbab 	bl	8009c78 <RCCEx_PLL3_Config>
 8009522:	4603      	mov	r3, r0
 8009524:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009534:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	2100      	movs	r1, #0
 8009542:	6039      	str	r1, [r7, #0]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	607b      	str	r3, [r7, #4]
 800954a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800954e:	460b      	mov	r3, r1
 8009550:	4313      	orrs	r3, r2
 8009552:	d011      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009558:	3328      	adds	r3, #40	@ 0x28
 800955a:	2102      	movs	r1, #2
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fb8b 	bl	8009c78 <RCCEx_PLL3_Config>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009568:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800956c:	2b00      	cmp	r3, #0
 800956e:	d003      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009570:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009574:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009578:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	e000      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
}
 8009586:	4618      	mov	r0, r3
 8009588:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800958c:	46bd      	mov	sp, r7
 800958e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009592:	bf00      	nop
 8009594:	58024400 	.word	0x58024400

08009598 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800959c:	f7fe fde2 	bl	8008164 <HAL_RCC_GetHCLKFreq>
 80095a0:	4602      	mov	r2, r0
 80095a2:	4b06      	ldr	r3, [pc, #24]	@ (80095bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	091b      	lsrs	r3, r3, #4
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	4904      	ldr	r1, [pc, #16]	@ (80095c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095ae:	5ccb      	ldrb	r3, [r1, r3]
 80095b0:	f003 031f 	and.w	r3, r3, #31
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	58024400 	.word	0x58024400
 80095c0:	08012a60 	.word	0x08012a60

080095c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b089      	sub	sp, #36	@ 0x24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095cc:	4ba1      	ldr	r3, [pc, #644]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d0:	f003 0303 	and.w	r3, r3, #3
 80095d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80095d6:	4b9f      	ldr	r3, [pc, #636]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095da:	0b1b      	lsrs	r3, r3, #12
 80095dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095e2:	4b9c      	ldr	r3, [pc, #624]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e6:	091b      	lsrs	r3, r3, #4
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80095ee:	4b99      	ldr	r3, [pc, #612]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f2:	08db      	lsrs	r3, r3, #3
 80095f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	fb02 f303 	mul.w	r3, r2, r3
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 8111 	beq.w	8009834 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b02      	cmp	r3, #2
 8009616:	f000 8083 	beq.w	8009720 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b02      	cmp	r3, #2
 800961e:	f200 80a1 	bhi.w	8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d003      	beq.n	8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d056      	beq.n	80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800962e:	e099      	b.n	8009764 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009630:	4b88      	ldr	r3, [pc, #544]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0320 	and.w	r3, r3, #32
 8009638:	2b00      	cmp	r3, #0
 800963a:	d02d      	beq.n	8009698 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800963c:	4b85      	ldr	r3, [pc, #532]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	08db      	lsrs	r3, r3, #3
 8009642:	f003 0303 	and.w	r3, r3, #3
 8009646:	4a84      	ldr	r2, [pc, #528]	@ (8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009648:	fa22 f303 	lsr.w	r3, r2, r3
 800964c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	ee07 3a90 	vmov	s15, r3
 8009654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009666:	4b7b      	ldr	r3, [pc, #492]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009676:	ed97 6a03 	vldr	s12, [r7, #12]
 800967a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800967e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009692:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009696:	e087      	b.n	80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096aa:	4b6a      	ldr	r3, [pc, #424]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80096be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096da:	e065      	b.n	80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ee:	4b59      	ldr	r3, [pc, #356]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009702:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800971e:	e043      	b.n	80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009868 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800972e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009732:	4b48      	ldr	r3, [pc, #288]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009742:	ed97 6a03 	vldr	s12, [r7, #12]
 8009746:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800974a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800975a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009762:	e021      	b.n	80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009776:	4b37      	ldr	r3, [pc, #220]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009786:	ed97 6a03 	vldr	s12, [r7, #12]
 800978a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800978e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800979a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80097a8:	4b2a      	ldr	r3, [pc, #168]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ac:	0a5b      	lsrs	r3, r3, #9
 80097ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b2:	ee07 3a90 	vmov	s15, r3
 80097b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ce:	ee17 2a90 	vmov	r2, s15
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80097d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097da:	0c1b      	lsrs	r3, r3, #16
 80097dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097e0:	ee07 3a90 	vmov	s15, r3
 80097e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097fc:	ee17 2a90 	vmov	r2, s15
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009804:	4b13      	ldr	r3, [pc, #76]	@ (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009808:	0e1b      	lsrs	r3, r3, #24
 800980a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800981a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800981e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800982a:	ee17 2a90 	vmov	r2, s15
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009832:	e008      	b.n	8009846 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	609a      	str	r2, [r3, #8]
}
 8009846:	bf00      	nop
 8009848:	3724      	adds	r7, #36	@ 0x24
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	58024400 	.word	0x58024400
 8009858:	03d09000 	.word	0x03d09000
 800985c:	46000000 	.word	0x46000000
 8009860:	4c742400 	.word	0x4c742400
 8009864:	4a742400 	.word	0x4a742400
 8009868:	4bb71b00 	.word	0x4bb71b00

0800986c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800986c:	b480      	push	{r7}
 800986e:	b089      	sub	sp, #36	@ 0x24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009874:	4ba1      	ldr	r3, [pc, #644]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800987e:	4b9f      	ldr	r3, [pc, #636]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009882:	0d1b      	lsrs	r3, r3, #20
 8009884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009888:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800988a:	4b9c      	ldr	r3, [pc, #624]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800988c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988e:	0a1b      	lsrs	r3, r3, #8
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009896:	4b99      	ldr	r3, [pc, #612]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800989a:	08db      	lsrs	r3, r3, #3
 800989c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	fb02 f303 	mul.w	r3, r2, r3
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 8111 	beq.w	8009adc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	f000 8083 	beq.w	80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	f200 80a1 	bhi.w	8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d056      	beq.n	8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098d6:	e099      	b.n	8009a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098d8:	4b88      	ldr	r3, [pc, #544]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0320 	and.w	r3, r3, #32
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d02d      	beq.n	8009940 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098e4:	4b85      	ldr	r3, [pc, #532]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	08db      	lsrs	r3, r3, #3
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	4a84      	ldr	r2, [pc, #528]	@ (8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098f0:	fa22 f303 	lsr.w	r3, r2, r3
 80098f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	ee07 3a90 	vmov	s15, r3
 80098fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990e:	4b7b      	ldr	r3, [pc, #492]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009922:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800993e:	e087      	b.n	8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800994e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009952:	4b6a      	ldr	r3, [pc, #424]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009962:	ed97 6a03 	vldr	s12, [r7, #12]
 8009966:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800996a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009982:	e065      	b.n	8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009996:	4b59      	ldr	r3, [pc, #356]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800999a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099c6:	e043      	b.n	8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009b10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099da:	4b48      	ldr	r3, [pc, #288]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a0a:	e021      	b.n	8009a50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1e:	4b37      	ldr	r3, [pc, #220]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009a50:	4b2a      	ldr	r3, [pc, #168]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a54:	0a5b      	lsrs	r3, r3, #9
 8009a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a5a:	ee07 3a90 	vmov	s15, r3
 8009a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a76:	ee17 2a90 	vmov	r2, s15
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a82:	0c1b      	lsrs	r3, r3, #16
 8009a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a88:	ee07 3a90 	vmov	s15, r3
 8009a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a98:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa4:	ee17 2a90 	vmov	r2, s15
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009aac:	4b13      	ldr	r3, [pc, #76]	@ (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ab0:	0e1b      	lsrs	r3, r3, #24
 8009ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad2:	ee17 2a90 	vmov	r2, s15
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ada:	e008      	b.n	8009aee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	609a      	str	r2, [r3, #8]
}
 8009aee:	bf00      	nop
 8009af0:	3724      	adds	r7, #36	@ 0x24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	58024400 	.word	0x58024400
 8009b00:	03d09000 	.word	0x03d09000
 8009b04:	46000000 	.word	0x46000000
 8009b08:	4c742400 	.word	0x4c742400
 8009b0c:	4a742400 	.word	0x4a742400
 8009b10:	4bb71b00 	.word	0x4bb71b00

08009b14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b22:	4b53      	ldr	r3, [pc, #332]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d101      	bne.n	8009b32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e099      	b.n	8009c66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b32:	4b4f      	ldr	r3, [pc, #316]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a4e      	ldr	r2, [pc, #312]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009b38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b3e:	f7f9 fc7d 	bl	800343c <HAL_GetTick>
 8009b42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b44:	e008      	b.n	8009b58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b46:	f7f9 fc79 	bl	800343c <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d901      	bls.n	8009b58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e086      	b.n	8009c66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b58:	4b45      	ldr	r3, [pc, #276]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1f0      	bne.n	8009b46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b64:	4b42      	ldr	r3, [pc, #264]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b68:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	031b      	lsls	r3, r3, #12
 8009b72:	493f      	ldr	r1, [pc, #252]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	3b01      	subs	r3, #1
 8009b88:	025b      	lsls	r3, r3, #9
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	431a      	orrs	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	041b      	lsls	r3, r3, #16
 8009b96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	061b      	lsls	r3, r3, #24
 8009ba4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ba8:	4931      	ldr	r1, [pc, #196]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009bae:	4b30      	ldr	r3, [pc, #192]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	492d      	ldr	r1, [pc, #180]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc4:	f023 0220 	bic.w	r2, r3, #32
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	4928      	ldr	r1, [pc, #160]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009bd2:	4b27      	ldr	r3, [pc, #156]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd6:	4a26      	ldr	r2, [pc, #152]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009bd8:	f023 0310 	bic.w	r3, r3, #16
 8009bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009bde:	4b24      	ldr	r3, [pc, #144]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009be2:	4b24      	ldr	r3, [pc, #144]	@ (8009c74 <RCCEx_PLL2_Config+0x160>)
 8009be4:	4013      	ands	r3, r2
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	69d2      	ldr	r2, [r2, #28]
 8009bea:	00d2      	lsls	r2, r2, #3
 8009bec:	4920      	ldr	r1, [pc, #128]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009bf8:	f043 0310 	orr.w	r3, r3, #16
 8009bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d106      	bne.n	8009c12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c04:	4b1a      	ldr	r3, [pc, #104]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c08:	4a19      	ldr	r2, [pc, #100]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009c0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c10:	e00f      	b.n	8009c32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d106      	bne.n	8009c26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c18:	4b15      	ldr	r3, [pc, #84]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1c:	4a14      	ldr	r2, [pc, #80]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c24:	e005      	b.n	8009c32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c26:	4b12      	ldr	r3, [pc, #72]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2a:	4a11      	ldr	r2, [pc, #68]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009c2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c32:	4b0f      	ldr	r3, [pc, #60]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a0e      	ldr	r2, [pc, #56]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009c38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c3e:	f7f9 fbfd 	bl	800343c <HAL_GetTick>
 8009c42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c44:	e008      	b.n	8009c58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c46:	f7f9 fbf9 	bl	800343c <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d901      	bls.n	8009c58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e006      	b.n	8009c66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c58:	4b05      	ldr	r3, [pc, #20]	@ (8009c70 <RCCEx_PLL2_Config+0x15c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0f0      	beq.n	8009c46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	58024400 	.word	0x58024400
 8009c74:	ffff0007 	.word	0xffff0007

08009c78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c86:	4b53      	ldr	r3, [pc, #332]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8a:	f003 0303 	and.w	r3, r3, #3
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	d101      	bne.n	8009c96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e099      	b.n	8009dca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c96:	4b4f      	ldr	r3, [pc, #316]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a4e      	ldr	r2, [pc, #312]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ca2:	f7f9 fbcb 	bl	800343c <HAL_GetTick>
 8009ca6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ca8:	e008      	b.n	8009cbc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009caa:	f7f9 fbc7 	bl	800343c <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d901      	bls.n	8009cbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e086      	b.n	8009dca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cbc:	4b45      	ldr	r3, [pc, #276]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1f0      	bne.n	8009caa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009cc8:	4b42      	ldr	r3, [pc, #264]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ccc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	051b      	lsls	r3, r3, #20
 8009cd6:	493f      	ldr	r1, [pc, #252]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	628b      	str	r3, [r1, #40]	@ 0x28
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	025b      	lsls	r3, r3, #9
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	041b      	lsls	r3, r3, #16
 8009cfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	061b      	lsls	r3, r3, #24
 8009d08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009d0c:	4931      	ldr	r1, [pc, #196]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d12:	4b30      	ldr	r3, [pc, #192]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	492d      	ldr	r1, [pc, #180]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d24:	4b2b      	ldr	r3, [pc, #172]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d28:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	4928      	ldr	r1, [pc, #160]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d36:	4b27      	ldr	r3, [pc, #156]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d3a:	4a26      	ldr	r2, [pc, #152]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d42:	4b24      	ldr	r3, [pc, #144]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d46:	4b24      	ldr	r3, [pc, #144]	@ (8009dd8 <RCCEx_PLL3_Config+0x160>)
 8009d48:	4013      	ands	r3, r2
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	69d2      	ldr	r2, [r2, #28]
 8009d4e:	00d2      	lsls	r2, r2, #3
 8009d50:	4920      	ldr	r1, [pc, #128]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d56:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d106      	bne.n	8009d76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d68:	4b1a      	ldr	r3, [pc, #104]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d6c:	4a19      	ldr	r2, [pc, #100]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009d72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d74:	e00f      	b.n	8009d96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d106      	bne.n	8009d8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d7c:	4b15      	ldr	r3, [pc, #84]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d80:	4a14      	ldr	r2, [pc, #80]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d88:	e005      	b.n	8009d96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d8a:	4b12      	ldr	r3, [pc, #72]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8e:	4a11      	ldr	r2, [pc, #68]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d96:	4b0f      	ldr	r3, [pc, #60]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009da2:	f7f9 fb4b 	bl	800343c <HAL_GetTick>
 8009da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009da8:	e008      	b.n	8009dbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009daa:	f7f9 fb47 	bl	800343c <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d901      	bls.n	8009dbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e006      	b.n	8009dca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009dbc:	4b05      	ldr	r3, [pc, #20]	@ (8009dd4 <RCCEx_PLL3_Config+0x15c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d0f0      	beq.n	8009daa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	58024400 	.word	0x58024400
 8009dd8:	ffff0007 	.word	0xffff0007

08009ddc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e10f      	b.n	800a00e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a87      	ldr	r2, [pc, #540]	@ (800a018 <HAL_SPI_Init+0x23c>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d00f      	beq.n	8009e1e <HAL_SPI_Init+0x42>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a86      	ldr	r2, [pc, #536]	@ (800a01c <HAL_SPI_Init+0x240>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d00a      	beq.n	8009e1e <HAL_SPI_Init+0x42>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a84      	ldr	r2, [pc, #528]	@ (800a020 <HAL_SPI_Init+0x244>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d005      	beq.n	8009e1e <HAL_SPI_Init+0x42>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	d901      	bls.n	8009e1e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e0f7      	b.n	800a00e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f001 f968 	bl	800b0f4 <SPI_GetPacketSize>
 8009e24:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a7b      	ldr	r2, [pc, #492]	@ (800a018 <HAL_SPI_Init+0x23c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00c      	beq.n	8009e4a <HAL_SPI_Init+0x6e>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a79      	ldr	r2, [pc, #484]	@ (800a01c <HAL_SPI_Init+0x240>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d007      	beq.n	8009e4a <HAL_SPI_Init+0x6e>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a78      	ldr	r2, [pc, #480]	@ (800a020 <HAL_SPI_Init+0x244>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d002      	beq.n	8009e4a <HAL_SPI_Init+0x6e>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d811      	bhi.n	8009e6e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e4e:	4a72      	ldr	r2, [pc, #456]	@ (800a018 <HAL_SPI_Init+0x23c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d009      	beq.n	8009e68 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a70      	ldr	r2, [pc, #448]	@ (800a01c <HAL_SPI_Init+0x240>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d004      	beq.n	8009e68 <HAL_SPI_Init+0x8c>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a6f      	ldr	r2, [pc, #444]	@ (800a020 <HAL_SPI_Init+0x244>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d104      	bne.n	8009e72 <HAL_SPI_Init+0x96>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b10      	cmp	r3, #16
 8009e6c:	d901      	bls.n	8009e72 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e0cd      	b.n	800a00e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7f8 fb08 	bl	800249c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0201 	bic.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009eae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009eb8:	d119      	bne.n	8009eee <HAL_SPI_Init+0x112>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ec2:	d103      	bne.n	8009ecc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d008      	beq.n	8009ede <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10c      	bne.n	8009eee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ed8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009edc:	d107      	bne.n	8009eee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009eec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00f      	beq.n	8009f1a <HAL_SPI_Init+0x13e>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	2b06      	cmp	r3, #6
 8009f00:	d90b      	bls.n	8009f1a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	e007      	b.n	8009f2a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69da      	ldr	r2, [r3, #28]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	431a      	orrs	r2, r3
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f3c:	ea42 0103 	orr.w	r1, r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68da      	ldr	r2, [r3, #12]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	431a      	orrs	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	431a      	orrs	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	431a      	orrs	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	431a      	orrs	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	431a      	orrs	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f8a:	ea42 0103 	orr.w	r1, r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d113      	bne.n	8009fca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fb4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009fc8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f022 0201 	bic.w	r2, r2, #1
 8009fd8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00a      	beq.n	8009ffc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	40013000 	.word	0x40013000
 800a01c:	40003800 	.word	0x40003800
 800a020:	40003c00 	.word	0x40003c00

0800a024 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af02      	add	r7, sp, #8
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	4613      	mov	r3, r2
 800a032:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3320      	adds	r3, #32
 800a03a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a03c:	f7f9 f9fe 	bl	800343c <HAL_GetTick>
 800a040:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d001      	beq.n	800a052 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a04e:	2302      	movs	r3, #2
 800a050:	e1d1      	b.n	800a3f6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <HAL_SPI_Transmit+0x3a>
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e1c9      	b.n	800a3f6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d101      	bne.n	800a070 <HAL_SPI_Transmit+0x4c>
 800a06c:	2302      	movs	r3, #2
 800a06e:	e1c2      	b.n	800a3f6 <HAL_SPI_Transmit+0x3d2>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2203      	movs	r2, #3
 800a07c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	88fa      	ldrh	r2, [r7, #6]
 800a092:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	88fa      	ldrh	r2, [r7, #6]
 800a09a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a0c8:	d108      	bne.n	800a0dc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	e009      	b.n	800a0f0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a0ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	4b96      	ldr	r3, [pc, #600]	@ (800a350 <HAL_SPI_Transmit+0x32c>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	88f9      	ldrh	r1, [r7, #6]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	6812      	ldr	r2, [r2, #0]
 800a100:	430b      	orrs	r3, r1
 800a102:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f042 0201 	orr.w	r2, r2, #1
 800a112:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a11c:	d107      	bne.n	800a12e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a12c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	2b0f      	cmp	r3, #15
 800a134:	d947      	bls.n	800a1c6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a136:	e03f      	b.n	800a1b8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b02      	cmp	r3, #2
 800a144:	d114      	bne.n	800a170 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6812      	ldr	r2, [r2, #0]
 800a150:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a162:	b29b      	uxth	r3, r3
 800a164:	3b01      	subs	r3, #1
 800a166:	b29a      	uxth	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a16e:	e023      	b.n	800a1b8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a170:	f7f9 f964 	bl	800343c <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d803      	bhi.n	800a188 <HAL_SPI_Transmit+0x164>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a186:	d102      	bne.n	800a18e <HAL_SPI_Transmit+0x16a>
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d114      	bne.n	800a1b8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 fee2 	bl	800af58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a19a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e11e      	b.n	800a3f6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1b9      	bne.n	800a138 <HAL_SPI_Transmit+0x114>
 800a1c4:	e0f1      	b.n	800a3aa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	2b07      	cmp	r3, #7
 800a1cc:	f240 80e6 	bls.w	800a39c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a1d0:	e05d      	b.n	800a28e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d132      	bne.n	800a246 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d918      	bls.n	800a21e <HAL_SPI_Transmit+0x1fa>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d014      	beq.n	800a21e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6812      	ldr	r2, [r2, #0]
 800a1fe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a204:	1d1a      	adds	r2, r3, #4
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a210:	b29b      	uxth	r3, r3
 800a212:	3b02      	subs	r3, #2
 800a214:	b29a      	uxth	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a21c:	e037      	b.n	800a28e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a222:	881a      	ldrh	r2, [r3, #0]
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a22c:	1c9a      	adds	r2, r3, #2
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a238:	b29b      	uxth	r3, r3
 800a23a:	3b01      	subs	r3, #1
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a244:	e023      	b.n	800a28e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a246:	f7f9 f8f9 	bl	800343c <HAL_GetTick>
 800a24a:	4602      	mov	r2, r0
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	429a      	cmp	r2, r3
 800a254:	d803      	bhi.n	800a25e <HAL_SPI_Transmit+0x23a>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25c:	d102      	bne.n	800a264 <HAL_SPI_Transmit+0x240>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d114      	bne.n	800a28e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 fe77 	bl	800af58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a270:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e0b3      	b.n	800a3f6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a294:	b29b      	uxth	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d19b      	bne.n	800a1d2 <HAL_SPI_Transmit+0x1ae>
 800a29a:	e086      	b.n	800a3aa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d154      	bne.n	800a354 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d918      	bls.n	800a2e8 <HAL_SPI_Transmit+0x2c4>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ba:	2b40      	cmp	r3, #64	@ 0x40
 800a2bc:	d914      	bls.n	800a2e8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6812      	ldr	r2, [r2, #0]
 800a2c8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2ce:	1d1a      	adds	r2, r3, #4
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	3b04      	subs	r3, #4
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a2e6:	e059      	b.n	800a39c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d917      	bls.n	800a324 <HAL_SPI_Transmit+0x300>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d013      	beq.n	800a324 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a300:	881a      	ldrh	r2, [r3, #0]
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a30a:	1c9a      	adds	r2, r3, #2
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a316:	b29b      	uxth	r3, r3
 800a318:	3b02      	subs	r3, #2
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a322:	e03b      	b.n	800a39c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3320      	adds	r3, #32
 800a32e:	7812      	ldrb	r2, [r2, #0]
 800a330:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a342:	b29b      	uxth	r3, r3
 800a344:	3b01      	subs	r3, #1
 800a346:	b29a      	uxth	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a34e:	e025      	b.n	800a39c <HAL_SPI_Transmit+0x378>
 800a350:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a354:	f7f9 f872 	bl	800343c <HAL_GetTick>
 800a358:	4602      	mov	r2, r0
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d803      	bhi.n	800a36c <HAL_SPI_Transmit+0x348>
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36a:	d102      	bne.n	800a372 <HAL_SPI_Transmit+0x34e>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d114      	bne.n	800a39c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 fdf0 	bl	800af58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a37e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e02c      	b.n	800a3f6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f47f af79 	bne.w	800a29c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2108      	movs	r1, #8
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fe6f 	bl	800b098 <SPI_WaitOnFlagUntilTimeout>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d007      	beq.n	800a3d0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3c6:	f043 0220 	orr.w	r2, r3, #32
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 fdc1 	bl	800af58 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e000      	b.n	800a3f6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
  }
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop

0800a400 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b088      	sub	sp, #32
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	603b      	str	r3, [r7, #0]
 800a40c:	4613      	mov	r3, r2
 800a40e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a414:	095b      	lsrs	r3, r3, #5
 800a416:	b29b      	uxth	r3, r3
 800a418:	3301      	adds	r3, #1
 800a41a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3330      	adds	r3, #48	@ 0x30
 800a422:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a424:	f7f9 f80a 	bl	800343c <HAL_GetTick>
 800a428:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b01      	cmp	r3, #1
 800a434:	d001      	beq.n	800a43a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a436:	2302      	movs	r3, #2
 800a438:	e250      	b.n	800a8dc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <HAL_SPI_Receive+0x46>
 800a440:	88fb      	ldrh	r3, [r7, #6]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e248      	b.n	800a8dc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a450:	2b01      	cmp	r3, #1
 800a452:	d101      	bne.n	800a458 <HAL_SPI_Receive+0x58>
 800a454:	2302      	movs	r3, #2
 800a456:	e241      	b.n	800a8dc <HAL_SPI_Receive+0x4dc>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2204      	movs	r2, #4
 800a464:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	88fa      	ldrh	r2, [r7, #6]
 800a47a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	88fa      	ldrh	r2, [r7, #6]
 800a482:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a4b0:	d108      	bne.n	800a4c4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	e009      	b.n	800a4d8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a4d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	4b95      	ldr	r3, [pc, #596]	@ (800a734 <HAL_SPI_Receive+0x334>)
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	88f9      	ldrh	r1, [r7, #6]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	6812      	ldr	r2, [r2, #0]
 800a4e8:	430b      	orrs	r3, r1
 800a4ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f042 0201 	orr.w	r2, r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a504:	d107      	bne.n	800a516 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a514:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	2b0f      	cmp	r3, #15
 800a51c:	d96c      	bls.n	800a5f8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a51e:	e064      	b.n	800a5ea <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	2b01      	cmp	r3, #1
 800a534:	d114      	bne.n	800a560 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a53e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a540:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a546:	1d1a      	adds	r2, r3, #4
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a552:	b29b      	uxth	r3, r3
 800a554:	3b01      	subs	r3, #1
 800a556:	b29a      	uxth	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a55e:	e044      	b.n	800a5ea <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a566:	b29b      	uxth	r3, r3
 800a568:	8bfa      	ldrh	r2, [r7, #30]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d919      	bls.n	800a5a2 <HAL_SPI_Receive+0x1a2>
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d014      	beq.n	800a5a2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a580:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a582:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a588:	1d1a      	adds	r2, r3, #4
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a594:	b29b      	uxth	r3, r3
 800a596:	3b01      	subs	r3, #1
 800a598:	b29a      	uxth	r2, r3
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5a0:	e023      	b.n	800a5ea <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5a2:	f7f8 ff4b 	bl	800343c <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d803      	bhi.n	800a5ba <HAL_SPI_Receive+0x1ba>
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d102      	bne.n	800a5c0 <HAL_SPI_Receive+0x1c0>
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d114      	bne.n	800a5ea <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 fcc9 	bl	800af58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e178      	b.n	800a8dc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d194      	bne.n	800a520 <HAL_SPI_Receive+0x120>
 800a5f6:	e15e      	b.n	800a8b6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	2b07      	cmp	r3, #7
 800a5fe:	f240 8153 	bls.w	800a8a8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a602:	e08f      	b.n	800a724 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b01      	cmp	r3, #1
 800a618:	d114      	bne.n	800a644 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	8812      	ldrh	r2, [r2, #0]
 800a622:	b292      	uxth	r2, r2
 800a624:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a62a:	1c9a      	adds	r2, r3, #2
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a636:	b29b      	uxth	r3, r3
 800a638:	3b01      	subs	r3, #1
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a642:	e06f      	b.n	800a724 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	8bfa      	ldrh	r2, [r7, #30]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d924      	bls.n	800a69c <HAL_SPI_Receive+0x29c>
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d01f      	beq.n	800a69c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	8812      	ldrh	r2, [r2, #0]
 800a664:	b292      	uxth	r2, r2
 800a666:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a66c:	1c9a      	adds	r2, r3, #2
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	8812      	ldrh	r2, [r2, #0]
 800a67a:	b292      	uxth	r2, r2
 800a67c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a682:	1c9a      	adds	r2, r3, #2
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a68e:	b29b      	uxth	r3, r3
 800a690:	3b02      	subs	r3, #2
 800a692:	b29a      	uxth	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a69a:	e043      	b.n	800a724 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d119      	bne.n	800a6dc <HAL_SPI_Receive+0x2dc>
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d014      	beq.n	800a6dc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	8812      	ldrh	r2, [r2, #0]
 800a6ba:	b292      	uxth	r2, r2
 800a6bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6c2:	1c9a      	adds	r2, r3, #2
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a6da:	e023      	b.n	800a724 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6dc:	f7f8 feae 	bl	800343c <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d803      	bhi.n	800a6f4 <HAL_SPI_Receive+0x2f4>
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f2:	d102      	bne.n	800a6fa <HAL_SPI_Receive+0x2fa>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d114      	bne.n	800a724 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 fc2c 	bl	800af58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a706:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e0db      	b.n	800a8dc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f47f af69 	bne.w	800a604 <HAL_SPI_Receive+0x204>
 800a732:	e0c0      	b.n	800a8b6 <HAL_SPI_Receive+0x4b6>
 800a734:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d117      	bne.n	800a77e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a75a:	7812      	ldrb	r2, [r2, #0]
 800a75c:	b2d2      	uxtb	r2, r2
 800a75e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a770:	b29b      	uxth	r3, r3
 800a772:	3b01      	subs	r3, #1
 800a774:	b29a      	uxth	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a77c:	e094      	b.n	800a8a8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a784:	b29b      	uxth	r3, r3
 800a786:	8bfa      	ldrh	r2, [r7, #30]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d946      	bls.n	800a81a <HAL_SPI_Receive+0x41a>
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d041      	beq.n	800a81a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7a2:	7812      	ldrb	r2, [r2, #0]
 800a7a4:	b2d2      	uxtb	r2, r2
 800a7a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7be:	7812      	ldrb	r2, [r2, #0]
 800a7c0:	b2d2      	uxtb	r2, r2
 800a7c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7c8:	1c5a      	adds	r2, r3, #1
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7da:	7812      	ldrb	r2, [r2, #0]
 800a7dc:	b2d2      	uxtb	r2, r2
 800a7de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7f6:	7812      	ldrb	r2, [r2, #0]
 800a7f8:	b2d2      	uxtb	r2, r2
 800a7fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	3b04      	subs	r3, #4
 800a810:	b29a      	uxth	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a818:	e046      	b.n	800a8a8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a820:	b29b      	uxth	r3, r3
 800a822:	2b03      	cmp	r3, #3
 800a824:	d81c      	bhi.n	800a860 <HAL_SPI_Receive+0x460>
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d017      	beq.n	800a860 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a83c:	7812      	ldrb	r2, [r2, #0]
 800a83e:	b2d2      	uxtb	r2, r2
 800a840:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a846:	1c5a      	adds	r2, r3, #1
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a852:	b29b      	uxth	r3, r3
 800a854:	3b01      	subs	r3, #1
 800a856:	b29a      	uxth	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a85e:	e023      	b.n	800a8a8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a860:	f7f8 fdec 	bl	800343c <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d803      	bhi.n	800a878 <HAL_SPI_Receive+0x478>
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a876:	d102      	bne.n	800a87e <HAL_SPI_Receive+0x47e>
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d114      	bne.n	800a8a8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 fb6a 	bl	800af58 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a88a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e019      	b.n	800a8dc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f47f af41 	bne.w	800a738 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 fb4e 	bl	800af58 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e000      	b.n	800a8dc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a8da:	2300      	movs	r3, #0
  }
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3720      	adds	r7, #32
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08e      	sub	sp, #56	@ 0x38
 800a8e8:	af02      	add	r7, sp, #8
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3320      	adds	r3, #32
 800a8f8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3330      	adds	r3, #48	@ 0x30
 800a900:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a906:	095b      	lsrs	r3, r3, #5
 800a908:	b29b      	uxth	r3, r3
 800a90a:	3301      	adds	r3, #1
 800a90c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a90e:	f7f8 fd95 	bl	800343c <HAL_GetTick>
 800a912:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a914:	887b      	ldrh	r3, [r7, #2]
 800a916:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a918:	887b      	ldrh	r3, [r7, #2]
 800a91a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b01      	cmp	r3, #1
 800a926:	d001      	beq.n	800a92c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800a928:	2302      	movs	r3, #2
 800a92a:	e310      	b.n	800af4e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d005      	beq.n	800a93e <HAL_SPI_TransmitReceive+0x5a>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <HAL_SPI_TransmitReceive+0x5a>
 800a938:	887b      	ldrh	r3, [r7, #2]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e305      	b.n	800af4e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d101      	bne.n	800a950 <HAL_SPI_TransmitReceive+0x6c>
 800a94c:	2302      	movs	r3, #2
 800a94e:	e2fe      	b.n	800af4e <HAL_SPI_TransmitReceive+0x66a>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2205      	movs	r2, #5
 800a95c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	887a      	ldrh	r2, [r7, #2]
 800a972:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	887a      	ldrh	r2, [r7, #2]
 800a97a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	887a      	ldrh	r2, [r7, #2]
 800a988:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	887a      	ldrh	r2, [r7, #2]
 800a990:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a9ae:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a70      	ldr	r2, [pc, #448]	@ (800ab78 <HAL_SPI_TransmitReceive+0x294>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d009      	beq.n	800a9ce <HAL_SPI_TransmitReceive+0xea>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a6f      	ldr	r2, [pc, #444]	@ (800ab7c <HAL_SPI_TransmitReceive+0x298>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d004      	beq.n	800a9ce <HAL_SPI_TransmitReceive+0xea>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a6d      	ldr	r2, [pc, #436]	@ (800ab80 <HAL_SPI_TransmitReceive+0x29c>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d102      	bne.n	800a9d4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a9ce:	2310      	movs	r3, #16
 800a9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9d2:	e001      	b.n	800a9d8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a9d4:	2308      	movs	r3, #8
 800a9d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	4b69      	ldr	r3, [pc, #420]	@ (800ab84 <HAL_SPI_TransmitReceive+0x2a0>)
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	8879      	ldrh	r1, [r7, #2]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	6812      	ldr	r2, [r2, #0]
 800a9e8:	430b      	orrs	r3, r1
 800a9ea:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f042 0201 	orr.w	r2, r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa04:	d107      	bne.n	800aa16 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	2b0f      	cmp	r3, #15
 800aa1c:	f240 80a2 	bls.w	800ab64 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800aa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa22:	089b      	lsrs	r3, r3, #2
 800aa24:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aa26:	e094      	b.n	800ab52 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d120      	bne.n	800aa78 <HAL_SPI_TransmitReceive+0x194>
 800aa36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01d      	beq.n	800aa78 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800aa3c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aa3e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800aa40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa42:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d217      	bcs.n	800aa78 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa58:	1d1a      	adds	r2, r3, #4
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	3b01      	subs	r3, #1
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa76:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800aa80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d065      	beq.n	800ab52 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	f003 0301 	and.w	r3, r3, #1
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d118      	bne.n	800aac6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa9e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaa4:	1d1a      	adds	r2, r3, #4
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aac2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aac4:	e045      	b.n	800ab52 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800aac6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aac8:	8bfb      	ldrh	r3, [r7, #30]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d21d      	bcs.n	800ab0a <HAL_SPI_TransmitReceive+0x226>
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d018      	beq.n	800ab0a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aae0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aae2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aae8:	1d1a      	adds	r2, r3, #4
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab06:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ab08:	e023      	b.n	800ab52 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab0a:	f7f8 fc97 	bl	800343c <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d803      	bhi.n	800ab22 <HAL_SPI_TransmitReceive+0x23e>
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab20:	d102      	bne.n	800ab28 <HAL_SPI_TransmitReceive+0x244>
 800ab22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d114      	bne.n	800ab52 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f000 fa15 	bl	800af58 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e1fd      	b.n	800af4e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f47f af67 	bne.w	800aa28 <HAL_SPI_TransmitReceive+0x144>
 800ab5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f47f af63 	bne.w	800aa28 <HAL_SPI_TransmitReceive+0x144>
 800ab62:	e1ce      	b.n	800af02 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	2b07      	cmp	r3, #7
 800ab6a:	f240 81c2 	bls.w	800aef2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab70:	085b      	lsrs	r3, r3, #1
 800ab72:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab74:	e0c9      	b.n	800ad0a <HAL_SPI_TransmitReceive+0x426>
 800ab76:	bf00      	nop
 800ab78:	40013000 	.word	0x40013000
 800ab7c:	40003800 	.word	0x40003800
 800ab80:	40003c00 	.word	0x40003c00
 800ab84:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	f003 0302 	and.w	r3, r3, #2
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d11f      	bne.n	800abd6 <HAL_SPI_TransmitReceive+0x2f2>
 800ab96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d01c      	beq.n	800abd6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ab9c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ab9e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800aba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d216      	bcs.n	800abd6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abac:	881a      	ldrh	r2, [r3, #0]
 800abae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abb6:	1c9a      	adds	r2, r3, #2
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	3b01      	subs	r3, #1
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800abd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800abde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 8092 	beq.w	800ad0a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d118      	bne.n	800ac26 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abf8:	6a3a      	ldr	r2, [r7, #32]
 800abfa:	8812      	ldrh	r2, [r2, #0]
 800abfc:	b292      	uxth	r2, r2
 800abfe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac04:	1c9a      	adds	r2, r3, #2
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	3b01      	subs	r3, #1
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac22:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac24:	e071      	b.n	800ad0a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ac26:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ac28:	8bfb      	ldrh	r3, [r7, #30]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d228      	bcs.n	800ac80 <HAL_SPI_TransmitReceive+0x39c>
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d023      	beq.n	800ac80 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac3c:	6a3a      	ldr	r2, [r7, #32]
 800ac3e:	8812      	ldrh	r2, [r2, #0]
 800ac40:	b292      	uxth	r2, r2
 800ac42:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac48:	1c9a      	adds	r2, r3, #2
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac52:	6a3a      	ldr	r2, [r7, #32]
 800ac54:	8812      	ldrh	r2, [r2, #0]
 800ac56:	b292      	uxth	r2, r2
 800ac58:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac5e:	1c9a      	adds	r2, r3, #2
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	3b02      	subs	r3, #2
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac7c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac7e:	e044      	b.n	800ad0a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ac80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d11d      	bne.n	800acc2 <HAL_SPI_TransmitReceive+0x3de>
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d018      	beq.n	800acc2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac94:	6a3a      	ldr	r2, [r7, #32]
 800ac96:	8812      	ldrh	r2, [r2, #0]
 800ac98:	b292      	uxth	r2, r2
 800ac9a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aca0:	1c9a      	adds	r2, r3, #2
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acac:	b29b      	uxth	r3, r3
 800acae:	3b01      	subs	r3, #1
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acbe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800acc0:	e023      	b.n	800ad0a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acc2:	f7f8 fbbb 	bl	800343c <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acce:	429a      	cmp	r2, r3
 800acd0:	d803      	bhi.n	800acda <HAL_SPI_TransmitReceive+0x3f6>
 800acd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd8:	d102      	bne.n	800ace0 <HAL_SPI_TransmitReceive+0x3fc>
 800acda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d114      	bne.n	800ad0a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 f939 	bl	800af58 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ad06:	2303      	movs	r3, #3
 800ad08:	e121      	b.n	800af4e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f47f af3b 	bne.w	800ab88 <HAL_SPI_TransmitReceive+0x2a4>
 800ad12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f47f af37 	bne.w	800ab88 <HAL_SPI_TransmitReceive+0x2a4>
 800ad1a:	e0f2      	b.n	800af02 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	695b      	ldr	r3, [r3, #20]
 800ad22:	f003 0302 	and.w	r3, r3, #2
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d121      	bne.n	800ad6e <HAL_SPI_TransmitReceive+0x48a>
 800ad2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d01e      	beq.n	800ad6e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ad30:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad32:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ad34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad36:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d218      	bcs.n	800ad6e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3320      	adds	r3, #32
 800ad46:	7812      	ldrb	r2, [r2, #0]
 800ad48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad6c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ad76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 80ba 	beq.w	800aef2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	695b      	ldr	r3, [r3, #20]
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d11b      	bne.n	800adc4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad98:	7812      	ldrb	r2, [r2, #0]
 800ad9a:	b2d2      	uxtb	r2, r2
 800ad9c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adae:	b29b      	uxth	r3, r3
 800adb0:	3b01      	subs	r3, #1
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adc0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800adc2:	e096      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800adc4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800adc6:	8bfb      	ldrh	r3, [r7, #30]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d24a      	bcs.n	800ae62 <HAL_SPI_TransmitReceive+0x57e>
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d045      	beq.n	800ae62 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ade2:	7812      	ldrb	r2, [r2, #0]
 800ade4:	b2d2      	uxtb	r2, r2
 800ade6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adec:	1c5a      	adds	r2, r3, #1
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adfe:	7812      	ldrb	r2, [r2, #0]
 800ae00:	b2d2      	uxtb	r2, r2
 800ae02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae1a:	7812      	ldrb	r2, [r2, #0]
 800ae1c:	b2d2      	uxtb	r2, r2
 800ae1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae36:	7812      	ldrb	r2, [r2, #0]
 800ae38:	b2d2      	uxtb	r2, r2
 800ae3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	3b04      	subs	r3, #4
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae5e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ae60:	e047      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ae62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d820      	bhi.n	800aeaa <HAL_SPI_TransmitReceive+0x5c6>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d01b      	beq.n	800aeaa <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae7e:	7812      	ldrb	r2, [r2, #0]
 800ae80:	b2d2      	uxtb	r2, r2
 800ae82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae88:	1c5a      	adds	r2, r3, #1
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	3b01      	subs	r3, #1
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aea6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aea8:	e023      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aeaa:	f7f8 fac7 	bl	800343c <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d803      	bhi.n	800aec2 <HAL_SPI_TransmitReceive+0x5de>
 800aeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec0:	d102      	bne.n	800aec8 <HAL_SPI_TransmitReceive+0x5e4>
 800aec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d114      	bne.n	800aef2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 f845 	bl	800af58 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aed4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e02d      	b.n	800af4e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aef2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f47f af11 	bne.w	800ad1c <HAL_SPI_TransmitReceive+0x438>
 800aefa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f47f af0d 	bne.w	800ad1c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af08:	2200      	movs	r2, #0
 800af0a:	2108      	movs	r1, #8
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 f8c3 	bl	800b098 <SPI_WaitOnFlagUntilTimeout>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d007      	beq.n	800af28 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af1e:	f043 0220 	orr.w	r2, r3, #32
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 f815 	bl	800af58 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e000      	b.n	800af4e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800af4c:	2300      	movs	r3, #0
  }
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3730      	adds	r7, #48	@ 0x30
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop

0800af58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	699a      	ldr	r2, [r3, #24]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f042 0208 	orr.w	r2, r2, #8
 800af76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	699a      	ldr	r2, [r3, #24]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f042 0210 	orr.w	r2, r2, #16
 800af86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f022 0201 	bic.w	r2, r2, #1
 800af96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6919      	ldr	r1, [r3, #16]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	4b3c      	ldr	r3, [pc, #240]	@ (800b094 <SPI_CloseTransfer+0x13c>)
 800afa4:	400b      	ands	r3, r1
 800afa6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689a      	ldr	r2, [r3, #8]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800afb6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	d014      	beq.n	800afee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f003 0320 	and.w	r3, r3, #32
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00f      	beq.n	800afee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	699a      	ldr	r2, [r3, #24]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f042 0220 	orr.w	r2, r2, #32
 800afec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	d014      	beq.n	800b024 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00f      	beq.n	800b024 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b00a:	f043 0204 	orr.w	r2, r3, #4
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	699a      	ldr	r2, [r3, #24]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b022:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00f      	beq.n	800b04e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b034:	f043 0201 	orr.w	r2, r3, #1
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	699a      	ldr	r2, [r3, #24]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b04c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00f      	beq.n	800b078 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b05e:	f043 0208 	orr.w	r2, r3, #8
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b076:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b088:	bf00      	nop
 800b08a:	3714      	adds	r7, #20
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr
 800b094:	fffffc90 	.word	0xfffffc90

0800b098 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0a8:	e010      	b.n	800b0cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0aa:	f7f8 f9c7 	bl	800343c <HAL_GetTick>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d803      	bhi.n	800b0c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c0:	d102      	bne.n	800b0c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e00f      	b.n	800b0ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	695a      	ldr	r2, [r3, #20]
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	bf0c      	ite	eq
 800b0dc:	2301      	moveq	r3, #1
 800b0de:	2300      	movne	r3, #0
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	79fb      	ldrb	r3, [r7, #7]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d0df      	beq.n	800b0aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b100:	095b      	lsrs	r3, r3, #5
 800b102:	3301      	adds	r3, #1
 800b104:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	3301      	adds	r3, #1
 800b10c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	3307      	adds	r3, #7
 800b112:	08db      	lsrs	r3, r3, #3
 800b114:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b082      	sub	sp, #8
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e049      	b.n	800b1d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	d106      	bne.n	800b156 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7f7 fdaf 	bl	8002cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2202      	movs	r2, #2
 800b15a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3304      	adds	r3, #4
 800b166:	4619      	mov	r1, r3
 800b168:	4610      	mov	r0, r2
 800b16a:	f000 fc57 	bl	800ba1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2201      	movs	r2, #1
 800b18a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d001      	beq.n	800b1f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e054      	b.n	800b29a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68da      	ldr	r2, [r3, #12]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f042 0201 	orr.w	r2, r2, #1
 800b206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a26      	ldr	r2, [pc, #152]	@ (800b2a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d022      	beq.n	800b258 <HAL_TIM_Base_Start_IT+0x80>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b21a:	d01d      	beq.n	800b258 <HAL_TIM_Base_Start_IT+0x80>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a22      	ldr	r2, [pc, #136]	@ (800b2ac <HAL_TIM_Base_Start_IT+0xd4>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d018      	beq.n	800b258 <HAL_TIM_Base_Start_IT+0x80>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a21      	ldr	r2, [pc, #132]	@ (800b2b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d013      	beq.n	800b258 <HAL_TIM_Base_Start_IT+0x80>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a1f      	ldr	r2, [pc, #124]	@ (800b2b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d00e      	beq.n	800b258 <HAL_TIM_Base_Start_IT+0x80>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a1e      	ldr	r2, [pc, #120]	@ (800b2b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d009      	beq.n	800b258 <HAL_TIM_Base_Start_IT+0x80>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a1c      	ldr	r2, [pc, #112]	@ (800b2bc <HAL_TIM_Base_Start_IT+0xe4>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d004      	beq.n	800b258 <HAL_TIM_Base_Start_IT+0x80>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a1b      	ldr	r2, [pc, #108]	@ (800b2c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d115      	bne.n	800b284 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689a      	ldr	r2, [r3, #8]
 800b25e:	4b19      	ldr	r3, [pc, #100]	@ (800b2c4 <HAL_TIM_Base_Start_IT+0xec>)
 800b260:	4013      	ands	r3, r2
 800b262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b06      	cmp	r3, #6
 800b268:	d015      	beq.n	800b296 <HAL_TIM_Base_Start_IT+0xbe>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b270:	d011      	beq.n	800b296 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f042 0201 	orr.w	r2, r2, #1
 800b280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b282:	e008      	b.n	800b296 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f042 0201 	orr.w	r2, r2, #1
 800b292:	601a      	str	r2, [r3, #0]
 800b294:	e000      	b.n	800b298 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	40010000 	.word	0x40010000
 800b2ac:	40000400 	.word	0x40000400
 800b2b0:	40000800 	.word	0x40000800
 800b2b4:	40000c00 	.word	0x40000c00
 800b2b8:	40010400 	.word	0x40010400
 800b2bc:	40001800 	.word	0x40001800
 800b2c0:	40014000 	.word	0x40014000
 800b2c4:	00010007 	.word	0x00010007

0800b2c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e049      	b.n	800b36e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d106      	bne.n	800b2f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7f7 fc92 	bl	8002c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	3304      	adds	r3, #4
 800b304:	4619      	mov	r1, r3
 800b306:	4610      	mov	r0, r2
 800b308:	f000 fb88 	bl	800ba1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
	...

0800b378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d109      	bne.n	800b39c <HAL_TIM_PWM_Start+0x24>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b01      	cmp	r3, #1
 800b392:	bf14      	ite	ne
 800b394:	2301      	movne	r3, #1
 800b396:	2300      	moveq	r3, #0
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	e03c      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d109      	bne.n	800b3b6 <HAL_TIM_PWM_Start+0x3e>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	bf14      	ite	ne
 800b3ae:	2301      	movne	r3, #1
 800b3b0:	2300      	moveq	r3, #0
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	e02f      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b08      	cmp	r3, #8
 800b3ba:	d109      	bne.n	800b3d0 <HAL_TIM_PWM_Start+0x58>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	bf14      	ite	ne
 800b3c8:	2301      	movne	r3, #1
 800b3ca:	2300      	moveq	r3, #0
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	e022      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	2b0c      	cmp	r3, #12
 800b3d4:	d109      	bne.n	800b3ea <HAL_TIM_PWM_Start+0x72>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	bf14      	ite	ne
 800b3e2:	2301      	movne	r3, #1
 800b3e4:	2300      	moveq	r3, #0
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	e015      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b10      	cmp	r3, #16
 800b3ee:	d109      	bne.n	800b404 <HAL_TIM_PWM_Start+0x8c>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	bf14      	ite	ne
 800b3fc:	2301      	movne	r3, #1
 800b3fe:	2300      	moveq	r3, #0
 800b400:	b2db      	uxtb	r3, r3
 800b402:	e008      	b.n	800b416 <HAL_TIM_PWM_Start+0x9e>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	bf14      	ite	ne
 800b410:	2301      	movne	r3, #1
 800b412:	2300      	moveq	r3, #0
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e0a1      	b.n	800b562 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d104      	bne.n	800b42e <HAL_TIM_PWM_Start+0xb6>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b42c:	e023      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b04      	cmp	r3, #4
 800b432:	d104      	bne.n	800b43e <HAL_TIM_PWM_Start+0xc6>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2202      	movs	r2, #2
 800b438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b43c:	e01b      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b08      	cmp	r3, #8
 800b442:	d104      	bne.n	800b44e <HAL_TIM_PWM_Start+0xd6>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2202      	movs	r2, #2
 800b448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b44c:	e013      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b0c      	cmp	r3, #12
 800b452:	d104      	bne.n	800b45e <HAL_TIM_PWM_Start+0xe6>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b45c:	e00b      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b10      	cmp	r3, #16
 800b462:	d104      	bne.n	800b46e <HAL_TIM_PWM_Start+0xf6>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b46c:	e003      	b.n	800b476 <HAL_TIM_PWM_Start+0xfe>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2202      	movs	r2, #2
 800b472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2201      	movs	r2, #1
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 fe48 	bl	800c114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a38      	ldr	r2, [pc, #224]	@ (800b56c <HAL_TIM_PWM_Start+0x1f4>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d013      	beq.n	800b4b6 <HAL_TIM_PWM_Start+0x13e>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a37      	ldr	r2, [pc, #220]	@ (800b570 <HAL_TIM_PWM_Start+0x1f8>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d00e      	beq.n	800b4b6 <HAL_TIM_PWM_Start+0x13e>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a35      	ldr	r2, [pc, #212]	@ (800b574 <HAL_TIM_PWM_Start+0x1fc>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d009      	beq.n	800b4b6 <HAL_TIM_PWM_Start+0x13e>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a34      	ldr	r2, [pc, #208]	@ (800b578 <HAL_TIM_PWM_Start+0x200>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d004      	beq.n	800b4b6 <HAL_TIM_PWM_Start+0x13e>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a32      	ldr	r2, [pc, #200]	@ (800b57c <HAL_TIM_PWM_Start+0x204>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d101      	bne.n	800b4ba <HAL_TIM_PWM_Start+0x142>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e000      	b.n	800b4bc <HAL_TIM_PWM_Start+0x144>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d007      	beq.n	800b4d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b4ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a25      	ldr	r2, [pc, #148]	@ (800b56c <HAL_TIM_PWM_Start+0x1f4>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d022      	beq.n	800b520 <HAL_TIM_PWM_Start+0x1a8>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e2:	d01d      	beq.n	800b520 <HAL_TIM_PWM_Start+0x1a8>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a25      	ldr	r2, [pc, #148]	@ (800b580 <HAL_TIM_PWM_Start+0x208>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d018      	beq.n	800b520 <HAL_TIM_PWM_Start+0x1a8>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a24      	ldr	r2, [pc, #144]	@ (800b584 <HAL_TIM_PWM_Start+0x20c>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d013      	beq.n	800b520 <HAL_TIM_PWM_Start+0x1a8>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a22      	ldr	r2, [pc, #136]	@ (800b588 <HAL_TIM_PWM_Start+0x210>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d00e      	beq.n	800b520 <HAL_TIM_PWM_Start+0x1a8>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a1a      	ldr	r2, [pc, #104]	@ (800b570 <HAL_TIM_PWM_Start+0x1f8>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d009      	beq.n	800b520 <HAL_TIM_PWM_Start+0x1a8>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a1e      	ldr	r2, [pc, #120]	@ (800b58c <HAL_TIM_PWM_Start+0x214>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d004      	beq.n	800b520 <HAL_TIM_PWM_Start+0x1a8>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a16      	ldr	r2, [pc, #88]	@ (800b574 <HAL_TIM_PWM_Start+0x1fc>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d115      	bne.n	800b54c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689a      	ldr	r2, [r3, #8]
 800b526:	4b1a      	ldr	r3, [pc, #104]	@ (800b590 <HAL_TIM_PWM_Start+0x218>)
 800b528:	4013      	ands	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b06      	cmp	r3, #6
 800b530:	d015      	beq.n	800b55e <HAL_TIM_PWM_Start+0x1e6>
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b538:	d011      	beq.n	800b55e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f042 0201 	orr.w	r2, r2, #1
 800b548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b54a:	e008      	b.n	800b55e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f042 0201 	orr.w	r2, r2, #1
 800b55a:	601a      	str	r2, [r3, #0]
 800b55c:	e000      	b.n	800b560 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b55e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	40010000 	.word	0x40010000
 800b570:	40010400 	.word	0x40010400
 800b574:	40014000 	.word	0x40014000
 800b578:	40014400 	.word	0x40014400
 800b57c:	40014800 	.word	0x40014800
 800b580:	40000400 	.word	0x40000400
 800b584:	40000800 	.word	0x40000800
 800b588:	40000c00 	.word	0x40000c00
 800b58c:	40001800 	.word	0x40001800
 800b590:	00010007 	.word	0x00010007

0800b594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d020      	beq.n	800b5f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d01b      	beq.n	800b5f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f06f 0202 	mvn.w	r2, #2
 800b5c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 f9fe 	bl	800b9e0 <HAL_TIM_IC_CaptureCallback>
 800b5e4:	e005      	b.n	800b5f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f9f0 	bl	800b9cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fa01 	bl	800b9f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	f003 0304 	and.w	r3, r3, #4
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d020      	beq.n	800b644 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f003 0304 	and.w	r3, r3, #4
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d01b      	beq.n	800b644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f06f 0204 	mvn.w	r2, #4
 800b614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2202      	movs	r2, #2
 800b61a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b626:	2b00      	cmp	r3, #0
 800b628:	d003      	beq.n	800b632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 f9d8 	bl	800b9e0 <HAL_TIM_IC_CaptureCallback>
 800b630:	e005      	b.n	800b63e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f9ca 	bl	800b9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f9db 	bl	800b9f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f003 0308 	and.w	r3, r3, #8
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d020      	beq.n	800b690 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f003 0308 	and.w	r3, r3, #8
 800b654:	2b00      	cmp	r3, #0
 800b656:	d01b      	beq.n	800b690 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f06f 0208 	mvn.w	r2, #8
 800b660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2204      	movs	r2, #4
 800b666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	f003 0303 	and.w	r3, r3, #3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f9b2 	bl	800b9e0 <HAL_TIM_IC_CaptureCallback>
 800b67c:	e005      	b.n	800b68a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f9a4 	bl	800b9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f9b5 	bl	800b9f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	f003 0310 	and.w	r3, r3, #16
 800b696:	2b00      	cmp	r3, #0
 800b698:	d020      	beq.n	800b6dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f003 0310 	and.w	r3, r3, #16
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d01b      	beq.n	800b6dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f06f 0210 	mvn.w	r2, #16
 800b6ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d003      	beq.n	800b6ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 f98c 	bl	800b9e0 <HAL_TIM_IC_CaptureCallback>
 800b6c8:	e005      	b.n	800b6d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f97e 	bl	800b9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f98f 	bl	800b9f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f003 0301 	and.w	r3, r3, #1
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00c      	beq.n	800b700 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f003 0301 	and.w	r3, r3, #1
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d007      	beq.n	800b700 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f06f 0201 	mvn.w	r2, #1
 800b6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7f6 fd88 	bl	8002210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b706:	2b00      	cmp	r3, #0
 800b708:	d104      	bne.n	800b714 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00c      	beq.n	800b72e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d007      	beq.n	800b72e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fdb1 	bl	800c290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00c      	beq.n	800b752 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d007      	beq.n	800b752 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b74a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fda9 	bl	800c2a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00c      	beq.n	800b776 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	d007      	beq.n	800b776 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 f949 	bl	800ba08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f003 0320 	and.w	r3, r3, #32
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00c      	beq.n	800b79a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f003 0320 	and.w	r3, r3, #32
 800b786:	2b00      	cmp	r3, #0
 800b788:	d007      	beq.n	800b79a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f06f 0220 	mvn.w	r2, #32
 800b792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fd71 	bl	800c27c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b79a:	bf00      	nop
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
	...

0800b7a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d101      	bne.n	800b7c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e0ff      	b.n	800b9c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b14      	cmp	r3, #20
 800b7ce:	f200 80f0 	bhi.w	800b9b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b7d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b7d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d8:	0800b82d 	.word	0x0800b82d
 800b7dc:	0800b9b3 	.word	0x0800b9b3
 800b7e0:	0800b9b3 	.word	0x0800b9b3
 800b7e4:	0800b9b3 	.word	0x0800b9b3
 800b7e8:	0800b86d 	.word	0x0800b86d
 800b7ec:	0800b9b3 	.word	0x0800b9b3
 800b7f0:	0800b9b3 	.word	0x0800b9b3
 800b7f4:	0800b9b3 	.word	0x0800b9b3
 800b7f8:	0800b8af 	.word	0x0800b8af
 800b7fc:	0800b9b3 	.word	0x0800b9b3
 800b800:	0800b9b3 	.word	0x0800b9b3
 800b804:	0800b9b3 	.word	0x0800b9b3
 800b808:	0800b8ef 	.word	0x0800b8ef
 800b80c:	0800b9b3 	.word	0x0800b9b3
 800b810:	0800b9b3 	.word	0x0800b9b3
 800b814:	0800b9b3 	.word	0x0800b9b3
 800b818:	0800b931 	.word	0x0800b931
 800b81c:	0800b9b3 	.word	0x0800b9b3
 800b820:	0800b9b3 	.word	0x0800b9b3
 800b824:	0800b9b3 	.word	0x0800b9b3
 800b828:	0800b971 	.word	0x0800b971
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68b9      	ldr	r1, [r7, #8]
 800b832:	4618      	mov	r0, r3
 800b834:	f000 f998 	bl	800bb68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	699a      	ldr	r2, [r3, #24]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f042 0208 	orr.w	r2, r2, #8
 800b846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	699a      	ldr	r2, [r3, #24]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f022 0204 	bic.w	r2, r2, #4
 800b856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6999      	ldr	r1, [r3, #24]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	691a      	ldr	r2, [r3, #16]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	430a      	orrs	r2, r1
 800b868:	619a      	str	r2, [r3, #24]
      break;
 800b86a:	e0a5      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	4618      	mov	r0, r3
 800b874:	f000 fa08 	bl	800bc88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	699a      	ldr	r2, [r3, #24]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699a      	ldr	r2, [r3, #24]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6999      	ldr	r1, [r3, #24]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	021a      	lsls	r2, r3, #8
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	619a      	str	r2, [r3, #24]
      break;
 800b8ac:	e084      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68b9      	ldr	r1, [r7, #8]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f000 fa71 	bl	800bd9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	69da      	ldr	r2, [r3, #28]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f042 0208 	orr.w	r2, r2, #8
 800b8c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	69da      	ldr	r2, [r3, #28]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 0204 	bic.w	r2, r2, #4
 800b8d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	69d9      	ldr	r1, [r3, #28]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	691a      	ldr	r2, [r3, #16]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	430a      	orrs	r2, r1
 800b8ea:	61da      	str	r2, [r3, #28]
      break;
 800b8ec:	e064      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68b9      	ldr	r1, [r7, #8]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fad9 	bl	800beac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69da      	ldr	r2, [r3, #28]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69da      	ldr	r2, [r3, #28]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69d9      	ldr	r1, [r3, #28]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	021a      	lsls	r2, r3, #8
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	430a      	orrs	r2, r1
 800b92c:	61da      	str	r2, [r3, #28]
      break;
 800b92e:	e043      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	4618      	mov	r0, r3
 800b938:	f000 fb22 	bl	800bf80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f042 0208 	orr.w	r2, r2, #8
 800b94a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 0204 	bic.w	r2, r2, #4
 800b95a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	691a      	ldr	r2, [r3, #16]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b96e:	e023      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68b9      	ldr	r1, [r7, #8]
 800b976:	4618      	mov	r0, r3
 800b978:	f000 fb66 	bl	800c048 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b98a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b99a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	021a      	lsls	r2, r3, #8
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b9b0:	e002      	b.n	800b9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop

0800b9cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a46      	ldr	r2, [pc, #280]	@ (800bb48 <TIM_Base_SetConfig+0x12c>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d013      	beq.n	800ba5c <TIM_Base_SetConfig+0x40>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba3a:	d00f      	beq.n	800ba5c <TIM_Base_SetConfig+0x40>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a43      	ldr	r2, [pc, #268]	@ (800bb4c <TIM_Base_SetConfig+0x130>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d00b      	beq.n	800ba5c <TIM_Base_SetConfig+0x40>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a42      	ldr	r2, [pc, #264]	@ (800bb50 <TIM_Base_SetConfig+0x134>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d007      	beq.n	800ba5c <TIM_Base_SetConfig+0x40>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a41      	ldr	r2, [pc, #260]	@ (800bb54 <TIM_Base_SetConfig+0x138>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d003      	beq.n	800ba5c <TIM_Base_SetConfig+0x40>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4a40      	ldr	r2, [pc, #256]	@ (800bb58 <TIM_Base_SetConfig+0x13c>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d108      	bne.n	800ba6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a35      	ldr	r2, [pc, #212]	@ (800bb48 <TIM_Base_SetConfig+0x12c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d01f      	beq.n	800bab6 <TIM_Base_SetConfig+0x9a>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba7c:	d01b      	beq.n	800bab6 <TIM_Base_SetConfig+0x9a>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a32      	ldr	r2, [pc, #200]	@ (800bb4c <TIM_Base_SetConfig+0x130>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d017      	beq.n	800bab6 <TIM_Base_SetConfig+0x9a>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4a31      	ldr	r2, [pc, #196]	@ (800bb50 <TIM_Base_SetConfig+0x134>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d013      	beq.n	800bab6 <TIM_Base_SetConfig+0x9a>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a30      	ldr	r2, [pc, #192]	@ (800bb54 <TIM_Base_SetConfig+0x138>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d00f      	beq.n	800bab6 <TIM_Base_SetConfig+0x9a>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a2f      	ldr	r2, [pc, #188]	@ (800bb58 <TIM_Base_SetConfig+0x13c>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d00b      	beq.n	800bab6 <TIM_Base_SetConfig+0x9a>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a2e      	ldr	r2, [pc, #184]	@ (800bb5c <TIM_Base_SetConfig+0x140>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d007      	beq.n	800bab6 <TIM_Base_SetConfig+0x9a>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a2d      	ldr	r2, [pc, #180]	@ (800bb60 <TIM_Base_SetConfig+0x144>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d003      	beq.n	800bab6 <TIM_Base_SetConfig+0x9a>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a2c      	ldr	r2, [pc, #176]	@ (800bb64 <TIM_Base_SetConfig+0x148>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d108      	bne.n	800bac8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800babc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	4313      	orrs	r3, r2
 800bac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	695b      	ldr	r3, [r3, #20]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	689a      	ldr	r2, [r3, #8]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a16      	ldr	r2, [pc, #88]	@ (800bb48 <TIM_Base_SetConfig+0x12c>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d00f      	beq.n	800bb14 <TIM_Base_SetConfig+0xf8>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a18      	ldr	r2, [pc, #96]	@ (800bb58 <TIM_Base_SetConfig+0x13c>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d00b      	beq.n	800bb14 <TIM_Base_SetConfig+0xf8>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a17      	ldr	r2, [pc, #92]	@ (800bb5c <TIM_Base_SetConfig+0x140>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d007      	beq.n	800bb14 <TIM_Base_SetConfig+0xf8>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a16      	ldr	r2, [pc, #88]	@ (800bb60 <TIM_Base_SetConfig+0x144>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d003      	beq.n	800bb14 <TIM_Base_SetConfig+0xf8>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a15      	ldr	r2, [pc, #84]	@ (800bb64 <TIM_Base_SetConfig+0x148>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d103      	bne.n	800bb1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	691a      	ldr	r2, [r3, #16]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d105      	bne.n	800bb3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	f023 0201 	bic.w	r2, r3, #1
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	611a      	str	r2, [r3, #16]
  }
}
 800bb3a:	bf00      	nop
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	40010000 	.word	0x40010000
 800bb4c:	40000400 	.word	0x40000400
 800bb50:	40000800 	.word	0x40000800
 800bb54:	40000c00 	.word	0x40000c00
 800bb58:	40010400 	.word	0x40010400
 800bb5c:	40014000 	.word	0x40014000
 800bb60:	40014400 	.word	0x40014400
 800bb64:	40014800 	.word	0x40014800

0800bb68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a1b      	ldr	r3, [r3, #32]
 800bb7c:	f023 0201 	bic.w	r2, r3, #1
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	4b37      	ldr	r3, [pc, #220]	@ (800bc70 <TIM_OC1_SetConfig+0x108>)
 800bb94:	4013      	ands	r3, r2
 800bb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f023 0303 	bic.w	r3, r3, #3
 800bb9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f023 0302 	bic.w	r3, r3, #2
 800bbb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a2d      	ldr	r2, [pc, #180]	@ (800bc74 <TIM_OC1_SetConfig+0x10c>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d00f      	beq.n	800bbe4 <TIM_OC1_SetConfig+0x7c>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a2c      	ldr	r2, [pc, #176]	@ (800bc78 <TIM_OC1_SetConfig+0x110>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d00b      	beq.n	800bbe4 <TIM_OC1_SetConfig+0x7c>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a2b      	ldr	r2, [pc, #172]	@ (800bc7c <TIM_OC1_SetConfig+0x114>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d007      	beq.n	800bbe4 <TIM_OC1_SetConfig+0x7c>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a2a      	ldr	r2, [pc, #168]	@ (800bc80 <TIM_OC1_SetConfig+0x118>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d003      	beq.n	800bbe4 <TIM_OC1_SetConfig+0x7c>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a29      	ldr	r2, [pc, #164]	@ (800bc84 <TIM_OC1_SetConfig+0x11c>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d10c      	bne.n	800bbfe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f023 0308 	bic.w	r3, r3, #8
 800bbea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	697a      	ldr	r2, [r7, #20]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f023 0304 	bic.w	r3, r3, #4
 800bbfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a1c      	ldr	r2, [pc, #112]	@ (800bc74 <TIM_OC1_SetConfig+0x10c>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d00f      	beq.n	800bc26 <TIM_OC1_SetConfig+0xbe>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <TIM_OC1_SetConfig+0x110>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d00b      	beq.n	800bc26 <TIM_OC1_SetConfig+0xbe>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a1a      	ldr	r2, [pc, #104]	@ (800bc7c <TIM_OC1_SetConfig+0x114>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d007      	beq.n	800bc26 <TIM_OC1_SetConfig+0xbe>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a19      	ldr	r2, [pc, #100]	@ (800bc80 <TIM_OC1_SetConfig+0x118>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d003      	beq.n	800bc26 <TIM_OC1_SetConfig+0xbe>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a18      	ldr	r2, [pc, #96]	@ (800bc84 <TIM_OC1_SetConfig+0x11c>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d111      	bne.n	800bc4a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	621a      	str	r2, [r3, #32]
}
 800bc64:	bf00      	nop
 800bc66:	371c      	adds	r7, #28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	fffeff8f 	.word	0xfffeff8f
 800bc74:	40010000 	.word	0x40010000
 800bc78:	40010400 	.word	0x40010400
 800bc7c:	40014000 	.word	0x40014000
 800bc80:	40014400 	.word	0x40014400
 800bc84:	40014800 	.word	0x40014800

0800bc88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a1b      	ldr	r3, [r3, #32]
 800bc9c:	f023 0210 	bic.w	r2, r3, #16
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	4b34      	ldr	r3, [pc, #208]	@ (800bd84 <TIM_OC2_SetConfig+0xfc>)
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	021b      	lsls	r3, r3, #8
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f023 0320 	bic.w	r3, r3, #32
 800bcd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a29      	ldr	r2, [pc, #164]	@ (800bd88 <TIM_OC2_SetConfig+0x100>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d003      	beq.n	800bcf0 <TIM_OC2_SetConfig+0x68>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a28      	ldr	r2, [pc, #160]	@ (800bd8c <TIM_OC2_SetConfig+0x104>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d10d      	bne.n	800bd0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	011b      	lsls	r3, r3, #4
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a1e      	ldr	r2, [pc, #120]	@ (800bd88 <TIM_OC2_SetConfig+0x100>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d00f      	beq.n	800bd34 <TIM_OC2_SetConfig+0xac>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a1d      	ldr	r2, [pc, #116]	@ (800bd8c <TIM_OC2_SetConfig+0x104>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d00b      	beq.n	800bd34 <TIM_OC2_SetConfig+0xac>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a1c      	ldr	r2, [pc, #112]	@ (800bd90 <TIM_OC2_SetConfig+0x108>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d007      	beq.n	800bd34 <TIM_OC2_SetConfig+0xac>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a1b      	ldr	r2, [pc, #108]	@ (800bd94 <TIM_OC2_SetConfig+0x10c>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d003      	beq.n	800bd34 <TIM_OC2_SetConfig+0xac>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a1a      	ldr	r2, [pc, #104]	@ (800bd98 <TIM_OC2_SetConfig+0x110>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d113      	bne.n	800bd5c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	695b      	ldr	r3, [r3, #20]
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	621a      	str	r2, [r3, #32]
}
 800bd76:	bf00      	nop
 800bd78:	371c      	adds	r7, #28
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	feff8fff 	.word	0xfeff8fff
 800bd88:	40010000 	.word	0x40010000
 800bd8c:	40010400 	.word	0x40010400
 800bd90:	40014000 	.word	0x40014000
 800bd94:	40014400 	.word	0x40014400
 800bd98:	40014800 	.word	0x40014800

0800bd9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b087      	sub	sp, #28
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a1b      	ldr	r3, [r3, #32]
 800bdb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	69db      	ldr	r3, [r3, #28]
 800bdc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	4b33      	ldr	r3, [pc, #204]	@ (800be94 <TIM_OC3_SetConfig+0xf8>)
 800bdc8:	4013      	ands	r3, r2
 800bdca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f023 0303 	bic.w	r3, r3, #3
 800bdd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68fa      	ldr	r2, [r7, #12]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bde4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	021b      	lsls	r3, r3, #8
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a28      	ldr	r2, [pc, #160]	@ (800be98 <TIM_OC3_SetConfig+0xfc>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d003      	beq.n	800be02 <TIM_OC3_SetConfig+0x66>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a27      	ldr	r2, [pc, #156]	@ (800be9c <TIM_OC3_SetConfig+0x100>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d10d      	bne.n	800be1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	021b      	lsls	r3, r3, #8
 800be10:	697a      	ldr	r2, [r7, #20]
 800be12:	4313      	orrs	r3, r2
 800be14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4a1d      	ldr	r2, [pc, #116]	@ (800be98 <TIM_OC3_SetConfig+0xfc>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d00f      	beq.n	800be46 <TIM_OC3_SetConfig+0xaa>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a1c      	ldr	r2, [pc, #112]	@ (800be9c <TIM_OC3_SetConfig+0x100>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d00b      	beq.n	800be46 <TIM_OC3_SetConfig+0xaa>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4a1b      	ldr	r2, [pc, #108]	@ (800bea0 <TIM_OC3_SetConfig+0x104>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d007      	beq.n	800be46 <TIM_OC3_SetConfig+0xaa>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a1a      	ldr	r2, [pc, #104]	@ (800bea4 <TIM_OC3_SetConfig+0x108>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d003      	beq.n	800be46 <TIM_OC3_SetConfig+0xaa>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a19      	ldr	r2, [pc, #100]	@ (800bea8 <TIM_OC3_SetConfig+0x10c>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d113      	bne.n	800be6e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	011b      	lsls	r3, r3, #4
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	4313      	orrs	r3, r2
 800be60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	011b      	lsls	r3, r3, #4
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	697a      	ldr	r2, [r7, #20]
 800be86:	621a      	str	r2, [r3, #32]
}
 800be88:	bf00      	nop
 800be8a:	371c      	adds	r7, #28
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	fffeff8f 	.word	0xfffeff8f
 800be98:	40010000 	.word	0x40010000
 800be9c:	40010400 	.word	0x40010400
 800bea0:	40014000 	.word	0x40014000
 800bea4:	40014400 	.word	0x40014400
 800bea8:	40014800 	.word	0x40014800

0800beac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	69db      	ldr	r3, [r3, #28]
 800bed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	4b24      	ldr	r3, [pc, #144]	@ (800bf68 <TIM_OC4_SetConfig+0xbc>)
 800bed8:	4013      	ands	r3, r2
 800beda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	021b      	lsls	r3, r3, #8
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	4313      	orrs	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	031b      	lsls	r3, r3, #12
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a19      	ldr	r2, [pc, #100]	@ (800bf6c <TIM_OC4_SetConfig+0xc0>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d00f      	beq.n	800bf2c <TIM_OC4_SetConfig+0x80>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a18      	ldr	r2, [pc, #96]	@ (800bf70 <TIM_OC4_SetConfig+0xc4>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d00b      	beq.n	800bf2c <TIM_OC4_SetConfig+0x80>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a17      	ldr	r2, [pc, #92]	@ (800bf74 <TIM_OC4_SetConfig+0xc8>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d007      	beq.n	800bf2c <TIM_OC4_SetConfig+0x80>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a16      	ldr	r2, [pc, #88]	@ (800bf78 <TIM_OC4_SetConfig+0xcc>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d003      	beq.n	800bf2c <TIM_OC4_SetConfig+0x80>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a15      	ldr	r2, [pc, #84]	@ (800bf7c <TIM_OC4_SetConfig+0xd0>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d109      	bne.n	800bf40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	019b      	lsls	r3, r3, #6
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	685a      	ldr	r2, [r3, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	621a      	str	r2, [r3, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	feff8fff 	.word	0xfeff8fff
 800bf6c:	40010000 	.word	0x40010000
 800bf70:	40010400 	.word	0x40010400
 800bf74:	40014000 	.word	0x40014000
 800bf78:	40014400 	.word	0x40014400
 800bf7c:	40014800 	.word	0x40014800

0800bf80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b087      	sub	sp, #28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	4b21      	ldr	r3, [pc, #132]	@ (800c030 <TIM_OC5_SetConfig+0xb0>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bfc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	041b      	lsls	r3, r3, #16
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a18      	ldr	r2, [pc, #96]	@ (800c034 <TIM_OC5_SetConfig+0xb4>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d00f      	beq.n	800bff6 <TIM_OC5_SetConfig+0x76>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a17      	ldr	r2, [pc, #92]	@ (800c038 <TIM_OC5_SetConfig+0xb8>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d00b      	beq.n	800bff6 <TIM_OC5_SetConfig+0x76>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a16      	ldr	r2, [pc, #88]	@ (800c03c <TIM_OC5_SetConfig+0xbc>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d007      	beq.n	800bff6 <TIM_OC5_SetConfig+0x76>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a15      	ldr	r2, [pc, #84]	@ (800c040 <TIM_OC5_SetConfig+0xc0>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d003      	beq.n	800bff6 <TIM_OC5_SetConfig+0x76>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a14      	ldr	r2, [pc, #80]	@ (800c044 <TIM_OC5_SetConfig+0xc4>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d109      	bne.n	800c00a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bffc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	021b      	lsls	r3, r3, #8
 800c004:	697a      	ldr	r2, [r7, #20]
 800c006:	4313      	orrs	r3, r2
 800c008:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	693a      	ldr	r2, [r7, #16]
 800c022:	621a      	str	r2, [r3, #32]
}
 800c024:	bf00      	nop
 800c026:	371c      	adds	r7, #28
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	fffeff8f 	.word	0xfffeff8f
 800c034:	40010000 	.word	0x40010000
 800c038:	40010400 	.word	0x40010400
 800c03c:	40014000 	.word	0x40014000
 800c040:	40014400 	.word	0x40014400
 800c044:	40014800 	.word	0x40014800

0800c048 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c048:	b480      	push	{r7}
 800c04a:	b087      	sub	sp, #28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a1b      	ldr	r3, [r3, #32]
 800c05c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	4b22      	ldr	r3, [pc, #136]	@ (800c0fc <TIM_OC6_SetConfig+0xb4>)
 800c074:	4013      	ands	r3, r2
 800c076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	021b      	lsls	r3, r3, #8
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c08a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	051b      	lsls	r3, r3, #20
 800c092:	693a      	ldr	r2, [r7, #16]
 800c094:	4313      	orrs	r3, r2
 800c096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a19      	ldr	r2, [pc, #100]	@ (800c100 <TIM_OC6_SetConfig+0xb8>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d00f      	beq.n	800c0c0 <TIM_OC6_SetConfig+0x78>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a18      	ldr	r2, [pc, #96]	@ (800c104 <TIM_OC6_SetConfig+0xbc>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d00b      	beq.n	800c0c0 <TIM_OC6_SetConfig+0x78>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a17      	ldr	r2, [pc, #92]	@ (800c108 <TIM_OC6_SetConfig+0xc0>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d007      	beq.n	800c0c0 <TIM_OC6_SetConfig+0x78>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a16      	ldr	r2, [pc, #88]	@ (800c10c <TIM_OC6_SetConfig+0xc4>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d003      	beq.n	800c0c0 <TIM_OC6_SetConfig+0x78>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a15      	ldr	r2, [pc, #84]	@ (800c110 <TIM_OC6_SetConfig+0xc8>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d109      	bne.n	800c0d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c0c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	029b      	lsls	r3, r3, #10
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	685a      	ldr	r2, [r3, #4]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	621a      	str	r2, [r3, #32]
}
 800c0ee:	bf00      	nop
 800c0f0:	371c      	adds	r7, #28
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	feff8fff 	.word	0xfeff8fff
 800c100:	40010000 	.word	0x40010000
 800c104:	40010400 	.word	0x40010400
 800c108:	40014000 	.word	0x40014000
 800c10c:	40014400 	.word	0x40014400
 800c110:	40014800 	.word	0x40014800

0800c114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	f003 031f 	and.w	r3, r3, #31
 800c126:	2201      	movs	r2, #1
 800c128:	fa02 f303 	lsl.w	r3, r2, r3
 800c12c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6a1a      	ldr	r2, [r3, #32]
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	43db      	mvns	r3, r3
 800c136:	401a      	ands	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6a1a      	ldr	r2, [r3, #32]
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f003 031f 	and.w	r3, r3, #31
 800c146:	6879      	ldr	r1, [r7, #4]
 800c148:	fa01 f303 	lsl.w	r3, r1, r3
 800c14c:	431a      	orrs	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	621a      	str	r2, [r3, #32]
}
 800c152:	bf00      	nop
 800c154:	371c      	adds	r7, #28
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
	...

0800c160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c170:	2b01      	cmp	r3, #1
 800c172:	d101      	bne.n	800c178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c174:	2302      	movs	r3, #2
 800c176:	e06d      	b.n	800c254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a30      	ldr	r2, [pc, #192]	@ (800c260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d004      	beq.n	800c1ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a2f      	ldr	r2, [pc, #188]	@ (800c264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d108      	bne.n	800c1be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c1b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a20      	ldr	r2, [pc, #128]	@ (800c260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d022      	beq.n	800c228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1ea:	d01d      	beq.n	800c228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a1d      	ldr	r2, [pc, #116]	@ (800c268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d018      	beq.n	800c228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a1c      	ldr	r2, [pc, #112]	@ (800c26c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d013      	beq.n	800c228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a1a      	ldr	r2, [pc, #104]	@ (800c270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d00e      	beq.n	800c228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a15      	ldr	r2, [pc, #84]	@ (800c264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d009      	beq.n	800c228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a16      	ldr	r2, [pc, #88]	@ (800c274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d004      	beq.n	800c228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a15      	ldr	r2, [pc, #84]	@ (800c278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d10c      	bne.n	800c242 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c22e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	68ba      	ldr	r2, [r7, #8]
 800c236:	4313      	orrs	r3, r2
 800c238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3714      	adds	r7, #20
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr
 800c260:	40010000 	.word	0x40010000
 800c264:	40010400 	.word	0x40010400
 800c268:	40000400 	.word	0x40000400
 800c26c:	40000800 	.word	0x40000800
 800c270:	40000c00 	.word	0x40000c00
 800c274:	40001800 	.word	0x40001800
 800c278:	40014000 	.word	0x40014000

0800c27c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c298:	bf00      	nop
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d101      	bne.n	800c2ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e042      	b.n	800c350 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d106      	bne.n	800c2e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7f6 febb 	bl	8003058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2224      	movs	r2, #36	@ 0x24
 800c2e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f022 0201 	bic.w	r2, r2, #1
 800c2f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d002      	beq.n	800c308 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f001 fac4 	bl	800d890 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fc55 	bl	800cbb8 <UART_SetConfig>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b01      	cmp	r3, #1
 800c312:	d101      	bne.n	800c318 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	e01b      	b.n	800c350 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	689a      	ldr	r2, [r3, #8]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f042 0201 	orr.w	r2, r2, #1
 800c346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f001 fb43 	bl	800d9d4 <UART_CheckIdleState>
 800c34e:	4603      	mov	r3, r0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b08a      	sub	sp, #40	@ 0x28
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	4613      	mov	r3, r2
 800c364:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	d137      	bne.n	800c3e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <HAL_UART_Receive_DMA+0x24>
 800c376:	88fb      	ldrh	r3, [r7, #6]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	e030      	b.n	800c3e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a18      	ldr	r2, [pc, #96]	@ (800c3ec <HAL_UART_Receive_DMA+0x94>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d01f      	beq.n	800c3d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d018      	beq.n	800c3d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	e853 3f00 	ldrex	r3, [r3]
 800c3aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c3b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3bc:	623b      	str	r3, [r7, #32]
 800c3be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c0:	69f9      	ldr	r1, [r7, #28]
 800c3c2:	6a3a      	ldr	r2, [r7, #32]
 800c3c4:	e841 2300 	strex	r3, r2, [r1]
 800c3c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1e6      	bne.n	800c39e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c3d0:	88fb      	ldrh	r3, [r7, #6]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f001 fc14 	bl	800dc04 <UART_Start_Receive_DMA>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	e000      	b.n	800c3e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c3e0:	2302      	movs	r3, #2
  }
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3728      	adds	r7, #40	@ 0x28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	58000c00 	.word	0x58000c00

0800c3f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b0ba      	sub	sp, #232	@ 0xe8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c416:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c41a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c41e:	4013      	ands	r3, r2
 800c420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d11b      	bne.n	800c464 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c430:	f003 0320 	and.w	r3, r3, #32
 800c434:	2b00      	cmp	r3, #0
 800c436:	d015      	beq.n	800c464 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c43c:	f003 0320 	and.w	r3, r3, #32
 800c440:	2b00      	cmp	r3, #0
 800c442:	d105      	bne.n	800c450 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d009      	beq.n	800c464 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 8377 	beq.w	800cb48 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	4798      	blx	r3
      }
      return;
 800c462:	e371      	b.n	800cb48 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f000 8123 	beq.w	800c6b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c46e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c472:	4b8d      	ldr	r3, [pc, #564]	@ (800c6a8 <HAL_UART_IRQHandler+0x2b8>)
 800c474:	4013      	ands	r3, r2
 800c476:	2b00      	cmp	r3, #0
 800c478:	d106      	bne.n	800c488 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c47a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c47e:	4b8b      	ldr	r3, [pc, #556]	@ (800c6ac <HAL_UART_IRQHandler+0x2bc>)
 800c480:	4013      	ands	r3, r2
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 8116 	beq.w	800c6b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	2b00      	cmp	r3, #0
 800c492:	d011      	beq.n	800c4b8 <HAL_UART_IRQHandler+0xc8>
 800c494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00b      	beq.n	800c4b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4ae:	f043 0201 	orr.w	r2, r3, #1
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d011      	beq.n	800c4e8 <HAL_UART_IRQHandler+0xf8>
 800c4c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4c8:	f003 0301 	and.w	r3, r3, #1
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00b      	beq.n	800c4e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2202      	movs	r2, #2
 800c4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4de:	f043 0204 	orr.w	r2, r3, #4
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4ec:	f003 0304 	and.w	r3, r3, #4
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d011      	beq.n	800c518 <HAL_UART_IRQHandler+0x128>
 800c4f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4f8:	f003 0301 	and.w	r3, r3, #1
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00b      	beq.n	800c518 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2204      	movs	r2, #4
 800c506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c50e:	f043 0202 	orr.w	r2, r3, #2
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c51c:	f003 0308 	and.w	r3, r3, #8
 800c520:	2b00      	cmp	r3, #0
 800c522:	d017      	beq.n	800c554 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c528:	f003 0320 	and.w	r3, r3, #32
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d105      	bne.n	800c53c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c530:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c534:	4b5c      	ldr	r3, [pc, #368]	@ (800c6a8 <HAL_UART_IRQHandler+0x2b8>)
 800c536:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00b      	beq.n	800c554 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2208      	movs	r2, #8
 800c542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c54a:	f043 0208 	orr.w	r2, r3, #8
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d012      	beq.n	800c586 <HAL_UART_IRQHandler+0x196>
 800c560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c564:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00c      	beq.n	800c586 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c57c:	f043 0220 	orr.w	r2, r3, #32
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 82dd 	beq.w	800cb4c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c596:	f003 0320 	and.w	r3, r3, #32
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d013      	beq.n	800c5c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5a2:	f003 0320 	and.w	r3, r3, #32
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d105      	bne.n	800c5b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d007      	beq.n	800c5c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d003      	beq.n	800c5c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5da:	2b40      	cmp	r3, #64	@ 0x40
 800c5dc:	d005      	beq.n	800c5ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c5de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d054      	beq.n	800c694 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f001 fbf2 	bl	800ddd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5fa:	2b40      	cmp	r3, #64	@ 0x40
 800c5fc:	d146      	bne.n	800c68c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3308      	adds	r3, #8
 800c604:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c608:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c60c:	e853 3f00 	ldrex	r3, [r3]
 800c610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c614:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c61c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3308      	adds	r3, #8
 800c626:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c62a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c62e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c632:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c636:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c63a:	e841 2300 	strex	r3, r2, [r1]
 800c63e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1d9      	bne.n	800c5fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c650:	2b00      	cmp	r3, #0
 800c652:	d017      	beq.n	800c684 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c65a:	4a15      	ldr	r2, [pc, #84]	@ (800c6b0 <HAL_UART_IRQHandler+0x2c0>)
 800c65c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c664:	4618      	mov	r0, r3
 800c666:	f7f8 f9b7 	bl	80049d8 <HAL_DMA_Abort_IT>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d019      	beq.n	800c6a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c67e:	4610      	mov	r0, r2
 800c680:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c682:	e00f      	b.n	800c6a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fa81 	bl	800cb8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c68a:	e00b      	b.n	800c6a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fa7d 	bl	800cb8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c692:	e007      	b.n	800c6a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 fa79 	bl	800cb8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c6a2:	e253      	b.n	800cb4c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6a4:	bf00      	nop
    return;
 800c6a6:	e251      	b.n	800cb4c <HAL_UART_IRQHandler+0x75c>
 800c6a8:	10000001 	.word	0x10000001
 800c6ac:	04000120 	.word	0x04000120
 800c6b0:	0800e087 	.word	0x0800e087

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	f040 81e7 	bne.w	800ca8c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6c2:	f003 0310 	and.w	r3, r3, #16
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 81e0 	beq.w	800ca8c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c6cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6d0:	f003 0310 	and.w	r3, r3, #16
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 81d9 	beq.w	800ca8c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2210      	movs	r2, #16
 800c6e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ec:	2b40      	cmp	r3, #64	@ 0x40
 800c6ee:	f040 8151 	bne.w	800c994 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a96      	ldr	r2, [pc, #600]	@ (800c954 <HAL_UART_IRQHandler+0x564>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d068      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a93      	ldr	r2, [pc, #588]	@ (800c958 <HAL_UART_IRQHandler+0x568>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d061      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a91      	ldr	r2, [pc, #580]	@ (800c95c <HAL_UART_IRQHandler+0x56c>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d05a      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a8e      	ldr	r2, [pc, #568]	@ (800c960 <HAL_UART_IRQHandler+0x570>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d053      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a8c      	ldr	r2, [pc, #560]	@ (800c964 <HAL_UART_IRQHandler+0x574>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d04c      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a89      	ldr	r2, [pc, #548]	@ (800c968 <HAL_UART_IRQHandler+0x578>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d045      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a87      	ldr	r2, [pc, #540]	@ (800c96c <HAL_UART_IRQHandler+0x57c>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d03e      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a84      	ldr	r2, [pc, #528]	@ (800c970 <HAL_UART_IRQHandler+0x580>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d037      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a82      	ldr	r2, [pc, #520]	@ (800c974 <HAL_UART_IRQHandler+0x584>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d030      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a7f      	ldr	r2, [pc, #508]	@ (800c978 <HAL_UART_IRQHandler+0x588>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d029      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a7d      	ldr	r2, [pc, #500]	@ (800c97c <HAL_UART_IRQHandler+0x58c>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d022      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a7a      	ldr	r2, [pc, #488]	@ (800c980 <HAL_UART_IRQHandler+0x590>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d01b      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a78      	ldr	r2, [pc, #480]	@ (800c984 <HAL_UART_IRQHandler+0x594>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d014      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a75      	ldr	r2, [pc, #468]	@ (800c988 <HAL_UART_IRQHandler+0x598>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d00d      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a73      	ldr	r2, [pc, #460]	@ (800c98c <HAL_UART_IRQHandler+0x59c>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d006      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x3e2>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a70      	ldr	r2, [pc, #448]	@ (800c990 <HAL_UART_IRQHandler+0x5a0>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d106      	bne.n	800c7e0 <HAL_UART_IRQHandler+0x3f0>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	e005      	b.n	800c7ec <HAL_UART_IRQHandler+0x3fc>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 81ab 	beq.w	800cb50 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c800:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c804:	429a      	cmp	r2, r3
 800c806:	f080 81a3 	bcs.w	800cb50 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c810:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c81a:	69db      	ldr	r3, [r3, #28]
 800c81c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c820:	f000 8087 	beq.w	800c932 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c830:	e853 3f00 	ldrex	r3, [r3]
 800c834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c838:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c83c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	461a      	mov	r2, r3
 800c84a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c84e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c852:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c856:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c85a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c85e:	e841 2300 	strex	r3, r2, [r1]
 800c862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1da      	bne.n	800c824 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3308      	adds	r3, #8
 800c874:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c878:	e853 3f00 	ldrex	r3, [r3]
 800c87c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c87e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c880:	f023 0301 	bic.w	r3, r3, #1
 800c884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	3308      	adds	r3, #8
 800c88e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c892:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c896:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c898:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c89a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c89e:	e841 2300 	strex	r3, r2, [r1]
 800c8a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1e1      	bne.n	800c86e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8b4:	e853 3f00 	ldrex	r3, [r3]
 800c8b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c8ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c8d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c8d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c8dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e3      	bne.n	800c8aa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2220      	movs	r2, #32
 800c8e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8f8:	e853 3f00 	ldrex	r3, [r3]
 800c8fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c8fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c900:	f023 0310 	bic.w	r3, r3, #16
 800c904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	461a      	mov	r2, r3
 800c90e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c912:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c914:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c916:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c918:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c91a:	e841 2300 	strex	r3, r2, [r1]
 800c91e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1e4      	bne.n	800c8f0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7f7 fd35 	bl	800439c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2202      	movs	r2, #2
 800c936:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c944:	b29b      	uxth	r3, r3
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	b29b      	uxth	r3, r3
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f927 	bl	800cba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c952:	e0fd      	b.n	800cb50 <HAL_UART_IRQHandler+0x760>
 800c954:	40020010 	.word	0x40020010
 800c958:	40020028 	.word	0x40020028
 800c95c:	40020040 	.word	0x40020040
 800c960:	40020058 	.word	0x40020058
 800c964:	40020070 	.word	0x40020070
 800c968:	40020088 	.word	0x40020088
 800c96c:	400200a0 	.word	0x400200a0
 800c970:	400200b8 	.word	0x400200b8
 800c974:	40020410 	.word	0x40020410
 800c978:	40020428 	.word	0x40020428
 800c97c:	40020440 	.word	0x40020440
 800c980:	40020458 	.word	0x40020458
 800c984:	40020470 	.word	0x40020470
 800c988:	40020488 	.word	0x40020488
 800c98c:	400204a0 	.word	0x400204a0
 800c990:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f000 80cf 	beq.w	800cb54 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c9b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 80ca 	beq.w	800cb54 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c8:	e853 3f00 	ldrex	r3, [r3]
 800c9cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	461a      	mov	r2, r3
 800c9de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9ea:	e841 2300 	strex	r3, r2, [r1]
 800c9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1e4      	bne.n	800c9c0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3308      	adds	r3, #8
 800c9fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca00:	e853 3f00 	ldrex	r3, [r3]
 800ca04:	623b      	str	r3, [r7, #32]
   return(result);
 800ca06:	6a3a      	ldr	r2, [r7, #32]
 800ca08:	4b55      	ldr	r3, [pc, #340]	@ (800cb60 <HAL_UART_IRQHandler+0x770>)
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3308      	adds	r3, #8
 800ca16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ca1a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca22:	e841 2300 	strex	r3, r2, [r1]
 800ca26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1e3      	bne.n	800c9f6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2220      	movs	r2, #32
 800ca32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	e853 3f00 	ldrex	r3, [r3]
 800ca4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f023 0310 	bic.w	r3, r3, #16
 800ca56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ca64:	61fb      	str	r3, [r7, #28]
 800ca66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca68:	69b9      	ldr	r1, [r7, #24]
 800ca6a:	69fa      	ldr	r2, [r7, #28]
 800ca6c:	e841 2300 	strex	r3, r2, [r1]
 800ca70:	617b      	str	r3, [r7, #20]
   return(result);
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1e4      	bne.n	800ca42 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca82:	4619      	mov	r1, r3
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f88b 	bl	800cba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca8a:	e063      	b.n	800cb54 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00e      	beq.n	800cab6 <HAL_UART_IRQHandler+0x6c6>
 800ca98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d008      	beq.n	800cab6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800caac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f001 fb2a 	bl	800e108 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cab4:	e051      	b.n	800cb5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d014      	beq.n	800caec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d105      	bne.n	800cada <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d008      	beq.n	800caec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d03a      	beq.n	800cb58 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	4798      	blx	r3
    }
    return;
 800caea:	e035      	b.n	800cb58 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800caec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d009      	beq.n	800cb0c <HAL_UART_IRQHandler+0x71c>
 800caf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cafc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f001 fad4 	bl	800e0b2 <UART_EndTransmit_IT>
    return;
 800cb0a:	e026      	b.n	800cb5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d009      	beq.n	800cb2c <HAL_UART_IRQHandler+0x73c>
 800cb18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d003      	beq.n	800cb2c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f001 fb03 	bl	800e130 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb2a:	e016      	b.n	800cb5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d010      	beq.n	800cb5a <HAL_UART_IRQHandler+0x76a>
 800cb38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	da0c      	bge.n	800cb5a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f001 faeb 	bl	800e11c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb46:	e008      	b.n	800cb5a <HAL_UART_IRQHandler+0x76a>
      return;
 800cb48:	bf00      	nop
 800cb4a:	e006      	b.n	800cb5a <HAL_UART_IRQHandler+0x76a>
    return;
 800cb4c:	bf00      	nop
 800cb4e:	e004      	b.n	800cb5a <HAL_UART_IRQHandler+0x76a>
      return;
 800cb50:	bf00      	nop
 800cb52:	e002      	b.n	800cb5a <HAL_UART_IRQHandler+0x76a>
      return;
 800cb54:	bf00      	nop
 800cb56:	e000      	b.n	800cb5a <HAL_UART_IRQHandler+0x76a>
    return;
 800cb58:	bf00      	nop
  }
}
 800cb5a:	37e8      	adds	r7, #232	@ 0xe8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	effffffe 	.word	0xeffffffe

0800cb64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cb6c:	bf00      	nop
 800cb6e:	370c      	adds	r7, #12
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbbc:	b092      	sub	sp, #72	@ 0x48
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	689a      	ldr	r2, [r3, #8]
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	691b      	ldr	r3, [r3, #16]
 800cbd0:	431a      	orrs	r2, r3
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	431a      	orrs	r2, r3
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	69db      	ldr	r3, [r3, #28]
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	4bbe      	ldr	r3, [pc, #760]	@ (800cee0 <UART_SetConfig+0x328>)
 800cbe8:	4013      	ands	r3, r2
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	6812      	ldr	r2, [r2, #0]
 800cbee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cbf0:	430b      	orrs	r3, r1
 800cbf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	68da      	ldr	r2, [r3, #12]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	430a      	orrs	r2, r1
 800cc08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	699b      	ldr	r3, [r3, #24]
 800cc0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4ab3      	ldr	r2, [pc, #716]	@ (800cee4 <UART_SetConfig+0x32c>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d004      	beq.n	800cc24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc20:	4313      	orrs	r3, r2
 800cc22:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	689a      	ldr	r2, [r3, #8]
 800cc2a:	4baf      	ldr	r3, [pc, #700]	@ (800cee8 <UART_SetConfig+0x330>)
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	6812      	ldr	r2, [r2, #0]
 800cc32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc34:	430b      	orrs	r3, r1
 800cc36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc3e:	f023 010f 	bic.w	r1, r3, #15
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4aa6      	ldr	r2, [pc, #664]	@ (800ceec <UART_SetConfig+0x334>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d177      	bne.n	800cd48 <UART_SetConfig+0x190>
 800cc58:	4ba5      	ldr	r3, [pc, #660]	@ (800cef0 <UART_SetConfig+0x338>)
 800cc5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc60:	2b28      	cmp	r3, #40	@ 0x28
 800cc62:	d86d      	bhi.n	800cd40 <UART_SetConfig+0x188>
 800cc64:	a201      	add	r2, pc, #4	@ (adr r2, 800cc6c <UART_SetConfig+0xb4>)
 800cc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6a:	bf00      	nop
 800cc6c:	0800cd11 	.word	0x0800cd11
 800cc70:	0800cd41 	.word	0x0800cd41
 800cc74:	0800cd41 	.word	0x0800cd41
 800cc78:	0800cd41 	.word	0x0800cd41
 800cc7c:	0800cd41 	.word	0x0800cd41
 800cc80:	0800cd41 	.word	0x0800cd41
 800cc84:	0800cd41 	.word	0x0800cd41
 800cc88:	0800cd41 	.word	0x0800cd41
 800cc8c:	0800cd19 	.word	0x0800cd19
 800cc90:	0800cd41 	.word	0x0800cd41
 800cc94:	0800cd41 	.word	0x0800cd41
 800cc98:	0800cd41 	.word	0x0800cd41
 800cc9c:	0800cd41 	.word	0x0800cd41
 800cca0:	0800cd41 	.word	0x0800cd41
 800cca4:	0800cd41 	.word	0x0800cd41
 800cca8:	0800cd41 	.word	0x0800cd41
 800ccac:	0800cd21 	.word	0x0800cd21
 800ccb0:	0800cd41 	.word	0x0800cd41
 800ccb4:	0800cd41 	.word	0x0800cd41
 800ccb8:	0800cd41 	.word	0x0800cd41
 800ccbc:	0800cd41 	.word	0x0800cd41
 800ccc0:	0800cd41 	.word	0x0800cd41
 800ccc4:	0800cd41 	.word	0x0800cd41
 800ccc8:	0800cd41 	.word	0x0800cd41
 800cccc:	0800cd29 	.word	0x0800cd29
 800ccd0:	0800cd41 	.word	0x0800cd41
 800ccd4:	0800cd41 	.word	0x0800cd41
 800ccd8:	0800cd41 	.word	0x0800cd41
 800ccdc:	0800cd41 	.word	0x0800cd41
 800cce0:	0800cd41 	.word	0x0800cd41
 800cce4:	0800cd41 	.word	0x0800cd41
 800cce8:	0800cd41 	.word	0x0800cd41
 800ccec:	0800cd31 	.word	0x0800cd31
 800ccf0:	0800cd41 	.word	0x0800cd41
 800ccf4:	0800cd41 	.word	0x0800cd41
 800ccf8:	0800cd41 	.word	0x0800cd41
 800ccfc:	0800cd41 	.word	0x0800cd41
 800cd00:	0800cd41 	.word	0x0800cd41
 800cd04:	0800cd41 	.word	0x0800cd41
 800cd08:	0800cd41 	.word	0x0800cd41
 800cd0c:	0800cd39 	.word	0x0800cd39
 800cd10:	2301      	movs	r3, #1
 800cd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd16:	e326      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd18:	2304      	movs	r3, #4
 800cd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd1e:	e322      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd20:	2308      	movs	r3, #8
 800cd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd26:	e31e      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd28:	2310      	movs	r3, #16
 800cd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2e:	e31a      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd30:	2320      	movs	r3, #32
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd36:	e316      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd38:	2340      	movs	r3, #64	@ 0x40
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3e:	e312      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd40:	2380      	movs	r3, #128	@ 0x80
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd46:	e30e      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a69      	ldr	r2, [pc, #420]	@ (800cef4 <UART_SetConfig+0x33c>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d130      	bne.n	800cdb4 <UART_SetConfig+0x1fc>
 800cd52:	4b67      	ldr	r3, [pc, #412]	@ (800cef0 <UART_SetConfig+0x338>)
 800cd54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd56:	f003 0307 	and.w	r3, r3, #7
 800cd5a:	2b05      	cmp	r3, #5
 800cd5c:	d826      	bhi.n	800cdac <UART_SetConfig+0x1f4>
 800cd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd64 <UART_SetConfig+0x1ac>)
 800cd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd64:	0800cd7d 	.word	0x0800cd7d
 800cd68:	0800cd85 	.word	0x0800cd85
 800cd6c:	0800cd8d 	.word	0x0800cd8d
 800cd70:	0800cd95 	.word	0x0800cd95
 800cd74:	0800cd9d 	.word	0x0800cd9d
 800cd78:	0800cda5 	.word	0x0800cda5
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd82:	e2f0      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd84:	2304      	movs	r3, #4
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8a:	e2ec      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd8c:	2308      	movs	r3, #8
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd92:	e2e8      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd94:	2310      	movs	r3, #16
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9a:	e2e4      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cd9c:	2320      	movs	r3, #32
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda2:	e2e0      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cda4:	2340      	movs	r3, #64	@ 0x40
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdaa:	e2dc      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cdac:	2380      	movs	r3, #128	@ 0x80
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb2:	e2d8      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a4f      	ldr	r2, [pc, #316]	@ (800cef8 <UART_SetConfig+0x340>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d130      	bne.n	800ce20 <UART_SetConfig+0x268>
 800cdbe:	4b4c      	ldr	r3, [pc, #304]	@ (800cef0 <UART_SetConfig+0x338>)
 800cdc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdc2:	f003 0307 	and.w	r3, r3, #7
 800cdc6:	2b05      	cmp	r3, #5
 800cdc8:	d826      	bhi.n	800ce18 <UART_SetConfig+0x260>
 800cdca:	a201      	add	r2, pc, #4	@ (adr r2, 800cdd0 <UART_SetConfig+0x218>)
 800cdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd0:	0800cde9 	.word	0x0800cde9
 800cdd4:	0800cdf1 	.word	0x0800cdf1
 800cdd8:	0800cdf9 	.word	0x0800cdf9
 800cddc:	0800ce01 	.word	0x0800ce01
 800cde0:	0800ce09 	.word	0x0800ce09
 800cde4:	0800ce11 	.word	0x0800ce11
 800cde8:	2300      	movs	r3, #0
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdee:	e2ba      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cdf0:	2304      	movs	r3, #4
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf6:	e2b6      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cdf8:	2308      	movs	r3, #8
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfe:	e2b2      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce00:	2310      	movs	r3, #16
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce06:	e2ae      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce08:	2320      	movs	r3, #32
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0e:	e2aa      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce10:	2340      	movs	r3, #64	@ 0x40
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce16:	e2a6      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce18:	2380      	movs	r3, #128	@ 0x80
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce1e:	e2a2      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a35      	ldr	r2, [pc, #212]	@ (800cefc <UART_SetConfig+0x344>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d130      	bne.n	800ce8c <UART_SetConfig+0x2d4>
 800ce2a:	4b31      	ldr	r3, [pc, #196]	@ (800cef0 <UART_SetConfig+0x338>)
 800ce2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce2e:	f003 0307 	and.w	r3, r3, #7
 800ce32:	2b05      	cmp	r3, #5
 800ce34:	d826      	bhi.n	800ce84 <UART_SetConfig+0x2cc>
 800ce36:	a201      	add	r2, pc, #4	@ (adr r2, 800ce3c <UART_SetConfig+0x284>)
 800ce38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3c:	0800ce55 	.word	0x0800ce55
 800ce40:	0800ce5d 	.word	0x0800ce5d
 800ce44:	0800ce65 	.word	0x0800ce65
 800ce48:	0800ce6d 	.word	0x0800ce6d
 800ce4c:	0800ce75 	.word	0x0800ce75
 800ce50:	0800ce7d 	.word	0x0800ce7d
 800ce54:	2300      	movs	r3, #0
 800ce56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5a:	e284      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce5c:	2304      	movs	r3, #4
 800ce5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce62:	e280      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce64:	2308      	movs	r3, #8
 800ce66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce6a:	e27c      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce6c:	2310      	movs	r3, #16
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce72:	e278      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce74:	2320      	movs	r3, #32
 800ce76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce7a:	e274      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce7c:	2340      	movs	r3, #64	@ 0x40
 800ce7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce82:	e270      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce84:	2380      	movs	r3, #128	@ 0x80
 800ce86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce8a:	e26c      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a1b      	ldr	r2, [pc, #108]	@ (800cf00 <UART_SetConfig+0x348>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d142      	bne.n	800cf1c <UART_SetConfig+0x364>
 800ce96:	4b16      	ldr	r3, [pc, #88]	@ (800cef0 <UART_SetConfig+0x338>)
 800ce98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce9a:	f003 0307 	and.w	r3, r3, #7
 800ce9e:	2b05      	cmp	r3, #5
 800cea0:	d838      	bhi.n	800cf14 <UART_SetConfig+0x35c>
 800cea2:	a201      	add	r2, pc, #4	@ (adr r2, 800cea8 <UART_SetConfig+0x2f0>)
 800cea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea8:	0800cec1 	.word	0x0800cec1
 800ceac:	0800cec9 	.word	0x0800cec9
 800ceb0:	0800ced1 	.word	0x0800ced1
 800ceb4:	0800ced9 	.word	0x0800ced9
 800ceb8:	0800cf05 	.word	0x0800cf05
 800cebc:	0800cf0d 	.word	0x0800cf0d
 800cec0:	2300      	movs	r3, #0
 800cec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec6:	e24e      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cec8:	2304      	movs	r3, #4
 800ceca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cece:	e24a      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ced0:	2308      	movs	r3, #8
 800ced2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced6:	e246      	b.n	800d366 <UART_SetConfig+0x7ae>
 800ced8:	2310      	movs	r3, #16
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cede:	e242      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cee0:	cfff69f3 	.word	0xcfff69f3
 800cee4:	58000c00 	.word	0x58000c00
 800cee8:	11fff4ff 	.word	0x11fff4ff
 800ceec:	40011000 	.word	0x40011000
 800cef0:	58024400 	.word	0x58024400
 800cef4:	40004400 	.word	0x40004400
 800cef8:	40004800 	.word	0x40004800
 800cefc:	40004c00 	.word	0x40004c00
 800cf00:	40005000 	.word	0x40005000
 800cf04:	2320      	movs	r3, #32
 800cf06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf0a:	e22c      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cf0c:	2340      	movs	r3, #64	@ 0x40
 800cf0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf12:	e228      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cf14:	2380      	movs	r3, #128	@ 0x80
 800cf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1a:	e224      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4ab1      	ldr	r2, [pc, #708]	@ (800d1e8 <UART_SetConfig+0x630>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d176      	bne.n	800d014 <UART_SetConfig+0x45c>
 800cf26:	4bb1      	ldr	r3, [pc, #708]	@ (800d1ec <UART_SetConfig+0x634>)
 800cf28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf2e:	2b28      	cmp	r3, #40	@ 0x28
 800cf30:	d86c      	bhi.n	800d00c <UART_SetConfig+0x454>
 800cf32:	a201      	add	r2, pc, #4	@ (adr r2, 800cf38 <UART_SetConfig+0x380>)
 800cf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf38:	0800cfdd 	.word	0x0800cfdd
 800cf3c:	0800d00d 	.word	0x0800d00d
 800cf40:	0800d00d 	.word	0x0800d00d
 800cf44:	0800d00d 	.word	0x0800d00d
 800cf48:	0800d00d 	.word	0x0800d00d
 800cf4c:	0800d00d 	.word	0x0800d00d
 800cf50:	0800d00d 	.word	0x0800d00d
 800cf54:	0800d00d 	.word	0x0800d00d
 800cf58:	0800cfe5 	.word	0x0800cfe5
 800cf5c:	0800d00d 	.word	0x0800d00d
 800cf60:	0800d00d 	.word	0x0800d00d
 800cf64:	0800d00d 	.word	0x0800d00d
 800cf68:	0800d00d 	.word	0x0800d00d
 800cf6c:	0800d00d 	.word	0x0800d00d
 800cf70:	0800d00d 	.word	0x0800d00d
 800cf74:	0800d00d 	.word	0x0800d00d
 800cf78:	0800cfed 	.word	0x0800cfed
 800cf7c:	0800d00d 	.word	0x0800d00d
 800cf80:	0800d00d 	.word	0x0800d00d
 800cf84:	0800d00d 	.word	0x0800d00d
 800cf88:	0800d00d 	.word	0x0800d00d
 800cf8c:	0800d00d 	.word	0x0800d00d
 800cf90:	0800d00d 	.word	0x0800d00d
 800cf94:	0800d00d 	.word	0x0800d00d
 800cf98:	0800cff5 	.word	0x0800cff5
 800cf9c:	0800d00d 	.word	0x0800d00d
 800cfa0:	0800d00d 	.word	0x0800d00d
 800cfa4:	0800d00d 	.word	0x0800d00d
 800cfa8:	0800d00d 	.word	0x0800d00d
 800cfac:	0800d00d 	.word	0x0800d00d
 800cfb0:	0800d00d 	.word	0x0800d00d
 800cfb4:	0800d00d 	.word	0x0800d00d
 800cfb8:	0800cffd 	.word	0x0800cffd
 800cfbc:	0800d00d 	.word	0x0800d00d
 800cfc0:	0800d00d 	.word	0x0800d00d
 800cfc4:	0800d00d 	.word	0x0800d00d
 800cfc8:	0800d00d 	.word	0x0800d00d
 800cfcc:	0800d00d 	.word	0x0800d00d
 800cfd0:	0800d00d 	.word	0x0800d00d
 800cfd4:	0800d00d 	.word	0x0800d00d
 800cfd8:	0800d005 	.word	0x0800d005
 800cfdc:	2301      	movs	r3, #1
 800cfde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfe2:	e1c0      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cfe4:	2304      	movs	r3, #4
 800cfe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfea:	e1bc      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cfec:	2308      	movs	r3, #8
 800cfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cff2:	e1b8      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cff4:	2310      	movs	r3, #16
 800cff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffa:	e1b4      	b.n	800d366 <UART_SetConfig+0x7ae>
 800cffc:	2320      	movs	r3, #32
 800cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d002:	e1b0      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d004:	2340      	movs	r3, #64	@ 0x40
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00a:	e1ac      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d00c:	2380      	movs	r3, #128	@ 0x80
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d012:	e1a8      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a75      	ldr	r2, [pc, #468]	@ (800d1f0 <UART_SetConfig+0x638>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d130      	bne.n	800d080 <UART_SetConfig+0x4c8>
 800d01e:	4b73      	ldr	r3, [pc, #460]	@ (800d1ec <UART_SetConfig+0x634>)
 800d020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d022:	f003 0307 	and.w	r3, r3, #7
 800d026:	2b05      	cmp	r3, #5
 800d028:	d826      	bhi.n	800d078 <UART_SetConfig+0x4c0>
 800d02a:	a201      	add	r2, pc, #4	@ (adr r2, 800d030 <UART_SetConfig+0x478>)
 800d02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d030:	0800d049 	.word	0x0800d049
 800d034:	0800d051 	.word	0x0800d051
 800d038:	0800d059 	.word	0x0800d059
 800d03c:	0800d061 	.word	0x0800d061
 800d040:	0800d069 	.word	0x0800d069
 800d044:	0800d071 	.word	0x0800d071
 800d048:	2300      	movs	r3, #0
 800d04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d04e:	e18a      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d050:	2304      	movs	r3, #4
 800d052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d056:	e186      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d058:	2308      	movs	r3, #8
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05e:	e182      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d060:	2310      	movs	r3, #16
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d066:	e17e      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d068:	2320      	movs	r3, #32
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e17a      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d070:	2340      	movs	r3, #64	@ 0x40
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e176      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d078:	2380      	movs	r3, #128	@ 0x80
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e172      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a5b      	ldr	r2, [pc, #364]	@ (800d1f4 <UART_SetConfig+0x63c>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d130      	bne.n	800d0ec <UART_SetConfig+0x534>
 800d08a:	4b58      	ldr	r3, [pc, #352]	@ (800d1ec <UART_SetConfig+0x634>)
 800d08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d08e:	f003 0307 	and.w	r3, r3, #7
 800d092:	2b05      	cmp	r3, #5
 800d094:	d826      	bhi.n	800d0e4 <UART_SetConfig+0x52c>
 800d096:	a201      	add	r2, pc, #4	@ (adr r2, 800d09c <UART_SetConfig+0x4e4>)
 800d098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d09c:	0800d0b5 	.word	0x0800d0b5
 800d0a0:	0800d0bd 	.word	0x0800d0bd
 800d0a4:	0800d0c5 	.word	0x0800d0c5
 800d0a8:	0800d0cd 	.word	0x0800d0cd
 800d0ac:	0800d0d5 	.word	0x0800d0d5
 800d0b0:	0800d0dd 	.word	0x0800d0dd
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ba:	e154      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d0bc:	2304      	movs	r3, #4
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c2:	e150      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d0c4:	2308      	movs	r3, #8
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ca:	e14c      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d0cc:	2310      	movs	r3, #16
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0d2:	e148      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d0d4:	2320      	movs	r3, #32
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0da:	e144      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d0dc:	2340      	movs	r3, #64	@ 0x40
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e140      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d0e4:	2380      	movs	r3, #128	@ 0x80
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e13c      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a41      	ldr	r2, [pc, #260]	@ (800d1f8 <UART_SetConfig+0x640>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	f040 8082 	bne.w	800d1fc <UART_SetConfig+0x644>
 800d0f8:	4b3c      	ldr	r3, [pc, #240]	@ (800d1ec <UART_SetConfig+0x634>)
 800d0fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d100:	2b28      	cmp	r3, #40	@ 0x28
 800d102:	d86d      	bhi.n	800d1e0 <UART_SetConfig+0x628>
 800d104:	a201      	add	r2, pc, #4	@ (adr r2, 800d10c <UART_SetConfig+0x554>)
 800d106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10a:	bf00      	nop
 800d10c:	0800d1b1 	.word	0x0800d1b1
 800d110:	0800d1e1 	.word	0x0800d1e1
 800d114:	0800d1e1 	.word	0x0800d1e1
 800d118:	0800d1e1 	.word	0x0800d1e1
 800d11c:	0800d1e1 	.word	0x0800d1e1
 800d120:	0800d1e1 	.word	0x0800d1e1
 800d124:	0800d1e1 	.word	0x0800d1e1
 800d128:	0800d1e1 	.word	0x0800d1e1
 800d12c:	0800d1b9 	.word	0x0800d1b9
 800d130:	0800d1e1 	.word	0x0800d1e1
 800d134:	0800d1e1 	.word	0x0800d1e1
 800d138:	0800d1e1 	.word	0x0800d1e1
 800d13c:	0800d1e1 	.word	0x0800d1e1
 800d140:	0800d1e1 	.word	0x0800d1e1
 800d144:	0800d1e1 	.word	0x0800d1e1
 800d148:	0800d1e1 	.word	0x0800d1e1
 800d14c:	0800d1c1 	.word	0x0800d1c1
 800d150:	0800d1e1 	.word	0x0800d1e1
 800d154:	0800d1e1 	.word	0x0800d1e1
 800d158:	0800d1e1 	.word	0x0800d1e1
 800d15c:	0800d1e1 	.word	0x0800d1e1
 800d160:	0800d1e1 	.word	0x0800d1e1
 800d164:	0800d1e1 	.word	0x0800d1e1
 800d168:	0800d1e1 	.word	0x0800d1e1
 800d16c:	0800d1c9 	.word	0x0800d1c9
 800d170:	0800d1e1 	.word	0x0800d1e1
 800d174:	0800d1e1 	.word	0x0800d1e1
 800d178:	0800d1e1 	.word	0x0800d1e1
 800d17c:	0800d1e1 	.word	0x0800d1e1
 800d180:	0800d1e1 	.word	0x0800d1e1
 800d184:	0800d1e1 	.word	0x0800d1e1
 800d188:	0800d1e1 	.word	0x0800d1e1
 800d18c:	0800d1d1 	.word	0x0800d1d1
 800d190:	0800d1e1 	.word	0x0800d1e1
 800d194:	0800d1e1 	.word	0x0800d1e1
 800d198:	0800d1e1 	.word	0x0800d1e1
 800d19c:	0800d1e1 	.word	0x0800d1e1
 800d1a0:	0800d1e1 	.word	0x0800d1e1
 800d1a4:	0800d1e1 	.word	0x0800d1e1
 800d1a8:	0800d1e1 	.word	0x0800d1e1
 800d1ac:	0800d1d9 	.word	0x0800d1d9
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1b6:	e0d6      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d1b8:	2304      	movs	r3, #4
 800d1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1be:	e0d2      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d1c0:	2308      	movs	r3, #8
 800d1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1c6:	e0ce      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d1c8:	2310      	movs	r3, #16
 800d1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ce:	e0ca      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d1d0:	2320      	movs	r3, #32
 800d1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1d6:	e0c6      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d1d8:	2340      	movs	r3, #64	@ 0x40
 800d1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1de:	e0c2      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d1e0:	2380      	movs	r3, #128	@ 0x80
 800d1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1e6:	e0be      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d1e8:	40011400 	.word	0x40011400
 800d1ec:	58024400 	.word	0x58024400
 800d1f0:	40007800 	.word	0x40007800
 800d1f4:	40007c00 	.word	0x40007c00
 800d1f8:	40011800 	.word	0x40011800
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4aad      	ldr	r2, [pc, #692]	@ (800d4b8 <UART_SetConfig+0x900>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d176      	bne.n	800d2f4 <UART_SetConfig+0x73c>
 800d206:	4bad      	ldr	r3, [pc, #692]	@ (800d4bc <UART_SetConfig+0x904>)
 800d208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d20a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d20e:	2b28      	cmp	r3, #40	@ 0x28
 800d210:	d86c      	bhi.n	800d2ec <UART_SetConfig+0x734>
 800d212:	a201      	add	r2, pc, #4	@ (adr r2, 800d218 <UART_SetConfig+0x660>)
 800d214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d218:	0800d2bd 	.word	0x0800d2bd
 800d21c:	0800d2ed 	.word	0x0800d2ed
 800d220:	0800d2ed 	.word	0x0800d2ed
 800d224:	0800d2ed 	.word	0x0800d2ed
 800d228:	0800d2ed 	.word	0x0800d2ed
 800d22c:	0800d2ed 	.word	0x0800d2ed
 800d230:	0800d2ed 	.word	0x0800d2ed
 800d234:	0800d2ed 	.word	0x0800d2ed
 800d238:	0800d2c5 	.word	0x0800d2c5
 800d23c:	0800d2ed 	.word	0x0800d2ed
 800d240:	0800d2ed 	.word	0x0800d2ed
 800d244:	0800d2ed 	.word	0x0800d2ed
 800d248:	0800d2ed 	.word	0x0800d2ed
 800d24c:	0800d2ed 	.word	0x0800d2ed
 800d250:	0800d2ed 	.word	0x0800d2ed
 800d254:	0800d2ed 	.word	0x0800d2ed
 800d258:	0800d2cd 	.word	0x0800d2cd
 800d25c:	0800d2ed 	.word	0x0800d2ed
 800d260:	0800d2ed 	.word	0x0800d2ed
 800d264:	0800d2ed 	.word	0x0800d2ed
 800d268:	0800d2ed 	.word	0x0800d2ed
 800d26c:	0800d2ed 	.word	0x0800d2ed
 800d270:	0800d2ed 	.word	0x0800d2ed
 800d274:	0800d2ed 	.word	0x0800d2ed
 800d278:	0800d2d5 	.word	0x0800d2d5
 800d27c:	0800d2ed 	.word	0x0800d2ed
 800d280:	0800d2ed 	.word	0x0800d2ed
 800d284:	0800d2ed 	.word	0x0800d2ed
 800d288:	0800d2ed 	.word	0x0800d2ed
 800d28c:	0800d2ed 	.word	0x0800d2ed
 800d290:	0800d2ed 	.word	0x0800d2ed
 800d294:	0800d2ed 	.word	0x0800d2ed
 800d298:	0800d2dd 	.word	0x0800d2dd
 800d29c:	0800d2ed 	.word	0x0800d2ed
 800d2a0:	0800d2ed 	.word	0x0800d2ed
 800d2a4:	0800d2ed 	.word	0x0800d2ed
 800d2a8:	0800d2ed 	.word	0x0800d2ed
 800d2ac:	0800d2ed 	.word	0x0800d2ed
 800d2b0:	0800d2ed 	.word	0x0800d2ed
 800d2b4:	0800d2ed 	.word	0x0800d2ed
 800d2b8:	0800d2e5 	.word	0x0800d2e5
 800d2bc:	2301      	movs	r3, #1
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c2:	e050      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d2c4:	2304      	movs	r3, #4
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ca:	e04c      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d2cc:	2308      	movs	r3, #8
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d2:	e048      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d2d4:	2310      	movs	r3, #16
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2da:	e044      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d2dc:	2320      	movs	r3, #32
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e2:	e040      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d2e4:	2340      	movs	r3, #64	@ 0x40
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ea:	e03c      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d2ec:	2380      	movs	r3, #128	@ 0x80
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2f2:	e038      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a71      	ldr	r2, [pc, #452]	@ (800d4c0 <UART_SetConfig+0x908>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d130      	bne.n	800d360 <UART_SetConfig+0x7a8>
 800d2fe:	4b6f      	ldr	r3, [pc, #444]	@ (800d4bc <UART_SetConfig+0x904>)
 800d300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d302:	f003 0307 	and.w	r3, r3, #7
 800d306:	2b05      	cmp	r3, #5
 800d308:	d826      	bhi.n	800d358 <UART_SetConfig+0x7a0>
 800d30a:	a201      	add	r2, pc, #4	@ (adr r2, 800d310 <UART_SetConfig+0x758>)
 800d30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d310:	0800d329 	.word	0x0800d329
 800d314:	0800d331 	.word	0x0800d331
 800d318:	0800d339 	.word	0x0800d339
 800d31c:	0800d341 	.word	0x0800d341
 800d320:	0800d349 	.word	0x0800d349
 800d324:	0800d351 	.word	0x0800d351
 800d328:	2302      	movs	r3, #2
 800d32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32e:	e01a      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d330:	2304      	movs	r3, #4
 800d332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d336:	e016      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d338:	2308      	movs	r3, #8
 800d33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33e:	e012      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d340:	2310      	movs	r3, #16
 800d342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d346:	e00e      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d348:	2320      	movs	r3, #32
 800d34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34e:	e00a      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d350:	2340      	movs	r3, #64	@ 0x40
 800d352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d356:	e006      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d358:	2380      	movs	r3, #128	@ 0x80
 800d35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35e:	e002      	b.n	800d366 <UART_SetConfig+0x7ae>
 800d360:	2380      	movs	r3, #128	@ 0x80
 800d362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a55      	ldr	r2, [pc, #340]	@ (800d4c0 <UART_SetConfig+0x908>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	f040 80f8 	bne.w	800d562 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d372:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d376:	2b20      	cmp	r3, #32
 800d378:	dc46      	bgt.n	800d408 <UART_SetConfig+0x850>
 800d37a:	2b02      	cmp	r3, #2
 800d37c:	db75      	blt.n	800d46a <UART_SetConfig+0x8b2>
 800d37e:	3b02      	subs	r3, #2
 800d380:	2b1e      	cmp	r3, #30
 800d382:	d872      	bhi.n	800d46a <UART_SetConfig+0x8b2>
 800d384:	a201      	add	r2, pc, #4	@ (adr r2, 800d38c <UART_SetConfig+0x7d4>)
 800d386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38a:	bf00      	nop
 800d38c:	0800d40f 	.word	0x0800d40f
 800d390:	0800d46b 	.word	0x0800d46b
 800d394:	0800d417 	.word	0x0800d417
 800d398:	0800d46b 	.word	0x0800d46b
 800d39c:	0800d46b 	.word	0x0800d46b
 800d3a0:	0800d46b 	.word	0x0800d46b
 800d3a4:	0800d427 	.word	0x0800d427
 800d3a8:	0800d46b 	.word	0x0800d46b
 800d3ac:	0800d46b 	.word	0x0800d46b
 800d3b0:	0800d46b 	.word	0x0800d46b
 800d3b4:	0800d46b 	.word	0x0800d46b
 800d3b8:	0800d46b 	.word	0x0800d46b
 800d3bc:	0800d46b 	.word	0x0800d46b
 800d3c0:	0800d46b 	.word	0x0800d46b
 800d3c4:	0800d437 	.word	0x0800d437
 800d3c8:	0800d46b 	.word	0x0800d46b
 800d3cc:	0800d46b 	.word	0x0800d46b
 800d3d0:	0800d46b 	.word	0x0800d46b
 800d3d4:	0800d46b 	.word	0x0800d46b
 800d3d8:	0800d46b 	.word	0x0800d46b
 800d3dc:	0800d46b 	.word	0x0800d46b
 800d3e0:	0800d46b 	.word	0x0800d46b
 800d3e4:	0800d46b 	.word	0x0800d46b
 800d3e8:	0800d46b 	.word	0x0800d46b
 800d3ec:	0800d46b 	.word	0x0800d46b
 800d3f0:	0800d46b 	.word	0x0800d46b
 800d3f4:	0800d46b 	.word	0x0800d46b
 800d3f8:	0800d46b 	.word	0x0800d46b
 800d3fc:	0800d46b 	.word	0x0800d46b
 800d400:	0800d46b 	.word	0x0800d46b
 800d404:	0800d45d 	.word	0x0800d45d
 800d408:	2b40      	cmp	r3, #64	@ 0x40
 800d40a:	d02a      	beq.n	800d462 <UART_SetConfig+0x8aa>
 800d40c:	e02d      	b.n	800d46a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d40e:	f7fc f8c3 	bl	8009598 <HAL_RCCEx_GetD3PCLK1Freq>
 800d412:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d414:	e02f      	b.n	800d476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fc f8d2 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d424:	e027      	b.n	800d476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d426:	f107 0318 	add.w	r3, r7, #24
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fc fa1e 	bl	800986c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d434:	e01f      	b.n	800d476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d436:	4b21      	ldr	r3, [pc, #132]	@ (800d4bc <UART_SetConfig+0x904>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f003 0320 	and.w	r3, r3, #32
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d009      	beq.n	800d456 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d442:	4b1e      	ldr	r3, [pc, #120]	@ (800d4bc <UART_SetConfig+0x904>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	08db      	lsrs	r3, r3, #3
 800d448:	f003 0303 	and.w	r3, r3, #3
 800d44c:	4a1d      	ldr	r2, [pc, #116]	@ (800d4c4 <UART_SetConfig+0x90c>)
 800d44e:	fa22 f303 	lsr.w	r3, r2, r3
 800d452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d454:	e00f      	b.n	800d476 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d456:	4b1b      	ldr	r3, [pc, #108]	@ (800d4c4 <UART_SetConfig+0x90c>)
 800d458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d45a:	e00c      	b.n	800d476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d45c:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c8 <UART_SetConfig+0x910>)
 800d45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d460:	e009      	b.n	800d476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d468:	e005      	b.n	800d476 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d46a:	2300      	movs	r3, #0
 800d46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d474:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 81ee 	beq.w	800d85a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d482:	4a12      	ldr	r2, [pc, #72]	@ (800d4cc <UART_SetConfig+0x914>)
 800d484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d488:	461a      	mov	r2, r3
 800d48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d48c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d490:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	685a      	ldr	r2, [r3, #4]
 800d496:	4613      	mov	r3, r2
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	4413      	add	r3, r2
 800d49c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d305      	bcc.n	800d4ae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d910      	bls.n	800d4d0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d4b4:	e1d1      	b.n	800d85a <UART_SetConfig+0xca2>
 800d4b6:	bf00      	nop
 800d4b8:	40011c00 	.word	0x40011c00
 800d4bc:	58024400 	.word	0x58024400
 800d4c0:	58000c00 	.word	0x58000c00
 800d4c4:	03d09000 	.word	0x03d09000
 800d4c8:	003d0900 	.word	0x003d0900
 800d4cc:	08012a78 	.word	0x08012a78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	60bb      	str	r3, [r7, #8]
 800d4d6:	60fa      	str	r2, [r7, #12]
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4dc:	4ac0      	ldr	r2, [pc, #768]	@ (800d7e0 <UART_SetConfig+0xc28>)
 800d4de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	603b      	str	r3, [r7, #0]
 800d4e8:	607a      	str	r2, [r7, #4]
 800d4ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d4f2:	f7f2 ff4d 	bl	8000390 <__aeabi_uldivmod>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	f04f 0200 	mov.w	r2, #0
 800d502:	f04f 0300 	mov.w	r3, #0
 800d506:	020b      	lsls	r3, r1, #8
 800d508:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d50c:	0202      	lsls	r2, r0, #8
 800d50e:	6979      	ldr	r1, [r7, #20]
 800d510:	6849      	ldr	r1, [r1, #4]
 800d512:	0849      	lsrs	r1, r1, #1
 800d514:	2000      	movs	r0, #0
 800d516:	460c      	mov	r4, r1
 800d518:	4605      	mov	r5, r0
 800d51a:	eb12 0804 	adds.w	r8, r2, r4
 800d51e:	eb43 0905 	adc.w	r9, r3, r5
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	469a      	mov	sl, r3
 800d52a:	4693      	mov	fp, r2
 800d52c:	4652      	mov	r2, sl
 800d52e:	465b      	mov	r3, fp
 800d530:	4640      	mov	r0, r8
 800d532:	4649      	mov	r1, r9
 800d534:	f7f2 ff2c 	bl	8000390 <__aeabi_uldivmod>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	4613      	mov	r3, r2
 800d53e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d542:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d546:	d308      	bcc.n	800d55a <UART_SetConfig+0x9a2>
 800d548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d54e:	d204      	bcs.n	800d55a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d556:	60da      	str	r2, [r3, #12]
 800d558:	e17f      	b.n	800d85a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d55a:	2301      	movs	r3, #1
 800d55c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d560:	e17b      	b.n	800d85a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	69db      	ldr	r3, [r3, #28]
 800d566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d56a:	f040 80bd 	bne.w	800d6e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d56e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d572:	2b20      	cmp	r3, #32
 800d574:	dc48      	bgt.n	800d608 <UART_SetConfig+0xa50>
 800d576:	2b00      	cmp	r3, #0
 800d578:	db7b      	blt.n	800d672 <UART_SetConfig+0xaba>
 800d57a:	2b20      	cmp	r3, #32
 800d57c:	d879      	bhi.n	800d672 <UART_SetConfig+0xaba>
 800d57e:	a201      	add	r2, pc, #4	@ (adr r2, 800d584 <UART_SetConfig+0x9cc>)
 800d580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d584:	0800d60f 	.word	0x0800d60f
 800d588:	0800d617 	.word	0x0800d617
 800d58c:	0800d673 	.word	0x0800d673
 800d590:	0800d673 	.word	0x0800d673
 800d594:	0800d61f 	.word	0x0800d61f
 800d598:	0800d673 	.word	0x0800d673
 800d59c:	0800d673 	.word	0x0800d673
 800d5a0:	0800d673 	.word	0x0800d673
 800d5a4:	0800d62f 	.word	0x0800d62f
 800d5a8:	0800d673 	.word	0x0800d673
 800d5ac:	0800d673 	.word	0x0800d673
 800d5b0:	0800d673 	.word	0x0800d673
 800d5b4:	0800d673 	.word	0x0800d673
 800d5b8:	0800d673 	.word	0x0800d673
 800d5bc:	0800d673 	.word	0x0800d673
 800d5c0:	0800d673 	.word	0x0800d673
 800d5c4:	0800d63f 	.word	0x0800d63f
 800d5c8:	0800d673 	.word	0x0800d673
 800d5cc:	0800d673 	.word	0x0800d673
 800d5d0:	0800d673 	.word	0x0800d673
 800d5d4:	0800d673 	.word	0x0800d673
 800d5d8:	0800d673 	.word	0x0800d673
 800d5dc:	0800d673 	.word	0x0800d673
 800d5e0:	0800d673 	.word	0x0800d673
 800d5e4:	0800d673 	.word	0x0800d673
 800d5e8:	0800d673 	.word	0x0800d673
 800d5ec:	0800d673 	.word	0x0800d673
 800d5f0:	0800d673 	.word	0x0800d673
 800d5f4:	0800d673 	.word	0x0800d673
 800d5f8:	0800d673 	.word	0x0800d673
 800d5fc:	0800d673 	.word	0x0800d673
 800d600:	0800d673 	.word	0x0800d673
 800d604:	0800d665 	.word	0x0800d665
 800d608:	2b40      	cmp	r3, #64	@ 0x40
 800d60a:	d02e      	beq.n	800d66a <UART_SetConfig+0xab2>
 800d60c:	e031      	b.n	800d672 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d60e:	f7fa fdd9 	bl	80081c4 <HAL_RCC_GetPCLK1Freq>
 800d612:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d614:	e033      	b.n	800d67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d616:	f7fa fdeb 	bl	80081f0 <HAL_RCC_GetPCLK2Freq>
 800d61a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d61c:	e02f      	b.n	800d67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d61e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d622:	4618      	mov	r0, r3
 800d624:	f7fb ffce 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d62c:	e027      	b.n	800d67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d62e:	f107 0318 	add.w	r3, r7, #24
 800d632:	4618      	mov	r0, r3
 800d634:	f7fc f91a 	bl	800986c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d63c:	e01f      	b.n	800d67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d63e:	4b69      	ldr	r3, [pc, #420]	@ (800d7e4 <UART_SetConfig+0xc2c>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0320 	and.w	r3, r3, #32
 800d646:	2b00      	cmp	r3, #0
 800d648:	d009      	beq.n	800d65e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d64a:	4b66      	ldr	r3, [pc, #408]	@ (800d7e4 <UART_SetConfig+0xc2c>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	08db      	lsrs	r3, r3, #3
 800d650:	f003 0303 	and.w	r3, r3, #3
 800d654:	4a64      	ldr	r2, [pc, #400]	@ (800d7e8 <UART_SetConfig+0xc30>)
 800d656:	fa22 f303 	lsr.w	r3, r2, r3
 800d65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d65c:	e00f      	b.n	800d67e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d65e:	4b62      	ldr	r3, [pc, #392]	@ (800d7e8 <UART_SetConfig+0xc30>)
 800d660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d662:	e00c      	b.n	800d67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d664:	4b61      	ldr	r3, [pc, #388]	@ (800d7ec <UART_SetConfig+0xc34>)
 800d666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d668:	e009      	b.n	800d67e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d66a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d670:	e005      	b.n	800d67e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d672:	2300      	movs	r3, #0
 800d674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d67c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d67e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d680:	2b00      	cmp	r3, #0
 800d682:	f000 80ea 	beq.w	800d85a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d68a:	4a55      	ldr	r2, [pc, #340]	@ (800d7e0 <UART_SetConfig+0xc28>)
 800d68c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d690:	461a      	mov	r2, r3
 800d692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d694:	fbb3 f3f2 	udiv	r3, r3, r2
 800d698:	005a      	lsls	r2, r3, #1
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	085b      	lsrs	r3, r3, #1
 800d6a0:	441a      	add	r2, r3
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ae:	2b0f      	cmp	r3, #15
 800d6b0:	d916      	bls.n	800d6e0 <UART_SetConfig+0xb28>
 800d6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6b8:	d212      	bcs.n	800d6e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	f023 030f 	bic.w	r3, r3, #15
 800d6c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c6:	085b      	lsrs	r3, r3, #1
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	f003 0307 	and.w	r3, r3, #7
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d6dc:	60da      	str	r2, [r3, #12]
 800d6de:	e0bc      	b.n	800d85a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d6e6:	e0b8      	b.n	800d85a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6ec:	2b20      	cmp	r3, #32
 800d6ee:	dc4b      	bgt.n	800d788 <UART_SetConfig+0xbd0>
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f2c0 8087 	blt.w	800d804 <UART_SetConfig+0xc4c>
 800d6f6:	2b20      	cmp	r3, #32
 800d6f8:	f200 8084 	bhi.w	800d804 <UART_SetConfig+0xc4c>
 800d6fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d704 <UART_SetConfig+0xb4c>)
 800d6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d702:	bf00      	nop
 800d704:	0800d78f 	.word	0x0800d78f
 800d708:	0800d797 	.word	0x0800d797
 800d70c:	0800d805 	.word	0x0800d805
 800d710:	0800d805 	.word	0x0800d805
 800d714:	0800d79f 	.word	0x0800d79f
 800d718:	0800d805 	.word	0x0800d805
 800d71c:	0800d805 	.word	0x0800d805
 800d720:	0800d805 	.word	0x0800d805
 800d724:	0800d7af 	.word	0x0800d7af
 800d728:	0800d805 	.word	0x0800d805
 800d72c:	0800d805 	.word	0x0800d805
 800d730:	0800d805 	.word	0x0800d805
 800d734:	0800d805 	.word	0x0800d805
 800d738:	0800d805 	.word	0x0800d805
 800d73c:	0800d805 	.word	0x0800d805
 800d740:	0800d805 	.word	0x0800d805
 800d744:	0800d7bf 	.word	0x0800d7bf
 800d748:	0800d805 	.word	0x0800d805
 800d74c:	0800d805 	.word	0x0800d805
 800d750:	0800d805 	.word	0x0800d805
 800d754:	0800d805 	.word	0x0800d805
 800d758:	0800d805 	.word	0x0800d805
 800d75c:	0800d805 	.word	0x0800d805
 800d760:	0800d805 	.word	0x0800d805
 800d764:	0800d805 	.word	0x0800d805
 800d768:	0800d805 	.word	0x0800d805
 800d76c:	0800d805 	.word	0x0800d805
 800d770:	0800d805 	.word	0x0800d805
 800d774:	0800d805 	.word	0x0800d805
 800d778:	0800d805 	.word	0x0800d805
 800d77c:	0800d805 	.word	0x0800d805
 800d780:	0800d805 	.word	0x0800d805
 800d784:	0800d7f7 	.word	0x0800d7f7
 800d788:	2b40      	cmp	r3, #64	@ 0x40
 800d78a:	d037      	beq.n	800d7fc <UART_SetConfig+0xc44>
 800d78c:	e03a      	b.n	800d804 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d78e:	f7fa fd19 	bl	80081c4 <HAL_RCC_GetPCLK1Freq>
 800d792:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d794:	e03c      	b.n	800d810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d796:	f7fa fd2b 	bl	80081f0 <HAL_RCC_GetPCLK2Freq>
 800d79a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d79c:	e038      	b.n	800d810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d79e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fb ff0e 	bl	80095c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7ac:	e030      	b.n	800d810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7ae:	f107 0318 	add.w	r3, r7, #24
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fc f85a 	bl	800986c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7bc:	e028      	b.n	800d810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7be:	4b09      	ldr	r3, [pc, #36]	@ (800d7e4 <UART_SetConfig+0xc2c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f003 0320 	and.w	r3, r3, #32
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d012      	beq.n	800d7f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7ca:	4b06      	ldr	r3, [pc, #24]	@ (800d7e4 <UART_SetConfig+0xc2c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	08db      	lsrs	r3, r3, #3
 800d7d0:	f003 0303 	and.w	r3, r3, #3
 800d7d4:	4a04      	ldr	r2, [pc, #16]	@ (800d7e8 <UART_SetConfig+0xc30>)
 800d7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7dc:	e018      	b.n	800d810 <UART_SetConfig+0xc58>
 800d7de:	bf00      	nop
 800d7e0:	08012a78 	.word	0x08012a78
 800d7e4:	58024400 	.word	0x58024400
 800d7e8:	03d09000 	.word	0x03d09000
 800d7ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d7f0:	4b24      	ldr	r3, [pc, #144]	@ (800d884 <UART_SetConfig+0xccc>)
 800d7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7f4:	e00c      	b.n	800d810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7f6:	4b24      	ldr	r3, [pc, #144]	@ (800d888 <UART_SetConfig+0xcd0>)
 800d7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7fa:	e009      	b.n	800d810 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d802:	e005      	b.n	800d810 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d804:	2300      	movs	r3, #0
 800d806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d80e:	bf00      	nop
    }

    if (pclk != 0U)
 800d810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d812:	2b00      	cmp	r3, #0
 800d814:	d021      	beq.n	800d85a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d81a:	4a1c      	ldr	r2, [pc, #112]	@ (800d88c <UART_SetConfig+0xcd4>)
 800d81c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d820:	461a      	mov	r2, r3
 800d822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d824:	fbb3 f2f2 	udiv	r2, r3, r2
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	085b      	lsrs	r3, r3, #1
 800d82e:	441a      	add	r2, r3
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	fbb2 f3f3 	udiv	r3, r2, r3
 800d838:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83c:	2b0f      	cmp	r3, #15
 800d83e:	d909      	bls.n	800d854 <UART_SetConfig+0xc9c>
 800d840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d846:	d205      	bcs.n	800d854 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	60da      	str	r2, [r3, #12]
 800d852:	e002      	b.n	800d85a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	2201      	movs	r2, #1
 800d85e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	2201      	movs	r2, #1
 800d866:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2200      	movs	r2, #0
 800d86e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2200      	movs	r2, #0
 800d874:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d876:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3748      	adds	r7, #72	@ 0x48
 800d87e:	46bd      	mov	sp, r7
 800d880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d884:	03d09000 	.word	0x03d09000
 800d888:	003d0900 	.word	0x003d0900
 800d88c:	08012a78 	.word	0x08012a78

0800d890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d89c:	f003 0308 	and.w	r3, r3, #8
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00a      	beq.n	800d8ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	430a      	orrs	r2, r1
 800d8b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8be:	f003 0301 	and.w	r3, r3, #1
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00a      	beq.n	800d8dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	430a      	orrs	r2, r1
 800d8da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e0:	f003 0302 	and.w	r3, r3, #2
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00a      	beq.n	800d8fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	430a      	orrs	r2, r1
 800d8fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d902:	f003 0304 	and.w	r3, r3, #4
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00a      	beq.n	800d920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	430a      	orrs	r2, r1
 800d91e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d924:	f003 0310 	and.w	r3, r3, #16
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d00a      	beq.n	800d942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	430a      	orrs	r2, r1
 800d940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d946:	f003 0320 	and.w	r3, r3, #32
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00a      	beq.n	800d964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	430a      	orrs	r2, r1
 800d962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d01a      	beq.n	800d9a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	430a      	orrs	r2, r1
 800d984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d98a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d98e:	d10a      	bne.n	800d9a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00a      	beq.n	800d9c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	430a      	orrs	r2, r1
 800d9c6:	605a      	str	r2, [r3, #4]
  }
}
 800d9c8:	bf00      	nop
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b098      	sub	sp, #96	@ 0x60
 800d9d8:	af02      	add	r7, sp, #8
 800d9da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d9e4:	f7f5 fd2a 	bl	800343c <HAL_GetTick>
 800d9e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f003 0308 	and.w	r3, r3, #8
 800d9f4:	2b08      	cmp	r3, #8
 800d9f6:	d12f      	bne.n	800da58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da00:	2200      	movs	r2, #0
 800da02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f88e 	bl	800db28 <UART_WaitOnFlagUntilTimeout>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d022      	beq.n	800da58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da1a:	e853 3f00 	ldrex	r3, [r3]
 800da1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da26:	653b      	str	r3, [r7, #80]	@ 0x50
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	461a      	mov	r2, r3
 800da2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da30:	647b      	str	r3, [r7, #68]	@ 0x44
 800da32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da38:	e841 2300 	strex	r3, r2, [r1]
 800da3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1e6      	bne.n	800da12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2220      	movs	r2, #32
 800da48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da54:	2303      	movs	r3, #3
 800da56:	e063      	b.n	800db20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f003 0304 	and.w	r3, r3, #4
 800da62:	2b04      	cmp	r3, #4
 800da64:	d149      	bne.n	800dafa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da6e:	2200      	movs	r2, #0
 800da70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 f857 	bl	800db28 <UART_WaitOnFlagUntilTimeout>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d03c      	beq.n	800dafa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da88:	e853 3f00 	ldrex	r3, [r3]
 800da8c:	623b      	str	r3, [r7, #32]
   return(result);
 800da8e:	6a3b      	ldr	r3, [r7, #32]
 800da90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	461a      	mov	r2, r3
 800da9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800daa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800daa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daa6:	e841 2300 	strex	r3, r2, [r1]
 800daaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800daac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1e6      	bne.n	800da80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	3308      	adds	r3, #8
 800dab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	e853 3f00 	ldrex	r3, [r3]
 800dac0:	60fb      	str	r3, [r7, #12]
   return(result);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f023 0301 	bic.w	r3, r3, #1
 800dac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3308      	adds	r3, #8
 800dad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dad2:	61fa      	str	r2, [r7, #28]
 800dad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad6:	69b9      	ldr	r1, [r7, #24]
 800dad8:	69fa      	ldr	r2, [r7, #28]
 800dada:	e841 2300 	strex	r3, r2, [r1]
 800dade:	617b      	str	r3, [r7, #20]
   return(result);
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1e5      	bne.n	800dab2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2220      	movs	r2, #32
 800daea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800daf6:	2303      	movs	r3, #3
 800daf8:	e012      	b.n	800db20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2220      	movs	r2, #32
 800dafe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2220      	movs	r2, #32
 800db06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3758      	adds	r7, #88	@ 0x58
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	603b      	str	r3, [r7, #0]
 800db34:	4613      	mov	r3, r2
 800db36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db38:	e04f      	b.n	800dbda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db40:	d04b      	beq.n	800dbda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db42:	f7f5 fc7b 	bl	800343c <HAL_GetTick>
 800db46:	4602      	mov	r2, r0
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	69ba      	ldr	r2, [r7, #24]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d302      	bcc.n	800db58 <UART_WaitOnFlagUntilTimeout+0x30>
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db58:	2303      	movs	r3, #3
 800db5a:	e04e      	b.n	800dbfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f003 0304 	and.w	r3, r3, #4
 800db66:	2b00      	cmp	r3, #0
 800db68:	d037      	beq.n	800dbda <UART_WaitOnFlagUntilTimeout+0xb2>
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	2b80      	cmp	r3, #128	@ 0x80
 800db6e:	d034      	beq.n	800dbda <UART_WaitOnFlagUntilTimeout+0xb2>
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	2b40      	cmp	r3, #64	@ 0x40
 800db74:	d031      	beq.n	800dbda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	69db      	ldr	r3, [r3, #28]
 800db7c:	f003 0308 	and.w	r3, r3, #8
 800db80:	2b08      	cmp	r3, #8
 800db82:	d110      	bne.n	800dba6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2208      	movs	r2, #8
 800db8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f000 f921 	bl	800ddd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2208      	movs	r2, #8
 800db96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	e029      	b.n	800dbfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	69db      	ldr	r3, [r3, #28]
 800dbac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dbb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbb4:	d111      	bne.n	800dbda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dbc0:	68f8      	ldr	r0, [r7, #12]
 800dbc2:	f000 f907 	bl	800ddd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2220      	movs	r2, #32
 800dbca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dbd6:	2303      	movs	r3, #3
 800dbd8:	e00f      	b.n	800dbfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	69da      	ldr	r2, [r3, #28]
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	bf0c      	ite	eq
 800dbea:	2301      	moveq	r3, #1
 800dbec:	2300      	movne	r3, #0
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	79fb      	ldrb	r3, [r7, #7]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d0a0      	beq.n	800db3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
	...

0800dc04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b096      	sub	sp, #88	@ 0x58
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	88fa      	ldrh	r2, [r7, #6]
 800dc1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2222      	movs	r2, #34	@ 0x22
 800dc2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d02d      	beq.n	800dc96 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc40:	4a40      	ldr	r2, [pc, #256]	@ (800dd44 <UART_Start_Receive_DMA+0x140>)
 800dc42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc4a:	4a3f      	ldr	r2, [pc, #252]	@ (800dd48 <UART_Start_Receive_DMA+0x144>)
 800dc4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc54:	4a3d      	ldr	r2, [pc, #244]	@ (800dd4c <UART_Start_Receive_DMA+0x148>)
 800dc56:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc5e:	2200      	movs	r2, #0
 800dc60:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3324      	adds	r3, #36	@ 0x24
 800dc6e:	4619      	mov	r1, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc74:	461a      	mov	r2, r3
 800dc76:	88fb      	ldrh	r3, [r7, #6]
 800dc78:	f7f6 f926 	bl	8003ec8 <HAL_DMA_Start_IT>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d009      	beq.n	800dc96 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2210      	movs	r2, #16
 800dc86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2220      	movs	r2, #32
 800dc8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e051      	b.n	800dd3a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	691b      	ldr	r3, [r3, #16]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d018      	beq.n	800dcd0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dca6:	e853 3f00 	ldrex	r3, [r3]
 800dcaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcb2:	657b      	str	r3, [r7, #84]	@ 0x54
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	461a      	mov	r2, r3
 800dcba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dcbe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dcc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dcc4:	e841 2300 	strex	r3, r2, [r1]
 800dcc8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dcca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1e6      	bne.n	800dc9e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	3308      	adds	r3, #8
 800dcd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcda:	e853 3f00 	ldrex	r3, [r3]
 800dcde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce2:	f043 0301 	orr.w	r3, r3, #1
 800dce6:	653b      	str	r3, [r7, #80]	@ 0x50
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	3308      	adds	r3, #8
 800dcee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dcf0:	637a      	str	r2, [r7, #52]	@ 0x34
 800dcf2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dcf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcf8:	e841 2300 	strex	r3, r2, [r1]
 800dcfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dcfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1e5      	bne.n	800dcd0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	3308      	adds	r3, #8
 800dd0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	e853 3f00 	ldrex	r3, [r3]
 800dd12:	613b      	str	r3, [r7, #16]
   return(result);
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3308      	adds	r3, #8
 800dd22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dd24:	623a      	str	r2, [r7, #32]
 800dd26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd28:	69f9      	ldr	r1, [r7, #28]
 800dd2a:	6a3a      	ldr	r2, [r7, #32]
 800dd2c:	e841 2300 	strex	r3, r2, [r1]
 800dd30:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d1e5      	bne.n	800dd04 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3758      	adds	r7, #88	@ 0x58
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	0800dea1 	.word	0x0800dea1
 800dd48:	0800dfc9 	.word	0x0800dfc9
 800dd4c:	0800e007 	.word	0x0800e007

0800dd50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b08f      	sub	sp, #60	@ 0x3c
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	e853 3f00 	ldrex	r3, [r3]
 800dd64:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dd6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	461a      	mov	r2, r3
 800dd74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd78:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd7e:	e841 2300 	strex	r3, r2, [r1]
 800dd82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1e6      	bne.n	800dd58 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3308      	adds	r3, #8
 800dd90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	e853 3f00 	ldrex	r3, [r3]
 800dd98:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dda0:	633b      	str	r3, [r7, #48]	@ 0x30
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	3308      	adds	r3, #8
 800dda8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddaa:	61ba      	str	r2, [r7, #24]
 800ddac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddae:	6979      	ldr	r1, [r7, #20]
 800ddb0:	69ba      	ldr	r2, [r7, #24]
 800ddb2:	e841 2300 	strex	r3, r2, [r1]
 800ddb6:	613b      	str	r3, [r7, #16]
   return(result);
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1e5      	bne.n	800dd8a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2220      	movs	r2, #32
 800ddc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ddc6:	bf00      	nop
 800ddc8:	373c      	adds	r7, #60	@ 0x3c
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
	...

0800ddd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b095      	sub	sp, #84	@ 0x54
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dde4:	e853 3f00 	ldrex	r3, [r3]
 800dde8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ddea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ddf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddfa:	643b      	str	r3, [r7, #64]	@ 0x40
 800ddfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de02:	e841 2300 	strex	r3, r2, [r1]
 800de06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1e6      	bne.n	800dddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	3308      	adds	r3, #8
 800de14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de16:	6a3b      	ldr	r3, [r7, #32]
 800de18:	e853 3f00 	ldrex	r3, [r3]
 800de1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800de1e:	69fa      	ldr	r2, [r7, #28]
 800de20:	4b1e      	ldr	r3, [pc, #120]	@ (800de9c <UART_EndRxTransfer+0xc8>)
 800de22:	4013      	ands	r3, r2
 800de24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3308      	adds	r3, #8
 800de2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800de30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de36:	e841 2300 	strex	r3, r2, [r1]
 800de3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800de3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1e5      	bne.n	800de0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de46:	2b01      	cmp	r3, #1
 800de48:	d118      	bne.n	800de7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	e853 3f00 	ldrex	r3, [r3]
 800de56:	60bb      	str	r3, [r7, #8]
   return(result);
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	f023 0310 	bic.w	r3, r3, #16
 800de5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	461a      	mov	r2, r3
 800de66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de68:	61bb      	str	r3, [r7, #24]
 800de6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de6c:	6979      	ldr	r1, [r7, #20]
 800de6e:	69ba      	ldr	r2, [r7, #24]
 800de70:	e841 2300 	strex	r3, r2, [r1]
 800de74:	613b      	str	r3, [r7, #16]
   return(result);
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d1e6      	bne.n	800de4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2220      	movs	r2, #32
 800de80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800de90:	bf00      	nop
 800de92:	3754      	adds	r7, #84	@ 0x54
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr
 800de9c:	effffffe 	.word	0xeffffffe

0800dea0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b09c      	sub	sp, #112	@ 0x70
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800deac:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	69db      	ldr	r3, [r3, #28]
 800deb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800deb6:	d071      	beq.n	800df9c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800deb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800deba:	2200      	movs	r2, #0
 800debc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dec8:	e853 3f00 	ldrex	r3, [r3]
 800decc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ded0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ded4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ded6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dede:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dee0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dee4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dee6:	e841 2300 	strex	r3, r2, [r1]
 800deea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800deec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1e6      	bne.n	800dec0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800def2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3308      	adds	r3, #8
 800def8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800defc:	e853 3f00 	ldrex	r3, [r3]
 800df00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df04:	f023 0301 	bic.w	r3, r3, #1
 800df08:	667b      	str	r3, [r7, #100]	@ 0x64
 800df0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	3308      	adds	r3, #8
 800df10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800df12:	647a      	str	r2, [r7, #68]	@ 0x44
 800df14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df1a:	e841 2300 	strex	r3, r2, [r1]
 800df1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800df20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df22:	2b00      	cmp	r3, #0
 800df24:	d1e5      	bne.n	800def2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	3308      	adds	r3, #8
 800df2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df30:	e853 3f00 	ldrex	r3, [r3]
 800df34:	623b      	str	r3, [r7, #32]
   return(result);
 800df36:	6a3b      	ldr	r3, [r7, #32]
 800df38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df3c:	663b      	str	r3, [r7, #96]	@ 0x60
 800df3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	3308      	adds	r3, #8
 800df44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800df46:	633a      	str	r2, [r7, #48]	@ 0x30
 800df48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df4e:	e841 2300 	strex	r3, r2, [r1]
 800df52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df56:	2b00      	cmp	r3, #0
 800df58:	d1e5      	bne.n	800df26 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df5c:	2220      	movs	r2, #32
 800df5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df66:	2b01      	cmp	r3, #1
 800df68:	d118      	bne.n	800df9c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	e853 3f00 	ldrex	r3, [r3]
 800df76:	60fb      	str	r3, [r7, #12]
   return(result);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f023 0310 	bic.w	r3, r3, #16
 800df7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	461a      	mov	r2, r3
 800df86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df88:	61fb      	str	r3, [r7, #28]
 800df8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8c:	69b9      	ldr	r1, [r7, #24]
 800df8e:	69fa      	ldr	r2, [r7, #28]
 800df90:	e841 2300 	strex	r3, r2, [r1]
 800df94:	617b      	str	r3, [r7, #20]
   return(result);
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1e6      	bne.n	800df6a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df9e:	2200      	movs	r2, #0
 800dfa0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d107      	bne.n	800dfba <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dfac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dfb4:	f7fe fdf4 	bl	800cba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dfb8:	e002      	b.n	800dfc0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dfba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dfbc:	f7f4 f90a 	bl	80021d4 <HAL_UART_RxCpltCallback>
}
 800dfc0:	bf00      	nop
 800dfc2:	3770      	adds	r7, #112	@ 0x70
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfd4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d109      	bne.n	800dff8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dfea:	085b      	lsrs	r3, r3, #1
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	4619      	mov	r1, r3
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f7fe fdd5 	bl	800cba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dff6:	e002      	b.n	800dffe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f7fe fdbd 	bl	800cb78 <HAL_UART_RxHalfCpltCallback>
}
 800dffe:	bf00      	nop
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b086      	sub	sp, #24
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e012:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e01a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e022:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e02e:	2b80      	cmp	r3, #128	@ 0x80
 800e030:	d109      	bne.n	800e046 <UART_DMAError+0x40>
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	2b21      	cmp	r3, #33	@ 0x21
 800e036:	d106      	bne.n	800e046 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e040:	6978      	ldr	r0, [r7, #20]
 800e042:	f7ff fe85 	bl	800dd50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e050:	2b40      	cmp	r3, #64	@ 0x40
 800e052:	d109      	bne.n	800e068 <UART_DMAError+0x62>
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2b22      	cmp	r3, #34	@ 0x22
 800e058:	d106      	bne.n	800e068 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e062:	6978      	ldr	r0, [r7, #20]
 800e064:	f7ff feb6 	bl	800ddd4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e06e:	f043 0210 	orr.w	r2, r3, #16
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e078:	6978      	ldr	r0, [r7, #20]
 800e07a:	f7fe fd87 	bl	800cb8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e07e:	bf00      	nop
 800e080:	3718      	adds	r7, #24
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e086:	b580      	push	{r7, lr}
 800e088:	b084      	sub	sp, #16
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f7fe fd71 	bl	800cb8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0aa:	bf00      	nop
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b088      	sub	sp, #32
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	e853 3f00 	ldrex	r3, [r3]
 800e0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0ce:	61fb      	str	r3, [r7, #28]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	61bb      	str	r3, [r7, #24]
 800e0da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0dc:	6979      	ldr	r1, [r7, #20]
 800e0de:	69ba      	ldr	r2, [r7, #24]
 800e0e0:	e841 2300 	strex	r3, r2, [r1]
 800e0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1e6      	bne.n	800e0ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2220      	movs	r2, #32
 800e0f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f7fe fd32 	bl	800cb64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e100:	bf00      	nop
 800e102:	3720      	adds	r7, #32
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e110:	bf00      	nop
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b083      	sub	sp, #12
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e124:	bf00      	nop
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e138:	bf00      	nop
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e152:	2b01      	cmp	r3, #1
 800e154:	d101      	bne.n	800e15a <HAL_UARTEx_DisableFifoMode+0x16>
 800e156:	2302      	movs	r3, #2
 800e158:	e027      	b.n	800e1aa <HAL_UARTEx_DisableFifoMode+0x66>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2201      	movs	r2, #1
 800e15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2224      	movs	r2, #36	@ 0x24
 800e166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f022 0201 	bic.w	r2, r2, #1
 800e180:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	68fa      	ldr	r2, [r7, #12]
 800e196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2220      	movs	r2, #32
 800e19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e1a8:	2300      	movs	r3, #0
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b084      	sub	sp, #16
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d101      	bne.n	800e1ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e1ca:	2302      	movs	r3, #2
 800e1cc:	e02d      	b.n	800e22a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2224      	movs	r2, #36	@ 0x24
 800e1da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f022 0201 	bic.w	r2, r2, #1
 800e1f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	683a      	ldr	r2, [r7, #0]
 800e206:	430a      	orrs	r2, r1
 800e208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f850 	bl	800e2b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2220      	movs	r2, #32
 800e21c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b084      	sub	sp, #16
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
 800e23a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e242:	2b01      	cmp	r3, #1
 800e244:	d101      	bne.n	800e24a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e246:	2302      	movs	r3, #2
 800e248:	e02d      	b.n	800e2a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2224      	movs	r2, #36	@ 0x24
 800e256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f022 0201 	bic.w	r2, r2, #1
 800e270:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	683a      	ldr	r2, [r7, #0]
 800e282:	430a      	orrs	r2, r1
 800e284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 f812 	bl	800e2b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2220      	movs	r2, #32
 800e298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d108      	bne.n	800e2d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e2d0:	e031      	b.n	800e336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e2d2:	2310      	movs	r3, #16
 800e2d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e2d6:	2310      	movs	r3, #16
 800e2d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	0e5b      	lsrs	r3, r3, #25
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	f003 0307 	and.w	r3, r3, #7
 800e2e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	0f5b      	lsrs	r3, r3, #29
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	f003 0307 	and.w	r3, r3, #7
 800e2f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2fa:	7bbb      	ldrb	r3, [r7, #14]
 800e2fc:	7b3a      	ldrb	r2, [r7, #12]
 800e2fe:	4911      	ldr	r1, [pc, #68]	@ (800e344 <UARTEx_SetNbDataToProcess+0x94>)
 800e300:	5c8a      	ldrb	r2, [r1, r2]
 800e302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e306:	7b3a      	ldrb	r2, [r7, #12]
 800e308:	490f      	ldr	r1, [pc, #60]	@ (800e348 <UARTEx_SetNbDataToProcess+0x98>)
 800e30a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e30c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e310:	b29a      	uxth	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e318:	7bfb      	ldrb	r3, [r7, #15]
 800e31a:	7b7a      	ldrb	r2, [r7, #13]
 800e31c:	4909      	ldr	r1, [pc, #36]	@ (800e344 <UARTEx_SetNbDataToProcess+0x94>)
 800e31e:	5c8a      	ldrb	r2, [r1, r2]
 800e320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e324:	7b7a      	ldrb	r2, [r7, #13]
 800e326:	4908      	ldr	r1, [pc, #32]	@ (800e348 <UARTEx_SetNbDataToProcess+0x98>)
 800e328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e32a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e32e:	b29a      	uxth	r2, r3
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e336:	bf00      	nop
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	08012a90 	.word	0x08012a90
 800e348:	08012a98 	.word	0x08012a98

0800e34c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e350:	4904      	ldr	r1, [pc, #16]	@ (800e364 <MX_FATFS_Init+0x18>)
 800e352:	4805      	ldr	r0, [pc, #20]	@ (800e368 <MX_FATFS_Init+0x1c>)
 800e354:	f004 f8c6 	bl	80124e4 <FATFS_LinkDriver>
 800e358:	4603      	mov	r3, r0
 800e35a:	461a      	mov	r2, r3
 800e35c:	4b03      	ldr	r3, [pc, #12]	@ (800e36c <MX_FATFS_Init+0x20>)
 800e35e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e360:	bf00      	nop
 800e362:	bd80      	pop	{r7, pc}
 800e364:	24002830 	.word	0x24002830
 800e368:	24000054 	.word	0x24000054
 800e36c:	2400282c 	.word	0x2400282c

0800e370 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e370:	b480      	push	{r7}
 800e372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e374:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e376:	4618      	mov	r0, r3
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	4603      	mov	r3, r0
 800e388:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800e38a:	79fb      	ldrb	r3, [r7, #7]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 f9fd 	bl	800e78c <SD_disk_initialize>
 800e392:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e394:	4618      	mov	r0, r3
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800e3a6:	79fb      	ldrb	r3, [r7, #7]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f000 fad5 	bl	800e958 <SD_disk_status>
 800e3ae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60b9      	str	r1, [r7, #8]
 800e3c0:	607a      	str	r2, [r7, #4]
 800e3c2:	603b      	str	r3, [r7, #0]
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800e3c8:	7bf8      	ldrb	r0, [r7, #15]
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	68b9      	ldr	r1, [r7, #8]
 800e3d0:	f000 fad8 	bl	800e984 <SD_disk_read>
 800e3d4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
 800e3e8:	603b      	str	r3, [r7, #0]
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800e3ee:	7bf8      	ldrb	r0, [r7, #15]
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	68b9      	ldr	r1, [r7, #8]
 800e3f6:	f000 fb2f 	bl	800ea58 <SD_disk_write>
 800e3fa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	4603      	mov	r3, r0
 800e40c:	603a      	str	r2, [r7, #0]
 800e40e:	71fb      	strb	r3, [r7, #7]
 800e410:	460b      	mov	r3, r1
 800e412:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800e414:	79b9      	ldrb	r1, [r7, #6]
 800e416:	79fb      	ldrb	r3, [r7, #7]
 800e418:	683a      	ldr	r2, [r7, #0]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f000 fba0 	bl	800eb60 <SD_disk_ioctl>
 800e420:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e422:	4618      	mov	r0, r3
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
	...

0800e42c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800e430:	2200      	movs	r2, #0
 800e432:	2110      	movs	r1, #16
 800e434:	4802      	ldr	r0, [pc, #8]	@ (800e440 <SELECT+0x14>)
 800e436:	f7f8 fdab 	bl	8006f90 <HAL_GPIO_WritePin>
}
 800e43a:	bf00      	nop
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	58020000 	.word	0x58020000

0800e444 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800e448:	2201      	movs	r2, #1
 800e44a:	2110      	movs	r1, #16
 800e44c:	4802      	ldr	r0, [pc, #8]	@ (800e458 <DESELECT+0x14>)
 800e44e:	f7f8 fd9f 	bl	8006f90 <HAL_GPIO_WritePin>
}
 800e452:	bf00      	nop
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	58020000 	.word	0x58020000

0800e45c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	4603      	mov	r3, r0
 800e464:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e466:	bf00      	nop
 800e468:	4b08      	ldr	r3, [pc, #32]	@ (800e48c <SPI_TxByte+0x30>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	695b      	ldr	r3, [r3, #20]
 800e46e:	f003 0302 	and.w	r3, r3, #2
 800e472:	2b02      	cmp	r3, #2
 800e474:	d1f8      	bne.n	800e468 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800e476:	1df9      	adds	r1, r7, #7
 800e478:	2364      	movs	r3, #100	@ 0x64
 800e47a:	2201      	movs	r2, #1
 800e47c:	4803      	ldr	r0, [pc, #12]	@ (800e48c <SPI_TxByte+0x30>)
 800e47e:	f7fb fdd1 	bl	800a024 <HAL_SPI_Transmit>
}
 800e482:	bf00      	nop
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	240022e0 	.word	0x240022e0

0800e490 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e49c:	bf00      	nop
 800e49e:	4b08      	ldr	r3, [pc, #32]	@ (800e4c0 <SPI_TxBuffer+0x30>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	695b      	ldr	r3, [r3, #20]
 800e4a4:	f003 0302 	and.w	r3, r3, #2
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d1f8      	bne.n	800e49e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800e4ac:	887a      	ldrh	r2, [r7, #2]
 800e4ae:	2364      	movs	r3, #100	@ 0x64
 800e4b0:	6879      	ldr	r1, [r7, #4]
 800e4b2:	4803      	ldr	r0, [pc, #12]	@ (800e4c0 <SPI_TxBuffer+0x30>)
 800e4b4:	f7fb fdb6 	bl	800a024 <HAL_SPI_Transmit>
}
 800e4b8:	bf00      	nop
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	240022e0 	.word	0x240022e0

0800e4c4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800e4ca:	23ff      	movs	r3, #255	@ 0xff
 800e4cc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e4ce:	bf00      	nop
 800e4d0:	4b09      	ldr	r3, [pc, #36]	@ (800e4f8 <SPI_RxByte+0x34>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	695b      	ldr	r3, [r3, #20]
 800e4d6:	f003 0302 	and.w	r3, r3, #2
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	d1f8      	bne.n	800e4d0 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800e4de:	1dba      	adds	r2, r7, #6
 800e4e0:	1df9      	adds	r1, r7, #7
 800e4e2:	2364      	movs	r3, #100	@ 0x64
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	4803      	ldr	r0, [pc, #12]	@ (800e4f8 <SPI_RxByte+0x34>)
 800e4ea:	f7fc f9fb 	bl	800a8e4 <HAL_SPI_TransmitReceive>
  return data;
 800e4ee:	79bb      	ldrb	r3, [r7, #6]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	240022e0 	.word	0x240022e0

0800e4fc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800e504:	f7ff ffde 	bl	800e4c4 <SPI_RxByte>
 800e508:	4603      	mov	r3, r0
 800e50a:	461a      	mov	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	701a      	strb	r2, [r3, #0]
}
 800e510:	bf00      	nop
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800e51e:	4b0a      	ldr	r3, [pc, #40]	@ (800e548 <SD_ReadyWait+0x30>)
 800e520:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800e524:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800e526:	f7ff ffcd 	bl	800e4c4 <SPI_RxByte>
 800e52a:	4603      	mov	r3, r0
 800e52c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800e52e:	79fb      	ldrb	r3, [r7, #7]
 800e530:	2bff      	cmp	r3, #255	@ 0xff
 800e532:	d003      	beq.n	800e53c <SD_ReadyWait+0x24>
 800e534:	4b04      	ldr	r3, [pc, #16]	@ (800e548 <SD_ReadyWait+0x30>)
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d1f4      	bne.n	800e526 <SD_ReadyWait+0xe>
  return res;
 800e53c:	79fb      	ldrb	r3, [r7, #7]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	24002836 	.word	0x24002836

0800e54c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800e552:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800e556:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800e558:	f7ff ff74 	bl	800e444 <DESELECT>
  for(int i = 0; i < 10; i++)
 800e55c:	2300      	movs	r3, #0
 800e55e:	60bb      	str	r3, [r7, #8]
 800e560:	e005      	b.n	800e56e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800e562:	20ff      	movs	r0, #255	@ 0xff
 800e564:	f7ff ff7a 	bl	800e45c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	3301      	adds	r3, #1
 800e56c:	60bb      	str	r3, [r7, #8]
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	2b09      	cmp	r3, #9
 800e572:	ddf6      	ble.n	800e562 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800e574:	f7ff ff5a 	bl	800e42c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800e578:	2340      	movs	r3, #64	@ 0x40
 800e57a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800e57c:	2300      	movs	r3, #0
 800e57e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800e580:	2300      	movs	r3, #0
 800e582:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800e58c:	2395      	movs	r3, #149	@ 0x95
 800e58e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800e590:	463b      	mov	r3, r7
 800e592:	2106      	movs	r1, #6
 800e594:	4618      	mov	r0, r3
 800e596:	f7ff ff7b 	bl	800e490 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800e59a:	e002      	b.n	800e5a2 <SD_PowerOn+0x56>
  {
    cnt--;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800e5a2:	f7ff ff8f 	bl	800e4c4 <SPI_RxByte>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d002      	beq.n	800e5b2 <SD_PowerOn+0x66>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1f4      	bne.n	800e59c <SD_PowerOn+0x50>
  }
  DESELECT();
 800e5b2:	f7ff ff47 	bl	800e444 <DESELECT>
  SPI_TxByte(0XFF);
 800e5b6:	20ff      	movs	r0, #255	@ 0xff
 800e5b8:	f7ff ff50 	bl	800e45c <SPI_TxByte>
  PowerFlag = 1;
 800e5bc:	4b03      	ldr	r3, [pc, #12]	@ (800e5cc <SD_PowerOn+0x80>)
 800e5be:	2201      	movs	r2, #1
 800e5c0:	701a      	strb	r2, [r3, #0]
}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	24002839 	.word	0x24002839

0800e5d0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800e5d4:	4b03      	ldr	r3, [pc, #12]	@ (800e5e4 <SD_PowerOff+0x14>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	701a      	strb	r2, [r3, #0]
}
 800e5da:	bf00      	nop
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr
 800e5e4:	24002839 	.word	0x24002839

0800e5e8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	af00      	add	r7, sp, #0
  return PowerFlag;
 800e5ec:	4b03      	ldr	r3, [pc, #12]	@ (800e5fc <SD_CheckPower+0x14>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	24002839 	.word	0x24002839

0800e600 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800e60a:	4b13      	ldr	r3, [pc, #76]	@ (800e658 <SD_RxDataBlock+0x58>)
 800e60c:	22c8      	movs	r2, #200	@ 0xc8
 800e60e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800e610:	f7ff ff58 	bl	800e4c4 <SPI_RxByte>
 800e614:	4603      	mov	r3, r0
 800e616:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800e618:	7bfb      	ldrb	r3, [r7, #15]
 800e61a:	2bff      	cmp	r3, #255	@ 0xff
 800e61c:	d103      	bne.n	800e626 <SD_RxDataBlock+0x26>
 800e61e:	4b0e      	ldr	r3, [pc, #56]	@ (800e658 <SD_RxDataBlock+0x58>)
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1f4      	bne.n	800e610 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800e626:	7bfb      	ldrb	r3, [r7, #15]
 800e628:	2bfe      	cmp	r3, #254	@ 0xfe
 800e62a:	d001      	beq.n	800e630 <SD_RxDataBlock+0x30>
 800e62c:	2300      	movs	r3, #0
 800e62e:	e00f      	b.n	800e650 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	1c5a      	adds	r2, r3, #1
 800e634:	607a      	str	r2, [r7, #4]
 800e636:	4618      	mov	r0, r3
 800e638:	f7ff ff60 	bl	800e4fc <SPI_RxBytePtr>
  } while(len--);
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	1e5a      	subs	r2, r3, #1
 800e640:	603a      	str	r2, [r7, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1f4      	bne.n	800e630 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800e646:	f7ff ff3d 	bl	800e4c4 <SPI_RxByte>
  SPI_RxByte();
 800e64a:	f7ff ff3b 	bl	800e4c4 <SPI_RxByte>
  return TRUE;
 800e64e:	2301      	movs	r3, #1
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	24002834 	.word	0x24002834

0800e65c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	460b      	mov	r3, r1
 800e666:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800e668:	2300      	movs	r3, #0
 800e66a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800e66c:	f7ff ff54 	bl	800e518 <SD_ReadyWait>
 800e670:	4603      	mov	r3, r0
 800e672:	2bff      	cmp	r3, #255	@ 0xff
 800e674:	d001      	beq.n	800e67a <SD_TxDataBlock+0x1e>
 800e676:	2300      	movs	r3, #0
 800e678:	e02f      	b.n	800e6da <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800e67a:	78fb      	ldrb	r3, [r7, #3]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7ff feed 	bl	800e45c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800e682:	78fb      	ldrb	r3, [r7, #3]
 800e684:	2bfd      	cmp	r3, #253	@ 0xfd
 800e686:	d020      	beq.n	800e6ca <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800e688:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7ff feff 	bl	800e490 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800e692:	f7ff ff17 	bl	800e4c4 <SPI_RxByte>
    SPI_RxByte();
 800e696:	f7ff ff15 	bl	800e4c4 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800e69a:	e00b      	b.n	800e6b4 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800e69c:	f7ff ff12 	bl	800e4c4 <SPI_RxByte>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
 800e6a6:	f003 031f 	and.w	r3, r3, #31
 800e6aa:	2b05      	cmp	r3, #5
 800e6ac:	d006      	beq.n	800e6bc <SD_TxDataBlock+0x60>
      i++;
 800e6ae:	7bbb      	ldrb	r3, [r7, #14]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800e6b4:	7bbb      	ldrb	r3, [r7, #14]
 800e6b6:	2b40      	cmp	r3, #64	@ 0x40
 800e6b8:	d9f0      	bls.n	800e69c <SD_TxDataBlock+0x40>
 800e6ba:	e000      	b.n	800e6be <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800e6bc:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800e6be:	bf00      	nop
 800e6c0:	f7ff ff00 	bl	800e4c4 <SPI_RxByte>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d0fa      	beq.n	800e6c0 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
 800e6cc:	f003 031f 	and.w	r3, r3, #31
 800e6d0:	2b05      	cmp	r3, #5
 800e6d2:	d101      	bne.n	800e6d8 <SD_TxDataBlock+0x7c>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e000      	b.n	800e6da <SD_TxDataBlock+0x7e>

  return FALSE;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b084      	sub	sp, #16
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	6039      	str	r1, [r7, #0]
 800e6ec:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800e6ee:	f7ff ff13 	bl	800e518 <SD_ReadyWait>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2bff      	cmp	r3, #255	@ 0xff
 800e6f6:	d001      	beq.n	800e6fc <SD_SendCmd+0x1a>
 800e6f8:	23ff      	movs	r3, #255	@ 0xff
 800e6fa:	e042      	b.n	800e782 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800e6fc:	79fb      	ldrb	r3, [r7, #7]
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7ff feac 	bl	800e45c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	0e1b      	lsrs	r3, r3, #24
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7ff fea6 	bl	800e45c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	0c1b      	lsrs	r3, r3, #16
 800e714:	b2db      	uxtb	r3, r3
 800e716:	4618      	mov	r0, r3
 800e718:	f7ff fea0 	bl	800e45c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	0a1b      	lsrs	r3, r3, #8
 800e720:	b2db      	uxtb	r3, r3
 800e722:	4618      	mov	r0, r3
 800e724:	f7ff fe9a 	bl	800e45c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7ff fe95 	bl	800e45c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	2b40      	cmp	r3, #64	@ 0x40
 800e736:	d102      	bne.n	800e73e <SD_SendCmd+0x5c>
 800e738:	2395      	movs	r3, #149	@ 0x95
 800e73a:	73fb      	strb	r3, [r7, #15]
 800e73c:	e007      	b.n	800e74e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	2b48      	cmp	r3, #72	@ 0x48
 800e742:	d102      	bne.n	800e74a <SD_SendCmd+0x68>
 800e744:	2387      	movs	r3, #135	@ 0x87
 800e746:	73fb      	strb	r3, [r7, #15]
 800e748:	e001      	b.n	800e74e <SD_SendCmd+0x6c>
  else crc = 1;
 800e74a:	2301      	movs	r3, #1
 800e74c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
 800e750:	4618      	mov	r0, r3
 800e752:	f7ff fe83 	bl	800e45c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800e756:	79fb      	ldrb	r3, [r7, #7]
 800e758:	2b4c      	cmp	r3, #76	@ 0x4c
 800e75a:	d101      	bne.n	800e760 <SD_SendCmd+0x7e>
 800e75c:	f7ff feb2 	bl	800e4c4 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800e760:	230a      	movs	r3, #10
 800e762:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800e764:	f7ff feae 	bl	800e4c4 <SPI_RxByte>
 800e768:	4603      	mov	r3, r0
 800e76a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800e76c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e770:	2b00      	cmp	r3, #0
 800e772:	da05      	bge.n	800e780 <SD_SendCmd+0x9e>
 800e774:	7bbb      	ldrb	r3, [r7, #14]
 800e776:	3b01      	subs	r3, #1
 800e778:	73bb      	strb	r3, [r7, #14]
 800e77a:	7bbb      	ldrb	r3, [r7, #14]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d1f1      	bne.n	800e764 <SD_SendCmd+0x82>

  return res;
 800e780:	7b7b      	ldrb	r3, [r7, #13]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
	...

0800e78c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800e78c:	b590      	push	{r4, r7, lr}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	4603      	mov	r3, r0
 800e794:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <SD_disk_initialize+0x14>
 800e79c:	2301      	movs	r3, #1
 800e79e:	e0d1      	b.n	800e944 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800e7a0:	4b6a      	ldr	r3, [pc, #424]	@ (800e94c <SD_disk_initialize+0x1c0>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	f003 0302 	and.w	r3, r3, #2
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d003      	beq.n	800e7b6 <SD_disk_initialize+0x2a>
 800e7ae:	4b67      	ldr	r3, [pc, #412]	@ (800e94c <SD_disk_initialize+0x1c0>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	e0c6      	b.n	800e944 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800e7b6:	f7ff fec9 	bl	800e54c <SD_PowerOn>
  /* slave select */
  SELECT();
 800e7ba:	f7ff fe37 	bl	800e42c <SELECT>
  /* check disk type */
  type = 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	2040      	movs	r0, #64	@ 0x40
 800e7c6:	f7ff ff8c 	bl	800e6e2 <SD_SendCmd>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	f040 80a1 	bne.w	800e914 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800e7d2:	4b5f      	ldr	r3, [pc, #380]	@ (800e950 <SD_disk_initialize+0x1c4>)
 800e7d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e7d8:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800e7da:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800e7de:	2048      	movs	r0, #72	@ 0x48
 800e7e0:	f7ff ff7f 	bl	800e6e2 <SD_SendCmd>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d155      	bne.n	800e896 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	73fb      	strb	r3, [r7, #15]
 800e7ee:	e00c      	b.n	800e80a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800e7f0:	7bfc      	ldrb	r4, [r7, #15]
 800e7f2:	f7ff fe67 	bl	800e4c4 <SPI_RxByte>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	f104 0310 	add.w	r3, r4, #16
 800e7fe:	443b      	add	r3, r7
 800e800:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800e804:	7bfb      	ldrb	r3, [r7, #15]
 800e806:	3301      	adds	r3, #1
 800e808:	73fb      	strb	r3, [r7, #15]
 800e80a:	7bfb      	ldrb	r3, [r7, #15]
 800e80c:	2b03      	cmp	r3, #3
 800e80e:	d9ef      	bls.n	800e7f0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800e810:	7abb      	ldrb	r3, [r7, #10]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d17e      	bne.n	800e914 <SD_disk_initialize+0x188>
 800e816:	7afb      	ldrb	r3, [r7, #11]
 800e818:	2baa      	cmp	r3, #170	@ 0xaa
 800e81a:	d17b      	bne.n	800e914 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e81c:	2100      	movs	r1, #0
 800e81e:	2077      	movs	r0, #119	@ 0x77
 800e820:	f7ff ff5f 	bl	800e6e2 <SD_SendCmd>
 800e824:	4603      	mov	r3, r0
 800e826:	2b01      	cmp	r3, #1
 800e828:	d807      	bhi.n	800e83a <SD_disk_initialize+0xae>
 800e82a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e82e:	2069      	movs	r0, #105	@ 0x69
 800e830:	f7ff ff57 	bl	800e6e2 <SD_SendCmd>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d004      	beq.n	800e844 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800e83a:	4b45      	ldr	r3, [pc, #276]	@ (800e950 <SD_disk_initialize+0x1c4>)
 800e83c:	881b      	ldrh	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1ec      	bne.n	800e81c <SD_disk_initialize+0x90>
 800e842:	e000      	b.n	800e846 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e844:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800e846:	4b42      	ldr	r3, [pc, #264]	@ (800e950 <SD_disk_initialize+0x1c4>)
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d062      	beq.n	800e914 <SD_disk_initialize+0x188>
 800e84e:	2100      	movs	r1, #0
 800e850:	207a      	movs	r0, #122	@ 0x7a
 800e852:	f7ff ff46 	bl	800e6e2 <SD_SendCmd>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d15b      	bne.n	800e914 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800e85c:	2300      	movs	r3, #0
 800e85e:	73fb      	strb	r3, [r7, #15]
 800e860:	e00c      	b.n	800e87c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800e862:	7bfc      	ldrb	r4, [r7, #15]
 800e864:	f7ff fe2e 	bl	800e4c4 <SPI_RxByte>
 800e868:	4603      	mov	r3, r0
 800e86a:	461a      	mov	r2, r3
 800e86c:	f104 0310 	add.w	r3, r4, #16
 800e870:	443b      	add	r3, r7
 800e872:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800e876:	7bfb      	ldrb	r3, [r7, #15]
 800e878:	3301      	adds	r3, #1
 800e87a:	73fb      	strb	r3, [r7, #15]
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	2b03      	cmp	r3, #3
 800e880:	d9ef      	bls.n	800e862 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800e882:	7a3b      	ldrb	r3, [r7, #8]
 800e884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d001      	beq.n	800e890 <SD_disk_initialize+0x104>
 800e88c:	230c      	movs	r3, #12
 800e88e:	e000      	b.n	800e892 <SD_disk_initialize+0x106>
 800e890:	2304      	movs	r3, #4
 800e892:	73bb      	strb	r3, [r7, #14]
 800e894:	e03e      	b.n	800e914 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800e896:	2100      	movs	r1, #0
 800e898:	2077      	movs	r0, #119	@ 0x77
 800e89a:	f7ff ff22 	bl	800e6e2 <SD_SendCmd>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d808      	bhi.n	800e8b6 <SD_disk_initialize+0x12a>
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	2069      	movs	r0, #105	@ 0x69
 800e8a8:	f7ff ff1b 	bl	800e6e2 <SD_SendCmd>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d801      	bhi.n	800e8b6 <SD_disk_initialize+0x12a>
 800e8b2:	2302      	movs	r3, #2
 800e8b4:	e000      	b.n	800e8b8 <SD_disk_initialize+0x12c>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800e8ba:	7bbb      	ldrb	r3, [r7, #14]
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d10e      	bne.n	800e8de <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	2077      	movs	r0, #119	@ 0x77
 800e8c4:	f7ff ff0d 	bl	800e6e2 <SD_SendCmd>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	d80e      	bhi.n	800e8ec <SD_disk_initialize+0x160>
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	2069      	movs	r0, #105	@ 0x69
 800e8d2:	f7ff ff06 	bl	800e6e2 <SD_SendCmd>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d107      	bne.n	800e8ec <SD_disk_initialize+0x160>
 800e8dc:	e00c      	b.n	800e8f8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e8de:	2100      	movs	r1, #0
 800e8e0:	2041      	movs	r0, #65	@ 0x41
 800e8e2:	f7ff fefe 	bl	800e6e2 <SD_SendCmd>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d004      	beq.n	800e8f6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800e8ec:	4b18      	ldr	r3, [pc, #96]	@ (800e950 <SD_disk_initialize+0x1c4>)
 800e8ee:	881b      	ldrh	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d1e2      	bne.n	800e8ba <SD_disk_initialize+0x12e>
 800e8f4:	e000      	b.n	800e8f8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e8f6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800e8f8:	4b15      	ldr	r3, [pc, #84]	@ (800e950 <SD_disk_initialize+0x1c4>)
 800e8fa:	881b      	ldrh	r3, [r3, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d007      	beq.n	800e910 <SD_disk_initialize+0x184>
 800e900:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e904:	2050      	movs	r0, #80	@ 0x50
 800e906:	f7ff feec 	bl	800e6e2 <SD_SendCmd>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <SD_disk_initialize+0x188>
 800e910:	2300      	movs	r3, #0
 800e912:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800e914:	4a0f      	ldr	r2, [pc, #60]	@ (800e954 <SD_disk_initialize+0x1c8>)
 800e916:	7bbb      	ldrb	r3, [r7, #14]
 800e918:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800e91a:	f7ff fd93 	bl	800e444 <DESELECT>
  SPI_RxByte();
 800e91e:	f7ff fdd1 	bl	800e4c4 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800e922:	7bbb      	ldrb	r3, [r7, #14]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d008      	beq.n	800e93a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800e928:	4b08      	ldr	r3, [pc, #32]	@ (800e94c <SD_disk_initialize+0x1c0>)
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	f023 0301 	bic.w	r3, r3, #1
 800e932:	b2da      	uxtb	r2, r3
 800e934:	4b05      	ldr	r3, [pc, #20]	@ (800e94c <SD_disk_initialize+0x1c0>)
 800e936:	701a      	strb	r2, [r3, #0]
 800e938:	e001      	b.n	800e93e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800e93a:	f7ff fe49 	bl	800e5d0 <SD_PowerOff>
  }
  return Stat;
 800e93e:	4b03      	ldr	r3, [pc, #12]	@ (800e94c <SD_disk_initialize+0x1c0>)
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	b2db      	uxtb	r3, r3
}
 800e944:	4618      	mov	r0, r3
 800e946:	3714      	adds	r7, #20
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd90      	pop	{r4, r7, pc}
 800e94c:	24000068 	.word	0x24000068
 800e950:	24002834 	.word	0x24002834
 800e954:	24002838 	.word	0x24002838

0800e958 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	4603      	mov	r3, r0
 800e960:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800e962:	79fb      	ldrb	r3, [r7, #7]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d001      	beq.n	800e96c <SD_disk_status+0x14>
 800e968:	2301      	movs	r3, #1
 800e96a:	e002      	b.n	800e972 <SD_disk_status+0x1a>
  return Stat;
 800e96c:	4b04      	ldr	r3, [pc, #16]	@ (800e980 <SD_disk_status+0x28>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	b2db      	uxtb	r3, r3
}
 800e972:	4618      	mov	r0, r3
 800e974:	370c      	adds	r7, #12
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	24000068 	.word	0x24000068

0800e984 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60b9      	str	r1, [r7, #8]
 800e98c:	607a      	str	r2, [r7, #4]
 800e98e:	603b      	str	r3, [r7, #0]
 800e990:	4603      	mov	r3, r0
 800e992:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800e994:	7bfb      	ldrb	r3, [r7, #15]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d102      	bne.n	800e9a0 <SD_disk_read+0x1c>
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d101      	bne.n	800e9a4 <SD_disk_read+0x20>
 800e9a0:	2304      	movs	r3, #4
 800e9a2:	e051      	b.n	800ea48 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e9a4:	4b2a      	ldr	r3, [pc, #168]	@ (800ea50 <SD_disk_read+0xcc>)
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <SD_disk_read+0x32>
 800e9b2:	2303      	movs	r3, #3
 800e9b4:	e048      	b.n	800ea48 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800e9b6:	4b27      	ldr	r3, [pc, #156]	@ (800ea54 <SD_disk_read+0xd0>)
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0304 	and.w	r3, r3, #4
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d102      	bne.n	800e9c8 <SD_disk_read+0x44>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	025b      	lsls	r3, r3, #9
 800e9c6:	607b      	str	r3, [r7, #4]

  SELECT();
 800e9c8:	f7ff fd30 	bl	800e42c <SELECT>

  if (count == 1)
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d111      	bne.n	800e9f6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800e9d2:	6879      	ldr	r1, [r7, #4]
 800e9d4:	2051      	movs	r0, #81	@ 0x51
 800e9d6:	f7ff fe84 	bl	800e6e2 <SD_SendCmd>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d129      	bne.n	800ea34 <SD_disk_read+0xb0>
 800e9e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e9e4:	68b8      	ldr	r0, [r7, #8]
 800e9e6:	f7ff fe0b 	bl	800e600 <SD_RxDataBlock>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d021      	beq.n	800ea34 <SD_disk_read+0xb0>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	603b      	str	r3, [r7, #0]
 800e9f4:	e01e      	b.n	800ea34 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	2052      	movs	r0, #82	@ 0x52
 800e9fa:	f7ff fe72 	bl	800e6e2 <SD_SendCmd>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d117      	bne.n	800ea34 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800ea04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ea08:	68b8      	ldr	r0, [r7, #8]
 800ea0a:	f7ff fdf9 	bl	800e600 <SD_RxDataBlock>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d00a      	beq.n	800ea2a <SD_disk_read+0xa6>
        buff += 512;
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ea1a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	603b      	str	r3, [r7, #0]
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1ed      	bne.n	800ea04 <SD_disk_read+0x80>
 800ea28:	e000      	b.n	800ea2c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800ea2a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800ea2c:	2100      	movs	r1, #0
 800ea2e:	204c      	movs	r0, #76	@ 0x4c
 800ea30:	f7ff fe57 	bl	800e6e2 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800ea34:	f7ff fd06 	bl	800e444 <DESELECT>
  SPI_RxByte();
 800ea38:	f7ff fd44 	bl	800e4c4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	bf14      	ite	ne
 800ea42:	2301      	movne	r3, #1
 800ea44:	2300      	moveq	r3, #0
 800ea46:	b2db      	uxtb	r3, r3
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	24000068 	.word	0x24000068
 800ea54:	24002838 	.word	0x24002838

0800ea58 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60b9      	str	r1, [r7, #8]
 800ea60:	607a      	str	r2, [r7, #4]
 800ea62:	603b      	str	r3, [r7, #0]
 800ea64:	4603      	mov	r3, r0
 800ea66:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800ea68:	7bfb      	ldrb	r3, [r7, #15]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d102      	bne.n	800ea74 <SD_disk_write+0x1c>
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d101      	bne.n	800ea78 <SD_disk_write+0x20>
 800ea74:	2304      	movs	r3, #4
 800ea76:	e06b      	b.n	800eb50 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ea78:	4b37      	ldr	r3, [pc, #220]	@ (800eb58 <SD_disk_write+0x100>)
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	f003 0301 	and.w	r3, r3, #1
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <SD_disk_write+0x32>
 800ea86:	2303      	movs	r3, #3
 800ea88:	e062      	b.n	800eb50 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800ea8a:	4b33      	ldr	r3, [pc, #204]	@ (800eb58 <SD_disk_write+0x100>)
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	f003 0304 	and.w	r3, r3, #4
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d001      	beq.n	800ea9c <SD_disk_write+0x44>
 800ea98:	2302      	movs	r3, #2
 800ea9a:	e059      	b.n	800eb50 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800ea9c:	4b2f      	ldr	r3, [pc, #188]	@ (800eb5c <SD_disk_write+0x104>)
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	f003 0304 	and.w	r3, r3, #4
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d102      	bne.n	800eaae <SD_disk_write+0x56>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	025b      	lsls	r3, r3, #9
 800eaac:	607b      	str	r3, [r7, #4]

  SELECT();
 800eaae:	f7ff fcbd 	bl	800e42c <SELECT>

  if (count == 1)
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d110      	bne.n	800eada <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	2058      	movs	r0, #88	@ 0x58
 800eabc:	f7ff fe11 	bl	800e6e2 <SD_SendCmd>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d13a      	bne.n	800eb3c <SD_disk_write+0xe4>
 800eac6:	21fe      	movs	r1, #254	@ 0xfe
 800eac8:	68b8      	ldr	r0, [r7, #8]
 800eaca:	f7ff fdc7 	bl	800e65c <SD_TxDataBlock>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d033      	beq.n	800eb3c <SD_disk_write+0xe4>
      count = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	603b      	str	r3, [r7, #0]
 800ead8:	e030      	b.n	800eb3c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800eada:	4b20      	ldr	r3, [pc, #128]	@ (800eb5c <SD_disk_write+0x104>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	f003 0302 	and.w	r3, r3, #2
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d007      	beq.n	800eaf6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800eae6:	2100      	movs	r1, #0
 800eae8:	2077      	movs	r0, #119	@ 0x77
 800eaea:	f7ff fdfa 	bl	800e6e2 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800eaee:	6839      	ldr	r1, [r7, #0]
 800eaf0:	2057      	movs	r0, #87	@ 0x57
 800eaf2:	f7ff fdf6 	bl	800e6e2 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	2059      	movs	r0, #89	@ 0x59
 800eafa:	f7ff fdf2 	bl	800e6e2 <SD_SendCmd>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d11b      	bne.n	800eb3c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800eb04:	21fc      	movs	r1, #252	@ 0xfc
 800eb06:	68b8      	ldr	r0, [r7, #8]
 800eb08:	f7ff fda8 	bl	800e65c <SD_TxDataBlock>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00a      	beq.n	800eb28 <SD_disk_write+0xd0>
        buff += 512;
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800eb18:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	603b      	str	r3, [r7, #0]
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d1ee      	bne.n	800eb04 <SD_disk_write+0xac>
 800eb26:	e000      	b.n	800eb2a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800eb28:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800eb2a:	21fd      	movs	r1, #253	@ 0xfd
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	f7ff fd95 	bl	800e65c <SD_TxDataBlock>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d101      	bne.n	800eb3c <SD_disk_write+0xe4>
      {
        count = 1;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800eb3c:	f7ff fc82 	bl	800e444 <DESELECT>
  SPI_RxByte();
 800eb40:	f7ff fcc0 	bl	800e4c4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	bf14      	ite	ne
 800eb4a:	2301      	movne	r3, #1
 800eb4c:	2300      	moveq	r3, #0
 800eb4e:	b2db      	uxtb	r3, r3
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	24000068 	.word	0x24000068
 800eb5c:	24002838 	.word	0x24002838

0800eb60 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800eb60:	b590      	push	{r4, r7, lr}
 800eb62:	b08b      	sub	sp, #44	@ 0x2c
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	4603      	mov	r3, r0
 800eb68:	603a      	str	r2, [r7, #0]
 800eb6a:	71fb      	strb	r3, [r7, #7]
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800eb74:	79fb      	ldrb	r3, [r7, #7]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d001      	beq.n	800eb7e <SD_disk_ioctl+0x1e>
 800eb7a:	2304      	movs	r3, #4
 800eb7c:	e113      	b.n	800eda6 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800eb84:	79bb      	ldrb	r3, [r7, #6]
 800eb86:	2b05      	cmp	r3, #5
 800eb88:	d124      	bne.n	800ebd4 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800eb8a:	6a3b      	ldr	r3, [r7, #32]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d012      	beq.n	800ebb8 <SD_disk_ioctl+0x58>
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	dc1a      	bgt.n	800ebcc <SD_disk_ioctl+0x6c>
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d002      	beq.n	800eba0 <SD_disk_ioctl+0x40>
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d006      	beq.n	800ebac <SD_disk_ioctl+0x4c>
 800eb9e:	e015      	b.n	800ebcc <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800eba0:	f7ff fd16 	bl	800e5d0 <SD_PowerOff>
      res = RES_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ebaa:	e0fa      	b.n	800eda2 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800ebac:	f7ff fcce 	bl	800e54c <SD_PowerOn>
      res = RES_OK;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ebb6:	e0f4      	b.n	800eda2 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800ebb8:	6a3b      	ldr	r3, [r7, #32]
 800ebba:	1c5c      	adds	r4, r3, #1
 800ebbc:	f7ff fd14 	bl	800e5e8 <SD_CheckPower>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ebca:	e0ea      	b.n	800eda2 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800ebcc:	2304      	movs	r3, #4
 800ebce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ebd2:	e0e6      	b.n	800eda2 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800ebd4:	4b76      	ldr	r3, [pc, #472]	@ (800edb0 <SD_disk_ioctl+0x250>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	f003 0301 	and.w	r3, r3, #1
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	e0df      	b.n	800eda6 <SD_disk_ioctl+0x246>
    }
    SELECT();
 800ebe6:	f7ff fc21 	bl	800e42c <SELECT>
    switch (ctrl)
 800ebea:	79bb      	ldrb	r3, [r7, #6]
 800ebec:	2b0d      	cmp	r3, #13
 800ebee:	f200 80c9 	bhi.w	800ed84 <SD_disk_ioctl+0x224>
 800ebf2:	a201      	add	r2, pc, #4	@ (adr r2, 800ebf8 <SD_disk_ioctl+0x98>)
 800ebf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf8:	0800ecef 	.word	0x0800ecef
 800ebfc:	0800ec31 	.word	0x0800ec31
 800ec00:	0800ecdf 	.word	0x0800ecdf
 800ec04:	0800ed85 	.word	0x0800ed85
 800ec08:	0800ed85 	.word	0x0800ed85
 800ec0c:	0800ed85 	.word	0x0800ed85
 800ec10:	0800ed85 	.word	0x0800ed85
 800ec14:	0800ed85 	.word	0x0800ed85
 800ec18:	0800ed85 	.word	0x0800ed85
 800ec1c:	0800ed85 	.word	0x0800ed85
 800ec20:	0800ed85 	.word	0x0800ed85
 800ec24:	0800ed01 	.word	0x0800ed01
 800ec28:	0800ed25 	.word	0x0800ed25
 800ec2c:	0800ed49 	.word	0x0800ed49
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800ec30:	2100      	movs	r1, #0
 800ec32:	2049      	movs	r0, #73	@ 0x49
 800ec34:	f7ff fd55 	bl	800e6e2 <SD_SendCmd>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f040 80a6 	bne.w	800ed8c <SD_disk_ioctl+0x22c>
 800ec40:	f107 030c 	add.w	r3, r7, #12
 800ec44:	2110      	movs	r1, #16
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7ff fcda 	bl	800e600 <SD_RxDataBlock>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	f000 809c 	beq.w	800ed8c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800ec54:	7b3b      	ldrb	r3, [r7, #12]
 800ec56:	099b      	lsrs	r3, r3, #6
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d10d      	bne.n	800ec7a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800ec5e:	7d7b      	ldrb	r3, [r7, #21]
 800ec60:	461a      	mov	r2, r3
 800ec62:	7d3b      	ldrb	r3, [r7, #20]
 800ec64:	021b      	lsls	r3, r3, #8
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	4413      	add	r3, r2
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800ec70:	8bfb      	ldrh	r3, [r7, #30]
 800ec72:	029a      	lsls	r2, r3, #10
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	601a      	str	r2, [r3, #0]
 800ec78:	e02d      	b.n	800ecd6 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ec7a:	7c7b      	ldrb	r3, [r7, #17]
 800ec7c:	f003 030f 	and.w	r3, r3, #15
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	7dbb      	ldrb	r3, [r7, #22]
 800ec84:	09db      	lsrs	r3, r3, #7
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	4413      	add	r3, r2
 800ec8a:	b2da      	uxtb	r2, r3
 800ec8c:	7d7b      	ldrb	r3, [r7, #21]
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	f003 0306 	and.w	r3, r3, #6
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	4413      	add	r3, r2
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	3302      	adds	r3, #2
 800ec9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800eca2:	7d3b      	ldrb	r3, [r7, #20]
 800eca4:	099b      	lsrs	r3, r3, #6
 800eca6:	b2db      	uxtb	r3, r3
 800eca8:	461a      	mov	r2, r3
 800ecaa:	7cfb      	ldrb	r3, [r7, #19]
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	4413      	add	r3, r2
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	7cbb      	ldrb	r3, [r7, #18]
 800ecb6:	029b      	lsls	r3, r3, #10
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	4413      	add	r3, r2
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800ecc8:	8bfa      	ldrh	r2, [r7, #30]
 800ecca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ecce:	3b09      	subs	r3, #9
 800ecd0:	409a      	lsls	r2, r3
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800ecdc:	e056      	b.n	800ed8c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ece4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800ece6:	2300      	movs	r3, #0
 800ece8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ecec:	e055      	b.n	800ed9a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800ecee:	f7ff fc13 	bl	800e518 <SD_ReadyWait>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2bff      	cmp	r3, #255	@ 0xff
 800ecf6:	d14b      	bne.n	800ed90 <SD_disk_ioctl+0x230>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ecfe:	e047      	b.n	800ed90 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800ed00:	2100      	movs	r1, #0
 800ed02:	2049      	movs	r0, #73	@ 0x49
 800ed04:	f7ff fced 	bl	800e6e2 <SD_SendCmd>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d142      	bne.n	800ed94 <SD_disk_ioctl+0x234>
 800ed0e:	2110      	movs	r1, #16
 800ed10:	6a38      	ldr	r0, [r7, #32]
 800ed12:	f7ff fc75 	bl	800e600 <SD_RxDataBlock>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d03b      	beq.n	800ed94 <SD_disk_ioctl+0x234>
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ed22:	e037      	b.n	800ed94 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800ed24:	2100      	movs	r1, #0
 800ed26:	204a      	movs	r0, #74	@ 0x4a
 800ed28:	f7ff fcdb 	bl	800e6e2 <SD_SendCmd>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d132      	bne.n	800ed98 <SD_disk_ioctl+0x238>
 800ed32:	2110      	movs	r1, #16
 800ed34:	6a38      	ldr	r0, [r7, #32]
 800ed36:	f7ff fc63 	bl	800e600 <SD_RxDataBlock>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d02b      	beq.n	800ed98 <SD_disk_ioctl+0x238>
 800ed40:	2300      	movs	r3, #0
 800ed42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ed46:	e027      	b.n	800ed98 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800ed48:	2100      	movs	r1, #0
 800ed4a:	207a      	movs	r0, #122	@ 0x7a
 800ed4c:	f7ff fcc9 	bl	800e6e2 <SD_SendCmd>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d116      	bne.n	800ed84 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800ed56:	2300      	movs	r3, #0
 800ed58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed5c:	e00b      	b.n	800ed76 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800ed5e:	6a3c      	ldr	r4, [r7, #32]
 800ed60:	1c63      	adds	r3, r4, #1
 800ed62:	623b      	str	r3, [r7, #32]
 800ed64:	f7ff fbae 	bl	800e4c4 <SPI_RxByte>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800ed6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed70:	3301      	adds	r3, #1
 800ed72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed7a:	2b03      	cmp	r3, #3
 800ed7c:	d9ef      	bls.n	800ed5e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800ed84:	2304      	movs	r3, #4
 800ed86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed8a:	e006      	b.n	800ed9a <SD_disk_ioctl+0x23a>
      break;
 800ed8c:	bf00      	nop
 800ed8e:	e004      	b.n	800ed9a <SD_disk_ioctl+0x23a>
      break;
 800ed90:	bf00      	nop
 800ed92:	e002      	b.n	800ed9a <SD_disk_ioctl+0x23a>
      break;
 800ed94:	bf00      	nop
 800ed96:	e000      	b.n	800ed9a <SD_disk_ioctl+0x23a>
      break;
 800ed98:	bf00      	nop
    }
    DESELECT();
 800ed9a:	f7ff fb53 	bl	800e444 <DESELECT>
    SPI_RxByte();
 800ed9e:	f7ff fb91 	bl	800e4c4 <SPI_RxByte>
  }
  return res;
 800eda2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	372c      	adds	r7, #44	@ 0x2c
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd90      	pop	{r4, r7, pc}
 800edae:	bf00      	nop
 800edb0:	24000068 	.word	0x24000068

0800edb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
 800edba:	4603      	mov	r3, r0
 800edbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800edbe:	79fb      	ldrb	r3, [r7, #7]
 800edc0:	4a08      	ldr	r2, [pc, #32]	@ (800ede4 <disk_status+0x30>)
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	4413      	add	r3, r2
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	79fa      	ldrb	r2, [r7, #7]
 800edcc:	4905      	ldr	r1, [pc, #20]	@ (800ede4 <disk_status+0x30>)
 800edce:	440a      	add	r2, r1
 800edd0:	7a12      	ldrb	r2, [r2, #8]
 800edd2:	4610      	mov	r0, r2
 800edd4:	4798      	blx	r3
 800edd6:	4603      	mov	r3, r0
 800edd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800edda:	7bfb      	ldrb	r3, [r7, #15]
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3710      	adds	r7, #16
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	24002a64 	.word	0x24002a64

0800ede8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	4603      	mov	r3, r0
 800edf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800edf6:	79fb      	ldrb	r3, [r7, #7]
 800edf8:	4a0e      	ldr	r2, [pc, #56]	@ (800ee34 <disk_initialize+0x4c>)
 800edfa:	5cd3      	ldrb	r3, [r2, r3]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d114      	bne.n	800ee2a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ee00:	79fb      	ldrb	r3, [r7, #7]
 800ee02:	4a0c      	ldr	r2, [pc, #48]	@ (800ee34 <disk_initialize+0x4c>)
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	4413      	add	r3, r2
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	79fa      	ldrb	r2, [r7, #7]
 800ee0e:	4909      	ldr	r1, [pc, #36]	@ (800ee34 <disk_initialize+0x4c>)
 800ee10:	440a      	add	r2, r1
 800ee12:	7a12      	ldrb	r2, [r2, #8]
 800ee14:	4610      	mov	r0, r2
 800ee16:	4798      	blx	r3
 800ee18:	4603      	mov	r3, r0
 800ee1a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800ee1c:	7bfb      	ldrb	r3, [r7, #15]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d103      	bne.n	800ee2a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800ee22:	79fb      	ldrb	r3, [r7, #7]
 800ee24:	4a03      	ldr	r2, [pc, #12]	@ (800ee34 <disk_initialize+0x4c>)
 800ee26:	2101      	movs	r1, #1
 800ee28:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800ee2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	24002a64 	.word	0x24002a64

0800ee38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ee38:	b590      	push	{r4, r7, lr}
 800ee3a:	b087      	sub	sp, #28
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60b9      	str	r1, [r7, #8]
 800ee40:	607a      	str	r2, [r7, #4]
 800ee42:	603b      	str	r3, [r7, #0]
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
 800ee4a:	4a0a      	ldr	r2, [pc, #40]	@ (800ee74 <disk_read+0x3c>)
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4413      	add	r3, r2
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	689c      	ldr	r4, [r3, #8]
 800ee54:	7bfb      	ldrb	r3, [r7, #15]
 800ee56:	4a07      	ldr	r2, [pc, #28]	@ (800ee74 <disk_read+0x3c>)
 800ee58:	4413      	add	r3, r2
 800ee5a:	7a18      	ldrb	r0, [r3, #8]
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	68b9      	ldr	r1, [r7, #8]
 800ee62:	47a0      	blx	r4
 800ee64:	4603      	mov	r3, r0
 800ee66:	75fb      	strb	r3, [r7, #23]
  return res;
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	371c      	adds	r7, #28
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd90      	pop	{r4, r7, pc}
 800ee72:	bf00      	nop
 800ee74:	24002a64 	.word	0x24002a64

0800ee78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ee78:	b590      	push	{r4, r7, lr}
 800ee7a:	b087      	sub	sp, #28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60b9      	str	r1, [r7, #8]
 800ee80:	607a      	str	r2, [r7, #4]
 800ee82:	603b      	str	r3, [r7, #0]
 800ee84:	4603      	mov	r3, r0
 800ee86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
 800ee8a:	4a0a      	ldr	r2, [pc, #40]	@ (800eeb4 <disk_write+0x3c>)
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	4413      	add	r3, r2
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	68dc      	ldr	r4, [r3, #12]
 800ee94:	7bfb      	ldrb	r3, [r7, #15]
 800ee96:	4a07      	ldr	r2, [pc, #28]	@ (800eeb4 <disk_write+0x3c>)
 800ee98:	4413      	add	r3, r2
 800ee9a:	7a18      	ldrb	r0, [r3, #8]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	47a0      	blx	r4
 800eea4:	4603      	mov	r3, r0
 800eea6:	75fb      	strb	r3, [r7, #23]
  return res;
 800eea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	371c      	adds	r7, #28
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd90      	pop	{r4, r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	24002a64 	.word	0x24002a64

0800eeb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	603a      	str	r2, [r7, #0]
 800eec2:	71fb      	strb	r3, [r7, #7]
 800eec4:	460b      	mov	r3, r1
 800eec6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eec8:	79fb      	ldrb	r3, [r7, #7]
 800eeca:	4a09      	ldr	r2, [pc, #36]	@ (800eef0 <disk_ioctl+0x38>)
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	4413      	add	r3, r2
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	79fa      	ldrb	r2, [r7, #7]
 800eed6:	4906      	ldr	r1, [pc, #24]	@ (800eef0 <disk_ioctl+0x38>)
 800eed8:	440a      	add	r2, r1
 800eeda:	7a10      	ldrb	r0, [r2, #8]
 800eedc:	79b9      	ldrb	r1, [r7, #6]
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	4798      	blx	r3
 800eee2:	4603      	mov	r3, r0
 800eee4:	73fb      	strb	r3, [r7, #15]
  return res;
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	24002a64 	.word	0x24002a64

0800eef4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	3301      	adds	r3, #1
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ef04:	89fb      	ldrh	r3, [r7, #14]
 800ef06:	021b      	lsls	r3, r3, #8
 800ef08:	b21a      	sxth	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	b21b      	sxth	r3, r3
 800ef10:	4313      	orrs	r3, r2
 800ef12:	b21b      	sxth	r3, r3
 800ef14:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ef16:	89fb      	ldrh	r3, [r7, #14]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3714      	adds	r7, #20
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	3303      	adds	r3, #3
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	021b      	lsls	r3, r3, #8
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	3202      	adds	r2, #2
 800ef3c:	7812      	ldrb	r2, [r2, #0]
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	021b      	lsls	r3, r3, #8
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	3201      	adds	r2, #1
 800ef4a:	7812      	ldrb	r2, [r2, #0]
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	021b      	lsls	r3, r3, #8
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	7812      	ldrb	r2, [r2, #0]
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3714      	adds	r7, #20
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr

0800ef6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ef6a:	b480      	push	{r7}
 800ef6c:	b083      	sub	sp, #12
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
 800ef72:	460b      	mov	r3, r1
 800ef74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	1c5a      	adds	r2, r3, #1
 800ef7a:	607a      	str	r2, [r7, #4]
 800ef7c:	887a      	ldrh	r2, [r7, #2]
 800ef7e:	b2d2      	uxtb	r2, r2
 800ef80:	701a      	strb	r2, [r3, #0]
 800ef82:	887b      	ldrh	r3, [r7, #2]
 800ef84:	0a1b      	lsrs	r3, r3, #8
 800ef86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	607a      	str	r2, [r7, #4]
 800ef8e:	887a      	ldrh	r2, [r7, #2]
 800ef90:	b2d2      	uxtb	r2, r2
 800ef92:	701a      	strb	r2, [r3, #0]
}
 800ef94:	bf00      	nop
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	1c5a      	adds	r2, r3, #1
 800efae:	607a      	str	r2, [r7, #4]
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	b2d2      	uxtb	r2, r2
 800efb4:	701a      	strb	r2, [r3, #0]
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	0a1b      	lsrs	r3, r3, #8
 800efba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	1c5a      	adds	r2, r3, #1
 800efc0:	607a      	str	r2, [r7, #4]
 800efc2:	683a      	ldr	r2, [r7, #0]
 800efc4:	b2d2      	uxtb	r2, r2
 800efc6:	701a      	strb	r2, [r3, #0]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	0a1b      	lsrs	r3, r3, #8
 800efcc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	1c5a      	adds	r2, r3, #1
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	683a      	ldr	r2, [r7, #0]
 800efd6:	b2d2      	uxtb	r2, r2
 800efd8:	701a      	strb	r2, [r3, #0]
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	0a1b      	lsrs	r3, r3, #8
 800efde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	607a      	str	r2, [r7, #4]
 800efe6:	683a      	ldr	r2, [r7, #0]
 800efe8:	b2d2      	uxtb	r2, r2
 800efea:	701a      	strb	r2, [r3, #0]
}
 800efec:	bf00      	nop
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eff8:	b480      	push	{r7}
 800effa:	b087      	sub	sp, #28
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00d      	beq.n	800f02e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f012:	693a      	ldr	r2, [r7, #16]
 800f014:	1c53      	adds	r3, r2, #1
 800f016:	613b      	str	r3, [r7, #16]
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	1c59      	adds	r1, r3, #1
 800f01c:	6179      	str	r1, [r7, #20]
 800f01e:	7812      	ldrb	r2, [r2, #0]
 800f020:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	3b01      	subs	r3, #1
 800f026:	607b      	str	r3, [r7, #4]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1f1      	bne.n	800f012 <mem_cpy+0x1a>
	}
}
 800f02e:	bf00      	nop
 800f030:	371c      	adds	r7, #28
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr

0800f03a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f03a:	b480      	push	{r7}
 800f03c:	b087      	sub	sp, #28
 800f03e:	af00      	add	r7, sp, #0
 800f040:	60f8      	str	r0, [r7, #12]
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	1c5a      	adds	r2, r3, #1
 800f04e:	617a      	str	r2, [r7, #20]
 800f050:	68ba      	ldr	r2, [r7, #8]
 800f052:	b2d2      	uxtb	r2, r2
 800f054:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3b01      	subs	r3, #1
 800f05a:	607b      	str	r3, [r7, #4]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1f3      	bne.n	800f04a <mem_set+0x10>
}
 800f062:	bf00      	nop
 800f064:	bf00      	nop
 800f066:	371c      	adds	r7, #28
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f070:	b480      	push	{r7}
 800f072:	b089      	sub	sp, #36	@ 0x24
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	61fb      	str	r3, [r7, #28]
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f084:	2300      	movs	r3, #0
 800f086:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	61fa      	str	r2, [r7, #28]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	4619      	mov	r1, r3
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	1c5a      	adds	r2, r3, #1
 800f096:	61ba      	str	r2, [r7, #24]
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	1acb      	subs	r3, r1, r3
 800f09c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	607b      	str	r3, [r7, #4]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d002      	beq.n	800f0b0 <mem_cmp+0x40>
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d0eb      	beq.n	800f088 <mem_cmp+0x18>

	return r;
 800f0b0:	697b      	ldr	r3, [r7, #20]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3724      	adds	r7, #36	@ 0x24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f0be:	b480      	push	{r7}
 800f0c0:	b083      	sub	sp, #12
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
 800f0c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f0c8:	e002      	b.n	800f0d0 <chk_chr+0x12>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	607b      	str	r3, [r7, #4]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d005      	beq.n	800f0e4 <chk_chr+0x26>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d1f2      	bne.n	800f0ca <chk_chr+0xc>
	return *str;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	370c      	adds	r7, #12
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f0fe:	2300      	movs	r3, #0
 800f100:	60bb      	str	r3, [r7, #8]
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	60fb      	str	r3, [r7, #12]
 800f106:	e029      	b.n	800f15c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f108:	4a27      	ldr	r2, [pc, #156]	@ (800f1a8 <chk_lock+0xb4>)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	011b      	lsls	r3, r3, #4
 800f10e:	4413      	add	r3, r2
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d01d      	beq.n	800f152 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f116:	4a24      	ldr	r2, [pc, #144]	@ (800f1a8 <chk_lock+0xb4>)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	011b      	lsls	r3, r3, #4
 800f11c:	4413      	add	r3, r2
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	429a      	cmp	r2, r3
 800f126:	d116      	bne.n	800f156 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f128:	4a1f      	ldr	r2, [pc, #124]	@ (800f1a8 <chk_lock+0xb4>)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	011b      	lsls	r3, r3, #4
 800f12e:	4413      	add	r3, r2
 800f130:	3304      	adds	r3, #4
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f138:	429a      	cmp	r2, r3
 800f13a:	d10c      	bne.n	800f156 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f13c:	4a1a      	ldr	r2, [pc, #104]	@ (800f1a8 <chk_lock+0xb4>)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	011b      	lsls	r3, r3, #4
 800f142:	4413      	add	r3, r2
 800f144:	3308      	adds	r3, #8
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d102      	bne.n	800f156 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f150:	e007      	b.n	800f162 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f152:	2301      	movs	r3, #1
 800f154:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	3301      	adds	r3, #1
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d9d2      	bls.n	800f108 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2b02      	cmp	r3, #2
 800f166:	d109      	bne.n	800f17c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d102      	bne.n	800f174 <chk_lock+0x80>
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	2b02      	cmp	r3, #2
 800f172:	d101      	bne.n	800f178 <chk_lock+0x84>
 800f174:	2300      	movs	r3, #0
 800f176:	e010      	b.n	800f19a <chk_lock+0xa6>
 800f178:	2312      	movs	r3, #18
 800f17a:	e00e      	b.n	800f19a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d108      	bne.n	800f194 <chk_lock+0xa0>
 800f182:	4a09      	ldr	r2, [pc, #36]	@ (800f1a8 <chk_lock+0xb4>)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	011b      	lsls	r3, r3, #4
 800f188:	4413      	add	r3, r2
 800f18a:	330c      	adds	r3, #12
 800f18c:	881b      	ldrh	r3, [r3, #0]
 800f18e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f192:	d101      	bne.n	800f198 <chk_lock+0xa4>
 800f194:	2310      	movs	r3, #16
 800f196:	e000      	b.n	800f19a <chk_lock+0xa6>
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3714      	adds	r7, #20
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr
 800f1a6:	bf00      	nop
 800f1a8:	24002844 	.word	0x24002844

0800f1ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	607b      	str	r3, [r7, #4]
 800f1b6:	e002      	b.n	800f1be <enq_lock+0x12>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	607b      	str	r3, [r7, #4]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d806      	bhi.n	800f1d2 <enq_lock+0x26>
 800f1c4:	4a09      	ldr	r2, [pc, #36]	@ (800f1ec <enq_lock+0x40>)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	011b      	lsls	r3, r3, #4
 800f1ca:	4413      	add	r3, r2
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1f2      	bne.n	800f1b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2b02      	cmp	r3, #2
 800f1d6:	bf14      	ite	ne
 800f1d8:	2301      	movne	r3, #1
 800f1da:	2300      	moveq	r3, #0
 800f1dc:	b2db      	uxtb	r3, r3
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	24002844 	.word	0x24002844

0800f1f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b085      	sub	sp, #20
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	60fb      	str	r3, [r7, #12]
 800f1fe:	e01f      	b.n	800f240 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f200:	4a41      	ldr	r2, [pc, #260]	@ (800f308 <inc_lock+0x118>)
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	011b      	lsls	r3, r3, #4
 800f206:	4413      	add	r3, r2
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d113      	bne.n	800f23a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f212:	4a3d      	ldr	r2, [pc, #244]	@ (800f308 <inc_lock+0x118>)
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	011b      	lsls	r3, r3, #4
 800f218:	4413      	add	r3, r2
 800f21a:	3304      	adds	r3, #4
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f222:	429a      	cmp	r2, r3
 800f224:	d109      	bne.n	800f23a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f226:	4a38      	ldr	r2, [pc, #224]	@ (800f308 <inc_lock+0x118>)
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	011b      	lsls	r3, r3, #4
 800f22c:	4413      	add	r3, r2
 800f22e:	3308      	adds	r3, #8
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f236:	429a      	cmp	r2, r3
 800f238:	d006      	beq.n	800f248 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	3301      	adds	r3, #1
 800f23e:	60fb      	str	r3, [r7, #12]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d9dc      	bls.n	800f200 <inc_lock+0x10>
 800f246:	e000      	b.n	800f24a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f248:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2b02      	cmp	r3, #2
 800f24e:	d132      	bne.n	800f2b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f250:	2300      	movs	r3, #0
 800f252:	60fb      	str	r3, [r7, #12]
 800f254:	e002      	b.n	800f25c <inc_lock+0x6c>
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	3301      	adds	r3, #1
 800f25a:	60fb      	str	r3, [r7, #12]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d806      	bhi.n	800f270 <inc_lock+0x80>
 800f262:	4a29      	ldr	r2, [pc, #164]	@ (800f308 <inc_lock+0x118>)
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	011b      	lsls	r3, r3, #4
 800f268:	4413      	add	r3, r2
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d1f2      	bne.n	800f256 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2b02      	cmp	r3, #2
 800f274:	d101      	bne.n	800f27a <inc_lock+0x8a>
 800f276:	2300      	movs	r3, #0
 800f278:	e040      	b.n	800f2fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	4922      	ldr	r1, [pc, #136]	@ (800f308 <inc_lock+0x118>)
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	011b      	lsls	r3, r3, #4
 800f284:	440b      	add	r3, r1
 800f286:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	689a      	ldr	r2, [r3, #8]
 800f28c:	491e      	ldr	r1, [pc, #120]	@ (800f308 <inc_lock+0x118>)
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	011b      	lsls	r3, r3, #4
 800f292:	440b      	add	r3, r1
 800f294:	3304      	adds	r3, #4
 800f296:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	695a      	ldr	r2, [r3, #20]
 800f29c:	491a      	ldr	r1, [pc, #104]	@ (800f308 <inc_lock+0x118>)
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	011b      	lsls	r3, r3, #4
 800f2a2:	440b      	add	r3, r1
 800f2a4:	3308      	adds	r3, #8
 800f2a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f2a8:	4a17      	ldr	r2, [pc, #92]	@ (800f308 <inc_lock+0x118>)
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	011b      	lsls	r3, r3, #4
 800f2ae:	4413      	add	r3, r2
 800f2b0:	330c      	adds	r3, #12
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d009      	beq.n	800f2d0 <inc_lock+0xe0>
 800f2bc:	4a12      	ldr	r2, [pc, #72]	@ (800f308 <inc_lock+0x118>)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	011b      	lsls	r3, r3, #4
 800f2c2:	4413      	add	r3, r2
 800f2c4:	330c      	adds	r3, #12
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d001      	beq.n	800f2d0 <inc_lock+0xe0>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	e015      	b.n	800f2fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d108      	bne.n	800f2e8 <inc_lock+0xf8>
 800f2d6:	4a0c      	ldr	r2, [pc, #48]	@ (800f308 <inc_lock+0x118>)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	011b      	lsls	r3, r3, #4
 800f2dc:	4413      	add	r3, r2
 800f2de:	330c      	adds	r3, #12
 800f2e0:	881b      	ldrh	r3, [r3, #0]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	e001      	b.n	800f2ec <inc_lock+0xfc>
 800f2e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f2ec:	4906      	ldr	r1, [pc, #24]	@ (800f308 <inc_lock+0x118>)
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	011b      	lsls	r3, r3, #4
 800f2f2:	440b      	add	r3, r1
 800f2f4:	330c      	adds	r3, #12
 800f2f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	3301      	adds	r3, #1
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr
 800f308:	24002844 	.word	0x24002844

0800f30c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	3b01      	subs	r3, #1
 800f318:	607b      	str	r3, [r7, #4]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d825      	bhi.n	800f36c <dec_lock+0x60>
		n = Files[i].ctr;
 800f320:	4a17      	ldr	r2, [pc, #92]	@ (800f380 <dec_lock+0x74>)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	011b      	lsls	r3, r3, #4
 800f326:	4413      	add	r3, r2
 800f328:	330c      	adds	r3, #12
 800f32a:	881b      	ldrh	r3, [r3, #0]
 800f32c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f32e:	89fb      	ldrh	r3, [r7, #14]
 800f330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f334:	d101      	bne.n	800f33a <dec_lock+0x2e>
 800f336:	2300      	movs	r3, #0
 800f338:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f33a:	89fb      	ldrh	r3, [r7, #14]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d002      	beq.n	800f346 <dec_lock+0x3a>
 800f340:	89fb      	ldrh	r3, [r7, #14]
 800f342:	3b01      	subs	r3, #1
 800f344:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f346:	4a0e      	ldr	r2, [pc, #56]	@ (800f380 <dec_lock+0x74>)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	011b      	lsls	r3, r3, #4
 800f34c:	4413      	add	r3, r2
 800f34e:	330c      	adds	r3, #12
 800f350:	89fa      	ldrh	r2, [r7, #14]
 800f352:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f354:	89fb      	ldrh	r3, [r7, #14]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d105      	bne.n	800f366 <dec_lock+0x5a>
 800f35a:	4a09      	ldr	r2, [pc, #36]	@ (800f380 <dec_lock+0x74>)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	011b      	lsls	r3, r3, #4
 800f360:	4413      	add	r3, r2
 800f362:	2200      	movs	r2, #0
 800f364:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f366:	2300      	movs	r3, #0
 800f368:	737b      	strb	r3, [r7, #13]
 800f36a:	e001      	b.n	800f370 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f36c:	2302      	movs	r3, #2
 800f36e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f370:	7b7b      	ldrb	r3, [r7, #13]
}
 800f372:	4618      	mov	r0, r3
 800f374:	3714      	adds	r7, #20
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop
 800f380:	24002844 	.word	0x24002844

0800f384 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f38c:	2300      	movs	r3, #0
 800f38e:	60fb      	str	r3, [r7, #12]
 800f390:	e010      	b.n	800f3b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f392:	4a0d      	ldr	r2, [pc, #52]	@ (800f3c8 <clear_lock+0x44>)
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	011b      	lsls	r3, r3, #4
 800f398:	4413      	add	r3, r2
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d105      	bne.n	800f3ae <clear_lock+0x2a>
 800f3a2:	4a09      	ldr	r2, [pc, #36]	@ (800f3c8 <clear_lock+0x44>)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	011b      	lsls	r3, r3, #4
 800f3a8:	4413      	add	r3, r2
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	60fb      	str	r3, [r7, #12]
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d9eb      	bls.n	800f392 <clear_lock+0xe>
	}
}
 800f3ba:	bf00      	nop
 800f3bc:	bf00      	nop
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	24002844 	.word	0x24002844

0800f3cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b086      	sub	sp, #24
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	78db      	ldrb	r3, [r3, #3]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d034      	beq.n	800f44a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	7858      	ldrb	r0, [r3, #1]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	697a      	ldr	r2, [r7, #20]
 800f3f4:	f7ff fd40 	bl	800ee78 <disk_write>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d002      	beq.n	800f404 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f3fe:	2301      	movs	r3, #1
 800f400:	73fb      	strb	r3, [r7, #15]
 800f402:	e022      	b.n	800f44a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f40e:	697a      	ldr	r2, [r7, #20]
 800f410:	1ad2      	subs	r2, r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f416:	429a      	cmp	r2, r3
 800f418:	d217      	bcs.n	800f44a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	789b      	ldrb	r3, [r3, #2]
 800f41e:	613b      	str	r3, [r7, #16]
 800f420:	e010      	b.n	800f444 <sync_window+0x78>
					wsect += fs->fsize;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	4413      	add	r3, r2
 800f42a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	7858      	ldrb	r0, [r3, #1]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f436:	2301      	movs	r3, #1
 800f438:	697a      	ldr	r2, [r7, #20]
 800f43a:	f7ff fd1d 	bl	800ee78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	3b01      	subs	r3, #1
 800f442:	613b      	str	r3, [r7, #16]
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	2b01      	cmp	r3, #1
 800f448:	d8eb      	bhi.n	800f422 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3718      	adds	r7, #24
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f45e:	2300      	movs	r3, #0
 800f460:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f466:	683a      	ldr	r2, [r7, #0]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d01b      	beq.n	800f4a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f7ff ffad 	bl	800f3cc <sync_window>
 800f472:	4603      	mov	r3, r0
 800f474:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f476:	7bfb      	ldrb	r3, [r7, #15]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d113      	bne.n	800f4a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	7858      	ldrb	r0, [r3, #1]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f486:	2301      	movs	r3, #1
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	f7ff fcd5 	bl	800ee38 <disk_read>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d004      	beq.n	800f49e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f494:	f04f 33ff 	mov.w	r3, #4294967295
 800f498:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f49a:	2301      	movs	r3, #1
 800f49c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	683a      	ldr	r2, [r7, #0]
 800f4a2:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800f4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
	...

0800f4b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7ff ff87 	bl	800f3cc <sync_window>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f4c2:	7bfb      	ldrb	r3, [r7, #15]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d159      	bne.n	800f57c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	2b03      	cmp	r3, #3
 800f4ce:	d149      	bne.n	800f564 <sync_fs+0xb4>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	791b      	ldrb	r3, [r3, #4]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d145      	bne.n	800f564 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	899b      	ldrh	r3, [r3, #12]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	f7ff fda8 	bl	800f03a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	333c      	adds	r3, #60	@ 0x3c
 800f4ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f4f2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7ff fd37 	bl	800ef6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	333c      	adds	r3, #60	@ 0x3c
 800f500:	4921      	ldr	r1, [pc, #132]	@ (800f588 <sync_fs+0xd8>)
 800f502:	4618      	mov	r0, r3
 800f504:	f7ff fd4c 	bl	800efa0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	333c      	adds	r3, #60	@ 0x3c
 800f50c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f510:	491e      	ldr	r1, [pc, #120]	@ (800f58c <sync_fs+0xdc>)
 800f512:	4618      	mov	r0, r3
 800f514:	f7ff fd44 	bl	800efa0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	333c      	adds	r3, #60	@ 0x3c
 800f51c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	699b      	ldr	r3, [r3, #24]
 800f524:	4619      	mov	r1, r3
 800f526:	4610      	mov	r0, r2
 800f528:	f7ff fd3a 	bl	800efa0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	333c      	adds	r3, #60	@ 0x3c
 800f530:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	695b      	ldr	r3, [r3, #20]
 800f538:	4619      	mov	r1, r3
 800f53a:	4610      	mov	r0, r2
 800f53c:	f7ff fd30 	bl	800efa0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f544:	1c5a      	adds	r2, r3, #1
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	7858      	ldrb	r0, [r3, #1]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f558:	2301      	movs	r3, #1
 800f55a:	f7ff fc8d 	bl	800ee78 <disk_write>
			fs->fsi_flag = 0;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	785b      	ldrb	r3, [r3, #1]
 800f568:	2200      	movs	r2, #0
 800f56a:	2100      	movs	r1, #0
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7ff fca3 	bl	800eeb8 <disk_ioctl>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <sync_fs+0xcc>
 800f578:	2301      	movs	r3, #1
 800f57a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	41615252 	.word	0x41615252
 800f58c:	61417272 	.word	0x61417272

0800f590 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	3b02      	subs	r3, #2
 800f59e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6a1b      	ldr	r3, [r3, #32]
 800f5a4:	3b02      	subs	r3, #2
 800f5a6:	683a      	ldr	r2, [r7, #0]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d301      	bcc.n	800f5b0 <clust2sect+0x20>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	e008      	b.n	800f5c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	895b      	ldrh	r3, [r3, #10]
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	fb03 f202 	mul.w	r2, r3, r2
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5c0:	4413      	add	r3, r2
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	370c      	adds	r7, #12
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b086      	sub	sp, #24
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
 800f5d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d904      	bls.n	800f5ee <get_fat+0x20>
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	6a1b      	ldr	r3, [r3, #32]
 800f5e8:	683a      	ldr	r2, [r7, #0]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d302      	bcc.n	800f5f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	617b      	str	r3, [r7, #20]
 800f5f2:	e0ba      	b.n	800f76a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	2b03      	cmp	r3, #3
 800f600:	f000 8082 	beq.w	800f708 <get_fat+0x13a>
 800f604:	2b03      	cmp	r3, #3
 800f606:	f300 80a6 	bgt.w	800f756 <get_fat+0x188>
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d002      	beq.n	800f614 <get_fat+0x46>
 800f60e:	2b02      	cmp	r3, #2
 800f610:	d055      	beq.n	800f6be <get_fat+0xf0>
 800f612:	e0a0      	b.n	800f756 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	60fb      	str	r3, [r7, #12]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	085b      	lsrs	r3, r3, #1
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	4413      	add	r3, r2
 800f620:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	899b      	ldrh	r3, [r3, #12]
 800f62a:	4619      	mov	r1, r3
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f632:	4413      	add	r3, r2
 800f634:	4619      	mov	r1, r3
 800f636:	6938      	ldr	r0, [r7, #16]
 800f638:	f7ff ff0c 	bl	800f454 <move_window>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f040 808c 	bne.w	800f75c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	1c5a      	adds	r2, r3, #1
 800f648:	60fa      	str	r2, [r7, #12]
 800f64a:	693a      	ldr	r2, [r7, #16]
 800f64c:	8992      	ldrh	r2, [r2, #12]
 800f64e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f652:	fb01 f202 	mul.w	r2, r1, r2
 800f656:	1a9b      	subs	r3, r3, r2
 800f658:	693a      	ldr	r2, [r7, #16]
 800f65a:	4413      	add	r3, r2
 800f65c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f660:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	899b      	ldrh	r3, [r3, #12]
 800f66a:	4619      	mov	r1, r3
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f672:	4413      	add	r3, r2
 800f674:	4619      	mov	r1, r3
 800f676:	6938      	ldr	r0, [r7, #16]
 800f678:	f7ff feec 	bl	800f454 <move_window>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d16e      	bne.n	800f760 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	899b      	ldrh	r3, [r3, #12]
 800f686:	461a      	mov	r2, r3
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f68e:	fb01 f202 	mul.w	r2, r1, r2
 800f692:	1a9b      	subs	r3, r3, r2
 800f694:	693a      	ldr	r2, [r7, #16]
 800f696:	4413      	add	r3, r2
 800f698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f69c:	021b      	lsls	r3, r3, #8
 800f69e:	68ba      	ldr	r2, [r7, #8]
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	f003 0301 	and.w	r3, r3, #1
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d002      	beq.n	800f6b4 <get_fat+0xe6>
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	091b      	lsrs	r3, r3, #4
 800f6b2:	e002      	b.n	800f6ba <get_fat+0xec>
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f6ba:	617b      	str	r3, [r7, #20]
			break;
 800f6bc:	e055      	b.n	800f76a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	899b      	ldrh	r3, [r3, #12]
 800f6c6:	085b      	lsrs	r3, r3, #1
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6d2:	4413      	add	r3, r2
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	6938      	ldr	r0, [r7, #16]
 800f6d8:	f7ff febc 	bl	800f454 <move_window>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d140      	bne.n	800f764 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	005b      	lsls	r3, r3, #1
 800f6ec:	693a      	ldr	r2, [r7, #16]
 800f6ee:	8992      	ldrh	r2, [r2, #12]
 800f6f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f6f4:	fb00 f202 	mul.w	r2, r0, r2
 800f6f8:	1a9b      	subs	r3, r3, r2
 800f6fa:	440b      	add	r3, r1
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7ff fbf9 	bl	800eef4 <ld_word>
 800f702:	4603      	mov	r3, r0
 800f704:	617b      	str	r3, [r7, #20]
			break;
 800f706:	e030      	b.n	800f76a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	899b      	ldrh	r3, [r3, #12]
 800f710:	089b      	lsrs	r3, r3, #2
 800f712:	b29b      	uxth	r3, r3
 800f714:	4619      	mov	r1, r3
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	fbb3 f3f1 	udiv	r3, r3, r1
 800f71c:	4413      	add	r3, r2
 800f71e:	4619      	mov	r1, r3
 800f720:	6938      	ldr	r0, [r7, #16]
 800f722:	f7ff fe97 	bl	800f454 <move_window>
 800f726:	4603      	mov	r3, r0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d11d      	bne.n	800f768 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	693a      	ldr	r2, [r7, #16]
 800f738:	8992      	ldrh	r2, [r2, #12]
 800f73a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f73e:	fb00 f202 	mul.w	r2, r0, r2
 800f742:	1a9b      	subs	r3, r3, r2
 800f744:	440b      	add	r3, r1
 800f746:	4618      	mov	r0, r3
 800f748:	f7ff fbec 	bl	800ef24 <ld_dword>
 800f74c:	4603      	mov	r3, r0
 800f74e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f752:	617b      	str	r3, [r7, #20]
			break;
 800f754:	e009      	b.n	800f76a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f756:	2301      	movs	r3, #1
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	e006      	b.n	800f76a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f75c:	bf00      	nop
 800f75e:	e004      	b.n	800f76a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f760:	bf00      	nop
 800f762:	e002      	b.n	800f76a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f764:	bf00      	nop
 800f766:	e000      	b.n	800f76a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f768:	bf00      	nop
		}
	}

	return val;
 800f76a:	697b      	ldr	r3, [r7, #20]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3718      	adds	r7, #24
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f774:	b590      	push	{r4, r7, lr}
 800f776:	b089      	sub	sp, #36	@ 0x24
 800f778:	af00      	add	r7, sp, #0
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f780:	2302      	movs	r3, #2
 800f782:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	2b01      	cmp	r3, #1
 800f788:	f240 8109 	bls.w	800f99e <put_fat+0x22a>
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6a1b      	ldr	r3, [r3, #32]
 800f790:	68ba      	ldr	r2, [r7, #8]
 800f792:	429a      	cmp	r2, r3
 800f794:	f080 8103 	bcs.w	800f99e <put_fat+0x22a>
		switch (fs->fs_type) {
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	2b03      	cmp	r3, #3
 800f79e:	f000 80b6 	beq.w	800f90e <put_fat+0x19a>
 800f7a2:	2b03      	cmp	r3, #3
 800f7a4:	f300 80fb 	bgt.w	800f99e <put_fat+0x22a>
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d003      	beq.n	800f7b4 <put_fat+0x40>
 800f7ac:	2b02      	cmp	r3, #2
 800f7ae:	f000 8083 	beq.w	800f8b8 <put_fat+0x144>
 800f7b2:	e0f4      	b.n	800f99e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	61bb      	str	r3, [r7, #24]
 800f7b8:	69bb      	ldr	r3, [r7, #24]
 800f7ba:	085b      	lsrs	r3, r3, #1
 800f7bc:	69ba      	ldr	r2, [r7, #24]
 800f7be:	4413      	add	r3, r2
 800f7c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	899b      	ldrh	r3, [r3, #12]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	69bb      	ldr	r3, [r7, #24]
 800f7ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7d2:	4413      	add	r3, r2
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	68f8      	ldr	r0, [r7, #12]
 800f7d8:	f7ff fe3c 	bl	800f454 <move_window>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f7e0:	7ffb      	ldrb	r3, [r7, #31]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f040 80d4 	bne.w	800f990 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	1c5a      	adds	r2, r3, #1
 800f7f2:	61ba      	str	r2, [r7, #24]
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	8992      	ldrh	r2, [r2, #12]
 800f7f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7fc:	fb00 f202 	mul.w	r2, r0, r2
 800f800:	1a9b      	subs	r3, r3, r2
 800f802:	440b      	add	r3, r1
 800f804:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	f003 0301 	and.w	r3, r3, #1
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00d      	beq.n	800f82c <put_fat+0xb8>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	b25b      	sxtb	r3, r3
 800f816:	f003 030f 	and.w	r3, r3, #15
 800f81a:	b25a      	sxtb	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	011b      	lsls	r3, r3, #4
 800f822:	b25b      	sxtb	r3, r3
 800f824:	4313      	orrs	r3, r2
 800f826:	b25b      	sxtb	r3, r3
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	e001      	b.n	800f830 <put_fat+0xbc>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	697a      	ldr	r2, [r7, #20]
 800f832:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2201      	movs	r2, #1
 800f838:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	899b      	ldrh	r3, [r3, #12]
 800f842:	4619      	mov	r1, r3
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	fbb3 f3f1 	udiv	r3, r3, r1
 800f84a:	4413      	add	r3, r2
 800f84c:	4619      	mov	r1, r3
 800f84e:	68f8      	ldr	r0, [r7, #12]
 800f850:	f7ff fe00 	bl	800f454 <move_window>
 800f854:	4603      	mov	r3, r0
 800f856:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f858:	7ffb      	ldrb	r3, [r7, #31]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f040 809a 	bne.w	800f994 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	899b      	ldrh	r3, [r3, #12]
 800f86a:	461a      	mov	r2, r3
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f872:	fb00 f202 	mul.w	r2, r0, r2
 800f876:	1a9b      	subs	r3, r3, r2
 800f878:	440b      	add	r3, r1
 800f87a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	f003 0301 	and.w	r3, r3, #1
 800f882:	2b00      	cmp	r3, #0
 800f884:	d003      	beq.n	800f88e <put_fat+0x11a>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	091b      	lsrs	r3, r3, #4
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	e00e      	b.n	800f8ac <put_fat+0x138>
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	b25b      	sxtb	r3, r3
 800f894:	f023 030f 	bic.w	r3, r3, #15
 800f898:	b25a      	sxtb	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	0a1b      	lsrs	r3, r3, #8
 800f89e:	b25b      	sxtb	r3, r3
 800f8a0:	f003 030f 	and.w	r3, r3, #15
 800f8a4:	b25b      	sxtb	r3, r3
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	b25b      	sxtb	r3, r3
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	697a      	ldr	r2, [r7, #20]
 800f8ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	70da      	strb	r2, [r3, #3]
			break;
 800f8b6:	e072      	b.n	800f99e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	899b      	ldrh	r3, [r3, #12]
 800f8c0:	085b      	lsrs	r3, r3, #1
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8cc:	4413      	add	r3, r2
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f7ff fdbf 	bl	800f454 <move_window>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f8da:	7ffb      	ldrb	r3, [r7, #31]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d15b      	bne.n	800f998 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	005b      	lsls	r3, r3, #1
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	8992      	ldrh	r2, [r2, #12]
 800f8ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8f2:	fb00 f202 	mul.w	r2, r0, r2
 800f8f6:	1a9b      	subs	r3, r3, r2
 800f8f8:	440b      	add	r3, r1
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	b292      	uxth	r2, r2
 800f8fe:	4611      	mov	r1, r2
 800f900:	4618      	mov	r0, r3
 800f902:	f7ff fb32 	bl	800ef6a <st_word>
			fs->wflag = 1;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2201      	movs	r2, #1
 800f90a:	70da      	strb	r2, [r3, #3]
			break;
 800f90c:	e047      	b.n	800f99e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	899b      	ldrh	r3, [r3, #12]
 800f916:	089b      	lsrs	r3, r3, #2
 800f918:	b29b      	uxth	r3, r3
 800f91a:	4619      	mov	r1, r3
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f922:	4413      	add	r3, r2
 800f924:	4619      	mov	r1, r3
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	f7ff fd94 	bl	800f454 <move_window>
 800f92c:	4603      	mov	r3, r0
 800f92e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f930:	7ffb      	ldrb	r3, [r7, #31]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d132      	bne.n	800f99c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	8992      	ldrh	r2, [r2, #12]
 800f94a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f94e:	fb00 f202 	mul.w	r2, r0, r2
 800f952:	1a9b      	subs	r3, r3, r2
 800f954:	440b      	add	r3, r1
 800f956:	4618      	mov	r0, r3
 800f958:	f7ff fae4 	bl	800ef24 <ld_dword>
 800f95c:	4603      	mov	r3, r0
 800f95e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f962:	4323      	orrs	r3, r4
 800f964:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	8992      	ldrh	r2, [r2, #12]
 800f974:	fbb3 f0f2 	udiv	r0, r3, r2
 800f978:	fb00 f202 	mul.w	r2, r0, r2
 800f97c:	1a9b      	subs	r3, r3, r2
 800f97e:	440b      	add	r3, r1
 800f980:	6879      	ldr	r1, [r7, #4]
 800f982:	4618      	mov	r0, r3
 800f984:	f7ff fb0c 	bl	800efa0 <st_dword>
			fs->wflag = 1;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2201      	movs	r2, #1
 800f98c:	70da      	strb	r2, [r3, #3]
			break;
 800f98e:	e006      	b.n	800f99e <put_fat+0x22a>
			if (res != FR_OK) break;
 800f990:	bf00      	nop
 800f992:	e004      	b.n	800f99e <put_fat+0x22a>
			if (res != FR_OK) break;
 800f994:	bf00      	nop
 800f996:	e002      	b.n	800f99e <put_fat+0x22a>
			if (res != FR_OK) break;
 800f998:	bf00      	nop
 800f99a:	e000      	b.n	800f99e <put_fat+0x22a>
			if (res != FR_OK) break;
 800f99c:	bf00      	nop
		}
	}
	return res;
 800f99e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3724      	adds	r7, #36	@ 0x24
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd90      	pop	{r4, r7, pc}

0800f9a8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d904      	bls.n	800f9ce <remove_chain+0x26>
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	6a1b      	ldr	r3, [r3, #32]
 800f9c8:	68ba      	ldr	r2, [r7, #8]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d301      	bcc.n	800f9d2 <remove_chain+0x2a>
 800f9ce:	2302      	movs	r3, #2
 800f9d0:	e04b      	b.n	800fa6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00c      	beq.n	800f9f2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f9dc:	6879      	ldr	r1, [r7, #4]
 800f9de:	69b8      	ldr	r0, [r7, #24]
 800f9e0:	f7ff fec8 	bl	800f774 <put_fat>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f9e8:	7ffb      	ldrb	r3, [r7, #31]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d001      	beq.n	800f9f2 <remove_chain+0x4a>
 800f9ee:	7ffb      	ldrb	r3, [r7, #31]
 800f9f0:	e03b      	b.n	800fa6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f9f2:	68b9      	ldr	r1, [r7, #8]
 800f9f4:	68f8      	ldr	r0, [r7, #12]
 800f9f6:	f7ff fdea 	bl	800f5ce <get_fat>
 800f9fa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d031      	beq.n	800fa66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d101      	bne.n	800fa0c <remove_chain+0x64>
 800fa08:	2302      	movs	r3, #2
 800fa0a:	e02e      	b.n	800fa6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa12:	d101      	bne.n	800fa18 <remove_chain+0x70>
 800fa14:	2301      	movs	r3, #1
 800fa16:	e028      	b.n	800fa6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fa18:	2200      	movs	r2, #0
 800fa1a:	68b9      	ldr	r1, [r7, #8]
 800fa1c:	69b8      	ldr	r0, [r7, #24]
 800fa1e:	f7ff fea9 	bl	800f774 <put_fat>
 800fa22:	4603      	mov	r3, r0
 800fa24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fa26:	7ffb      	ldrb	r3, [r7, #31]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d001      	beq.n	800fa30 <remove_chain+0x88>
 800fa2c:	7ffb      	ldrb	r3, [r7, #31]
 800fa2e:	e01c      	b.n	800fa6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	699a      	ldr	r2, [r3, #24]
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	6a1b      	ldr	r3, [r3, #32]
 800fa38:	3b02      	subs	r3, #2
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d20b      	bcs.n	800fa56 <remove_chain+0xae>
			fs->free_clst++;
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	1c5a      	adds	r2, r3, #1
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	791b      	ldrb	r3, [r3, #4]
 800fa4c:	f043 0301 	orr.w	r3, r3, #1
 800fa50:	b2da      	uxtb	r2, r3
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	6a1b      	ldr	r3, [r3, #32]
 800fa5e:	68ba      	ldr	r2, [r7, #8]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d3c6      	bcc.n	800f9f2 <remove_chain+0x4a>
 800fa64:	e000      	b.n	800fa68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fa66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3720      	adds	r7, #32
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b088      	sub	sp, #32
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
 800fa7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d10d      	bne.n	800faa4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	695b      	ldr	r3, [r3, #20]
 800fa8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d004      	beq.n	800fa9e <create_chain+0x2c>
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	6a1b      	ldr	r3, [r3, #32]
 800fa98:	69ba      	ldr	r2, [r7, #24]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d31b      	bcc.n	800fad6 <create_chain+0x64>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	61bb      	str	r3, [r7, #24]
 800faa2:	e018      	b.n	800fad6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800faa4:	6839      	ldr	r1, [r7, #0]
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f7ff fd91 	bl	800f5ce <get_fat>
 800faac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d801      	bhi.n	800fab8 <create_chain+0x46>
 800fab4:	2301      	movs	r3, #1
 800fab6:	e070      	b.n	800fb9a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fabe:	d101      	bne.n	800fac4 <create_chain+0x52>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	e06a      	b.n	800fb9a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	6a1b      	ldr	r3, [r3, #32]
 800fac8:	68fa      	ldr	r2, [r7, #12]
 800faca:	429a      	cmp	r2, r3
 800facc:	d201      	bcs.n	800fad2 <create_chain+0x60>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	e063      	b.n	800fb9a <create_chain+0x128>
		scl = clst;
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	3301      	adds	r3, #1
 800fade:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	6a1b      	ldr	r3, [r3, #32]
 800fae4:	69fa      	ldr	r2, [r7, #28]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d307      	bcc.n	800fafa <create_chain+0x88>
				ncl = 2;
 800faea:	2302      	movs	r3, #2
 800faec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800faee:	69fa      	ldr	r2, [r7, #28]
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d901      	bls.n	800fafa <create_chain+0x88>
 800faf6:	2300      	movs	r3, #0
 800faf8:	e04f      	b.n	800fb9a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fafa:	69f9      	ldr	r1, [r7, #28]
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f7ff fd66 	bl	800f5ce <get_fat>
 800fb02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00e      	beq.n	800fb28 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d003      	beq.n	800fb18 <create_chain+0xa6>
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb16:	d101      	bne.n	800fb1c <create_chain+0xaa>
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	e03e      	b.n	800fb9a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fb1c:	69fa      	ldr	r2, [r7, #28]
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d1da      	bne.n	800fada <create_chain+0x68>
 800fb24:	2300      	movs	r3, #0
 800fb26:	e038      	b.n	800fb9a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fb28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fb2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2e:	69f9      	ldr	r1, [r7, #28]
 800fb30:	6938      	ldr	r0, [r7, #16]
 800fb32:	f7ff fe1f 	bl	800f774 <put_fat>
 800fb36:	4603      	mov	r3, r0
 800fb38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fb3a:	7dfb      	ldrb	r3, [r7, #23]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d109      	bne.n	800fb54 <create_chain+0xe2>
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d006      	beq.n	800fb54 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fb46:	69fa      	ldr	r2, [r7, #28]
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	6938      	ldr	r0, [r7, #16]
 800fb4c:	f7ff fe12 	bl	800f774 <put_fat>
 800fb50:	4603      	mov	r3, r0
 800fb52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fb54:	7dfb      	ldrb	r3, [r7, #23]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d116      	bne.n	800fb88 <create_chain+0x116>
		fs->last_clst = ncl;
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	69fa      	ldr	r2, [r7, #28]
 800fb5e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	699a      	ldr	r2, [r3, #24]
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	6a1b      	ldr	r3, [r3, #32]
 800fb68:	3b02      	subs	r3, #2
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d804      	bhi.n	800fb78 <create_chain+0x106>
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	699b      	ldr	r3, [r3, #24]
 800fb72:	1e5a      	subs	r2, r3, #1
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	791b      	ldrb	r3, [r3, #4]
 800fb7c:	f043 0301 	orr.w	r3, r3, #1
 800fb80:	b2da      	uxtb	r2, r3
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	711a      	strb	r2, [r3, #4]
 800fb86:	e007      	b.n	800fb98 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fb88:	7dfb      	ldrb	r3, [r7, #23]
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d102      	bne.n	800fb94 <create_chain+0x122>
 800fb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb92:	e000      	b.n	800fb96 <create_chain+0x124>
 800fb94:	2301      	movs	r3, #1
 800fb96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fb98:	69fb      	ldr	r3, [r7, #28]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3720      	adds	r7, #32
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fba2:	b480      	push	{r7}
 800fba4:	b087      	sub	sp, #28
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbb6:	3304      	adds	r3, #4
 800fbb8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	899b      	ldrh	r3, [r3, #12]
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	8952      	ldrh	r2, [r2, #10]
 800fbca:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	1d1a      	adds	r2, r3, #4
 800fbd4:	613a      	str	r2, [r7, #16]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d101      	bne.n	800fbe4 <clmt_clust+0x42>
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	e010      	b.n	800fc06 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fbe4:	697a      	ldr	r2, [r7, #20]
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d307      	bcc.n	800fbfc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fbec:	697a      	ldr	r2, [r7, #20]
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	617b      	str	r3, [r7, #20]
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fbfa:	e7e9      	b.n	800fbd0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fbfc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	4413      	add	r3, r2
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	371c      	adds	r7, #28
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fc12:	b580      	push	{r7, lr}
 800fc14:	b086      	sub	sp, #24
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
 800fc1a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fc28:	d204      	bcs.n	800fc34 <dir_sdi+0x22>
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	f003 031f 	and.w	r3, r3, #31
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d001      	beq.n	800fc38 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fc34:	2302      	movs	r3, #2
 800fc36:	e071      	b.n	800fd1c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	683a      	ldr	r2, [r7, #0]
 800fc3c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d106      	bne.n	800fc58 <dir_sdi+0x46>
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	2b02      	cmp	r3, #2
 800fc50:	d902      	bls.n	800fc58 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc56:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d10c      	bne.n	800fc78 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	095b      	lsrs	r3, r3, #5
 800fc62:	693a      	ldr	r2, [r7, #16]
 800fc64:	8912      	ldrh	r2, [r2, #8]
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d301      	bcc.n	800fc6e <dir_sdi+0x5c>
 800fc6a:	2302      	movs	r3, #2
 800fc6c:	e056      	b.n	800fd1c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	61da      	str	r2, [r3, #28]
 800fc76:	e02d      	b.n	800fcd4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	895b      	ldrh	r3, [r3, #10]
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	899b      	ldrh	r3, [r3, #12]
 800fc82:	fb02 f303 	mul.w	r3, r2, r3
 800fc86:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fc88:	e019      	b.n	800fcbe <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6979      	ldr	r1, [r7, #20]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7ff fc9d 	bl	800f5ce <get_fat>
 800fc94:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc9c:	d101      	bne.n	800fca2 <dir_sdi+0x90>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	e03c      	b.n	800fd1c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d904      	bls.n	800fcb2 <dir_sdi+0xa0>
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	6a1b      	ldr	r3, [r3, #32]
 800fcac:	697a      	ldr	r2, [r7, #20]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d301      	bcc.n	800fcb6 <dir_sdi+0xa4>
 800fcb2:	2302      	movs	r3, #2
 800fcb4:	e032      	b.n	800fd1c <dir_sdi+0x10a>
			ofs -= csz;
 800fcb6:	683a      	ldr	r2, [r7, #0]
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	1ad3      	subs	r3, r2, r3
 800fcbc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fcbe:	683a      	ldr	r2, [r7, #0]
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d2e1      	bcs.n	800fc8a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fcc6:	6979      	ldr	r1, [r7, #20]
 800fcc8:	6938      	ldr	r0, [r7, #16]
 800fcca:	f7ff fc61 	bl	800f590 <clust2sect>
 800fcce:	4602      	mov	r2, r0
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	697a      	ldr	r2, [r7, #20]
 800fcd8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	69db      	ldr	r3, [r3, #28]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d101      	bne.n	800fce6 <dir_sdi+0xd4>
 800fce2:	2302      	movs	r3, #2
 800fce4:	e01a      	b.n	800fd1c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	69da      	ldr	r2, [r3, #28]
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	899b      	ldrh	r3, [r3, #12]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fcf6:	441a      	add	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	899b      	ldrh	r3, [r3, #12]
 800fd06:	461a      	mov	r2, r3
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd0e:	fb00 f202 	mul.w	r2, r0, r2
 800fd12:	1a9b      	subs	r3, r3, r2
 800fd14:	18ca      	adds	r2, r1, r3
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fd1a:	2300      	movs	r3, #0
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3718      	adds	r7, #24
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b086      	sub	sp, #24
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	695b      	ldr	r3, [r3, #20]
 800fd38:	3320      	adds	r3, #32
 800fd3a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	69db      	ldr	r3, [r3, #28]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d003      	beq.n	800fd4c <dir_next+0x28>
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fd4a:	d301      	bcc.n	800fd50 <dir_next+0x2c>
 800fd4c:	2304      	movs	r3, #4
 800fd4e:	e0bb      	b.n	800fec8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	899b      	ldrh	r3, [r3, #12]
 800fd54:	461a      	mov	r2, r3
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd5c:	fb01 f202 	mul.w	r2, r1, r2
 800fd60:	1a9b      	subs	r3, r3, r2
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	f040 809d 	bne.w	800fea2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	69db      	ldr	r3, [r3, #28]
 800fd6c:	1c5a      	adds	r2, r3, #1
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	699b      	ldr	r3, [r3, #24]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d10b      	bne.n	800fd92 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	095b      	lsrs	r3, r3, #5
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	8912      	ldrh	r2, [r2, #8]
 800fd82:	4293      	cmp	r3, r2
 800fd84:	f0c0 808d 	bcc.w	800fea2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	61da      	str	r2, [r3, #28]
 800fd8e:	2304      	movs	r3, #4
 800fd90:	e09a      	b.n	800fec8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	899b      	ldrh	r3, [r3, #12]
 800fd96:	461a      	mov	r2, r3
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	8952      	ldrh	r2, [r2, #10]
 800fda2:	3a01      	subs	r2, #1
 800fda4:	4013      	ands	r3, r2
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d17b      	bne.n	800fea2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	699b      	ldr	r3, [r3, #24]
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	4610      	mov	r0, r2
 800fdb4:	f7ff fc0b 	bl	800f5ce <get_fat>
 800fdb8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d801      	bhi.n	800fdc4 <dir_next+0xa0>
 800fdc0:	2302      	movs	r3, #2
 800fdc2:	e081      	b.n	800fec8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdca:	d101      	bne.n	800fdd0 <dir_next+0xac>
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e07b      	b.n	800fec8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	6a1b      	ldr	r3, [r3, #32]
 800fdd4:	697a      	ldr	r2, [r7, #20]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d359      	bcc.n	800fe8e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d104      	bne.n	800fdea <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2200      	movs	r2, #0
 800fde4:	61da      	str	r2, [r3, #28]
 800fde6:	2304      	movs	r3, #4
 800fde8:	e06e      	b.n	800fec8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	699b      	ldr	r3, [r3, #24]
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	f7ff fe3d 	bl	800fa72 <create_chain>
 800fdf8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d101      	bne.n	800fe04 <dir_next+0xe0>
 800fe00:	2307      	movs	r3, #7
 800fe02:	e061      	b.n	800fec8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d101      	bne.n	800fe0e <dir_next+0xea>
 800fe0a:	2302      	movs	r3, #2
 800fe0c:	e05c      	b.n	800fec8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe14:	d101      	bne.n	800fe1a <dir_next+0xf6>
 800fe16:	2301      	movs	r3, #1
 800fe18:	e056      	b.n	800fec8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f7ff fad6 	bl	800f3cc <sync_window>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d001      	beq.n	800fe2a <dir_next+0x106>
 800fe26:	2301      	movs	r3, #1
 800fe28:	e04e      	b.n	800fec8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	899b      	ldrh	r3, [r3, #12]
 800fe34:	461a      	mov	r2, r3
 800fe36:	2100      	movs	r1, #0
 800fe38:	f7ff f8ff 	bl	800f03a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	613b      	str	r3, [r7, #16]
 800fe40:	6979      	ldr	r1, [r7, #20]
 800fe42:	68f8      	ldr	r0, [r7, #12]
 800fe44:	f7ff fba4 	bl	800f590 <clust2sect>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	639a      	str	r2, [r3, #56]	@ 0x38
 800fe4e:	e012      	b.n	800fe76 <dir_next+0x152>
						fs->wflag = 1;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2201      	movs	r2, #1
 800fe54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f7ff fab8 	bl	800f3cc <sync_window>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d001      	beq.n	800fe66 <dir_next+0x142>
 800fe62:	2301      	movs	r3, #1
 800fe64:	e030      	b.n	800fec8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	3301      	adds	r3, #1
 800fe6a:	613b      	str	r3, [r7, #16]
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe70:	1c5a      	adds	r2, r3, #1
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	639a      	str	r2, [r3, #56]	@ 0x38
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	895b      	ldrh	r3, [r3, #10]
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d3e6      	bcc.n	800fe50 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	1ad2      	subs	r2, r2, r3
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fe94:	6979      	ldr	r1, [r7, #20]
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f7ff fb7a 	bl	800f590 <clust2sect>
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	68ba      	ldr	r2, [r7, #8]
 800fea6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	899b      	ldrh	r3, [r3, #12]
 800feb2:	461a      	mov	r2, r3
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800feba:	fb00 f202 	mul.w	r2, r0, r2
 800febe:	1a9b      	subs	r3, r3, r2
 800fec0:	18ca      	adds	r2, r1, r3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fec6:	2300      	movs	r3, #0
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3718      	adds	r7, #24
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fee0:	2100      	movs	r1, #0
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7ff fe95 	bl	800fc12 <dir_sdi>
 800fee8:	4603      	mov	r3, r0
 800feea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800feec:	7dfb      	ldrb	r3, [r7, #23]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d12b      	bne.n	800ff4a <dir_alloc+0x7a>
		n = 0;
 800fef2:	2300      	movs	r3, #0
 800fef4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	69db      	ldr	r3, [r3, #28]
 800fefa:	4619      	mov	r1, r3
 800fefc:	68f8      	ldr	r0, [r7, #12]
 800fefe:	f7ff faa9 	bl	800f454 <move_window>
 800ff02:	4603      	mov	r3, r0
 800ff04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d11d      	bne.n	800ff48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6a1b      	ldr	r3, [r3, #32]
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	2be5      	cmp	r3, #229	@ 0xe5
 800ff14:	d004      	beq.n	800ff20 <dir_alloc+0x50>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a1b      	ldr	r3, [r3, #32]
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d107      	bne.n	800ff30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	3301      	adds	r3, #1
 800ff24:	613b      	str	r3, [r7, #16]
 800ff26:	693a      	ldr	r2, [r7, #16]
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d102      	bne.n	800ff34 <dir_alloc+0x64>
 800ff2e:	e00c      	b.n	800ff4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ff30:	2300      	movs	r3, #0
 800ff32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ff34:	2101      	movs	r1, #1
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7ff fef4 	bl	800fd24 <dir_next>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ff40:	7dfb      	ldrb	r3, [r7, #23]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d0d7      	beq.n	800fef6 <dir_alloc+0x26>
 800ff46:	e000      	b.n	800ff4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ff48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ff4a:	7dfb      	ldrb	r3, [r7, #23]
 800ff4c:	2b04      	cmp	r3, #4
 800ff4e:	d101      	bne.n	800ff54 <dir_alloc+0x84>
 800ff50:	2307      	movs	r3, #7
 800ff52:	75fb      	strb	r3, [r7, #23]
	return res;
 800ff54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3718      	adds	r7, #24
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b084      	sub	sp, #16
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
 800ff66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	331a      	adds	r3, #26
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fe ffc1 	bl	800eef4 <ld_word>
 800ff72:	4603      	mov	r3, r0
 800ff74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d109      	bne.n	800ff92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	3314      	adds	r3, #20
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fe ffb6 	bl	800eef4 <ld_word>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	041b      	lsls	r3, r3, #16
 800ff8c:	68fa      	ldr	r2, [r7, #12]
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ff92:	68fb      	ldr	r3, [r7, #12]
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}

0800ff9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	331a      	adds	r3, #26
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	b292      	uxth	r2, r2
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fe ffd9 	bl	800ef6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	2b03      	cmp	r3, #3
 800ffbe:	d109      	bne.n	800ffd4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	f103 0214 	add.w	r2, r3, #20
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	0c1b      	lsrs	r3, r3, #16
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	4619      	mov	r1, r3
 800ffce:	4610      	mov	r0, r2
 800ffd0:	f7fe ffcb 	bl	800ef6a <st_word>
	}
}
 800ffd4:	bf00      	nop
 800ffd6:	3710      	adds	r7, #16
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ffdc:	b590      	push	{r4, r7, lr}
 800ffde:	b087      	sub	sp, #28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	331a      	adds	r3, #26
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fe ff82 	bl	800eef4 <ld_word>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d001      	beq.n	800fffa <cmp_lfn+0x1e>
 800fff6:	2300      	movs	r3, #0
 800fff8:	e059      	b.n	80100ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010002:	1e5a      	subs	r2, r3, #1
 8010004:	4613      	mov	r3, r2
 8010006:	005b      	lsls	r3, r3, #1
 8010008:	4413      	add	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4413      	add	r3, r2
 801000e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010010:	2301      	movs	r3, #1
 8010012:	81fb      	strh	r3, [r7, #14]
 8010014:	2300      	movs	r3, #0
 8010016:	613b      	str	r3, [r7, #16]
 8010018:	e033      	b.n	8010082 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801001a:	4a27      	ldr	r2, [pc, #156]	@ (80100b8 <cmp_lfn+0xdc>)
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	4413      	add	r3, r2
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	461a      	mov	r2, r3
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	4413      	add	r3, r2
 8010028:	4618      	mov	r0, r3
 801002a:	f7fe ff63 	bl	800eef4 <ld_word>
 801002e:	4603      	mov	r3, r0
 8010030:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010032:	89fb      	ldrh	r3, [r7, #14]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d01a      	beq.n	801006e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	2bfe      	cmp	r3, #254	@ 0xfe
 801003c:	d812      	bhi.n	8010064 <cmp_lfn+0x88>
 801003e:	89bb      	ldrh	r3, [r7, #12]
 8010040:	4618      	mov	r0, r3
 8010042:	f002 fa9b 	bl	801257c <ff_wtoupper>
 8010046:	4603      	mov	r3, r0
 8010048:	461c      	mov	r4, r3
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	1c5a      	adds	r2, r3, #1
 801004e:	617a      	str	r2, [r7, #20]
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	4413      	add	r3, r2
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	4618      	mov	r0, r3
 801005a:	f002 fa8f 	bl	801257c <ff_wtoupper>
 801005e:	4603      	mov	r3, r0
 8010060:	429c      	cmp	r4, r3
 8010062:	d001      	beq.n	8010068 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010064:	2300      	movs	r3, #0
 8010066:	e022      	b.n	80100ae <cmp_lfn+0xd2>
			}
			wc = uc;
 8010068:	89bb      	ldrh	r3, [r7, #12]
 801006a:	81fb      	strh	r3, [r7, #14]
 801006c:	e006      	b.n	801007c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801006e:	89bb      	ldrh	r3, [r7, #12]
 8010070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010074:	4293      	cmp	r3, r2
 8010076:	d001      	beq.n	801007c <cmp_lfn+0xa0>
 8010078:	2300      	movs	r3, #0
 801007a:	e018      	b.n	80100ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	3301      	adds	r3, #1
 8010080:	613b      	str	r3, [r7, #16]
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	2b0c      	cmp	r3, #12
 8010086:	d9c8      	bls.n	801001a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00b      	beq.n	80100ac <cmp_lfn+0xd0>
 8010094:	89fb      	ldrh	r3, [r7, #14]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d008      	beq.n	80100ac <cmp_lfn+0xd0>
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	005b      	lsls	r3, r3, #1
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	4413      	add	r3, r2
 80100a2:	881b      	ldrh	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d001      	beq.n	80100ac <cmp_lfn+0xd0>
 80100a8:	2300      	movs	r3, #0
 80100aa:	e000      	b.n	80100ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80100ac:	2301      	movs	r3, #1
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	371c      	adds	r7, #28
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd90      	pop	{r4, r7, pc}
 80100b6:	bf00      	nop
 80100b8:	08012b20 	.word	0x08012b20

080100bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b088      	sub	sp, #32
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	4611      	mov	r1, r2
 80100c8:	461a      	mov	r2, r3
 80100ca:	460b      	mov	r3, r1
 80100cc:	71fb      	strb	r3, [r7, #7]
 80100ce:	4613      	mov	r3, r2
 80100d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	330d      	adds	r3, #13
 80100d6:	79ba      	ldrb	r2, [r7, #6]
 80100d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	330b      	adds	r3, #11
 80100de:	220f      	movs	r2, #15
 80100e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	330c      	adds	r3, #12
 80100e6:	2200      	movs	r2, #0
 80100e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	331a      	adds	r3, #26
 80100ee:	2100      	movs	r1, #0
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fe ff3a 	bl	800ef6a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80100f6:	79fb      	ldrb	r3, [r7, #7]
 80100f8:	1e5a      	subs	r2, r3, #1
 80100fa:	4613      	mov	r3, r2
 80100fc:	005b      	lsls	r3, r3, #1
 80100fe:	4413      	add	r3, r2
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	4413      	add	r3, r2
 8010104:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010106:	2300      	movs	r3, #0
 8010108:	82fb      	strh	r3, [r7, #22]
 801010a:	2300      	movs	r3, #0
 801010c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801010e:	8afb      	ldrh	r3, [r7, #22]
 8010110:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010114:	4293      	cmp	r3, r2
 8010116:	d007      	beq.n	8010128 <put_lfn+0x6c>
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	1c5a      	adds	r2, r3, #1
 801011c:	61fa      	str	r2, [r7, #28]
 801011e:	005b      	lsls	r3, r3, #1
 8010120:	68fa      	ldr	r2, [r7, #12]
 8010122:	4413      	add	r3, r2
 8010124:	881b      	ldrh	r3, [r3, #0]
 8010126:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010128:	4a17      	ldr	r2, [pc, #92]	@ (8010188 <put_lfn+0xcc>)
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	4413      	add	r3, r2
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	461a      	mov	r2, r3
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	4413      	add	r3, r2
 8010136:	8afa      	ldrh	r2, [r7, #22]
 8010138:	4611      	mov	r1, r2
 801013a:	4618      	mov	r0, r3
 801013c:	f7fe ff15 	bl	800ef6a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010140:	8afb      	ldrh	r3, [r7, #22]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d102      	bne.n	801014c <put_lfn+0x90>
 8010146:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801014a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	3301      	adds	r3, #1
 8010150:	61bb      	str	r3, [r7, #24]
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	2b0c      	cmp	r3, #12
 8010156:	d9da      	bls.n	801010e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010158:	8afb      	ldrh	r3, [r7, #22]
 801015a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801015e:	4293      	cmp	r3, r2
 8010160:	d006      	beq.n	8010170 <put_lfn+0xb4>
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	005b      	lsls	r3, r3, #1
 8010166:	68fa      	ldr	r2, [r7, #12]
 8010168:	4413      	add	r3, r2
 801016a:	881b      	ldrh	r3, [r3, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d103      	bne.n	8010178 <put_lfn+0xbc>
 8010170:	79fb      	ldrb	r3, [r7, #7]
 8010172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010176:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	79fa      	ldrb	r2, [r7, #7]
 801017c:	701a      	strb	r2, [r3, #0]
}
 801017e:	bf00      	nop
 8010180:	3720      	adds	r7, #32
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	08012b20 	.word	0x08012b20

0801018c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b08c      	sub	sp, #48	@ 0x30
 8010190:	af00      	add	r7, sp, #0
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
 8010198:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801019a:	220b      	movs	r2, #11
 801019c:	68b9      	ldr	r1, [r7, #8]
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	f7fe ff2a 	bl	800eff8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	2b05      	cmp	r3, #5
 80101a8:	d929      	bls.n	80101fe <gen_numname+0x72>
		sr = seq;
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80101ae:	e020      	b.n	80101f2 <gen_numname+0x66>
			wc = *lfn++;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	1c9a      	adds	r2, r3, #2
 80101b4:	607a      	str	r2, [r7, #4]
 80101b6:	881b      	ldrh	r3, [r3, #0]
 80101b8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80101ba:	2300      	movs	r3, #0
 80101bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101be:	e015      	b.n	80101ec <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	005a      	lsls	r2, r3, #1
 80101c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80101c6:	f003 0301 	and.w	r3, r3, #1
 80101ca:	4413      	add	r3, r2
 80101cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80101ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80101d0:	085b      	lsrs	r3, r3, #1
 80101d2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d003      	beq.n	80101e6 <gen_numname+0x5a>
 80101de:	69fa      	ldr	r2, [r7, #28]
 80101e0:	4b30      	ldr	r3, [pc, #192]	@ (80102a4 <gen_numname+0x118>)
 80101e2:	4053      	eors	r3, r2
 80101e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80101e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101e8:	3301      	adds	r3, #1
 80101ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ee:	2b0f      	cmp	r3, #15
 80101f0:	d9e6      	bls.n	80101c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	881b      	ldrh	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d1da      	bne.n	80101b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80101fe:	2307      	movs	r3, #7
 8010200:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	b2db      	uxtb	r3, r3
 8010206:	f003 030f 	and.w	r3, r3, #15
 801020a:	b2db      	uxtb	r3, r3
 801020c:	3330      	adds	r3, #48	@ 0x30
 801020e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8010212:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010216:	2b39      	cmp	r3, #57	@ 0x39
 8010218:	d904      	bls.n	8010224 <gen_numname+0x98>
 801021a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801021e:	3307      	adds	r3, #7
 8010220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8010224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010226:	1e5a      	subs	r2, r3, #1
 8010228:	62ba      	str	r2, [r7, #40]	@ 0x28
 801022a:	3330      	adds	r3, #48	@ 0x30
 801022c:	443b      	add	r3, r7
 801022e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010232:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	091b      	lsrs	r3, r3, #4
 801023a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d1df      	bne.n	8010202 <gen_numname+0x76>
	ns[i] = '~';
 8010242:	f107 0214 	add.w	r2, r7, #20
 8010246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010248:	4413      	add	r3, r2
 801024a:	227e      	movs	r2, #126	@ 0x7e
 801024c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801024e:	2300      	movs	r3, #0
 8010250:	627b      	str	r3, [r7, #36]	@ 0x24
 8010252:	e002      	b.n	801025a <gen_numname+0xce>
 8010254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010256:	3301      	adds	r3, #1
 8010258:	627b      	str	r3, [r7, #36]	@ 0x24
 801025a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801025c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801025e:	429a      	cmp	r2, r3
 8010260:	d205      	bcs.n	801026e <gen_numname+0xe2>
 8010262:	68fa      	ldr	r2, [r7, #12]
 8010264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010266:	4413      	add	r3, r2
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	2b20      	cmp	r3, #32
 801026c:	d1f2      	bne.n	8010254 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801026e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010270:	2b07      	cmp	r3, #7
 8010272:	d807      	bhi.n	8010284 <gen_numname+0xf8>
 8010274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010276:	1c5a      	adds	r2, r3, #1
 8010278:	62ba      	str	r2, [r7, #40]	@ 0x28
 801027a:	3330      	adds	r3, #48	@ 0x30
 801027c:	443b      	add	r3, r7
 801027e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010282:	e000      	b.n	8010286 <gen_numname+0xfa>
 8010284:	2120      	movs	r1, #32
 8010286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010288:	1c5a      	adds	r2, r3, #1
 801028a:	627a      	str	r2, [r7, #36]	@ 0x24
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	4413      	add	r3, r2
 8010290:	460a      	mov	r2, r1
 8010292:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010296:	2b07      	cmp	r3, #7
 8010298:	d9e9      	bls.n	801026e <gen_numname+0xe2>
}
 801029a:	bf00      	nop
 801029c:	bf00      	nop
 801029e:	3730      	adds	r7, #48	@ 0x30
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}
 80102a4:	00011021 	.word	0x00011021

080102a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80102b0:	2300      	movs	r3, #0
 80102b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80102b4:	230b      	movs	r3, #11
 80102b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80102b8:	7bfb      	ldrb	r3, [r7, #15]
 80102ba:	b2da      	uxtb	r2, r3
 80102bc:	0852      	lsrs	r2, r2, #1
 80102be:	01db      	lsls	r3, r3, #7
 80102c0:	4313      	orrs	r3, r2
 80102c2:	b2da      	uxtb	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	1c59      	adds	r1, r3, #1
 80102c8:	6079      	str	r1, [r7, #4]
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	4413      	add	r3, r2
 80102ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	3b01      	subs	r3, #1
 80102d4:	60bb      	str	r3, [r7, #8]
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d1ed      	bne.n	80102b8 <sum_sfn+0x10>
	return sum;
 80102dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3714      	adds	r7, #20
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr

080102ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b086      	sub	sp, #24
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80102f8:	2100      	movs	r1, #0
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f7ff fc89 	bl	800fc12 <dir_sdi>
 8010300:	4603      	mov	r3, r0
 8010302:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010304:	7dfb      	ldrb	r3, [r7, #23]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d001      	beq.n	801030e <dir_find+0x24>
 801030a:	7dfb      	ldrb	r3, [r7, #23]
 801030c:	e0a9      	b.n	8010462 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801030e:	23ff      	movs	r3, #255	@ 0xff
 8010310:	753b      	strb	r3, [r7, #20]
 8010312:	7d3b      	ldrb	r3, [r7, #20]
 8010314:	757b      	strb	r3, [r7, #21]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f04f 32ff 	mov.w	r2, #4294967295
 801031c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	69db      	ldr	r3, [r3, #28]
 8010322:	4619      	mov	r1, r3
 8010324:	6938      	ldr	r0, [r7, #16]
 8010326:	f7ff f895 	bl	800f454 <move_window>
 801032a:	4603      	mov	r3, r0
 801032c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801032e:	7dfb      	ldrb	r3, [r7, #23]
 8010330:	2b00      	cmp	r3, #0
 8010332:	f040 8090 	bne.w	8010456 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6a1b      	ldr	r3, [r3, #32]
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801033e:	7dbb      	ldrb	r3, [r7, #22]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d102      	bne.n	801034a <dir_find+0x60>
 8010344:	2304      	movs	r3, #4
 8010346:	75fb      	strb	r3, [r7, #23]
 8010348:	e08a      	b.n	8010460 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6a1b      	ldr	r3, [r3, #32]
 801034e:	330b      	adds	r3, #11
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010356:	73fb      	strb	r3, [r7, #15]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	7bfa      	ldrb	r2, [r7, #15]
 801035c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801035e:	7dbb      	ldrb	r3, [r7, #22]
 8010360:	2be5      	cmp	r3, #229	@ 0xe5
 8010362:	d007      	beq.n	8010374 <dir_find+0x8a>
 8010364:	7bfb      	ldrb	r3, [r7, #15]
 8010366:	f003 0308 	and.w	r3, r3, #8
 801036a:	2b00      	cmp	r3, #0
 801036c:	d009      	beq.n	8010382 <dir_find+0x98>
 801036e:	7bfb      	ldrb	r3, [r7, #15]
 8010370:	2b0f      	cmp	r3, #15
 8010372:	d006      	beq.n	8010382 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010374:	23ff      	movs	r3, #255	@ 0xff
 8010376:	757b      	strb	r3, [r7, #21]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f04f 32ff 	mov.w	r2, #4294967295
 801037e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010380:	e05e      	b.n	8010440 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010382:	7bfb      	ldrb	r3, [r7, #15]
 8010384:	2b0f      	cmp	r3, #15
 8010386:	d136      	bne.n	80103f6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801038e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010392:	2b00      	cmp	r3, #0
 8010394:	d154      	bne.n	8010440 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010396:	7dbb      	ldrb	r3, [r7, #22]
 8010398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801039c:	2b00      	cmp	r3, #0
 801039e:	d00d      	beq.n	80103bc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6a1b      	ldr	r3, [r3, #32]
 80103a4:	7b5b      	ldrb	r3, [r3, #13]
 80103a6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80103a8:	7dbb      	ldrb	r3, [r7, #22]
 80103aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103ae:	75bb      	strb	r3, [r7, #22]
 80103b0:	7dbb      	ldrb	r3, [r7, #22]
 80103b2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	695a      	ldr	r2, [r3, #20]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80103bc:	7dba      	ldrb	r2, [r7, #22]
 80103be:	7d7b      	ldrb	r3, [r7, #21]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d115      	bne.n	80103f0 <dir_find+0x106>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6a1b      	ldr	r3, [r3, #32]
 80103c8:	330d      	adds	r3, #13
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	7d3a      	ldrb	r2, [r7, #20]
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d10e      	bne.n	80103f0 <dir_find+0x106>
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	691a      	ldr	r2, [r3, #16]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6a1b      	ldr	r3, [r3, #32]
 80103da:	4619      	mov	r1, r3
 80103dc:	4610      	mov	r0, r2
 80103de:	f7ff fdfd 	bl	800ffdc <cmp_lfn>
 80103e2:	4603      	mov	r3, r0
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d003      	beq.n	80103f0 <dir_find+0x106>
 80103e8:	7d7b      	ldrb	r3, [r7, #21]
 80103ea:	3b01      	subs	r3, #1
 80103ec:	b2db      	uxtb	r3, r3
 80103ee:	e000      	b.n	80103f2 <dir_find+0x108>
 80103f0:	23ff      	movs	r3, #255	@ 0xff
 80103f2:	757b      	strb	r3, [r7, #21]
 80103f4:	e024      	b.n	8010440 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80103f6:	7d7b      	ldrb	r3, [r7, #21]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d109      	bne.n	8010410 <dir_find+0x126>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6a1b      	ldr	r3, [r3, #32]
 8010400:	4618      	mov	r0, r3
 8010402:	f7ff ff51 	bl	80102a8 <sum_sfn>
 8010406:	4603      	mov	r3, r0
 8010408:	461a      	mov	r2, r3
 801040a:	7d3b      	ldrb	r3, [r7, #20]
 801040c:	4293      	cmp	r3, r2
 801040e:	d024      	beq.n	801045a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010416:	f003 0301 	and.w	r3, r3, #1
 801041a:	2b00      	cmp	r3, #0
 801041c:	d10a      	bne.n	8010434 <dir_find+0x14a>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a18      	ldr	r0, [r3, #32]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	3324      	adds	r3, #36	@ 0x24
 8010426:	220b      	movs	r2, #11
 8010428:	4619      	mov	r1, r3
 801042a:	f7fe fe21 	bl	800f070 <mem_cmp>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d014      	beq.n	801045e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010434:	23ff      	movs	r3, #255	@ 0xff
 8010436:	757b      	strb	r3, [r7, #21]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f04f 32ff 	mov.w	r2, #4294967295
 801043e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010440:	2100      	movs	r1, #0
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f7ff fc6e 	bl	800fd24 <dir_next>
 8010448:	4603      	mov	r3, r0
 801044a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801044c:	7dfb      	ldrb	r3, [r7, #23]
 801044e:	2b00      	cmp	r3, #0
 8010450:	f43f af65 	beq.w	801031e <dir_find+0x34>
 8010454:	e004      	b.n	8010460 <dir_find+0x176>
		if (res != FR_OK) break;
 8010456:	bf00      	nop
 8010458:	e002      	b.n	8010460 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801045a:	bf00      	nop
 801045c:	e000      	b.n	8010460 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801045e:	bf00      	nop

	return res;
 8010460:	7dfb      	ldrb	r3, [r7, #23]
}
 8010462:	4618      	mov	r0, r3
 8010464:	3718      	adds	r7, #24
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
	...

0801046c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b08c      	sub	sp, #48	@ 0x30
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010480:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d001      	beq.n	801048c <dir_register+0x20>
 8010488:	2306      	movs	r3, #6
 801048a:	e0e0      	b.n	801064e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801048c:	2300      	movs	r3, #0
 801048e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010490:	e002      	b.n	8010498 <dir_register+0x2c>
 8010492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010494:	3301      	adds	r3, #1
 8010496:	627b      	str	r3, [r7, #36]	@ 0x24
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	691a      	ldr	r2, [r3, #16]
 801049c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801049e:	005b      	lsls	r3, r3, #1
 80104a0:	4413      	add	r3, r2
 80104a2:	881b      	ldrh	r3, [r3, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d1f4      	bne.n	8010492 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80104ae:	f107 030c 	add.w	r3, r7, #12
 80104b2:	220c      	movs	r2, #12
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7fe fd9f 	bl	800eff8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80104ba:	7dfb      	ldrb	r3, [r7, #23]
 80104bc:	f003 0301 	and.w	r3, r3, #1
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d032      	beq.n	801052a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2240      	movs	r2, #64	@ 0x40
 80104c8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80104cc:	2301      	movs	r3, #1
 80104ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80104d0:	e016      	b.n	8010500 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	691a      	ldr	r2, [r3, #16]
 80104dc:	f107 010c 	add.w	r1, r7, #12
 80104e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104e2:	f7ff fe53 	bl	801018c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f7ff feff 	bl	80102ea <dir_find>
 80104ec:	4603      	mov	r3, r0
 80104ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80104f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d106      	bne.n	8010508 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80104fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104fc:	3301      	adds	r3, #1
 80104fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010502:	2b63      	cmp	r3, #99	@ 0x63
 8010504:	d9e5      	bls.n	80104d2 <dir_register+0x66>
 8010506:	e000      	b.n	801050a <dir_register+0x9e>
			if (res != FR_OK) break;
 8010508:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801050a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801050c:	2b64      	cmp	r3, #100	@ 0x64
 801050e:	d101      	bne.n	8010514 <dir_register+0xa8>
 8010510:	2307      	movs	r3, #7
 8010512:	e09c      	b.n	801064e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010514:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010518:	2b04      	cmp	r3, #4
 801051a:	d002      	beq.n	8010522 <dir_register+0xb6>
 801051c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010520:	e095      	b.n	801064e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010522:	7dfa      	ldrb	r2, [r7, #23]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801052a:	7dfb      	ldrb	r3, [r7, #23]
 801052c:	f003 0302 	and.w	r3, r3, #2
 8010530:	2b00      	cmp	r3, #0
 8010532:	d007      	beq.n	8010544 <dir_register+0xd8>
 8010534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010536:	330c      	adds	r3, #12
 8010538:	4a47      	ldr	r2, [pc, #284]	@ (8010658 <dir_register+0x1ec>)
 801053a:	fba2 2303 	umull	r2, r3, r2, r3
 801053e:	089b      	lsrs	r3, r3, #2
 8010540:	3301      	adds	r3, #1
 8010542:	e000      	b.n	8010546 <dir_register+0xda>
 8010544:	2301      	movs	r3, #1
 8010546:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010548:	6a39      	ldr	r1, [r7, #32]
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7ff fcc0 	bl	800fed0 <dir_alloc>
 8010550:	4603      	mov	r3, r0
 8010552:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010556:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801055a:	2b00      	cmp	r3, #0
 801055c:	d148      	bne.n	80105f0 <dir_register+0x184>
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	3b01      	subs	r3, #1
 8010562:	623b      	str	r3, [r7, #32]
 8010564:	6a3b      	ldr	r3, [r7, #32]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d042      	beq.n	80105f0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	695a      	ldr	r2, [r3, #20]
 801056e:	6a3b      	ldr	r3, [r7, #32]
 8010570:	015b      	lsls	r3, r3, #5
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	4619      	mov	r1, r3
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7ff fb4b 	bl	800fc12 <dir_sdi>
 801057c:	4603      	mov	r3, r0
 801057e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010582:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010586:	2b00      	cmp	r3, #0
 8010588:	d132      	bne.n	80105f0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	3324      	adds	r3, #36	@ 0x24
 801058e:	4618      	mov	r0, r3
 8010590:	f7ff fe8a 	bl	80102a8 <sum_sfn>
 8010594:	4603      	mov	r3, r0
 8010596:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	69db      	ldr	r3, [r3, #28]
 801059c:	4619      	mov	r1, r3
 801059e:	69f8      	ldr	r0, [r7, #28]
 80105a0:	f7fe ff58 	bl	800f454 <move_window>
 80105a4:	4603      	mov	r3, r0
 80105a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80105aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d11d      	bne.n	80105ee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	6918      	ldr	r0, [r3, #16]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6a19      	ldr	r1, [r3, #32]
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	7efb      	ldrb	r3, [r7, #27]
 80105c0:	f7ff fd7c 	bl	80100bc <put_lfn>
				fs->wflag = 1;
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	2201      	movs	r2, #1
 80105c8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80105ca:	2100      	movs	r1, #0
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f7ff fba9 	bl	800fd24 <dir_next>
 80105d2:	4603      	mov	r3, r0
 80105d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80105d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d107      	bne.n	80105f0 <dir_register+0x184>
 80105e0:	6a3b      	ldr	r3, [r7, #32]
 80105e2:	3b01      	subs	r3, #1
 80105e4:	623b      	str	r3, [r7, #32]
 80105e6:	6a3b      	ldr	r3, [r7, #32]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1d5      	bne.n	8010598 <dir_register+0x12c>
 80105ec:	e000      	b.n	80105f0 <dir_register+0x184>
				if (res != FR_OK) break;
 80105ee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80105f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d128      	bne.n	801064a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	69db      	ldr	r3, [r3, #28]
 80105fc:	4619      	mov	r1, r3
 80105fe:	69f8      	ldr	r0, [r7, #28]
 8010600:	f7fe ff28 	bl	800f454 <move_window>
 8010604:	4603      	mov	r3, r0
 8010606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801060a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801060e:	2b00      	cmp	r3, #0
 8010610:	d11b      	bne.n	801064a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a1b      	ldr	r3, [r3, #32]
 8010616:	2220      	movs	r2, #32
 8010618:	2100      	movs	r1, #0
 801061a:	4618      	mov	r0, r3
 801061c:	f7fe fd0d 	bl	800f03a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6a18      	ldr	r0, [r3, #32]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	3324      	adds	r3, #36	@ 0x24
 8010628:	220b      	movs	r2, #11
 801062a:	4619      	mov	r1, r3
 801062c:	f7fe fce4 	bl	800eff8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6a1b      	ldr	r3, [r3, #32]
 801063a:	330c      	adds	r3, #12
 801063c:	f002 0218 	and.w	r2, r2, #24
 8010640:	b2d2      	uxtb	r2, r2
 8010642:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010644:	69fb      	ldr	r3, [r7, #28]
 8010646:	2201      	movs	r2, #1
 8010648:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801064a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801064e:	4618      	mov	r0, r3
 8010650:	3730      	adds	r7, #48	@ 0x30
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	4ec4ec4f 	.word	0x4ec4ec4f

0801065c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b08a      	sub	sp, #40	@ 0x28
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	613b      	str	r3, [r7, #16]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	691b      	ldr	r3, [r3, #16]
 8010672:	60fb      	str	r3, [r7, #12]
 8010674:	2300      	movs	r3, #0
 8010676:	617b      	str	r3, [r7, #20]
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	1c5a      	adds	r2, r3, #1
 8010680:	61ba      	str	r2, [r7, #24]
 8010682:	693a      	ldr	r2, [r7, #16]
 8010684:	4413      	add	r3, r2
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801068a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801068c:	2b1f      	cmp	r3, #31
 801068e:	d940      	bls.n	8010712 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010692:	2b2f      	cmp	r3, #47	@ 0x2f
 8010694:	d006      	beq.n	80106a4 <create_name+0x48>
 8010696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010698:	2b5c      	cmp	r3, #92	@ 0x5c
 801069a:	d110      	bne.n	80106be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801069c:	e002      	b.n	80106a4 <create_name+0x48>
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	3301      	adds	r3, #1
 80106a2:	61bb      	str	r3, [r7, #24]
 80106a4:	693a      	ldr	r2, [r7, #16]
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	4413      	add	r3, r2
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80106ae:	d0f6      	beq.n	801069e <create_name+0x42>
 80106b0:	693a      	ldr	r2, [r7, #16]
 80106b2:	69bb      	ldr	r3, [r7, #24]
 80106b4:	4413      	add	r3, r2
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80106ba:	d0f0      	beq.n	801069e <create_name+0x42>
			break;
 80106bc:	e02a      	b.n	8010714 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	2bfe      	cmp	r3, #254	@ 0xfe
 80106c2:	d901      	bls.n	80106c8 <create_name+0x6c>
 80106c4:	2306      	movs	r3, #6
 80106c6:	e1ca      	b.n	8010a5e <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 80106c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80106ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106d0:	2101      	movs	r1, #1
 80106d2:	4618      	mov	r0, r3
 80106d4:	f001 ff16 	bl	8012504 <ff_convert>
 80106d8:	4603      	mov	r3, r0
 80106da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80106dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d101      	bne.n	80106e6 <create_name+0x8a>
 80106e2:	2306      	movs	r3, #6
 80106e4:	e1bb      	b.n	8010a5e <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80106e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80106ea:	d809      	bhi.n	8010700 <create_name+0xa4>
 80106ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106ee:	4619      	mov	r1, r3
 80106f0:	489e      	ldr	r0, [pc, #632]	@ (801096c <create_name+0x310>)
 80106f2:	f7fe fce4 	bl	800f0be <chk_chr>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <create_name+0xa4>
 80106fc:	2306      	movs	r3, #6
 80106fe:	e1ae      	b.n	8010a5e <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	1c5a      	adds	r2, r3, #1
 8010704:	617a      	str	r2, [r7, #20]
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	68fa      	ldr	r2, [r7, #12]
 801070a:	4413      	add	r3, r2
 801070c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801070e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010710:	e7b4      	b.n	801067c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010712:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010714:	693a      	ldr	r2, [r7, #16]
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	441a      	add	r2, r3
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801071e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010720:	2b1f      	cmp	r3, #31
 8010722:	d801      	bhi.n	8010728 <create_name+0xcc>
 8010724:	2304      	movs	r3, #4
 8010726:	e000      	b.n	801072a <create_name+0xce>
 8010728:	2300      	movs	r3, #0
 801072a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	2b01      	cmp	r3, #1
 8010732:	d109      	bne.n	8010748 <create_name+0xec>
 8010734:	697a      	ldr	r2, [r7, #20]
 8010736:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801073a:	4413      	add	r3, r2
 801073c:	005b      	lsls	r3, r3, #1
 801073e:	68fa      	ldr	r2, [r7, #12]
 8010740:	4413      	add	r3, r2
 8010742:	881b      	ldrh	r3, [r3, #0]
 8010744:	2b2e      	cmp	r3, #46	@ 0x2e
 8010746:	d015      	beq.n	8010774 <create_name+0x118>
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	2b02      	cmp	r3, #2
 801074c:	d14d      	bne.n	80107ea <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 801074e:	697a      	ldr	r2, [r7, #20]
 8010750:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010754:	4413      	add	r3, r2
 8010756:	005b      	lsls	r3, r3, #1
 8010758:	68fa      	ldr	r2, [r7, #12]
 801075a:	4413      	add	r3, r2
 801075c:	881b      	ldrh	r3, [r3, #0]
 801075e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010760:	d143      	bne.n	80107ea <create_name+0x18e>
 8010762:	697a      	ldr	r2, [r7, #20]
 8010764:	4b82      	ldr	r3, [pc, #520]	@ (8010970 <create_name+0x314>)
 8010766:	4413      	add	r3, r2
 8010768:	005b      	lsls	r3, r3, #1
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	4413      	add	r3, r2
 801076e:	881b      	ldrh	r3, [r3, #0]
 8010770:	2b2e      	cmp	r3, #46	@ 0x2e
 8010772:	d13a      	bne.n	80107ea <create_name+0x18e>
		lfn[di] = 0;
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	005b      	lsls	r3, r3, #1
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	4413      	add	r3, r2
 801077c:	2200      	movs	r2, #0
 801077e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010780:	2300      	movs	r3, #0
 8010782:	623b      	str	r3, [r7, #32]
 8010784:	e00f      	b.n	80107a6 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8010786:	6a3a      	ldr	r2, [r7, #32]
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	429a      	cmp	r2, r3
 801078c:	d201      	bcs.n	8010792 <create_name+0x136>
 801078e:	212e      	movs	r1, #46	@ 0x2e
 8010790:	e000      	b.n	8010794 <create_name+0x138>
 8010792:	2120      	movs	r1, #32
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	6a3b      	ldr	r3, [r7, #32]
 8010798:	4413      	add	r3, r2
 801079a:	3324      	adds	r3, #36	@ 0x24
 801079c:	460a      	mov	r2, r1
 801079e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 80107a0:	6a3b      	ldr	r3, [r7, #32]
 80107a2:	3301      	adds	r3, #1
 80107a4:	623b      	str	r3, [r7, #32]
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	2b0a      	cmp	r3, #10
 80107aa:	d9ec      	bls.n	8010786 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 80107ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107b0:	f043 0320 	orr.w	r3, r3, #32
 80107b4:	b2d9      	uxtb	r1, r3
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	6a3b      	ldr	r3, [r7, #32]
 80107ba:	4413      	add	r3, r2
 80107bc:	3324      	adds	r3, #36	@ 0x24
 80107be:	460a      	mov	r2, r1
 80107c0:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	e14b      	b.n	8010a5e <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 80107c6:	697a      	ldr	r2, [r7, #20]
 80107c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80107cc:	4413      	add	r3, r2
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	4413      	add	r3, r2
 80107d4:	881b      	ldrh	r3, [r3, #0]
 80107d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80107d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107da:	2b20      	cmp	r3, #32
 80107dc:	d002      	beq.n	80107e4 <create_name+0x188>
 80107de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80107e2:	d106      	bne.n	80107f2 <create_name+0x196>
		di--;
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	3b01      	subs	r3, #1
 80107e8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1ea      	bne.n	80107c6 <create_name+0x16a>
 80107f0:	e000      	b.n	80107f4 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 80107f2:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	005b      	lsls	r3, r3, #1
 80107f8:	68fa      	ldr	r2, [r7, #12]
 80107fa:	4413      	add	r3, r2
 80107fc:	2200      	movs	r2, #0
 80107fe:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d101      	bne.n	801080a <create_name+0x1ae>
 8010806:	2306      	movs	r3, #6
 8010808:	e129      	b.n	8010a5e <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	3324      	adds	r3, #36	@ 0x24
 801080e:	220b      	movs	r2, #11
 8010810:	2120      	movs	r1, #32
 8010812:	4618      	mov	r0, r3
 8010814:	f7fe fc11 	bl	800f03a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010818:	2300      	movs	r3, #0
 801081a:	61bb      	str	r3, [r7, #24]
 801081c:	e002      	b.n	8010824 <create_name+0x1c8>
 801081e:	69bb      	ldr	r3, [r7, #24]
 8010820:	3301      	adds	r3, #1
 8010822:	61bb      	str	r3, [r7, #24]
 8010824:	69bb      	ldr	r3, [r7, #24]
 8010826:	005b      	lsls	r3, r3, #1
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	4413      	add	r3, r2
 801082c:	881b      	ldrh	r3, [r3, #0]
 801082e:	2b20      	cmp	r3, #32
 8010830:	d0f5      	beq.n	801081e <create_name+0x1c2>
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	005b      	lsls	r3, r3, #1
 8010836:	68fa      	ldr	r2, [r7, #12]
 8010838:	4413      	add	r3, r2
 801083a:	881b      	ldrh	r3, [r3, #0]
 801083c:	2b2e      	cmp	r3, #46	@ 0x2e
 801083e:	d0ee      	beq.n	801081e <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d009      	beq.n	801085a <create_name+0x1fe>
 8010846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801084a:	f043 0303 	orr.w	r3, r3, #3
 801084e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010852:	e002      	b.n	801085a <create_name+0x1fe>
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	3b01      	subs	r3, #1
 8010858:	617b      	str	r3, [r7, #20]
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d009      	beq.n	8010874 <create_name+0x218>
 8010860:	697a      	ldr	r2, [r7, #20]
 8010862:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010866:	4413      	add	r3, r2
 8010868:	005b      	lsls	r3, r3, #1
 801086a:	68fa      	ldr	r2, [r7, #12]
 801086c:	4413      	add	r3, r2
 801086e:	881b      	ldrh	r3, [r3, #0]
 8010870:	2b2e      	cmp	r3, #46	@ 0x2e
 8010872:	d1ef      	bne.n	8010854 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8010874:	2300      	movs	r3, #0
 8010876:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801087a:	2300      	movs	r3, #0
 801087c:	623b      	str	r3, [r7, #32]
 801087e:	2308      	movs	r3, #8
 8010880:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010882:	69bb      	ldr	r3, [r7, #24]
 8010884:	1c5a      	adds	r2, r3, #1
 8010886:	61ba      	str	r2, [r7, #24]
 8010888:	005b      	lsls	r3, r3, #1
 801088a:	68fa      	ldr	r2, [r7, #12]
 801088c:	4413      	add	r3, r2
 801088e:	881b      	ldrh	r3, [r3, #0]
 8010890:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010894:	2b00      	cmp	r3, #0
 8010896:	f000 8098 	beq.w	80109ca <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801089a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801089c:	2b20      	cmp	r3, #32
 801089e:	d006      	beq.n	80108ae <create_name+0x252>
 80108a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80108a4:	d10a      	bne.n	80108bc <create_name+0x260>
 80108a6:	69ba      	ldr	r2, [r7, #24]
 80108a8:	697b      	ldr	r3, [r7, #20]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d006      	beq.n	80108bc <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 80108ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108b2:	f043 0303 	orr.w	r3, r3, #3
 80108b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80108ba:	e085      	b.n	80109c8 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80108bc:	6a3a      	ldr	r2, [r7, #32]
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d203      	bcs.n	80108cc <create_name+0x270>
 80108c4:	69ba      	ldr	r2, [r7, #24]
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d123      	bne.n	8010914 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	2b0b      	cmp	r3, #11
 80108d0:	d106      	bne.n	80108e0 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 80108d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108d6:	f043 0303 	orr.w	r3, r3, #3
 80108da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80108de:	e077      	b.n	80109d0 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80108e0:	69ba      	ldr	r2, [r7, #24]
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d005      	beq.n	80108f4 <create_name+0x298>
 80108e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108ec:	f043 0303 	orr.w	r3, r3, #3
 80108f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80108f4:	69ba      	ldr	r2, [r7, #24]
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d868      	bhi.n	80109ce <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	61bb      	str	r3, [r7, #24]
 8010900:	2308      	movs	r3, #8
 8010902:	623b      	str	r3, [r7, #32]
 8010904:	230b      	movs	r3, #11
 8010906:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010908:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010912:	e059      	b.n	80109c8 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010916:	2b7f      	cmp	r3, #127	@ 0x7f
 8010918:	d914      	bls.n	8010944 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801091a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801091c:	2100      	movs	r1, #0
 801091e:	4618      	mov	r0, r3
 8010920:	f001 fdf0 	bl	8012504 <ff_convert>
 8010924:	4603      	mov	r3, r0
 8010926:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010928:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801092a:	2b00      	cmp	r3, #0
 801092c:	d004      	beq.n	8010938 <create_name+0x2dc>
 801092e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010930:	3b80      	subs	r3, #128	@ 0x80
 8010932:	4a10      	ldr	r2, [pc, #64]	@ (8010974 <create_name+0x318>)
 8010934:	5cd3      	ldrb	r3, [r2, r3]
 8010936:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801093c:	f043 0302 	orr.w	r3, r3, #2
 8010940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010944:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010946:	2b00      	cmp	r3, #0
 8010948:	d007      	beq.n	801095a <create_name+0x2fe>
 801094a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801094c:	4619      	mov	r1, r3
 801094e:	480a      	ldr	r0, [pc, #40]	@ (8010978 <create_name+0x31c>)
 8010950:	f7fe fbb5 	bl	800f0be <chk_chr>
 8010954:	4603      	mov	r3, r0
 8010956:	2b00      	cmp	r3, #0
 8010958:	d010      	beq.n	801097c <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801095a:	235f      	movs	r3, #95	@ 0x5f
 801095c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801095e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010962:	f043 0303 	orr.w	r3, r3, #3
 8010966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801096a:	e023      	b.n	80109b4 <create_name+0x358>
 801096c:	08012a18 	.word	0x08012a18
 8010970:	7ffffffe 	.word	0x7ffffffe
 8010974:	08012aa0 	.word	0x08012aa0
 8010978:	08012a24 	.word	0x08012a24
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801097c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801097e:	2b40      	cmp	r3, #64	@ 0x40
 8010980:	d909      	bls.n	8010996 <create_name+0x33a>
 8010982:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010984:	2b5a      	cmp	r3, #90	@ 0x5a
 8010986:	d806      	bhi.n	8010996 <create_name+0x33a>
					b |= 2;
 8010988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801098c:	f043 0302 	orr.w	r3, r3, #2
 8010990:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010994:	e00e      	b.n	80109b4 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010996:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010998:	2b60      	cmp	r3, #96	@ 0x60
 801099a:	d90b      	bls.n	80109b4 <create_name+0x358>
 801099c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801099e:	2b7a      	cmp	r3, #122	@ 0x7a
 80109a0:	d808      	bhi.n	80109b4 <create_name+0x358>
						b |= 1; w -= 0x20;
 80109a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109a6:	f043 0301 	orr.w	r3, r3, #1
 80109aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80109ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109b0:	3b20      	subs	r3, #32
 80109b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80109b4:	6a3b      	ldr	r3, [r7, #32]
 80109b6:	1c5a      	adds	r2, r3, #1
 80109b8:	623a      	str	r2, [r7, #32]
 80109ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80109bc:	b2d1      	uxtb	r1, r2
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	4413      	add	r3, r2
 80109c2:	460a      	mov	r2, r1
 80109c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80109c8:	e75b      	b.n	8010882 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 80109ca:	bf00      	nop
 80109cc:	e000      	b.n	80109d0 <create_name+0x374>
			if (si > di) break;			/* No extension */
 80109ce:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80109d6:	2be5      	cmp	r3, #229	@ 0xe5
 80109d8:	d103      	bne.n	80109e2 <create_name+0x386>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2205      	movs	r2, #5
 80109de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	2b08      	cmp	r3, #8
 80109e6:	d104      	bne.n	80109f2 <create_name+0x396>
 80109e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80109f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109f6:	f003 030c 	and.w	r3, r3, #12
 80109fa:	2b0c      	cmp	r3, #12
 80109fc:	d005      	beq.n	8010a0a <create_name+0x3ae>
 80109fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a02:	f003 0303 	and.w	r3, r3, #3
 8010a06:	2b03      	cmp	r3, #3
 8010a08:	d105      	bne.n	8010a16 <create_name+0x3ba>
 8010a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a0e:	f043 0302 	orr.w	r3, r3, #2
 8010a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a1a:	f003 0302 	and.w	r3, r3, #2
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d117      	bne.n	8010a52 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010a22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a26:	f003 0303 	and.w	r3, r3, #3
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	d105      	bne.n	8010a3a <create_name+0x3de>
 8010a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a32:	f043 0310 	orr.w	r3, r3, #16
 8010a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010a3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a3e:	f003 030c 	and.w	r3, r3, #12
 8010a42:	2b04      	cmp	r3, #4
 8010a44:	d105      	bne.n	8010a52 <create_name+0x3f6>
 8010a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a4a:	f043 0308 	orr.w	r3, r3, #8
 8010a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010a58:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8010a5c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3728      	adds	r7, #40	@ 0x28
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop

08010a68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b086      	sub	sp, #24
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a82:	d00b      	beq.n	8010a9c <follow_path+0x34>
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	2b5c      	cmp	r3, #92	@ 0x5c
 8010a8a:	d007      	beq.n	8010a9c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	69da      	ldr	r2, [r3, #28]
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	609a      	str	r2, [r3, #8]
 8010a94:	e00d      	b.n	8010ab2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	603b      	str	r3, [r7, #0]
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	2b2f      	cmp	r3, #47	@ 0x2f
 8010aa2:	d0f8      	beq.n	8010a96 <follow_path+0x2e>
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	2b5c      	cmp	r3, #92	@ 0x5c
 8010aaa:	d0f4      	beq.n	8010a96 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	2b1f      	cmp	r3, #31
 8010ab8:	d80a      	bhi.n	8010ad0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2280      	movs	r2, #128	@ 0x80
 8010abe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010ac2:	2100      	movs	r1, #0
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f7ff f8a4 	bl	800fc12 <dir_sdi>
 8010aca:	4603      	mov	r3, r0
 8010acc:	75fb      	strb	r3, [r7, #23]
 8010ace:	e05b      	b.n	8010b88 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ad0:	463b      	mov	r3, r7
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7ff fdc1 	bl	801065c <create_name>
 8010ada:	4603      	mov	r3, r0
 8010adc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010ade:	7dfb      	ldrb	r3, [r7, #23]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d14c      	bne.n	8010b7e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f7ff fc00 	bl	80102ea <dir_find>
 8010aea:	4603      	mov	r3, r0
 8010aec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010af4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010af6:	7dfb      	ldrb	r3, [r7, #23]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d01b      	beq.n	8010b34 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010afc:	7dfb      	ldrb	r3, [r7, #23]
 8010afe:	2b04      	cmp	r3, #4
 8010b00:	d13f      	bne.n	8010b82 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8010b02:	7afb      	ldrb	r3, [r7, #11]
 8010b04:	f003 0320 	and.w	r3, r3, #32
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00b      	beq.n	8010b24 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010b0c:	7afb      	ldrb	r3, [r7, #11]
 8010b0e:	f003 0304 	and.w	r3, r3, #4
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d031      	beq.n	8010b7a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2280      	movs	r2, #128	@ 0x80
 8010b1a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010b22:	e02e      	b.n	8010b82 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010b24:	7afb      	ldrb	r3, [r7, #11]
 8010b26:	f003 0304 	and.w	r3, r3, #4
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d129      	bne.n	8010b82 <follow_path+0x11a>
 8010b2e:	2305      	movs	r3, #5
 8010b30:	75fb      	strb	r3, [r7, #23]
				break;
 8010b32:	e026      	b.n	8010b82 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010b34:	7afb      	ldrb	r3, [r7, #11]
 8010b36:	f003 0304 	and.w	r3, r3, #4
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d123      	bne.n	8010b86 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	799b      	ldrb	r3, [r3, #6]
 8010b42:	f003 0310 	and.w	r3, r3, #16
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d102      	bne.n	8010b50 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010b4a:	2305      	movs	r3, #5
 8010b4c:	75fb      	strb	r3, [r7, #23]
 8010b4e:	e01b      	b.n	8010b88 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	695b      	ldr	r3, [r3, #20]
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	8992      	ldrh	r2, [r2, #12]
 8010b5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b62:	fb00 f202 	mul.w	r2, r0, r2
 8010b66:	1a9b      	subs	r3, r3, r2
 8010b68:	440b      	add	r3, r1
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f7ff f9f6 	bl	800ff5e <ld_clust>
 8010b72:	4602      	mov	r2, r0
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	609a      	str	r2, [r3, #8]
 8010b78:	e7aa      	b.n	8010ad0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010b7a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010b7c:	e7a8      	b.n	8010ad0 <follow_path+0x68>
			if (res != FR_OK) break;
 8010b7e:	bf00      	nop
 8010b80:	e002      	b.n	8010b88 <follow_path+0x120>
				break;
 8010b82:	bf00      	nop
 8010b84:	e000      	b.n	8010b88 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010b86:	bf00      	nop
			}
		}
	}

	return res;
 8010b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3718      	adds	r7, #24
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010b92:	b480      	push	{r7}
 8010b94:	b087      	sub	sp, #28
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b9e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d031      	beq.n	8010c0c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	617b      	str	r3, [r7, #20]
 8010bae:	e002      	b.n	8010bb6 <get_ldnumber+0x24>
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	617b      	str	r3, [r7, #20]
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	2b1f      	cmp	r3, #31
 8010bbc:	d903      	bls.n	8010bc6 <get_ldnumber+0x34>
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	2b3a      	cmp	r3, #58	@ 0x3a
 8010bc4:	d1f4      	bne.n	8010bb0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	2b3a      	cmp	r3, #58	@ 0x3a
 8010bcc:	d11c      	bne.n	8010c08 <get_ldnumber+0x76>
			tp = *path;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	1c5a      	adds	r2, r3, #1
 8010bd8:	60fa      	str	r2, [r7, #12]
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	3b30      	subs	r3, #48	@ 0x30
 8010bde:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	2b09      	cmp	r3, #9
 8010be4:	d80e      	bhi.n	8010c04 <get_ldnumber+0x72>
 8010be6:	68fa      	ldr	r2, [r7, #12]
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d10a      	bne.n	8010c04 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d107      	bne.n	8010c04 <get_ldnumber+0x72>
					vol = (int)i;
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	617b      	str	r3, [r7, #20]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	697a      	ldr	r2, [r7, #20]
 8010c02:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	e002      	b.n	8010c0e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010c08:	2300      	movs	r3, #0
 8010c0a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010c0c:	693b      	ldr	r3, [r7, #16]
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	371c      	adds	r7, #28
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr
	...

08010c1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	70da      	strb	r2, [r3, #3]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c32:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010c34:	6839      	ldr	r1, [r7, #0]
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7fe fc0c 	bl	800f454 <move_window>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d001      	beq.n	8010c46 <check_fs+0x2a>
 8010c42:	2304      	movs	r3, #4
 8010c44:	e038      	b.n	8010cb8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	333c      	adds	r3, #60	@ 0x3c
 8010c4a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fe f950 	bl	800eef4 <ld_word>
 8010c54:	4603      	mov	r3, r0
 8010c56:	461a      	mov	r2, r3
 8010c58:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d001      	beq.n	8010c64 <check_fs+0x48>
 8010c60:	2303      	movs	r3, #3
 8010c62:	e029      	b.n	8010cb8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c6a:	2be9      	cmp	r3, #233	@ 0xe9
 8010c6c:	d009      	beq.n	8010c82 <check_fs+0x66>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c74:	2beb      	cmp	r3, #235	@ 0xeb
 8010c76:	d11e      	bne.n	8010cb6 <check_fs+0x9a>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010c7e:	2b90      	cmp	r3, #144	@ 0x90
 8010c80:	d119      	bne.n	8010cb6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	333c      	adds	r3, #60	@ 0x3c
 8010c86:	3336      	adds	r3, #54	@ 0x36
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fe f94b 	bl	800ef24 <ld_dword>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010c94:	4a0a      	ldr	r2, [pc, #40]	@ (8010cc0 <check_fs+0xa4>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d101      	bne.n	8010c9e <check_fs+0x82>
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	e00c      	b.n	8010cb8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	333c      	adds	r3, #60	@ 0x3c
 8010ca2:	3352      	adds	r3, #82	@ 0x52
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fe f93d 	bl	800ef24 <ld_dword>
 8010caa:	4603      	mov	r3, r0
 8010cac:	4a05      	ldr	r2, [pc, #20]	@ (8010cc4 <check_fs+0xa8>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d101      	bne.n	8010cb6 <check_fs+0x9a>
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	e000      	b.n	8010cb8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010cb6:	2302      	movs	r3, #2
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	00544146 	.word	0x00544146
 8010cc4:	33544146 	.word	0x33544146

08010cc8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b096      	sub	sp, #88	@ 0x58
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	f7ff ff58 	bl	8010b92 <get_ldnumber>
 8010ce2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	da01      	bge.n	8010cee <find_volume+0x26>
 8010cea:	230b      	movs	r3, #11
 8010cec:	e268      	b.n	80111c0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010cee:	4a9f      	ldr	r2, [pc, #636]	@ (8010f6c <find_volume+0x2a4>)
 8010cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d101      	bne.n	8010d02 <find_volume+0x3a>
 8010cfe:	230c      	movs	r3, #12
 8010d00:	e25e      	b.n	80111c0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010d08:	79fb      	ldrb	r3, [r7, #7]
 8010d0a:	f023 0301 	bic.w	r3, r3, #1
 8010d0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d01a      	beq.n	8010d4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1a:	785b      	ldrb	r3, [r3, #1]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fe f849 	bl	800edb4 <disk_status>
 8010d22:	4603      	mov	r3, r0
 8010d24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010d28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d2c:	f003 0301 	and.w	r3, r3, #1
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d10c      	bne.n	8010d4e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010d34:	79fb      	ldrb	r3, [r7, #7]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d007      	beq.n	8010d4a <find_volume+0x82>
 8010d3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d3e:	f003 0304 	and.w	r3, r3, #4
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d001      	beq.n	8010d4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010d46:	230a      	movs	r3, #10
 8010d48:	e23a      	b.n	80111c0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	e238      	b.n	80111c0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d50:	2200      	movs	r2, #0
 8010d52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d56:	b2da      	uxtb	r2, r3
 8010d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5e:	785b      	ldrb	r3, [r3, #1]
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7fe f841 	bl	800ede8 <disk_initialize>
 8010d66:	4603      	mov	r3, r0
 8010d68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010d6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d70:	f003 0301 	and.w	r3, r3, #1
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d001      	beq.n	8010d7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010d78:	2303      	movs	r3, #3
 8010d7a:	e221      	b.n	80111c0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010d7c:	79fb      	ldrb	r3, [r7, #7]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d007      	beq.n	8010d92 <find_volume+0xca>
 8010d82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d86:	f003 0304 	and.w	r3, r3, #4
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d001      	beq.n	8010d92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010d8e:	230a      	movs	r3, #10
 8010d90:	e216      	b.n	80111c0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d94:	7858      	ldrb	r0, [r3, #1]
 8010d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d98:	330c      	adds	r3, #12
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	2102      	movs	r1, #2
 8010d9e:	f7fe f88b 	bl	800eeb8 <disk_ioctl>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d001      	beq.n	8010dac <find_volume+0xe4>
 8010da8:	2301      	movs	r3, #1
 8010daa:	e209      	b.n	80111c0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dae:	899b      	ldrh	r3, [r3, #12]
 8010db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010db4:	d80d      	bhi.n	8010dd2 <find_volume+0x10a>
 8010db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db8:	899b      	ldrh	r3, [r3, #12]
 8010dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010dbe:	d308      	bcc.n	8010dd2 <find_volume+0x10a>
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc2:	899b      	ldrh	r3, [r3, #12]
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc8:	899b      	ldrh	r3, [r3, #12]
 8010dca:	3b01      	subs	r3, #1
 8010dcc:	4013      	ands	r3, r2
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d001      	beq.n	8010dd6 <find_volume+0x10e>
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e1f4      	b.n	80111c0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010dda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ddc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010dde:	f7ff ff1d 	bl	8010c1c <check_fs>
 8010de2:	4603      	mov	r3, r0
 8010de4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010de8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010dec:	2b02      	cmp	r3, #2
 8010dee:	d149      	bne.n	8010e84 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010df0:	2300      	movs	r3, #0
 8010df2:	643b      	str	r3, [r7, #64]	@ 0x40
 8010df4:	e01e      	b.n	8010e34 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dfe:	011b      	lsls	r3, r3, #4
 8010e00:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010e04:	4413      	add	r3, r2
 8010e06:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e0a:	3304      	adds	r3, #4
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d006      	beq.n	8010e20 <find_volume+0x158>
 8010e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e14:	3308      	adds	r3, #8
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7fe f884 	bl	800ef24 <ld_dword>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	e000      	b.n	8010e22 <find_volume+0x15a>
 8010e20:	2200      	movs	r2, #0
 8010e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e24:	009b      	lsls	r3, r3, #2
 8010e26:	3358      	adds	r3, #88	@ 0x58
 8010e28:	443b      	add	r3, r7
 8010e2a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e30:	3301      	adds	r3, #1
 8010e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e36:	2b03      	cmp	r3, #3
 8010e38:	d9dd      	bls.n	8010df6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d002      	beq.n	8010e4a <find_volume+0x182>
 8010e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e46:	3b01      	subs	r3, #1
 8010e48:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e4c:	009b      	lsls	r3, r3, #2
 8010e4e:	3358      	adds	r3, #88	@ 0x58
 8010e50:	443b      	add	r3, r7
 8010e52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010e56:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d005      	beq.n	8010e6a <find_volume+0x1a2>
 8010e5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010e60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010e62:	f7ff fedb 	bl	8010c1c <check_fs>
 8010e66:	4603      	mov	r3, r0
 8010e68:	e000      	b.n	8010e6c <find_volume+0x1a4>
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010e70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d905      	bls.n	8010e84 <find_volume+0x1bc>
 8010e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e80:	2b03      	cmp	r3, #3
 8010e82:	d9e2      	bls.n	8010e4a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010e84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e88:	2b04      	cmp	r3, #4
 8010e8a:	d101      	bne.n	8010e90 <find_volume+0x1c8>
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e197      	b.n	80111c0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010e90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d901      	bls.n	8010e9c <find_volume+0x1d4>
 8010e98:	230d      	movs	r3, #13
 8010e9a:	e191      	b.n	80111c0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e9e:	333c      	adds	r3, #60	@ 0x3c
 8010ea0:	330b      	adds	r3, #11
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fe f826 	bl	800eef4 <ld_word>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	461a      	mov	r2, r3
 8010eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eae:	899b      	ldrh	r3, [r3, #12]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d001      	beq.n	8010eb8 <find_volume+0x1f0>
 8010eb4:	230d      	movs	r3, #13
 8010eb6:	e183      	b.n	80111c0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eba:	333c      	adds	r3, #60	@ 0x3c
 8010ebc:	3316      	adds	r3, #22
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fe f818 	bl	800eef4 <ld_word>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010ec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d106      	bne.n	8010edc <find_volume+0x214>
 8010ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ed0:	333c      	adds	r3, #60	@ 0x3c
 8010ed2:	3324      	adds	r3, #36	@ 0x24
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7fe f825 	bl	800ef24 <ld_dword>
 8010eda:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ede:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010ee0:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ee4:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8010ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eee:	789b      	ldrb	r3, [r3, #2]
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	d005      	beq.n	8010f00 <find_volume+0x238>
 8010ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ef6:	789b      	ldrb	r3, [r3, #2]
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d001      	beq.n	8010f00 <find_volume+0x238>
 8010efc:	230d      	movs	r3, #13
 8010efe:	e15f      	b.n	80111c0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f02:	789b      	ldrb	r3, [r3, #2]
 8010f04:	461a      	mov	r2, r3
 8010f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f08:	fb02 f303 	mul.w	r3, r2, r3
 8010f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f10:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8010f14:	461a      	mov	r2, r3
 8010f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f1c:	895b      	ldrh	r3, [r3, #10]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d008      	beq.n	8010f34 <find_volume+0x26c>
 8010f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f24:	895b      	ldrh	r3, [r3, #10]
 8010f26:	461a      	mov	r2, r3
 8010f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2a:	895b      	ldrh	r3, [r3, #10]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	4013      	ands	r3, r2
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d001      	beq.n	8010f38 <find_volume+0x270>
 8010f34:	230d      	movs	r3, #13
 8010f36:	e143      	b.n	80111c0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f3a:	333c      	adds	r3, #60	@ 0x3c
 8010f3c:	3311      	adds	r3, #17
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fd ffd8 	bl	800eef4 <ld_word>
 8010f44:	4603      	mov	r3, r0
 8010f46:	461a      	mov	r2, r3
 8010f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f4e:	891b      	ldrh	r3, [r3, #8]
 8010f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f52:	8992      	ldrh	r2, [r2, #12]
 8010f54:	0952      	lsrs	r2, r2, #5
 8010f56:	b292      	uxth	r2, r2
 8010f58:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f5c:	fb01 f202 	mul.w	r2, r1, r2
 8010f60:	1a9b      	subs	r3, r3, r2
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d003      	beq.n	8010f70 <find_volume+0x2a8>
 8010f68:	230d      	movs	r3, #13
 8010f6a:	e129      	b.n	80111c0 <find_volume+0x4f8>
 8010f6c:	2400283c 	.word	0x2400283c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f72:	333c      	adds	r3, #60	@ 0x3c
 8010f74:	3313      	adds	r3, #19
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7fd ffbc 	bl	800eef4 <ld_word>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010f80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d106      	bne.n	8010f94 <find_volume+0x2cc>
 8010f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f88:	333c      	adds	r3, #60	@ 0x3c
 8010f8a:	3320      	adds	r3, #32
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7fd ffc9 	bl	800ef24 <ld_dword>
 8010f92:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f96:	333c      	adds	r3, #60	@ 0x3c
 8010f98:	330e      	adds	r3, #14
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fd ffaa 	bl	800eef4 <ld_word>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010fa4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d101      	bne.n	8010fae <find_volume+0x2e6>
 8010faa:	230d      	movs	r3, #13
 8010fac:	e108      	b.n	80111c0 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010fae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fb2:	4413      	add	r3, r2
 8010fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010fb6:	8911      	ldrh	r1, [r2, #8]
 8010fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010fba:	8992      	ldrh	r2, [r2, #12]
 8010fbc:	0952      	lsrs	r2, r2, #5
 8010fbe:	b292      	uxth	r2, r2
 8010fc0:	fbb1 f2f2 	udiv	r2, r1, r2
 8010fc4:	b292      	uxth	r2, r2
 8010fc6:	4413      	add	r3, r2
 8010fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010fca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d201      	bcs.n	8010fd6 <find_volume+0x30e>
 8010fd2:	230d      	movs	r3, #13
 8010fd4:	e0f4      	b.n	80111c0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010fde:	8952      	ldrh	r2, [r2, #10]
 8010fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fe4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d101      	bne.n	8010ff0 <find_volume+0x328>
 8010fec:	230d      	movs	r3, #13
 8010fee:	e0e7      	b.n	80111c0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010ff0:	2303      	movs	r3, #3
 8010ff2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d802      	bhi.n	8011006 <find_volume+0x33e>
 8011000:	2302      	movs	r3, #2
 8011002:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011008:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801100c:	4293      	cmp	r3, r2
 801100e:	d802      	bhi.n	8011016 <find_volume+0x34e>
 8011010:	2301      	movs	r3, #1
 8011012:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011018:	1c9a      	adds	r2, r3, #2
 801101a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801101c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801101e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011020:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011022:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011024:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011028:	441a      	add	r2, r3
 801102a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801102c:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801102e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011032:	441a      	add	r2, r3
 8011034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011036:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8011038:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801103c:	2b03      	cmp	r3, #3
 801103e:	d11e      	bne.n	801107e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011042:	333c      	adds	r3, #60	@ 0x3c
 8011044:	332a      	adds	r3, #42	@ 0x2a
 8011046:	4618      	mov	r0, r3
 8011048:	f7fd ff54 	bl	800eef4 <ld_word>
 801104c:	4603      	mov	r3, r0
 801104e:	2b00      	cmp	r3, #0
 8011050:	d001      	beq.n	8011056 <find_volume+0x38e>
 8011052:	230d      	movs	r3, #13
 8011054:	e0b4      	b.n	80111c0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011058:	891b      	ldrh	r3, [r3, #8]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d001      	beq.n	8011062 <find_volume+0x39a>
 801105e:	230d      	movs	r3, #13
 8011060:	e0ae      	b.n	80111c0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011064:	333c      	adds	r3, #60	@ 0x3c
 8011066:	332c      	adds	r3, #44	@ 0x2c
 8011068:	4618      	mov	r0, r3
 801106a:	f7fd ff5b 	bl	800ef24 <ld_dword>
 801106e:	4602      	mov	r2, r0
 8011070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011072:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011076:	6a1b      	ldr	r3, [r3, #32]
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	647b      	str	r3, [r7, #68]	@ 0x44
 801107c:	e01f      	b.n	80110be <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801107e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011080:	891b      	ldrh	r3, [r3, #8]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d101      	bne.n	801108a <find_volume+0x3c2>
 8011086:	230d      	movs	r3, #13
 8011088:	e09a      	b.n	80111c0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801108a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801108c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801108e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011090:	441a      	add	r2, r3
 8011092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011094:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011096:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801109a:	2b02      	cmp	r3, #2
 801109c:	d103      	bne.n	80110a6 <find_volume+0x3de>
 801109e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a0:	6a1b      	ldr	r3, [r3, #32]
 80110a2:	005b      	lsls	r3, r3, #1
 80110a4:	e00a      	b.n	80110bc <find_volume+0x3f4>
 80110a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a8:	6a1a      	ldr	r2, [r3, #32]
 80110aa:	4613      	mov	r3, r2
 80110ac:	005b      	lsls	r3, r3, #1
 80110ae:	4413      	add	r3, r2
 80110b0:	085a      	lsrs	r2, r3, #1
 80110b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b4:	6a1b      	ldr	r3, [r3, #32]
 80110b6:	f003 0301 	and.w	r3, r3, #1
 80110ba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80110bc:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80110be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c4:	899b      	ldrh	r3, [r3, #12]
 80110c6:	4619      	mov	r1, r3
 80110c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110ca:	440b      	add	r3, r1
 80110cc:	3b01      	subs	r3, #1
 80110ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80110d0:	8989      	ldrh	r1, [r1, #12]
 80110d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d201      	bcs.n	80110de <find_volume+0x416>
 80110da:	230d      	movs	r3, #13
 80110dc:	e070      	b.n	80111c0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80110de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e0:	f04f 32ff 	mov.w	r2, #4294967295
 80110e4:	619a      	str	r2, [r3, #24]
 80110e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e8:	699a      	ldr	r2, [r3, #24]
 80110ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80110ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f0:	2280      	movs	r2, #128	@ 0x80
 80110f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80110f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80110f8:	2b03      	cmp	r3, #3
 80110fa:	d149      	bne.n	8011190 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80110fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110fe:	333c      	adds	r3, #60	@ 0x3c
 8011100:	3330      	adds	r3, #48	@ 0x30
 8011102:	4618      	mov	r0, r3
 8011104:	f7fd fef6 	bl	800eef4 <ld_word>
 8011108:	4603      	mov	r3, r0
 801110a:	2b01      	cmp	r3, #1
 801110c:	d140      	bne.n	8011190 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801110e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011110:	3301      	adds	r3, #1
 8011112:	4619      	mov	r1, r3
 8011114:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011116:	f7fe f99d 	bl	800f454 <move_window>
 801111a:	4603      	mov	r3, r0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d137      	bne.n	8011190 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011122:	2200      	movs	r2, #0
 8011124:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011128:	333c      	adds	r3, #60	@ 0x3c
 801112a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801112e:	4618      	mov	r0, r3
 8011130:	f7fd fee0 	bl	800eef4 <ld_word>
 8011134:	4603      	mov	r3, r0
 8011136:	461a      	mov	r2, r3
 8011138:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801113c:	429a      	cmp	r2, r3
 801113e:	d127      	bne.n	8011190 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011142:	333c      	adds	r3, #60	@ 0x3c
 8011144:	4618      	mov	r0, r3
 8011146:	f7fd feed 	bl	800ef24 <ld_dword>
 801114a:	4603      	mov	r3, r0
 801114c:	4a1e      	ldr	r2, [pc, #120]	@ (80111c8 <find_volume+0x500>)
 801114e:	4293      	cmp	r3, r2
 8011150:	d11e      	bne.n	8011190 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011154:	333c      	adds	r3, #60	@ 0x3c
 8011156:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801115a:	4618      	mov	r0, r3
 801115c:	f7fd fee2 	bl	800ef24 <ld_dword>
 8011160:	4603      	mov	r3, r0
 8011162:	4a1a      	ldr	r2, [pc, #104]	@ (80111cc <find_volume+0x504>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d113      	bne.n	8011190 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801116a:	333c      	adds	r3, #60	@ 0x3c
 801116c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011170:	4618      	mov	r0, r3
 8011172:	f7fd fed7 	bl	800ef24 <ld_dword>
 8011176:	4602      	mov	r2, r0
 8011178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801117a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801117c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801117e:	333c      	adds	r3, #60	@ 0x3c
 8011180:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011184:	4618      	mov	r0, r3
 8011186:	f7fd fecd 	bl	800ef24 <ld_dword>
 801118a:	4602      	mov	r2, r0
 801118c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801118e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011192:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011196:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011198:	4b0d      	ldr	r3, [pc, #52]	@ (80111d0 <find_volume+0x508>)
 801119a:	881b      	ldrh	r3, [r3, #0]
 801119c:	3301      	adds	r3, #1
 801119e:	b29a      	uxth	r2, r3
 80111a0:	4b0b      	ldr	r3, [pc, #44]	@ (80111d0 <find_volume+0x508>)
 80111a2:	801a      	strh	r2, [r3, #0]
 80111a4:	4b0a      	ldr	r3, [pc, #40]	@ (80111d0 <find_volume+0x508>)
 80111a6:	881a      	ldrh	r2, [r3, #0]
 80111a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111aa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80111ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ae:	4a09      	ldr	r2, [pc, #36]	@ (80111d4 <find_volume+0x50c>)
 80111b0:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80111b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b4:	2200      	movs	r2, #0
 80111b6:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80111b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80111ba:	f7fe f8e3 	bl	800f384 <clear_lock>
#endif
	return FR_OK;
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3758      	adds	r7, #88	@ 0x58
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	41615252 	.word	0x41615252
 80111cc:	61417272 	.word	0x61417272
 80111d0:	24002840 	.word	0x24002840
 80111d4:	24002864 	.word	0x24002864

080111d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80111e2:	2309      	movs	r3, #9
 80111e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d01c      	beq.n	8011226 <validate+0x4e>
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d018      	beq.n	8011226 <validate+0x4e>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d013      	beq.n	8011226 <validate+0x4e>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	889a      	ldrh	r2, [r3, #4]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	88db      	ldrh	r3, [r3, #6]
 8011208:	429a      	cmp	r2, r3
 801120a:	d10c      	bne.n	8011226 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	785b      	ldrb	r3, [r3, #1]
 8011212:	4618      	mov	r0, r3
 8011214:	f7fd fdce 	bl	800edb4 <disk_status>
 8011218:	4603      	mov	r3, r0
 801121a:	f003 0301 	and.w	r3, r3, #1
 801121e:	2b00      	cmp	r3, #0
 8011220:	d101      	bne.n	8011226 <validate+0x4e>
			res = FR_OK;
 8011222:	2300      	movs	r3, #0
 8011224:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011226:	7bfb      	ldrb	r3, [r7, #15]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d102      	bne.n	8011232 <validate+0x5a>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	e000      	b.n	8011234 <validate+0x5c>
 8011232:	2300      	movs	r3, #0
 8011234:	683a      	ldr	r2, [r7, #0]
 8011236:	6013      	str	r3, [r2, #0]
	return res;
 8011238:	7bfb      	ldrb	r3, [r7, #15]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
	...

08011244 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b088      	sub	sp, #32
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	4613      	mov	r3, r2
 8011250:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011256:	f107 0310 	add.w	r3, r7, #16
 801125a:	4618      	mov	r0, r3
 801125c:	f7ff fc99 	bl	8010b92 <get_ldnumber>
 8011260:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	2b00      	cmp	r3, #0
 8011266:	da01      	bge.n	801126c <f_mount+0x28>
 8011268:	230b      	movs	r3, #11
 801126a:	e02b      	b.n	80112c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801126c:	4a17      	ldr	r2, [pc, #92]	@ (80112cc <f_mount+0x88>)
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011274:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d005      	beq.n	8011288 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801127c:	69b8      	ldr	r0, [r7, #24]
 801127e:	f7fe f881 	bl	800f384 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	2200      	movs	r2, #0
 8011286:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d002      	beq.n	8011294 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2200      	movs	r2, #0
 8011292:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011294:	68fa      	ldr	r2, [r7, #12]
 8011296:	490d      	ldr	r1, [pc, #52]	@ (80112cc <f_mount+0x88>)
 8011298:	69fb      	ldr	r3, [r7, #28]
 801129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d002      	beq.n	80112aa <f_mount+0x66>
 80112a4:	79fb      	ldrb	r3, [r7, #7]
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d001      	beq.n	80112ae <f_mount+0x6a>
 80112aa:	2300      	movs	r3, #0
 80112ac:	e00a      	b.n	80112c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80112ae:	f107 010c 	add.w	r1, r7, #12
 80112b2:	f107 0308 	add.w	r3, r7, #8
 80112b6:	2200      	movs	r2, #0
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7ff fd05 	bl	8010cc8 <find_volume>
 80112be:	4603      	mov	r3, r0
 80112c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80112c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3720      	adds	r7, #32
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	2400283c 	.word	0x2400283c

080112d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b09a      	sub	sp, #104	@ 0x68
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	4613      	mov	r3, r2
 80112dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d101      	bne.n	80112e8 <f_open+0x18>
 80112e4:	2309      	movs	r3, #9
 80112e6:	e1b7      	b.n	8011658 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80112e8:	79fb      	ldrb	r3, [r7, #7]
 80112ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80112ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80112f0:	79fa      	ldrb	r2, [r7, #7]
 80112f2:	f107 0114 	add.w	r1, r7, #20
 80112f6:	f107 0308 	add.w	r3, r7, #8
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7ff fce4 	bl	8010cc8 <find_volume>
 8011300:	4603      	mov	r3, r0
 8011302:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011306:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801130a:	2b00      	cmp	r3, #0
 801130c:	f040 819b 	bne.w	8011646 <f_open+0x376>
		dj.obj.fs = fs;
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011314:	68ba      	ldr	r2, [r7, #8]
 8011316:	f107 0318 	add.w	r3, r7, #24
 801131a:	4611      	mov	r1, r2
 801131c:	4618      	mov	r0, r3
 801131e:	f7ff fba3 	bl	8010a68 <follow_path>
 8011322:	4603      	mov	r3, r0
 8011324:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011328:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801132c:	2b00      	cmp	r3, #0
 801132e:	d118      	bne.n	8011362 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011330:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011334:	b25b      	sxtb	r3, r3
 8011336:	2b00      	cmp	r3, #0
 8011338:	da03      	bge.n	8011342 <f_open+0x72>
				res = FR_INVALID_NAME;
 801133a:	2306      	movs	r3, #6
 801133c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011340:	e00f      	b.n	8011362 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011342:	79fb      	ldrb	r3, [r7, #7]
 8011344:	2b01      	cmp	r3, #1
 8011346:	bf8c      	ite	hi
 8011348:	2301      	movhi	r3, #1
 801134a:	2300      	movls	r3, #0
 801134c:	b2db      	uxtb	r3, r3
 801134e:	461a      	mov	r2, r3
 8011350:	f107 0318 	add.w	r3, r7, #24
 8011354:	4611      	mov	r1, r2
 8011356:	4618      	mov	r0, r3
 8011358:	f7fd fecc 	bl	800f0f4 <chk_lock>
 801135c:	4603      	mov	r3, r0
 801135e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011362:	79fb      	ldrb	r3, [r7, #7]
 8011364:	f003 031c 	and.w	r3, r3, #28
 8011368:	2b00      	cmp	r3, #0
 801136a:	d07f      	beq.n	801146c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801136c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011370:	2b00      	cmp	r3, #0
 8011372:	d017      	beq.n	80113a4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011374:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011378:	2b04      	cmp	r3, #4
 801137a:	d10e      	bne.n	801139a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801137c:	f7fd ff16 	bl	800f1ac <enq_lock>
 8011380:	4603      	mov	r3, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	d006      	beq.n	8011394 <f_open+0xc4>
 8011386:	f107 0318 	add.w	r3, r7, #24
 801138a:	4618      	mov	r0, r3
 801138c:	f7ff f86e 	bl	801046c <dir_register>
 8011390:	4603      	mov	r3, r0
 8011392:	e000      	b.n	8011396 <f_open+0xc6>
 8011394:	2312      	movs	r3, #18
 8011396:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801139a:	79fb      	ldrb	r3, [r7, #7]
 801139c:	f043 0308 	orr.w	r3, r3, #8
 80113a0:	71fb      	strb	r3, [r7, #7]
 80113a2:	e010      	b.n	80113c6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80113a4:	7fbb      	ldrb	r3, [r7, #30]
 80113a6:	f003 0311 	and.w	r3, r3, #17
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d003      	beq.n	80113b6 <f_open+0xe6>
					res = FR_DENIED;
 80113ae:	2307      	movs	r3, #7
 80113b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80113b4:	e007      	b.n	80113c6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80113b6:	79fb      	ldrb	r3, [r7, #7]
 80113b8:	f003 0304 	and.w	r3, r3, #4
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d002      	beq.n	80113c6 <f_open+0xf6>
 80113c0:	2308      	movs	r3, #8
 80113c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80113c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d168      	bne.n	80114a0 <f_open+0x1d0>
 80113ce:	79fb      	ldrb	r3, [r7, #7]
 80113d0:	f003 0308 	and.w	r3, r3, #8
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d063      	beq.n	80114a0 <f_open+0x1d0>
				dw = GET_FATTIME();
 80113d8:	f7fc ffca 	bl	800e370 <get_fattime>
 80113dc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80113de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113e0:	330e      	adds	r3, #14
 80113e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fd fddb 	bl	800efa0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80113ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ec:	3316      	adds	r3, #22
 80113ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fd fdd5 	bl	800efa0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80113f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f8:	330b      	adds	r3, #11
 80113fa:	2220      	movs	r2, #32
 80113fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011402:	4611      	mov	r1, r2
 8011404:	4618      	mov	r0, r3
 8011406:	f7fe fdaa 	bl	800ff5e <ld_clust>
 801140a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011410:	2200      	movs	r2, #0
 8011412:	4618      	mov	r0, r3
 8011414:	f7fe fdc2 	bl	800ff9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801141a:	331c      	adds	r3, #28
 801141c:	2100      	movs	r1, #0
 801141e:	4618      	mov	r0, r3
 8011420:	f7fd fdbe 	bl	800efa0 <st_dword>
					fs->wflag = 1;
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	2201      	movs	r2, #1
 8011428:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801142a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801142c:	2b00      	cmp	r3, #0
 801142e:	d037      	beq.n	80114a0 <f_open+0x1d0>
						dw = fs->winsect;
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011434:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011436:	f107 0318 	add.w	r3, r7, #24
 801143a:	2200      	movs	r2, #0
 801143c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801143e:	4618      	mov	r0, r3
 8011440:	f7fe fab2 	bl	800f9a8 <remove_chain>
 8011444:	4603      	mov	r3, r0
 8011446:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801144a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801144e:	2b00      	cmp	r3, #0
 8011450:	d126      	bne.n	80114a0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011456:	4618      	mov	r0, r3
 8011458:	f7fd fffc 	bl	800f454 <move_window>
 801145c:	4603      	mov	r3, r0
 801145e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011466:	3a01      	subs	r2, #1
 8011468:	615a      	str	r2, [r3, #20]
 801146a:	e019      	b.n	80114a0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801146c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011470:	2b00      	cmp	r3, #0
 8011472:	d115      	bne.n	80114a0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011474:	7fbb      	ldrb	r3, [r7, #30]
 8011476:	f003 0310 	and.w	r3, r3, #16
 801147a:	2b00      	cmp	r3, #0
 801147c:	d003      	beq.n	8011486 <f_open+0x1b6>
					res = FR_NO_FILE;
 801147e:	2304      	movs	r3, #4
 8011480:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011484:	e00c      	b.n	80114a0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011486:	79fb      	ldrb	r3, [r7, #7]
 8011488:	f003 0302 	and.w	r3, r3, #2
 801148c:	2b00      	cmp	r3, #0
 801148e:	d007      	beq.n	80114a0 <f_open+0x1d0>
 8011490:	7fbb      	ldrb	r3, [r7, #30]
 8011492:	f003 0301 	and.w	r3, r3, #1
 8011496:	2b00      	cmp	r3, #0
 8011498:	d002      	beq.n	80114a0 <f_open+0x1d0>
						res = FR_DENIED;
 801149a:	2307      	movs	r3, #7
 801149c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80114a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d126      	bne.n	80114f6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80114a8:	79fb      	ldrb	r3, [r7, #7]
 80114aa:	f003 0308 	and.w	r3, r3, #8
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d003      	beq.n	80114ba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80114b2:	79fb      	ldrb	r3, [r7, #7]
 80114b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80114b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80114c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80114c8:	79fb      	ldrb	r3, [r7, #7]
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	bf8c      	ite	hi
 80114ce:	2301      	movhi	r3, #1
 80114d0:	2300      	movls	r3, #0
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	461a      	mov	r2, r3
 80114d6:	f107 0318 	add.w	r3, r7, #24
 80114da:	4611      	mov	r1, r2
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fd fe87 	bl	800f1f0 <inc_lock>
 80114e2:	4602      	mov	r2, r0
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	691b      	ldr	r3, [r3, #16]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d102      	bne.n	80114f6 <f_open+0x226>
 80114f0:	2302      	movs	r3, #2
 80114f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80114f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	f040 80a3 	bne.w	8011646 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011504:	4611      	mov	r1, r2
 8011506:	4618      	mov	r0, r3
 8011508:	f7fe fd29 	bl	800ff5e <ld_clust>
 801150c:	4602      	mov	r2, r0
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011514:	331c      	adds	r3, #28
 8011516:	4618      	mov	r0, r3
 8011518:	f7fd fd04 	bl	800ef24 <ld_dword>
 801151c:	4602      	mov	r2, r0
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2200      	movs	r2, #0
 8011526:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011528:	697a      	ldr	r2, [r7, #20]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	88da      	ldrh	r2, [r3, #6]
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	79fa      	ldrb	r2, [r7, #7]
 801153a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2200      	movs	r2, #0
 8011540:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2200      	movs	r2, #0
 8011546:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2200      	movs	r2, #0
 801154c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	3330      	adds	r3, #48	@ 0x30
 8011552:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011556:	2100      	movs	r1, #0
 8011558:	4618      	mov	r0, r3
 801155a:	f7fd fd6e 	bl	800f03a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801155e:	79fb      	ldrb	r3, [r7, #7]
 8011560:	f003 0320 	and.w	r3, r3, #32
 8011564:	2b00      	cmp	r3, #0
 8011566:	d06e      	beq.n	8011646 <f_open+0x376>
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d06a      	beq.n	8011646 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	68da      	ldr	r2, [r3, #12]
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	895b      	ldrh	r3, [r3, #10]
 801157c:	461a      	mov	r2, r3
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	899b      	ldrh	r3, [r3, #12]
 8011582:	fb02 f303 	mul.w	r3, r2, r3
 8011586:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	689b      	ldr	r3, [r3, #8]
 801158c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011594:	e016      	b.n	80115c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801159a:	4618      	mov	r0, r3
 801159c:	f7fe f817 	bl	800f5ce <get_fat>
 80115a0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80115a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d802      	bhi.n	80115ae <f_open+0x2de>
 80115a8:	2302      	movs	r3, #2
 80115aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80115ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80115b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b4:	d102      	bne.n	80115bc <f_open+0x2ec>
 80115b6:	2301      	movs	r3, #1
 80115b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80115bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80115be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80115c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d103      	bne.n	80115d4 <f_open+0x304>
 80115cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80115ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115d0:	429a      	cmp	r2, r3
 80115d2:	d8e0      	bhi.n	8011596 <f_open+0x2c6>
				}
				fp->clust = clst;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80115d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80115da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d131      	bne.n	8011646 <f_open+0x376>
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	899b      	ldrh	r3, [r3, #12]
 80115e6:	461a      	mov	r2, r3
 80115e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80115ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80115ee:	fb01 f202 	mul.w	r2, r1, r2
 80115f2:	1a9b      	subs	r3, r3, r2
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d026      	beq.n	8011646 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fd ffc7 	bl	800f590 <clust2sect>
 8011602:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011606:	2b00      	cmp	r3, #0
 8011608:	d103      	bne.n	8011612 <f_open+0x342>
						res = FR_INT_ERR;
 801160a:	2302      	movs	r3, #2
 801160c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011610:	e019      	b.n	8011646 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	899b      	ldrh	r3, [r3, #12]
 8011616:	461a      	mov	r2, r3
 8011618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801161a:	fbb3 f2f2 	udiv	r2, r3, r2
 801161e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011620:	441a      	add	r2, r3
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	7858      	ldrb	r0, [r3, #1]
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	6a1a      	ldr	r2, [r3, #32]
 8011634:	2301      	movs	r3, #1
 8011636:	f7fd fbff 	bl	800ee38 <disk_read>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d002      	beq.n	8011646 <f_open+0x376>
 8011640:	2301      	movs	r3, #1
 8011642:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011646:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801164a:	2b00      	cmp	r3, #0
 801164c:	d002      	beq.n	8011654 <f_open+0x384>
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2200      	movs	r2, #0
 8011652:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011654:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8011658:	4618      	mov	r0, r3
 801165a:	3768      	adds	r7, #104	@ 0x68
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b08c      	sub	sp, #48	@ 0x30
 8011664:	af00      	add	r7, sp, #0
 8011666:	60f8      	str	r0, [r7, #12]
 8011668:	60b9      	str	r1, [r7, #8]
 801166a:	607a      	str	r2, [r7, #4]
 801166c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	2200      	movs	r2, #0
 8011676:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	f107 0210 	add.w	r2, r7, #16
 801167e:	4611      	mov	r1, r2
 8011680:	4618      	mov	r0, r3
 8011682:	f7ff fda9 	bl	80111d8 <validate>
 8011686:	4603      	mov	r3, r0
 8011688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801168c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011690:	2b00      	cmp	r3, #0
 8011692:	d107      	bne.n	80116a4 <f_write+0x44>
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	7d5b      	ldrb	r3, [r3, #21]
 8011698:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801169c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d002      	beq.n	80116aa <f_write+0x4a>
 80116a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80116a8:	e16a      	b.n	8011980 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	7d1b      	ldrb	r3, [r3, #20]
 80116ae:	f003 0302 	and.w	r3, r3, #2
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d101      	bne.n	80116ba <f_write+0x5a>
 80116b6:	2307      	movs	r3, #7
 80116b8:	e162      	b.n	8011980 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	699a      	ldr	r2, [r3, #24]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	441a      	add	r2, r3
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	699b      	ldr	r3, [r3, #24]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	f080 814c 	bcs.w	8011964 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	699b      	ldr	r3, [r3, #24]
 80116d0:	43db      	mvns	r3, r3
 80116d2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80116d4:	e146      	b.n	8011964 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	699b      	ldr	r3, [r3, #24]
 80116da:	693a      	ldr	r2, [r7, #16]
 80116dc:	8992      	ldrh	r2, [r2, #12]
 80116de:	fbb3 f1f2 	udiv	r1, r3, r2
 80116e2:	fb01 f202 	mul.w	r2, r1, r2
 80116e6:	1a9b      	subs	r3, r3, r2
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f040 80f1 	bne.w	80118d0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	699b      	ldr	r3, [r3, #24]
 80116f2:	693a      	ldr	r2, [r7, #16]
 80116f4:	8992      	ldrh	r2, [r2, #12]
 80116f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80116fa:	693a      	ldr	r2, [r7, #16]
 80116fc:	8952      	ldrh	r2, [r2, #10]
 80116fe:	3a01      	subs	r2, #1
 8011700:	4013      	ands	r3, r2
 8011702:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d143      	bne.n	8011792 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	699b      	ldr	r3, [r3, #24]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d10c      	bne.n	801172c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	689b      	ldr	r3, [r3, #8]
 8011716:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801171a:	2b00      	cmp	r3, #0
 801171c:	d11a      	bne.n	8011754 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2100      	movs	r1, #0
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe f9a5 	bl	800fa72 <create_chain>
 8011728:	62b8      	str	r0, [r7, #40]	@ 0x28
 801172a:	e013      	b.n	8011754 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011730:	2b00      	cmp	r3, #0
 8011732:	d007      	beq.n	8011744 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	699b      	ldr	r3, [r3, #24]
 8011738:	4619      	mov	r1, r3
 801173a:	68f8      	ldr	r0, [r7, #12]
 801173c:	f7fe fa31 	bl	800fba2 <clmt_clust>
 8011740:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011742:	e007      	b.n	8011754 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	69db      	ldr	r3, [r3, #28]
 801174a:	4619      	mov	r1, r3
 801174c:	4610      	mov	r0, r2
 801174e:	f7fe f990 	bl	800fa72 <create_chain>
 8011752:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011756:	2b00      	cmp	r3, #0
 8011758:	f000 8109 	beq.w	801196e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801175c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801175e:	2b01      	cmp	r3, #1
 8011760:	d104      	bne.n	801176c <f_write+0x10c>
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2202      	movs	r2, #2
 8011766:	755a      	strb	r2, [r3, #21]
 8011768:	2302      	movs	r3, #2
 801176a:	e109      	b.n	8011980 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801176c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801176e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011772:	d104      	bne.n	801177e <f_write+0x11e>
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2201      	movs	r2, #1
 8011778:	755a      	strb	r2, [r3, #21]
 801177a:	2301      	movs	r3, #1
 801177c:	e100      	b.n	8011980 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011782:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <f_write+0x132>
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011790:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	7d1b      	ldrb	r3, [r3, #20]
 8011796:	b25b      	sxtb	r3, r3
 8011798:	2b00      	cmp	r3, #0
 801179a:	da18      	bge.n	80117ce <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	7858      	ldrb	r0, [r3, #1]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6a1a      	ldr	r2, [r3, #32]
 80117aa:	2301      	movs	r3, #1
 80117ac:	f7fd fb64 	bl	800ee78 <disk_write>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d004      	beq.n	80117c0 <f_write+0x160>
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2201      	movs	r2, #1
 80117ba:	755a      	strb	r2, [r3, #21]
 80117bc:	2301      	movs	r3, #1
 80117be:	e0df      	b.n	8011980 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	7d1b      	ldrb	r3, [r3, #20]
 80117c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80117ce:	693a      	ldr	r2, [r7, #16]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	69db      	ldr	r3, [r3, #28]
 80117d4:	4619      	mov	r1, r3
 80117d6:	4610      	mov	r0, r2
 80117d8:	f7fd feda 	bl	800f590 <clust2sect>
 80117dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d104      	bne.n	80117ee <f_write+0x18e>
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2202      	movs	r2, #2
 80117e8:	755a      	strb	r2, [r3, #21]
 80117ea:	2302      	movs	r3, #2
 80117ec:	e0c8      	b.n	8011980 <f_write+0x320>
			sect += csect;
 80117ee:	697a      	ldr	r2, [r7, #20]
 80117f0:	69bb      	ldr	r3, [r7, #24]
 80117f2:	4413      	add	r3, r2
 80117f4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	899b      	ldrh	r3, [r3, #12]
 80117fa:	461a      	mov	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8011802:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011804:	6a3b      	ldr	r3, [r7, #32]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d043      	beq.n	8011892 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801180a:	69ba      	ldr	r2, [r7, #24]
 801180c:	6a3b      	ldr	r3, [r7, #32]
 801180e:	4413      	add	r3, r2
 8011810:	693a      	ldr	r2, [r7, #16]
 8011812:	8952      	ldrh	r2, [r2, #10]
 8011814:	4293      	cmp	r3, r2
 8011816:	d905      	bls.n	8011824 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	895b      	ldrh	r3, [r3, #10]
 801181c:	461a      	mov	r2, r3
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	7858      	ldrb	r0, [r3, #1]
 8011828:	6a3b      	ldr	r3, [r7, #32]
 801182a:	697a      	ldr	r2, [r7, #20]
 801182c:	69f9      	ldr	r1, [r7, #28]
 801182e:	f7fd fb23 	bl	800ee78 <disk_write>
 8011832:	4603      	mov	r3, r0
 8011834:	2b00      	cmp	r3, #0
 8011836:	d004      	beq.n	8011842 <f_write+0x1e2>
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2201      	movs	r2, #1
 801183c:	755a      	strb	r2, [r3, #21]
 801183e:	2301      	movs	r3, #1
 8011840:	e09e      	b.n	8011980 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	6a1a      	ldr	r2, [r3, #32]
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	1ad3      	subs	r3, r2, r3
 801184a:	6a3a      	ldr	r2, [r7, #32]
 801184c:	429a      	cmp	r2, r3
 801184e:	d918      	bls.n	8011882 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	6a1a      	ldr	r2, [r3, #32]
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	1ad3      	subs	r3, r2, r3
 801185e:	693a      	ldr	r2, [r7, #16]
 8011860:	8992      	ldrh	r2, [r2, #12]
 8011862:	fb02 f303 	mul.w	r3, r2, r3
 8011866:	69fa      	ldr	r2, [r7, #28]
 8011868:	18d1      	adds	r1, r2, r3
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	899b      	ldrh	r3, [r3, #12]
 801186e:	461a      	mov	r2, r3
 8011870:	f7fd fbc2 	bl	800eff8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	7d1b      	ldrb	r3, [r3, #20]
 8011878:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801187c:	b2da      	uxtb	r2, r3
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	899b      	ldrh	r3, [r3, #12]
 8011886:	461a      	mov	r2, r3
 8011888:	6a3b      	ldr	r3, [r7, #32]
 801188a:	fb02 f303 	mul.w	r3, r2, r3
 801188e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011890:	e04b      	b.n	801192a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	6a1b      	ldr	r3, [r3, #32]
 8011896:	697a      	ldr	r2, [r7, #20]
 8011898:	429a      	cmp	r2, r3
 801189a:	d016      	beq.n	80118ca <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	699a      	ldr	r2, [r3, #24]
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d210      	bcs.n	80118ca <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	7858      	ldrb	r0, [r3, #1]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80118b2:	2301      	movs	r3, #1
 80118b4:	697a      	ldr	r2, [r7, #20]
 80118b6:	f7fd fabf 	bl	800ee38 <disk_read>
 80118ba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d004      	beq.n	80118ca <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2201      	movs	r2, #1
 80118c4:	755a      	strb	r2, [r3, #21]
 80118c6:	2301      	movs	r3, #1
 80118c8:	e05a      	b.n	8011980 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	697a      	ldr	r2, [r7, #20]
 80118ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	899b      	ldrh	r3, [r3, #12]
 80118d4:	4618      	mov	r0, r3
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	699b      	ldr	r3, [r3, #24]
 80118da:	693a      	ldr	r2, [r7, #16]
 80118dc:	8992      	ldrh	r2, [r2, #12]
 80118de:	fbb3 f1f2 	udiv	r1, r3, r2
 80118e2:	fb01 f202 	mul.w	r2, r1, r2
 80118e6:	1a9b      	subs	r3, r3, r2
 80118e8:	1ac3      	subs	r3, r0, r3
 80118ea:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80118ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d901      	bls.n	80118f8 <f_write+0x298>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	699b      	ldr	r3, [r3, #24]
 8011902:	693a      	ldr	r2, [r7, #16]
 8011904:	8992      	ldrh	r2, [r2, #12]
 8011906:	fbb3 f0f2 	udiv	r0, r3, r2
 801190a:	fb00 f202 	mul.w	r2, r0, r2
 801190e:	1a9b      	subs	r3, r3, r2
 8011910:	440b      	add	r3, r1
 8011912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011914:	69f9      	ldr	r1, [r7, #28]
 8011916:	4618      	mov	r0, r3
 8011918:	f7fd fb6e 	bl	800eff8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	7d1b      	ldrb	r3, [r3, #20]
 8011920:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011924:	b2da      	uxtb	r2, r3
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801192a:	69fa      	ldr	r2, [r7, #28]
 801192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801192e:	4413      	add	r3, r2
 8011930:	61fb      	str	r3, [r7, #28]
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	699a      	ldr	r2, [r3, #24]
 8011936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011938:	441a      	add	r2, r3
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	619a      	str	r2, [r3, #24]
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	68da      	ldr	r2, [r3, #12]
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	699b      	ldr	r3, [r3, #24]
 8011946:	429a      	cmp	r2, r3
 8011948:	bf38      	it	cc
 801194a:	461a      	movcc	r2, r3
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	60da      	str	r2, [r3, #12]
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011956:	441a      	add	r2, r3
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	601a      	str	r2, [r3, #0]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011960:	1ad3      	subs	r3, r2, r3
 8011962:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	f47f aeb5 	bne.w	80116d6 <f_write+0x76>
 801196c:	e000      	b.n	8011970 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801196e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	7d1b      	ldrb	r3, [r3, #20]
 8011974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011978:	b2da      	uxtb	r2, r3
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801197e:	2300      	movs	r3, #0
}
 8011980:	4618      	mov	r0, r3
 8011982:	3730      	adds	r7, #48	@ 0x30
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}

08011988 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b086      	sub	sp, #24
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f107 0208 	add.w	r2, r7, #8
 8011996:	4611      	mov	r1, r2
 8011998:	4618      	mov	r0, r3
 801199a:	f7ff fc1d 	bl	80111d8 <validate>
 801199e:	4603      	mov	r3, r0
 80119a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80119a2:	7dfb      	ldrb	r3, [r7, #23]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d168      	bne.n	8011a7a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	7d1b      	ldrb	r3, [r3, #20]
 80119ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d062      	beq.n	8011a7a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	7d1b      	ldrb	r3, [r3, #20]
 80119b8:	b25b      	sxtb	r3, r3
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	da15      	bge.n	80119ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	7858      	ldrb	r0, [r3, #1]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6a1a      	ldr	r2, [r3, #32]
 80119cc:	2301      	movs	r3, #1
 80119ce:	f7fd fa53 	bl	800ee78 <disk_write>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d001      	beq.n	80119dc <f_sync+0x54>
 80119d8:	2301      	movs	r3, #1
 80119da:	e04f      	b.n	8011a7c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	7d1b      	ldrb	r3, [r3, #20]
 80119e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119e4:	b2da      	uxtb	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80119ea:	f7fc fcc1 	bl	800e370 <get_fattime>
 80119ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80119f0:	68ba      	ldr	r2, [r7, #8]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119f6:	4619      	mov	r1, r3
 80119f8:	4610      	mov	r0, r2
 80119fa:	f7fd fd2b 	bl	800f454 <move_window>
 80119fe:	4603      	mov	r3, r0
 8011a00:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011a02:	7dfb      	ldrb	r3, [r7, #23]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d138      	bne.n	8011a7a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a0c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	330b      	adds	r3, #11
 8011a12:	781a      	ldrb	r2, [r3, #0]
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	330b      	adds	r3, #11
 8011a18:	f042 0220 	orr.w	r2, r2, #32
 8011a1c:	b2d2      	uxtb	r2, r2
 8011a1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6818      	ldr	r0, [r3, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	461a      	mov	r2, r3
 8011a2a:	68f9      	ldr	r1, [r7, #12]
 8011a2c:	f7fe fab6 	bl	800ff9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f103 021c 	add.w	r2, r3, #28
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	4610      	mov	r0, r2
 8011a3e:	f7fd faaf 	bl	800efa0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	3316      	adds	r3, #22
 8011a46:	6939      	ldr	r1, [r7, #16]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7fd faa9 	bl	800efa0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	3312      	adds	r3, #18
 8011a52:	2100      	movs	r1, #0
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fd fa88 	bl	800ef6a <st_word>
					fs->wflag = 1;
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fd fd24 	bl	800f4b0 <sync_fs>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	7d1b      	ldrb	r3, [r3, #20]
 8011a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a74:	b2da      	uxtb	r2, r3
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3718      	adds	r7, #24
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}

08011a84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f7ff ff7b 	bl	8011988 <f_sync>
 8011a92:	4603      	mov	r3, r0
 8011a94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011a96:	7bfb      	ldrb	r3, [r7, #15]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d118      	bne.n	8011ace <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f107 0208 	add.w	r2, r7, #8
 8011aa2:	4611      	mov	r1, r2
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7ff fb97 	bl	80111d8 <validate>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011aae:	7bfb      	ldrb	r3, [r7, #15]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d10c      	bne.n	8011ace <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	691b      	ldr	r3, [r3, #16]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fd fc27 	bl	800f30c <dec_lock>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011ac2:	7bfb      	ldrb	r3, [r7, #15]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d102      	bne.n	8011ace <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3710      	adds	r7, #16
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b090      	sub	sp, #64	@ 0x40
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f107 0208 	add.w	r2, r7, #8
 8011ae8:	4611      	mov	r1, r2
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7ff fb74 	bl	80111d8 <validate>
 8011af0:	4603      	mov	r3, r0
 8011af2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011af6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d103      	bne.n	8011b06 <f_lseek+0x2e>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	7d5b      	ldrb	r3, [r3, #21]
 8011b02:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011b06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d002      	beq.n	8011b14 <f_lseek+0x3c>
 8011b0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011b12:	e201      	b.n	8011f18 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	f000 80d9 	beq.w	8011cd0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b24:	d15a      	bne.n	8011bdc <f_lseek+0x104>
			tbl = fp->cltbl;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b2a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b2e:	1d1a      	adds	r2, r3, #4
 8011b30:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	617b      	str	r3, [r7, #20]
 8011b36:	2302      	movs	r3, #2
 8011b38:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	689b      	ldr	r3, [r3, #8]
 8011b3e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d03a      	beq.n	8011bbc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b48:	613b      	str	r3, [r7, #16]
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b50:	3302      	adds	r3, #2
 8011b52:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b56:	60fb      	str	r3, [r7, #12]
 8011b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7fd fd33 	bl	800f5ce <get_fat>
 8011b68:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d804      	bhi.n	8011b7a <f_lseek+0xa2>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2202      	movs	r2, #2
 8011b74:	755a      	strb	r2, [r3, #21]
 8011b76:	2302      	movs	r3, #2
 8011b78:	e1ce      	b.n	8011f18 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b80:	d104      	bne.n	8011b8c <f_lseek+0xb4>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2201      	movs	r2, #1
 8011b86:	755a      	strb	r2, [r3, #21]
 8011b88:	2301      	movs	r3, #1
 8011b8a:	e1c5      	b.n	8011f18 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	3301      	adds	r3, #1
 8011b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d0de      	beq.n	8011b54 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d809      	bhi.n	8011bb2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba0:	1d1a      	adds	r2, r3, #4
 8011ba2:	627a      	str	r2, [r7, #36]	@ 0x24
 8011ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ba6:	601a      	str	r2, [r3, #0]
 8011ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011baa:	1d1a      	adds	r2, r3, #4
 8011bac:	627a      	str	r2, [r7, #36]	@ 0x24
 8011bae:	693a      	ldr	r2, [r7, #16]
 8011bb0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	6a1b      	ldr	r3, [r3, #32]
 8011bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d3c4      	bcc.n	8011b46 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011bc2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d803      	bhi.n	8011bd4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bce:	2200      	movs	r2, #0
 8011bd0:	601a      	str	r2, [r3, #0]
 8011bd2:	e19f      	b.n	8011f14 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011bd4:	2311      	movs	r3, #17
 8011bd6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011bda:	e19b      	b.n	8011f14 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	683a      	ldr	r2, [r7, #0]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d902      	bls.n	8011bec <f_lseek+0x114>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	683a      	ldr	r2, [r7, #0]
 8011bf0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	f000 818d 	beq.w	8011f14 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	4619      	mov	r1, r3
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f7fd ffce 	bl	800fba2 <clmt_clust>
 8011c06:	4602      	mov	r2, r0
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011c0c:	68ba      	ldr	r2, [r7, #8]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	69db      	ldr	r3, [r3, #28]
 8011c12:	4619      	mov	r1, r3
 8011c14:	4610      	mov	r0, r2
 8011c16:	f7fd fcbb 	bl	800f590 <clust2sect>
 8011c1a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011c1c:	69bb      	ldr	r3, [r7, #24]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d104      	bne.n	8011c2c <f_lseek+0x154>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2202      	movs	r2, #2
 8011c26:	755a      	strb	r2, [r3, #21]
 8011c28:	2302      	movs	r3, #2
 8011c2a:	e175      	b.n	8011f18 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	3b01      	subs	r3, #1
 8011c30:	68ba      	ldr	r2, [r7, #8]
 8011c32:	8992      	ldrh	r2, [r2, #12]
 8011c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c38:	68ba      	ldr	r2, [r7, #8]
 8011c3a:	8952      	ldrh	r2, [r2, #10]
 8011c3c:	3a01      	subs	r2, #1
 8011c3e:	4013      	ands	r3, r2
 8011c40:	69ba      	ldr	r2, [r7, #24]
 8011c42:	4413      	add	r3, r2
 8011c44:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	699b      	ldr	r3, [r3, #24]
 8011c4a:	68ba      	ldr	r2, [r7, #8]
 8011c4c:	8992      	ldrh	r2, [r2, #12]
 8011c4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c52:	fb01 f202 	mul.w	r2, r1, r2
 8011c56:	1a9b      	subs	r3, r3, r2
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	f000 815b 	beq.w	8011f14 <f_lseek+0x43c>
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6a1b      	ldr	r3, [r3, #32]
 8011c62:	69ba      	ldr	r2, [r7, #24]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	f000 8155 	beq.w	8011f14 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	7d1b      	ldrb	r3, [r3, #20]
 8011c6e:	b25b      	sxtb	r3, r3
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	da18      	bge.n	8011ca6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	7858      	ldrb	r0, [r3, #1]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6a1a      	ldr	r2, [r3, #32]
 8011c82:	2301      	movs	r3, #1
 8011c84:	f7fd f8f8 	bl	800ee78 <disk_write>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d004      	beq.n	8011c98 <f_lseek+0x1c0>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2201      	movs	r2, #1
 8011c92:	755a      	strb	r2, [r3, #21]
 8011c94:	2301      	movs	r3, #1
 8011c96:	e13f      	b.n	8011f18 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	7d1b      	ldrb	r3, [r3, #20]
 8011c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ca0:	b2da      	uxtb	r2, r3
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	7858      	ldrb	r0, [r3, #1]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	69ba      	ldr	r2, [r7, #24]
 8011cb4:	f7fd f8c0 	bl	800ee38 <disk_read>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d004      	beq.n	8011cc8 <f_lseek+0x1f0>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	755a      	strb	r2, [r3, #21]
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e127      	b.n	8011f18 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	69ba      	ldr	r2, [r7, #24]
 8011ccc:	621a      	str	r2, [r3, #32]
 8011cce:	e121      	b.n	8011f14 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	683a      	ldr	r2, [r7, #0]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d908      	bls.n	8011cec <f_lseek+0x214>
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	7d1b      	ldrb	r3, [r3, #20]
 8011cde:	f003 0302 	and.w	r3, r3, #2
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d102      	bne.n	8011cec <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	68db      	ldr	r3, [r3, #12]
 8011cea:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	699b      	ldr	r3, [r3, #24]
 8011cf0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cfa:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f000 80b5 	beq.w	8011e6e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	895b      	ldrh	r3, [r3, #10]
 8011d08:	461a      	mov	r2, r3
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	899b      	ldrh	r3, [r3, #12]
 8011d0e:	fb02 f303 	mul.w	r3, r2, r3
 8011d12:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011d14:	6a3b      	ldr	r3, [r7, #32]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d01b      	beq.n	8011d52 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	1e5a      	subs	r2, r3, #1
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8011d24:	6a3b      	ldr	r3, [r7, #32]
 8011d26:	1e59      	subs	r1, r3, #1
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d30f      	bcc.n	8011d52 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011d32:	6a3b      	ldr	r3, [r7, #32]
 8011d34:	1e5a      	subs	r2, r3, #1
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	425b      	negs	r3, r3
 8011d3a:	401a      	ands	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	699b      	ldr	r3, [r3, #24]
 8011d44:	683a      	ldr	r2, [r7, #0]
 8011d46:	1ad3      	subs	r3, r2, r3
 8011d48:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	69db      	ldr	r3, [r3, #28]
 8011d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011d50:	e022      	b.n	8011d98 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	689b      	ldr	r3, [r3, #8]
 8011d56:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d119      	bne.n	8011d92 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2100      	movs	r1, #0
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fd fe85 	bl	800fa72 <create_chain>
 8011d68:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d104      	bne.n	8011d7a <f_lseek+0x2a2>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2202      	movs	r2, #2
 8011d74:	755a      	strb	r2, [r3, #21]
 8011d76:	2302      	movs	r3, #2
 8011d78:	e0ce      	b.n	8011f18 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d80:	d104      	bne.n	8011d8c <f_lseek+0x2b4>
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2201      	movs	r2, #1
 8011d86:	755a      	strb	r2, [r3, #21]
 8011d88:	2301      	movs	r3, #1
 8011d8a:	e0c5      	b.n	8011f18 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d90:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d96:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d067      	beq.n	8011e6e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011d9e:	e03a      	b.n	8011e16 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011da0:	683a      	ldr	r2, [r7, #0]
 8011da2:	69fb      	ldr	r3, [r7, #28]
 8011da4:	1ad3      	subs	r3, r2, r3
 8011da6:	603b      	str	r3, [r7, #0]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	699a      	ldr	r2, [r3, #24]
 8011dac:	69fb      	ldr	r3, [r7, #28]
 8011dae:	441a      	add	r2, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	7d1b      	ldrb	r3, [r3, #20]
 8011db8:	f003 0302 	and.w	r3, r3, #2
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d00b      	beq.n	8011dd8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7fd fe54 	bl	800fa72 <create_chain>
 8011dca:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d108      	bne.n	8011de4 <f_lseek+0x30c>
							ofs = 0; break;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	603b      	str	r3, [r7, #0]
 8011dd6:	e022      	b.n	8011e1e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7fd fbf6 	bl	800f5ce <get_fat>
 8011de2:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dea:	d104      	bne.n	8011df6 <f_lseek+0x31e>
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2201      	movs	r2, #1
 8011df0:	755a      	strb	r2, [r3, #21]
 8011df2:	2301      	movs	r3, #1
 8011df4:	e090      	b.n	8011f18 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d904      	bls.n	8011e06 <f_lseek+0x32e>
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	6a1b      	ldr	r3, [r3, #32]
 8011e00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d304      	bcc.n	8011e10 <f_lseek+0x338>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2202      	movs	r2, #2
 8011e0a:	755a      	strb	r2, [r3, #21]
 8011e0c:	2302      	movs	r3, #2
 8011e0e:	e083      	b.n	8011f18 <f_lseek+0x440>
					fp->clust = clst;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e14:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011e16:	683a      	ldr	r2, [r7, #0]
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d8c0      	bhi.n	8011da0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	699a      	ldr	r2, [r3, #24]
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	441a      	add	r2, r3
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	899b      	ldrh	r3, [r3, #12]
 8011e2e:	461a      	mov	r2, r3
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e36:	fb01 f202 	mul.w	r2, r1, r2
 8011e3a:	1a9b      	subs	r3, r3, r2
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d016      	beq.n	8011e6e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e44:	4618      	mov	r0, r3
 8011e46:	f7fd fba3 	bl	800f590 <clust2sect>
 8011e4a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d104      	bne.n	8011e5c <f_lseek+0x384>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	2202      	movs	r2, #2
 8011e56:	755a      	strb	r2, [r3, #21]
 8011e58:	2302      	movs	r3, #2
 8011e5a:	e05d      	b.n	8011f18 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	899b      	ldrh	r3, [r3, #12]
 8011e60:	461a      	mov	r2, r3
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e6a:	4413      	add	r3, r2
 8011e6c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	699a      	ldr	r2, [r3, #24]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d90a      	bls.n	8011e90 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	699a      	ldr	r2, [r3, #24]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	7d1b      	ldrb	r3, [r3, #20]
 8011e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e8a:	b2da      	uxtb	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	699b      	ldr	r3, [r3, #24]
 8011e94:	68ba      	ldr	r2, [r7, #8]
 8011e96:	8992      	ldrh	r2, [r2, #12]
 8011e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e9c:	fb01 f202 	mul.w	r2, r1, r2
 8011ea0:	1a9b      	subs	r3, r3, r2
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d036      	beq.n	8011f14 <f_lseek+0x43c>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6a1b      	ldr	r3, [r3, #32]
 8011eaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d031      	beq.n	8011f14 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	7d1b      	ldrb	r3, [r3, #20]
 8011eb4:	b25b      	sxtb	r3, r3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	da18      	bge.n	8011eec <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	7858      	ldrb	r0, [r3, #1]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6a1a      	ldr	r2, [r3, #32]
 8011ec8:	2301      	movs	r3, #1
 8011eca:	f7fc ffd5 	bl	800ee78 <disk_write>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d004      	beq.n	8011ede <f_lseek+0x406>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	755a      	strb	r2, [r3, #21]
 8011eda:	2301      	movs	r3, #1
 8011edc:	e01c      	b.n	8011f18 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	7d1b      	ldrb	r3, [r3, #20]
 8011ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ee6:	b2da      	uxtb	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	7858      	ldrb	r0, [r3, #1]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011efa:	f7fc ff9d 	bl	800ee38 <disk_read>
 8011efe:	4603      	mov	r3, r0
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d004      	beq.n	8011f0e <f_lseek+0x436>
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2201      	movs	r2, #1
 8011f08:	755a      	strb	r2, [r3, #21]
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	e004      	b.n	8011f18 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f12:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011f14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3740      	adds	r7, #64	@ 0x40
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}

08011f20 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011f2c:	78fb      	ldrb	r3, [r7, #3]
 8011f2e:	2b0a      	cmp	r3, #10
 8011f30:	d103      	bne.n	8011f3a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011f32:	210d      	movs	r1, #13
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7ff fff3 	bl	8011f20 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	db25      	blt.n	8011f92 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	1c5a      	adds	r2, r3, #1
 8011f4a:	60fa      	str	r2, [r7, #12]
 8011f4c:	687a      	ldr	r2, [r7, #4]
 8011f4e:	4413      	add	r3, r2
 8011f50:	78fa      	ldrb	r2, [r7, #3]
 8011f52:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2b3c      	cmp	r3, #60	@ 0x3c
 8011f58:	dd12      	ble.n	8011f80 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6818      	ldr	r0, [r3, #0]
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f103 010c 	add.w	r1, r3, #12
 8011f64:	68fa      	ldr	r2, [r7, #12]
 8011f66:	f107 0308 	add.w	r3, r7, #8
 8011f6a:	f7ff fb79 	bl	8011660 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011f6e:	68ba      	ldr	r2, [r7, #8]
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d101      	bne.n	8011f7a <putc_bfd+0x5a>
 8011f76:	2300      	movs	r3, #0
 8011f78:	e001      	b.n	8011f7e <putc_bfd+0x5e>
 8011f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f7e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	68fa      	ldr	r2, [r7, #12]
 8011f84:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	689b      	ldr	r3, [r3, #8]
 8011f8a:	1c5a      	adds	r2, r3, #1
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	609a      	str	r2, [r3, #8]
 8011f90:	e000      	b.n	8011f94 <putc_bfd+0x74>
	if (i < 0) return;
 8011f92:	bf00      	nop
}
 8011f94:	3710      	adds	r7, #16
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}

08011f9a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011f9a:	b580      	push	{r7, lr}
 8011f9c:	b084      	sub	sp, #16
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	db16      	blt.n	8011fd8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6818      	ldr	r0, [r3, #0]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f103 010c 	add.w	r1, r3, #12
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	461a      	mov	r2, r3
 8011fba:	f107 030c 	add.w	r3, r7, #12
 8011fbe:	f7ff fb4f 	bl	8011660 <f_write>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d107      	bne.n	8011fd8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	68fa      	ldr	r2, [r7, #12]
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d102      	bne.n	8011fd8 <putc_flush+0x3e>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	e001      	b.n	8011fdc <putc_flush+0x42>
	return EOF;
 8011fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3710      	adds	r7, #16
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	683a      	ldr	r2, [r7, #0]
 8011ff2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	605a      	str	r2, [r3, #4]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	685a      	ldr	r2, [r3, #4]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	609a      	str	r2, [r3, #8]
}
 8012002:	bf00      	nop
 8012004:	370c      	adds	r7, #12
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
	...

08012010 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8012010:	b40e      	push	{r1, r2, r3}
 8012012:	b580      	push	{r7, lr}
 8012014:	b0a7      	sub	sp, #156	@ 0x9c
 8012016:	af00      	add	r7, sp, #0
 8012018:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801201a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801201e:	6879      	ldr	r1, [r7, #4]
 8012020:	4618      	mov	r0, r3
 8012022:	f7ff ffdf 	bl	8011fe4 <putc_init>

	va_start(arp, fmt);
 8012026:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801202a:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 801202c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012030:	1c5a      	adds	r2, r3, #1
 8012032:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 801203c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012040:	2b00      	cmp	r3, #0
 8012042:	f000 81f2 	beq.w	801242a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8012046:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801204a:	2b25      	cmp	r3, #37	@ 0x25
 801204c:	d008      	beq.n	8012060 <f_printf+0x50>
			putc_bfd(&pb, c);
 801204e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8012052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012056:	4611      	mov	r1, r2
 8012058:	4618      	mov	r0, r3
 801205a:	f7ff ff61 	bl	8011f20 <putc_bfd>
			continue;
 801205e:	e1e3      	b.n	8012428 <f_printf+0x418>
		}
		w = f = 0;
 8012060:	2300      	movs	r3, #0
 8012062:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012066:	2300      	movs	r3, #0
 8012068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 801206c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012070:	1c5a      	adds	r2, r3, #1
 8012072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 801207c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012080:	2b30      	cmp	r3, #48	@ 0x30
 8012082:	d10b      	bne.n	801209c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8012084:	2301      	movs	r3, #1
 8012086:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801208a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801208e:	1c5a      	adds	r2, r3, #1
 8012090:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 801209a:	e024      	b.n	80120e6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801209c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120a0:	2b2d      	cmp	r3, #45	@ 0x2d
 80120a2:	d120      	bne.n	80120e6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80120a4:	2302      	movs	r3, #2
 80120a6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80120aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120ae:	1c5a      	adds	r2, r3, #1
 80120b0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80120b4:	781b      	ldrb	r3, [r3, #0]
 80120b6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80120ba:	e014      	b.n	80120e6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80120bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80120c0:	4613      	mov	r3, r2
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	4413      	add	r3, r2
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	461a      	mov	r2, r3
 80120ca:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120ce:	4413      	add	r3, r2
 80120d0:	3b30      	subs	r3, #48	@ 0x30
 80120d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 80120d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120da:	1c5a      	adds	r2, r3, #1
 80120dc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 80120e6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80120ec:	d903      	bls.n	80120f6 <f_printf+0xe6>
 80120ee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120f2:	2b39      	cmp	r3, #57	@ 0x39
 80120f4:	d9e2      	bls.n	80120bc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80120f6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120fa:	2b6c      	cmp	r3, #108	@ 0x6c
 80120fc:	d003      	beq.n	8012106 <f_printf+0xf6>
 80120fe:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012102:	2b4c      	cmp	r3, #76	@ 0x4c
 8012104:	d10d      	bne.n	8012122 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8012106:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801210a:	f043 0304 	orr.w	r3, r3, #4
 801210e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012116:	1c5a      	adds	r2, r3, #1
 8012118:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8012122:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012126:	2b00      	cmp	r3, #0
 8012128:	f000 8181 	beq.w	801242e <f_printf+0x41e>
		d = c;
 801212c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012130:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8012134:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012138:	2b60      	cmp	r3, #96	@ 0x60
 801213a:	d908      	bls.n	801214e <f_printf+0x13e>
 801213c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012140:	2b7a      	cmp	r3, #122	@ 0x7a
 8012142:	d804      	bhi.n	801214e <f_printf+0x13e>
 8012144:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012148:	3b20      	subs	r3, #32
 801214a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 801214e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012152:	3b42      	subs	r3, #66	@ 0x42
 8012154:	2b16      	cmp	r3, #22
 8012156:	f200 8098 	bhi.w	801228a <f_printf+0x27a>
 801215a:	a201      	add	r2, pc, #4	@ (adr r2, 8012160 <f_printf+0x150>)
 801215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012160:	0801226b 	.word	0x0801226b
 8012164:	08012253 	.word	0x08012253
 8012168:	0801227b 	.word	0x0801227b
 801216c:	0801228b 	.word	0x0801228b
 8012170:	0801228b 	.word	0x0801228b
 8012174:	0801228b 	.word	0x0801228b
 8012178:	0801228b 	.word	0x0801228b
 801217c:	0801228b 	.word	0x0801228b
 8012180:	0801228b 	.word	0x0801228b
 8012184:	0801228b 	.word	0x0801228b
 8012188:	0801228b 	.word	0x0801228b
 801218c:	0801228b 	.word	0x0801228b
 8012190:	0801228b 	.word	0x0801228b
 8012194:	08012273 	.word	0x08012273
 8012198:	0801228b 	.word	0x0801228b
 801219c:	0801228b 	.word	0x0801228b
 80121a0:	0801228b 	.word	0x0801228b
 80121a4:	080121bd 	.word	0x080121bd
 80121a8:	0801228b 	.word	0x0801228b
 80121ac:	0801227b 	.word	0x0801227b
 80121b0:	0801228b 	.word	0x0801228b
 80121b4:	0801228b 	.word	0x0801228b
 80121b8:	08012283 	.word	0x08012283
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80121bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80121be:	1d1a      	adds	r2, r3, #4
 80121c0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 80121c6:	2300      	movs	r3, #0
 80121c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80121cc:	e004      	b.n	80121d8 <f_printf+0x1c8>
 80121ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80121d2:	3301      	adds	r3, #1
 80121d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80121d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80121da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80121de:	4413      	add	r3, r2
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d1f3      	bne.n	80121ce <f_printf+0x1be>
			if (!(f & 2)) {
 80121e6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80121ea:	f003 0302 	and.w	r3, r3, #2
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d11a      	bne.n	8012228 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80121f2:	e005      	b.n	8012200 <f_printf+0x1f0>
 80121f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80121f8:	2120      	movs	r1, #32
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7ff fe90 	bl	8011f20 <putc_bfd>
 8012200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012204:	1c5a      	adds	r2, r3, #1
 8012206:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801220a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801220e:	429a      	cmp	r2, r3
 8012210:	d8f0      	bhi.n	80121f4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8012212:	e009      	b.n	8012228 <f_printf+0x218>
 8012214:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012216:	1c5a      	adds	r2, r3, #1
 8012218:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801221a:	781a      	ldrb	r2, [r3, #0]
 801221c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012220:	4611      	mov	r1, r2
 8012222:	4618      	mov	r0, r3
 8012224:	f7ff fe7c 	bl	8011f20 <putc_bfd>
 8012228:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d1f1      	bne.n	8012214 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8012230:	e005      	b.n	801223e <f_printf+0x22e>
 8012232:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012236:	2120      	movs	r1, #32
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff fe71 	bl	8011f20 <putc_bfd>
 801223e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012242:	1c5a      	adds	r2, r3, #1
 8012244:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012248:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801224c:	429a      	cmp	r2, r3
 801224e:	d8f0      	bhi.n	8012232 <f_printf+0x222>
			continue;
 8012250:	e0ea      	b.n	8012428 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8012252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012254:	1d1a      	adds	r2, r3, #4
 8012256:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	b2da      	uxtb	r2, r3
 801225c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012260:	4611      	mov	r1, r2
 8012262:	4618      	mov	r0, r3
 8012264:	f7ff fe5c 	bl	8011f20 <putc_bfd>
 8012268:	e0de      	b.n	8012428 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801226a:	2302      	movs	r3, #2
 801226c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012270:	e014      	b.n	801229c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8012272:	2308      	movs	r3, #8
 8012274:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012278:	e010      	b.n	801229c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801227a:	230a      	movs	r3, #10
 801227c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012280:	e00c      	b.n	801229c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8012282:	2310      	movs	r3, #16
 8012284:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012288:	e008      	b.n	801229c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801228a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 801228e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012292:	4611      	mov	r1, r2
 8012294:	4618      	mov	r0, r3
 8012296:	f7ff fe43 	bl	8011f20 <putc_bfd>
 801229a:	e0c5      	b.n	8012428 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801229c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80122a0:	f003 0304 	and.w	r3, r3, #4
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d004      	beq.n	80122b2 <f_printf+0x2a2>
 80122a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80122aa:	1d1a      	adds	r2, r3, #4
 80122ac:	67ba      	str	r2, [r7, #120]	@ 0x78
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	e00c      	b.n	80122cc <f_printf+0x2bc>
 80122b2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80122b6:	2b44      	cmp	r3, #68	@ 0x44
 80122b8:	d104      	bne.n	80122c4 <f_printf+0x2b4>
 80122ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80122bc:	1d1a      	adds	r2, r3, #4
 80122be:	67ba      	str	r2, [r7, #120]	@ 0x78
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	e003      	b.n	80122cc <f_printf+0x2bc>
 80122c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80122c6:	1d1a      	adds	r2, r3, #4
 80122c8:	67ba      	str	r2, [r7, #120]	@ 0x78
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80122d0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80122d4:	2b44      	cmp	r3, #68	@ 0x44
 80122d6:	d10e      	bne.n	80122f6 <f_printf+0x2e6>
 80122d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80122dc:	2b00      	cmp	r3, #0
 80122de:	da0a      	bge.n	80122f6 <f_printf+0x2e6>
			v = 0 - v;
 80122e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80122e4:	425b      	negs	r3, r3
 80122e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 80122ea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80122ee:	f043 0308 	orr.w	r3, r3, #8
 80122f2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 80122f6:	2300      	movs	r3, #0
 80122f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80122fc:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8012300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012304:	fbb3 f1f2 	udiv	r1, r3, r2
 8012308:	fb01 f202 	mul.w	r2, r1, r2
 801230c:	1a9b      	subs	r3, r3, r2
 801230e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8012312:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8012316:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801231a:	fbb2 f3f3 	udiv	r3, r2, r3
 801231e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8012322:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012326:	2b09      	cmp	r3, #9
 8012328:	d90b      	bls.n	8012342 <f_printf+0x332>
 801232a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801232e:	2b78      	cmp	r3, #120	@ 0x78
 8012330:	d101      	bne.n	8012336 <f_printf+0x326>
 8012332:	2227      	movs	r2, #39	@ 0x27
 8012334:	e000      	b.n	8012338 <f_printf+0x328>
 8012336:	2207      	movs	r2, #7
 8012338:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801233c:	4413      	add	r3, r2
 801233e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8012342:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012346:	1c5a      	adds	r2, r3, #1
 8012348:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801234c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012350:	3230      	adds	r2, #48	@ 0x30
 8012352:	b2d2      	uxtb	r2, r2
 8012354:	3398      	adds	r3, #152	@ 0x98
 8012356:	443b      	add	r3, r7
 8012358:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 801235c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012360:	2b00      	cmp	r3, #0
 8012362:	d003      	beq.n	801236c <f_printf+0x35c>
 8012364:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012368:	2b1f      	cmp	r3, #31
 801236a:	d9c7      	bls.n	80122fc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 801236c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012370:	f003 0308 	and.w	r3, r3, #8
 8012374:	2b00      	cmp	r3, #0
 8012376:	d009      	beq.n	801238c <f_printf+0x37c>
 8012378:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801237c:	1c5a      	adds	r2, r3, #1
 801237e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012382:	3398      	adds	r3, #152	@ 0x98
 8012384:	443b      	add	r3, r7
 8012386:	222d      	movs	r2, #45	@ 0x2d
 8012388:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 801238c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012390:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012394:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012398:	f003 0301 	and.w	r3, r3, #1
 801239c:	2b00      	cmp	r3, #0
 801239e:	d001      	beq.n	80123a4 <f_printf+0x394>
 80123a0:	2330      	movs	r3, #48	@ 0x30
 80123a2:	e000      	b.n	80123a6 <f_printf+0x396>
 80123a4:	2320      	movs	r3, #32
 80123a6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80123aa:	e007      	b.n	80123bc <f_printf+0x3ac>
 80123ac:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80123b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80123b4:	4611      	mov	r1, r2
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7ff fdb2 	bl	8011f20 <putc_bfd>
 80123bc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80123c0:	f003 0302 	and.w	r3, r3, #2
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d108      	bne.n	80123da <f_printf+0x3ca>
 80123c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80123cc:	1c5a      	adds	r2, r3, #1
 80123ce:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80123d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d8e8      	bhi.n	80123ac <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80123da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80123de:	3b01      	subs	r3, #1
 80123e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80123e4:	f107 020c 	add.w	r2, r7, #12
 80123e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80123ec:	4413      	add	r3, r2
 80123ee:	781a      	ldrb	r2, [r3, #0]
 80123f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80123f4:	4611      	mov	r1, r2
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff fd92 	bl	8011f20 <putc_bfd>
		} while (i);
 80123fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012400:	2b00      	cmp	r3, #0
 8012402:	d1ea      	bne.n	80123da <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8012404:	e007      	b.n	8012416 <f_printf+0x406>
 8012406:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 801240a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801240e:	4611      	mov	r1, r2
 8012410:	4618      	mov	r0, r3
 8012412:	f7ff fd85 	bl	8011f20 <putc_bfd>
 8012416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801241a:	1c5a      	adds	r2, r3, #1
 801241c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012420:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012424:	429a      	cmp	r2, r3
 8012426:	d8ee      	bhi.n	8012406 <f_printf+0x3f6>
		c = *fmt++;
 8012428:	e600      	b.n	801202c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801242a:	bf00      	nop
 801242c:	e000      	b.n	8012430 <f_printf+0x420>
		if (!c) break;
 801242e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8012430:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012434:	4618      	mov	r0, r3
 8012436:	f7ff fdb0 	bl	8011f9a <putc_flush>
 801243a:	4603      	mov	r3, r0
}
 801243c:	4618      	mov	r0, r3
 801243e:	379c      	adds	r7, #156	@ 0x9c
 8012440:	46bd      	mov	sp, r7
 8012442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012446:	b003      	add	sp, #12
 8012448:	4770      	bx	lr
 801244a:	bf00      	nop

0801244c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801244c:	b480      	push	{r7}
 801244e:	b087      	sub	sp, #28
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	4613      	mov	r3, r2
 8012458:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801245a:	2301      	movs	r3, #1
 801245c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801245e:	2300      	movs	r3, #0
 8012460:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012462:	4b1f      	ldr	r3, [pc, #124]	@ (80124e0 <FATFS_LinkDriverEx+0x94>)
 8012464:	7a5b      	ldrb	r3, [r3, #9]
 8012466:	b2db      	uxtb	r3, r3
 8012468:	2b00      	cmp	r3, #0
 801246a:	d131      	bne.n	80124d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801246c:	4b1c      	ldr	r3, [pc, #112]	@ (80124e0 <FATFS_LinkDriverEx+0x94>)
 801246e:	7a5b      	ldrb	r3, [r3, #9]
 8012470:	b2db      	uxtb	r3, r3
 8012472:	461a      	mov	r2, r3
 8012474:	4b1a      	ldr	r3, [pc, #104]	@ (80124e0 <FATFS_LinkDriverEx+0x94>)
 8012476:	2100      	movs	r1, #0
 8012478:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801247a:	4b19      	ldr	r3, [pc, #100]	@ (80124e0 <FATFS_LinkDriverEx+0x94>)
 801247c:	7a5b      	ldrb	r3, [r3, #9]
 801247e:	b2db      	uxtb	r3, r3
 8012480:	4a17      	ldr	r2, [pc, #92]	@ (80124e0 <FATFS_LinkDriverEx+0x94>)
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	4413      	add	r3, r2
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801248a:	4b15      	ldr	r3, [pc, #84]	@ (80124e0 <FATFS_LinkDriverEx+0x94>)
 801248c:	7a5b      	ldrb	r3, [r3, #9]
 801248e:	b2db      	uxtb	r3, r3
 8012490:	461a      	mov	r2, r3
 8012492:	4b13      	ldr	r3, [pc, #76]	@ (80124e0 <FATFS_LinkDriverEx+0x94>)
 8012494:	4413      	add	r3, r2
 8012496:	79fa      	ldrb	r2, [r7, #7]
 8012498:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801249a:	4b11      	ldr	r3, [pc, #68]	@ (80124e0 <FATFS_LinkDriverEx+0x94>)
 801249c:	7a5b      	ldrb	r3, [r3, #9]
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	1c5a      	adds	r2, r3, #1
 80124a2:	b2d1      	uxtb	r1, r2
 80124a4:	4a0e      	ldr	r2, [pc, #56]	@ (80124e0 <FATFS_LinkDriverEx+0x94>)
 80124a6:	7251      	strb	r1, [r2, #9]
 80124a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80124aa:	7dbb      	ldrb	r3, [r7, #22]
 80124ac:	3330      	adds	r3, #48	@ 0x30
 80124ae:	b2da      	uxtb	r2, r3
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	3301      	adds	r3, #1
 80124b8:	223a      	movs	r2, #58	@ 0x3a
 80124ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	3302      	adds	r3, #2
 80124c0:	222f      	movs	r2, #47	@ 0x2f
 80124c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	3303      	adds	r3, #3
 80124c8:	2200      	movs	r2, #0
 80124ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80124cc:	2300      	movs	r3, #0
 80124ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80124d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	371c      	adds	r7, #28
 80124d6:	46bd      	mov	sp, r7
 80124d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124dc:	4770      	bx	lr
 80124de:	bf00      	nop
 80124e0:	24002a64 	.word	0x24002a64

080124e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80124ee:	2200      	movs	r2, #0
 80124f0:	6839      	ldr	r1, [r7, #0]
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	f7ff ffaa 	bl	801244c <FATFS_LinkDriverEx>
 80124f8:	4603      	mov	r3, r0
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3708      	adds	r7, #8
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}
	...

08012504 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012504:	b480      	push	{r7}
 8012506:	b085      	sub	sp, #20
 8012508:	af00      	add	r7, sp, #0
 801250a:	4603      	mov	r3, r0
 801250c:	6039      	str	r1, [r7, #0]
 801250e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012510:	88fb      	ldrh	r3, [r7, #6]
 8012512:	2b7f      	cmp	r3, #127	@ 0x7f
 8012514:	d802      	bhi.n	801251c <ff_convert+0x18>
		c = chr;
 8012516:	88fb      	ldrh	r3, [r7, #6]
 8012518:	81fb      	strh	r3, [r7, #14]
 801251a:	e025      	b.n	8012568 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00b      	beq.n	801253a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012522:	88fb      	ldrh	r3, [r7, #6]
 8012524:	2bff      	cmp	r3, #255	@ 0xff
 8012526:	d805      	bhi.n	8012534 <ff_convert+0x30>
 8012528:	88fb      	ldrh	r3, [r7, #6]
 801252a:	3b80      	subs	r3, #128	@ 0x80
 801252c:	4a12      	ldr	r2, [pc, #72]	@ (8012578 <ff_convert+0x74>)
 801252e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012532:	e000      	b.n	8012536 <ff_convert+0x32>
 8012534:	2300      	movs	r3, #0
 8012536:	81fb      	strh	r3, [r7, #14]
 8012538:	e016      	b.n	8012568 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801253a:	2300      	movs	r3, #0
 801253c:	81fb      	strh	r3, [r7, #14]
 801253e:	e009      	b.n	8012554 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012540:	89fb      	ldrh	r3, [r7, #14]
 8012542:	4a0d      	ldr	r2, [pc, #52]	@ (8012578 <ff_convert+0x74>)
 8012544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012548:	88fa      	ldrh	r2, [r7, #6]
 801254a:	429a      	cmp	r2, r3
 801254c:	d006      	beq.n	801255c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801254e:	89fb      	ldrh	r3, [r7, #14]
 8012550:	3301      	adds	r3, #1
 8012552:	81fb      	strh	r3, [r7, #14]
 8012554:	89fb      	ldrh	r3, [r7, #14]
 8012556:	2b7f      	cmp	r3, #127	@ 0x7f
 8012558:	d9f2      	bls.n	8012540 <ff_convert+0x3c>
 801255a:	e000      	b.n	801255e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801255c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801255e:	89fb      	ldrh	r3, [r7, #14]
 8012560:	3380      	adds	r3, #128	@ 0x80
 8012562:	b29b      	uxth	r3, r3
 8012564:	b2db      	uxtb	r3, r3
 8012566:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012568:	89fb      	ldrh	r3, [r7, #14]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3714      	adds	r7, #20
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr
 8012576:	bf00      	nop
 8012578:	08012b30 	.word	0x08012b30

0801257c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801257c:	b480      	push	{r7}
 801257e:	b087      	sub	sp, #28
 8012580:	af00      	add	r7, sp, #0
 8012582:	4603      	mov	r3, r0
 8012584:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012586:	88fb      	ldrh	r3, [r7, #6]
 8012588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801258c:	d201      	bcs.n	8012592 <ff_wtoupper+0x16>
 801258e:	4b3e      	ldr	r3, [pc, #248]	@ (8012688 <ff_wtoupper+0x10c>)
 8012590:	e000      	b.n	8012594 <ff_wtoupper+0x18>
 8012592:	4b3e      	ldr	r3, [pc, #248]	@ (801268c <ff_wtoupper+0x110>)
 8012594:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	1c9a      	adds	r2, r3, #2
 801259a:	617a      	str	r2, [r7, #20]
 801259c:	881b      	ldrh	r3, [r3, #0]
 801259e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80125a0:	8a7b      	ldrh	r3, [r7, #18]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d068      	beq.n	8012678 <ff_wtoupper+0xfc>
 80125a6:	88fa      	ldrh	r2, [r7, #6]
 80125a8:	8a7b      	ldrh	r3, [r7, #18]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d364      	bcc.n	8012678 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	1c9a      	adds	r2, r3, #2
 80125b2:	617a      	str	r2, [r7, #20]
 80125b4:	881b      	ldrh	r3, [r3, #0]
 80125b6:	823b      	strh	r3, [r7, #16]
 80125b8:	8a3b      	ldrh	r3, [r7, #16]
 80125ba:	0a1b      	lsrs	r3, r3, #8
 80125bc:	81fb      	strh	r3, [r7, #14]
 80125be:	8a3b      	ldrh	r3, [r7, #16]
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80125c4:	88fa      	ldrh	r2, [r7, #6]
 80125c6:	8a79      	ldrh	r1, [r7, #18]
 80125c8:	8a3b      	ldrh	r3, [r7, #16]
 80125ca:	440b      	add	r3, r1
 80125cc:	429a      	cmp	r2, r3
 80125ce:	da49      	bge.n	8012664 <ff_wtoupper+0xe8>
			switch (cmd) {
 80125d0:	89fb      	ldrh	r3, [r7, #14]
 80125d2:	2b08      	cmp	r3, #8
 80125d4:	d84f      	bhi.n	8012676 <ff_wtoupper+0xfa>
 80125d6:	a201      	add	r2, pc, #4	@ (adr r2, 80125dc <ff_wtoupper+0x60>)
 80125d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125dc:	08012601 	.word	0x08012601
 80125e0:	08012613 	.word	0x08012613
 80125e4:	08012629 	.word	0x08012629
 80125e8:	08012631 	.word	0x08012631
 80125ec:	08012639 	.word	0x08012639
 80125f0:	08012641 	.word	0x08012641
 80125f4:	08012649 	.word	0x08012649
 80125f8:	08012651 	.word	0x08012651
 80125fc:	08012659 	.word	0x08012659
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012600:	88fa      	ldrh	r2, [r7, #6]
 8012602:	8a7b      	ldrh	r3, [r7, #18]
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	005b      	lsls	r3, r3, #1
 8012608:	697a      	ldr	r2, [r7, #20]
 801260a:	4413      	add	r3, r2
 801260c:	881b      	ldrh	r3, [r3, #0]
 801260e:	80fb      	strh	r3, [r7, #6]
 8012610:	e027      	b.n	8012662 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012612:	88fa      	ldrh	r2, [r7, #6]
 8012614:	8a7b      	ldrh	r3, [r7, #18]
 8012616:	1ad3      	subs	r3, r2, r3
 8012618:	b29b      	uxth	r3, r3
 801261a:	f003 0301 	and.w	r3, r3, #1
 801261e:	b29b      	uxth	r3, r3
 8012620:	88fa      	ldrh	r2, [r7, #6]
 8012622:	1ad3      	subs	r3, r2, r3
 8012624:	80fb      	strh	r3, [r7, #6]
 8012626:	e01c      	b.n	8012662 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012628:	88fb      	ldrh	r3, [r7, #6]
 801262a:	3b10      	subs	r3, #16
 801262c:	80fb      	strh	r3, [r7, #6]
 801262e:	e018      	b.n	8012662 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012630:	88fb      	ldrh	r3, [r7, #6]
 8012632:	3b20      	subs	r3, #32
 8012634:	80fb      	strh	r3, [r7, #6]
 8012636:	e014      	b.n	8012662 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012638:	88fb      	ldrh	r3, [r7, #6]
 801263a:	3b30      	subs	r3, #48	@ 0x30
 801263c:	80fb      	strh	r3, [r7, #6]
 801263e:	e010      	b.n	8012662 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012640:	88fb      	ldrh	r3, [r7, #6]
 8012642:	3b1a      	subs	r3, #26
 8012644:	80fb      	strh	r3, [r7, #6]
 8012646:	e00c      	b.n	8012662 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012648:	88fb      	ldrh	r3, [r7, #6]
 801264a:	3308      	adds	r3, #8
 801264c:	80fb      	strh	r3, [r7, #6]
 801264e:	e008      	b.n	8012662 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012650:	88fb      	ldrh	r3, [r7, #6]
 8012652:	3b50      	subs	r3, #80	@ 0x50
 8012654:	80fb      	strh	r3, [r7, #6]
 8012656:	e004      	b.n	8012662 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012658:	88fb      	ldrh	r3, [r7, #6]
 801265a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801265e:	80fb      	strh	r3, [r7, #6]
 8012660:	bf00      	nop
			}
			break;
 8012662:	e008      	b.n	8012676 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012664:	89fb      	ldrh	r3, [r7, #14]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d195      	bne.n	8012596 <ff_wtoupper+0x1a>
 801266a:	8a3b      	ldrh	r3, [r7, #16]
 801266c:	005b      	lsls	r3, r3, #1
 801266e:	697a      	ldr	r2, [r7, #20]
 8012670:	4413      	add	r3, r2
 8012672:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012674:	e78f      	b.n	8012596 <ff_wtoupper+0x1a>
			break;
 8012676:	bf00      	nop
	}

	return chr;
 8012678:	88fb      	ldrh	r3, [r7, #6]
}
 801267a:	4618      	mov	r0, r3
 801267c:	371c      	adds	r7, #28
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr
 8012686:	bf00      	nop
 8012688:	08012c30 	.word	0x08012c30
 801268c:	08012e24 	.word	0x08012e24

08012690 <memset>:
 8012690:	4402      	add	r2, r0
 8012692:	4603      	mov	r3, r0
 8012694:	4293      	cmp	r3, r2
 8012696:	d100      	bne.n	801269a <memset+0xa>
 8012698:	4770      	bx	lr
 801269a:	f803 1b01 	strb.w	r1, [r3], #1
 801269e:	e7f9      	b.n	8012694 <memset+0x4>

080126a0 <__errno>:
 80126a0:	4b01      	ldr	r3, [pc, #4]	@ (80126a8 <__errno+0x8>)
 80126a2:	6818      	ldr	r0, [r3, #0]
 80126a4:	4770      	bx	lr
 80126a6:	bf00      	nop
 80126a8:	2400006c 	.word	0x2400006c

080126ac <__libc_init_array>:
 80126ac:	b570      	push	{r4, r5, r6, lr}
 80126ae:	4d0d      	ldr	r5, [pc, #52]	@ (80126e4 <__libc_init_array+0x38>)
 80126b0:	4c0d      	ldr	r4, [pc, #52]	@ (80126e8 <__libc_init_array+0x3c>)
 80126b2:	1b64      	subs	r4, r4, r5
 80126b4:	10a4      	asrs	r4, r4, #2
 80126b6:	2600      	movs	r6, #0
 80126b8:	42a6      	cmp	r6, r4
 80126ba:	d109      	bne.n	80126d0 <__libc_init_array+0x24>
 80126bc:	4d0b      	ldr	r5, [pc, #44]	@ (80126ec <__libc_init_array+0x40>)
 80126be:	4c0c      	ldr	r4, [pc, #48]	@ (80126f0 <__libc_init_array+0x44>)
 80126c0:	f000 f952 	bl	8012968 <_init>
 80126c4:	1b64      	subs	r4, r4, r5
 80126c6:	10a4      	asrs	r4, r4, #2
 80126c8:	2600      	movs	r6, #0
 80126ca:	42a6      	cmp	r6, r4
 80126cc:	d105      	bne.n	80126da <__libc_init_array+0x2e>
 80126ce:	bd70      	pop	{r4, r5, r6, pc}
 80126d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80126d4:	4798      	blx	r3
 80126d6:	3601      	adds	r6, #1
 80126d8:	e7ee      	b.n	80126b8 <__libc_init_array+0xc>
 80126da:	f855 3b04 	ldr.w	r3, [r5], #4
 80126de:	4798      	blx	r3
 80126e0:	3601      	adds	r6, #1
 80126e2:	e7f2      	b.n	80126ca <__libc_init_array+0x1e>
 80126e4:	08013778 	.word	0x08013778
 80126e8:	08013778 	.word	0x08013778
 80126ec:	08013778 	.word	0x08013778
 80126f0:	0801377c 	.word	0x0801377c

080126f4 <memcpy>:
 80126f4:	440a      	add	r2, r1
 80126f6:	4291      	cmp	r1, r2
 80126f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80126fc:	d100      	bne.n	8012700 <memcpy+0xc>
 80126fe:	4770      	bx	lr
 8012700:	b510      	push	{r4, lr}
 8012702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012706:	f803 4f01 	strb.w	r4, [r3, #1]!
 801270a:	4291      	cmp	r1, r2
 801270c:	d1f9      	bne.n	8012702 <memcpy+0xe>
 801270e:	bd10      	pop	{r4, pc}

08012710 <log>:
 8012710:	b4f0      	push	{r4, r5, r6, r7}
 8012712:	ee10 0a90 	vmov	r0, s1
 8012716:	ee10 3a10 	vmov	r3, s0
 801271a:	f04f 34ff 	mov.w	r4, #4294967295
 801271e:	429c      	cmp	r4, r3
 8012720:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8012724:	4c70      	ldr	r4, [pc, #448]	@ (80128e8 <log+0x1d8>)
 8012726:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801272a:	418c      	sbcs	r4, r1
 801272c:	ed2d 8b02 	vpush	{d8}
 8012730:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012734:	d35a      	bcc.n	80127ec <log+0xdc>
 8012736:	4a6d      	ldr	r2, [pc, #436]	@ (80128ec <log+0x1dc>)
 8012738:	4290      	cmp	r0, r2
 801273a:	bf08      	it	eq
 801273c:	2b00      	cmpeq	r3, #0
 801273e:	f000 80c4 	beq.w	80128ca <log+0x1ba>
 8012742:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012746:	ee30 0b47 	vsub.f64	d0, d0, d7
 801274a:	4b69      	ldr	r3, [pc, #420]	@ (80128f0 <log+0x1e0>)
 801274c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8012750:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8012754:	ee20 4b02 	vmul.f64	d4, d0, d2
 8012758:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 801275c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8012760:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8012764:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8012768:	eea6 7b02 	vfma.f64	d7, d6, d2
 801276c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8012770:	eea5 6b00 	vfma.f64	d6, d5, d0
 8012774:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8012778:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 801277c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8012780:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8012784:	eea3 5b00 	vfma.f64	d5, d3, d0
 8012788:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 801278c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8012790:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8012794:	eea3 5b04 	vfma.f64	d5, d3, d4
 8012798:	eea5 6b04 	vfma.f64	d6, d5, d4
 801279c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80127a0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80127a4:	eeb0 2b47 	vmov.f64	d2, d7
 80127a8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 80128d0 <log+0x1c0>
 80127ac:	eeb0 6b40 	vmov.f64	d6, d0
 80127b0:	eeb0 3b40 	vmov.f64	d3, d0
 80127b4:	eea0 6b07 	vfma.f64	d6, d0, d7
 80127b8:	eea0 6b47 	vfms.f64	d6, d0, d7
 80127bc:	ee30 8b46 	vsub.f64	d8, d0, d6
 80127c0:	ee26 1b06 	vmul.f64	d1, d6, d6
 80127c4:	eea1 3b05 	vfma.f64	d3, d1, d5
 80127c8:	ee30 7b43 	vsub.f64	d7, d0, d3
 80127cc:	ee30 0b06 	vadd.f64	d0, d0, d6
 80127d0:	eea1 7b05 	vfma.f64	d7, d1, d5
 80127d4:	ee25 5b08 	vmul.f64	d5, d5, d8
 80127d8:	eea5 7b00 	vfma.f64	d7, d5, d0
 80127dc:	eea2 7b04 	vfma.f64	d7, d2, d4
 80127e0:	ee33 0b07 	vadd.f64	d0, d3, d7
 80127e4:	ecbd 8b02 	vpop	{d8}
 80127e8:	bcf0      	pop	{r4, r5, r6, r7}
 80127ea:	4770      	bx	lr
 80127ec:	f1a2 0410 	sub.w	r4, r2, #16
 80127f0:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 80127f4:	428c      	cmp	r4, r1
 80127f6:	d923      	bls.n	8012840 <log+0x130>
 80127f8:	18d9      	adds	r1, r3, r3
 80127fa:	eb40 0400 	adc.w	r4, r0, r0
 80127fe:	4321      	orrs	r1, r4
 8012800:	d105      	bne.n	801280e <log+0xfe>
 8012802:	ecbd 8b02 	vpop	{d8}
 8012806:	2001      	movs	r0, #1
 8012808:	bcf0      	pop	{r4, r5, r6, r7}
 801280a:	f000 b885 	b.w	8012918 <__math_divzero>
 801280e:	4939      	ldr	r1, [pc, #228]	@ (80128f4 <log+0x1e4>)
 8012810:	4288      	cmp	r0, r1
 8012812:	bf08      	it	eq
 8012814:	2b00      	cmpeq	r3, #0
 8012816:	d0e5      	beq.n	80127e4 <log+0xd4>
 8012818:	0413      	lsls	r3, r2, #16
 801281a:	d403      	bmi.n	8012824 <log+0x114>
 801281c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8012820:	4393      	bics	r3, r2
 8012822:	d104      	bne.n	801282e <log+0x11e>
 8012824:	ecbd 8b02 	vpop	{d8}
 8012828:	bcf0      	pop	{r4, r5, r6, r7}
 801282a:	f000 b88d 	b.w	8012948 <__math_invalid>
 801282e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80128d8 <log+0x1c8>
 8012832:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012836:	ec53 2b17 	vmov	r2, r3, d7
 801283a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 801283e:	4613      	mov	r3, r2
 8012840:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8012844:	492a      	ldr	r1, [pc, #168]	@ (80128f0 <log+0x1e0>)
 8012846:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801284a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 801284e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8012852:	0d15      	lsrs	r5, r2, #20
 8012854:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8012858:	052d      	lsls	r5, r5, #20
 801285a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 801285e:	1e1e      	subs	r6, r3, #0
 8012860:	1b47      	subs	r7, r0, r5
 8012862:	ec47 6b16 	vmov	d6, r6, r7
 8012866:	1512      	asrs	r2, r2, #20
 8012868:	eea7 5b06 	vfma.f64	d5, d7, d6
 801286c:	ee07 2a90 	vmov	s15, r2
 8012870:	ee25 2b05 	vmul.f64	d2, d5, d5
 8012874:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012878:	ed91 4b00 	vldr	d4, [r1]
 801287c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8012880:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8012884:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012888:	ee35 4b07 	vadd.f64	d4, d5, d7
 801288c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8012890:	ed91 7b02 	vldr	d7, [r1, #8]
 8012894:	ee30 0b05 	vadd.f64	d0, d0, d5
 8012898:	eea7 0b06 	vfma.f64	d0, d7, d6
 801289c:	ed91 7b04 	vldr	d7, [r1, #16]
 80128a0:	ed91 6b08 	vldr	d6, [r1, #32]
 80128a4:	eea7 0b02 	vfma.f64	d0, d7, d2
 80128a8:	ed91 7b06 	vldr	d7, [r1, #24]
 80128ac:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 80128b0:	eea6 7b05 	vfma.f64	d7, d6, d5
 80128b4:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 80128b8:	eea3 6b05 	vfma.f64	d6, d3, d5
 80128bc:	eea6 7b02 	vfma.f64	d7, d6, d2
 80128c0:	eea1 0b07 	vfma.f64	d0, d1, d7
 80128c4:	ee30 0b04 	vadd.f64	d0, d0, d4
 80128c8:	e78c      	b.n	80127e4 <log+0xd4>
 80128ca:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 80128e0 <log+0x1d0>
 80128ce:	e789      	b.n	80127e4 <log+0xd4>
 80128d0:	00000000 	.word	0x00000000
 80128d4:	41a00000 	.word	0x41a00000
 80128d8:	00000000 	.word	0x00000000
 80128dc:	43300000 	.word	0x43300000
	...
 80128e8:	000308ff 	.word	0x000308ff
 80128ec:	3ff00000 	.word	0x3ff00000
 80128f0:	08012ee0 	.word	0x08012ee0
 80128f4:	7ff00000 	.word	0x7ff00000

080128f8 <with_errno>:
 80128f8:	b510      	push	{r4, lr}
 80128fa:	ed2d 8b02 	vpush	{d8}
 80128fe:	eeb0 8b40 	vmov.f64	d8, d0
 8012902:	4604      	mov	r4, r0
 8012904:	f7ff fecc 	bl	80126a0 <__errno>
 8012908:	eeb0 0b48 	vmov.f64	d0, d8
 801290c:	ecbd 8b02 	vpop	{d8}
 8012910:	6004      	str	r4, [r0, #0]
 8012912:	bd10      	pop	{r4, pc}
 8012914:	0000      	movs	r0, r0
	...

08012918 <__math_divzero>:
 8012918:	b082      	sub	sp, #8
 801291a:	2800      	cmp	r0, #0
 801291c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012920:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012924:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012928:	ed8d 7b00 	vstr	d7, [sp]
 801292c:	ed9d 0b00 	vldr	d0, [sp]
 8012930:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8012940 <__math_divzero+0x28>
 8012934:	2022      	movs	r0, #34	@ 0x22
 8012936:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801293a:	b002      	add	sp, #8
 801293c:	f7ff bfdc 	b.w	80128f8 <with_errno>
	...

08012948 <__math_invalid>:
 8012948:	eeb0 7b40 	vmov.f64	d7, d0
 801294c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012954:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012958:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801295c:	d602      	bvs.n	8012964 <__math_invalid+0x1c>
 801295e:	2021      	movs	r0, #33	@ 0x21
 8012960:	f7ff bfca 	b.w	80128f8 <with_errno>
 8012964:	4770      	bx	lr
	...

08012968 <_init>:
 8012968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801296a:	bf00      	nop
 801296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801296e:	bc08      	pop	{r3}
 8012970:	469e      	mov	lr, r3
 8012972:	4770      	bx	lr

08012974 <_fini>:
 8012974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012976:	bf00      	nop
 8012978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801297a:	bc08      	pop	{r3}
 801297c:	469e      	mov	lr, r3
 801297e:	4770      	bx	lr
