
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007780  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007a2c  08007a2c  00008a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007ab0  08007ab0  00008ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ab8  08007ab8  00008ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007abc  08007abc  00008abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007ac0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000598  24000010  08007ad0  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240005a8  08007ad0  000095a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e562  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003707  00000000  00000000  000275a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018c0  00000000  00000000  0002aca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000136d  00000000  00000000  0002c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033b17  00000000  00000000  0002d8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021c31  00000000  00000000  000613ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00150fc2  00000000  00000000  0008301d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d3fdf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b30  00000000  00000000  001d4024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  001dab54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007a14 	.word	0x08007a14

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08007a14 	.word	0x08007a14

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005e0:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 80005e2:	4a2f      	ldr	r2, [pc, #188]	@ (80006a0 <MX_FDCAN1_Init+0xc4>)
 80005e4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80005e6:	4b2d      	ldr	r3, [pc, #180]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005ec:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80005f2:	4b2a      	ldr	r3, [pc, #168]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80005f8:	4b28      	ldr	r3, [pc, #160]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80005fe:	4b27      	ldr	r3, [pc, #156]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000600:	2200      	movs	r2, #0
 8000602:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000604:	4b25      	ldr	r3, [pc, #148]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000606:	2210      	movs	r2, #16
 8000608:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800060a:	4b24      	ldr	r3, [pc, #144]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 800060c:	2201      	movs	r2, #1
 800060e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000612:	2202      	movs	r2, #2
 8000614:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000616:	4b21      	ldr	r3, [pc, #132]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000618:	2202      	movs	r2, #2
 800061a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 800061e:	2201      	movs	r2, #1
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000624:	2201      	movs	r2, #1
 8000626:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 800062a:	2201      	movs	r2, #1
 800062c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800062e:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000630:	2201      	movs	r2, #1
 8000632:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000640:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000642:	2200      	movs	r2, #0
 8000644:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000648:	2200      	movs	r2, #0
 800064a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800064c:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 800064e:	2204      	movs	r2, #4
 8000650:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000654:	2200      	movs	r2, #0
 8000656:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 800065a:	2204      	movs	r2, #4
 800065c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000660:	2200      	movs	r2, #0
 8000662:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000664:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000666:	2204      	movs	r2, #4
 8000668:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000678:	2200      	movs	r2, #0
 800067a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 8000684:	2204      	movs	r2, #4
 8000686:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_FDCAN1_Init+0xc0>)
 800068a:	f001 fc49 	bl	8001f20 <HAL_FDCAN_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000694:	f000 faac 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2400002c 	.word	0x2400002c
 80006a0:	4000a000 	.word	0x4000a000

080006a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0ba      	sub	sp, #232	@ 0xe8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	22c0      	movs	r2, #192	@ 0xc0
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 f96b 	bl	80079a0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a2f      	ldr	r2, [pc, #188]	@ (800078c <HAL_FDCAN_MspInit+0xe8>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d157      	bne.n	8000784 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006d8:	f04f 0300 	mov.w	r3, #0
 80006dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80006f4:	23c0      	movs	r3, #192	@ 0xc0
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000700:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fa7b 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8000718:	f000 fa6a 	bl	8000bf0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800071c:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <HAL_FDCAN_MspInit+0xec>)
 800071e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000722:	4a1b      	ldr	r2, [pc, #108]	@ (8000790 <HAL_FDCAN_MspInit+0xec>)
 8000724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000728:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800072c:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <HAL_FDCAN_MspInit+0xec>)
 800072e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <HAL_FDCAN_MspInit+0xec>)
 800073c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000740:	4a13      	ldr	r2, [pc, #76]	@ (8000790 <HAL_FDCAN_MspInit+0xec>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <HAL_FDCAN_MspInit+0xec>)
 800074c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000758:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800075c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000772:	2309      	movs	r3, #9
 8000774:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <HAL_FDCAN_MspInit+0xf0>)
 8000780:	f001 ff32 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000784:	bf00      	nop
 8000786:	37e8      	adds	r7, #232	@ 0xe8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	4000a000 	.word	0x4000a000
 8000790:	58024400 	.word	0x58024400
 8000794:	58020000 	.word	0x58020000

08000798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b34      	ldr	r3, [pc, #208]	@ (8000880 <MX_GPIO_Init+0xe8>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b4:	4a32      	ldr	r2, [pc, #200]	@ (8000880 <MX_GPIO_Init+0xe8>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007be:	4b30      	ldr	r3, [pc, #192]	@ (8000880 <MX_GPIO_Init+0xe8>)
 80007c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <MX_GPIO_Init+0xe8>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000880 <MX_GPIO_Init+0xe8>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007dc:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <MX_GPIO_Init+0xe8>)
 80007de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <MX_GPIO_Init+0xe8>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f0:	4a23      	ldr	r2, [pc, #140]	@ (8000880 <MX_GPIO_Init+0xe8>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_GPIO_Init+0xe8>)
 80007fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000808:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_GPIO_Init+0xe8>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080e:	4a1c      	ldr	r2, [pc, #112]	@ (8000880 <MX_GPIO_Init+0xe8>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_GPIO_Init+0xe8>)
 800081a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8000826:	2200      	movs	r2, #0
 8000828:	f242 010f 	movw	r1, #8207	@ 0x200f
 800082c:	4815      	ldr	r0, [pc, #84]	@ (8000884 <MX_GPIO_Init+0xec>)
 800082e:	f002 f88b 	bl	8002948 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2104      	movs	r1, #4
 8000836:	4814      	ldr	r0, [pc, #80]	@ (8000888 <MX_GPIO_Init+0xf0>)
 8000838:	f002 f886 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800083c:	f242 030f 	movw	r3, #8207	@ 0x200f
 8000840:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	480b      	ldr	r0, [pc, #44]	@ (8000884 <MX_GPIO_Init+0xec>)
 8000856:	f001 fec7 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800085a:	2304      	movs	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_GPIO_Init+0xf0>)
 8000872:	f001 feb9 	bl	80025e8 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	@ 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	58024400 	.word	0x58024400
 8000884:	58020800 	.word	0x58020800
 8000888:	58020c00 	.word	0x58020c00

0800088c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <MX_I2C3_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <MX_I2C3_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_I2C3_Init+0x74>)
 8000898:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <MX_I2C3_Init+0x7c>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <MX_I2C3_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a2:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008c8:	f002 f872 	bl	80029b0 <HAL_I2C_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80008d2:	f000 f98d 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4809      	ldr	r0, [pc, #36]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008da:	f002 f905 	bl	8002ae8 <HAL_I2CEx_ConfigAnalogFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 f984 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008ec:	f002 f947 	bl	8002b7e <HAL_I2CEx_ConfigDigitalFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f97b 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	240000cc 	.word	0x240000cc
 8000904:	40005c00 	.word	0x40005c00
 8000908:	20b0ccff 	.word	0x20b0ccff

0800090c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0bc      	sub	sp, #240	@ 0xf0
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	22c0      	movs	r2, #192	@ 0xc0
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f007 f837 	bl	80079a0 <memset>
  if(i2cHandle->Instance==I2C3)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a39      	ldr	r2, [pc, #228]	@ (8000a1c <HAL_I2C_MspInit+0x110>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d16b      	bne.n	8000a14 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800093c:	f04f 0208 	mov.w	r2, #8
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800094e:	f107 0318 	add.w	r3, r7, #24
 8000952:	4618      	mov	r0, r3
 8000954:	f003 f958 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800095e:	f000 f947 	bl	8000bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <HAL_I2C_MspInit+0x114>)
 8000964:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000968:	4a2d      	ldr	r2, [pc, #180]	@ (8000a20 <HAL_I2C_MspInit+0x114>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000972:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <HAL_I2C_MspInit+0x114>)
 8000974:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <HAL_I2C_MspInit+0x114>)
 8000982:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000986:	4a26      	ldr	r2, [pc, #152]	@ (8000a20 <HAL_I2C_MspInit+0x114>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000990:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <HAL_I2C_MspInit+0x114>)
 8000992:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800099e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a6:	2312      	movs	r3, #18
 80009a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009b8:	2304      	movs	r3, #4
 80009ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009c2:	4619      	mov	r1, r3
 80009c4:	4817      	ldr	r0, [pc, #92]	@ (8000a24 <HAL_I2C_MspInit+0x118>)
 80009c6:	f001 fe0f 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d2:	2312      	movs	r3, #18
 80009d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009e4:	2304      	movs	r3, #4
 80009e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009ee:	4619      	mov	r1, r3
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <HAL_I2C_MspInit+0x11c>)
 80009f2:	f001 fdf9 	bl	80025e8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_I2C_MspInit+0x114>)
 80009f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80009fc:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_I2C_MspInit+0x114>)
 80009fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a02:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_I2C_MspInit+0x114>)
 8000a08:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000a14:	bf00      	nop
 8000a16:	37f0      	adds	r7, #240	@ 0xf0
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40005c00 	.word	0x40005c00
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020800 	.word	0x58020800
 8000a28:	58020000 	.word	0x58020000

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a30:	f000 f8b2 	bl	8000b98 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a34:	f001 f862 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a38:	f000 f838 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3c:	f7ff feac 	bl	8000798 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000a40:	f7ff fdcc 	bl	80005dc <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8000a44:	f7ff ff22 	bl	800088c <MX_I2C3_Init>
  MX_SPI1_Init();
 8000a48:	f000 f8d8 	bl	8000bfc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a4c:	f000 f92c 	bl	8000ca8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000a50:	f000 f980 	bl	8000d54 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000a54:	f000 fba0 	bl	8001198 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a58:	f000 fc1a 	bl	8001290 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a5c:	f000 fc7e 	bl	800135c <MX_TIM4_Init>
  MX_UART4_Init();
 8000a60:	f000 fe36 	bl	80016d0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000a64:	f000 fe80 	bl	8001768 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a68:	f000 feca 	bl	8001800 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8000a6c:	f000 fcf2 	bl	8001454 <MX_TIM13_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000a70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <main+0x7c>)
 8000a76:	f001 ff80 	bl	800297a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	480a      	ldr	r0, [pc, #40]	@ (8000aa8 <main+0x7c>)
 8000a7e:	f001 ff7c 	bl	800297a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000a82:	2102      	movs	r1, #2
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <main+0x7c>)
 8000a86:	f001 ff78 	bl	800297a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_4_Pin);
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	4806      	ldr	r0, [pc, #24]	@ (8000aa8 <main+0x7c>)
 8000a8e:	f001 ff74 	bl	800297a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_5_Pin);
 8000a92:	2108      	movs	r1, #8
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <main+0x7c>)
 8000a96:	f001 ff70 	bl	800297a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000a9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a9e:	f001 f8bf 	bl	8001c20 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000aa2:	bf00      	nop
 8000aa4:	e7e4      	b.n	8000a70 <main+0x44>
 8000aa6:	bf00      	nop
 8000aa8:	58020800 	.word	0x58020800

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09c      	sub	sp, #112	@ 0x70
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	224c      	movs	r2, #76	@ 0x4c
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 ff70 	bl	80079a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f006 ff6a 	bl	80079a0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000acc:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <SystemClock_Config+0xe4>)
 8000ace:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f002 f89e 	bl	8002c18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b94 <SystemClock_Config+0xe8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b94 <SystemClock_Config+0xe8>)
 8000ae6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <SystemClock_Config+0xe8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af8:	bf00      	nop
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <SystemClock_Config+0xe8>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b06:	d1f8      	bne.n	8000afa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b10:	2340      	movs	r3, #64	@ 0x40
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000b20:	2323      	movs	r3, #35	@ 0x23
 8000b22:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b30:	230c      	movs	r3, #12
 8000b32:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 f8a3 	bl	8002c8c <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b4c:	f000 f850 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	233f      	movs	r3, #63	@ 0x3f
 8000b52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2303      	movs	r3, #3
 8000b56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b60:	2340      	movs	r3, #64	@ 0x40
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b64:	2340      	movs	r3, #64	@ 0x40
 8000b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b6e:	2340      	movs	r3, #64	@ 0x40
 8000b70:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2106      	movs	r1, #6
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fcba 	bl	80034f0 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000b82:	f000 f835 	bl	8000bf0 <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3770      	adds	r7, #112	@ 0x70
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58024800 	.word	0x58024800

08000b98 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000baa:	f001 f941 	bl	8001e30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bba:	231f      	movs	r3, #31
 8000bbc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bbe:	2387      	movs	r3, #135	@ 0x87
 8000bc0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 f95f 	bl	8001ea0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000be2:	2004      	movs	r0, #4
 8000be4:	f001 f93c 	bl	8001e60 <HAL_MPU_Enable>

}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <Error_Handler+0x8>

08000bfc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c00:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c02:	4a28      	ldr	r2, [pc, #160]	@ (8000ca4 <MX_SPI1_Init+0xa8>)
 8000c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c06:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c08:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c16:	2203      	movs	r2, #3
 8000c18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c52:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c8c:	f004 fd9c 	bl	80057c8 <HAL_SPI_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c96:	f7ff ffab 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	24000120 	.word	0x24000120
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cae:	4a28      	ldr	r2, [pc, #160]	@ (8000d50 <MX_SPI2_Init+0xa8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cb4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cd4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cfa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cfe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d38:	f004 fd46 	bl	80057c8 <HAL_SPI_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000d42:	f7ff ff55 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	240001a8 	.word	0x240001a8
 8000d50:	40003800 	.word	0x40003800

08000d54 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d58:	4b27      	ldr	r3, [pc, #156]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d5a:	4a28      	ldr	r2, [pc, #160]	@ (8000dfc <MX_SPI3_Init+0xa8>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d5e:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d66:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d6e:	2203      	movs	r2, #3
 8000d70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d80:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d98:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000da6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000daa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000de4:	f004 fcf0 	bl	80057c8 <HAL_SPI_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000dee:	f7ff feff 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	24000230 	.word	0x24000230
 8000dfc:	40003c00 	.word	0x40003c00

08000e00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0be      	sub	sp, #248	@ 0xf8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	22c0      	movs	r2, #192	@ 0xc0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f006 fdbd 	bl	80079a0 <memset>
  if(spiHandle->Instance==SPI1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a73      	ldr	r2, [pc, #460]	@ (8000ff8 <HAL_SPI_MspInit+0x1f8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d146      	bne.n	8000ebe <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fede 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000e52:	f7ff fecd 	bl	8000bf0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e56:	4b69      	ldr	r3, [pc, #420]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000e58:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000e5c:	4a67      	ldr	r2, [pc, #412]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000e5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e62:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000e66:	4b65      	ldr	r3, [pc, #404]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000e68:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b61      	ldr	r3, [pc, #388]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000e76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e7a:	4a60      	ldr	r2, [pc, #384]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e84:	4b5d      	ldr	r3, [pc, #372]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000e86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_NSS_Pin|SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8000e92:	23f0      	movs	r3, #240	@ 0xf0
 8000e94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eaa:	2305      	movs	r3, #5
 8000eac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4852      	ldr	r0, [pc, #328]	@ (8001000 <HAL_SPI_MspInit+0x200>)
 8000eb8:	f001 fb96 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ebc:	e098      	b.n	8000ff0 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI2)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a50      	ldr	r2, [pc, #320]	@ (8001004 <HAL_SPI_MspInit+0x204>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d147      	bne.n	8000f58 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000ec8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 fe92 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8000eea:	f7ff fe81 	bl	8000bf0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eee:	4b43      	ldr	r3, [pc, #268]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000ef0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ef4:	4a41      	ldr	r2, [pc, #260]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000efe:	4b3f      	ldr	r3, [pc, #252]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000f00:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000f0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f12:	4a3a      	ldr	r2, [pc, #232]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f1c:	4b37      	ldr	r3, [pc, #220]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000f1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP280_NSS_Pin|BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8000f2a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f44:	2305      	movs	r3, #5
 8000f46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	482d      	ldr	r0, [pc, #180]	@ (8001008 <HAL_SPI_MspInit+0x208>)
 8000f52:	f001 fb49 	bl	80025e8 <HAL_GPIO_Init>
}
 8000f56:	e04b      	b.n	8000ff0 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI3)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800100c <HAL_SPI_MspInit+0x20c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d146      	bne.n	8000ff0 <HAL_SPI_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000f62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f74:	f107 0320 	add.w	r3, r7, #32
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fe45 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 8000f84:	f7ff fe34 	bl	8000bf0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000f8a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f94:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000f9a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000fa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fac:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_SPI_MspInit+0x1fc>)
 8000fb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8000fc4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fde:	2306      	movs	r3, #6
 8000fe0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4809      	ldr	r0, [pc, #36]	@ (8001010 <HAL_SPI_MspInit+0x210>)
 8000fec:	f001 fafc 	bl	80025e8 <HAL_GPIO_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	37f8      	adds	r7, #248	@ 0xf8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40013000 	.word	0x40013000
 8000ffc:	58024400 	.word	0x58024400
 8001000:	58020000 	.word	0x58020000
 8001004:	40003800 	.word	0x40003800
 8001008:	58020400 	.word	0x58020400
 800100c:	40003c00 	.word	0x40003c00
 8001010:	58020800 	.word	0x58020800

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_MspInit+0x30>)
 800101c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001020:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <HAL_MspInit+0x30>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_MspInit+0x30>)
 800102c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	58024400 	.word	0x58024400

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <NMI_Handler+0x4>

08001050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <MemManage_Handler+0x4>

08001060 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <UsageFault_Handler+0x4>

08001070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 fd9f 	bl	8001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ac:	4b32      	ldr	r3, [pc, #200]	@ (8001178 <SystemInit+0xd0>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b2:	4a31      	ldr	r2, [pc, #196]	@ (8001178 <SystemInit+0xd0>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010bc:	4b2f      	ldr	r3, [pc, #188]	@ (800117c <SystemInit+0xd4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d807      	bhi.n	80010d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010c8:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <SystemInit+0xd4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 030f 	bic.w	r3, r3, #15
 80010d0:	4a2a      	ldr	r2, [pc, #168]	@ (800117c <SystemInit+0xd4>)
 80010d2:	f043 0303 	orr.w	r3, r3, #3
 80010d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010d8:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <SystemInit+0xd8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a28      	ldr	r2, [pc, #160]	@ (8001180 <SystemInit+0xd8>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010e4:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <SystemInit+0xd8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010ea:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <SystemInit+0xd8>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4924      	ldr	r1, [pc, #144]	@ (8001180 <SystemInit+0xd8>)
 80010f0:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <SystemInit+0xdc>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010f6:	4b21      	ldr	r3, [pc, #132]	@ (800117c <SystemInit+0xd4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001102:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <SystemInit+0xd4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 030f 	bic.w	r3, r3, #15
 800110a:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <SystemInit+0xd4>)
 800110c:	f043 0303 	orr.w	r3, r3, #3
 8001110:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <SystemInit+0xd8>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <SystemInit+0xd8>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <SystemInit+0xd8>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <SystemInit+0xd8>)
 8001126:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <SystemInit+0xe0>)
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <SystemInit+0xd8>)
 800112c:	4a17      	ldr	r2, [pc, #92]	@ (800118c <SystemInit+0xe4>)
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <SystemInit+0xd8>)
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <SystemInit+0xe8>)
 8001134:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <SystemInit+0xd8>)
 8001138:	2200      	movs	r2, #0
 800113a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <SystemInit+0xd8>)
 800113e:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <SystemInit+0xe8>)
 8001140:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <SystemInit+0xd8>)
 8001144:	2200      	movs	r2, #0
 8001146:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <SystemInit+0xd8>)
 800114a:	4a11      	ldr	r2, [pc, #68]	@ (8001190 <SystemInit+0xe8>)
 800114c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <SystemInit+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <SystemInit+0xd8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <SystemInit+0xd8>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <SystemInit+0xd8>)
 8001162:	2200      	movs	r2, #0
 8001164:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <SystemInit+0xec>)
 8001168:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800116c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00
 800117c:	52002000 	.word	0x52002000
 8001180:	58024400 	.word	0x58024400
 8001184:	eaf6ed7f 	.word	0xeaf6ed7f
 8001188:	02020200 	.word	0x02020200
 800118c:	01ff0000 	.word	0x01ff0000
 8001190:	01010280 	.word	0x01010280
 8001194:	52004000 	.word	0x52004000

08001198 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011aa:	463b      	mov	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <MX_TIM2_Init+0xf4>)
 80011be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 80011c4:	4b31      	ldr	r3, [pc, #196]	@ (800128c <MX_TIM2_Init+0xf4>)
 80011c6:	f240 1217 	movw	r2, #279	@ 0x117
 80011ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b2f      	ldr	r3, [pc, #188]	@ (800128c <MX_TIM2_Init+0xf4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80011d2:	4b2e      	ldr	r3, [pc, #184]	@ (800128c <MX_TIM2_Init+0xf4>)
 80011d4:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80011d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <MX_TIM2_Init+0xf4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011e0:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <MX_TIM2_Init+0xf4>)
 80011e2:	2280      	movs	r2, #128	@ 0x80
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e6:	4829      	ldr	r0, [pc, #164]	@ (800128c <MX_TIM2_Init+0xf4>)
 80011e8:	f004 fc84 	bl	8005af4 <HAL_TIM_PWM_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80011f2:	f7ff fcfd 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4821      	ldr	r0, [pc, #132]	@ (800128c <MX_TIM2_Init+0xf4>)
 8001206:	f005 f95d 	bl	80064c4 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001210:	f7ff fcee 	bl	8000bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001214:	2360      	movs	r3, #96	@ 0x60
 8001216:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	4818      	ldr	r0, [pc, #96]	@ (800128c <MX_TIM2_Init+0xf4>)
 800122c:	f004 fcba 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001236:	f7ff fcdb 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	2204      	movs	r2, #4
 800123e:	4619      	mov	r1, r3
 8001240:	4812      	ldr	r0, [pc, #72]	@ (800128c <MX_TIM2_Init+0xf4>)
 8001242:	f004 fcaf 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800124c:	f7ff fcd0 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2208      	movs	r2, #8
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	@ (800128c <MX_TIM2_Init+0xf4>)
 8001258:	f004 fca4 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8001262:	f7ff fcc5 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	220c      	movs	r2, #12
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <MX_TIM2_Init+0xf4>)
 800126e:	f004 fc99 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8001278:	f7ff fcba 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <MX_TIM2_Init+0xf4>)
 800127e:	f000 f97d 	bl	800157c <HAL_TIM_MspPostInit>

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	240002b8 	.word	0x240002b8

08001290 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	463b      	mov	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <MX_TIM3_Init+0xc4>)
 80012b6:	4a28      	ldr	r2, [pc, #160]	@ (8001358 <MX_TIM3_Init+0xc8>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 80012ba:	4b26      	ldr	r3, [pc, #152]	@ (8001354 <MX_TIM3_Init+0xc4>)
 80012bc:	f240 1217 	movw	r2, #279	@ 0x117
 80012c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <MX_TIM3_Init+0xc4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80012c8:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <MX_TIM3_Init+0xc4>)
 80012ca:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80012ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <MX_TIM3_Init+0xc4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <MX_TIM3_Init+0xc4>)
 80012d8:	2280      	movs	r2, #128	@ 0x80
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012dc:	481d      	ldr	r0, [pc, #116]	@ (8001354 <MX_TIM3_Init+0xc4>)
 80012de:	f004 fc09 	bl	8005af4 <HAL_TIM_PWM_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80012e8:	f7ff fc82 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4816      	ldr	r0, [pc, #88]	@ (8001354 <MX_TIM3_Init+0xc4>)
 80012fc:	f005 f8e2 	bl	80064c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001306:	f7ff fc73 	bl	8000bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130a:	2360      	movs	r3, #96	@ 0x60
 800130c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	@ (8001354 <MX_TIM3_Init+0xc4>)
 8001322:	f004 fc3f 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800132c:	f7ff fc60 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	2204      	movs	r2, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4807      	ldr	r0, [pc, #28]	@ (8001354 <MX_TIM3_Init+0xc4>)
 8001338:	f004 fc34 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001342:	f7ff fc55 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001346:	4803      	ldr	r0, [pc, #12]	@ (8001354 <MX_TIM3_Init+0xc4>)
 8001348:	f000 f918 	bl	800157c <HAL_TIM_MspPostInit>

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	24000304 	.word	0x24000304
 8001358:	40000400 	.word	0x40000400

0800135c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001380:	4b32      	ldr	r3, [pc, #200]	@ (800144c <MX_TIM4_Init+0xf0>)
 8001382:	4a33      	ldr	r2, [pc, #204]	@ (8001450 <MX_TIM4_Init+0xf4>)
 8001384:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8001386:	4b31      	ldr	r3, [pc, #196]	@ (800144c <MX_TIM4_Init+0xf0>)
 8001388:	f240 1217 	movw	r2, #279	@ 0x117
 800138c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b2f      	ldr	r3, [pc, #188]	@ (800144c <MX_TIM4_Init+0xf0>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8001394:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <MX_TIM4_Init+0xf0>)
 8001396:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800139a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b2b      	ldr	r3, [pc, #172]	@ (800144c <MX_TIM4_Init+0xf0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <MX_TIM4_Init+0xf0>)
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013a8:	4828      	ldr	r0, [pc, #160]	@ (800144c <MX_TIM4_Init+0xf0>)
 80013aa:	f004 fba3 	bl	8005af4 <HAL_TIM_PWM_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80013b4:	f7ff fc1c 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4821      	ldr	r0, [pc, #132]	@ (800144c <MX_TIM4_Init+0xf0>)
 80013c8:	f005 f87c 	bl	80064c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80013d2:	f7ff fc0d 	bl	8000bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	@ 0x60
 80013d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	4817      	ldr	r0, [pc, #92]	@ (800144c <MX_TIM4_Init+0xf0>)
 80013ee:	f004 fbd9 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80013f8:	f7ff fbfa 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	2204      	movs	r2, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4812      	ldr	r0, [pc, #72]	@ (800144c <MX_TIM4_Init+0xf0>)
 8001404:	f004 fbce 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800140e:	f7ff fbef 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	2208      	movs	r2, #8
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <MX_TIM4_Init+0xf0>)
 800141a:	f004 fbc3 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8001424:	f7ff fbe4 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	220c      	movs	r2, #12
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	@ (800144c <MX_TIM4_Init+0xf0>)
 8001430:	f004 fbb8 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800143a:	f7ff fbd9 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800143e:	4803      	ldr	r0, [pc, #12]	@ (800144c <MX_TIM4_Init+0xf0>)
 8001440:	f000 f89c 	bl	800157c <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	@ 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000350 	.word	0x24000350
 8001450:	40000800 	.word	0x40000800

08001454 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001458:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_TIM13_Init+0x40>)
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <MX_TIM13_Init+0x44>)
 800145c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <MX_TIM13_Init+0x40>)
 8001460:	f240 1217 	movw	r2, #279	@ 0x117
 8001464:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_TIM13_Init+0x40>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_TIM13_Init+0x40>)
 800146e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001472:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <MX_TIM13_Init+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_TIM13_Init+0x40>)
 800147c:	2280      	movs	r2, #128	@ 0x80
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <MX_TIM13_Init+0x40>)
 8001482:	f004 fae0 	bl	8005a46 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800148c:	f7ff fbb0 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2400039c 	.word	0x2400039c
 8001498:	40001c00 	.word	0x40001c00

0800149c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ac:	d10f      	bne.n	80014ce <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ae:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <HAL_TIM_PWM_MspInit+0x90>)
 80014b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014b4:	4a1d      	ldr	r2, [pc, #116]	@ (800152c <HAL_TIM_PWM_MspInit+0x90>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <HAL_TIM_PWM_MspInit+0x90>)
 80014c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014cc:	e028      	b.n	8001520 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_TIM_PWM_MspInit+0x94>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d10f      	bne.n	80014f8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <HAL_TIM_PWM_MspInit+0x90>)
 80014da:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014de:	4a13      	ldr	r2, [pc, #76]	@ (800152c <HAL_TIM_PWM_MspInit+0x90>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80014e8:	4b10      	ldr	r3, [pc, #64]	@ (800152c <HAL_TIM_PWM_MspInit+0x90>)
 80014ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
}
 80014f6:	e013      	b.n	8001520 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <HAL_TIM_PWM_MspInit+0x98>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10e      	bne.n	8001520 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_TIM_PWM_MspInit+0x90>)
 8001504:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001508:	4a08      	ldr	r2, [pc, #32]	@ (800152c <HAL_TIM_PWM_MspInit+0x90>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_TIM_PWM_MspInit+0x90>)
 8001514:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	bf00      	nop
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	58024400 	.word	0x58024400
 8001530:	40000400 	.word	0x40000400
 8001534:	40000800 	.word	0x40000800

08001538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <HAL_TIM_Base_MspInit+0x3c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10e      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001550:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <HAL_TIM_Base_MspInit+0x40>)
 8001552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001556:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <HAL_TIM_Base_MspInit+0x40>)
 800155c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40001c00 	.word	0x40001c00
 8001578:	58024400 	.word	0x58024400

0800157c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	@ 0x30
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800159c:	d13f      	bne.n	800161e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b47      	ldr	r3, [pc, #284]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 80015a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015a4:	4a45      	ldr	r2, [pc, #276]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015ae:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 80015b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b3f      	ldr	r3, [pc, #252]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 80015be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015c2:	4a3e      	ldr	r2, [pc, #248]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015cc:	4b3b      	ldr	r3, [pc, #236]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 80015ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80015da:	f248 030c 	movw	r3, #32780	@ 0x800c
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4832      	ldr	r0, [pc, #200]	@ (80016c0 <HAL_TIM_MspPostInit+0x144>)
 80015f8:	f000 fff6 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015fc:	2308      	movs	r3, #8
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800160c:	2301      	movs	r3, #1
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	482b      	ldr	r0, [pc, #172]	@ (80016c4 <HAL_TIM_MspPostInit+0x148>)
 8001618:	f000 ffe6 	bl	80025e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800161c:	e049      	b.n	80016b2 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <HAL_TIM_MspPostInit+0x14c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d11f      	bne.n	8001668 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 800162a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800162e:	4a23      	ldr	r2, [pc, #140]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001638:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 800163a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001646:	2330      	movs	r3, #48	@ 0x30
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001656:	2302      	movs	r3, #2
 8001658:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4818      	ldr	r0, [pc, #96]	@ (80016c4 <HAL_TIM_MspPostInit+0x148>)
 8001662:	f000 ffc1 	bl	80025e8 <HAL_GPIO_Init>
}
 8001666:	e024      	b.n	80016b2 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <HAL_TIM_MspPostInit+0x150>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d11f      	bne.n	80016b2 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 8001674:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001678:	4a10      	ldr	r2, [pc, #64]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_TIM_MspPostInit+0x140>)
 8001684:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001690:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <HAL_TIM_MspPostInit+0x148>)
 80016ae:	f000 ff9b 	bl	80025e8 <HAL_GPIO_Init>
}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	@ 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	58024400 	.word	0x58024400
 80016c0:	58020000 	.word	0x58020000
 80016c4:	58020400 	.word	0x58020400
 80016c8:	40000400 	.word	0x40000400
 80016cc:	40000800 	.word	0x40000800

080016d0 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016d4:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <MX_UART4_Init+0x90>)
 80016d6:	4a23      	ldr	r2, [pc, #140]	@ (8001764 <MX_UART4_Init+0x94>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016da:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <MX_UART4_Init+0x90>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <MX_UART4_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <MX_UART4_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_UART4_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_UART4_Init+0x90>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_UART4_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <MX_UART4_Init+0x90>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_UART4_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <MX_UART4_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_UART4_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001718:	4811      	ldr	r0, [pc, #68]	@ (8001760 <MX_UART4_Init+0x90>)
 800171a:	f004 ff61 	bl	80065e0 <HAL_UART_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001724:	f7ff fa64 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001728:	2100      	movs	r1, #0
 800172a:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_UART4_Init+0x90>)
 800172c:	f006 f86d 	bl	800780a <HAL_UARTEx_SetTxFifoThreshold>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001736:	f7ff fa5b 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173a:	2100      	movs	r1, #0
 800173c:	4808      	ldr	r0, [pc, #32]	@ (8001760 <MX_UART4_Init+0x90>)
 800173e:	f006 f8a2 	bl	8007886 <HAL_UARTEx_SetRxFifoThreshold>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001748:	f7ff fa52 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <MX_UART4_Init+0x90>)
 800174e:	f006 f823 	bl	8007798 <HAL_UARTEx_DisableFifoMode>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001758:	f7ff fa4a 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	240003e8 	.word	0x240003e8
 8001764:	40004c00 	.word	0x40004c00

08001768 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800176c:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 800176e:	4a23      	ldr	r2, [pc, #140]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 8001770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001772:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b1d      	ldr	r3, [pc, #116]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001786:	4b1c      	ldr	r3, [pc, #112]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a4:	4b14      	ldr	r3, [pc, #80]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017b0:	4811      	ldr	r0, [pc, #68]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 80017b2:	f004 ff15 	bl	80065e0 <HAL_UART_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017bc:	f7ff fa18 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c0:	2100      	movs	r1, #0
 80017c2:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 80017c4:	f006 f821 	bl	800780a <HAL_UARTEx_SetTxFifoThreshold>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017ce:	f7ff fa0f 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d2:	2100      	movs	r1, #0
 80017d4:	4808      	ldr	r0, [pc, #32]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 80017d6:	f006 f856 	bl	8007886 <HAL_UARTEx_SetRxFifoThreshold>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017e0:	f7ff fa06 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	@ (80017f8 <MX_USART1_UART_Init+0x90>)
 80017e6:	f005 ffd7 	bl	8007798 <HAL_UARTEx_DisableFifoMode>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017f0:	f7ff f9fe 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2400047c 	.word	0x2400047c
 80017fc:	40011000 	.word	0x40011000

08001800 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001804:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 8001806:	4a23      	ldr	r2, [pc, #140]	@ (8001894 <MX_USART6_UART_Init+0x94>)
 8001808:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800180a:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 800180c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001810:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001812:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001818:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001836:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001842:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001848:	4811      	ldr	r0, [pc, #68]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 800184a:	f004 fec9 	bl	80065e0 <HAL_UART_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001854:	f7ff f9cc 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001858:	2100      	movs	r1, #0
 800185a:	480d      	ldr	r0, [pc, #52]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 800185c:	f005 ffd5 	bl	800780a <HAL_UARTEx_SetTxFifoThreshold>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001866:	f7ff f9c3 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186a:	2100      	movs	r1, #0
 800186c:	4808      	ldr	r0, [pc, #32]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 800186e:	f006 f80a 	bl	8007886 <HAL_UARTEx_SetRxFifoThreshold>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001878:	f7ff f9ba 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	@ (8001890 <MX_USART6_UART_Init+0x90>)
 800187e:	f005 ff8b 	bl	8007798 <HAL_UARTEx_DisableFifoMode>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001888:	f7ff f9b2 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	24000510 	.word	0x24000510
 8001894:	40011400 	.word	0x40011400

08001898 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0be      	sub	sp, #248	@ 0xf8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	22c0      	movs	r2, #192	@ 0xc0
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f006 f871 	bl	80079a0 <memset>
  if(uartHandle->Instance==UART4)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a73      	ldr	r2, [pc, #460]	@ (8001a90 <HAL_UART_MspInit+0x1f8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d146      	bne.n	8001956 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018c8:	f04f 0202 	mov.w	r2, #2
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 f992 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018ea:	f7ff f981 	bl	8000bf0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018ee:	4b69      	ldr	r3, [pc, #420]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 80018f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018f4:	4a67      	ldr	r2, [pc, #412]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 80018f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018fa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80018fe:	4b65      	ldr	r3, [pc, #404]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001900:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b61      	ldr	r3, [pc, #388]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 800190e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001912:	4a60      	ldr	r2, [pc, #384]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800191c:	4b5d      	ldr	r3, [pc, #372]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 800191e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800192a:	2303      	movs	r3, #3
 800192c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001942:	2308      	movs	r3, #8
 8001944:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800194c:	4619      	mov	r1, r3
 800194e:	4852      	ldr	r0, [pc, #328]	@ (8001a98 <HAL_UART_MspInit+0x200>)
 8001950:	f000 fe4a 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001954:	e097      	b.n	8001a86 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a50      	ldr	r2, [pc, #320]	@ (8001a9c <HAL_UART_MspInit+0x204>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d147      	bne.n	80019f0 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001960:	f04f 0201 	mov.w	r2, #1
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	4618      	mov	r0, r3
 8001978:	f002 f946 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001982:	f7ff f935 	bl	8000bf0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001986:	4b43      	ldr	r3, [pc, #268]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001988:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800198c:	4a41      	ldr	r2, [pc, #260]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001996:	4b3f      	ldr	r3, [pc, #252]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001998:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 80019a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019aa:	4a3a      	ldr	r2, [pc, #232]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019b4:	4b37      	ldr	r3, [pc, #220]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 80019b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 80019c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019dc:	2307      	movs	r3, #7
 80019de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019e6:	4619      	mov	r1, r3
 80019e8:	482b      	ldr	r0, [pc, #172]	@ (8001a98 <HAL_UART_MspInit+0x200>)
 80019ea:	f000 fdfd 	bl	80025e8 <HAL_GPIO_Init>
}
 80019ee:	e04a      	b.n	8001a86 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART6)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa0 <HAL_UART_MspInit+0x208>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d145      	bne.n	8001a86 <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80019fa:	f04f 0201 	mov.w	r2, #1
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 f8f9 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001a1c:	f7ff f8e8 	bl	8000bf0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001a22:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001a26:	4a1b      	ldr	r2, [pc, #108]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001a30:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001a32:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a44:	4a13      	ldr	r2, [pc, #76]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a4e:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <HAL_UART_MspInit+0x1fc>)
 8001a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5c:	23c0      	movs	r3, #192	@ 0xc0
 8001a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001a74:	2307      	movs	r3, #7
 8001a76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4808      	ldr	r0, [pc, #32]	@ (8001aa4 <HAL_UART_MspInit+0x20c>)
 8001a82:	f000 fdb1 	bl	80025e8 <HAL_GPIO_Init>
}
 8001a86:	bf00      	nop
 8001a88:	37f8      	adds	r7, #248	@ 0xf8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40004c00 	.word	0x40004c00
 8001a94:	58024400 	.word	0x58024400
 8001a98:	58020000 	.word	0x58020000
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40011400 	.word	0x40011400
 8001aa4:	58020800 	.word	0x58020800

08001aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aac:	f7ff fafc 	bl	80010a8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab0:	480c      	ldr	r0, [pc, #48]	@ (8001ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ab2:	490d      	ldr	r1, [pc, #52]	@ (8001ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8001af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f005 ff6b 	bl	80079b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ada:	f7fe ffa7 	bl	8000a2c <main>
  bx  lr
 8001ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ae0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001ae4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ae8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001aec:	08007ac0 	.word	0x08007ac0
  ldr r2, =_sbss
 8001af0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001af4:	240005a8 	.word	0x240005a8

08001af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b02:	2003      	movs	r0, #3
 8001b04:	f000 f962 	bl	8001dcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b08:	f001 fea8 	bl	800385c <HAL_RCC_GetSysClockFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_Init+0x68>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	4913      	ldr	r1, [pc, #76]	@ (8001b68 <HAL_Init+0x6c>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <HAL_Init+0x68>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b68 <HAL_Init+0x6c>)
 8001b30:	5cd3      	ldrb	r3, [r2, r3]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b6c <HAL_Init+0x70>)
 8001b3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b40:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <HAL_Init+0x74>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f814 	bl	8001b74 <HAL_InitTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e002      	b.n	8001b5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b56:	f7ff fa5d 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	58024400 	.word	0x58024400
 8001b68:	08007a78 	.word	0x08007a78
 8001b6c:	24000004 	.word	0x24000004
 8001b70:	24000000 	.word	0x24000000

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_InitTick+0x60>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e021      	b.n	8001bcc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <HAL_InitTick+0x64>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_InitTick+0x60>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f939 	bl	8001e16 <HAL_SYSTICK_Config>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00e      	b.n	8001bcc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d80a      	bhi.n	8001bca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f000 f911 	bl	8001de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc0:	4a06      	ldr	r2, [pc, #24]	@ (8001bdc <HAL_InitTick+0x68>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2400000c 	.word	0x2400000c
 8001bd8:	24000000 	.word	0x24000000
 8001bdc:	24000008 	.word	0x24000008

08001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_IncTick+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_IncTick+0x24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <HAL_IncTick+0x24>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2400000c 	.word	0x2400000c
 8001c04:	240005a4 	.word	0x240005a4

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	240005a4 	.word	0x240005a4

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff ffee 	bl	8001c08 <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d005      	beq.n	8001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_Delay+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c46:	bf00      	nop
 8001c48:	f7ff ffde 	bl	8001c08 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f7      	bhi.n	8001c48 <HAL_Delay+0x28>
  {
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2400000c 	.word	0x2400000c

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	05fa0000 	.word	0x05fa0000

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	@ (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	@ 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d98:	d301      	bcc.n	8001d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00f      	b.n	8001dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <SysTick_Config+0x40>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da6:	210f      	movs	r1, #15
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f7ff ff8e 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <SysTick_Config+0x40>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db6:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <SysTick_Config+0x40>)
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff47 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff5e 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff90 	bl	8001d20 <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5f 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffb2 	bl	8001d88 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e34:	f3bf 8f5f 	dmb	sy
}
 8001e38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e3a:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <HAL_MPU_Disable+0x28>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	4a06      	ldr	r2, [pc, #24]	@ (8001e58 <HAL_MPU_Disable+0x28>)
 8001e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e44:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e46:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_MPU_Disable+0x2c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	605a      	str	r2, [r3, #4]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	e000ed90 	.word	0xe000ed90

08001e60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e68:	4a0b      	ldr	r2, [pc, #44]	@ (8001e98 <HAL_MPU_Enable+0x38>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_MPU_Enable+0x3c>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e76:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <HAL_MPU_Enable+0x3c>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e7e:	f3bf 8f4f 	dsb	sy
}
 8001e82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e84:	f3bf 8f6f 	isb	sy
}
 8001e88:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed90 	.word	0xe000ed90
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	785a      	ldrb	r2, [r3, #1]
 8001eac:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_MPU_ConfigRegion+0x7c>)
 8001eae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <HAL_MPU_ConfigRegion+0x7c>)
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	@ (8001f1c <HAL_MPU_ConfigRegion+0x7c>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ebc:	4a17      	ldr	r2, [pc, #92]	@ (8001f1c <HAL_MPU_ConfigRegion+0x7c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7b1b      	ldrb	r3, [r3, #12]
 8001ec8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7adb      	ldrb	r3, [r3, #11]
 8001ece:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ed0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7a9b      	ldrb	r3, [r3, #10]
 8001ed6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7b5b      	ldrb	r3, [r3, #13]
 8001ede:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ee0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7b9b      	ldrb	r3, [r3, #14]
 8001ee6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ee8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7bdb      	ldrb	r3, [r3, #15]
 8001eee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ef0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7a5b      	ldrb	r3, [r3, #9]
 8001ef6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ef8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7a1b      	ldrb	r3, [r3, #8]
 8001efe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f00:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f08:	4a04      	ldr	r2, [pc, #16]	@ (8001f1c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f0a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f0c:	6113      	str	r3, [r2, #16]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed90 	.word	0xe000ed90

08001f20 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b098      	sub	sp, #96	@ 0x60
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001f28:	4a84      	ldr	r2, [pc, #528]	@ (800213c <HAL_FDCAN_Init+0x21c>)
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4611      	mov	r1, r2
 8001f30:	224c      	movs	r2, #76	@ 0x4c
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 fd60 	bl	80079f8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1c6      	b.n	80022d0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7e      	ldr	r2, [pc, #504]	@ (8002140 <HAL_FDCAN_Init+0x220>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d106      	bne.n	8001f5a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f54:	461a      	mov	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fb98 	bl	80006a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0210 	bic.w	r2, r2, #16
 8001f82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f84:	f7ff fe40 	bl	8001c08 <HAL_GetTick>
 8001f88:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f8a:	e014      	b.n	8001fb6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001f8c:	f7ff fe3c 	bl	8001c08 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b0a      	cmp	r3, #10
 8001f98:	d90d      	bls.n	8001fb6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e18c      	b.n	80022d0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d0e3      	beq.n	8001f8c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd4:	f7ff fe18 	bl	8001c08 <HAL_GetTick>
 8001fd8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001fda:	e014      	b.n	8002006 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001fdc:	f7ff fe14 	bl	8001c08 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b0a      	cmp	r3, #10
 8001fe8:	d90d      	bls.n	8002006 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e164      	b.n	80022d0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0e3      	beq.n	8001fdc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0202 	orr.w	r2, r2, #2
 8002022:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7c1b      	ldrb	r3, [r3, #16]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d108      	bne.n	800203e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800203a:	619a      	str	r2, [r3, #24]
 800203c:	e007      	b.n	800204e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800204c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7c5b      	ldrb	r3, [r3, #17]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d108      	bne.n	8002068 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	e007      	b.n	8002078 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002076:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7c9b      	ldrb	r3, [r3, #18]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d108      	bne.n	8002092 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800208e:	619a      	str	r2, [r3, #24]
 8002090:	e007      	b.n	80020a2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020a0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80020c6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0210 	bic.w	r2, r2, #16
 80020d6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d108      	bne.n	80020f2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0204 	orr.w	r2, r2, #4
 80020ee:	619a      	str	r2, [r3, #24]
 80020f0:	e030      	b.n	8002154 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d02c      	beq.n	8002154 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d020      	beq.n	8002144 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002110:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0210 	orr.w	r2, r2, #16
 8002120:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d114      	bne.n	8002154 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0220 	orr.w	r2, r2, #32
 8002138:	619a      	str	r2, [r3, #24]
 800213a:	e00b      	b.n	8002154 <HAL_FDCAN_Init+0x234>
 800213c:	08007a2c 	.word	0x08007a2c
 8002140:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	3b01      	subs	r3, #1
 800215a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	3b01      	subs	r3, #1
 8002162:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002164:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800216c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	3b01      	subs	r3, #1
 8002176:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800217c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800217e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002188:	d115      	bne.n	80021b6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	3b01      	subs	r3, #1
 8002196:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002198:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	3b01      	subs	r3, #1
 80021a0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80021a2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	3b01      	subs	r3, #1
 80021ac:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80021b2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021b4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021dc:	4413      	add	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d011      	beq.n	8002206 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80021ea:	f023 0107 	bic.w	r1, r3, #7
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	3360      	adds	r3, #96	@ 0x60
 80021f6:	443b      	add	r3, r7
 80021f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d011      	beq.n	8002232 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002216:	f023 0107 	bic.w	r1, r3, #7
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	3360      	adds	r3, #96	@ 0x60
 8002222:	443b      	add	r3, r7
 8002224:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002242:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	3360      	adds	r3, #96	@ 0x60
 800224e:	443b      	add	r3, r7
 8002250:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002254:	011a      	lsls	r2, r3, #4
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002264:	2b00      	cmp	r3, #0
 8002266:	d012      	beq.n	800228e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002270:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	3360      	adds	r3, #96	@ 0x60
 800227c:	443b      	add	r3, r7
 800227e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002282:	021a      	lsls	r2, r3, #8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a11      	ldr	r2, [pc, #68]	@ (80022d8 <HAL_FDCAN_Init+0x3b8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d107      	bne.n	80022a8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f022 0203 	bic.w	r2, r2, #3
 80022a6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f80b 	bl	80022dc <FDCAN_CalcultateRamBlockAddresses>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80022cc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3760      	adds	r7, #96	@ 0x60
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	4000a000 	.word	0x4000a000

080022dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80022f2:	4ba7      	ldr	r3, [pc, #668]	@ (8002590 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	0091      	lsls	r1, r2, #2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	430b      	orrs	r3, r1
 8002300:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	4413      	add	r3, r2
 8002328:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002332:	4b97      	ldr	r3, [pc, #604]	@ (8002590 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002334:	4013      	ands	r3, r2
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	0091      	lsls	r1, r2, #2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	430b      	orrs	r3, r1
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	041a      	lsls	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4413      	add	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002374:	4b86      	ldr	r3, [pc, #536]	@ (8002590 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002376:	4013      	ands	r3, r2
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	0091      	lsls	r1, r2, #2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800238e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4413      	add	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023bc:	4b74      	ldr	r3, [pc, #464]	@ (8002590 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80023be:	4013      	ands	r3, r2
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	0091      	lsls	r1, r2, #2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80023d6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023de:	041a      	lsls	r2, r3, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4413      	add	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002404:	4b62      	ldr	r3, [pc, #392]	@ (8002590 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002406:	4013      	ands	r3, r2
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	0091      	lsls	r1, r2, #2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4413      	add	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002430:	4b57      	ldr	r3, [pc, #348]	@ (8002590 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002432:	4013      	ands	r3, r2
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	0091      	lsls	r1, r2, #2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	430b      	orrs	r3, r1
 800243e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800244a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	041a      	lsls	r2, r3, #16
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	4413      	add	r3, r2
 8002468:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002474:	4013      	ands	r3, r2
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	0091      	lsls	r1, r2, #2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	430b      	orrs	r3, r1
 8002480:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800248c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024a8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b0:	061a      	lsls	r2, r3, #24
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c0:	4b34      	ldr	r3, [pc, #208]	@ (8002594 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80024c2:	4413      	add	r3, r2
 80024c4:	009a      	lsls	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	441a      	add	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80024fc:	441a      	add	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002514:	441a      	add	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800252c:	441a      	add	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	441a      	add	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	441a      	add	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002578:	441a      	add	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002586:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d915      	bls.n	80025b8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800258c:	e006      	b.n	800259c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800258e:	bf00      	nop
 8002590:	ffff0003 	.word	0xffff0003
 8002594:	10002b00 	.word	0x10002b00
 8002598:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025a2:	f043 0220 	orr.w	r2, r3, #32
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2203      	movs	r2, #3
 80025b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e010      	b.n	80025da <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e005      	b.n	80025cc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3304      	adds	r3, #4
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d3f3      	bcc.n	80025c0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	@ 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025f6:	4b89      	ldr	r3, [pc, #548]	@ (800281c <HAL_GPIO_Init+0x234>)
 80025f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025fa:	e194      	b.n	8002926 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8186 	beq.w	8002920 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d005      	beq.n	800262c <HAL_GPIO_Init+0x44>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d130      	bne.n	800268e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002662:	2201      	movs	r2, #1
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 0201 	and.w	r2, r3, #1
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b03      	cmp	r3, #3
 8002698:	d017      	beq.n	80026ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d123      	bne.n	800271e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	08da      	lsrs	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3208      	adds	r2, #8
 80026de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	08da      	lsrs	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3208      	adds	r2, #8
 8002718:	69b9      	ldr	r1, [r7, #24]
 800271a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0203 	and.w	r2, r3, #3
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80e0 	beq.w	8002920 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002760:	4b2f      	ldr	r3, [pc, #188]	@ (8002820 <HAL_GPIO_Init+0x238>)
 8002762:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002766:	4a2e      	ldr	r2, [pc, #184]	@ (8002820 <HAL_GPIO_Init+0x238>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002770:	4b2b      	ldr	r3, [pc, #172]	@ (8002820 <HAL_GPIO_Init+0x238>)
 8002772:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277e:	4a29      	ldr	r2, [pc, #164]	@ (8002824 <HAL_GPIO_Init+0x23c>)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	3302      	adds	r3, #2
 8002786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	220f      	movs	r2, #15
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a20      	ldr	r2, [pc, #128]	@ (8002828 <HAL_GPIO_Init+0x240>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d052      	beq.n	8002850 <HAL_GPIO_Init+0x268>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a1f      	ldr	r2, [pc, #124]	@ (800282c <HAL_GPIO_Init+0x244>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d031      	beq.n	8002816 <HAL_GPIO_Init+0x22e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002830 <HAL_GPIO_Init+0x248>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02b      	beq.n	8002812 <HAL_GPIO_Init+0x22a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <HAL_GPIO_Init+0x24c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d025      	beq.n	800280e <HAL_GPIO_Init+0x226>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <HAL_GPIO_Init+0x250>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01f      	beq.n	800280a <HAL_GPIO_Init+0x222>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <HAL_GPIO_Init+0x254>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d019      	beq.n	8002806 <HAL_GPIO_Init+0x21e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <HAL_GPIO_Init+0x258>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_GPIO_Init+0x21a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a19      	ldr	r2, [pc, #100]	@ (8002844 <HAL_GPIO_Init+0x25c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00d      	beq.n	80027fe <HAL_GPIO_Init+0x216>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a18      	ldr	r2, [pc, #96]	@ (8002848 <HAL_GPIO_Init+0x260>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <HAL_GPIO_Init+0x212>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a17      	ldr	r2, [pc, #92]	@ (800284c <HAL_GPIO_Init+0x264>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_GPIO_Init+0x20e>
 80027f2:	2309      	movs	r3, #9
 80027f4:	e02d      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 80027f6:	230a      	movs	r3, #10
 80027f8:	e02b      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 80027fa:	2308      	movs	r3, #8
 80027fc:	e029      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 80027fe:	2307      	movs	r3, #7
 8002800:	e027      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 8002802:	2306      	movs	r3, #6
 8002804:	e025      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 8002806:	2305      	movs	r3, #5
 8002808:	e023      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 800280a:	2304      	movs	r3, #4
 800280c:	e021      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 800280e:	2303      	movs	r3, #3
 8002810:	e01f      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 8002812:	2302      	movs	r3, #2
 8002814:	e01d      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 8002816:	2301      	movs	r3, #1
 8002818:	e01b      	b.n	8002852 <HAL_GPIO_Init+0x26a>
 800281a:	bf00      	nop
 800281c:	58000080 	.word	0x58000080
 8002820:	58024400 	.word	0x58024400
 8002824:	58000400 	.word	0x58000400
 8002828:	58020000 	.word	0x58020000
 800282c:	58020400 	.word	0x58020400
 8002830:	58020800 	.word	0x58020800
 8002834:	58020c00 	.word	0x58020c00
 8002838:	58021000 	.word	0x58021000
 800283c:	58021400 	.word	0x58021400
 8002840:	58021800 	.word	0x58021800
 8002844:	58021c00 	.word	0x58021c00
 8002848:	58022000 	.word	0x58022000
 800284c:	58022400 	.word	0x58022400
 8002850:	2300      	movs	r3, #0
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	f002 0203 	and.w	r2, r2, #3
 8002858:	0092      	lsls	r2, r2, #2
 800285a:	4093      	lsls	r3, r2
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002862:	4938      	ldr	r1, [pc, #224]	@ (8002944 <HAL_GPIO_Init+0x35c>)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3302      	adds	r3, #2
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	f47f ae63 	bne.w	80025fc <HAL_GPIO_Init+0x14>
  }
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	3724      	adds	r7, #36	@ 0x24
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	58000400 	.word	0x58000400

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800298c:	887a      	ldrh	r2, [r7, #2]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	041a      	lsls	r2, r3, #16
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43d9      	mvns	r1, r3
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	400b      	ands	r3, r1
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	619a      	str	r2, [r3, #24]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e08b      	b.n	8002ada <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd ff98 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	@ 0x24
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	e006      	b.n	8002a38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d108      	bne.n	8002a52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	e007      	b.n	8002a62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <HAL_I2C_Init+0x134>)
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	02008000 	.word	0x02008000

08002ae8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d138      	bne.n	8002b70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e032      	b.n	8002b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	@ 0x24
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6819      	ldr	r1, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d139      	bne.n	8002c08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e033      	b.n	8002c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2224      	movs	r2, #36	@ 0x24
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c20:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <HAL_PWREx_ConfigSupply+0x70>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d00a      	beq.n	8002c42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c2c:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <HAL_PWREx_ConfigSupply+0x70>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d001      	beq.n	8002c3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e01f      	b.n	8002c7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e01d      	b.n	8002c7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c42:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <HAL_PWREx_ConfigSupply+0x70>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	490f      	ldr	r1, [pc, #60]	@ (8002c88 <HAL_PWREx_ConfigSupply+0x70>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c52:	f7fe ffd9 	bl	8001c08 <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c58:	e009      	b.n	8002c6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c5a:	f7fe ffd5 	bl	8001c08 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c68:	d901      	bls.n	8002c6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e007      	b.n	8002c7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_PWREx_ConfigSupply+0x70>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	58024800 	.word	0x58024800

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	@ 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f000 bc1f 	b.w	80034de <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80b3 	beq.w	8002e14 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cae:	4b95      	ldr	r3, [pc, #596]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cb8:	4b92      	ldr	r3, [pc, #584]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d007      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x48>
 8002cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc6:	2b18      	cmp	r3, #24
 8002cc8:	d112      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x64>
 8002cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	4b8b      	ldr	r3, [pc, #556]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8098 	beq.w	8002e12 <HAL_RCC_OscConfig+0x186>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 8093 	bne.w	8002e12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e3f6      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf8:	d106      	bne.n	8002d08 <HAL_RCC_OscConfig+0x7c>
 8002cfa:	4b82      	ldr	r3, [pc, #520]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a81      	ldr	r2, [pc, #516]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e058      	b.n	8002dba <HAL_RCC_OscConfig+0x12e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d112      	bne.n	8002d36 <HAL_RCC_OscConfig+0xaa>
 8002d10:	4b7c      	ldr	r3, [pc, #496]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a7b      	ldr	r2, [pc, #492]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b79      	ldr	r3, [pc, #484]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a78      	ldr	r2, [pc, #480]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d22:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b76      	ldr	r3, [pc, #472]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a75      	ldr	r2, [pc, #468]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e041      	b.n	8002dba <HAL_RCC_OscConfig+0x12e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d3e:	d112      	bne.n	8002d66 <HAL_RCC_OscConfig+0xda>
 8002d40:	4b70      	ldr	r3, [pc, #448]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6f      	ldr	r2, [pc, #444]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b6d      	ldr	r3, [pc, #436]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a6c      	ldr	r2, [pc, #432]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d52:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b6a      	ldr	r3, [pc, #424]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a69      	ldr	r2, [pc, #420]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e029      	b.n	8002dba <HAL_RCC_OscConfig+0x12e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002d6e:	d112      	bne.n	8002d96 <HAL_RCC_OscConfig+0x10a>
 8002d70:	4b64      	ldr	r3, [pc, #400]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a63      	ldr	r2, [pc, #396]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b61      	ldr	r3, [pc, #388]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a60      	ldr	r2, [pc, #384]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	4b5e      	ldr	r3, [pc, #376]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e011      	b.n	8002dba <HAL_RCC_OscConfig+0x12e>
 8002d96:	4b5b      	ldr	r3, [pc, #364]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5a      	ldr	r2, [pc, #360]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b58      	ldr	r3, [pc, #352]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a57      	ldr	r2, [pc, #348]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002da8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b55      	ldr	r3, [pc, #340]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a54      	ldr	r2, [pc, #336]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002db4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002db8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d013      	beq.n	8002dea <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe ff21 	bl	8001c08 <HAL_GetTick>
 8002dc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dca:	f7fe ff1d 	bl	8001c08 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b64      	cmp	r3, #100	@ 0x64
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e380      	b.n	80034de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ddc:	4b49      	ldr	r3, [pc, #292]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x13e>
 8002de8:	e014      	b.n	8002e14 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe ff0d 	bl	8001c08 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df2:	f7fe ff09 	bl	8001c08 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b64      	cmp	r3, #100	@ 0x64
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e36c      	b.n	80034de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e04:	4b3f      	ldr	r3, [pc, #252]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x166>
 8002e10:	e000      	b.n	8002e14 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 808c 	beq.w	8002f3a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e22:	4b38      	ldr	r3, [pc, #224]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e2a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e2c:	4b35      	ldr	r3, [pc, #212]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_RCC_OscConfig+0x1bc>
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	2b18      	cmp	r3, #24
 8002e3c:	d137      	bne.n	8002eae <HAL_RCC_OscConfig+0x222>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d132      	bne.n	8002eae <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e48:	4b2e      	ldr	r3, [pc, #184]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1d4>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e33e      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e60:	4b28      	ldr	r3, [pc, #160]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 0219 	bic.w	r2, r3, #25
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4925      	ldr	r1, [pc, #148]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe fec9 	bl	8001c08 <HAL_GetTick>
 8002e76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7fe fec5 	bl	8001c08 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e328      	b.n	80034de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	4917      	ldr	r1, [pc, #92]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eac:	e045      	b.n	8002f3a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d028      	beq.n	8002f08 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eb6:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 0219 	bic.w	r2, r3, #25
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4910      	ldr	r1, [pc, #64]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fe9e 	bl	8001c08 <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fe9a 	bl	8001c08 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e2fd      	b.n	80034de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eee:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	061b      	lsls	r3, r3, #24
 8002efc:	4901      	ldr	r1, [pc, #4]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
 8002f02:	e01a      	b.n	8002f3a <HAL_RCC_OscConfig+0x2ae>
 8002f04:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f08:	4b97      	ldr	r3, [pc, #604]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a96      	ldr	r2, [pc, #600]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fe78 	bl	8001c08 <HAL_GetTick>
 8002f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe fe74 	bl	8001c08 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e2d7      	b.n	80034de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f2e:	4b8e      	ldr	r3, [pc, #568]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d06a      	beq.n	800301c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f46:	4b88      	ldr	r3, [pc, #544]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f50:	4b85      	ldr	r3, [pc, #532]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d007      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2e0>
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b18      	cmp	r3, #24
 8002f60:	d11b      	bne.n	8002f9a <HAL_RCC_OscConfig+0x30e>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d116      	bne.n	8002f9a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_OscConfig+0x2f8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b80      	cmp	r3, #128	@ 0x80
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e2ac      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f84:	4b78      	ldr	r3, [pc, #480]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	061b      	lsls	r3, r3, #24
 8002f92:	4975      	ldr	r1, [pc, #468]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f98:	e040      	b.n	800301c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d023      	beq.n	8002fea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fa2:	4b71      	ldr	r3, [pc, #452]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a70      	ldr	r2, [pc, #448]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fe fe2b 	bl	8001c08 <HAL_GetTick>
 8002fb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fb6:	f7fe fe27 	bl	8001c08 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e28a      	b.n	80034de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fc8:	4b67      	ldr	r3, [pc, #412]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fd4:	4b64      	ldr	r3, [pc, #400]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	4961      	ldr	r1, [pc, #388]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60cb      	str	r3, [r1, #12]
 8002fe8:	e018      	b.n	800301c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fea:	4b5f      	ldr	r3, [pc, #380]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5e      	ldr	r2, [pc, #376]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8002ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fe07 	bl	8001c08 <HAL_GetTick>
 8002ffa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fe03 	bl	8001c08 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e266      	b.n	80034de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003010:	4b55      	ldr	r3, [pc, #340]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d036      	beq.n	8003096 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d019      	beq.n	8003064 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003030:	4b4d      	ldr	r3, [pc, #308]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8003032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003034:	4a4c      	ldr	r2, [pc, #304]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe fde4 	bl	8001c08 <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003044:	f7fe fde0 	bl	8001c08 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e243      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003056:	4b44      	ldr	r3, [pc, #272]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8003058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x3b8>
 8003062:	e018      	b.n	8003096 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003064:	4b40      	ldr	r3, [pc, #256]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8003066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003068:	4a3f      	ldr	r2, [pc, #252]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe fdca 	bl	8001c08 <HAL_GetTick>
 8003074:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003078:	f7fe fdc6 	bl	8001c08 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e229      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800308a:	4b37      	ldr	r3, [pc, #220]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 800308c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d036      	beq.n	8003110 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d019      	beq.n	80030de <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 80030b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030b6:	f7fe fda7 	bl	8001c08 <HAL_GetTick>
 80030ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030be:	f7fe fda3 	bl	8001c08 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e206      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030d0:	4b25      	ldr	r3, [pc, #148]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x432>
 80030dc:	e018      	b.n	8003110 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030de:	4b22      	ldr	r3, [pc, #136]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a21      	ldr	r2, [pc, #132]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 80030e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ea:	f7fe fd8d 	bl	8001c08 <HAL_GetTick>
 80030ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f2:	f7fe fd89 	bl	8001c08 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1ec      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003104:	4b18      	ldr	r3, [pc, #96]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80af 	beq.w	800327c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800311e:	4b13      	ldr	r3, [pc, #76]	@ (800316c <HAL_RCC_OscConfig+0x4e0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a12      	ldr	r2, [pc, #72]	@ (800316c <HAL_RCC_OscConfig+0x4e0>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312a:	f7fe fd6d 	bl	8001c08 <HAL_GetTick>
 800312e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe fd69 	bl	8001c08 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b64      	cmp	r3, #100	@ 0x64
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1cc      	b.n	80034de <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003144:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_RCC_OscConfig+0x4e0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d10b      	bne.n	8003170 <HAL_RCC_OscConfig+0x4e4>
 8003158:	4b03      	ldr	r3, [pc, #12]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	4a02      	ldr	r2, [pc, #8]	@ (8003168 <HAL_RCC_OscConfig+0x4dc>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	@ 0x70
 8003164:	e05b      	b.n	800321e <HAL_RCC_OscConfig+0x592>
 8003166:	bf00      	nop
 8003168:	58024400 	.word	0x58024400
 800316c:	58024800 	.word	0x58024800
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d112      	bne.n	800319e <HAL_RCC_OscConfig+0x512>
 8003178:	4b9d      	ldr	r3, [pc, #628]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317c:	4a9c      	ldr	r2, [pc, #624]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	@ 0x70
 8003184:	4b9a      	ldr	r3, [pc, #616]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003188:	4a99      	ldr	r2, [pc, #612]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800318a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800318e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003190:	4b97      	ldr	r3, [pc, #604]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003194:	4a96      	ldr	r2, [pc, #600]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003196:	f023 0304 	bic.w	r3, r3, #4
 800319a:	6713      	str	r3, [r2, #112]	@ 0x70
 800319c:	e03f      	b.n	800321e <HAL_RCC_OscConfig+0x592>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d112      	bne.n	80031cc <HAL_RCC_OscConfig+0x540>
 80031a6:	4b92      	ldr	r3, [pc, #584]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031aa:	4a91      	ldr	r2, [pc, #580]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b2:	4b8f      	ldr	r3, [pc, #572]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	4a8e      	ldr	r2, [pc, #568]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031be:	4b8c      	ldr	r3, [pc, #560]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c2:	4a8b      	ldr	r2, [pc, #556]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ca:	e028      	b.n	800321e <HAL_RCC_OscConfig+0x592>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b85      	cmp	r3, #133	@ 0x85
 80031d2:	d112      	bne.n	80031fa <HAL_RCC_OscConfig+0x56e>
 80031d4:	4b86      	ldr	r3, [pc, #536]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d8:	4a85      	ldr	r2, [pc, #532]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031da:	f043 0304 	orr.w	r3, r3, #4
 80031de:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e0:	4b83      	ldr	r3, [pc, #524]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	4a82      	ldr	r2, [pc, #520]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ec:	4b80      	ldr	r3, [pc, #512]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f0:	4a7f      	ldr	r2, [pc, #508]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f8:	e011      	b.n	800321e <HAL_RCC_OscConfig+0x592>
 80031fa:	4b7d      	ldr	r3, [pc, #500]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fe:	4a7c      	ldr	r2, [pc, #496]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	@ 0x70
 8003206:	4b7a      	ldr	r3, [pc, #488]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	4a79      	ldr	r2, [pc, #484]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800320c:	f023 0304 	bic.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	@ 0x70
 8003212:	4b77      	ldr	r3, [pc, #476]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	4a76      	ldr	r2, [pc, #472]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003218:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800321c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d015      	beq.n	8003252 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7fe fcef 	bl	8001c08 <HAL_GetTick>
 800322a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fe fceb 	bl	8001c08 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e14c      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003244:	4b6a      	ldr	r3, [pc, #424]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ee      	beq.n	800322e <HAL_RCC_OscConfig+0x5a2>
 8003250:	e014      	b.n	800327c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe fcd9 	bl	8001c08 <HAL_GetTick>
 8003256:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fe fcd5 	bl	8001c08 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e136      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003270:	4b5f      	ldr	r3, [pc, #380]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ee      	bne.n	800325a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 812b 	beq.w	80034dc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003286:	4b5a      	ldr	r3, [pc, #360]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800328e:	2b18      	cmp	r3, #24
 8003290:	f000 80bb 	beq.w	800340a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	2b02      	cmp	r3, #2
 800329a:	f040 8095 	bne.w	80033c8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329e:	4b54      	ldr	r3, [pc, #336]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a53      	ldr	r2, [pc, #332]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80032a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe fcad 	bl	8001c08 <HAL_GetTick>
 80032ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe fca9 	bl	8001c08 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e10c      	b.n	80034de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c4:	4b4a      	ldr	r3, [pc, #296]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d0:	4b47      	ldr	r3, [pc, #284]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80032d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032d4:	4b47      	ldr	r3, [pc, #284]	@ (80033f4 <HAL_RCC_OscConfig+0x768>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	430a      	orrs	r2, r1
 80032e4:	4942      	ldr	r1, [pc, #264]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	628b      	str	r3, [r1, #40]	@ 0x28
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	3b01      	subs	r3, #1
 80032f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f8:	3b01      	subs	r3, #1
 80032fa:	025b      	lsls	r3, r3, #9
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	3b01      	subs	r3, #1
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003312:	3b01      	subs	r3, #1
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800331a:	4935      	ldr	r1, [pc, #212]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800331c:	4313      	orrs	r3, r2
 800331e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003320:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	4a32      	ldr	r2, [pc, #200]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800332c:	4b30      	ldr	r3, [pc, #192]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800332e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003330:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <HAL_RCC_OscConfig+0x76c>)
 8003332:	4013      	ands	r3, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003338:	00d2      	lsls	r2, r2, #3
 800333a:	492d      	ldr	r1, [pc, #180]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800333c:	4313      	orrs	r3, r2
 800333e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003340:	4b2b      	ldr	r3, [pc, #172]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	f023 020c 	bic.w	r2, r3, #12
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	4928      	ldr	r1, [pc, #160]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800334e:	4313      	orrs	r3, r2
 8003350:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003352:	4b27      	ldr	r3, [pc, #156]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	f023 0202 	bic.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	4924      	ldr	r1, [pc, #144]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003360:	4313      	orrs	r3, r2
 8003362:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003364:	4b22      	ldr	r3, [pc, #136]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	4a21      	ldr	r2, [pc, #132]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003370:	4b1f      	ldr	r3, [pc, #124]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800337a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800337c:	4b1c      	ldr	r3, [pc, #112]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	4a1b      	ldr	r2, [pc, #108]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003382:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003388:	4b19      	ldr	r3, [pc, #100]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	4a18      	ldr	r2, [pc, #96]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003394:	4b16      	ldr	r3, [pc, #88]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a15      	ldr	r2, [pc, #84]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 800339a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fc32 	bl	8001c08 <HAL_GetTick>
 80033a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe fc2e 	bl	8001c08 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e091      	b.n	80034de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ba:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x71c>
 80033c6:	e089      	b.n	80034dc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a08      	ldr	r2, [pc, #32]	@ (80033f0 <HAL_RCC_OscConfig+0x764>)
 80033ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fe fc18 	bl	8001c08 <HAL_GetTick>
 80033d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033da:	e00f      	b.n	80033fc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fe fc14 	bl	8001c08 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d908      	bls.n	80033fc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e077      	b.n	80034de <HAL_RCC_OscConfig+0x852>
 80033ee:	bf00      	nop
 80033f0:	58024400 	.word	0x58024400
 80033f4:	fffffc0c 	.word	0xfffffc0c
 80033f8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033fc:	4b3a      	ldr	r3, [pc, #232]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e9      	bne.n	80033dc <HAL_RCC_OscConfig+0x750>
 8003408:	e068      	b.n	80034dc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800340a:	4b37      	ldr	r3, [pc, #220]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003410:	4b35      	ldr	r3, [pc, #212]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	2b01      	cmp	r3, #1
 800341c:	d031      	beq.n	8003482 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0203 	and.w	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d12a      	bne.n	8003482 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d122      	bne.n	8003482 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d11a      	bne.n	8003482 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	0a5b      	lsrs	r3, r3, #9
 8003450:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d111      	bne.n	8003482 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d108      	bne.n	8003482 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	0e1b      	lsrs	r3, r3, #24
 8003474:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e02b      	b.n	80034de <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003486:	4b18      	ldr	r3, [pc, #96]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 8003488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348a:	08db      	lsrs	r3, r3, #3
 800348c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003490:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	429a      	cmp	r2, r3
 800349a:	d01f      	beq.n	80034dc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800349c:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 800349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a0:	4a11      	ldr	r2, [pc, #68]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034a8:	f7fe fbae 	bl	8001c08 <HAL_GetTick>
 80034ac:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034ae:	bf00      	nop
 80034b0:	f7fe fbaa 	bl	8001c08 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d0f9      	beq.n	80034b0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034bc:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 80034be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c0:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <HAL_RCC_OscConfig+0x860>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034c8:	00d2      	lsls	r2, r2, #3
 80034ca:	4907      	ldr	r1, [pc, #28]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034d0:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	4a04      	ldr	r2, [pc, #16]	@ (80034e8 <HAL_RCC_OscConfig+0x85c>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3730      	adds	r7, #48	@ 0x30
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
 80034ec:	ffff0007 	.word	0xffff0007

080034f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e19c      	b.n	800383e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003504:	4b8a      	ldr	r3, [pc, #552]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d910      	bls.n	8003534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b87      	ldr	r3, [pc, #540]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 020f 	bic.w	r2, r3, #15
 800351a:	4985      	ldr	r1, [pc, #532]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b83      	ldr	r3, [pc, #524]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e184      	b.n	800383e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d010      	beq.n	8003562 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	4b7b      	ldr	r3, [pc, #492]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800354c:	429a      	cmp	r2, r3
 800354e:	d908      	bls.n	8003562 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003550:	4b78      	ldr	r3, [pc, #480]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	4975      	ldr	r1, [pc, #468]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 800355e:	4313      	orrs	r3, r2
 8003560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	4b70      	ldr	r3, [pc, #448]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800357a:	429a      	cmp	r2, r3
 800357c:	d908      	bls.n	8003590 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800357e:	4b6d      	ldr	r3, [pc, #436]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	496a      	ldr	r1, [pc, #424]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 800358c:	4313      	orrs	r3, r2
 800358e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	4b64      	ldr	r3, [pc, #400]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d908      	bls.n	80035be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035ac:	4b61      	ldr	r3, [pc, #388]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	495e      	ldr	r1, [pc, #376]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	4b59      	ldr	r3, [pc, #356]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d908      	bls.n	80035ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035da:	4b56      	ldr	r3, [pc, #344]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4953      	ldr	r1, [pc, #332]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d010      	beq.n	800361a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	429a      	cmp	r2, r3
 8003606:	d908      	bls.n	800361a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4b4a      	ldr	r3, [pc, #296]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f023 020f 	bic.w	r2, r3, #15
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4947      	ldr	r1, [pc, #284]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003616:	4313      	orrs	r3, r2
 8003618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d055      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003626:	4b43      	ldr	r3, [pc, #268]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4940      	ldr	r1, [pc, #256]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003634:	4313      	orrs	r3, r2
 8003636:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d107      	bne.n	8003650 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003640:	4b3c      	ldr	r3, [pc, #240]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d121      	bne.n	8003690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0f6      	b.n	800383e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003658:	4b36      	ldr	r3, [pc, #216]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d115      	bne.n	8003690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0ea      	b.n	800383e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003670:	4b30      	ldr	r3, [pc, #192]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0de      	b.n	800383e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003680:	4b2c      	ldr	r3, [pc, #176]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0d6      	b.n	800383e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003690:	4b28      	ldr	r3, [pc, #160]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f023 0207 	bic.w	r2, r3, #7
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4925      	ldr	r1, [pc, #148]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a2:	f7fe fab1 	bl	8001c08 <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a8:	e00a      	b.n	80036c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036aa:	f7fe faad 	bl	8001c08 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0be      	b.n	800383e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d1eb      	bne.n	80036aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d010      	beq.n	8003700 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	4b14      	ldr	r3, [pc, #80]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d208      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ee:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f023 020f 	bic.w	r2, r3, #15
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	490e      	ldr	r1, [pc, #56]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003700:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d214      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 020f 	bic.w	r2, r3, #15
 8003716:	4906      	ldr	r1, [pc, #24]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e086      	b.n	800383e <HAL_RCC_ClockConfig+0x34e>
 8003730:	52002000 	.word	0x52002000
 8003734:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d010      	beq.n	8003766 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	4b3f      	ldr	r3, [pc, #252]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003750:	429a      	cmp	r2, r3
 8003752:	d208      	bcs.n	8003766 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003754:	4b3c      	ldr	r3, [pc, #240]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	4939      	ldr	r1, [pc, #228]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 8003762:	4313      	orrs	r3, r2
 8003764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d010      	beq.n	8003794 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	4b34      	ldr	r3, [pc, #208]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800377e:	429a      	cmp	r2, r3
 8003780:	d208      	bcs.n	8003794 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003782:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	492e      	ldr	r1, [pc, #184]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 8003790:	4313      	orrs	r3, r2
 8003792:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	d010      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	4b28      	ldr	r3, [pc, #160]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d208      	bcs.n	80037c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037b0:	4b25      	ldr	r3, [pc, #148]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	4922      	ldr	r1, [pc, #136]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d010      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037da:	429a      	cmp	r2, r3
 80037dc:	d208      	bcs.n	80037f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037de:	4b1a      	ldr	r3, [pc, #104]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4917      	ldr	r1, [pc, #92]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80037f0:	f000 f834 	bl	800385c <HAL_RCC_GetSysClockFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	4912      	ldr	r1, [pc, #72]	@ (800384c <HAL_RCC_ClockConfig+0x35c>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800380e:	4b0e      	ldr	r3, [pc, #56]	@ (8003848 <HAL_RCC_ClockConfig+0x358>)
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	4a0d      	ldr	r2, [pc, #52]	@ (800384c <HAL_RCC_ClockConfig+0x35c>)
 8003818:	5cd3      	ldrb	r3, [r2, r3]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
 8003824:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <HAL_RCC_ClockConfig+0x360>)
 8003826:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003828:	4a0a      	ldr	r2, [pc, #40]	@ (8003854 <HAL_RCC_ClockConfig+0x364>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800382e:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <HAL_RCC_ClockConfig+0x368>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe f99e 	bl	8001b74 <HAL_InitTick>
 8003838:	4603      	mov	r3, r0
 800383a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	58024400 	.word	0x58024400
 800384c:	08007a78 	.word	0x08007a78
 8003850:	24000004 	.word	0x24000004
 8003854:	24000000 	.word	0x24000000
 8003858:	24000008 	.word	0x24000008

0800385c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	@ 0x24
 8003860:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003862:	4bb3      	ldr	r3, [pc, #716]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800386a:	2b18      	cmp	r3, #24
 800386c:	f200 8155 	bhi.w	8003b1a <HAL_RCC_GetSysClockFreq+0x2be>
 8003870:	a201      	add	r2, pc, #4	@ (adr r2, 8003878 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	080038dd 	.word	0x080038dd
 800387c:	08003b1b 	.word	0x08003b1b
 8003880:	08003b1b 	.word	0x08003b1b
 8003884:	08003b1b 	.word	0x08003b1b
 8003888:	08003b1b 	.word	0x08003b1b
 800388c:	08003b1b 	.word	0x08003b1b
 8003890:	08003b1b 	.word	0x08003b1b
 8003894:	08003b1b 	.word	0x08003b1b
 8003898:	08003903 	.word	0x08003903
 800389c:	08003b1b 	.word	0x08003b1b
 80038a0:	08003b1b 	.word	0x08003b1b
 80038a4:	08003b1b 	.word	0x08003b1b
 80038a8:	08003b1b 	.word	0x08003b1b
 80038ac:	08003b1b 	.word	0x08003b1b
 80038b0:	08003b1b 	.word	0x08003b1b
 80038b4:	08003b1b 	.word	0x08003b1b
 80038b8:	08003909 	.word	0x08003909
 80038bc:	08003b1b 	.word	0x08003b1b
 80038c0:	08003b1b 	.word	0x08003b1b
 80038c4:	08003b1b 	.word	0x08003b1b
 80038c8:	08003b1b 	.word	0x08003b1b
 80038cc:	08003b1b 	.word	0x08003b1b
 80038d0:	08003b1b 	.word	0x08003b1b
 80038d4:	08003b1b 	.word	0x08003b1b
 80038d8:	0800390f 	.word	0x0800390f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038dc:	4b94      	ldr	r3, [pc, #592]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038e8:	4b91      	ldr	r3, [pc, #580]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	08db      	lsrs	r3, r3, #3
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	4a90      	ldr	r2, [pc, #576]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
 80038f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038fa:	e111      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038fc:	4b8d      	ldr	r3, [pc, #564]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038fe:	61bb      	str	r3, [r7, #24]
      break;
 8003900:	e10e      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003902:	4b8d      	ldr	r3, [pc, #564]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003904:	61bb      	str	r3, [r7, #24]
      break;
 8003906:	e10b      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003908:	4b8c      	ldr	r3, [pc, #560]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800390a:	61bb      	str	r3, [r7, #24]
      break;
 800390c:	e108      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800390e:	4b88      	ldr	r3, [pc, #544]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003918:	4b85      	ldr	r3, [pc, #532]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003922:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003924:	4b82      	ldr	r3, [pc, #520]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800392e:	4b80      	ldr	r3, [pc, #512]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003932:	08db      	lsrs	r3, r3, #3
 8003934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80e1 	beq.w	8003b14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b02      	cmp	r3, #2
 8003956:	f000 8083 	beq.w	8003a60 <HAL_RCC_GetSysClockFreq+0x204>
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b02      	cmp	r3, #2
 800395e:	f200 80a1 	bhi.w	8003aa4 <HAL_RCC_GetSysClockFreq+0x248>
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x114>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d056      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x1c0>
 800396e:	e099      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003970:	4b6f      	ldr	r3, [pc, #444]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02d      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800397c:	4b6c      	ldr	r3, [pc, #432]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	08db      	lsrs	r3, r3, #3
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	4a6b      	ldr	r2, [pc, #428]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
 800398c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	ee07 3a90 	vmov	s15, r3
 8003994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a6:	4b62      	ldr	r3, [pc, #392]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039d6:	e087      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003b44 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ea:	4b51      	ldr	r3, [pc, #324]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a1a:	e065      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2e:	4b40      	ldr	r3, [pc, #256]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a5e:	e043      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a72:	4b2f      	ldr	r3, [pc, #188]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aa2:	e021      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ae6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ae8:	4b11      	ldr	r3, [pc, #68]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	0a5b      	lsrs	r3, r3, #9
 8003aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003af2:	3301      	adds	r3, #1
 8003af4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b0c:	ee17 3a90 	vmov	r3, s15
 8003b10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b12:	e005      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
      break;
 8003b18:	e002      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b1a:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b1c:	61bb      	str	r3, [r7, #24]
      break;
 8003b1e:	bf00      	nop
  }

  return sysclockfreq;
 8003b20:	69bb      	ldr	r3, [r7, #24]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3724      	adds	r7, #36	@ 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	58024400 	.word	0x58024400
 8003b34:	03d09000 	.word	0x03d09000
 8003b38:	003d0900 	.word	0x003d0900
 8003b3c:	016e3600 	.word	0x016e3600
 8003b40:	46000000 	.word	0x46000000
 8003b44:	4c742400 	.word	0x4c742400
 8003b48:	4a742400 	.word	0x4a742400
 8003b4c:	4bb71b00 	.word	0x4bb71b00

08003b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b56:	f7ff fe81 	bl	800385c <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490f      	ldr	r1, [pc, #60]	@ (8003ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	4a09      	ldr	r2, [pc, #36]	@ (8003ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b7e:	5cd3      	ldrb	r3, [r2, r3]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	4a07      	ldr	r2, [pc, #28]	@ (8003ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b8e:	4a07      	ldr	r2, [pc, #28]	@ (8003bac <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b94:	4b04      	ldr	r3, [pc, #16]	@ (8003ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	08007a78 	.word	0x08007a78
 8003ba8:	24000004 	.word	0x24000004
 8003bac:	24000000 	.word	0x24000000

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003bb4:	f7ff ffcc 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4904      	ldr	r1, [pc, #16]	@ (8003bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	58024400 	.word	0x58024400
 8003bd8:	08007a78 	.word	0x08007a78

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003be0:	f7ff ffb6 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4904      	ldr	r1, [pc, #16]	@ (8003c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	58024400 	.word	0x58024400
 8003c04:	08007a78 	.word	0x08007a78

08003c08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c0c:	b0c8      	sub	sp, #288	@ 0x120
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c14:	2300      	movs	r3, #0
 8003c16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	ea54 0305 	orrs.w	r3, r4, r5
 8003c32:	d049      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c3e:	d02f      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c44:	d828      	bhi.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c4a:	d01a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c50:	d822      	bhi.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c5a:	d007      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5e:	4ba7      	ldr	r3, [pc, #668]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	4aa6      	ldr	r2, [pc, #664]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c6a:	e01a      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c70:	3308      	adds	r3, #8
 8003c72:	2102      	movs	r1, #2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f001 fc43 	bl	8005500 <RCCEx_PLL2_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c80:	e00f      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c86:	3328      	adds	r3, #40	@ 0x28
 8003c88:	2102      	movs	r1, #2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 fcea 	bl	8005664 <RCCEx_PLL3_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c96:	e004      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003caa:	4b94      	ldr	r3, [pc, #592]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cb8:	4a90      	ldr	r2, [pc, #576]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cbe:	e003      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003cd4:	f04f 0900 	mov.w	r9, #0
 8003cd8:	ea58 0309 	orrs.w	r3, r8, r9
 8003cdc:	d047      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d82a      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d05 	.word	0x08003d05
 8003cf4:	08003d13 	.word	0x08003d13
 8003cf8:	08003d29 	.word	0x08003d29
 8003cfc:	08003d47 	.word	0x08003d47
 8003d00:	08003d47 	.word	0x08003d47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d04:	4b7d      	ldr	r3, [pc, #500]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	4a7c      	ldr	r2, [pc, #496]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d10:	e01a      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d16:	3308      	adds	r3, #8
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 fbf0 	bl	8005500 <RCCEx_PLL2_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d26:	e00f      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d2c:	3328      	adds	r3, #40	@ 0x28
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 fc97 	bl	8005664 <RCCEx_PLL3_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d3c:	e004      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d44:	e000      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d50:	4b6a      	ldr	r3, [pc, #424]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d54:	f023 0107 	bic.w	r1, r3, #7
 8003d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	4a67      	ldr	r2, [pc, #412]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d64:	e003      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003d7a:	f04f 0b00 	mov.w	fp, #0
 8003d7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d82:	d054      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003d8e:	d036      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003d90:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003d94:	d82f      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d9a:	d032      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da0:	d829      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003da4:	d02f      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003da6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003da8:	d825      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003daa:	2b80      	cmp	r3, #128	@ 0x80
 8003dac:	d018      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003dae:	2b80      	cmp	r3, #128	@ 0x80
 8003db0:	d821      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003db6:	2b40      	cmp	r3, #64	@ 0x40
 8003db8:	d007      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003dba:	e01c      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	4a4e      	ldr	r2, [pc, #312]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003dc8:	e01e      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dce:	3308      	adds	r3, #8
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 fb94 	bl	8005500 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003dde:	e013      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de4:	3328      	adds	r3, #40	@ 0x28
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fc3b 	bl	8005664 <RCCEx_PLL3_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003df4:	e008      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dfc:	e004      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003e10:	4b3a      	ldr	r3, [pc, #232]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e14:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1e:	4a37      	ldr	r2, [pc, #220]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e24:	e003      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e36:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003e3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	d05c      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e54:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003e58:	d03b      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e5a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003e5e:	d834      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e64:	d037      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003e66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e6a:	d82e      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e70:	d033      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e72:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e76:	d828      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e7c:	d01a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e82:	d822      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8c:	d007      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003e8e:	e01c      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e90:	4b1a      	ldr	r3, [pc, #104]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	4a19      	ldr	r2, [pc, #100]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e9c:	e01e      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fb2a 	bl	8005500 <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003eb2:	e013      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb8:	3328      	adds	r3, #40	@ 0x28
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 fbd1 	bl	8005664 <RCCEx_PLL3_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ec8:	e008      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ed0:	e004      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003edc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10d      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef2:	4a02      	ldr	r2, [pc, #8]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ef8:	e006      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003efa:	bf00      	nop
 8003efc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f22:	460b      	mov	r3, r1
 8003f24:	4313      	orrs	r3, r2
 8003f26:	d03a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	2b30      	cmp	r3, #48	@ 0x30
 8003f30:	d01f      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003f32:	2b30      	cmp	r3, #48	@ 0x30
 8003f34:	d819      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d00c      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d815      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d019      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d111      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f46:	4bae      	ldr	r3, [pc, #696]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	4aad      	ldr	r2, [pc, #692]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f52:	e011      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f58:	3308      	adds	r3, #8
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 facf 	bl	8005500 <RCCEx_PLL2_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f80:	4b9f      	ldr	r3, [pc, #636]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8e:	4a9c      	ldr	r2, [pc, #624]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f90:	430b      	orrs	r3, r1
 8003f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003faa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	d051      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fc8:	d035      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fce:	d82e      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fd4:	d031      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fda:	d828      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe0:	d01a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe6:	d822      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff0:	d007      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003ff2:	e01c      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff4:	4b82      	ldr	r3, [pc, #520]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	4a81      	ldr	r2, [pc, #516]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004000:	e01c      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004006:	3308      	adds	r3, #8
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f001 fa78 	bl	8005500 <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004016:	e011      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800401c:	3328      	adds	r3, #40	@ 0x28
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f001 fb1f 	bl	8005664 <RCCEx_PLL3_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800402c:	e006      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004034:	e002      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800403a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004044:	4b6e      	ldr	r3, [pc, #440]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004048:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800404c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004052:	4a6b      	ldr	r2, [pc, #428]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004054:	430b      	orrs	r3, r1
 8004056:	6513      	str	r3, [r2, #80]	@ 0x50
 8004058:	e003      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800405e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800406e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004072:	2300      	movs	r3, #0
 8004074:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004078:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800407c:	460b      	mov	r3, r1
 800407e:	4313      	orrs	r3, r2
 8004080:	d053      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800408c:	d033      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800408e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004092:	d82c      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004094:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004098:	d02f      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800409a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800409e:	d826      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040a4:	d02b      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040aa:	d820      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040b0:	d012      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80040b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040b6:	d81a      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d022      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c0:	d115      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040c6:	3308      	adds	r3, #8
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 fa18 	bl	8005500 <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040d6:	e015      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040dc:	3328      	adds	r3, #40	@ 0x28
 80040de:	2101      	movs	r1, #1
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 fabf 	bl	8005664 <RCCEx_PLL3_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040ec:	e00a      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040f6:	bf00      	nop
 80040f8:	e004      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004104:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800410c:	4b3c      	ldr	r3, [pc, #240]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800410e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004110:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411a:	4a39      	ldr	r2, [pc, #228]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800411c:	430b      	orrs	r3, r1
 800411e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004120:	e003      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004126:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004136:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800413a:	2300      	movs	r3, #0
 800413c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004140:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004144:	460b      	mov	r3, r1
 8004146:	4313      	orrs	r3, r2
 8004148:	d060      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800414a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800414e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004152:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004156:	d039      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004158:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800415c:	d832      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800415e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004162:	d035      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004168:	d82c      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416e:	d031      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004174:	d826      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800417a:	d02d      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800417c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004180:	d820      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004186:	d012      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800418c:	d81a      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d024      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004196:	d115      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800419c:	3308      	adds	r3, #8
 800419e:	2101      	movs	r1, #1
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 f9ad 	bl	8005500 <RCCEx_PLL2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041ac:	e017      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041b2:	3328      	adds	r3, #40	@ 0x28
 80041b4:	2101      	movs	r1, #1
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 fa54 	bl	8005664 <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041c2:	e00c      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041ca:	e008      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041cc:	bf00      	nop
 80041ce:	e006      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041d0:	bf00      	nop
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041d4:	bf00      	nop
 80041d6:	e002      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041d8:	bf00      	nop
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10e      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041e6:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041f6:	4a02      	ldr	r2, [pc, #8]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80041fc:	e006      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x604>
 80041fe:	bf00      	nop
 8004200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004208:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800420c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800421c:	2300      	movs	r3, #0
 800421e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004226:	460b      	mov	r3, r1
 8004228:	4313      	orrs	r3, r2
 800422a:	d037      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800422c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004230:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004236:	d00e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800423c:	d816      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d018      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004246:	d111      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004248:	4bc4      	ldr	r3, [pc, #784]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	4ac3      	ldr	r2, [pc, #780]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800424e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800425a:	3308      	adds	r3, #8
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f94e 	bl	8005500 <RCCEx_PLL2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800427e:	4bb7      	ldr	r3, [pc, #732]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004282:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800428a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800428c:	4ab3      	ldr	r2, [pc, #716]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800428e:	430b      	orrs	r3, r1
 8004290:	6513      	str	r3, [r2, #80]	@ 0x50
 8004292:	e003      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004298:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800429c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80042a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80042b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d039      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d81c      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80042c6:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	08004309 	.word	0x08004309
 80042d0:	080042dd 	.word	0x080042dd
 80042d4:	080042eb 	.word	0x080042eb
 80042d8:	08004309 	.word	0x08004309
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042dc:	4b9f      	ldr	r3, [pc, #636]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	4a9e      	ldr	r2, [pc, #632]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042e8:	e00f      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ee:	3308      	adds	r3, #8
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f001 f904 	bl	8005500 <RCCEx_PLL2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004312:	4b92      	ldr	r3, [pc, #584]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004316:	f023 0103 	bic.w	r1, r3, #3
 800431a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800431e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004320:	4a8e      	ldr	r2, [pc, #568]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004322:	430b      	orrs	r3, r1
 8004324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004326:	e003      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800432c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800433c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004340:	2300      	movs	r3, #0
 8004342:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004346:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800434a:	460b      	mov	r3, r1
 800434c:	4313      	orrs	r3, r2
 800434e:	f000 8099 	beq.w	8004484 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004352:	4b83      	ldr	r3, [pc, #524]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a82      	ldr	r2, [pc, #520]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800435c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800435e:	f7fd fc53 	bl	8001c08 <HAL_GetTick>
 8004362:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004366:	e00b      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004368:	f7fd fc4e 	bl	8001c08 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b64      	cmp	r3, #100	@ 0x64
 8004376:	d903      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800437e:	e005      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004380:	4b77      	ldr	r3, [pc, #476]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0ed      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800438c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004390:	2b00      	cmp	r3, #0
 8004392:	d173      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004394:	4b71      	ldr	r3, [pc, #452]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004396:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800439c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043a0:	4053      	eors	r3, r2
 80043a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d015      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043aa:	4b6c      	ldr	r3, [pc, #432]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043b6:	4b69      	ldr	r3, [pc, #420]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	4a68      	ldr	r2, [pc, #416]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043c2:	4b66      	ldr	r3, [pc, #408]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	4a65      	ldr	r2, [pc, #404]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043ce:	4a63      	ldr	r2, [pc, #396]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e2:	d118      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd fc10 	bl	8001c08 <HAL_GetTick>
 80043e8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ec:	e00d      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fd fc0b 	bl	8001c08 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80043f8:	1ad2      	subs	r2, r2, r3
 80043fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80043fe:	429a      	cmp	r2, r3
 8004400:	d903      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004408:	e005      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440a:	4b54      	ldr	r3, [pc, #336]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0eb      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004416:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800441a:	2b00      	cmp	r3, #0
 800441c:	d129      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800442e:	d10e      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004430:	4b4a      	ldr	r3, [pc, #296]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800443c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004440:	091a      	lsrs	r2, r3, #4
 8004442:	4b48      	ldr	r3, [pc, #288]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004444:	4013      	ands	r3, r2
 8004446:	4a45      	ldr	r2, [pc, #276]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6113      	str	r3, [r2, #16]
 800444c:	e005      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800444e:	4b43      	ldr	r3, [pc, #268]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	4a42      	ldr	r2, [pc, #264]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004454:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004458:	6113      	str	r3, [r2, #16]
 800445a:	4b40      	ldr	r3, [pc, #256]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800445c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800445e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004462:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446a:	4a3c      	ldr	r2, [pc, #240]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004470:	e008      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004472:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004476:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800447a:	e003      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004480:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f002 0301 	and.w	r3, r2, #1
 8004490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800449a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800449e:	460b      	mov	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f000 8090 	beq.w	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ae:	2b28      	cmp	r3, #40	@ 0x28
 80044b0:	d870      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80044b2:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	0800459d 	.word	0x0800459d
 80044bc:	08004595 	.word	0x08004595
 80044c0:	08004595 	.word	0x08004595
 80044c4:	08004595 	.word	0x08004595
 80044c8:	08004595 	.word	0x08004595
 80044cc:	08004595 	.word	0x08004595
 80044d0:	08004595 	.word	0x08004595
 80044d4:	08004595 	.word	0x08004595
 80044d8:	08004569 	.word	0x08004569
 80044dc:	08004595 	.word	0x08004595
 80044e0:	08004595 	.word	0x08004595
 80044e4:	08004595 	.word	0x08004595
 80044e8:	08004595 	.word	0x08004595
 80044ec:	08004595 	.word	0x08004595
 80044f0:	08004595 	.word	0x08004595
 80044f4:	08004595 	.word	0x08004595
 80044f8:	0800457f 	.word	0x0800457f
 80044fc:	08004595 	.word	0x08004595
 8004500:	08004595 	.word	0x08004595
 8004504:	08004595 	.word	0x08004595
 8004508:	08004595 	.word	0x08004595
 800450c:	08004595 	.word	0x08004595
 8004510:	08004595 	.word	0x08004595
 8004514:	08004595 	.word	0x08004595
 8004518:	0800459d 	.word	0x0800459d
 800451c:	08004595 	.word	0x08004595
 8004520:	08004595 	.word	0x08004595
 8004524:	08004595 	.word	0x08004595
 8004528:	08004595 	.word	0x08004595
 800452c:	08004595 	.word	0x08004595
 8004530:	08004595 	.word	0x08004595
 8004534:	08004595 	.word	0x08004595
 8004538:	0800459d 	.word	0x0800459d
 800453c:	08004595 	.word	0x08004595
 8004540:	08004595 	.word	0x08004595
 8004544:	08004595 	.word	0x08004595
 8004548:	08004595 	.word	0x08004595
 800454c:	08004595 	.word	0x08004595
 8004550:	08004595 	.word	0x08004595
 8004554:	08004595 	.word	0x08004595
 8004558:	0800459d 	.word	0x0800459d
 800455c:	58024400 	.word	0x58024400
 8004560:	58024800 	.word	0x58024800
 8004564:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800456c:	3308      	adds	r3, #8
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 ffc5 	bl	8005500 <RCCEx_PLL2_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800457c:	e00f      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800457e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004582:	3328      	adds	r3, #40	@ 0x28
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f86c 	bl	8005664 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004592:	e004      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800459c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10b      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045a6:	4bc0      	ldr	r3, [pc, #768]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80045ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b6:	4abc      	ldr	r2, [pc, #752]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80045bc:	e003      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f002 0302 	and.w	r3, r2, #2
 80045d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80045dc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d043      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d824      	bhi.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80045f2:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004645 	.word	0x08004645
 80045fc:	08004611 	.word	0x08004611
 8004600:	08004627 	.word	0x08004627
 8004604:	08004645 	.word	0x08004645
 8004608:	08004645 	.word	0x08004645
 800460c:	08004645 	.word	0x08004645
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004614:	3308      	adds	r3, #8
 8004616:	2101      	movs	r1, #1
 8004618:	4618      	mov	r0, r3
 800461a:	f000 ff71 	bl	8005500 <RCCEx_PLL2_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004624:	e00f      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800462a:	3328      	adds	r3, #40	@ 0x28
 800462c:	2101      	movs	r1, #1
 800462e:	4618      	mov	r0, r3
 8004630:	f001 f818 	bl	8005664 <RCCEx_PLL3_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800463a:	e004      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004646:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10b      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800464e:	4b96      	ldr	r3, [pc, #600]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004652:	f023 0107 	bic.w	r1, r3, #7
 8004656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800465e:	4a92      	ldr	r2, [pc, #584]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004660:	430b      	orrs	r3, r1
 8004662:	6553      	str	r3, [r2, #84]	@ 0x54
 8004664:	e003      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800466a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800466e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f002 0304 	and.w	r3, r2, #4
 800467a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800467e:	2300      	movs	r3, #0
 8004680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004684:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004688:	460b      	mov	r3, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	d043      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800468e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004696:	2b05      	cmp	r3, #5
 8004698:	d824      	bhi.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800469a:	a201      	add	r2, pc, #4	@ (adr r2, 80046a0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046ed 	.word	0x080046ed
 80046a4:	080046b9 	.word	0x080046b9
 80046a8:	080046cf 	.word	0x080046cf
 80046ac:	080046ed 	.word	0x080046ed
 80046b0:	080046ed 	.word	0x080046ed
 80046b4:	080046ed 	.word	0x080046ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046bc:	3308      	adds	r3, #8
 80046be:	2101      	movs	r1, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 ff1d 	bl	8005500 <RCCEx_PLL2_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046cc:	e00f      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046d2:	3328      	adds	r3, #40	@ 0x28
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 ffc4 	bl	8005664 <RCCEx_PLL3_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046e2:	e004      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80046ea:	e000      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80046ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046f6:	4b6c      	ldr	r3, [pc, #432]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fa:	f023 0107 	bic.w	r1, r3, #7
 80046fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004706:	4a68      	ldr	r2, [pc, #416]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004708:	430b      	orrs	r3, r1
 800470a:	6593      	str	r3, [r2, #88]	@ 0x58
 800470c:	e003      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004712:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f002 0320 	and.w	r3, r2, #32
 8004722:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004726:	2300      	movs	r3, #0
 8004728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800472c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004730:	460b      	mov	r3, r1
 8004732:	4313      	orrs	r3, r2
 8004734:	d055      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800473a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800473e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004742:	d033      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004748:	d82c      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474e:	d02f      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004754:	d826      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800475a:	d02b      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800475c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004760:	d820      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004766:	d012      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800476c:	d81a      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d022      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004776:	d115      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800477c:	3308      	adds	r3, #8
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f000 febd 	bl	8005500 <RCCEx_PLL2_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800478c:	e015      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800478e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004792:	3328      	adds	r3, #40	@ 0x28
 8004794:	2102      	movs	r1, #2
 8004796:	4618      	mov	r0, r3
 8004798:	f000 ff64 	bl	8005664 <RCCEx_PLL3_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047a2:	e00a      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80047aa:	e006      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047ac:	bf00      	nop
 80047ae:	e004      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047b0:	bf00      	nop
 80047b2:	e002      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c2:	4b39      	ldr	r3, [pc, #228]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047d2:	4a35      	ldr	r2, [pc, #212]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80047d8:	e003      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80047ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047f2:	2300      	movs	r3, #0
 80047f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80047f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	d058      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800480a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800480e:	d033      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004810:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004814:	d82c      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800481a:	d02f      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800481c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004820:	d826      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004822:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004826:	d02b      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800482c:	d820      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800482e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004832:	d012      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004838:	d81a      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d022      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004842:	d115      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004848:	3308      	adds	r3, #8
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fe57 	bl	8005500 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004858:	e015      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800485a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800485e:	3328      	adds	r3, #40	@ 0x28
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fefe 	bl	8005664 <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800486e:	e00a      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004876:	e006      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004878:	bf00      	nop
 800487a:	e004      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800487c:	bf00      	nop
 800487e:	e002      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004886:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10e      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800488e:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004892:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800489a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800489e:	4a02      	ldr	r2, [pc, #8]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a4:	e006      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80048a6:	bf00      	nop
 80048a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80048c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80048ce:	460b      	mov	r3, r1
 80048d0:	4313      	orrs	r3, r2
 80048d2:	d055      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80048e0:	d033      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80048e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80048e6:	d82c      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ec:	d02f      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80048ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048f2:	d826      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80048f8:	d02b      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80048fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80048fe:	d820      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004900:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004904:	d012      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004906:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800490a:	d81a      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d022      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004914:	d115      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800491a:	3308      	adds	r3, #8
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fdee 	bl	8005500 <RCCEx_PLL2_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800492a:	e015      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004930:	3328      	adds	r3, #40	@ 0x28
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fe95 	bl	8005664 <RCCEx_PLL3_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004940:	e00a      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004948:	e006      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800494a:	bf00      	nop
 800494c:	e004      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800494e:	bf00      	nop
 8004950:	e002      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004952:	bf00      	nop
 8004954:	e000      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004960:	4ba1      	ldr	r3, [pc, #644]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004964:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800496c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004970:	4a9d      	ldr	r2, [pc, #628]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004972:	430b      	orrs	r3, r1
 8004974:	6593      	str	r3, [r2, #88]	@ 0x58
 8004976:	e003      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800497c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f002 0308 	and.w	r3, r2, #8
 800498c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004990:	2300      	movs	r3, #0
 8004992:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004996:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800499a:	460b      	mov	r3, r1
 800499c:	4313      	orrs	r3, r2
 800499e:	d01e      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b2:	3328      	adds	r3, #40	@ 0x28
 80049b4:	2102      	movs	r1, #2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fe54 	bl	8005664 <RCCEx_PLL3_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049c8:	4b87      	ldr	r3, [pc, #540]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d8:	4a83      	ldr	r2, [pc, #524]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049da:	430b      	orrs	r3, r1
 80049dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f002 0310 	and.w	r3, r2, #16
 80049ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049ee:	2300      	movs	r3, #0
 80049f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d01e      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a0a:	d10c      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a10:	3328      	adds	r3, #40	@ 0x28
 8004a12:	2102      	movs	r1, #2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fe25 	bl	8005664 <RCCEx_PLL3_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a26:	4b70      	ldr	r3, [pc, #448]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a36:	4a6c      	ldr	r2, [pc, #432]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004a48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d03e      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a68:	d022      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a6e:	d81b      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a78:	d00b      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004a7a:	e015      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a80:	3308      	adds	r3, #8
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fd3b 	bl	8005500 <RCCEx_PLL2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a90:	e00f      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a96:	3328      	adds	r3, #40	@ 0x28
 8004a98:	2102      	movs	r1, #2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fde2 	bl	8005664 <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aa6:	e004      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004aae:	e000      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aba:	4b4b      	ldr	r3, [pc, #300]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ac6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004aca:	4a47      	ldr	r2, [pc, #284]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004acc:	430b      	orrs	r3, r1
 8004ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ad0:	e003      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ad6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004ae6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ae8:	2300      	movs	r3, #0
 8004aea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004aec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004af0:	460b      	mov	r3, r1
 8004af2:	4313      	orrs	r3, r2
 8004af4:	d03b      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b02:	d01f      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004b04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b08:	d818      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0e:	d003      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004b10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b14:	d007      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004b16:	e011      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b18:	4b33      	ldr	r3, [pc, #204]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	4a32      	ldr	r2, [pc, #200]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b24:	e00f      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2a:	3328      	adds	r3, #40	@ 0x28
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fd98 	bl	8005664 <RCCEx_PLL3_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b3a:	e004      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b42:	e000      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10b      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b4e:	4b26      	ldr	r3, [pc, #152]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5e:	4a22      	ldr	r2, [pc, #136]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b64:	e003      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004b84:	460b      	mov	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	d034      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b98:	d007      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004b9a:	e011      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9c:	4b12      	ldr	r3, [pc, #72]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba0:	4a11      	ldr	r2, [pc, #68]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ba8:	e00e      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bae:	3308      	adds	r3, #8
 8004bb0:	2102      	movs	r1, #2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fca4 	bl	8005500 <RCCEx_PLL2_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bbe:	e003      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10d      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bd0:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bde:	4a02      	ldr	r2, [pc, #8]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004be4:	e006      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004be6:	bf00      	nop
 8004be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c02:	2300      	movs	r3, #0
 8004c04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	d00c      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c14:	3328      	adds	r3, #40	@ 0x28
 8004c16:	2102      	movs	r1, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fd23 	bl	8005664 <RCCEx_PLL3_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c36:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c38:	2300      	movs	r3, #0
 8004c3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c40:	460b      	mov	r3, r1
 8004c42:	4313      	orrs	r3, r2
 8004c44:	d038      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c52:	d018      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004c54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c58:	d811      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5e:	d014      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c64:	d80b      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d011      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c6e:	d106      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c70:	4bc3      	ldr	r3, [pc, #780]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c74:	4ac2      	ldr	r2, [pc, #776]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c7c:	e008      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c84:	e004      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c86:	bf00      	nop
 8004c88:	e002      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e000      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10b      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c98:	4bb9      	ldr	r3, [pc, #740]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca8:	4ab5      	ldr	r2, [pc, #724]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004caa:	430b      	orrs	r3, r1
 8004cac:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cae:	e003      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d009      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd4:	4baa      	ldr	r3, [pc, #680]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ce2:	4aa7      	ldr	r2, [pc, #668]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004cf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cfa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4313      	orrs	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d04:	4b9e      	ldr	r3, [pc, #632]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d08:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d12:	4a9b      	ldr	r2, [pc, #620]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d26:	2300      	movs	r3, #0
 8004d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4313      	orrs	r3, r2
 8004d32:	d009      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004d34:	4b92      	ldr	r3, [pc, #584]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d38:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d42:	4a8f      	ldr	r2, [pc, #572]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d56:	2300      	movs	r3, #0
 8004d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d64:	4b86      	ldr	r3, [pc, #536]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	4a85      	ldr	r2, [pc, #532]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d6e:	6113      	str	r3, [r2, #16]
 8004d70:	4b83      	ldr	r3, [pc, #524]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d72:	6919      	ldr	r1, [r3, #16]
 8004d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d7c:	4a80      	ldr	r2, [pc, #512]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d90:	2300      	movs	r3, #0
 8004d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d94:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d9e:	4b78      	ldr	r3, [pc, #480]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dac:	4a74      	ldr	r2, [pc, #464]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dae:	430b      	orrs	r3, r1
 8004db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dce:	4b6c      	ldr	r3, [pc, #432]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dde:	4a68      	ldr	r2, [pc, #416]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	2100      	movs	r1, #0
 8004dee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	d011      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e04:	3308      	adds	r3, #8
 8004e06:	2100      	movs	r1, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fb79 	bl	8005500 <RCCEx_PLL2_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004e14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	6239      	str	r1, [r7, #32]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	d011      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e44:	3308      	adds	r3, #8
 8004e46:	2101      	movs	r1, #1
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fb59 	bl	8005500 <RCCEx_PLL2_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004e54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	61b9      	str	r1, [r7, #24]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	d011      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e84:	3308      	adds	r3, #8
 8004e86:	2102      	movs	r1, #2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fb39 	bl	8005500 <RCCEx_PLL2_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004e94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ea0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	2100      	movs	r1, #0
 8004eae:	6139      	str	r1, [r7, #16]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	d011      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec4:	3328      	adds	r3, #40	@ 0x28
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fbcb 	bl	8005664 <RCCEx_PLL3_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ee0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	2100      	movs	r1, #0
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004efa:	460b      	mov	r3, r1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	d011      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f04:	3328      	adds	r3, #40	@ 0x28
 8004f06:	2101      	movs	r1, #1
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fbab 	bl	8005664 <RCCEx_PLL3_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004f14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	6039      	str	r1, [r7, #0]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	d011      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f44:	3328      	adds	r3, #40	@ 0x28
 8004f46:	2102      	movs	r1, #2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fb8b 	bl	8005664 <RCCEx_PLL3_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004f54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004f64:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e000      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7e:	bf00      	nop
 8004f80:	58024400 	.word	0x58024400

08004f84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004f88:	f7fe fde2 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	4904      	ldr	r1, [pc, #16]	@ (8004fac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f9a:	5ccb      	ldrb	r3, [r1, r3]
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	08007a78 	.word	0x08007a78

08004fb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b089      	sub	sp, #36	@ 0x24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb8:	4ba1      	ldr	r3, [pc, #644]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fc2:	4b9f      	ldr	r3, [pc, #636]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	0b1b      	lsrs	r3, r3, #12
 8004fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fce:	4b9c      	ldr	r3, [pc, #624]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fda:	4b99      	ldr	r3, [pc, #612]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	08db      	lsrs	r3, r3, #3
 8004fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8111 	beq.w	8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b02      	cmp	r3, #2
 8005002:	f000 8083 	beq.w	800510c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b02      	cmp	r3, #2
 800500a:	f200 80a1 	bhi.w	8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d056      	beq.n	80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800501a:	e099      	b.n	8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800501c:	4b88      	ldr	r3, [pc, #544]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d02d      	beq.n	8005084 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005028:	4b85      	ldr	r3, [pc, #532]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	08db      	lsrs	r3, r3, #3
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	4a84      	ldr	r2, [pc, #528]	@ (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
 8005038:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005052:	4b7b      	ldr	r3, [pc, #492]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005062:	ed97 6a03 	vldr	s12, [r7, #12]
 8005066:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005082:	e087      	b.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005096:	4b6a      	ldr	r3, [pc, #424]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050c6:	e065      	b.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	4b59      	ldr	r3, [pc, #356]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800510a:	e043      	b.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b48      	ldr	r3, [pc, #288]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005132:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514e:	e021      	b.n	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b37      	ldr	r3, [pc, #220]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a03 	vldr	s12, [r7, #12]
 8005176:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005192:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005194:	4b2a      	ldr	r3, [pc, #168]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005198:	0a5b      	lsrs	r3, r3, #9
 800519a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80051b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ba:	ee17 2a90 	vmov	r2, s15
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80051c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80051e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e8:	ee17 2a90 	vmov	r2, s15
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80051f0:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f4:	0e1b      	lsrs	r3, r3, #24
 80051f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800520a:	edd7 6a07 	vldr	s13, [r7, #28]
 800520e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005216:	ee17 2a90 	vmov	r2, s15
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800521e:	e008      	b.n	8005232 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	609a      	str	r2, [r3, #8]
}
 8005232:	bf00      	nop
 8005234:	3724      	adds	r7, #36	@ 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
 8005244:	03d09000 	.word	0x03d09000
 8005248:	46000000 	.word	0x46000000
 800524c:	4c742400 	.word	0x4c742400
 8005250:	4a742400 	.word	0x4a742400
 8005254:	4bb71b00 	.word	0x4bb71b00

08005258 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005258:	b480      	push	{r7}
 800525a:	b089      	sub	sp, #36	@ 0x24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005260:	4ba1      	ldr	r3, [pc, #644]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800526a:	4b9f      	ldr	r3, [pc, #636]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	0d1b      	lsrs	r3, r3, #20
 8005270:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005274:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005276:	4b9c      	ldr	r3, [pc, #624]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	0a1b      	lsrs	r3, r3, #8
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005282:	4b99      	ldr	r3, [pc, #612]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	08db      	lsrs	r3, r3, #3
 8005288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8111 	beq.w	80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	f000 8083 	beq.w	80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	f200 80a1 	bhi.w	80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d056      	beq.n	8005370 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052c2:	e099      	b.n	80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c4:	4b88      	ldr	r3, [pc, #544]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02d      	beq.n	800532c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052d0:	4b85      	ldr	r3, [pc, #532]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	08db      	lsrs	r3, r3, #3
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	4a84      	ldr	r2, [pc, #528]	@ (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
 80052e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fa:	4b7b      	ldr	r3, [pc, #492]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530a:	ed97 6a03 	vldr	s12, [r7, #12]
 800530e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800531e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005326:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800532a:	e087      	b.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b6a      	ldr	r3, [pc, #424]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005352:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800536e:	e065      	b.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b59      	ldr	r3, [pc, #356]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a03 	vldr	s12, [r7, #12]
 8005396:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053b2:	e043      	b.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c6:	4b48      	ldr	r3, [pc, #288]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f6:	e021      	b.n	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b37      	ldr	r3, [pc, #220]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a03 	vldr	s12, [r7, #12]
 800541e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800543a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800543c:	4b2a      	ldr	r3, [pc, #168]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	0a5b      	lsrs	r3, r3, #9
 8005442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005456:	edd7 6a07 	vldr	s13, [r7, #28]
 800545a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800545e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005462:	ee17 2a90 	vmov	r2, s15
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800546a:	4b1f      	ldr	r3, [pc, #124]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546e:	0c1b      	lsrs	r3, r3, #16
 8005470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005480:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005484:	edd7 6a07 	vldr	s13, [r7, #28]
 8005488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800548c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005490:	ee17 2a90 	vmov	r2, s15
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005498:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	0e1b      	lsrs	r3, r3, #24
 800549e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054be:	ee17 2a90 	vmov	r2, s15
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054c6:	e008      	b.n	80054da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	609a      	str	r2, [r3, #8]
}
 80054da:	bf00      	nop
 80054dc:	3724      	adds	r7, #36	@ 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	58024400 	.word	0x58024400
 80054ec:	03d09000 	.word	0x03d09000
 80054f0:	46000000 	.word	0x46000000
 80054f4:	4c742400 	.word	0x4c742400
 80054f8:	4a742400 	.word	0x4a742400
 80054fc:	4bb71b00 	.word	0x4bb71b00

08005500 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800550e:	4b53      	ldr	r3, [pc, #332]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b03      	cmp	r3, #3
 8005518:	d101      	bne.n	800551e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e099      	b.n	8005652 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800551e:	4b4f      	ldr	r3, [pc, #316]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a4e      	ldr	r2, [pc, #312]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005524:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800552a:	f7fc fb6d 	bl	8001c08 <HAL_GetTick>
 800552e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005530:	e008      	b.n	8005544 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005532:	f7fc fb69 	bl	8001c08 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e086      	b.n	8005652 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005544:	4b45      	ldr	r3, [pc, #276]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f0      	bne.n	8005532 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005550:	4b42      	ldr	r3, [pc, #264]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005554:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	031b      	lsls	r3, r3, #12
 800555e:	493f      	ldr	r1, [pc, #252]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005560:	4313      	orrs	r3, r2
 8005562:	628b      	str	r3, [r1, #40]	@ 0x28
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	3b01      	subs	r3, #1
 800556a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	3b01      	subs	r3, #1
 8005574:	025b      	lsls	r3, r3, #9
 8005576:	b29b      	uxth	r3, r3
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	3b01      	subs	r3, #1
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	3b01      	subs	r3, #1
 800558e:	061b      	lsls	r3, r3, #24
 8005590:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005594:	4931      	ldr	r1, [pc, #196]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005596:	4313      	orrs	r3, r2
 8005598:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800559a:	4b30      	ldr	r3, [pc, #192]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	492d      	ldr	r1, [pc, #180]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055ac:	4b2b      	ldr	r3, [pc, #172]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	f023 0220 	bic.w	r2, r3, #32
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	4928      	ldr	r1, [pc, #160]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055be:	4b27      	ldr	r3, [pc, #156]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c2:	4a26      	ldr	r2, [pc, #152]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055c4:	f023 0310 	bic.w	r3, r3, #16
 80055c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055ca:	4b24      	ldr	r3, [pc, #144]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055ce:	4b24      	ldr	r3, [pc, #144]	@ (8005660 <RCCEx_PLL2_Config+0x160>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	69d2      	ldr	r2, [r2, #28]
 80055d6:	00d2      	lsls	r2, r2, #3
 80055d8:	4920      	ldr	r1, [pc, #128]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055de:	4b1f      	ldr	r3, [pc, #124]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	4a1e      	ldr	r2, [pc, #120]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055e4:	f043 0310 	orr.w	r3, r3, #16
 80055e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d106      	bne.n	80055fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055f0:	4b1a      	ldr	r3, [pc, #104]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f4:	4a19      	ldr	r2, [pc, #100]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 80055f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80055fc:	e00f      	b.n	800561e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d106      	bne.n	8005612 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005604:	4b15      	ldr	r3, [pc, #84]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	4a14      	ldr	r2, [pc, #80]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 800560a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800560e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005610:	e005      	b.n	800561e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005612:	4b12      	ldr	r3, [pc, #72]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	4a11      	ldr	r2, [pc, #68]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005618:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800561c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800561e:	4b0f      	ldr	r3, [pc, #60]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a0e      	ldr	r2, [pc, #56]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005624:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800562a:	f7fc faed 	bl	8001c08 <HAL_GetTick>
 800562e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005630:	e008      	b.n	8005644 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005632:	f7fc fae9 	bl	8001c08 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e006      	b.n	8005652 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005644:	4b05      	ldr	r3, [pc, #20]	@ (800565c <RCCEx_PLL2_Config+0x15c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	58024400 	.word	0x58024400
 8005660:	ffff0007 	.word	0xffff0007

08005664 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005672:	4b53      	ldr	r3, [pc, #332]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b03      	cmp	r3, #3
 800567c:	d101      	bne.n	8005682 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e099      	b.n	80057b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005682:	4b4f      	ldr	r3, [pc, #316]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a4e      	ldr	r2, [pc, #312]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800568c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568e:	f7fc fabb 	bl	8001c08 <HAL_GetTick>
 8005692:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005694:	e008      	b.n	80056a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005696:	f7fc fab7 	bl	8001c08 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e086      	b.n	80057b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056a8:	4b45      	ldr	r3, [pc, #276]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056b4:	4b42      	ldr	r3, [pc, #264]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	051b      	lsls	r3, r3, #20
 80056c2:	493f      	ldr	r1, [pc, #252]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	025b      	lsls	r3, r3, #9
 80056da:	b29b      	uxth	r3, r3
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	041b      	lsls	r3, r3, #16
 80056e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	061b      	lsls	r3, r3, #24
 80056f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056f8:	4931      	ldr	r1, [pc, #196]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056fe:	4b30      	ldr	r3, [pc, #192]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005702:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	492d      	ldr	r1, [pc, #180]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 800570c:	4313      	orrs	r3, r2
 800570e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005710:	4b2b      	ldr	r3, [pc, #172]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	4928      	ldr	r1, [pc, #160]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005722:	4b27      	ldr	r3, [pc, #156]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	4a26      	ldr	r2, [pc, #152]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800572c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800572e:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005732:	4b24      	ldr	r3, [pc, #144]	@ (80057c4 <RCCEx_PLL3_Config+0x160>)
 8005734:	4013      	ands	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	69d2      	ldr	r2, [r2, #28]
 800573a:	00d2      	lsls	r2, r2, #3
 800573c:	4920      	ldr	r1, [pc, #128]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 800573e:	4313      	orrs	r3, r2
 8005740:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005742:	4b1f      	ldr	r3, [pc, #124]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	4a1e      	ldr	r2, [pc, #120]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800574c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d106      	bne.n	8005762 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005754:	4b1a      	ldr	r3, [pc, #104]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	4a19      	ldr	r2, [pc, #100]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 800575a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800575e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005760:	e00f      	b.n	8005782 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005768:	4b15      	ldr	r3, [pc, #84]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	4a14      	ldr	r2, [pc, #80]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 800576e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005772:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005774:	e005      	b.n	8005782 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005776:	4b12      	ldr	r3, [pc, #72]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	4a11      	ldr	r2, [pc, #68]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 800577c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005780:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005782:	4b0f      	ldr	r3, [pc, #60]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a0e      	ldr	r2, [pc, #56]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 8005788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800578c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578e:	f7fc fa3b 	bl	8001c08 <HAL_GetTick>
 8005792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005794:	e008      	b.n	80057a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005796:	f7fc fa37 	bl	8001c08 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e006      	b.n	80057b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <RCCEx_PLL3_Config+0x15c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	58024400 	.word	0x58024400
 80057c4:	ffff0007 	.word	0xffff0007

080057c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e10f      	b.n	80059fa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a87      	ldr	r2, [pc, #540]	@ (8005a04 <HAL_SPI_Init+0x23c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00f      	beq.n	800580a <HAL_SPI_Init+0x42>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a86      	ldr	r2, [pc, #536]	@ (8005a08 <HAL_SPI_Init+0x240>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00a      	beq.n	800580a <HAL_SPI_Init+0x42>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a84      	ldr	r2, [pc, #528]	@ (8005a0c <HAL_SPI_Init+0x244>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d005      	beq.n	800580a <HAL_SPI_Init+0x42>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b0f      	cmp	r3, #15
 8005804:	d901      	bls.n	800580a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e0f7      	b.n	80059fa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f900 	bl	8005a10 <SPI_GetPacketSize>
 8005810:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a7b      	ldr	r2, [pc, #492]	@ (8005a04 <HAL_SPI_Init+0x23c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00c      	beq.n	8005836 <HAL_SPI_Init+0x6e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a79      	ldr	r2, [pc, #484]	@ (8005a08 <HAL_SPI_Init+0x240>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d007      	beq.n	8005836 <HAL_SPI_Init+0x6e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a78      	ldr	r2, [pc, #480]	@ (8005a0c <HAL_SPI_Init+0x244>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d002      	beq.n	8005836 <HAL_SPI_Init+0x6e>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b08      	cmp	r3, #8
 8005834:	d811      	bhi.n	800585a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800583a:	4a72      	ldr	r2, [pc, #456]	@ (8005a04 <HAL_SPI_Init+0x23c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a70      	ldr	r2, [pc, #448]	@ (8005a08 <HAL_SPI_Init+0x240>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_SPI_Init+0x8c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a6f      	ldr	r2, [pc, #444]	@ (8005a0c <HAL_SPI_Init+0x244>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d104      	bne.n	800585e <HAL_SPI_Init+0x96>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b10      	cmp	r3, #16
 8005858:	d901      	bls.n	800585e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e0cd      	b.n	80059fa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fb fac4 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800589a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058a4:	d119      	bne.n	80058da <HAL_SPI_Init+0x112>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058ae:	d103      	bne.n	80058b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10c      	bne.n	80058da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80058c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058c8:	d107      	bne.n	80058da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00f      	beq.n	8005906 <HAL_SPI_Init+0x13e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b06      	cmp	r3, #6
 80058ec:	d90b      	bls.n	8005906 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e007      	b.n	8005916 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005914:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69da      	ldr	r2, [r3, #28]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591e:	431a      	orrs	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005928:	ea42 0103 	orr.w	r1, r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005976:	ea42 0103 	orr.w	r1, r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d113      	bne.n	80059b6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40013000 	.word	0x40013000
 8005a08:	40003800 	.word	0x40003800
 8005a0c:	40003c00 	.word	0x40003c00

08005a10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3307      	adds	r3, #7
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e049      	b.n	8005aec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fb fd63 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 f9a1 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e049      	b.n	8005b9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fb fcbe 	bl	800149c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f000 f94a 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e0ff      	b.n	8005dc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b14      	cmp	r3, #20
 8005bce:	f200 80f0 	bhi.w	8005db2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c2d 	.word	0x08005c2d
 8005bdc:	08005db3 	.word	0x08005db3
 8005be0:	08005db3 	.word	0x08005db3
 8005be4:	08005db3 	.word	0x08005db3
 8005be8:	08005c6d 	.word	0x08005c6d
 8005bec:	08005db3 	.word	0x08005db3
 8005bf0:	08005db3 	.word	0x08005db3
 8005bf4:	08005db3 	.word	0x08005db3
 8005bf8:	08005caf 	.word	0x08005caf
 8005bfc:	08005db3 	.word	0x08005db3
 8005c00:	08005db3 	.word	0x08005db3
 8005c04:	08005db3 	.word	0x08005db3
 8005c08:	08005cef 	.word	0x08005cef
 8005c0c:	08005db3 	.word	0x08005db3
 8005c10:	08005db3 	.word	0x08005db3
 8005c14:	08005db3 	.word	0x08005db3
 8005c18:	08005d31 	.word	0x08005d31
 8005c1c:	08005db3 	.word	0x08005db3
 8005c20:	08005db3 	.word	0x08005db3
 8005c24:	08005db3 	.word	0x08005db3
 8005c28:	08005d71 	.word	0x08005d71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f970 	bl	8005f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0208 	orr.w	r2, r2, #8
 8005c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0204 	bic.w	r2, r2, #4
 8005c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6999      	ldr	r1, [r3, #24]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	619a      	str	r2, [r3, #24]
      break;
 8005c6a:	e0a5      	b.n	8005db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f9e0 	bl	8006038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6999      	ldr	r1, [r3, #24]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	619a      	str	r2, [r3, #24]
      break;
 8005cac:	e084      	b.n	8005db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fa49 	bl	800614c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0208 	orr.w	r2, r2, #8
 8005cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0204 	bic.w	r2, r2, #4
 8005cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69d9      	ldr	r1, [r3, #28]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	61da      	str	r2, [r3, #28]
      break;
 8005cec:	e064      	b.n	8005db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fab1 	bl	800625c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69d9      	ldr	r1, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	021a      	lsls	r2, r3, #8
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	61da      	str	r2, [r3, #28]
      break;
 8005d2e:	e043      	b.n	8005db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fafa 	bl	8006330 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0208 	orr.w	r2, r2, #8
 8005d4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d6e:	e023      	b.n	8005db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fb3e 	bl	80063f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005db0:	e002      	b.n	8005db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	75fb      	strb	r3, [r7, #23]
      break;
 8005db6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop

08005dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a46      	ldr	r2, [pc, #280]	@ (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dea:	d00f      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a43      	ldr	r2, [pc, #268]	@ (8005efc <TIM_Base_SetConfig+0x130>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a42      	ldr	r2, [pc, #264]	@ (8005f00 <TIM_Base_SetConfig+0x134>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a41      	ldr	r2, [pc, #260]	@ (8005f04 <TIM_Base_SetConfig+0x138>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a40      	ldr	r2, [pc, #256]	@ (8005f08 <TIM_Base_SetConfig+0x13c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a35      	ldr	r2, [pc, #212]	@ (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01f      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2c:	d01b      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a32      	ldr	r2, [pc, #200]	@ (8005efc <TIM_Base_SetConfig+0x130>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d017      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a31      	ldr	r2, [pc, #196]	@ (8005f00 <TIM_Base_SetConfig+0x134>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a30      	ldr	r2, [pc, #192]	@ (8005f04 <TIM_Base_SetConfig+0x138>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00f      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2f      	ldr	r2, [pc, #188]	@ (8005f08 <TIM_Base_SetConfig+0x13c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00b      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2e      	ldr	r2, [pc, #184]	@ (8005f0c <TIM_Base_SetConfig+0x140>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2d      	ldr	r2, [pc, #180]	@ (8005f10 <TIM_Base_SetConfig+0x144>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2c      	ldr	r2, [pc, #176]	@ (8005f14 <TIM_Base_SetConfig+0x148>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d108      	bne.n	8005e78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a16      	ldr	r2, [pc, #88]	@ (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	@ (8005f08 <TIM_Base_SetConfig+0x13c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a17      	ldr	r2, [pc, #92]	@ (8005f0c <TIM_Base_SetConfig+0x140>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a16      	ldr	r2, [pc, #88]	@ (8005f10 <TIM_Base_SetConfig+0x144>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a15      	ldr	r2, [pc, #84]	@ (8005f14 <TIM_Base_SetConfig+0x148>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d103      	bne.n	8005ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d105      	bne.n	8005eea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	611a      	str	r2, [r3, #16]
  }
}
 8005eea:	bf00      	nop
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40010000 	.word	0x40010000
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800
 8005f04:	40000c00 	.word	0x40000c00
 8005f08:	40010400 	.word	0x40010400
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	40014400 	.word	0x40014400
 8005f14:	40014800 	.word	0x40014800

08005f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f023 0201 	bic.w	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4b37      	ldr	r3, [pc, #220]	@ (8006020 <TIM_OC1_SetConfig+0x108>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f023 0302 	bic.w	r3, r3, #2
 8005f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8006024 <TIM_OC1_SetConfig+0x10c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00f      	beq.n	8005f94 <TIM_OC1_SetConfig+0x7c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a2c      	ldr	r2, [pc, #176]	@ (8006028 <TIM_OC1_SetConfig+0x110>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00b      	beq.n	8005f94 <TIM_OC1_SetConfig+0x7c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800602c <TIM_OC1_SetConfig+0x114>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d007      	beq.n	8005f94 <TIM_OC1_SetConfig+0x7c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a2a      	ldr	r2, [pc, #168]	@ (8006030 <TIM_OC1_SetConfig+0x118>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_OC1_SetConfig+0x7c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a29      	ldr	r2, [pc, #164]	@ (8006034 <TIM_OC1_SetConfig+0x11c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d10c      	bne.n	8005fae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0308 	bic.w	r3, r3, #8
 8005f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 0304 	bic.w	r3, r3, #4
 8005fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8006024 <TIM_OC1_SetConfig+0x10c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00f      	beq.n	8005fd6 <TIM_OC1_SetConfig+0xbe>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006028 <TIM_OC1_SetConfig+0x110>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00b      	beq.n	8005fd6 <TIM_OC1_SetConfig+0xbe>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800602c <TIM_OC1_SetConfig+0x114>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d007      	beq.n	8005fd6 <TIM_OC1_SetConfig+0xbe>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a19      	ldr	r2, [pc, #100]	@ (8006030 <TIM_OC1_SetConfig+0x118>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC1_SetConfig+0xbe>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a18      	ldr	r2, [pc, #96]	@ (8006034 <TIM_OC1_SetConfig+0x11c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d111      	bne.n	8005ffa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	621a      	str	r2, [r3, #32]
}
 8006014:	bf00      	nop
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	fffeff8f 	.word	0xfffeff8f
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800

08006038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f023 0210 	bic.w	r2, r3, #16
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4b34      	ldr	r3, [pc, #208]	@ (8006134 <TIM_OC2_SetConfig+0xfc>)
 8006064:	4013      	ands	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800606e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f023 0320 	bic.w	r3, r3, #32
 8006082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a29      	ldr	r2, [pc, #164]	@ (8006138 <TIM_OC2_SetConfig+0x100>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_OC2_SetConfig+0x68>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a28      	ldr	r2, [pc, #160]	@ (800613c <TIM_OC2_SetConfig+0x104>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d10d      	bne.n	80060bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a1e      	ldr	r2, [pc, #120]	@ (8006138 <TIM_OC2_SetConfig+0x100>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00f      	beq.n	80060e4 <TIM_OC2_SetConfig+0xac>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a1d      	ldr	r2, [pc, #116]	@ (800613c <TIM_OC2_SetConfig+0x104>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00b      	beq.n	80060e4 <TIM_OC2_SetConfig+0xac>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006140 <TIM_OC2_SetConfig+0x108>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d007      	beq.n	80060e4 <TIM_OC2_SetConfig+0xac>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006144 <TIM_OC2_SetConfig+0x10c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_OC2_SetConfig+0xac>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1a      	ldr	r2, [pc, #104]	@ (8006148 <TIM_OC2_SetConfig+0x110>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d113      	bne.n	800610c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	feff8fff 	.word	0xfeff8fff
 8006138:	40010000 	.word	0x40010000
 800613c:	40010400 	.word	0x40010400
 8006140:	40014000 	.word	0x40014000
 8006144:	40014400 	.word	0x40014400
 8006148:	40014800 	.word	0x40014800

0800614c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4b33      	ldr	r3, [pc, #204]	@ (8006244 <TIM_OC3_SetConfig+0xf8>)
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a28      	ldr	r2, [pc, #160]	@ (8006248 <TIM_OC3_SetConfig+0xfc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d003      	beq.n	80061b2 <TIM_OC3_SetConfig+0x66>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a27      	ldr	r2, [pc, #156]	@ (800624c <TIM_OC3_SetConfig+0x100>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10d      	bne.n	80061ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <TIM_OC3_SetConfig+0xfc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00f      	beq.n	80061f6 <TIM_OC3_SetConfig+0xaa>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a1c      	ldr	r2, [pc, #112]	@ (800624c <TIM_OC3_SetConfig+0x100>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00b      	beq.n	80061f6 <TIM_OC3_SetConfig+0xaa>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006250 <TIM_OC3_SetConfig+0x104>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d007      	beq.n	80061f6 <TIM_OC3_SetConfig+0xaa>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006254 <TIM_OC3_SetConfig+0x108>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <TIM_OC3_SetConfig+0xaa>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a19      	ldr	r2, [pc, #100]	@ (8006258 <TIM_OC3_SetConfig+0x10c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d113      	bne.n	800621e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	621a      	str	r2, [r3, #32]
}
 8006238:	bf00      	nop
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	fffeff8f 	.word	0xfffeff8f
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800

0800625c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4b24      	ldr	r3, [pc, #144]	@ (8006318 <TIM_OC4_SetConfig+0xbc>)
 8006288:	4013      	ands	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	031b      	lsls	r3, r3, #12
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a19      	ldr	r2, [pc, #100]	@ (800631c <TIM_OC4_SetConfig+0xc0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00f      	beq.n	80062dc <TIM_OC4_SetConfig+0x80>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a18      	ldr	r2, [pc, #96]	@ (8006320 <TIM_OC4_SetConfig+0xc4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00b      	beq.n	80062dc <TIM_OC4_SetConfig+0x80>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a17      	ldr	r2, [pc, #92]	@ (8006324 <TIM_OC4_SetConfig+0xc8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d007      	beq.n	80062dc <TIM_OC4_SetConfig+0x80>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a16      	ldr	r2, [pc, #88]	@ (8006328 <TIM_OC4_SetConfig+0xcc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_OC4_SetConfig+0x80>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a15      	ldr	r2, [pc, #84]	@ (800632c <TIM_OC4_SetConfig+0xd0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d109      	bne.n	80062f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	feff8fff 	.word	0xfeff8fff
 800631c:	40010000 	.word	0x40010000
 8006320:	40010400 	.word	0x40010400
 8006324:	40014000 	.word	0x40014000
 8006328:	40014400 	.word	0x40014400
 800632c:	40014800 	.word	0x40014800

08006330 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4b21      	ldr	r3, [pc, #132]	@ (80063e0 <TIM_OC5_SetConfig+0xb0>)
 800635c:	4013      	ands	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006370:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	041b      	lsls	r3, r3, #16
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a18      	ldr	r2, [pc, #96]	@ (80063e4 <TIM_OC5_SetConfig+0xb4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00f      	beq.n	80063a6 <TIM_OC5_SetConfig+0x76>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a17      	ldr	r2, [pc, #92]	@ (80063e8 <TIM_OC5_SetConfig+0xb8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00b      	beq.n	80063a6 <TIM_OC5_SetConfig+0x76>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a16      	ldr	r2, [pc, #88]	@ (80063ec <TIM_OC5_SetConfig+0xbc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d007      	beq.n	80063a6 <TIM_OC5_SetConfig+0x76>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a15      	ldr	r2, [pc, #84]	@ (80063f0 <TIM_OC5_SetConfig+0xc0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d003      	beq.n	80063a6 <TIM_OC5_SetConfig+0x76>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a14      	ldr	r2, [pc, #80]	@ (80063f4 <TIM_OC5_SetConfig+0xc4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d109      	bne.n	80063ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	621a      	str	r2, [r3, #32]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	fffeff8f 	.word	0xfffeff8f
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40010400 	.word	0x40010400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40014400 	.word	0x40014400
 80063f4:	40014800 	.word	0x40014800

080063f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4b22      	ldr	r3, [pc, #136]	@ (80064ac <TIM_OC6_SetConfig+0xb4>)
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800643a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	051b      	lsls	r3, r3, #20
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a19      	ldr	r2, [pc, #100]	@ (80064b0 <TIM_OC6_SetConfig+0xb8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00f      	beq.n	8006470 <TIM_OC6_SetConfig+0x78>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a18      	ldr	r2, [pc, #96]	@ (80064b4 <TIM_OC6_SetConfig+0xbc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00b      	beq.n	8006470 <TIM_OC6_SetConfig+0x78>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a17      	ldr	r2, [pc, #92]	@ (80064b8 <TIM_OC6_SetConfig+0xc0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d007      	beq.n	8006470 <TIM_OC6_SetConfig+0x78>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a16      	ldr	r2, [pc, #88]	@ (80064bc <TIM_OC6_SetConfig+0xc4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_OC6_SetConfig+0x78>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a15      	ldr	r2, [pc, #84]	@ (80064c0 <TIM_OC6_SetConfig+0xc8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d109      	bne.n	8006484 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006476:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	029b      	lsls	r3, r3, #10
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	621a      	str	r2, [r3, #32]
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	feff8fff 	.word	0xfeff8fff
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40010400 	.word	0x40010400
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40014400 	.word	0x40014400
 80064c0:	40014800 	.word	0x40014800

080064c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064d8:	2302      	movs	r3, #2
 80064da:	e06d      	b.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a30      	ldr	r2, [pc, #192]	@ (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d004      	beq.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a2f      	ldr	r2, [pc, #188]	@ (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d108      	bne.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006516:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a20      	ldr	r2, [pc, #128]	@ (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d022      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800654e:	d01d      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1d      	ldr	r2, [pc, #116]	@ (80065cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d018      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1c      	ldr	r2, [pc, #112]	@ (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1a      	ldr	r2, [pc, #104]	@ (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00e      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a15      	ldr	r2, [pc, #84]	@ (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d009      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a16      	ldr	r2, [pc, #88]	@ (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a15      	ldr	r2, [pc, #84]	@ (80065dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d10c      	bne.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006592:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	4313      	orrs	r3, r2
 800659c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	40010000 	.word	0x40010000
 80065c8:	40010400 	.word	0x40010400
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00
 80065d8:	40001800 	.word	0x40001800
 80065dc:	40014000 	.word	0x40014000

080065e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e042      	b.n	8006678 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7fb f947 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2224      	movs	r2, #36	@ 0x24
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fe94 	bl	8007358 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f825 	bl	8006680 <UART_SetConfig>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e01b      	b.n	8006678 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800664e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800665e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 ff13 	bl	800749c <UART_CheckIdleState>
 8006676:	4603      	mov	r3, r0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006684:	b092      	sub	sp, #72	@ 0x48
 8006686:	af00      	add	r7, sp, #0
 8006688:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	431a      	orrs	r2, r3
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	431a      	orrs	r2, r3
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4bbe      	ldr	r3, [pc, #760]	@ (80069a8 <UART_SetConfig+0x328>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	6812      	ldr	r2, [r2, #0]
 80066b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4ab3      	ldr	r2, [pc, #716]	@ (80069ac <UART_SetConfig+0x32c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d004      	beq.n	80066ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066e8:	4313      	orrs	r3, r2
 80066ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	4baf      	ldr	r3, [pc, #700]	@ (80069b0 <UART_SetConfig+0x330>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	6812      	ldr	r2, [r2, #0]
 80066fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006706:	f023 010f 	bic.w	r1, r3, #15
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4aa6      	ldr	r2, [pc, #664]	@ (80069b4 <UART_SetConfig+0x334>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d177      	bne.n	8006810 <UART_SetConfig+0x190>
 8006720:	4ba5      	ldr	r3, [pc, #660]	@ (80069b8 <UART_SetConfig+0x338>)
 8006722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006724:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006728:	2b28      	cmp	r3, #40	@ 0x28
 800672a:	d86d      	bhi.n	8006808 <UART_SetConfig+0x188>
 800672c:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <UART_SetConfig+0xb4>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	080067d9 	.word	0x080067d9
 8006738:	08006809 	.word	0x08006809
 800673c:	08006809 	.word	0x08006809
 8006740:	08006809 	.word	0x08006809
 8006744:	08006809 	.word	0x08006809
 8006748:	08006809 	.word	0x08006809
 800674c:	08006809 	.word	0x08006809
 8006750:	08006809 	.word	0x08006809
 8006754:	080067e1 	.word	0x080067e1
 8006758:	08006809 	.word	0x08006809
 800675c:	08006809 	.word	0x08006809
 8006760:	08006809 	.word	0x08006809
 8006764:	08006809 	.word	0x08006809
 8006768:	08006809 	.word	0x08006809
 800676c:	08006809 	.word	0x08006809
 8006770:	08006809 	.word	0x08006809
 8006774:	080067e9 	.word	0x080067e9
 8006778:	08006809 	.word	0x08006809
 800677c:	08006809 	.word	0x08006809
 8006780:	08006809 	.word	0x08006809
 8006784:	08006809 	.word	0x08006809
 8006788:	08006809 	.word	0x08006809
 800678c:	08006809 	.word	0x08006809
 8006790:	08006809 	.word	0x08006809
 8006794:	080067f1 	.word	0x080067f1
 8006798:	08006809 	.word	0x08006809
 800679c:	08006809 	.word	0x08006809
 80067a0:	08006809 	.word	0x08006809
 80067a4:	08006809 	.word	0x08006809
 80067a8:	08006809 	.word	0x08006809
 80067ac:	08006809 	.word	0x08006809
 80067b0:	08006809 	.word	0x08006809
 80067b4:	080067f9 	.word	0x080067f9
 80067b8:	08006809 	.word	0x08006809
 80067bc:	08006809 	.word	0x08006809
 80067c0:	08006809 	.word	0x08006809
 80067c4:	08006809 	.word	0x08006809
 80067c8:	08006809 	.word	0x08006809
 80067cc:	08006809 	.word	0x08006809
 80067d0:	08006809 	.word	0x08006809
 80067d4:	08006801 	.word	0x08006801
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067de:	e326      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80067e0:	2304      	movs	r3, #4
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e322      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80067e8:	2308      	movs	r3, #8
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e31e      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f6:	e31a      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80067f8:	2320      	movs	r3, #32
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e316      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006800:	2340      	movs	r3, #64	@ 0x40
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e312      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006808:	2380      	movs	r3, #128	@ 0x80
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e30e      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a69      	ldr	r2, [pc, #420]	@ (80069bc <UART_SetConfig+0x33c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d130      	bne.n	800687c <UART_SetConfig+0x1fc>
 800681a:	4b67      	ldr	r3, [pc, #412]	@ (80069b8 <UART_SetConfig+0x338>)
 800681c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	2b05      	cmp	r3, #5
 8006824:	d826      	bhi.n	8006874 <UART_SetConfig+0x1f4>
 8006826:	a201      	add	r2, pc, #4	@ (adr r2, 800682c <UART_SetConfig+0x1ac>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	08006845 	.word	0x08006845
 8006830:	0800684d 	.word	0x0800684d
 8006834:	08006855 	.word	0x08006855
 8006838:	0800685d 	.word	0x0800685d
 800683c:	08006865 	.word	0x08006865
 8006840:	0800686d 	.word	0x0800686d
 8006844:	2300      	movs	r3, #0
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684a:	e2f0      	b.n	8006e2e <UART_SetConfig+0x7ae>
 800684c:	2304      	movs	r3, #4
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e2ec      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006854:	2308      	movs	r3, #8
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e2e8      	b.n	8006e2e <UART_SetConfig+0x7ae>
 800685c:	2310      	movs	r3, #16
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e2e4      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006864:	2320      	movs	r3, #32
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e2e0      	b.n	8006e2e <UART_SetConfig+0x7ae>
 800686c:	2340      	movs	r3, #64	@ 0x40
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006872:	e2dc      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006874:	2380      	movs	r3, #128	@ 0x80
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687a:	e2d8      	b.n	8006e2e <UART_SetConfig+0x7ae>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a4f      	ldr	r2, [pc, #316]	@ (80069c0 <UART_SetConfig+0x340>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d130      	bne.n	80068e8 <UART_SetConfig+0x268>
 8006886:	4b4c      	ldr	r3, [pc, #304]	@ (80069b8 <UART_SetConfig+0x338>)
 8006888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	2b05      	cmp	r3, #5
 8006890:	d826      	bhi.n	80068e0 <UART_SetConfig+0x260>
 8006892:	a201      	add	r2, pc, #4	@ (adr r2, 8006898 <UART_SetConfig+0x218>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068b1 	.word	0x080068b1
 800689c:	080068b9 	.word	0x080068b9
 80068a0:	080068c1 	.word	0x080068c1
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	080068d1 	.word	0x080068d1
 80068ac:	080068d9 	.word	0x080068d9
 80068b0:	2300      	movs	r3, #0
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068b6:	e2ba      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80068b8:	2304      	movs	r3, #4
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e2b6      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80068c0:	2308      	movs	r3, #8
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e2b2      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80068c8:	2310      	movs	r3, #16
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e2ae      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80068d0:	2320      	movs	r3, #32
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e2aa      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80068d8:	2340      	movs	r3, #64	@ 0x40
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e2a6      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80068e0:	2380      	movs	r3, #128	@ 0x80
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e6:	e2a2      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a35      	ldr	r2, [pc, #212]	@ (80069c4 <UART_SetConfig+0x344>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d130      	bne.n	8006954 <UART_SetConfig+0x2d4>
 80068f2:	4b31      	ldr	r3, [pc, #196]	@ (80069b8 <UART_SetConfig+0x338>)
 80068f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b05      	cmp	r3, #5
 80068fc:	d826      	bhi.n	800694c <UART_SetConfig+0x2cc>
 80068fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <UART_SetConfig+0x284>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	0800691d 	.word	0x0800691d
 8006908:	08006925 	.word	0x08006925
 800690c:	0800692d 	.word	0x0800692d
 8006910:	08006935 	.word	0x08006935
 8006914:	0800693d 	.word	0x0800693d
 8006918:	08006945 	.word	0x08006945
 800691c:	2300      	movs	r3, #0
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e284      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006924:	2304      	movs	r3, #4
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e280      	b.n	8006e2e <UART_SetConfig+0x7ae>
 800692c:	2308      	movs	r3, #8
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e27c      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006934:	2310      	movs	r3, #16
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e278      	b.n	8006e2e <UART_SetConfig+0x7ae>
 800693c:	2320      	movs	r3, #32
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e274      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006944:	2340      	movs	r3, #64	@ 0x40
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694a:	e270      	b.n	8006e2e <UART_SetConfig+0x7ae>
 800694c:	2380      	movs	r3, #128	@ 0x80
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006952:	e26c      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1b      	ldr	r2, [pc, #108]	@ (80069c8 <UART_SetConfig+0x348>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d142      	bne.n	80069e4 <UART_SetConfig+0x364>
 800695e:	4b16      	ldr	r3, [pc, #88]	@ (80069b8 <UART_SetConfig+0x338>)
 8006960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	2b05      	cmp	r3, #5
 8006968:	d838      	bhi.n	80069dc <UART_SetConfig+0x35c>
 800696a:	a201      	add	r2, pc, #4	@ (adr r2, 8006970 <UART_SetConfig+0x2f0>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	08006989 	.word	0x08006989
 8006974:	08006991 	.word	0x08006991
 8006978:	08006999 	.word	0x08006999
 800697c:	080069a1 	.word	0x080069a1
 8006980:	080069cd 	.word	0x080069cd
 8006984:	080069d5 	.word	0x080069d5
 8006988:	2300      	movs	r3, #0
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e24e      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006990:	2304      	movs	r3, #4
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e24a      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006998:	2308      	movs	r3, #8
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e246      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80069a0:	2310      	movs	r3, #16
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e242      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80069a8:	cfff69f3 	.word	0xcfff69f3
 80069ac:	58000c00 	.word	0x58000c00
 80069b0:	11fff4ff 	.word	0x11fff4ff
 80069b4:	40011000 	.word	0x40011000
 80069b8:	58024400 	.word	0x58024400
 80069bc:	40004400 	.word	0x40004400
 80069c0:	40004800 	.word	0x40004800
 80069c4:	40004c00 	.word	0x40004c00
 80069c8:	40005000 	.word	0x40005000
 80069cc:	2320      	movs	r3, #32
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d2:	e22c      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80069d4:	2340      	movs	r3, #64	@ 0x40
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069da:	e228      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80069dc:	2380      	movs	r3, #128	@ 0x80
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e224      	b.n	8006e2e <UART_SetConfig+0x7ae>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4ab1      	ldr	r2, [pc, #708]	@ (8006cb0 <UART_SetConfig+0x630>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d176      	bne.n	8006adc <UART_SetConfig+0x45c>
 80069ee:	4bb1      	ldr	r3, [pc, #708]	@ (8006cb4 <UART_SetConfig+0x634>)
 80069f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f6:	2b28      	cmp	r3, #40	@ 0x28
 80069f8:	d86c      	bhi.n	8006ad4 <UART_SetConfig+0x454>
 80069fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006a00 <UART_SetConfig+0x380>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006aa5 	.word	0x08006aa5
 8006a04:	08006ad5 	.word	0x08006ad5
 8006a08:	08006ad5 	.word	0x08006ad5
 8006a0c:	08006ad5 	.word	0x08006ad5
 8006a10:	08006ad5 	.word	0x08006ad5
 8006a14:	08006ad5 	.word	0x08006ad5
 8006a18:	08006ad5 	.word	0x08006ad5
 8006a1c:	08006ad5 	.word	0x08006ad5
 8006a20:	08006aad 	.word	0x08006aad
 8006a24:	08006ad5 	.word	0x08006ad5
 8006a28:	08006ad5 	.word	0x08006ad5
 8006a2c:	08006ad5 	.word	0x08006ad5
 8006a30:	08006ad5 	.word	0x08006ad5
 8006a34:	08006ad5 	.word	0x08006ad5
 8006a38:	08006ad5 	.word	0x08006ad5
 8006a3c:	08006ad5 	.word	0x08006ad5
 8006a40:	08006ab5 	.word	0x08006ab5
 8006a44:	08006ad5 	.word	0x08006ad5
 8006a48:	08006ad5 	.word	0x08006ad5
 8006a4c:	08006ad5 	.word	0x08006ad5
 8006a50:	08006ad5 	.word	0x08006ad5
 8006a54:	08006ad5 	.word	0x08006ad5
 8006a58:	08006ad5 	.word	0x08006ad5
 8006a5c:	08006ad5 	.word	0x08006ad5
 8006a60:	08006abd 	.word	0x08006abd
 8006a64:	08006ad5 	.word	0x08006ad5
 8006a68:	08006ad5 	.word	0x08006ad5
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006ad5 	.word	0x08006ad5
 8006a74:	08006ad5 	.word	0x08006ad5
 8006a78:	08006ad5 	.word	0x08006ad5
 8006a7c:	08006ad5 	.word	0x08006ad5
 8006a80:	08006ac5 	.word	0x08006ac5
 8006a84:	08006ad5 	.word	0x08006ad5
 8006a88:	08006ad5 	.word	0x08006ad5
 8006a8c:	08006ad5 	.word	0x08006ad5
 8006a90:	08006ad5 	.word	0x08006ad5
 8006a94:	08006ad5 	.word	0x08006ad5
 8006a98:	08006ad5 	.word	0x08006ad5
 8006a9c:	08006ad5 	.word	0x08006ad5
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aaa:	e1c0      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006aac:	2304      	movs	r3, #4
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab2:	e1bc      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e1b8      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006abc:	2310      	movs	r3, #16
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac2:	e1b4      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006ac4:	2320      	movs	r3, #32
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aca:	e1b0      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006acc:	2340      	movs	r3, #64	@ 0x40
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad2:	e1ac      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006ad4:	2380      	movs	r3, #128	@ 0x80
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ada:	e1a8      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a75      	ldr	r2, [pc, #468]	@ (8006cb8 <UART_SetConfig+0x638>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d130      	bne.n	8006b48 <UART_SetConfig+0x4c8>
 8006ae6:	4b73      	ldr	r3, [pc, #460]	@ (8006cb4 <UART_SetConfig+0x634>)
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	d826      	bhi.n	8006b40 <UART_SetConfig+0x4c0>
 8006af2:	a201      	add	r2, pc, #4	@ (adr r2, 8006af8 <UART_SetConfig+0x478>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b19 	.word	0x08006b19
 8006b00:	08006b21 	.word	0x08006b21
 8006b04:	08006b29 	.word	0x08006b29
 8006b08:	08006b31 	.word	0x08006b31
 8006b0c:	08006b39 	.word	0x08006b39
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b16:	e18a      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b1e:	e186      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b20:	2308      	movs	r3, #8
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b26:	e182      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2e:	e17e      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b30:	2320      	movs	r3, #32
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b36:	e17a      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b38:	2340      	movs	r3, #64	@ 0x40
 8006b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3e:	e176      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b40:	2380      	movs	r3, #128	@ 0x80
 8006b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b46:	e172      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a5b      	ldr	r2, [pc, #364]	@ (8006cbc <UART_SetConfig+0x63c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d130      	bne.n	8006bb4 <UART_SetConfig+0x534>
 8006b52:	4b58      	ldr	r3, [pc, #352]	@ (8006cb4 <UART_SetConfig+0x634>)
 8006b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d826      	bhi.n	8006bac <UART_SetConfig+0x52c>
 8006b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b64 <UART_SetConfig+0x4e4>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b7d 	.word	0x08006b7d
 8006b68:	08006b85 	.word	0x08006b85
 8006b6c:	08006b8d 	.word	0x08006b8d
 8006b70:	08006b95 	.word	0x08006b95
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	08006ba5 	.word	0x08006ba5
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b82:	e154      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b84:	2304      	movs	r3, #4
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8a:	e150      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b92:	e14c      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b94:	2310      	movs	r3, #16
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9a:	e148      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006b9c:	2320      	movs	r3, #32
 8006b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ba2:	e144      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006ba4:	2340      	movs	r3, #64	@ 0x40
 8006ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006baa:	e140      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006bac:	2380      	movs	r3, #128	@ 0x80
 8006bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb2:	e13c      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a41      	ldr	r2, [pc, #260]	@ (8006cc0 <UART_SetConfig+0x640>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	f040 8082 	bne.w	8006cc4 <UART_SetConfig+0x644>
 8006bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8006cb4 <UART_SetConfig+0x634>)
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bc8:	2b28      	cmp	r3, #40	@ 0x28
 8006bca:	d86d      	bhi.n	8006ca8 <UART_SetConfig+0x628>
 8006bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd4 <UART_SetConfig+0x554>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006c79 	.word	0x08006c79
 8006bd8:	08006ca9 	.word	0x08006ca9
 8006bdc:	08006ca9 	.word	0x08006ca9
 8006be0:	08006ca9 	.word	0x08006ca9
 8006be4:	08006ca9 	.word	0x08006ca9
 8006be8:	08006ca9 	.word	0x08006ca9
 8006bec:	08006ca9 	.word	0x08006ca9
 8006bf0:	08006ca9 	.word	0x08006ca9
 8006bf4:	08006c81 	.word	0x08006c81
 8006bf8:	08006ca9 	.word	0x08006ca9
 8006bfc:	08006ca9 	.word	0x08006ca9
 8006c00:	08006ca9 	.word	0x08006ca9
 8006c04:	08006ca9 	.word	0x08006ca9
 8006c08:	08006ca9 	.word	0x08006ca9
 8006c0c:	08006ca9 	.word	0x08006ca9
 8006c10:	08006ca9 	.word	0x08006ca9
 8006c14:	08006c89 	.word	0x08006c89
 8006c18:	08006ca9 	.word	0x08006ca9
 8006c1c:	08006ca9 	.word	0x08006ca9
 8006c20:	08006ca9 	.word	0x08006ca9
 8006c24:	08006ca9 	.word	0x08006ca9
 8006c28:	08006ca9 	.word	0x08006ca9
 8006c2c:	08006ca9 	.word	0x08006ca9
 8006c30:	08006ca9 	.word	0x08006ca9
 8006c34:	08006c91 	.word	0x08006c91
 8006c38:	08006ca9 	.word	0x08006ca9
 8006c3c:	08006ca9 	.word	0x08006ca9
 8006c40:	08006ca9 	.word	0x08006ca9
 8006c44:	08006ca9 	.word	0x08006ca9
 8006c48:	08006ca9 	.word	0x08006ca9
 8006c4c:	08006ca9 	.word	0x08006ca9
 8006c50:	08006ca9 	.word	0x08006ca9
 8006c54:	08006c99 	.word	0x08006c99
 8006c58:	08006ca9 	.word	0x08006ca9
 8006c5c:	08006ca9 	.word	0x08006ca9
 8006c60:	08006ca9 	.word	0x08006ca9
 8006c64:	08006ca9 	.word	0x08006ca9
 8006c68:	08006ca9 	.word	0x08006ca9
 8006c6c:	08006ca9 	.word	0x08006ca9
 8006c70:	08006ca9 	.word	0x08006ca9
 8006c74:	08006ca1 	.word	0x08006ca1
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7e:	e0d6      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e0d2      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e0ce      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c96:	e0ca      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006c98:	2320      	movs	r3, #32
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9e:	e0c6      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006ca0:	2340      	movs	r3, #64	@ 0x40
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	e0c2      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006ca8:	2380      	movs	r3, #128	@ 0x80
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cae:	e0be      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006cb0:	40011400 	.word	0x40011400
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	40007800 	.word	0x40007800
 8006cbc:	40007c00 	.word	0x40007c00
 8006cc0:	40011800 	.word	0x40011800
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4aad      	ldr	r2, [pc, #692]	@ (8006f80 <UART_SetConfig+0x900>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d176      	bne.n	8006dbc <UART_SetConfig+0x73c>
 8006cce:	4bad      	ldr	r3, [pc, #692]	@ (8006f84 <UART_SetConfig+0x904>)
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cd6:	2b28      	cmp	r3, #40	@ 0x28
 8006cd8:	d86c      	bhi.n	8006db4 <UART_SetConfig+0x734>
 8006cda:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce0 <UART_SetConfig+0x660>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006d85 	.word	0x08006d85
 8006ce4:	08006db5 	.word	0x08006db5
 8006ce8:	08006db5 	.word	0x08006db5
 8006cec:	08006db5 	.word	0x08006db5
 8006cf0:	08006db5 	.word	0x08006db5
 8006cf4:	08006db5 	.word	0x08006db5
 8006cf8:	08006db5 	.word	0x08006db5
 8006cfc:	08006db5 	.word	0x08006db5
 8006d00:	08006d8d 	.word	0x08006d8d
 8006d04:	08006db5 	.word	0x08006db5
 8006d08:	08006db5 	.word	0x08006db5
 8006d0c:	08006db5 	.word	0x08006db5
 8006d10:	08006db5 	.word	0x08006db5
 8006d14:	08006db5 	.word	0x08006db5
 8006d18:	08006db5 	.word	0x08006db5
 8006d1c:	08006db5 	.word	0x08006db5
 8006d20:	08006d95 	.word	0x08006d95
 8006d24:	08006db5 	.word	0x08006db5
 8006d28:	08006db5 	.word	0x08006db5
 8006d2c:	08006db5 	.word	0x08006db5
 8006d30:	08006db5 	.word	0x08006db5
 8006d34:	08006db5 	.word	0x08006db5
 8006d38:	08006db5 	.word	0x08006db5
 8006d3c:	08006db5 	.word	0x08006db5
 8006d40:	08006d9d 	.word	0x08006d9d
 8006d44:	08006db5 	.word	0x08006db5
 8006d48:	08006db5 	.word	0x08006db5
 8006d4c:	08006db5 	.word	0x08006db5
 8006d50:	08006db5 	.word	0x08006db5
 8006d54:	08006db5 	.word	0x08006db5
 8006d58:	08006db5 	.word	0x08006db5
 8006d5c:	08006db5 	.word	0x08006db5
 8006d60:	08006da5 	.word	0x08006da5
 8006d64:	08006db5 	.word	0x08006db5
 8006d68:	08006db5 	.word	0x08006db5
 8006d6c:	08006db5 	.word	0x08006db5
 8006d70:	08006db5 	.word	0x08006db5
 8006d74:	08006db5 	.word	0x08006db5
 8006d78:	08006db5 	.word	0x08006db5
 8006d7c:	08006db5 	.word	0x08006db5
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e050      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d92:	e04c      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	e048      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da2:	e044      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006da4:	2320      	movs	r3, #32
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e040      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006dac:	2340      	movs	r3, #64	@ 0x40
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db2:	e03c      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006db4:	2380      	movs	r3, #128	@ 0x80
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dba:	e038      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a71      	ldr	r2, [pc, #452]	@ (8006f88 <UART_SetConfig+0x908>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d130      	bne.n	8006e28 <UART_SetConfig+0x7a8>
 8006dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8006f84 <UART_SetConfig+0x904>)
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	d826      	bhi.n	8006e20 <UART_SetConfig+0x7a0>
 8006dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd8 <UART_SetConfig+0x758>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006df1 	.word	0x08006df1
 8006ddc:	08006df9 	.word	0x08006df9
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e11 	.word	0x08006e11
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	2302      	movs	r3, #2
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df6:	e01a      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006df8:	2304      	movs	r3, #4
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfe:	e016      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006e00:	2308      	movs	r3, #8
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e06:	e012      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006e08:	2310      	movs	r3, #16
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0e:	e00e      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006e10:	2320      	movs	r3, #32
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e16:	e00a      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006e18:	2340      	movs	r3, #64	@ 0x40
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1e:	e006      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006e20:	2380      	movs	r3, #128	@ 0x80
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e26:	e002      	b.n	8006e2e <UART_SetConfig+0x7ae>
 8006e28:	2380      	movs	r3, #128	@ 0x80
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a55      	ldr	r2, [pc, #340]	@ (8006f88 <UART_SetConfig+0x908>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	f040 80f8 	bne.w	800702a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	dc46      	bgt.n	8006ed0 <UART_SetConfig+0x850>
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	db75      	blt.n	8006f32 <UART_SetConfig+0x8b2>
 8006e46:	3b02      	subs	r3, #2
 8006e48:	2b1e      	cmp	r3, #30
 8006e4a:	d872      	bhi.n	8006f32 <UART_SetConfig+0x8b2>
 8006e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e54 <UART_SetConfig+0x7d4>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006ed7 	.word	0x08006ed7
 8006e58:	08006f33 	.word	0x08006f33
 8006e5c:	08006edf 	.word	0x08006edf
 8006e60:	08006f33 	.word	0x08006f33
 8006e64:	08006f33 	.word	0x08006f33
 8006e68:	08006f33 	.word	0x08006f33
 8006e6c:	08006eef 	.word	0x08006eef
 8006e70:	08006f33 	.word	0x08006f33
 8006e74:	08006f33 	.word	0x08006f33
 8006e78:	08006f33 	.word	0x08006f33
 8006e7c:	08006f33 	.word	0x08006f33
 8006e80:	08006f33 	.word	0x08006f33
 8006e84:	08006f33 	.word	0x08006f33
 8006e88:	08006f33 	.word	0x08006f33
 8006e8c:	08006eff 	.word	0x08006eff
 8006e90:	08006f33 	.word	0x08006f33
 8006e94:	08006f33 	.word	0x08006f33
 8006e98:	08006f33 	.word	0x08006f33
 8006e9c:	08006f33 	.word	0x08006f33
 8006ea0:	08006f33 	.word	0x08006f33
 8006ea4:	08006f33 	.word	0x08006f33
 8006ea8:	08006f33 	.word	0x08006f33
 8006eac:	08006f33 	.word	0x08006f33
 8006eb0:	08006f33 	.word	0x08006f33
 8006eb4:	08006f33 	.word	0x08006f33
 8006eb8:	08006f33 	.word	0x08006f33
 8006ebc:	08006f33 	.word	0x08006f33
 8006ec0:	08006f33 	.word	0x08006f33
 8006ec4:	08006f33 	.word	0x08006f33
 8006ec8:	08006f33 	.word	0x08006f33
 8006ecc:	08006f25 	.word	0x08006f25
 8006ed0:	2b40      	cmp	r3, #64	@ 0x40
 8006ed2:	d02a      	beq.n	8006f2a <UART_SetConfig+0x8aa>
 8006ed4:	e02d      	b.n	8006f32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006ed6:	f7fe f855 	bl	8004f84 <HAL_RCCEx_GetD3PCLK1Freq>
 8006eda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006edc:	e02f      	b.n	8006f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe f864 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eec:	e027      	b.n	8006f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eee:	f107 0318 	add.w	r3, r7, #24
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe f9b0 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006efc:	e01f      	b.n	8006f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006efe:	4b21      	ldr	r3, [pc, #132]	@ (8006f84 <UART_SetConfig+0x904>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006f84 <UART_SetConfig+0x904>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	08db      	lsrs	r3, r3, #3
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	4a1d      	ldr	r2, [pc, #116]	@ (8006f8c <UART_SetConfig+0x90c>)
 8006f16:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f1c:	e00f      	b.n	8006f3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006f8c <UART_SetConfig+0x90c>)
 8006f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f22:	e00c      	b.n	8006f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f24:	4b1a      	ldr	r3, [pc, #104]	@ (8006f90 <UART_SetConfig+0x910>)
 8006f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f28:	e009      	b.n	8006f3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f30:	e005      	b.n	8006f3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 81ee 	beq.w	8007322 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4a:	4a12      	ldr	r2, [pc, #72]	@ (8006f94 <UART_SetConfig+0x914>)
 8006f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f58:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	4413      	add	r3, r2
 8006f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d305      	bcc.n	8006f76 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d910      	bls.n	8006f98 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f7c:	e1d1      	b.n	8007322 <UART_SetConfig+0xca2>
 8006f7e:	bf00      	nop
 8006f80:	40011c00 	.word	0x40011c00
 8006f84:	58024400 	.word	0x58024400
 8006f88:	58000c00 	.word	0x58000c00
 8006f8c:	03d09000 	.word	0x03d09000
 8006f90:	003d0900 	.word	0x003d0900
 8006f94:	08007a88 	.word	0x08007a88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	60fa      	str	r2, [r7, #12]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	4ac0      	ldr	r2, [pc, #768]	@ (80072a8 <UART_SetConfig+0xc28>)
 8006fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2200      	movs	r2, #0
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fba:	f7f9 f997 	bl	80002ec <__aeabi_uldivmod>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	020b      	lsls	r3, r1, #8
 8006fd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fd4:	0202      	lsls	r2, r0, #8
 8006fd6:	6979      	ldr	r1, [r7, #20]
 8006fd8:	6849      	ldr	r1, [r1, #4]
 8006fda:	0849      	lsrs	r1, r1, #1
 8006fdc:	2000      	movs	r0, #0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	eb12 0804 	adds.w	r8, r2, r4
 8006fe6:	eb43 0905 	adc.w	r9, r3, r5
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	469a      	mov	sl, r3
 8006ff2:	4693      	mov	fp, r2
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	465b      	mov	r3, fp
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	f7f9 f976 	bl	80002ec <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4613      	mov	r3, r2
 8007006:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800700e:	d308      	bcc.n	8007022 <UART_SetConfig+0x9a2>
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007016:	d204      	bcs.n	8007022 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800701e:	60da      	str	r2, [r3, #12]
 8007020:	e17f      	b.n	8007322 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007028:	e17b      	b.n	8007322 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007032:	f040 80bd 	bne.w	80071b0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007036:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800703a:	2b20      	cmp	r3, #32
 800703c:	dc48      	bgt.n	80070d0 <UART_SetConfig+0xa50>
 800703e:	2b00      	cmp	r3, #0
 8007040:	db7b      	blt.n	800713a <UART_SetConfig+0xaba>
 8007042:	2b20      	cmp	r3, #32
 8007044:	d879      	bhi.n	800713a <UART_SetConfig+0xaba>
 8007046:	a201      	add	r2, pc, #4	@ (adr r2, 800704c <UART_SetConfig+0x9cc>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	080070d7 	.word	0x080070d7
 8007050:	080070df 	.word	0x080070df
 8007054:	0800713b 	.word	0x0800713b
 8007058:	0800713b 	.word	0x0800713b
 800705c:	080070e7 	.word	0x080070e7
 8007060:	0800713b 	.word	0x0800713b
 8007064:	0800713b 	.word	0x0800713b
 8007068:	0800713b 	.word	0x0800713b
 800706c:	080070f7 	.word	0x080070f7
 8007070:	0800713b 	.word	0x0800713b
 8007074:	0800713b 	.word	0x0800713b
 8007078:	0800713b 	.word	0x0800713b
 800707c:	0800713b 	.word	0x0800713b
 8007080:	0800713b 	.word	0x0800713b
 8007084:	0800713b 	.word	0x0800713b
 8007088:	0800713b 	.word	0x0800713b
 800708c:	08007107 	.word	0x08007107
 8007090:	0800713b 	.word	0x0800713b
 8007094:	0800713b 	.word	0x0800713b
 8007098:	0800713b 	.word	0x0800713b
 800709c:	0800713b 	.word	0x0800713b
 80070a0:	0800713b 	.word	0x0800713b
 80070a4:	0800713b 	.word	0x0800713b
 80070a8:	0800713b 	.word	0x0800713b
 80070ac:	0800713b 	.word	0x0800713b
 80070b0:	0800713b 	.word	0x0800713b
 80070b4:	0800713b 	.word	0x0800713b
 80070b8:	0800713b 	.word	0x0800713b
 80070bc:	0800713b 	.word	0x0800713b
 80070c0:	0800713b 	.word	0x0800713b
 80070c4:	0800713b 	.word	0x0800713b
 80070c8:	0800713b 	.word	0x0800713b
 80070cc:	0800712d 	.word	0x0800712d
 80070d0:	2b40      	cmp	r3, #64	@ 0x40
 80070d2:	d02e      	beq.n	8007132 <UART_SetConfig+0xab2>
 80070d4:	e031      	b.n	800713a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d6:	f7fc fd6b 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 80070da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070dc:	e033      	b.n	8007146 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070de:	f7fc fd7d 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 80070e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070e4:	e02f      	b.n	8007146 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd ff60 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e027      	b.n	8007146 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f6:	f107 0318 	add.w	r3, r7, #24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe f8ac 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007104:	e01f      	b.n	8007146 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007106:	4b69      	ldr	r3, [pc, #420]	@ (80072ac <UART_SetConfig+0xc2c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007112:	4b66      	ldr	r3, [pc, #408]	@ (80072ac <UART_SetConfig+0xc2c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	4a64      	ldr	r2, [pc, #400]	@ (80072b0 <UART_SetConfig+0xc30>)
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007124:	e00f      	b.n	8007146 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007126:	4b62      	ldr	r3, [pc, #392]	@ (80072b0 <UART_SetConfig+0xc30>)
 8007128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800712a:	e00c      	b.n	8007146 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800712c:	4b61      	ldr	r3, [pc, #388]	@ (80072b4 <UART_SetConfig+0xc34>)
 800712e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007130:	e009      	b.n	8007146 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007138:	e005      	b.n	8007146 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80ea 	beq.w	8007322 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007152:	4a55      	ldr	r2, [pc, #340]	@ (80072a8 <UART_SetConfig+0xc28>)
 8007154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007158:	461a      	mov	r2, r3
 800715a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800715c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007160:	005a      	lsls	r2, r3, #1
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	085b      	lsrs	r3, r3, #1
 8007168:	441a      	add	r2, r3
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007172:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	2b0f      	cmp	r3, #15
 8007178:	d916      	bls.n	80071a8 <UART_SetConfig+0xb28>
 800717a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007180:	d212      	bcs.n	80071a8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	b29b      	uxth	r3, r3
 8007186:	f023 030f 	bic.w	r3, r3, #15
 800718a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800718c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718e:	085b      	lsrs	r3, r3, #1
 8007190:	b29b      	uxth	r3, r3
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	b29a      	uxth	r2, r3
 8007198:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800719a:	4313      	orrs	r3, r2
 800719c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	e0bc      	b.n	8007322 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80071ae:	e0b8      	b.n	8007322 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	dc4b      	bgt.n	8007250 <UART_SetConfig+0xbd0>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f2c0 8087 	blt.w	80072cc <UART_SetConfig+0xc4c>
 80071be:	2b20      	cmp	r3, #32
 80071c0:	f200 8084 	bhi.w	80072cc <UART_SetConfig+0xc4c>
 80071c4:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <UART_SetConfig+0xb4c>)
 80071c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ca:	bf00      	nop
 80071cc:	08007257 	.word	0x08007257
 80071d0:	0800725f 	.word	0x0800725f
 80071d4:	080072cd 	.word	0x080072cd
 80071d8:	080072cd 	.word	0x080072cd
 80071dc:	08007267 	.word	0x08007267
 80071e0:	080072cd 	.word	0x080072cd
 80071e4:	080072cd 	.word	0x080072cd
 80071e8:	080072cd 	.word	0x080072cd
 80071ec:	08007277 	.word	0x08007277
 80071f0:	080072cd 	.word	0x080072cd
 80071f4:	080072cd 	.word	0x080072cd
 80071f8:	080072cd 	.word	0x080072cd
 80071fc:	080072cd 	.word	0x080072cd
 8007200:	080072cd 	.word	0x080072cd
 8007204:	080072cd 	.word	0x080072cd
 8007208:	080072cd 	.word	0x080072cd
 800720c:	08007287 	.word	0x08007287
 8007210:	080072cd 	.word	0x080072cd
 8007214:	080072cd 	.word	0x080072cd
 8007218:	080072cd 	.word	0x080072cd
 800721c:	080072cd 	.word	0x080072cd
 8007220:	080072cd 	.word	0x080072cd
 8007224:	080072cd 	.word	0x080072cd
 8007228:	080072cd 	.word	0x080072cd
 800722c:	080072cd 	.word	0x080072cd
 8007230:	080072cd 	.word	0x080072cd
 8007234:	080072cd 	.word	0x080072cd
 8007238:	080072cd 	.word	0x080072cd
 800723c:	080072cd 	.word	0x080072cd
 8007240:	080072cd 	.word	0x080072cd
 8007244:	080072cd 	.word	0x080072cd
 8007248:	080072cd 	.word	0x080072cd
 800724c:	080072bf 	.word	0x080072bf
 8007250:	2b40      	cmp	r3, #64	@ 0x40
 8007252:	d037      	beq.n	80072c4 <UART_SetConfig+0xc44>
 8007254:	e03a      	b.n	80072cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007256:	f7fc fcab 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 800725a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800725c:	e03c      	b.n	80072d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800725e:	f7fc fcbd 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8007262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007264:	e038      	b.n	80072d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800726a:	4618      	mov	r0, r3
 800726c:	f7fd fea0 	bl	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007274:	e030      	b.n	80072d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007276:	f107 0318 	add.w	r3, r7, #24
 800727a:	4618      	mov	r0, r3
 800727c:	f7fd ffec 	bl	8005258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007284:	e028      	b.n	80072d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007286:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <UART_SetConfig+0xc2c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d012      	beq.n	80072b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007292:	4b06      	ldr	r3, [pc, #24]	@ (80072ac <UART_SetConfig+0xc2c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	08db      	lsrs	r3, r3, #3
 8007298:	f003 0303 	and.w	r3, r3, #3
 800729c:	4a04      	ldr	r2, [pc, #16]	@ (80072b0 <UART_SetConfig+0xc30>)
 800729e:	fa22 f303 	lsr.w	r3, r2, r3
 80072a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072a4:	e018      	b.n	80072d8 <UART_SetConfig+0xc58>
 80072a6:	bf00      	nop
 80072a8:	08007a88 	.word	0x08007a88
 80072ac:	58024400 	.word	0x58024400
 80072b0:	03d09000 	.word	0x03d09000
 80072b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80072b8:	4b24      	ldr	r3, [pc, #144]	@ (800734c <UART_SetConfig+0xccc>)
 80072ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072bc:	e00c      	b.n	80072d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80072be:	4b24      	ldr	r3, [pc, #144]	@ (8007350 <UART_SetConfig+0xcd0>)
 80072c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072c2:	e009      	b.n	80072d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ca:	e005      	b.n	80072d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80072d6:	bf00      	nop
    }

    if (pclk != 0U)
 80072d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d021      	beq.n	8007322 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007354 <UART_SetConfig+0xcd4>)
 80072e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	441a      	add	r2, r3
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	2b0f      	cmp	r3, #15
 8007306:	d909      	bls.n	800731c <UART_SetConfig+0xc9c>
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800730e:	d205      	bcs.n	800731c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	b29a      	uxth	r2, r3
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	e002      	b.n	8007322 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2201      	movs	r2, #1
 8007326:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2201      	movs	r2, #1
 800732e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2200      	movs	r2, #0
 8007336:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2200      	movs	r2, #0
 800733c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800733e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007342:	4618      	mov	r0, r3
 8007344:	3748      	adds	r7, #72	@ 0x48
 8007346:	46bd      	mov	sp, r7
 8007348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800734c:	03d09000 	.word	0x03d09000
 8007350:	003d0900 	.word	0x003d0900
 8007354:	08007a88 	.word	0x08007a88

08007358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01a      	beq.n	800746e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007456:	d10a      	bne.n	800746e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	605a      	str	r2, [r3, #4]
  }
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b098      	sub	sp, #96	@ 0x60
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074ac:	f7fa fbac 	bl	8001c08 <HAL_GetTick>
 80074b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d12f      	bne.n	8007520 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c8:	2200      	movs	r2, #0
 80074ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f88e 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d022      	beq.n	8007520 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e6      	bne.n	80074da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2220      	movs	r2, #32
 8007510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e063      	b.n	80075e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b04      	cmp	r3, #4
 800752c:	d149      	bne.n	80075c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800752e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007536:	2200      	movs	r2, #0
 8007538:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f857 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d03c      	beq.n	80075c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	623b      	str	r3, [r7, #32]
   return(result);
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800755c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007566:	633b      	str	r3, [r7, #48]	@ 0x30
 8007568:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800756c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e6      	bne.n	8007548 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3308      	adds	r3, #8
 8007580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	60fb      	str	r3, [r7, #12]
   return(result);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f023 0301 	bic.w	r3, r3, #1
 8007590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3308      	adds	r3, #8
 8007598:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800759a:	61fa      	str	r2, [r7, #28]
 800759c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	69b9      	ldr	r1, [r7, #24]
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	617b      	str	r3, [r7, #20]
   return(result);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e5      	bne.n	800757a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e012      	b.n	80075e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3758      	adds	r7, #88	@ 0x58
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4613      	mov	r3, r2
 80075fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007600:	e04f      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d04b      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800760a:	f7fa fafd 	bl	8001c08 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <UART_WaitOnFlagUntilTimeout+0x30>
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e04e      	b.n	80076c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d037      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b80      	cmp	r3, #128	@ 0x80
 8007636:	d034      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b40      	cmp	r3, #64	@ 0x40
 800763c:	d031      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b08      	cmp	r3, #8
 800764a:	d110      	bne.n	800766e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2208      	movs	r2, #8
 8007652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f839 	bl	80076cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2208      	movs	r2, #8
 800765e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e029      	b.n	80076c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800767c:	d111      	bne.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f81f 	bl	80076cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e00f      	b.n	80076c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69da      	ldr	r2, [r3, #28]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4013      	ands	r3, r2
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	bf0c      	ite	eq
 80076b2:	2301      	moveq	r3, #1
 80076b4:	2300      	movne	r3, #0
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d0a0      	beq.n	8007602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b095      	sub	sp, #84	@ 0x54
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80076f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e6      	bne.n	80076d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	61fb      	str	r3, [r7, #28]
   return(result);
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	4b1e      	ldr	r3, [pc, #120]	@ (8007794 <UART_EndRxTransfer+0xc8>)
 800771a:	4013      	ands	r3, r2
 800771c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007728:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800772c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e5      	bne.n	8007706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800773e:	2b01      	cmp	r3, #1
 8007740:	d118      	bne.n	8007774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f023 0310 	bic.w	r3, r3, #16
 8007756:	647b      	str	r3, [r7, #68]	@ 0x44
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6979      	ldr	r1, [r7, #20]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	613b      	str	r3, [r7, #16]
   return(result);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e6      	bne.n	8007742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007788:	bf00      	nop
 800778a:	3754      	adds	r7, #84	@ 0x54
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	effffffe 	.word	0xeffffffe

08007798 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_UARTEx_DisableFifoMode+0x16>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e027      	b.n	80077fe <HAL_UARTEx_DisableFifoMode+0x66>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2224      	movs	r2, #36	@ 0x24
 80077ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0201 	bic.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800781e:	2302      	movs	r3, #2
 8007820:	e02d      	b.n	800787e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2224      	movs	r2, #36	@ 0x24
 800782e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f850 	bl	8007904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800789a:	2302      	movs	r3, #2
 800789c:	e02d      	b.n	80078fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2224      	movs	r2, #36	@ 0x24
 80078aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f812 	bl	8007904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007910:	2b00      	cmp	r3, #0
 8007912:	d108      	bne.n	8007926 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007924:	e031      	b.n	800798a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007926:	2310      	movs	r3, #16
 8007928:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800792a:	2310      	movs	r3, #16
 800792c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	0e5b      	lsrs	r3, r3, #25
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	0f5b      	lsrs	r3, r3, #29
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	7b3a      	ldrb	r2, [r7, #12]
 8007952:	4911      	ldr	r1, [pc, #68]	@ (8007998 <UARTEx_SetNbDataToProcess+0x94>)
 8007954:	5c8a      	ldrb	r2, [r1, r2]
 8007956:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800795a:	7b3a      	ldrb	r2, [r7, #12]
 800795c:	490f      	ldr	r1, [pc, #60]	@ (800799c <UARTEx_SetNbDataToProcess+0x98>)
 800795e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007960:	fb93 f3f2 	sdiv	r3, r3, r2
 8007964:	b29a      	uxth	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	7b7a      	ldrb	r2, [r7, #13]
 8007970:	4909      	ldr	r1, [pc, #36]	@ (8007998 <UARTEx_SetNbDataToProcess+0x94>)
 8007972:	5c8a      	ldrb	r2, [r1, r2]
 8007974:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007978:	7b7a      	ldrb	r2, [r7, #13]
 800797a:	4908      	ldr	r1, [pc, #32]	@ (800799c <UARTEx_SetNbDataToProcess+0x98>)
 800797c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800797e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	08007aa0 	.word	0x08007aa0
 800799c:	08007aa8 	.word	0x08007aa8

080079a0 <memset>:
 80079a0:	4402      	add	r2, r0
 80079a2:	4603      	mov	r3, r0
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d100      	bne.n	80079aa <memset+0xa>
 80079a8:	4770      	bx	lr
 80079aa:	f803 1b01 	strb.w	r1, [r3], #1
 80079ae:	e7f9      	b.n	80079a4 <memset+0x4>

080079b0 <__libc_init_array>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	4d0d      	ldr	r5, [pc, #52]	@ (80079e8 <__libc_init_array+0x38>)
 80079b4:	4c0d      	ldr	r4, [pc, #52]	@ (80079ec <__libc_init_array+0x3c>)
 80079b6:	1b64      	subs	r4, r4, r5
 80079b8:	10a4      	asrs	r4, r4, #2
 80079ba:	2600      	movs	r6, #0
 80079bc:	42a6      	cmp	r6, r4
 80079be:	d109      	bne.n	80079d4 <__libc_init_array+0x24>
 80079c0:	4d0b      	ldr	r5, [pc, #44]	@ (80079f0 <__libc_init_array+0x40>)
 80079c2:	4c0c      	ldr	r4, [pc, #48]	@ (80079f4 <__libc_init_array+0x44>)
 80079c4:	f000 f826 	bl	8007a14 <_init>
 80079c8:	1b64      	subs	r4, r4, r5
 80079ca:	10a4      	asrs	r4, r4, #2
 80079cc:	2600      	movs	r6, #0
 80079ce:	42a6      	cmp	r6, r4
 80079d0:	d105      	bne.n	80079de <__libc_init_array+0x2e>
 80079d2:	bd70      	pop	{r4, r5, r6, pc}
 80079d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d8:	4798      	blx	r3
 80079da:	3601      	adds	r6, #1
 80079dc:	e7ee      	b.n	80079bc <__libc_init_array+0xc>
 80079de:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e2:	4798      	blx	r3
 80079e4:	3601      	adds	r6, #1
 80079e6:	e7f2      	b.n	80079ce <__libc_init_array+0x1e>
 80079e8:	08007ab8 	.word	0x08007ab8
 80079ec:	08007ab8 	.word	0x08007ab8
 80079f0:	08007ab8 	.word	0x08007ab8
 80079f4:	08007abc 	.word	0x08007abc

080079f8 <memcpy>:
 80079f8:	440a      	add	r2, r1
 80079fa:	4291      	cmp	r1, r2
 80079fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a00:	d100      	bne.n	8007a04 <memcpy+0xc>
 8007a02:	4770      	bx	lr
 8007a04:	b510      	push	{r4, lr}
 8007a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a0e:	4291      	cmp	r1, r2
 8007a10:	d1f9      	bne.n	8007a06 <memcpy+0xe>
 8007a12:	bd10      	pop	{r4, pc}

08007a14 <_init>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	bf00      	nop
 8007a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1a:	bc08      	pop	{r3}
 8007a1c:	469e      	mov	lr, r3
 8007a1e:	4770      	bx	lr

08007a20 <_fini>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	bf00      	nop
 8007a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a26:	bc08      	pop	{r3}
 8007a28:	469e      	mov	lr, r3
 8007a2a:	4770      	bx	lr
