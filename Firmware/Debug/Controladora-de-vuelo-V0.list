
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f00  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000918  080091b0  080091b0  0000a1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ac8  08009ac8  0000aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ad0  08009ad0  0000aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009ad4  08009ad4  0000aad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  08009ad8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000708  24000060  08009b38  0000b060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000768  08009b38  0000b768  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f1cd  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003975  00000000  00000000  0002a25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001930  00000000  00000000  0002dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013c0  00000000  00000000  0002f500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033e3c  00000000  00000000  000308c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022904  00000000  00000000  000646fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015127e  00000000  00000000  00087000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d827e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f9c  00000000  00000000  001d82c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  001df260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009198 	.word	0x08009198

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08009198 	.word	0x08009198

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f002 fed2 	bl	8003440 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f005 ff11 	bl	80064d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f005 ff0b 	bl	80064d4 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f002 febb 	bl	8003440 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24000230 	.word	0x24000230

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f002 fea2 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f005 fee5 	bl	80064d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f006 f8cc 	bl	80068b0 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f002 fe8e 	bl	8003440 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24000230 	.word	0x24000230

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f002 fe63 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f005 fea6 	bl	80064d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f006 f88e 	bl	80068b0 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f002 fe50 	bl	8003440 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24000230 	.word	0x24000230
 800088c:	24000090 	.word	0x24000090
 8000890:	24000094 	.word	0x24000094
 8000894:	24000096 	.word	0x24000096
 8000898:	24000092 	.word	0x24000092
 800089c:	24000098 	.word	0x24000098
 80008a0:	2400009a 	.word	0x2400009a
 80008a4:	2400009c 	.word	0x2400009c
 80008a8:	2400009e 	.word	0x2400009e
 80008ac:	240000a0 	.word	0x240000a0
 80008b0:	240000a2 	.word	0x240000a2
 80008b4:	240000a4 	.word	0x240000a4
 80008b8:	240000a6 	.word	0x240000a6

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f002 fdb3 	bl	8003440 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f005 fdf7 	bl	80064d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f005 ffdf 	bl	80068b0 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f002 fda1 	bl	8003440 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24000230 	.word	0x24000230
 800093c:	240000ac 	.word	0x240000ac
 8000940:	240000a8 	.word	0x240000a8

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	240000a8 	.word	0x240000a8
 80009bc:	24000090 	.word	0x24000090
 80009c0:	24000094 	.word	0x24000094
 80009c4:	24000096 	.word	0x24000096
 80009c8:	240000b0 	.word	0x240000b0

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	240000b0 	.word	0x240000b0
 8000c9c:	240000a0 	.word	0x240000a0
 8000ca0:	2400009e 	.word	0x2400009e
 8000ca4:	2400009c 	.word	0x2400009c
 8000ca8:	2400009a 	.word	0x2400009a
 8000cac:	24000098 	.word	0x24000098
 8000cb0:	24000092 	.word	0x24000092
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	240000a6 	.word	0x240000a6
 8000f50:	240000a4 	.word	0x240000a4
 8000f54:	240000a2 	.word	0x240000a2

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f007 ffdd 	bl	8008f40 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f002 fa10 	bl	8003440 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	2400007c 	.word	0x2400007c
 8001058:	240000a8 	.word	0x240000a8

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400007c 	.word	0x2400007c
 80010c8:	240000a8 	.word	0x240000a8
 80010cc:	240000ac 	.word	0x240000ac

080010d0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 80010d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001194 <MX_FDCAN1_Init+0xc4>)
 80010d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010da:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80010e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80010ec:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80010f2:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80010f8:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 80010fa:	2210      	movs	r2, #16
 80010fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001100:	2201      	movs	r2, #1
 8001102:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001106:	2202      	movs	r2, #2
 8001108:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 800110c:	2202      	movs	r2, #2
 800110e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001112:	2201      	movs	r2, #1
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001118:	2201      	movs	r2, #1
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800111c:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 800111e:	2201      	movs	r2, #1
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001124:	2201      	movs	r2, #1
 8001126:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 800112a:	2200      	movs	r2, #0
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001130:	2200      	movs	r2, #0
 8001132:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001136:	2200      	movs	r2, #0
 8001138:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 800113c:	2200      	movs	r2, #0
 800113e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001142:	2204      	movs	r2, #4
 8001144:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001148:	2200      	movs	r2, #0
 800114a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 800114e:	2204      	movs	r2, #4
 8001150:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001154:	2200      	movs	r2, #0
 8001156:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001158:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 800115a:	2204      	movs	r2, #4
 800115c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001170:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 8001178:	2204      	movs	r2, #4
 800117a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <MX_FDCAN1_Init+0xc0>)
 800117e:	f001 fc4b 	bl	8002a18 <HAL_FDCAN_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001188:	f000 faae 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	240000b4 	.word	0x240000b4
 8001194:	4000a000 	.word	0x4000a000

08001198 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0ba      	sub	sp, #232	@ 0xe8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	22c0      	movs	r2, #192	@ 0xc0
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f007 fe81 	bl	8008ec0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001280 <HAL_FDCAN_MspInit+0xe8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d157      	bne.n	8001278 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80011d4:	2304      	movs	r3, #4
 80011d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80011d8:	2308      	movs	r3, #8
 80011da:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011e8:	23c0      	movs	r3, #192	@ 0xc0
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80011f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fa63 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 800120c:	f000 fa6c 	bl	80016e8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001210:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <HAL_FDCAN_MspInit+0xec>)
 8001212:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001216:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <HAL_FDCAN_MspInit+0xec>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <HAL_FDCAN_MspInit+0xec>)
 8001222:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <HAL_FDCAN_MspInit+0xec>)
 8001230:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001234:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <HAL_FDCAN_MspInit+0xec>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <HAL_FDCAN_MspInit+0xec>)
 8001240:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800124c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001250:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001266:	2309      	movs	r3, #9
 8001268:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_FDCAN_MspInit+0xf0>)
 8001274:	f001 ff34 	bl	80030e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001278:	bf00      	nop
 800127a:	37e8      	adds	r7, #232	@ 0xe8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	4000a000 	.word	0x4000a000
 8001284:	58024400 	.word	0x58024400
 8001288:	58020000 	.word	0x58020000

0800128c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b3e      	ldr	r3, [pc, #248]	@ (800139c <MX_GPIO_Init+0x110>)
 80012a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012a8:	4a3c      	ldr	r2, [pc, #240]	@ (800139c <MX_GPIO_Init+0x110>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012b2:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <MX_GPIO_Init+0x110>)
 80012b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b36      	ldr	r3, [pc, #216]	@ (800139c <MX_GPIO_Init+0x110>)
 80012c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012c6:	4a35      	ldr	r2, [pc, #212]	@ (800139c <MX_GPIO_Init+0x110>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012d0:	4b32      	ldr	r3, [pc, #200]	@ (800139c <MX_GPIO_Init+0x110>)
 80012d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <MX_GPIO_Init+0x110>)
 80012e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012e4:	4a2d      	ldr	r2, [pc, #180]	@ (800139c <MX_GPIO_Init+0x110>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012ee:	4b2b      	ldr	r3, [pc, #172]	@ (800139c <MX_GPIO_Init+0x110>)
 80012f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	4b27      	ldr	r3, [pc, #156]	@ (800139c <MX_GPIO_Init+0x110>)
 80012fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001302:	4a26      	ldr	r2, [pc, #152]	@ (800139c <MX_GPIO_Init+0x110>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800130c:	4b23      	ldr	r3, [pc, #140]	@ (800139c <MX_GPIO_Init+0x110>)
 800130e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800131a:	2200      	movs	r2, #0
 800131c:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001320:	481f      	ldr	r0, [pc, #124]	@ (80013a0 <MX_GPIO_Init+0x114>)
 8001322:	f002 f88d 	bl	8003440 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME_NSS_GPIO_Port, BME_NSS_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800132c:	481d      	ldr	r0, [pc, #116]	@ (80013a4 <MX_GPIO_Init+0x118>)
 800132e:	f002 f887 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2104      	movs	r1, #4
 8001336:	481c      	ldr	r0, [pc, #112]	@ (80013a8 <MX_GPIO_Init+0x11c>)
 8001338:	f002 f882 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800133c:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001340:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4812      	ldr	r0, [pc, #72]	@ (80013a0 <MX_GPIO_Init+0x114>)
 8001356:	f001 fec3 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME_NSS_Pin;
 800135a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BME_NSS_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <MX_GPIO_Init+0x118>)
 8001374:	f001 feb4 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001378:	2304      	movs	r3, #4
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_GPIO_Init+0x11c>)
 8001390:	f001 fea6 	bl	80030e0 <HAL_GPIO_Init>

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	@ 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020800 	.word	0x58020800
 80013a4:	58020400 	.word	0x58020400
 80013a8:	58020c00 	.word	0x58020c00

080013ac <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001424 <MX_I2C3_Init+0x78>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <MX_I2C3_Init+0x7c>)
 80013ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013e6:	480e      	ldr	r0, [pc, #56]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013e8:	f002 f844 	bl	8003474 <HAL_I2C_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80013f2:	f000 f979 	bl	80016e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4809      	ldr	r0, [pc, #36]	@ (8001420 <MX_I2C3_Init+0x74>)
 80013fa:	f002 f8d7 	bl	80035ac <HAL_I2CEx_ConfigAnalogFilter>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001404:	f000 f970 	bl	80016e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001408:	2100      	movs	r1, #0
 800140a:	4805      	ldr	r0, [pc, #20]	@ (8001420 <MX_I2C3_Init+0x74>)
 800140c:	f002 f919 	bl	8003642 <HAL_I2CEx_ConfigDigitalFilter>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001416:	f000 f967 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24000154 	.word	0x24000154
 8001424:	40005c00 	.word	0x40005c00
 8001428:	20b0ccff 	.word	0x20b0ccff

0800142c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0bc      	sub	sp, #240	@ 0xf0
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	22c0      	movs	r2, #192	@ 0xc0
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f007 fd37 	bl	8008ec0 <memset>
  if(i2cHandle->Instance==I2C3)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a39      	ldr	r2, [pc, #228]	@ (800153c <HAL_I2C_MspInit+0x110>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d16b      	bne.n	8001534 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800145c:	f04f 0208 	mov.w	r2, #8
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f92a 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800147e:	f000 f933 	bl	80016e8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b2f      	ldr	r3, [pc, #188]	@ (8001540 <HAL_I2C_MspInit+0x114>)
 8001484:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001488:	4a2d      	ldr	r2, [pc, #180]	@ (8001540 <HAL_I2C_MspInit+0x114>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <HAL_I2C_MspInit+0x114>)
 8001494:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <HAL_I2C_MspInit+0x114>)
 80014a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014a6:	4a26      	ldr	r2, [pc, #152]	@ (8001540 <HAL_I2C_MspInit+0x114>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014b0:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_I2C_MspInit+0x114>)
 80014b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014d8:	2304      	movs	r3, #4
 80014da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014de:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014e2:	4619      	mov	r1, r3
 80014e4:	4817      	ldr	r0, [pc, #92]	@ (8001544 <HAL_I2C_MspInit+0x118>)
 80014e6:	f001 fdfb 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f2:	2312      	movs	r3, #18
 80014f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001504:	2304      	movs	r3, #4
 8001506:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800150e:	4619      	mov	r1, r3
 8001510:	480d      	ldr	r0, [pc, #52]	@ (8001548 <HAL_I2C_MspInit+0x11c>)
 8001512:	f001 fde5 	bl	80030e0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_I2C_MspInit+0x114>)
 8001518:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800151c:	4a08      	ldr	r2, [pc, #32]	@ (8001540 <HAL_I2C_MspInit+0x114>)
 800151e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001522:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_I2C_MspInit+0x114>)
 8001528:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800152c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001534:	bf00      	nop
 8001536:	37f0      	adds	r7, #240	@ 0xf0
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40005c00 	.word	0x40005c00
 8001540:	58024400 	.word	0x58024400
 8001544:	58020800 	.word	0x58020800
 8001548:	58020000 	.word	0x58020000

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001550:	f000 f89e 	bl	8001690 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f001 f84e 	bl	80025f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 f824 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f7ff fe96 	bl	800128c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001560:	f7ff fdb6 	bl	80010d0 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8001564:	f7ff ff22 	bl	80013ac <MX_I2C3_Init>
  MX_SPI1_Init();
 8001568:	f000 f8c4 	bl	80016f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800156c:	f000 f918 	bl	80017a0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001570:	f000 f96c 	bl	800184c <MX_SPI3_Init>
  MX_TIM2_Init();
 8001574:	f000 fb8c 	bl	8001c90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001578:	f000 fc06 	bl	8001d88 <MX_TIM3_Init>
  MX_TIM4_Init();
 800157c:	f000 fc6a 	bl	8001e54 <MX_TIM4_Init>
  MX_UART4_Init();
 8001580:	f000 fe22 	bl	80021c8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001584:	f000 fe6c 	bl	8002260 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001588:	f000 feb6 	bl	80022f8 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 800158c:	f000 fcde 	bl	8001f4c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8001590:	f7ff fd3e 	bl	8001010 <BMP280_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 8001594:	f7ff fd62 	bl	800105c <BMP280_calculate>


	  HAL_Delay(50);
 8001598:	2032      	movs	r0, #50	@ 0x32
 800159a:	f001 f8bd 	bl	8002718 <HAL_Delay>
	  BMP280_calculate();
 800159e:	bf00      	nop
 80015a0:	e7f8      	b.n	8001594 <main+0x48>
	...

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b09c      	sub	sp, #112	@ 0x70
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ae:	224c      	movs	r2, #76	@ 0x4c
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f007 fc84 	bl	8008ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2220      	movs	r2, #32
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 fc7e 	bl	8008ec0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80015c4:	4b30      	ldr	r3, [pc, #192]	@ (8001688 <SystemClock_Config+0xe4>)
 80015c6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f002 f884 	bl	80036dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	4b2c      	ldr	r3, [pc, #176]	@ (800168c <SystemClock_Config+0xe8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a2b      	ldr	r2, [pc, #172]	@ (800168c <SystemClock_Config+0xe8>)
 80015de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <SystemClock_Config+0xe8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015f0:	bf00      	nop
 80015f2:	4b26      	ldr	r3, [pc, #152]	@ (800168c <SystemClock_Config+0xe8>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015fe:	d1f8      	bne.n	80015f2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001604:	2301      	movs	r3, #1
 8001606:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001608:	2340      	movs	r3, #64	@ 0x40
 800160a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	2302      	movs	r3, #2
 800160e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	2300      	movs	r3, #0
 8001612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001618:	2323      	movs	r3, #35	@ 0x23
 800161a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800161c:	2302      	movs	r3, #2
 800161e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001628:	230c      	movs	r3, #12
 800162a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800162c:	2300      	movs	r3, #0
 800162e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001638:	4618      	mov	r0, r3
 800163a:	f002 f889 	bl	8003750 <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001644:	f000 f850 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001648:	233f      	movs	r3, #63	@ 0x3f
 800164a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164c:	2303      	movs	r3, #3
 800164e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001658:	2340      	movs	r3, #64	@ 0x40
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800165c:	2340      	movs	r3, #64	@ 0x40
 800165e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001664:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001666:	2340      	movs	r3, #64	@ 0x40
 8001668:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2106      	movs	r1, #6
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fca0 	bl	8003fb4 <HAL_RCC_ClockConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800167a:	f000 f835 	bl	80016e8 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	3770      	adds	r7, #112	@ 0x70
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	58024400 	.word	0x58024400
 800168c:	58024800 	.word	0x58024800

08001690 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001696:	463b      	mov	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80016a2:	f001 f941 	bl	8002928 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016b2:	231f      	movs	r3, #31
 80016b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80016b6:	2387      	movs	r3, #135	@ 0x87
 80016b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016be:	2300      	movs	r3, #0
 80016c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 f95f 	bl	8002998 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016da:	2004      	movs	r0, #4
 80016dc:	f001 f93c 	bl	8002958 <HAL_MPU_Enable>

}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <Error_Handler+0x8>

080016f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <MX_SPI1_Init+0xa4>)
 80016fa:	4a28      	ldr	r2, [pc, #160]	@ (800179c <MX_SPI1_Init+0xa8>)
 80016fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001700:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <MX_SPI1_Init+0xa4>)
 800170e:	2203      	movs	r2, #3
 8001710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001718:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <MX_SPI1_Init+0xa4>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001720:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001724:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <MX_SPI1_Init+0xa4>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <MX_SPI1_Init+0xa4>)
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001740:	2200      	movs	r2, #0
 8001742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001746:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800174a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <MX_SPI1_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <MX_SPI1_Init+0xa4>)
 800175a:	2200      	movs	r2, #0
 800175c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001760:	2200      	movs	r2, #0
 8001762:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <MX_SPI1_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001776:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <MX_SPI1_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	@ (8001798 <MX_SPI1_Init+0xa4>)
 8001784:	f004 fd82 	bl	800628c <HAL_SPI_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800178e:	f7ff ffab 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	240001a8 	.word	0x240001a8
 800179c:	40013000 	.word	0x40013000

080017a0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017a4:	4b27      	ldr	r3, [pc, #156]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017a6:	4a28      	ldr	r2, [pc, #160]	@ (8001848 <MX_SPI2_Init+0xa8>)
 80017a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017aa:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017b2:	4b24      	ldr	r3, [pc, #144]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b8:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017ba:	2207      	movs	r2, #7
 80017bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017d4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80017d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017ec:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017f2:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <MX_SPI2_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001800:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <MX_SPI2_Init+0xa4>)
 8001802:	2200      	movs	r2, #0
 8001804:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_SPI2_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <MX_SPI2_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_SPI2_Init+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001818:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <MX_SPI2_Init+0xa4>)
 800181a:	2200      	movs	r2, #0
 800181c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <MX_SPI2_Init+0xa4>)
 8001820:	2200      	movs	r2, #0
 8001822:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <MX_SPI2_Init+0xa4>)
 8001826:	2200      	movs	r2, #0
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <MX_SPI2_Init+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <MX_SPI2_Init+0xa4>)
 8001832:	f004 fd2b 	bl	800628c <HAL_SPI_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800183c:	f7ff ff54 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	24000230 	.word	0x24000230
 8001848:	40003800 	.word	0x40003800

0800184c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001850:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001852:	4a28      	ldr	r2, [pc, #160]	@ (80018f4 <MX_SPI3_Init+0xa8>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001858:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800185c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001866:	2203      	movs	r2, #3
 8001868:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001878:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800187c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800187e:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800188a:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001890:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 800189e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_SPI3_Init+0xa4>)
 80018dc:	f004 fcd6 	bl	800628c <HAL_SPI_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80018e6:	f7ff feff 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	240002b8 	.word	0x240002b8
 80018f4:	40003c00 	.word	0x40003c00

080018f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0be      	sub	sp, #248	@ 0xf8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	22c0      	movs	r2, #192	@ 0xc0
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f007 fad1 	bl	8008ec0 <memset>
  if(spiHandle->Instance==SPI1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a73      	ldr	r2, [pc, #460]	@ (8001af0 <HAL_SPI_MspInit+0x1f8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d146      	bne.n	80019b6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001928:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fec4 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800194a:	f7ff fecd 	bl	80016e8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800194e:	4b69      	ldr	r3, [pc, #420]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001950:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001954:	4a67      	ldr	r2, [pc, #412]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001956:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800195a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800195e:	4b65      	ldr	r3, [pc, #404]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001960:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001964:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b61      	ldr	r3, [pc, #388]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 800196e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001972:	4a60      	ldr	r2, [pc, #384]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800197c:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 800197e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_NSS_Pin|SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800198a:	23f0      	movs	r3, #240	@ 0xf0
 800198c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a2:	2305      	movs	r3, #5
 80019a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4852      	ldr	r0, [pc, #328]	@ (8001af8 <HAL_SPI_MspInit+0x200>)
 80019b0:	f001 fb96 	bl	80030e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80019b4:	e098      	b.n	8001ae8 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a50      	ldr	r2, [pc, #320]	@ (8001afc <HAL_SPI_MspInit+0x204>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d147      	bne.n	8001a50 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80019c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fe78 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_SPI_MspInit+0xee>
      Error_Handler();
 80019e2:	f7ff fe81 	bl	80016e8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019e6:	4b43      	ldr	r3, [pc, #268]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 80019e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80019ec:	4a41      	ldr	r2, [pc, #260]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80019f6:	4b3f      	ldr	r3, [pc, #252]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 80019f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80019fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001a06:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a14:	4b37      	ldr	r3, [pc, #220]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001a16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8001a22:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a46:	4619      	mov	r1, r3
 8001a48:	482d      	ldr	r0, [pc, #180]	@ (8001b00 <HAL_SPI_MspInit+0x208>)
 8001a4a:	f001 fb49 	bl	80030e0 <HAL_GPIO_Init>
}
 8001a4e:	e04b      	b.n	8001ae8 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI3)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2b      	ldr	r2, [pc, #172]	@ (8001b04 <HAL_SPI_MspInit+0x20c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d146      	bne.n	8001ae8 <HAL_SPI_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001a5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fe2b 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 8001a7c:	f7ff fe34 	bl	80016e8 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001a82:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a86:	4a1b      	ldr	r2, [pc, #108]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a8c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001a92:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001aa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001aa4:	4a13      	ldr	r2, [pc, #76]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_SPI_MspInit+0x1fc>)
 8001ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8001abc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001adc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4809      	ldr	r0, [pc, #36]	@ (8001b08 <HAL_SPI_MspInit+0x210>)
 8001ae4:	f001 fafc 	bl	80030e0 <HAL_GPIO_Init>
}
 8001ae8:	bf00      	nop
 8001aea:	37f8      	adds	r7, #248	@ 0xf8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40013000 	.word	0x40013000
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58020000 	.word	0x58020000
 8001afc:	40003800 	.word	0x40003800
 8001b00:	58020400 	.word	0x58020400
 8001b04:	40003c00 	.word	0x40003c00
 8001b08:	58020800 	.word	0x58020800

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_MspInit+0x30>)
 8001b14:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b18:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <HAL_MspInit+0x30>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_MspInit+0x30>)
 8001b24:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	58024400 	.word	0x58024400

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <NMI_Handler+0x4>

08001b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <HardFault_Handler+0x4>

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <MemManage_Handler+0x4>

08001b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <BusFault_Handler+0x4>

08001b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <UsageFault_Handler+0x4>

08001b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b96:	f000 fd9f 	bl	80026d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <SystemInit+0xd0>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001baa:	4a31      	ldr	r2, [pc, #196]	@ (8001c70 <SystemInit+0xd0>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c74 <SystemInit+0xd4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d807      	bhi.n	8001bd0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <SystemInit+0xd4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 030f 	bic.w	r3, r3, #15
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <SystemInit+0xd4>)
 8001bca:	f043 0303 	orr.w	r3, r3, #3
 8001bce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bd0:	4b29      	ldr	r3, [pc, #164]	@ (8001c78 <SystemInit+0xd8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a28      	ldr	r2, [pc, #160]	@ (8001c78 <SystemInit+0xd8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bdc:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <SystemInit+0xd8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001be2:	4b25      	ldr	r3, [pc, #148]	@ (8001c78 <SystemInit+0xd8>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4924      	ldr	r1, [pc, #144]	@ (8001c78 <SystemInit+0xd8>)
 8001be8:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <SystemInit+0xdc>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bee:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <SystemInit+0xd4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <SystemInit+0xd4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 030f 	bic.w	r3, r3, #15
 8001c02:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <SystemInit+0xd4>)
 8001c04:	f043 0303 	orr.w	r3, r3, #3
 8001c08:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <SystemInit+0xd8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <SystemInit+0xd8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <SystemInit+0xd8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <SystemInit+0xd8>)
 8001c1e:	4a18      	ldr	r2, [pc, #96]	@ (8001c80 <SystemInit+0xe0>)
 8001c20:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <SystemInit+0xd8>)
 8001c24:	4a17      	ldr	r2, [pc, #92]	@ (8001c84 <SystemInit+0xe4>)
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <SystemInit+0xd8>)
 8001c2a:	4a17      	ldr	r2, [pc, #92]	@ (8001c88 <SystemInit+0xe8>)
 8001c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <SystemInit+0xd8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c34:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <SystemInit+0xd8>)
 8001c36:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <SystemInit+0xe8>)
 8001c38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <SystemInit+0xd8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c40:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <SystemInit+0xd8>)
 8001c42:	4a11      	ldr	r2, [pc, #68]	@ (8001c88 <SystemInit+0xe8>)
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <SystemInit+0xd8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <SystemInit+0xd8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <SystemInit+0xd8>)
 8001c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <SystemInit+0xd8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <SystemInit+0xec>)
 8001c60:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	52002000 	.word	0x52002000
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c80:	02020200 	.word	0x02020200
 8001c84:	01ff0000 	.word	0x01ff0000
 8001c88:	01010280 	.word	0x01010280
 8001c8c:	52004000 	.word	0x52004000

08001c90 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cb4:	4b33      	ldr	r3, [pc, #204]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001cb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8001cbc:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001cbe:	f240 1217 	movw	r2, #279	@ 0x117
 8001cc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8001cca:	4b2e      	ldr	r3, [pc, #184]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001ccc:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001cd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cde:	4829      	ldr	r0, [pc, #164]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001ce0:	f005 f998 	bl	8007014 <HAL_TIM_PWM_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001cea:	f7ff fcfd 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4821      	ldr	r0, [pc, #132]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001cfe:	f005 fe71 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001d08:	f7ff fcee 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0c:	2360      	movs	r3, #96	@ 0x60
 8001d0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4619      	mov	r1, r3
 8001d22:	4818      	ldr	r0, [pc, #96]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001d24:	f005 f9ce 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001d2e:	f7ff fcdb 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	2204      	movs	r2, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4812      	ldr	r0, [pc, #72]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001d3a:	f005 f9c3 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001d44:	f7ff fcd0 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480d      	ldr	r0, [pc, #52]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001d50:	f005 f9b8 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8001d5a:	f7ff fcc5 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	220c      	movs	r2, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	4807      	ldr	r0, [pc, #28]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001d66:	f005 f9ad 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8001d70:	f7ff fcba 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d74:	4803      	ldr	r0, [pc, #12]	@ (8001d84 <MX_TIM2_Init+0xf4>)
 8001d76:	f000 f97d 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	@ 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	24000340 	.word	0x24000340

08001d88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
 8001da8:	615a      	str	r2, [r3, #20]
 8001daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001dae:	4a28      	ldr	r2, [pc, #160]	@ (8001e50 <MX_TIM3_Init+0xc8>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001db4:	f240 1217 	movw	r2, #279	@ 0x117
 8001db8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8001dc0:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001dc2:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001dc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001dd0:	2280      	movs	r2, #128	@ 0x80
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dd4:	481d      	ldr	r0, [pc, #116]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001dd6:	f005 f91d 	bl	8007014 <HAL_TIM_PWM_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001de0:	f7ff fc82 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	4816      	ldr	r0, [pc, #88]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001df4:	f005 fdf6 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001dfe:	f7ff fc73 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e02:	2360      	movs	r3, #96	@ 0x60
 8001e04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e12:	463b      	mov	r3, r7
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	480c      	ldr	r0, [pc, #48]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001e1a:	f005 f953 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001e24:	f7ff fc60 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e28:	463b      	mov	r3, r7
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4807      	ldr	r0, [pc, #28]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001e30:	f005 f948 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001e3a:	f7ff fc55 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e3e:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <MX_TIM3_Init+0xc4>)
 8001e40:	f000 f918 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	@ 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2400038c 	.word	0x2400038c
 8001e50:	40000400 	.word	0x40000400

08001e54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e66:	463b      	mov	r3, r7
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
 8001e74:	615a      	str	r2, [r3, #20]
 8001e76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e78:	4b32      	ldr	r3, [pc, #200]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001e7a:	4a33      	ldr	r2, [pc, #204]	@ (8001f48 <MX_TIM4_Init+0xf4>)
 8001e7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8001e7e:	4b31      	ldr	r3, [pc, #196]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001e80:	f240 1217 	movw	r2, #279	@ 0x117
 8001e84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e86:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001e8e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001e92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e94:	4b2b      	ldr	r3, [pc, #172]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ea0:	4828      	ldr	r0, [pc, #160]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001ea2:	f005 f8b7 	bl	8007014 <HAL_TIM_PWM_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001eac:	f7ff fc1c 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4821      	ldr	r0, [pc, #132]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001ec0:	f005 fd90 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001eca:	f7ff fc0d 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ece:	2360      	movs	r3, #96	@ 0x60
 8001ed0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ede:	463b      	mov	r3, r7
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4817      	ldr	r0, [pc, #92]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001ee6:	f005 f8ed 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001ef0:	f7ff fbfa 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4812      	ldr	r0, [pc, #72]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001efc:	f005 f8e2 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001f06:	f7ff fbef 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001f12:	f005 f8d7 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8001f1c:	f7ff fbe4 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f20:	463b      	mov	r3, r7
 8001f22:	220c      	movs	r2, #12
 8001f24:	4619      	mov	r1, r3
 8001f26:	4807      	ldr	r0, [pc, #28]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001f28:	f005 f8cc 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8001f32:	f7ff fbd9 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f36:	4803      	ldr	r0, [pc, #12]	@ (8001f44 <MX_TIM4_Init+0xf0>)
 8001f38:	f000 f89c 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	@ 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	240003d8 	.word	0x240003d8
 8001f48:	40000800 	.word	0x40000800

08001f4c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <MX_TIM13_Init+0x40>)
 8001f52:	4a0f      	ldr	r2, [pc, #60]	@ (8001f90 <MX_TIM13_Init+0x44>)
 8001f54:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <MX_TIM13_Init+0x40>)
 8001f58:	f240 1217 	movw	r2, #279	@ 0x117
 8001f5c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <MX_TIM13_Init+0x40>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <MX_TIM13_Init+0x40>)
 8001f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f6a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <MX_TIM13_Init+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_TIM13_Init+0x40>)
 8001f74:	2280      	movs	r2, #128	@ 0x80
 8001f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <MX_TIM13_Init+0x40>)
 8001f7a:	f004 fff4 	bl	8006f66 <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001f84:	f7ff fbb0 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	24000424 	.word	0x24000424
 8001f90:	40001c00 	.word	0x40001c00

08001f94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <HAL_TIM_PWM_MspInit+0x90>)
 8001fa8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001fac:	4a1d      	ldr	r2, [pc, #116]	@ (8002024 <HAL_TIM_PWM_MspInit+0x90>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_TIM_PWM_MspInit+0x90>)
 8001fb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001fc4:	e028      	b.n	8002018 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a17      	ldr	r2, [pc, #92]	@ (8002028 <HAL_TIM_PWM_MspInit+0x94>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d10f      	bne.n	8001ff0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd0:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <HAL_TIM_PWM_MspInit+0x90>)
 8001fd2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001fd6:	4a13      	ldr	r2, [pc, #76]	@ (8002024 <HAL_TIM_PWM_MspInit+0x90>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001fe0:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <HAL_TIM_PWM_MspInit+0x90>)
 8001fe2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
}
 8001fee:	e013      	b.n	8002018 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <HAL_TIM_PWM_MspInit+0x98>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_TIM_PWM_MspInit+0x90>)
 8001ffc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002000:	4a08      	ldr	r2, [pc, #32]	@ (8002024 <HAL_TIM_PWM_MspInit+0x90>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_TIM_PWM_MspInit+0x90>)
 800200c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	58024400 	.word	0x58024400
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800

08002030 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0b      	ldr	r2, [pc, #44]	@ (800206c <HAL_TIM_Base_MspInit+0x3c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002042:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_TIM_Base_MspInit+0x40>)
 8002044:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002048:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <HAL_TIM_Base_MspInit+0x40>)
 800204a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800204e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002052:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <HAL_TIM_Base_MspInit+0x40>)
 8002054:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40001c00 	.word	0x40001c00
 8002070:	58024400 	.word	0x58024400

08002074 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	@ 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002094:	d13f      	bne.n	8002116 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b47      	ldr	r3, [pc, #284]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 8002098:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800209c:	4a45      	ldr	r2, [pc, #276]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80020a6:	4b43      	ldr	r3, [pc, #268]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 80020a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	4b3f      	ldr	r3, [pc, #252]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 80020b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80020ba:	4a3e      	ldr	r2, [pc, #248]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80020c4:	4b3b      	ldr	r3, [pc, #236]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 80020c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80020d2:	f248 030c 	movw	r3, #32780	@ 0x800c
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020e4:	2301      	movs	r3, #1
 80020e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	4832      	ldr	r0, [pc, #200]	@ (80021b8 <HAL_TIM_MspPostInit+0x144>)
 80020f0:	f000 fff6 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020f4:	2308      	movs	r3, #8
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002104:	2301      	movs	r3, #1
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4619      	mov	r1, r3
 800210e:	482b      	ldr	r0, [pc, #172]	@ (80021bc <HAL_TIM_MspPostInit+0x148>)
 8002110:	f000 ffe6 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002114:	e049      	b.n	80021aa <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a29      	ldr	r2, [pc, #164]	@ (80021c0 <HAL_TIM_MspPostInit+0x14c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d11f      	bne.n	8002160 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	4b24      	ldr	r3, [pc, #144]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 8002122:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002126:	4a23      	ldr	r2, [pc, #140]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002130:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 8002132:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800213e:	2330      	movs	r3, #48	@ 0x30
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800214e:	2302      	movs	r3, #2
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	4619      	mov	r1, r3
 8002158:	4818      	ldr	r0, [pc, #96]	@ (80021bc <HAL_TIM_MspPostInit+0x148>)
 800215a:	f000 ffc1 	bl	80030e0 <HAL_GPIO_Init>
}
 800215e:	e024      	b.n	80021aa <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a17      	ldr	r2, [pc, #92]	@ (80021c4 <HAL_TIM_MspPostInit+0x150>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d11f      	bne.n	80021aa <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 800216c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002170:	4a10      	ldr	r2, [pc, #64]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_TIM_MspPostInit+0x140>)
 800217c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002188:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800219a:	2302      	movs	r3, #2
 800219c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	@ (80021bc <HAL_TIM_MspPostInit+0x148>)
 80021a6:	f000 ff9b 	bl	80030e0 <HAL_GPIO_Init>
}
 80021aa:	bf00      	nop
 80021ac:	3730      	adds	r7, #48	@ 0x30
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	58024400 	.word	0x58024400
 80021b8:	58020000 	.word	0x58020000
 80021bc:	58020400 	.word	0x58020400
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800

080021c8 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80021cc:	4b22      	ldr	r3, [pc, #136]	@ (8002258 <MX_UART4_Init+0x90>)
 80021ce:	4a23      	ldr	r2, [pc, #140]	@ (800225c <MX_UART4_Init+0x94>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80021d2:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <MX_UART4_Init+0x90>)
 80021d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <MX_UART4_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <MX_UART4_Init+0x90>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <MX_UART4_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <MX_UART4_Init+0x90>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <MX_UART4_Init+0x90>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <MX_UART4_Init+0x90>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <MX_UART4_Init+0x90>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <MX_UART4_Init+0x90>)
 8002206:	2200      	movs	r2, #0
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <MX_UART4_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002210:	4811      	ldr	r0, [pc, #68]	@ (8002258 <MX_UART4_Init+0x90>)
 8002212:	f005 fc75 	bl	8007b00 <HAL_UART_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800221c:	f7ff fa64 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002220:	2100      	movs	r1, #0
 8002222:	480d      	ldr	r0, [pc, #52]	@ (8002258 <MX_UART4_Init+0x90>)
 8002224:	f006 fd81 	bl	8008d2a <HAL_UARTEx_SetTxFifoThreshold>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800222e:	f7ff fa5b 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002232:	2100      	movs	r1, #0
 8002234:	4808      	ldr	r0, [pc, #32]	@ (8002258 <MX_UART4_Init+0x90>)
 8002236:	f006 fdb6 	bl	8008da6 <HAL_UARTEx_SetRxFifoThreshold>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002240:	f7ff fa52 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	@ (8002258 <MX_UART4_Init+0x90>)
 8002246:	f006 fd37 	bl	8008cb8 <HAL_UARTEx_DisableFifoMode>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002250:	f7ff fa4a 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	24000470 	.word	0x24000470
 800225c:	40004c00 	.word	0x40004c00

08002260 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002264:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 8002266:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <MX_USART1_UART_Init+0x94>)
 8002268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800226a:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 800226c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002272:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002278:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800227e:	4b1c      	ldr	r3, [pc, #112]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 8002286:	220c      	movs	r2, #12
 8002288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228a:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002290:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800229c:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 800229e:	2200      	movs	r2, #0
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a2:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022a8:	4811      	ldr	r0, [pc, #68]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 80022aa:	f005 fc29 	bl	8007b00 <HAL_UART_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80022b4:	f7ff fa18 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022b8:	2100      	movs	r1, #0
 80022ba:	480d      	ldr	r0, [pc, #52]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 80022bc:	f006 fd35 	bl	8008d2a <HAL_UARTEx_SetTxFifoThreshold>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022c6:	f7ff fa0f 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ca:	2100      	movs	r1, #0
 80022cc:	4808      	ldr	r0, [pc, #32]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 80022ce:	f006 fd6a 	bl	8008da6 <HAL_UARTEx_SetRxFifoThreshold>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022d8:	f7ff fa06 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022dc:	4804      	ldr	r0, [pc, #16]	@ (80022f0 <MX_USART1_UART_Init+0x90>)
 80022de:	f006 fceb 	bl	8008cb8 <HAL_UARTEx_DisableFifoMode>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022e8:	f7ff f9fe 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	24000504 	.word	0x24000504
 80022f4:	40011000 	.word	0x40011000

080022f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022fc:	4b22      	ldr	r3, [pc, #136]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 80022fe:	4a23      	ldr	r2, [pc, #140]	@ (800238c <MX_USART6_UART_Init+0x94>)
 8002300:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002302:	4b21      	ldr	r3, [pc, #132]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002304:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002308:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800230a:	4b1f      	ldr	r3, [pc, #124]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002310:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002316:	4b1c      	ldr	r3, [pc, #112]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800231c:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 800231e:	220c      	movs	r2, #12
 8002320:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002322:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002328:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002334:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002336:	2200      	movs	r2, #0
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800233a:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 800233c:	2200      	movs	r2, #0
 800233e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002340:	4811      	ldr	r0, [pc, #68]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002342:	f005 fbdd 	bl	8007b00 <HAL_UART_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800234c:	f7ff f9cc 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002350:	2100      	movs	r1, #0
 8002352:	480d      	ldr	r0, [pc, #52]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002354:	f006 fce9 	bl	8008d2a <HAL_UARTEx_SetTxFifoThreshold>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800235e:	f7ff f9c3 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002362:	2100      	movs	r1, #0
 8002364:	4808      	ldr	r0, [pc, #32]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002366:	f006 fd1e 	bl	8008da6 <HAL_UARTEx_SetRxFifoThreshold>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002370:	f7ff f9ba 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002374:	4804      	ldr	r0, [pc, #16]	@ (8002388 <MX_USART6_UART_Init+0x90>)
 8002376:	f006 fc9f 	bl	8008cb8 <HAL_UARTEx_DisableFifoMode>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002380:	f7ff f9b2 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	24000598 	.word	0x24000598
 800238c:	40011400 	.word	0x40011400

08002390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0be      	sub	sp, #248	@ 0xf8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a8:	f107 0320 	add.w	r3, r7, #32
 80023ac:	22c0      	movs	r2, #192	@ 0xc0
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f006 fd85 	bl	8008ec0 <memset>
  if(uartHandle->Instance==UART4)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a73      	ldr	r2, [pc, #460]	@ (8002588 <HAL_UART_MspInit+0x1f8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d146      	bne.n	800244e <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80023c0:	f04f 0202 	mov.w	r2, #2
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d2:	f107 0320 	add.w	r3, r7, #32
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 f978 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023e2:	f7ff f981 	bl	80016e8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80023e6:	4b69      	ldr	r3, [pc, #420]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 80023e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80023ec:	4a67      	ldr	r2, [pc, #412]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 80023ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80023f2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80023f6:	4b65      	ldr	r3, [pc, #404]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 80023f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80023fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	4b61      	ldr	r3, [pc, #388]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 8002406:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800240a:	4a60      	ldr	r2, [pc, #384]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002414:	4b5d      	ldr	r3, [pc, #372]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 8002416:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002422:	2303      	movs	r3, #3
 8002424:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800243a:	2308      	movs	r3, #8
 800243c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002444:	4619      	mov	r1, r3
 8002446:	4852      	ldr	r0, [pc, #328]	@ (8002590 <HAL_UART_MspInit+0x200>)
 8002448:	f000 fe4a 	bl	80030e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800244c:	e097      	b.n	800257e <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a50      	ldr	r2, [pc, #320]	@ (8002594 <HAL_UART_MspInit+0x204>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d147      	bne.n	80024e8 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002458:	f04f 0201 	mov.w	r2, #1
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800246a:	f107 0320 	add.w	r3, r7, #32
 800246e:	4618      	mov	r0, r3
 8002470:	f002 f92c 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_UART_MspInit+0xee>
      Error_Handler();
 800247a:	f7ff f935 	bl	80016e8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800247e:	4b43      	ldr	r3, [pc, #268]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 8002480:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002484:	4a41      	ldr	r2, [pc, #260]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 8002486:	f043 0310 	orr.w	r3, r3, #16
 800248a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800248e:	4b3f      	ldr	r3, [pc, #252]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 8002490:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249c:	4b3b      	ldr	r3, [pc, #236]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 800249e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024a2:	4a3a      	ldr	r2, [pc, #232]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024ac:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 80024ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 80024ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024d4:	2307      	movs	r3, #7
 80024d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80024de:	4619      	mov	r1, r3
 80024e0:	482b      	ldr	r0, [pc, #172]	@ (8002590 <HAL_UART_MspInit+0x200>)
 80024e2:	f000 fdfd 	bl	80030e0 <HAL_GPIO_Init>
}
 80024e6:	e04a      	b.n	800257e <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART6)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002598 <HAL_UART_MspInit+0x208>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d145      	bne.n	800257e <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80024f2:	f04f 0201 	mov.w	r2, #1
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002504:	f107 0320 	add.w	r3, r7, #32
 8002508:	4618      	mov	r0, r3
 800250a:	f002 f8df 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8002514:	f7ff f8e8 	bl	80016e8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002518:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 800251a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800251e:	4a1b      	ldr	r2, [pc, #108]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002528:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 800252a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 8002538:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800253c:	4a13      	ldr	r2, [pc, #76]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_UART_MspInit+0x1fc>)
 8002548:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002554:	23c0      	movs	r3, #192	@ 0xc0
 8002556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800256c:	2307      	movs	r3, #7
 800256e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002572:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002576:	4619      	mov	r1, r3
 8002578:	4808      	ldr	r0, [pc, #32]	@ (800259c <HAL_UART_MspInit+0x20c>)
 800257a:	f000 fdb1 	bl	80030e0 <HAL_GPIO_Init>
}
 800257e:	bf00      	nop
 8002580:	37f8      	adds	r7, #248	@ 0xf8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40004c00 	.word	0x40004c00
 800258c:	58024400 	.word	0x58024400
 8002590:	58020000 	.word	0x58020000
 8002594:	40011000 	.word	0x40011000
 8002598:	40011400 	.word	0x40011400
 800259c:	58020800 	.word	0x58020800

080025a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025a4:	f7ff fafc 	bl	8001ba0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480c      	ldr	r0, [pc, #48]	@ (80025dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025aa:	490d      	ldr	r1, [pc, #52]	@ (80025e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025ac:	4a0d      	ldr	r2, [pc, #52]	@ (80025e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c0:	4c0a      	ldr	r4, [pc, #40]	@ (80025ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80025ce:	f006 fc85 	bl	8008edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d2:	f7fe ffbb 	bl	800154c <main>
  bx  lr
 80025d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025d8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80025dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025e0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80025e4:	08009ad8 	.word	0x08009ad8
  ldr r2, =_sbss
 80025e8:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80025ec:	24000768 	.word	0x24000768

080025f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC_IRQHandler>
	...

080025f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fa:	2003      	movs	r0, #3
 80025fc:	f000 f962 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002600:	f001 fe8e 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_Init+0x68>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	4913      	ldr	r1, [pc, #76]	@ (8002660 <HAL_Init+0x6c>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800261e:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <HAL_Init+0x68>)
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	4a0e      	ldr	r2, [pc, #56]	@ (8002660 <HAL_Init+0x6c>)
 8002628:	5cd3      	ldrb	r3, [r2, r3]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	4a0b      	ldr	r2, [pc, #44]	@ (8002664 <HAL_Init+0x70>)
 8002636:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002638:	4a0b      	ldr	r2, [pc, #44]	@ (8002668 <HAL_Init+0x74>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800263e:	200f      	movs	r0, #15
 8002640:	f000 f814 	bl	800266c <HAL_InitTick>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e002      	b.n	8002654 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800264e:	f7ff fa5d 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	58024400 	.word	0x58024400
 8002660:	080091fc 	.word	0x080091fc
 8002664:	24000004 	.word	0x24000004
 8002668:	24000000 	.word	0x24000000

0800266c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002674:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_InitTick+0x60>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e021      	b.n	80026c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002680:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <HAL_InitTick+0x64>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <HAL_InitTick+0x60>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800268e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f939 	bl	800290e <HAL_SYSTICK_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00e      	b.n	80026c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d80a      	bhi.n	80026c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f000 f911 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b8:	4a06      	ldr	r2, [pc, #24]	@ (80026d4 <HAL_InitTick+0x68>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2400000c 	.word	0x2400000c
 80026d0:	24000000 	.word	0x24000000
 80026d4:	24000008 	.word	0x24000008

080026d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_IncTick+0x20>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_IncTick+0x24>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a04      	ldr	r2, [pc, #16]	@ (80026fc <HAL_IncTick+0x24>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	2400000c 	.word	0x2400000c
 80026fc:	2400062c 	.word	0x2400062c

08002700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <HAL_GetTick+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	2400062c 	.word	0x2400062c

08002718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff ffee 	bl	8002700 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d005      	beq.n	800273e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002732:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <HAL_Delay+0x44>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800273e:	bf00      	nop
 8002740:	f7ff ffde 	bl	8002700 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d8f7      	bhi.n	8002740 <HAL_Delay+0x28>
  {
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2400000c 	.word	0x2400000c

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	4313      	orrs	r3, r2
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	@ (80027a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	05fa0000 	.word	0x05fa0000

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	@ (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	@ (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	@ 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff47 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff5e 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff90 	bl	8002818 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5f 	bl	80027c4 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ffb2 	bl	8002880 <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800292c:	f3bf 8f5f 	dmb	sy
}
 8002930:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002932:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <HAL_MPU_Disable+0x28>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <HAL_MPU_Disable+0x28>)
 8002938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800293c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800293e:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <HAL_MPU_Disable+0x2c>)
 8002940:	2200      	movs	r2, #0
 8002942:	605a      	str	r2, [r3, #4]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000ed00 	.word	0xe000ed00
 8002954:	e000ed90 	.word	0xe000ed90

08002958 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002960:	4a0b      	ldr	r2, [pc, #44]	@ (8002990 <HAL_MPU_Enable+0x38>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800296a:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <HAL_MPU_Enable+0x3c>)
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	4a09      	ldr	r2, [pc, #36]	@ (8002994 <HAL_MPU_Enable+0x3c>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002974:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002976:	f3bf 8f4f 	dsb	sy
}
 800297a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800297c:	f3bf 8f6f 	isb	sy
}
 8002980:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000ed90 	.word	0xe000ed90
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	785a      	ldrb	r2, [r3, #1]
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_MPU_ConfigRegion+0x7c>)
 80029a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80029a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <HAL_MPU_ConfigRegion+0x7c>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4a19      	ldr	r2, [pc, #100]	@ (8002a14 <HAL_MPU_ConfigRegion+0x7c>)
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80029b4:	4a17      	ldr	r2, [pc, #92]	@ (8002a14 <HAL_MPU_ConfigRegion+0x7c>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7b1b      	ldrb	r3, [r3, #12]
 80029c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7adb      	ldrb	r3, [r3, #11]
 80029c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7a9b      	ldrb	r3, [r3, #10]
 80029ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7b5b      	ldrb	r3, [r3, #13]
 80029d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7b9b      	ldrb	r3, [r3, #14]
 80029de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7bdb      	ldrb	r3, [r3, #15]
 80029e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7a5b      	ldrb	r3, [r3, #9]
 80029ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7a1b      	ldrb	r3, [r3, #8]
 80029f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a00:	4a04      	ldr	r2, [pc, #16]	@ (8002a14 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a02:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a04:	6113      	str	r3, [r2, #16]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000ed90 	.word	0xe000ed90

08002a18 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b098      	sub	sp, #96	@ 0x60
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002a20:	4a84      	ldr	r2, [pc, #528]	@ (8002c34 <HAL_FDCAN_Init+0x21c>)
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	4611      	mov	r1, r2
 8002a28:	224c      	movs	r2, #76	@ 0x4c
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f006 fa7a 	bl	8008f24 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1c6      	b.n	8002dc8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c38 <HAL_FDCAN_Init+0x220>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d106      	bne.n	8002a52 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe fb96 	bl	8001198 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0210 	bic.w	r2, r2, #16
 8002a7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a7c:	f7ff fe40 	bl	8002700 <HAL_GetTick>
 8002a80:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a82:	e014      	b.n	8002aae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a84:	f7ff fe3c 	bl	8002700 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b0a      	cmp	r3, #10
 8002a90:	d90d      	bls.n	8002aae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e18c      	b.n	8002dc8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d0e3      	beq.n	8002a84 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002acc:	f7ff fe18 	bl	8002700 <HAL_GetTick>
 8002ad0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ad2:	e014      	b.n	8002afe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ad4:	f7ff fe14 	bl	8002700 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b0a      	cmp	r3, #10
 8002ae0:	d90d      	bls.n	8002afe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2203      	movs	r2, #3
 8002af6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e164      	b.n	8002dc8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0e3      	beq.n	8002ad4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0202 	orr.w	r2, r2, #2
 8002b1a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7c1b      	ldrb	r3, [r3, #16]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d108      	bne.n	8002b36 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	e007      	b.n	8002b46 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b44:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7c5b      	ldrb	r3, [r3, #17]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d108      	bne.n	8002b60 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	e007      	b.n	8002b70 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7c9b      	ldrb	r3, [r3, #18]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d108      	bne.n	8002b8a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b86:	619a      	str	r2, [r3, #24]
 8002b88:	e007      	b.n	8002b9a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b98:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002bbe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0210 	bic.w	r2, r2, #16
 8002bce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d108      	bne.n	8002bea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0204 	orr.w	r2, r2, #4
 8002be6:	619a      	str	r2, [r3, #24]
 8002be8:	e030      	b.n	8002c4c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d02c      	beq.n	8002c4c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d020      	beq.n	8002c3c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c08:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0210 	orr.w	r2, r2, #16
 8002c18:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d114      	bne.n	8002c4c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699a      	ldr	r2, [r3, #24]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0220 	orr.w	r2, r2, #32
 8002c30:	619a      	str	r2, [r3, #24]
 8002c32:	e00b      	b.n	8002c4c <HAL_FDCAN_Init+0x234>
 8002c34:	080091b0 	.word	0x080091b0
 8002c38:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c5c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c64:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c74:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c76:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c80:	d115      	bne.n	8002cae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c90:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	3b01      	subs	r3, #1
 8002c98:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c9a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002caa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd4:	4413      	add	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d011      	beq.n	8002cfe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002ce2:	f023 0107 	bic.w	r1, r3, #7
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	3360      	adds	r3, #96	@ 0x60
 8002cee:	443b      	add	r3, r7
 8002cf0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d011      	beq.n	8002d2a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002d0e:	f023 0107 	bic.w	r1, r3, #7
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	3360      	adds	r3, #96	@ 0x60
 8002d1a:	443b      	add	r3, r7
 8002d1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d012      	beq.n	8002d58 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002d3a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	3360      	adds	r3, #96	@ 0x60
 8002d46:	443b      	add	r3, r7
 8002d48:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002d4c:	011a      	lsls	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d012      	beq.n	8002d86 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002d68:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	3360      	adds	r3, #96	@ 0x60
 8002d74:	443b      	add	r3, r7
 8002d76:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002d7a:	021a      	lsls	r2, r3, #8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a11      	ldr	r2, [pc, #68]	@ (8002dd0 <HAL_FDCAN_Init+0x3b8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d107      	bne.n	8002da0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f022 0203 	bic.w	r2, r2, #3
 8002d9e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f80b 	bl	8002dd4 <FDCAN_CalcultateRamBlockAddresses>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8002dc4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3760      	adds	r7, #96	@ 0x60
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	4000a000 	.word	0x4000a000

08002dd4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002dea:	4ba7      	ldr	r3, [pc, #668]	@ (8003088 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	0091      	lsls	r1, r2, #2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	430b      	orrs	r3, r1
 8002df8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e04:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	041a      	lsls	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	4413      	add	r3, r2
 8002e20:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002e2a:	4b97      	ldr	r3, [pc, #604]	@ (8003088 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	0091      	lsls	r1, r2, #2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	430b      	orrs	r3, r1
 8002e38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002e6c:	4b86      	ldr	r3, [pc, #536]	@ (8003088 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	0091      	lsls	r1, r2, #2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e86:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	041a      	lsls	r2, r3, #16
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002eb4:	4b74      	ldr	r3, [pc, #464]	@ (8003088 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	0091      	lsls	r1, r2, #2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ece:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed6:	041a      	lsls	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002efc:	4b62      	ldr	r3, [pc, #392]	@ (8003088 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	0091      	lsls	r1, r2, #2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002f28:	4b57      	ldr	r3, [pc, #348]	@ (8003088 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	0091      	lsls	r1, r2, #2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f42:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	041a      	lsls	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	4413      	add	r3, r2
 8002f60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f6a:	4b47      	ldr	r3, [pc, #284]	@ (8003088 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	0091      	lsls	r1, r2, #2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	430b      	orrs	r3, r1
 8002f78:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f84:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	041a      	lsls	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fa0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa8:	061a      	lsls	r2, r3, #24
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb8:	4b34      	ldr	r3, [pc, #208]	@ (800308c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	009a      	lsls	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	441a      	add	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800300c:	441a      	add	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003024:	441a      	add	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307e:	4a04      	ldr	r2, [pc, #16]	@ (8003090 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d915      	bls.n	80030b0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003084:	e006      	b.n	8003094 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003086:	bf00      	nop
 8003088:	ffff0003 	.word	0xffff0003
 800308c:	10002b00 	.word	0x10002b00
 8003090:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2203      	movs	r2, #3
 80030a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e010      	b.n	80030d2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e005      	b.n	80030c4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3304      	adds	r3, #4
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d3f3      	bcc.n	80030b8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	@ 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030ee:	4b89      	ldr	r3, [pc, #548]	@ (8003314 <HAL_GPIO_Init+0x234>)
 80030f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030f2:	e194      	b.n	800341e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8186 	beq.w	8003418 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d005      	beq.n	8003124 <HAL_GPIO_Init+0x44>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d130      	bne.n	8003186 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315a:	2201      	movs	r2, #1
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 0201 	and.w	r2, r3, #1
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b03      	cmp	r3, #3
 8003190:	d017      	beq.n	80031c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d123      	bne.n	8003216 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	08da      	lsrs	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3208      	adds	r2, #8
 80031d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	69b9      	ldr	r1, [r7, #24]
 8003212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0203 	and.w	r2, r3, #3
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80e0 	beq.w	8003418 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003258:	4b2f      	ldr	r3, [pc, #188]	@ (8003318 <HAL_GPIO_Init+0x238>)
 800325a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800325e:	4a2e      	ldr	r2, [pc, #184]	@ (8003318 <HAL_GPIO_Init+0x238>)
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003268:	4b2b      	ldr	r3, [pc, #172]	@ (8003318 <HAL_GPIO_Init+0x238>)
 800326a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003276:	4a29      	ldr	r2, [pc, #164]	@ (800331c <HAL_GPIO_Init+0x23c>)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a20      	ldr	r2, [pc, #128]	@ (8003320 <HAL_GPIO_Init+0x240>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d052      	beq.n	8003348 <HAL_GPIO_Init+0x268>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003324 <HAL_GPIO_Init+0x244>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <HAL_GPIO_Init+0x22e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003328 <HAL_GPIO_Init+0x248>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02b      	beq.n	800330a <HAL_GPIO_Init+0x22a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	@ (800332c <HAL_GPIO_Init+0x24c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d025      	beq.n	8003306 <HAL_GPIO_Init+0x226>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <HAL_GPIO_Init+0x250>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <HAL_GPIO_Init+0x222>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003334 <HAL_GPIO_Init+0x254>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d019      	beq.n	80032fe <HAL_GPIO_Init+0x21e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003338 <HAL_GPIO_Init+0x258>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0x21a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a19      	ldr	r2, [pc, #100]	@ (800333c <HAL_GPIO_Init+0x25c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00d      	beq.n	80032f6 <HAL_GPIO_Init+0x216>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a18      	ldr	r2, [pc, #96]	@ (8003340 <HAL_GPIO_Init+0x260>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <HAL_GPIO_Init+0x212>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a17      	ldr	r2, [pc, #92]	@ (8003344 <HAL_GPIO_Init+0x264>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_GPIO_Init+0x20e>
 80032ea:	2309      	movs	r3, #9
 80032ec:	e02d      	b.n	800334a <HAL_GPIO_Init+0x26a>
 80032ee:	230a      	movs	r3, #10
 80032f0:	e02b      	b.n	800334a <HAL_GPIO_Init+0x26a>
 80032f2:	2308      	movs	r3, #8
 80032f4:	e029      	b.n	800334a <HAL_GPIO_Init+0x26a>
 80032f6:	2307      	movs	r3, #7
 80032f8:	e027      	b.n	800334a <HAL_GPIO_Init+0x26a>
 80032fa:	2306      	movs	r3, #6
 80032fc:	e025      	b.n	800334a <HAL_GPIO_Init+0x26a>
 80032fe:	2305      	movs	r3, #5
 8003300:	e023      	b.n	800334a <HAL_GPIO_Init+0x26a>
 8003302:	2304      	movs	r3, #4
 8003304:	e021      	b.n	800334a <HAL_GPIO_Init+0x26a>
 8003306:	2303      	movs	r3, #3
 8003308:	e01f      	b.n	800334a <HAL_GPIO_Init+0x26a>
 800330a:	2302      	movs	r3, #2
 800330c:	e01d      	b.n	800334a <HAL_GPIO_Init+0x26a>
 800330e:	2301      	movs	r3, #1
 8003310:	e01b      	b.n	800334a <HAL_GPIO_Init+0x26a>
 8003312:	bf00      	nop
 8003314:	58000080 	.word	0x58000080
 8003318:	58024400 	.word	0x58024400
 800331c:	58000400 	.word	0x58000400
 8003320:	58020000 	.word	0x58020000
 8003324:	58020400 	.word	0x58020400
 8003328:	58020800 	.word	0x58020800
 800332c:	58020c00 	.word	0x58020c00
 8003330:	58021000 	.word	0x58021000
 8003334:	58021400 	.word	0x58021400
 8003338:	58021800 	.word	0x58021800
 800333c:	58021c00 	.word	0x58021c00
 8003340:	58022000 	.word	0x58022000
 8003344:	58022400 	.word	0x58022400
 8003348:	2300      	movs	r3, #0
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	f002 0203 	and.w	r2, r2, #3
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	4093      	lsls	r3, r2
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335a:	4938      	ldr	r1, [pc, #224]	@ (800343c <HAL_GPIO_Init+0x35c>)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	3302      	adds	r3, #2
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800338e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	3301      	adds	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	f47f ae63 	bne.w	80030f4 <HAL_GPIO_Init+0x14>
  }
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	3724      	adds	r7, #36	@ 0x24
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	58000400 	.word	0x58000400

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e08b      	b.n	800359e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd ffc6 	bl	800142c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	@ 0x24
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	e006      	b.n	80034fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d108      	bne.n	8003516 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	e007      	b.n	8003526 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003524:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b1d      	ldr	r3, [pc, #116]	@ (80035a8 <HAL_I2C_Init+0x134>)
 8003532:	430b      	orrs	r3, r1
 8003534:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003544:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69d9      	ldr	r1, [r3, #28]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	02008000 	.word	0x02008000

080035ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d138      	bne.n	8003634 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e032      	b.n	8003636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2224      	movs	r2, #36	@ 0x24
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
  }
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b20      	cmp	r3, #32
 8003656:	d139      	bne.n	80036cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003662:	2302      	movs	r3, #2
 8003664:	e033      	b.n	80036ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2224      	movs	r2, #36	@ 0x24
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003694:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036e4:	4b19      	ldr	r3, [pc, #100]	@ (800374c <HAL_PWREx_ConfigSupply+0x70>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d00a      	beq.n	8003706 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036f0:	4b16      	ldr	r3, [pc, #88]	@ (800374c <HAL_PWREx_ConfigSupply+0x70>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d001      	beq.n	8003702 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e01f      	b.n	8003742 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	e01d      	b.n	8003742 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003706:	4b11      	ldr	r3, [pc, #68]	@ (800374c <HAL_PWREx_ConfigSupply+0x70>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f023 0207 	bic.w	r2, r3, #7
 800370e:	490f      	ldr	r1, [pc, #60]	@ (800374c <HAL_PWREx_ConfigSupply+0x70>)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4313      	orrs	r3, r2
 8003714:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003716:	f7fe fff3 	bl	8002700 <HAL_GetTick>
 800371a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800371c:	e009      	b.n	8003732 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800371e:	f7fe ffef 	bl	8002700 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800372c:	d901      	bls.n	8003732 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e007      	b.n	8003742 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_PWREx_ConfigSupply+0x70>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373e:	d1ee      	bne.n	800371e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	58024800 	.word	0x58024800

08003750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	@ 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f000 bc1f 	b.w	8003fa2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80b3 	beq.w	80038d8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003772:	4b95      	ldr	r3, [pc, #596]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800377a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800377c:	4b92      	ldr	r3, [pc, #584]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800377e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	2b10      	cmp	r3, #16
 8003786:	d007      	beq.n	8003798 <HAL_RCC_OscConfig+0x48>
 8003788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378a:	2b18      	cmp	r3, #24
 800378c:	d112      	bne.n	80037b4 <HAL_RCC_OscConfig+0x64>
 800378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d10d      	bne.n	80037b4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	4b8b      	ldr	r3, [pc, #556]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8098 	beq.w	80038d6 <HAL_RCC_OscConfig+0x186>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 8093 	bne.w	80038d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e3f6      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037bc:	d106      	bne.n	80037cc <HAL_RCC_OscConfig+0x7c>
 80037be:	4b82      	ldr	r3, [pc, #520]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a81      	ldr	r2, [pc, #516]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e058      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d112      	bne.n	80037fa <HAL_RCC_OscConfig+0xaa>
 80037d4:	4b7c      	ldr	r3, [pc, #496]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a7b      	ldr	r2, [pc, #492]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80037da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b79      	ldr	r3, [pc, #484]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a78      	ldr	r2, [pc, #480]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80037e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b76      	ldr	r3, [pc, #472]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a75      	ldr	r2, [pc, #468]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e041      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003802:	d112      	bne.n	800382a <HAL_RCC_OscConfig+0xda>
 8003804:	4b70      	ldr	r3, [pc, #448]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a6f      	ldr	r2, [pc, #444]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800380a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b6d      	ldr	r3, [pc, #436]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6c      	ldr	r2, [pc, #432]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003816:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b6a      	ldr	r3, [pc, #424]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a69      	ldr	r2, [pc, #420]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e029      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003832:	d112      	bne.n	800385a <HAL_RCC_OscConfig+0x10a>
 8003834:	4b64      	ldr	r3, [pc, #400]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a63      	ldr	r2, [pc, #396]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800383a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b61      	ldr	r3, [pc, #388]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a60      	ldr	r2, [pc, #384]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b5e      	ldr	r3, [pc, #376]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5d      	ldr	r2, [pc, #372]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e011      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
 800385a:	4b5b      	ldr	r3, [pc, #364]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a5a      	ldr	r2, [pc, #360]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b58      	ldr	r3, [pc, #352]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a57      	ldr	r2, [pc, #348]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800386c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b55      	ldr	r3, [pc, #340]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a54      	ldr	r2, [pc, #336]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003878:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800387c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d013      	beq.n	80038ae <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fe ff3b 	bl	8002700 <HAL_GetTick>
 800388a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388e:	f7fe ff37 	bl	8002700 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b64      	cmp	r3, #100	@ 0x64
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e380      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038a0:	4b49      	ldr	r3, [pc, #292]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x13e>
 80038ac:	e014      	b.n	80038d8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fe ff27 	bl	8002700 <HAL_GetTick>
 80038b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b6:	f7fe ff23 	bl	8002700 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b64      	cmp	r3, #100	@ 0x64
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e36c      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038c8:	4b3f      	ldr	r3, [pc, #252]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x166>
 80038d4:	e000      	b.n	80038d8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 808c 	beq.w	80039fe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e6:	4b38      	ldr	r3, [pc, #224]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038f0:	4b35      	ldr	r3, [pc, #212]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_RCC_OscConfig+0x1bc>
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	2b18      	cmp	r3, #24
 8003900:	d137      	bne.n	8003972 <HAL_RCC_OscConfig+0x222>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d132      	bne.n	8003972 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800390c:	4b2e      	ldr	r3, [pc, #184]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_OscConfig+0x1d4>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e33e      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003924:	4b28      	ldr	r3, [pc, #160]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 0219 	bic.w	r2, r3, #25
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4925      	ldr	r1, [pc, #148]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fe fee3 	bl	8002700 <HAL_GetTick>
 800393a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393e:	f7fe fedf 	bl	8002700 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e328      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003950:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395c:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	061b      	lsls	r3, r3, #24
 800396a:	4917      	ldr	r1, [pc, #92]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003970:	e045      	b.n	80039fe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d028      	beq.n	80039cc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800397a:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 0219 	bic.w	r2, r3, #25
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	4910      	ldr	r1, [pc, #64]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe feb8 	bl	8002700 <HAL_GetTick>
 8003990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003994:	f7fe feb4 	bl	8002700 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e2fd      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a6:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b2:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	061b      	lsls	r3, r3, #24
 80039c0:	4901      	ldr	r1, [pc, #4]	@ (80039c8 <HAL_RCC_OscConfig+0x278>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
 80039c6:	e01a      	b.n	80039fe <HAL_RCC_OscConfig+0x2ae>
 80039c8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039cc:	4b97      	ldr	r3, [pc, #604]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a96      	ldr	r2, [pc, #600]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe fe92 	bl	8002700 <HAL_GetTick>
 80039dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e0:	f7fe fe8e 	bl	8002700 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e2d7      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039f2:	4b8e      	ldr	r3, [pc, #568]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d06a      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0a:	4b88      	ldr	r3, [pc, #544]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a14:	4b85      	ldr	r3, [pc, #532]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d007      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2e0>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b18      	cmp	r3, #24
 8003a24:	d11b      	bne.n	8003a5e <HAL_RCC_OscConfig+0x30e>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d116      	bne.n	8003a5e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a30:	4b7e      	ldr	r3, [pc, #504]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2f8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	2b80      	cmp	r3, #128	@ 0x80
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e2ac      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a48:	4b78      	ldr	r3, [pc, #480]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	4975      	ldr	r1, [pc, #468]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a5c:	e040      	b.n	8003ae0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d023      	beq.n	8003aae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a66:	4b71      	ldr	r3, [pc, #452]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a70      	ldr	r2, [pc, #448]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fe fe45 	bl	8002700 <HAL_GetTick>
 8003a76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a7a:	f7fe fe41 	bl	8002700 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e28a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a8c:	4b67      	ldr	r3, [pc, #412]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a98:	4b64      	ldr	r3, [pc, #400]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	4961      	ldr	r1, [pc, #388]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60cb      	str	r3, [r1, #12]
 8003aac:	e018      	b.n	8003ae0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003aae:	4b5f      	ldr	r3, [pc, #380]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003ab4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fe fe21 	bl	8002700 <HAL_GetTick>
 8003abe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ac2:	f7fe fe1d 	bl	8002700 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e266      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ad4:	4b55      	ldr	r3, [pc, #340]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d036      	beq.n	8003b5a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d019      	beq.n	8003b28 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af4:	4b4d      	ldr	r3, [pc, #308]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af8:	4a4c      	ldr	r2, [pc, #304]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fe fdfe 	bl	8002700 <HAL_GetTick>
 8003b04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fe fdfa 	bl	8002700 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e243      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b1a:	4b44      	ldr	r3, [pc, #272]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x3b8>
 8003b26:	e018      	b.n	8003b5a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b28:	4b40      	ldr	r3, [pc, #256]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fe fde4 	bl	8002700 <HAL_GetTick>
 8003b38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3c:	f7fe fde0 	bl	8002700 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e229      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b4e:	4b37      	ldr	r3, [pc, #220]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d036      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d019      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2e      	ldr	r2, [pc, #184]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fdc1 	bl	8002700 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b82:	f7fe fdbd 	bl	8002700 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e206      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b94:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x432>
 8003ba0:	e018      	b.n	8003bd4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ba2:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a21      	ldr	r2, [pc, #132]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003ba8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bae:	f7fe fda7 	bl	8002700 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bb6:	f7fe fda3 	bl	8002700 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e1ec      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bc8:	4b18      	ldr	r3, [pc, #96]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f0      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80af 	beq.w	8003d40 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003be2:	4b13      	ldr	r3, [pc, #76]	@ (8003c30 <HAL_RCC_OscConfig+0x4e0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a12      	ldr	r2, [pc, #72]	@ (8003c30 <HAL_RCC_OscConfig+0x4e0>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bee:	f7fe fd87 	bl	8002700 <HAL_GetTick>
 8003bf2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf6:	f7fe fd83 	bl	8002700 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b64      	cmp	r3, #100	@ 0x64
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e1cc      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c08:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <HAL_RCC_OscConfig+0x4e0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4e4>
 8003c1c:	4b03      	ldr	r3, [pc, #12]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	4a02      	ldr	r2, [pc, #8]	@ (8003c2c <HAL_RCC_OscConfig+0x4dc>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c28:	e05b      	b.n	8003ce2 <HAL_RCC_OscConfig+0x592>
 8003c2a:	bf00      	nop
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	58024800 	.word	0x58024800
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d112      	bne.n	8003c62 <HAL_RCC_OscConfig+0x512>
 8003c3c:	4b9d      	ldr	r3, [pc, #628]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	4a9c      	ldr	r2, [pc, #624]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c48:	4b9a      	ldr	r3, [pc, #616]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4c:	4a99      	ldr	r2, [pc, #612]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c54:	4b97      	ldr	r3, [pc, #604]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	4a96      	ldr	r2, [pc, #600]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c5a:	f023 0304 	bic.w	r3, r3, #4
 8003c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c60:	e03f      	b.n	8003ce2 <HAL_RCC_OscConfig+0x592>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d112      	bne.n	8003c90 <HAL_RCC_OscConfig+0x540>
 8003c6a:	4b92      	ldr	r3, [pc, #584]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	4a91      	ldr	r2, [pc, #580]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c76:	4b8f      	ldr	r3, [pc, #572]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	4a8e      	ldr	r2, [pc, #568]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c82:	4b8c      	ldr	r3, [pc, #560]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	4a8b      	ldr	r2, [pc, #556]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8e:	e028      	b.n	8003ce2 <HAL_RCC_OscConfig+0x592>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b85      	cmp	r3, #133	@ 0x85
 8003c96:	d112      	bne.n	8003cbe <HAL_RCC_OscConfig+0x56e>
 8003c98:	4b86      	ldr	r3, [pc, #536]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	4a85      	ldr	r2, [pc, #532]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca4:	4b83      	ldr	r3, [pc, #524]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	4a82      	ldr	r2, [pc, #520]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb0:	4b80      	ldr	r3, [pc, #512]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb4:	4a7f      	ldr	r2, [pc, #508]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbc:	e011      	b.n	8003ce2 <HAL_RCC_OscConfig+0x592>
 8003cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cca:	4b7a      	ldr	r3, [pc, #488]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	4a79      	ldr	r2, [pc, #484]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003cd0:	f023 0304 	bic.w	r3, r3, #4
 8003cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd6:	4b77      	ldr	r3, [pc, #476]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	4a76      	ldr	r2, [pc, #472]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003cdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d015      	beq.n	8003d16 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fe fd09 	bl	8002700 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fe fd05 	bl	8002700 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e14c      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d08:	4b6a      	ldr	r3, [pc, #424]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ee      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x5a2>
 8003d14:	e014      	b.n	8003d40 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fe fcf3 	bl	8002700 <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fe fcef 	bl	8002700 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e136      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d34:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ee      	bne.n	8003d1e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 812b 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d52:	2b18      	cmp	r3, #24
 8003d54:	f000 80bb 	beq.w	8003ece <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	f040 8095 	bne.w	8003e8c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b54      	ldr	r3, [pc, #336]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a53      	ldr	r2, [pc, #332]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fe fcc7 	bl	8002700 <HAL_GetTick>
 8003d72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fe fcc3 	bl	8002700 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e10c      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d88:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d94:	4b47      	ldr	r3, [pc, #284]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d98:	4b47      	ldr	r3, [pc, #284]	@ (8003eb8 <HAL_RCC_OscConfig+0x768>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	430a      	orrs	r2, r1
 8003da8:	4942      	ldr	r1, [pc, #264]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	628b      	str	r3, [r1, #40]	@ 0x28
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	3b01      	subs	r3, #1
 8003db4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	025b      	lsls	r3, r3, #9
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003dde:	4935      	ldr	r1, [pc, #212]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003de4:	4b33      	ldr	r3, [pc, #204]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	4a32      	ldr	r2, [pc, #200]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003df0:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003df4:	4b31      	ldr	r3, [pc, #196]	@ (8003ebc <HAL_RCC_OscConfig+0x76c>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003dfc:	00d2      	lsls	r2, r2, #3
 8003dfe:	492d      	ldr	r1, [pc, #180]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e04:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	f023 020c 	bic.w	r2, r3, #12
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	4928      	ldr	r1, [pc, #160]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e16:	4b27      	ldr	r3, [pc, #156]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	f023 0202 	bic.w	r2, r3, #2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	4924      	ldr	r1, [pc, #144]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e28:	4b22      	ldr	r3, [pc, #136]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	4a21      	ldr	r2, [pc, #132]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e34:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e40:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e4c:	4b19      	ldr	r3, [pc, #100]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e58:	4b16      	ldr	r3, [pc, #88]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe fc4c 	bl	8002700 <HAL_GetTick>
 8003e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fe fc48 	bl	8002700 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e091      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x71c>
 8003e8a:	e089      	b.n	8003fa0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a08      	ldr	r2, [pc, #32]	@ (8003eb4 <HAL_RCC_OscConfig+0x764>)
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe fc32 	bl	8002700 <HAL_GetTick>
 8003e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e9e:	e00f      	b.n	8003ec0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe fc2e 	bl	8002700 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d908      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e077      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
 8003eb2:	bf00      	nop
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	fffffc0c 	.word	0xfffffc0c
 8003ebc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e9      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x750>
 8003ecc:	e068      	b.n	8003fa0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ece:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ed4:	4b35      	ldr	r3, [pc, #212]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d031      	beq.n	8003f46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0203 	and.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d12a      	bne.n	8003f46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d122      	bne.n	8003f46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d11a      	bne.n	8003f46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	0a5b      	lsrs	r3, r3, #9
 8003f14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d111      	bne.n	8003f46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d108      	bne.n	8003f46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	0e1b      	lsrs	r3, r3, #24
 8003f38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d001      	beq.n	8003f4a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e02b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f4a:	4b18      	ldr	r3, [pc, #96]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4e:	08db      	lsrs	r3, r3, #3
 8003f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f54:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d01f      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f60:	4b12      	ldr	r3, [pc, #72]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	4a11      	ldr	r2, [pc, #68]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f6c:	f7fe fbc8 	bl	8002700 <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f72:	bf00      	nop
 8003f74:	f7fe fbc4 	bl	8002700 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d0f9      	beq.n	8003f74 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f80:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f84:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <HAL_RCC_OscConfig+0x860>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f8c:	00d2      	lsls	r2, r2, #3
 8003f8e:	4907      	ldr	r1, [pc, #28]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	4a04      	ldr	r2, [pc, #16]	@ (8003fac <HAL_RCC_OscConfig+0x85c>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3730      	adds	r7, #48	@ 0x30
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	58024400 	.word	0x58024400
 8003fb0:	ffff0007 	.word	0xffff0007

08003fb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e19c      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80041f4 <HAL_RCC_ClockConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d910      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b87      	ldr	r3, [pc, #540]	@ (80041f4 <HAL_RCC_ClockConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 020f 	bic.w	r2, r3, #15
 8003fde:	4985      	ldr	r1, [pc, #532]	@ (80041f4 <HAL_RCC_ClockConfig+0x240>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b83      	ldr	r3, [pc, #524]	@ (80041f4 <HAL_RCC_ClockConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e184      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d010      	beq.n	8004026 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	4b7b      	ldr	r3, [pc, #492]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004010:	429a      	cmp	r2, r3
 8004012:	d908      	bls.n	8004026 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004014:	4b78      	ldr	r3, [pc, #480]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	4975      	ldr	r1, [pc, #468]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004022:	4313      	orrs	r3, r2
 8004024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d010      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	4b70      	ldr	r3, [pc, #448]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800403e:	429a      	cmp	r2, r3
 8004040:	d908      	bls.n	8004054 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004042:	4b6d      	ldr	r3, [pc, #436]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	496a      	ldr	r1, [pc, #424]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004050:	4313      	orrs	r3, r2
 8004052:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	4b64      	ldr	r3, [pc, #400]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800406c:	429a      	cmp	r2, r3
 800406e:	d908      	bls.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004070:	4b61      	ldr	r3, [pc, #388]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	495e      	ldr	r1, [pc, #376]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 800407e:	4313      	orrs	r3, r2
 8004080:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d010      	beq.n	80040b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	4b59      	ldr	r3, [pc, #356]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800409a:	429a      	cmp	r2, r3
 800409c:	d908      	bls.n	80040b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800409e:	4b56      	ldr	r3, [pc, #344]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	4953      	ldr	r1, [pc, #332]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d010      	beq.n	80040de <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	4b4d      	ldr	r3, [pc, #308]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d908      	bls.n	80040de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040cc:	4b4a      	ldr	r3, [pc, #296]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f023 020f 	bic.w	r2, r3, #15
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4947      	ldr	r1, [pc, #284]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d055      	beq.n	8004196 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040ea:	4b43      	ldr	r3, [pc, #268]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	4940      	ldr	r1, [pc, #256]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d107      	bne.n	8004114 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004104:	4b3c      	ldr	r3, [pc, #240]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d121      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0f6      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d107      	bne.n	800412c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800411c:	4b36      	ldr	r3, [pc, #216]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d115      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0ea      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004134:	4b30      	ldr	r3, [pc, #192]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0de      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004144:	4b2c      	ldr	r3, [pc, #176]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0d6      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004154:	4b28      	ldr	r3, [pc, #160]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f023 0207 	bic.w	r2, r3, #7
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4925      	ldr	r1, [pc, #148]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004162:	4313      	orrs	r3, r2
 8004164:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004166:	f7fe facb 	bl	8002700 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416c:	e00a      	b.n	8004184 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416e:	f7fe fac7 	bl	8002700 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0be      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004184:	4b1c      	ldr	r3, [pc, #112]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	429a      	cmp	r2, r3
 8004194:	d1eb      	bne.n	800416e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	4b14      	ldr	r3, [pc, #80]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d208      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b2:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	490e      	ldr	r1, [pc, #56]	@ (80041f8 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_ClockConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d214      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <HAL_RCC_ClockConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 020f 	bic.w	r2, r3, #15
 80041da:	4906      	ldr	r1, [pc, #24]	@ (80041f4 <HAL_RCC_ClockConfig+0x240>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b04      	ldr	r3, [pc, #16]	@ (80041f4 <HAL_RCC_ClockConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e086      	b.n	8004302 <HAL_RCC_ClockConfig+0x34e>
 80041f4:	52002000 	.word	0x52002000
 80041f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	4b3f      	ldr	r3, [pc, #252]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004214:	429a      	cmp	r2, r3
 8004216:	d208      	bcs.n	800422a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004218:	4b3c      	ldr	r3, [pc, #240]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	4939      	ldr	r1, [pc, #228]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 8004226:	4313      	orrs	r3, r2
 8004228:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d010      	beq.n	8004258 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	4b34      	ldr	r3, [pc, #208]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004242:	429a      	cmp	r2, r3
 8004244:	d208      	bcs.n	8004258 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004246:	4b31      	ldr	r3, [pc, #196]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	492e      	ldr	r1, [pc, #184]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 8004254:	4313      	orrs	r3, r2
 8004256:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	4b28      	ldr	r3, [pc, #160]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004270:	429a      	cmp	r2, r3
 8004272:	d208      	bcs.n	8004286 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004274:	4b25      	ldr	r3, [pc, #148]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4922      	ldr	r1, [pc, #136]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 8004282:	4313      	orrs	r3, r2
 8004284:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d010      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800429e:	429a      	cmp	r2, r3
 80042a0:	d208      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042a2:	4b1a      	ldr	r3, [pc, #104]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4917      	ldr	r1, [pc, #92]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80042b4:	f000 f834 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b14      	ldr	r3, [pc, #80]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	4912      	ldr	r1, [pc, #72]	@ (8004310 <HAL_RCC_ClockConfig+0x35c>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
 80042d0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80042d2:	4b0e      	ldr	r3, [pc, #56]	@ (800430c <HAL_RCC_ClockConfig+0x358>)
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	4a0d      	ldr	r2, [pc, #52]	@ (8004310 <HAL_RCC_ClockConfig+0x35c>)
 80042dc:	5cd3      	ldrb	r3, [r2, r3]
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004314 <HAL_RCC_ClockConfig+0x360>)
 80042ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004318 <HAL_RCC_ClockConfig+0x364>)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <HAL_RCC_ClockConfig+0x368>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe f9b8 	bl	800266c <HAL_InitTick>
 80042fc:	4603      	mov	r3, r0
 80042fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	58024400 	.word	0x58024400
 8004310:	080091fc 	.word	0x080091fc
 8004314:	24000004 	.word	0x24000004
 8004318:	24000000 	.word	0x24000000
 800431c:	24000008 	.word	0x24000008

08004320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	@ 0x24
 8004324:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004326:	4bb3      	ldr	r3, [pc, #716]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800432e:	2b18      	cmp	r3, #24
 8004330:	f200 8155 	bhi.w	80045de <HAL_RCC_GetSysClockFreq+0x2be>
 8004334:	a201      	add	r2, pc, #4	@ (adr r2, 800433c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	080043a1 	.word	0x080043a1
 8004340:	080045df 	.word	0x080045df
 8004344:	080045df 	.word	0x080045df
 8004348:	080045df 	.word	0x080045df
 800434c:	080045df 	.word	0x080045df
 8004350:	080045df 	.word	0x080045df
 8004354:	080045df 	.word	0x080045df
 8004358:	080045df 	.word	0x080045df
 800435c:	080043c7 	.word	0x080043c7
 8004360:	080045df 	.word	0x080045df
 8004364:	080045df 	.word	0x080045df
 8004368:	080045df 	.word	0x080045df
 800436c:	080045df 	.word	0x080045df
 8004370:	080045df 	.word	0x080045df
 8004374:	080045df 	.word	0x080045df
 8004378:	080045df 	.word	0x080045df
 800437c:	080043cd 	.word	0x080043cd
 8004380:	080045df 	.word	0x080045df
 8004384:	080045df 	.word	0x080045df
 8004388:	080045df 	.word	0x080045df
 800438c:	080045df 	.word	0x080045df
 8004390:	080045df 	.word	0x080045df
 8004394:	080045df 	.word	0x080045df
 8004398:	080045df 	.word	0x080045df
 800439c:	080043d3 	.word	0x080043d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a0:	4b94      	ldr	r3, [pc, #592]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043ac:	4b91      	ldr	r3, [pc, #580]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	4a90      	ldr	r2, [pc, #576]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
 80043bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80043be:	e111      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043c0:	4b8d      	ldr	r3, [pc, #564]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043c2:	61bb      	str	r3, [r7, #24]
      break;
 80043c4:	e10e      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80043c6:	4b8d      	ldr	r3, [pc, #564]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043c8:	61bb      	str	r3, [r7, #24]
      break;
 80043ca:	e10b      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80043cc:	4b8c      	ldr	r3, [pc, #560]	@ (8004600 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043ce:	61bb      	str	r3, [r7, #24]
      break;
 80043d0:	e108      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043d2:	4b88      	ldr	r3, [pc, #544]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043dc:	4b85      	ldr	r3, [pc, #532]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043e8:	4b82      	ldr	r3, [pc, #520]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043f2:	4b80      	ldr	r3, [pc, #512]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f6:	08db      	lsrs	r3, r3, #3
 80043f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80e1 	beq.w	80045d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b02      	cmp	r3, #2
 800441a:	f000 8083 	beq.w	8004524 <HAL_RCC_GetSysClockFreq+0x204>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b02      	cmp	r3, #2
 8004422:	f200 80a1 	bhi.w	8004568 <HAL_RCC_GetSysClockFreq+0x248>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x114>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d056      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004432:	e099      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004434:	4b6f      	ldr	r3, [pc, #444]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d02d      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004440:	4b6c      	ldr	r3, [pc, #432]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	08db      	lsrs	r3, r3, #3
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	4a6b      	ldr	r2, [pc, #428]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
 8004450:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446a:	4b62      	ldr	r3, [pc, #392]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447a:	ed97 6a02 	vldr	s12, [r7, #8]
 800447e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800448e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004496:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800449a:	e087      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004608 <HAL_RCC_GetSysClockFreq+0x2e8>
 80044aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ae:	4b51      	ldr	r3, [pc, #324]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044be:	ed97 6a02 	vldr	s12, [r7, #8]
 80044c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044de:	e065      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800460c <HAL_RCC_GetSysClockFreq+0x2ec>
 80044ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f2:	4b40      	ldr	r3, [pc, #256]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004502:	ed97 6a02 	vldr	s12, [r7, #8]
 8004506:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800450a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800451a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004522:	e043      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004610 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004536:	4b2f      	ldr	r3, [pc, #188]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004546:	ed97 6a02 	vldr	s12, [r7, #8]
 800454a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 800454e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800455a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004566:	e021      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800460c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457a:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458a:	ed97 6a02 	vldr	s12, [r7, #8]
 800458e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004604 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800459e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045ac:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	0a5b      	lsrs	r3, r3, #9
 80045b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b6:	3301      	adds	r3, #1
 80045b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d0:	ee17 3a90 	vmov	r3, s15
 80045d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045d6:	e005      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
      break;
 80045dc:	e002      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80045de:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045e0:	61bb      	str	r3, [r7, #24]
      break;
 80045e2:	bf00      	nop
  }

  return sysclockfreq;
 80045e4:	69bb      	ldr	r3, [r7, #24]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3724      	adds	r7, #36	@ 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	58024400 	.word	0x58024400
 80045f8:	03d09000 	.word	0x03d09000
 80045fc:	003d0900 	.word	0x003d0900
 8004600:	016e3600 	.word	0x016e3600
 8004604:	46000000 	.word	0x46000000
 8004608:	4c742400 	.word	0x4c742400
 800460c:	4a742400 	.word	0x4a742400
 8004610:	4bb71b00 	.word	0x4bb71b00

08004614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800461a:	f7ff fe81 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 800461e:	4602      	mov	r2, r0
 8004620:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <HAL_RCC_GetHCLKFreq+0x50>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	0a1b      	lsrs	r3, r3, #8
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	490f      	ldr	r1, [pc, #60]	@ (8004668 <HAL_RCC_GetHCLKFreq+0x54>)
 800462c:	5ccb      	ldrb	r3, [r1, r3]
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	fa22 f303 	lsr.w	r3, r2, r3
 8004636:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004638:	4b0a      	ldr	r3, [pc, #40]	@ (8004664 <HAL_RCC_GetHCLKFreq+0x50>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	4a09      	ldr	r2, [pc, #36]	@ (8004668 <HAL_RCC_GetHCLKFreq+0x54>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	4a07      	ldr	r2, [pc, #28]	@ (800466c <HAL_RCC_GetHCLKFreq+0x58>)
 8004650:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004652:	4a07      	ldr	r2, [pc, #28]	@ (8004670 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004658:	4b04      	ldr	r3, [pc, #16]	@ (800466c <HAL_RCC_GetHCLKFreq+0x58>)
 800465a:	681b      	ldr	r3, [r3, #0]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	58024400 	.word	0x58024400
 8004668:	080091fc 	.word	0x080091fc
 800466c:	24000004 	.word	0x24000004
 8004670:	24000000 	.word	0x24000000

08004674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004678:	f7ff ffcc 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4904      	ldr	r1, [pc, #16]	@ (800469c <HAL_RCC_GetPCLK1Freq+0x28>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	58024400 	.word	0x58024400
 800469c:	080091fc 	.word	0x080091fc

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80046a4:	f7ff ffb6 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4904      	ldr	r1, [pc, #16]	@ (80046c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	58024400 	.word	0x58024400
 80046c8:	080091fc 	.word	0x080091fc

080046cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d0:	b0c8      	sub	sp, #288	@ 0x120
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046de:	2300      	movs	r3, #0
 80046e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80046f0:	2500      	movs	r5, #0
 80046f2:	ea54 0305 	orrs.w	r3, r4, r5
 80046f6:	d049      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80046f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004702:	d02f      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004704:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004708:	d828      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800470a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800470e:	d01a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004710:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004714:	d822      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800471a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800471e:	d007      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004720:	e01c      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004722:	4ba7      	ldr	r3, [pc, #668]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	4aa6      	ldr	r2, [pc, #664]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800472c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800472e:	e01a      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004734:	3308      	adds	r3, #8
 8004736:	2102      	movs	r1, #2
 8004738:	4618      	mov	r0, r3
 800473a:	f001 fc43 	bl	8005fc4 <RCCEx_PLL2_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004744:	e00f      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800474a:	3328      	adds	r3, #40	@ 0x28
 800474c:	2102      	movs	r1, #2
 800474e:	4618      	mov	r0, r3
 8004750:	f001 fcea 	bl	8006128 <RCCEx_PLL3_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800475a:	e004      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004762:	e000      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004766:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800476e:	4b94      	ldr	r3, [pc, #592]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004772:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800477a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800477c:	4a90      	ldr	r2, [pc, #576]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800477e:	430b      	orrs	r3, r1
 8004780:	6513      	str	r3, [r2, #80]	@ 0x50
 8004782:	e003      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004788:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800478c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004798:	f04f 0900 	mov.w	r9, #0
 800479c:	ea58 0309 	orrs.w	r3, r8, r9
 80047a0:	d047      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80047a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d82a      	bhi.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80047ac:	a201      	add	r2, pc, #4	@ (adr r2, 80047b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047c9 	.word	0x080047c9
 80047b8:	080047d7 	.word	0x080047d7
 80047bc:	080047ed 	.word	0x080047ed
 80047c0:	0800480b 	.word	0x0800480b
 80047c4:	0800480b 	.word	0x0800480b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c8:	4b7d      	ldr	r3, [pc, #500]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	4a7c      	ldr	r2, [pc, #496]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047d4:	e01a      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047da:	3308      	adds	r3, #8
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fbf0 	bl	8005fc4 <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047ea:	e00f      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047f0:	3328      	adds	r3, #40	@ 0x28
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 fc97 	bl	8006128 <RCCEx_PLL3_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004800:	e004      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004808:	e000      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800480a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800480c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004814:	4b6a      	ldr	r3, [pc, #424]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004818:	f023 0107 	bic.w	r1, r3, #7
 800481c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	4a67      	ldr	r2, [pc, #412]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004824:	430b      	orrs	r3, r1
 8004826:	6513      	str	r3, [r2, #80]	@ 0x50
 8004828:	e003      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800482e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800483e:	f04f 0b00 	mov.w	fp, #0
 8004842:	ea5a 030b 	orrs.w	r3, sl, fp
 8004846:	d054      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800484c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004852:	d036      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004854:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004858:	d82f      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800485a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800485e:	d032      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004864:	d829      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004866:	2bc0      	cmp	r3, #192	@ 0xc0
 8004868:	d02f      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800486a:	2bc0      	cmp	r3, #192	@ 0xc0
 800486c:	d825      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800486e:	2b80      	cmp	r3, #128	@ 0x80
 8004870:	d018      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004872:	2b80      	cmp	r3, #128	@ 0x80
 8004874:	d821      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800487a:	2b40      	cmp	r3, #64	@ 0x40
 800487c:	d007      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800487e:	e01c      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004880:	4b4f      	ldr	r3, [pc, #316]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	4a4e      	ldr	r2, [pc, #312]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800488a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800488c:	e01e      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800488e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004892:	3308      	adds	r3, #8
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f001 fb94 	bl	8005fc4 <RCCEx_PLL2_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80048a2:	e013      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048a8:	3328      	adds	r3, #40	@ 0x28
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fc3b 	bl	8006128 <RCCEx_PLL3_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80048b8:	e008      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048c0:	e004      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80048d4:	4b3a      	ldr	r3, [pc, #232]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80048dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	4a37      	ldr	r2, [pc, #220]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80048f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80048fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004908:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d05c      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004918:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800491c:	d03b      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800491e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004922:	d834      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004928:	d037      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800492a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800492e:	d82e      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004930:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004934:	d033      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004936:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800493a:	d828      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004940:	d01a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004946:	d822      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800494c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004950:	d007      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004952:	e01c      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004954:	4b1a      	ldr	r3, [pc, #104]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004958:	4a19      	ldr	r2, [pc, #100]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800495a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800495e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004960:	e01e      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004966:	3308      	adds	r3, #8
 8004968:	2100      	movs	r1, #0
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fb2a 	bl	8005fc4 <RCCEx_PLL2_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004976:	e013      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800497c:	3328      	adds	r3, #40	@ 0x28
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f001 fbd1 	bl	8006128 <RCCEx_PLL3_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800498c:	e008      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004994:	e004      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800499e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10d      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80049a8:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ac:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80049b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b6:	4a02      	ldr	r2, [pc, #8]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80049bc:	e006      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80049be:	bf00      	nop
 80049c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80049e6:	460b      	mov	r3, r1
 80049e8:	4313      	orrs	r3, r2
 80049ea:	d03a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f2:	2b30      	cmp	r3, #48	@ 0x30
 80049f4:	d01f      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80049f6:	2b30      	cmp	r3, #48	@ 0x30
 80049f8:	d819      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d00c      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d815      	bhi.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d019      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d111      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0a:	4bae      	ldr	r3, [pc, #696]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	4aad      	ldr	r2, [pc, #692]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004a16:	e011      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	2102      	movs	r1, #2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 facf 	bl	8005fc4 <RCCEx_PLL2_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004a2c:	e006      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a34:	e002      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004a36:	bf00      	nop
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a44:	4b9f      	ldr	r3, [pc, #636]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a52:	4a9c      	ldr	r2, [pc, #624]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a54:	430b      	orrs	r3, r1
 8004a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a58:	e003      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a72:	2300      	movs	r3, #0
 8004a74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	d051      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a8c:	d035      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004a8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a92:	d82e      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004a94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a98:	d031      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004a9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a9e:	d828      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa4:	d01a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aaa:	d822      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab4:	d007      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004ab6:	e01c      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab8:	4b82      	ldr	r3, [pc, #520]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abc:	4a81      	ldr	r2, [pc, #516]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ac4:	e01c      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aca:	3308      	adds	r3, #8
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fa78 	bl	8005fc4 <RCCEx_PLL2_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ada:	e011      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae0:	3328      	adds	r3, #40	@ 0x28
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 fb1f 	bl	8006128 <RCCEx_PLL3_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004af0:	e006      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004af8:	e002      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b08:	4b6e      	ldr	r3, [pc, #440]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b16:	4a6b      	ldr	r2, [pc, #428]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b1c:	e003      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b36:	2300      	movs	r3, #0
 8004b38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b40:	460b      	mov	r3, r1
 8004b42:	4313      	orrs	r3, r2
 8004b44:	d053      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b50:	d033      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004b52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b56:	d82c      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b5c:	d02f      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004b5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b62:	d826      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b68:	d02b      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004b6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b6e:	d820      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b74:	d012      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b7a:	d81a      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d022      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b84:	d115      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 fa18 	bl	8005fc4 <RCCEx_PLL2_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b9a:	e015      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ba0:	3328      	adds	r3, #40	@ 0x28
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fabf 	bl	8006128 <RCCEx_PLL3_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bb8:	e006      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bba:	bf00      	nop
 8004bbc:	e004      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bde:	4a39      	ldr	r2, [pc, #228]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004be4:	e003      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	d060      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c16:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004c1a:	d039      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004c1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004c20:	d832      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c26:	d035      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c2c:	d82c      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c32:	d031      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c38:	d826      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c3e:	d02d      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004c40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c44:	d820      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c4a:	d012      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c50:	d81a      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d024      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c5a:	d115      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c60:	3308      	adds	r3, #8
 8004c62:	2101      	movs	r1, #1
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 f9ad 	bl	8005fc4 <RCCEx_PLL2_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c70:	e017      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c76:	3328      	adds	r3, #40	@ 0x28
 8004c78:	2101      	movs	r1, #1
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 fa54 	bl	8006128 <RCCEx_PLL3_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c86:	e00c      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c90:	bf00      	nop
 8004c92:	e006      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c94:	bf00      	nop
 8004c96:	e004      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c98:	bf00      	nop
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004caa:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cba:	4a02      	ldr	r2, [pc, #8]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cc0:	e006      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004cc2:	bf00      	nop
 8004cc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ccc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cea:	460b      	mov	r3, r1
 8004cec:	4313      	orrs	r3, r2
 8004cee:	d037      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cfa:	d00e      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d00:	d816      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004d06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d0a:	d111      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0c:	4bc4      	ldr	r3, [pc, #784]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	4ac3      	ldr	r2, [pc, #780]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d18:	e00f      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d1e:	3308      	adds	r3, #8
 8004d20:	2101      	movs	r1, #1
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 f94e 	bl	8005fc4 <RCCEx_PLL2_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d2e:	e004      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d36:	e000      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d42:	4bb7      	ldr	r3, [pc, #732]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d50:	4ab3      	ldr	r2, [pc, #716]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d52:	430b      	orrs	r3, r1
 8004d54:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d56:	e003      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	d039      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d81c      	bhi.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004dcd 	.word	0x08004dcd
 8004d94:	08004da1 	.word	0x08004da1
 8004d98:	08004daf 	.word	0x08004daf
 8004d9c:	08004dcd 	.word	0x08004dcd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da0:	4b9f      	ldr	r3, [pc, #636]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	4a9e      	ldr	r2, [pc, #632]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dac:	e00f      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004db2:	3308      	adds	r3, #8
 8004db4:	2102      	movs	r1, #2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 f904 	bl	8005fc4 <RCCEx_PLL2_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dc2:	e004      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dd6:	4b92      	ldr	r3, [pc, #584]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dda:	f023 0103 	bic.w	r1, r3, #3
 8004dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de4:	4a8e      	ldr	r2, [pc, #568]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004df0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e04:	2300      	movs	r3, #0
 8004e06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f000 8099 	beq.w	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e16:	4b83      	ldr	r3, [pc, #524]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a82      	ldr	r2, [pc, #520]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e22:	f7fd fc6d 	bl	8002700 <HAL_GetTick>
 8004e26:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e2a:	e00b      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2c:	f7fd fc68 	bl	8002700 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b64      	cmp	r3, #100	@ 0x64
 8004e3a:	d903      	bls.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e42:	e005      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e44:	4b77      	ldr	r3, [pc, #476]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ed      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004e50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d173      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e58:	4b71      	ldr	r3, [pc, #452]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e64:	4053      	eors	r3, r2
 8004e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d015      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e7a:	4b69      	ldr	r3, [pc, #420]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7e:	4a68      	ldr	r2, [pc, #416]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e86:	4b66      	ldr	r3, [pc, #408]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8a:	4a65      	ldr	r2, [pc, #404]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e92:	4a63      	ldr	r2, [pc, #396]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea6:	d118      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fd fc2a 	bl	8002700 <HAL_GetTick>
 8004eac:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb0:	e00d      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fd fc25 	bl	8002700 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ebc:	1ad2      	subs	r2, r2, r3
 8004ebe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d903      	bls.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004ecc:	e005      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ece:	4b54      	ldr	r3, [pc, #336]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0eb      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004eda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d129      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ee6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ef2:	d10e      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f04:	091a      	lsrs	r2, r3, #4
 8004f06:	4b48      	ldr	r3, [pc, #288]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	4a45      	ldr	r2, [pc, #276]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6113      	str	r3, [r2, #16]
 8004f10:	e005      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004f12:	4b43      	ldr	r3, [pc, #268]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	4a42      	ldr	r2, [pc, #264]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f1c:	6113      	str	r3, [r2, #16]
 8004f1e:	4b40      	ldr	r3, [pc, #256]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f34:	e008      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004f3e:	e003      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f002 0301 	and.w	r3, r2, #1
 8004f54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f000 8090 	beq.w	800508a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f72:	2b28      	cmp	r3, #40	@ 0x28
 8004f74:	d870      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004f76:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08005061 	.word	0x08005061
 8004f80:	08005059 	.word	0x08005059
 8004f84:	08005059 	.word	0x08005059
 8004f88:	08005059 	.word	0x08005059
 8004f8c:	08005059 	.word	0x08005059
 8004f90:	08005059 	.word	0x08005059
 8004f94:	08005059 	.word	0x08005059
 8004f98:	08005059 	.word	0x08005059
 8004f9c:	0800502d 	.word	0x0800502d
 8004fa0:	08005059 	.word	0x08005059
 8004fa4:	08005059 	.word	0x08005059
 8004fa8:	08005059 	.word	0x08005059
 8004fac:	08005059 	.word	0x08005059
 8004fb0:	08005059 	.word	0x08005059
 8004fb4:	08005059 	.word	0x08005059
 8004fb8:	08005059 	.word	0x08005059
 8004fbc:	08005043 	.word	0x08005043
 8004fc0:	08005059 	.word	0x08005059
 8004fc4:	08005059 	.word	0x08005059
 8004fc8:	08005059 	.word	0x08005059
 8004fcc:	08005059 	.word	0x08005059
 8004fd0:	08005059 	.word	0x08005059
 8004fd4:	08005059 	.word	0x08005059
 8004fd8:	08005059 	.word	0x08005059
 8004fdc:	08005061 	.word	0x08005061
 8004fe0:	08005059 	.word	0x08005059
 8004fe4:	08005059 	.word	0x08005059
 8004fe8:	08005059 	.word	0x08005059
 8004fec:	08005059 	.word	0x08005059
 8004ff0:	08005059 	.word	0x08005059
 8004ff4:	08005059 	.word	0x08005059
 8004ff8:	08005059 	.word	0x08005059
 8004ffc:	08005061 	.word	0x08005061
 8005000:	08005059 	.word	0x08005059
 8005004:	08005059 	.word	0x08005059
 8005008:	08005059 	.word	0x08005059
 800500c:	08005059 	.word	0x08005059
 8005010:	08005059 	.word	0x08005059
 8005014:	08005059 	.word	0x08005059
 8005018:	08005059 	.word	0x08005059
 800501c:	08005061 	.word	0x08005061
 8005020:	58024400 	.word	0x58024400
 8005024:	58024800 	.word	0x58024800
 8005028:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800502c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005030:	3308      	adds	r3, #8
 8005032:	2101      	movs	r1, #1
 8005034:	4618      	mov	r0, r3
 8005036:	f000 ffc5 	bl	8005fc4 <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005040:	e00f      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005046:	3328      	adds	r3, #40	@ 0x28
 8005048:	2101      	movs	r1, #1
 800504a:	4618      	mov	r0, r3
 800504c:	f001 f86c 	bl	8006128 <RCCEx_PLL3_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005056:	e004      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800505e:	e000      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005062:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10b      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800506a:	4bc0      	ldr	r3, [pc, #768]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800506c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800507a:	4abc      	ldr	r2, [pc, #752]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800507c:	430b      	orrs	r3, r1
 800507e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005080:	e003      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005082:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005086:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800508a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f002 0302 	and.w	r3, r2, #2
 8005096:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800509a:	2300      	movs	r3, #0
 800509c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050a0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050a4:	460b      	mov	r3, r1
 80050a6:	4313      	orrs	r3, r2
 80050a8:	d043      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	d824      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80050b6:	a201      	add	r2, pc, #4	@ (adr r2, 80050bc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	08005109 	.word	0x08005109
 80050c0:	080050d5 	.word	0x080050d5
 80050c4:	080050eb 	.word	0x080050eb
 80050c8:	08005109 	.word	0x08005109
 80050cc:	08005109 	.word	0x08005109
 80050d0:	08005109 	.word	0x08005109
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d8:	3308      	adds	r3, #8
 80050da:	2101      	movs	r1, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 ff71 	bl	8005fc4 <RCCEx_PLL2_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050e8:	e00f      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ee:	3328      	adds	r3, #40	@ 0x28
 80050f0:	2101      	movs	r1, #1
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 f818 	bl	8006128 <RCCEx_PLL3_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050fe:	e004      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005106:	e000      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005112:	4b96      	ldr	r3, [pc, #600]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005116:	f023 0107 	bic.w	r1, r3, #7
 800511a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005122:	4a92      	ldr	r2, [pc, #584]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005124:	430b      	orrs	r3, r1
 8005126:	6553      	str	r3, [r2, #84]	@ 0x54
 8005128:	e003      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800512e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f002 0304 	and.w	r3, r2, #4
 800513e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005142:	2300      	movs	r3, #0
 8005144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005148:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800514c:	460b      	mov	r3, r1
 800514e:	4313      	orrs	r3, r2
 8005150:	d043      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005156:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800515a:	2b05      	cmp	r3, #5
 800515c:	d824      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800515e:	a201      	add	r2, pc, #4	@ (adr r2, 8005164 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	080051b1 	.word	0x080051b1
 8005168:	0800517d 	.word	0x0800517d
 800516c:	08005193 	.word	0x08005193
 8005170:	080051b1 	.word	0x080051b1
 8005174:	080051b1 	.word	0x080051b1
 8005178:	080051b1 	.word	0x080051b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800517c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005180:	3308      	adds	r3, #8
 8005182:	2101      	movs	r1, #1
 8005184:	4618      	mov	r0, r3
 8005186:	f000 ff1d 	bl	8005fc4 <RCCEx_PLL2_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005190:	e00f      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005196:	3328      	adds	r3, #40	@ 0x28
 8005198:	2101      	movs	r1, #1
 800519a:	4618      	mov	r0, r3
 800519c:	f000 ffc4 	bl	8006128 <RCCEx_PLL3_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051a6:	e004      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80051b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051ba:	4b6c      	ldr	r3, [pc, #432]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051be:	f023 0107 	bic.w	r1, r3, #7
 80051c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051ca:	4a68      	ldr	r2, [pc, #416]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051cc:	430b      	orrs	r3, r1
 80051ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80051d0:	e003      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f002 0320 	and.w	r3, r2, #32
 80051e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051ea:	2300      	movs	r3, #0
 80051ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051f4:	460b      	mov	r3, r1
 80051f6:	4313      	orrs	r3, r2
 80051f8:	d055      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005202:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005206:	d033      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800520c:	d82c      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005212:	d02f      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005218:	d826      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800521a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800521e:	d02b      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005220:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005224:	d820      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800522a:	d012      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800522c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005230:	d81a      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d022      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005236:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800523a:	d115      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800523c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005240:	3308      	adds	r3, #8
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f000 febd 	bl	8005fc4 <RCCEx_PLL2_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005250:	e015      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005256:	3328      	adds	r3, #40	@ 0x28
 8005258:	2102      	movs	r1, #2
 800525a:	4618      	mov	r0, r3
 800525c:	f000 ff64 	bl	8006128 <RCCEx_PLL3_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005266:	e00a      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800526e:	e006      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005270:	bf00      	nop
 8005272:	e004      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005274:	bf00      	nop
 8005276:	e002      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005278:	bf00      	nop
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800527c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10b      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005286:	4b39      	ldr	r3, [pc, #228]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800528e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005296:	4a35      	ldr	r2, [pc, #212]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005298:	430b      	orrs	r3, r1
 800529a:	6553      	str	r3, [r2, #84]	@ 0x54
 800529c:	e003      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80052b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4313      	orrs	r3, r2
 80052c4:	d058      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052d2:	d033      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80052d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052d8:	d82c      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052de:	d02f      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80052e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e4:	d826      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052ea:	d02b      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80052ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052f0:	d820      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f6:	d012      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80052f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052fc:	d81a      	bhi.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d022      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005306:	d115      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800530c:	3308      	adds	r3, #8
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fe57 	bl	8005fc4 <RCCEx_PLL2_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800531c:	e015      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800531e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005322:	3328      	adds	r3, #40	@ 0x28
 8005324:	2102      	movs	r1, #2
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fefe 	bl	8006128 <RCCEx_PLL3_Config>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005332:	e00a      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800533a:	e006      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800533c:	bf00      	nop
 800533e:	e004      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005340:	bf00      	nop
 8005342:	e002      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005344:	bf00      	nop
 8005346:	e000      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10e      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005352:	4b06      	ldr	r3, [pc, #24]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005356:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800535a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800535e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005362:	4a02      	ldr	r2, [pc, #8]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005364:	430b      	orrs	r3, r1
 8005366:	6593      	str	r3, [r2, #88]	@ 0x58
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800536a:	bf00      	nop
 800536c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005374:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005388:	2300      	movs	r3, #0
 800538a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800538e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005392:	460b      	mov	r3, r1
 8005394:	4313      	orrs	r3, r2
 8005396:	d055      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800539c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80053a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053a4:	d033      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80053a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053aa:	d82c      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b0:	d02f      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80053b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b6:	d826      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053bc:	d02b      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80053be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053c2:	d820      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053c8:	d012      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80053ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ce:	d81a      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d022      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80053d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053d8:	d115      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053de:	3308      	adds	r3, #8
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fdee 	bl	8005fc4 <RCCEx_PLL2_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053ee:	e015      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053f4:	3328      	adds	r3, #40	@ 0x28
 80053f6:	2102      	movs	r1, #2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fe95 	bl	8006128 <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005404:	e00a      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800540c:	e006      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800540e:	bf00      	nop
 8005410:	e004      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800541a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005424:	4ba1      	ldr	r3, [pc, #644]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005428:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800542c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005430:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005434:	4a9d      	ldr	r2, [pc, #628]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005436:	430b      	orrs	r3, r1
 8005438:	6593      	str	r3, [r2, #88]	@ 0x58
 800543a:	e003      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005440:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f002 0308 	and.w	r3, r2, #8
 8005450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800545a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800545e:	460b      	mov	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	d01e      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005470:	d10c      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005476:	3328      	adds	r3, #40	@ 0x28
 8005478:	2102      	movs	r1, #2
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fe54 	bl	8006128 <RCCEx_PLL3_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800548c:	4b87      	ldr	r3, [pc, #540]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800548e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005490:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800549c:	4a83      	ldr	r2, [pc, #524]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800549e:	430b      	orrs	r3, r1
 80054a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f002 0310 	and.w	r3, r2, #16
 80054ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054b2:	2300      	movs	r3, #0
 80054b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80054bc:	460b      	mov	r3, r1
 80054be:	4313      	orrs	r3, r2
 80054c0:	d01e      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ce:	d10c      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d4:	3328      	adds	r3, #40	@ 0x28
 80054d6:	2102      	movs	r1, #2
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fe25 	bl	8006128 <RCCEx_PLL3_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ea:	4b70      	ldr	r3, [pc, #448]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054fa:	4a6c      	ldr	r2, [pc, #432]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800550c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005516:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800551a:	460b      	mov	r3, r1
 800551c:	4313      	orrs	r3, r2
 800551e:	d03e      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800552c:	d022      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800552e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005532:	d81b      	bhi.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800553c:	d00b      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800553e:	e015      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005544:	3308      	adds	r3, #8
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fd3b 	bl	8005fc4 <RCCEx_PLL2_Config>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005554:	e00f      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800555a:	3328      	adds	r3, #40	@ 0x28
 800555c:	2102      	movs	r1, #2
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fde2 	bl	8006128 <RCCEx_PLL3_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800556a:	e004      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005576:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800557e:	4b4b      	ldr	r3, [pc, #300]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005582:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800558a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800558e:	4a47      	ldr	r2, [pc, #284]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005590:	430b      	orrs	r3, r1
 8005592:	6593      	str	r3, [r2, #88]	@ 0x58
 8005594:	e003      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005596:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800559a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800559e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80055aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055ac:	2300      	movs	r3, #0
 80055ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80055b4:	460b      	mov	r3, r1
 80055b6:	4313      	orrs	r3, r2
 80055b8:	d03b      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80055ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055c6:	d01f      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80055c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055cc:	d818      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80055ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055d2:	d003      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80055d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055d8:	d007      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80055da:	e011      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055dc:	4b33      	ldr	r3, [pc, #204]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e0:	4a32      	ldr	r2, [pc, #200]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055e8:	e00f      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ee:	3328      	adds	r3, #40	@ 0x28
 80055f0:	2101      	movs	r1, #1
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fd98 	bl	8006128 <RCCEx_PLL3_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80055fe:	e004      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005606:	e000      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10b      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005612:	4b26      	ldr	r3, [pc, #152]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005616:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800561a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	4a22      	ldr	r2, [pc, #136]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005624:	430b      	orrs	r3, r1
 8005626:	6553      	str	r3, [r2, #84]	@ 0x54
 8005628:	e003      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800562e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800563e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005640:	2300      	movs	r3, #0
 8005642:	677b      	str	r3, [r7, #116]	@ 0x74
 8005644:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005648:	460b      	mov	r3, r1
 800564a:	4313      	orrs	r3, r2
 800564c:	d034      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800564e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800565c:	d007      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800565e:	e011      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005660:	4b12      	ldr	r3, [pc, #72]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005664:	4a11      	ldr	r2, [pc, #68]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800566a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800566c:	e00e      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800566e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005672:	3308      	adds	r3, #8
 8005674:	2102      	movs	r1, #2
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fca4 	bl	8005fc4 <RCCEx_PLL2_Config>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005682:	e003      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800568a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10d      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005694:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005698:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a2:	4a02      	ldr	r2, [pc, #8]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056a8:	e006      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80056aa:	bf00      	nop
 80056ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80056c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056c6:	2300      	movs	r3, #0
 80056c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056ce:	460b      	mov	r3, r1
 80056d0:	4313      	orrs	r3, r2
 80056d2:	d00c      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d8:	3328      	adds	r3, #40	@ 0x28
 80056da:	2102      	movs	r1, #2
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fd23 	bl	8006128 <RCCEx_PLL3_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80056fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80056fc:	2300      	movs	r3, #0
 80056fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005700:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005704:	460b      	mov	r3, r1
 8005706:	4313      	orrs	r3, r2
 8005708:	d038      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800570a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005716:	d018      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005718:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800571c:	d811      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800571e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005722:	d014      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005728:	d80b      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d011      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800572e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005732:	d106      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005734:	4bc3      	ldr	r3, [pc, #780]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	4ac2      	ldr	r2, [pc, #776]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800573a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005740:	e008      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005748:	e004      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800574a:	bf00      	nop
 800574c:	e002      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005754:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800575c:	4bb9      	ldr	r3, [pc, #740]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800575e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005760:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576c:	4ab5      	ldr	r2, [pc, #724]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800576e:	430b      	orrs	r3, r1
 8005770:	6553      	str	r3, [r2, #84]	@ 0x54
 8005772:	e003      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005778:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800577c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005788:	65bb      	str	r3, [r7, #88]	@ 0x58
 800578a:	2300      	movs	r3, #0
 800578c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800578e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005792:	460b      	mov	r3, r1
 8005794:	4313      	orrs	r3, r2
 8005796:	d009      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005798:	4baa      	ldr	r3, [pc, #680]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800579a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800579c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80057a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057a6:	4aa7      	ldr	r2, [pc, #668]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057a8:	430b      	orrs	r3, r1
 80057aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80057b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ba:	2300      	movs	r3, #0
 80057bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80057be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057c2:	460b      	mov	r3, r1
 80057c4:	4313      	orrs	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057c8:	4b9e      	ldr	r3, [pc, #632]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d6:	4a9b      	ldr	r2, [pc, #620]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057d8:	430b      	orrs	r3, r1
 80057da:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80057dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80057e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057ea:	2300      	movs	r3, #0
 80057ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80057f2:	460b      	mov	r3, r1
 80057f4:	4313      	orrs	r3, r2
 80057f6:	d009      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80057f8:	4b92      	ldr	r3, [pc, #584]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005806:	4a8f      	ldr	r2, [pc, #572]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005808:	430b      	orrs	r3, r1
 800580a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800580c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005818:	643b      	str	r3, [r7, #64]	@ 0x40
 800581a:	2300      	movs	r3, #0
 800581c:	647b      	str	r3, [r7, #68]	@ 0x44
 800581e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005822:	460b      	mov	r3, r1
 8005824:	4313      	orrs	r3, r2
 8005826:	d00e      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005828:	4b86      	ldr	r3, [pc, #536]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	4a85      	ldr	r2, [pc, #532]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800582e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005832:	6113      	str	r3, [r2, #16]
 8005834:	4b83      	ldr	r3, [pc, #524]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005836:	6919      	ldr	r1, [r3, #16]
 8005838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800583c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005840:	4a80      	ldr	r2, [pc, #512]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005842:	430b      	orrs	r3, r1
 8005844:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005854:	2300      	movs	r3, #0
 8005856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005858:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800585c:	460b      	mov	r3, r1
 800585e:	4313      	orrs	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005862:	4b78      	ldr	r3, [pc, #480]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005866:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800586a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800586e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005870:	4a74      	ldr	r2, [pc, #464]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005872:	430b      	orrs	r3, r1
 8005874:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005882:	633b      	str	r3, [r7, #48]	@ 0x30
 8005884:	2300      	movs	r3, #0
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34
 8005888:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800588c:	460b      	mov	r3, r1
 800588e:	4313      	orrs	r3, r2
 8005890:	d00a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005892:	4b6c      	ldr	r3, [pc, #432]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005896:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800589a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800589e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058a2:	4a68      	ldr	r2, [pc, #416]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058a4:	430b      	orrs	r3, r1
 80058a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	2100      	movs	r1, #0
 80058b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058be:	460b      	mov	r3, r1
 80058c0:	4313      	orrs	r3, r2
 80058c2:	d011      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c8:	3308      	adds	r3, #8
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fb79 	bl	8005fc4 <RCCEx_PLL2_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80058d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	2100      	movs	r1, #0
 80058f2:	6239      	str	r1, [r7, #32]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	d011      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005908:	3308      	adds	r3, #8
 800590a:	2101      	movs	r1, #1
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fb59 	bl	8005fc4 <RCCEx_PLL2_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005918:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005920:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005924:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	2100      	movs	r1, #0
 8005932:	61b9      	str	r1, [r7, #24]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	61fb      	str	r3, [r7, #28]
 800593a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800593e:	460b      	mov	r3, r1
 8005940:	4313      	orrs	r3, r2
 8005942:	d011      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005948:	3308      	adds	r3, #8
 800594a:	2102      	movs	r1, #2
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fb39 	bl	8005fc4 <RCCEx_PLL2_Config>
 8005952:	4603      	mov	r3, r0
 8005954:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005964:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	2100      	movs	r1, #0
 8005972:	6139      	str	r1, [r7, #16]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800597e:	460b      	mov	r3, r1
 8005980:	4313      	orrs	r3, r2
 8005982:	d011      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005988:	3328      	adds	r3, #40	@ 0x28
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fbcb 	bl	8006128 <RCCEx_PLL3_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005998:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	2100      	movs	r1, #0
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059be:	460b      	mov	r3, r1
 80059c0:	4313      	orrs	r3, r2
 80059c2:	d011      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c8:	3328      	adds	r3, #40	@ 0x28
 80059ca:	2101      	movs	r1, #1
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fbab 	bl	8006128 <RCCEx_PLL3_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80059d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	2100      	movs	r1, #0
 80059f2:	6039      	str	r1, [r7, #0]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059fe:	460b      	mov	r3, r1
 8005a00:	4313      	orrs	r3, r2
 8005a02:	d011      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a08:	3328      	adds	r3, #40	@ 0x28
 8005a0a:	2102      	movs	r1, #2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fb8b 	bl	8006128 <RCCEx_PLL3_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005a28:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e000      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a42:	bf00      	nop
 8005a44:	58024400 	.word	0x58024400

08005a48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005a4c:	f7fe fde2 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 8005a50:	4602      	mov	r2, r0
 8005a52:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	091b      	lsrs	r3, r3, #4
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	4904      	ldr	r1, [pc, #16]	@ (8005a70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a5e:	5ccb      	ldrb	r3, [r1, r3]
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	58024400 	.word	0x58024400
 8005a70:	080091fc 	.word	0x080091fc

08005a74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b089      	sub	sp, #36	@ 0x24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a7c:	4ba1      	ldr	r3, [pc, #644]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a86:	4b9f      	ldr	r3, [pc, #636]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	0b1b      	lsrs	r3, r3, #12
 8005a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a92:	4b9c      	ldr	r3, [pc, #624]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a96:	091b      	lsrs	r3, r3, #4
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a9e:	4b99      	ldr	r3, [pc, #612]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa2:	08db      	lsrs	r3, r3, #3
 8005aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8111 	beq.w	8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	f000 8083 	beq.w	8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	f200 80a1 	bhi.w	8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d056      	beq.n	8005b8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ade:	e099      	b.n	8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae0:	4b88      	ldr	r3, [pc, #544]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d02d      	beq.n	8005b48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aec:	4b85      	ldr	r3, [pc, #532]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	08db      	lsrs	r3, r3, #3
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	4a84      	ldr	r2, [pc, #528]	@ (8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b16:	4b7b      	ldr	r3, [pc, #492]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b46:	e087      	b.n	8005c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b8a:	e065      	b.n	8005c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9e:	4b59      	ldr	r3, [pc, #356]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bb2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bce:	e043      	b.n	8005c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bda:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be2:	4b48      	ldr	r3, [pc, #288]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bf6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c12:	e021      	b.n	8005c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c26:	4b37      	ldr	r3, [pc, #220]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c58:	4b2a      	ldr	r3, [pc, #168]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5c:	0a5b      	lsrs	r3, r3, #9
 8005c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7e:	ee17 2a90 	vmov	r2, s15
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c86:	4b1f      	ldr	r3, [pc, #124]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8a:	0c1b      	lsrs	r3, r3, #16
 8005c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c90:	ee07 3a90 	vmov	s15, r3
 8005c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cac:	ee17 2a90 	vmov	r2, s15
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005cb4:	4b13      	ldr	r3, [pc, #76]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb8:	0e1b      	lsrs	r3, r3, #24
 8005cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cda:	ee17 2a90 	vmov	r2, s15
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	609a      	str	r2, [r3, #8]
}
 8005cf6:	bf00      	nop
 8005cf8:	3724      	adds	r7, #36	@ 0x24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400
 8005d08:	03d09000 	.word	0x03d09000
 8005d0c:	46000000 	.word	0x46000000
 8005d10:	4c742400 	.word	0x4c742400
 8005d14:	4a742400 	.word	0x4a742400
 8005d18:	4bb71b00 	.word	0x4bb71b00

08005d1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b089      	sub	sp, #36	@ 0x24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d24:	4ba1      	ldr	r3, [pc, #644]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d2e:	4b9f      	ldr	r3, [pc, #636]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d32:	0d1b      	lsrs	r3, r3, #20
 8005d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d3a:	4b9c      	ldr	r3, [pc, #624]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	0a1b      	lsrs	r3, r3, #8
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d46:	4b99      	ldr	r3, [pc, #612]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	08db      	lsrs	r3, r3, #3
 8005d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8111 	beq.w	8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	f000 8083 	beq.w	8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	f200 80a1 	bhi.w	8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d056      	beq.n	8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d86:	e099      	b.n	8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d88:	4b88      	ldr	r3, [pc, #544]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d02d      	beq.n	8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d94:	4b85      	ldr	r3, [pc, #532]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	08db      	lsrs	r3, r3, #3
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	4a84      	ldr	r2, [pc, #528]	@ (8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	ee07 3a90 	vmov	s15, r3
 8005dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dbe:	4b7b      	ldr	r3, [pc, #492]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005dee:	e087      	b.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e02:	4b6a      	ldr	r3, [pc, #424]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e32:	e065      	b.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e46:	4b59      	ldr	r3, [pc, #356]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e76:	e043      	b.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8a:	4b48      	ldr	r3, [pc, #288]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eba:	e021      	b.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ece:	4b37      	ldr	r3, [pc, #220]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ee2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005efe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f00:	4b2a      	ldr	r3, [pc, #168]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	0a5b      	lsrs	r3, r3, #9
 8005f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f26:	ee17 2a90 	vmov	r2, s15
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	0c1b      	lsrs	r3, r3, #16
 8005f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f54:	ee17 2a90 	vmov	r2, s15
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f5c:	4b13      	ldr	r3, [pc, #76]	@ (8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f60:	0e1b      	lsrs	r3, r3, #24
 8005f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f82:	ee17 2a90 	vmov	r2, s15
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f8a:	e008      	b.n	8005f9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	609a      	str	r2, [r3, #8]
}
 8005f9e:	bf00      	nop
 8005fa0:	3724      	adds	r7, #36	@ 0x24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	58024400 	.word	0x58024400
 8005fb0:	03d09000 	.word	0x03d09000
 8005fb4:	46000000 	.word	0x46000000
 8005fb8:	4c742400 	.word	0x4c742400
 8005fbc:	4a742400 	.word	0x4a742400
 8005fc0:	4bb71b00 	.word	0x4bb71b00

08005fc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fd2:	4b53      	ldr	r3, [pc, #332]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d101      	bne.n	8005fe2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e099      	b.n	8006116 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a4e      	ldr	r2, [pc, #312]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8005fe8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fee:	f7fc fb87 	bl	8002700 <HAL_GetTick>
 8005ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ff4:	e008      	b.n	8006008 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ff6:	f7fc fb83 	bl	8002700 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e086      	b.n	8006116 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006008:	4b45      	ldr	r3, [pc, #276]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1f0      	bne.n	8005ff6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006014:	4b42      	ldr	r3, [pc, #264]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8006016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006018:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	031b      	lsls	r3, r3, #12
 8006022:	493f      	ldr	r1, [pc, #252]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8006024:	4313      	orrs	r3, r2
 8006026:	628b      	str	r3, [r1, #40]	@ 0x28
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	3b01      	subs	r3, #1
 800602e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	3b01      	subs	r3, #1
 8006038:	025b      	lsls	r3, r3, #9
 800603a:	b29b      	uxth	r3, r3
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	3b01      	subs	r3, #1
 8006044:	041b      	lsls	r3, r3, #16
 8006046:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	3b01      	subs	r3, #1
 8006052:	061b      	lsls	r3, r3, #24
 8006054:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006058:	4931      	ldr	r1, [pc, #196]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 800605a:	4313      	orrs	r3, r2
 800605c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800605e:	4b30      	ldr	r3, [pc, #192]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	492d      	ldr	r1, [pc, #180]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 800606c:	4313      	orrs	r3, r2
 800606e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006070:	4b2b      	ldr	r3, [pc, #172]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	f023 0220 	bic.w	r2, r3, #32
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	4928      	ldr	r1, [pc, #160]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 800607e:	4313      	orrs	r3, r2
 8006080:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006082:	4b27      	ldr	r3, [pc, #156]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	4a26      	ldr	r2, [pc, #152]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8006088:	f023 0310 	bic.w	r3, r3, #16
 800608c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800608e:	4b24      	ldr	r3, [pc, #144]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 8006090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006092:	4b24      	ldr	r3, [pc, #144]	@ (8006124 <RCCEx_PLL2_Config+0x160>)
 8006094:	4013      	ands	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	69d2      	ldr	r2, [r2, #28]
 800609a:	00d2      	lsls	r2, r2, #3
 800609c:	4920      	ldr	r1, [pc, #128]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060a8:	f043 0310 	orr.w	r3, r3, #16
 80060ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80060b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	4a19      	ldr	r2, [pc, #100]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060c0:	e00f      	b.n	80060e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d106      	bne.n	80060d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80060c8:	4b15      	ldr	r3, [pc, #84]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	4a14      	ldr	r2, [pc, #80]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060d4:	e005      	b.n	80060e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060d6:	4b12      	ldr	r3, [pc, #72]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060da:	4a11      	ldr	r2, [pc, #68]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80060e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 80060e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ee:	f7fc fb07 	bl	8002700 <HAL_GetTick>
 80060f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060f4:	e008      	b.n	8006108 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060f6:	f7fc fb03 	bl	8002700 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e006      	b.n	8006116 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006108:	4b05      	ldr	r3, [pc, #20]	@ (8006120 <RCCEx_PLL2_Config+0x15c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f0      	beq.n	80060f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	58024400 	.word	0x58024400
 8006124:	ffff0007 	.word	0xffff0007

08006128 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006136:	4b53      	ldr	r3, [pc, #332]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b03      	cmp	r3, #3
 8006140:	d101      	bne.n	8006146 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e099      	b.n	800627a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006146:	4b4f      	ldr	r3, [pc, #316]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a4e      	ldr	r2, [pc, #312]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800614c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006152:	f7fc fad5 	bl	8002700 <HAL_GetTick>
 8006156:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006158:	e008      	b.n	800616c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800615a:	f7fc fad1 	bl	8002700 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e086      	b.n	800627a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800616c:	4b45      	ldr	r3, [pc, #276]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1f0      	bne.n	800615a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006178:	4b42      	ldr	r3, [pc, #264]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800617a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	051b      	lsls	r3, r3, #20
 8006186:	493f      	ldr	r1, [pc, #252]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 8006188:	4313      	orrs	r3, r2
 800618a:	628b      	str	r3, [r1, #40]	@ 0x28
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	3b01      	subs	r3, #1
 8006192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	3b01      	subs	r3, #1
 800619c:	025b      	lsls	r3, r3, #9
 800619e:	b29b      	uxth	r3, r3
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	041b      	lsls	r3, r3, #16
 80061aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	061b      	lsls	r3, r3, #24
 80061b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061bc:	4931      	ldr	r1, [pc, #196]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80061c2:	4b30      	ldr	r3, [pc, #192]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	492d      	ldr	r1, [pc, #180]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	4928      	ldr	r1, [pc, #160]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80061e6:	4b27      	ldr	r3, [pc, #156]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	4a26      	ldr	r2, [pc, #152]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 80061ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061f2:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 80061f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061f6:	4b24      	ldr	r3, [pc, #144]	@ (8006288 <RCCEx_PLL3_Config+0x160>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	69d2      	ldr	r2, [r2, #28]
 80061fe:	00d2      	lsls	r2, r2, #3
 8006200:	4920      	ldr	r1, [pc, #128]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 8006202:	4313      	orrs	r3, r2
 8006204:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006206:	4b1f      	ldr	r3, [pc, #124]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 8006208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620a:	4a1e      	ldr	r2, [pc, #120]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800620c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006218:	4b1a      	ldr	r3, [pc, #104]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	4a19      	ldr	r2, [pc, #100]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800621e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006222:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006224:	e00f      	b.n	8006246 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d106      	bne.n	800623a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800622c:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	4a14      	ldr	r2, [pc, #80]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 8006232:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006238:	e005      	b.n	8006246 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800623a:	4b12      	ldr	r3, [pc, #72]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	4a11      	ldr	r2, [pc, #68]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 8006240:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006244:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006246:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a0e      	ldr	r2, [pc, #56]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800624c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006252:	f7fc fa55 	bl	8002700 <HAL_GetTick>
 8006256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006258:	e008      	b.n	800626c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800625a:	f7fc fa51 	bl	8002700 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e006      	b.n	800627a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800626c:	4b05      	ldr	r3, [pc, #20]	@ (8006284 <RCCEx_PLL3_Config+0x15c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
 8006288:	ffff0007 	.word	0xffff0007

0800628c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e10f      	b.n	80064be <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a87      	ldr	r2, [pc, #540]	@ (80064c8 <HAL_SPI_Init+0x23c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <HAL_SPI_Init+0x42>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a86      	ldr	r2, [pc, #536]	@ (80064cc <HAL_SPI_Init+0x240>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00a      	beq.n	80062ce <HAL_SPI_Init+0x42>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a84      	ldr	r2, [pc, #528]	@ (80064d0 <HAL_SPI_Init+0x244>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d005      	beq.n	80062ce <HAL_SPI_Init+0x42>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b0f      	cmp	r3, #15
 80062c8:	d901      	bls.n	80062ce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e0f7      	b.n	80064be <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fe2e 	bl	8006f30 <SPI_GetPacketSize>
 80062d4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a7b      	ldr	r2, [pc, #492]	@ (80064c8 <HAL_SPI_Init+0x23c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00c      	beq.n	80062fa <HAL_SPI_Init+0x6e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a79      	ldr	r2, [pc, #484]	@ (80064cc <HAL_SPI_Init+0x240>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <HAL_SPI_Init+0x6e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a78      	ldr	r2, [pc, #480]	@ (80064d0 <HAL_SPI_Init+0x244>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d002      	beq.n	80062fa <HAL_SPI_Init+0x6e>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d811      	bhi.n	800631e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80062fe:	4a72      	ldr	r2, [pc, #456]	@ (80064c8 <HAL_SPI_Init+0x23c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d009      	beq.n	8006318 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a70      	ldr	r2, [pc, #448]	@ (80064cc <HAL_SPI_Init+0x240>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_SPI_Init+0x8c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a6f      	ldr	r2, [pc, #444]	@ (80064d0 <HAL_SPI_Init+0x244>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d104      	bne.n	8006322 <HAL_SPI_Init+0x96>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b10      	cmp	r3, #16
 800631c:	d901      	bls.n	8006322 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e0cd      	b.n	80064be <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fb fade 	bl	80018f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800635e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006368:	d119      	bne.n	800639e <HAL_SPI_Init+0x112>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006372:	d103      	bne.n	800637c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10c      	bne.n	800639e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800638c:	d107      	bne.n	800639e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800639c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00f      	beq.n	80063ca <HAL_SPI_Init+0x13e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	2b06      	cmp	r3, #6
 80063b0:	d90b      	bls.n	80063ca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e007      	b.n	80063da <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69da      	ldr	r2, [r3, #28]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	431a      	orrs	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ec:	ea42 0103 	orr.w	r1, r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800643a:	ea42 0103 	orr.w	r1, r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d113      	bne.n	800647a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006464:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006478:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40013000 	.word	0x40013000
 80064cc:	40003800 	.word	0x40003800
 80064d0:	40003c00 	.word	0x40003c00

080064d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3320      	adds	r3, #32
 80064ea:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ec:	f7fc f908 	bl	8002700 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d001      	beq.n	8006502 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
 8006500:	e1d1      	b.n	80068a6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_SPI_Transmit+0x3a>
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e1c9      	b.n	80068a6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_SPI_Transmit+0x4c>
 800651c:	2302      	movs	r3, #2
 800651e:	e1c2      	b.n	80068a6 <HAL_SPI_Transmit+0x3d2>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2203      	movs	r2, #3
 800652c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	88fa      	ldrh	r2, [r7, #6]
 8006542:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	88fa      	ldrh	r2, [r7, #6]
 800654a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006578:	d108      	bne.n	800658c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	e009      	b.n	80065a0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800659e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4b96      	ldr	r3, [pc, #600]	@ (8006800 <HAL_SPI_Transmit+0x32c>)
 80065a8:	4013      	ands	r3, r2
 80065aa:	88f9      	ldrh	r1, [r7, #6]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0201 	orr.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065cc:	d107      	bne.n	80065de <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	2b0f      	cmp	r3, #15
 80065e4:	d947      	bls.n	8006676 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80065e6:	e03f      	b.n	8006668 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d114      	bne.n	8006620 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006606:	1d1a      	adds	r2, r3, #4
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800661e:	e023      	b.n	8006668 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006620:	f7fc f86e 	bl	8002700 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d803      	bhi.n	8006638 <HAL_SPI_Transmit+0x164>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d102      	bne.n	800663e <HAL_SPI_Transmit+0x16a>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d114      	bne.n	8006668 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fba8 	bl	8006d94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800664a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e11e      	b.n	80068a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800666e:	b29b      	uxth	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1b9      	bne.n	80065e8 <HAL_SPI_Transmit+0x114>
 8006674:	e0f1      	b.n	800685a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	2b07      	cmp	r3, #7
 800667c:	f240 80e6 	bls.w	800684c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006680:	e05d      	b.n	800673e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b02      	cmp	r3, #2
 800668e:	d132      	bne.n	80066f6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	d918      	bls.n	80066ce <HAL_SPI_Transmit+0x1fa>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d014      	beq.n	80066ce <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b4:	1d1a      	adds	r2, r3, #4
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b02      	subs	r3, #2
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066cc:	e037      	b.n	800673e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d2:	881a      	ldrh	r2, [r3, #0]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066dc:	1c9a      	adds	r2, r3, #2
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066f4:	e023      	b.n	800673e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066f6:	f7fc f803 	bl	8002700 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d803      	bhi.n	800670e <HAL_SPI_Transmit+0x23a>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d102      	bne.n	8006714 <HAL_SPI_Transmit+0x240>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d114      	bne.n	800673e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fb3d 	bl	8006d94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006720:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e0b3      	b.n	80068a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d19b      	bne.n	8006682 <HAL_SPI_Transmit+0x1ae>
 800674a:	e086      	b.n	800685a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b02      	cmp	r3, #2
 8006758:	d154      	bne.n	8006804 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d918      	bls.n	8006798 <HAL_SPI_Transmit+0x2c4>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676a:	2b40      	cmp	r3, #64	@ 0x40
 800676c:	d914      	bls.n	8006798 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800677e:	1d1a      	adds	r2, r3, #4
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b04      	subs	r3, #4
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006796:	e059      	b.n	800684c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d917      	bls.n	80067d4 <HAL_SPI_Transmit+0x300>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d013      	beq.n	80067d4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b0:	881a      	ldrh	r2, [r3, #0]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ba:	1c9a      	adds	r2, r3, #2
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b02      	subs	r3, #2
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80067d2:	e03b      	b.n	800684c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3320      	adds	r3, #32
 80067de:	7812      	ldrb	r2, [r2, #0]
 80067e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80067fe:	e025      	b.n	800684c <HAL_SPI_Transmit+0x378>
 8006800:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006804:	f7fb ff7c 	bl	8002700 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d803      	bhi.n	800681c <HAL_SPI_Transmit+0x348>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d102      	bne.n	8006822 <HAL_SPI_Transmit+0x34e>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d114      	bne.n	800684c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fab6 	bl	8006d94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800682e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e02c      	b.n	80068a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006852:	b29b      	uxth	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	f47f af79 	bne.w	800674c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2200      	movs	r2, #0
 8006862:	2108      	movs	r1, #8
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fb35 	bl	8006ed4 <SPI_WaitOnFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006876:	f043 0220 	orr.w	r2, r3, #32
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fa87 	bl	8006d94 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80068a4:	2300      	movs	r3, #0
  }
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop

080068b0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3301      	adds	r3, #1
 80068ca:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3330      	adds	r3, #48	@ 0x30
 80068d2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068d4:	f7fb ff14 	bl	8002700 <HAL_GetTick>
 80068d8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d001      	beq.n	80068ea <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
 80068e8:	e250      	b.n	8006d8c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_SPI_Receive+0x46>
 80068f0:	88fb      	ldrh	r3, [r7, #6]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e248      	b.n	8006d8c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_SPI_Receive+0x58>
 8006904:	2302      	movs	r3, #2
 8006906:	e241      	b.n	8006d8c <HAL_SPI_Receive+0x4dc>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2204      	movs	r2, #4
 8006914:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	88fa      	ldrh	r2, [r7, #6]
 8006932:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006960:	d108      	bne.n	8006974 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e009      	b.n	8006988 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006986:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	4b95      	ldr	r3, [pc, #596]	@ (8006be4 <HAL_SPI_Receive+0x334>)
 8006990:	4013      	ands	r3, r2
 8006992:	88f9      	ldrh	r1, [r7, #6]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	6812      	ldr	r2, [r2, #0]
 8006998:	430b      	orrs	r3, r1
 800699a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069b4:	d107      	bne.n	80069c6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	2b0f      	cmp	r3, #15
 80069cc:	d96c      	bls.n	8006aa8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80069ce:	e064      	b.n	8006a9a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d114      	bne.n	8006a10 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069f0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069f6:	1d1a      	adds	r2, r3, #4
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a0e:	e044      	b.n	8006a9a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8bfa      	ldrh	r2, [r7, #30]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d919      	bls.n	8006a52 <HAL_SPI_Receive+0x1a2>
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d014      	beq.n	8006a52 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a32:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a38:	1d1a      	adds	r2, r3, #4
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a50:	e023      	b.n	8006a9a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a52:	f7fb fe55 	bl	8002700 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d803      	bhi.n	8006a6a <HAL_SPI_Receive+0x1ba>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d102      	bne.n	8006a70 <HAL_SPI_Receive+0x1c0>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d114      	bne.n	8006a9a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f98f 	bl	8006d94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e178      	b.n	8006d8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d194      	bne.n	80069d0 <HAL_SPI_Receive+0x120>
 8006aa6:	e15e      	b.n	8006d66 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b07      	cmp	r3, #7
 8006aae:	f240 8153 	bls.w	8006d58 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006ab2:	e08f      	b.n	8006bd4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d114      	bne.n	8006af4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	8812      	ldrh	r2, [r2, #0]
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ada:	1c9a      	adds	r2, r3, #2
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006af2:	e06f      	b.n	8006bd4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	8bfa      	ldrh	r2, [r7, #30]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d924      	bls.n	8006b4c <HAL_SPI_Receive+0x29c>
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01f      	beq.n	8006b4c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	8812      	ldrh	r2, [r2, #0]
 8006b14:	b292      	uxth	r2, r2
 8006b16:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b1c:	1c9a      	adds	r2, r3, #2
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	8812      	ldrh	r2, [r2, #0]
 8006b2a:	b292      	uxth	r2, r2
 8006b2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b32:	1c9a      	adds	r2, r3, #2
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b02      	subs	r3, #2
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b4a:	e043      	b.n	8006bd4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d119      	bne.n	8006b8c <HAL_SPI_Receive+0x2dc>
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d014      	beq.n	8006b8c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	8812      	ldrh	r2, [r2, #0]
 8006b6a:	b292      	uxth	r2, r2
 8006b6c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b72:	1c9a      	adds	r2, r3, #2
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b8a:	e023      	b.n	8006bd4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b8c:	f7fb fdb8 	bl	8002700 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d803      	bhi.n	8006ba4 <HAL_SPI_Receive+0x2f4>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	d102      	bne.n	8006baa <HAL_SPI_Receive+0x2fa>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d114      	bne.n	8006bd4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f8f2 	bl	8006d94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e0db      	b.n	8006d8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f af69 	bne.w	8006ab4 <HAL_SPI_Receive+0x204>
 8006be2:	e0c0      	b.n	8006d66 <HAL_SPI_Receive+0x4b6>
 8006be4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d117      	bne.n	8006c2e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c0a:	7812      	ldrb	r2, [r2, #0]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c2c:	e094      	b.n	8006d58 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8bfa      	ldrh	r2, [r7, #30]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d946      	bls.n	8006cca <HAL_SPI_Receive+0x41a>
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d041      	beq.n	8006cca <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c6e:	7812      	ldrb	r2, [r2, #0]
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c8a:	7812      	ldrb	r2, [r2, #0]
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b04      	subs	r3, #4
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006cc8:	e046      	b.n	8006d58 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d81c      	bhi.n	8006d10 <HAL_SPI_Receive+0x460>
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d017      	beq.n	8006d10 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cec:	7812      	ldrb	r2, [r2, #0]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d0e:	e023      	b.n	8006d58 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d10:	f7fb fcf6 	bl	8002700 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d803      	bhi.n	8006d28 <HAL_SPI_Receive+0x478>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d26:	d102      	bne.n	8006d2e <HAL_SPI_Receive+0x47e>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d114      	bne.n	8006d58 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f830 	bl	8006d94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e019      	b.n	8006d8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f47f af41 	bne.w	8006be8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f814 	bl	8006d94 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
  }
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3720      	adds	r7, #32
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0208 	orr.w	r2, r2, #8
 8006db2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0210 	orr.w	r2, r2, #16
 8006dc2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6919      	ldr	r1, [r3, #16]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b3c      	ldr	r3, [pc, #240]	@ (8006ed0 <SPI_CloseTransfer+0x13c>)
 8006de0:	400b      	ands	r3, r1
 8006de2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006df2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d014      	beq.n	8006e2a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00f      	beq.n	8006e2a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	699a      	ldr	r2, [r3, #24]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0220 	orr.w	r2, r2, #32
 8006e28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d014      	beq.n	8006e60 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00f      	beq.n	8006e60 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e46:	f043 0204 	orr.w	r2, r3, #4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e5e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00f      	beq.n	8006e8a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e70:	f043 0201 	orr.w	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699a      	ldr	r2, [r3, #24]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e88:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00f      	beq.n	8006eb4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e9a:	f043 0208 	orr.w	r2, r3, #8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eb2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	fffffc90 	.word	0xfffffc90

08006ed4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ee4:	e010      	b.n	8006f08 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ee6:	f7fb fc0b 	bl	8002700 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d803      	bhi.n	8006efe <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d102      	bne.n	8006f04 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e00f      	b.n	8006f28 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695a      	ldr	r2, [r3, #20]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4013      	ands	r3, r2
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d0df      	beq.n	8006ee6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	3301      	adds	r3, #1
 8006f48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	3307      	adds	r3, #7
 8006f4e:	08db      	lsrs	r3, r3, #3
 8006f50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e049      	b.n	800700c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d106      	bne.n	8006f92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7fb f84f 	bl	8002030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f000 f9a1 	bl	80072ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e049      	b.n	80070ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fa ffaa 	bl	8001f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	4619      	mov	r1, r3
 8007052:	4610      	mov	r0, r2
 8007054:	f000 f94a 	bl	80072ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070de:	2302      	movs	r3, #2
 80070e0:	e0ff      	b.n	80072e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b14      	cmp	r3, #20
 80070ee:	f200 80f0 	bhi.w	80072d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070f2:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	0800714d 	.word	0x0800714d
 80070fc:	080072d3 	.word	0x080072d3
 8007100:	080072d3 	.word	0x080072d3
 8007104:	080072d3 	.word	0x080072d3
 8007108:	0800718d 	.word	0x0800718d
 800710c:	080072d3 	.word	0x080072d3
 8007110:	080072d3 	.word	0x080072d3
 8007114:	080072d3 	.word	0x080072d3
 8007118:	080071cf 	.word	0x080071cf
 800711c:	080072d3 	.word	0x080072d3
 8007120:	080072d3 	.word	0x080072d3
 8007124:	080072d3 	.word	0x080072d3
 8007128:	0800720f 	.word	0x0800720f
 800712c:	080072d3 	.word	0x080072d3
 8007130:	080072d3 	.word	0x080072d3
 8007134:	080072d3 	.word	0x080072d3
 8007138:	08007251 	.word	0x08007251
 800713c:	080072d3 	.word	0x080072d3
 8007140:	080072d3 	.word	0x080072d3
 8007144:	080072d3 	.word	0x080072d3
 8007148:	08007291 	.word	0x08007291
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f970 	bl	8007438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0208 	orr.w	r2, r2, #8
 8007166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0204 	bic.w	r2, r2, #4
 8007176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6999      	ldr	r1, [r3, #24]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	619a      	str	r2, [r3, #24]
      break;
 800718a:	e0a5      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 f9e0 	bl	8007558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6999      	ldr	r1, [r3, #24]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	021a      	lsls	r2, r3, #8
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	619a      	str	r2, [r3, #24]
      break;
 80071cc:	e084      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fa49 	bl	800766c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0208 	orr.w	r2, r2, #8
 80071e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0204 	bic.w	r2, r2, #4
 80071f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69d9      	ldr	r1, [r3, #28]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	61da      	str	r2, [r3, #28]
      break;
 800720c:	e064      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fab1 	bl	800777c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69d9      	ldr	r1, [r3, #28]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	021a      	lsls	r2, r3, #8
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	61da      	str	r2, [r3, #28]
      break;
 800724e:	e043      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fafa 	bl	8007850 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0208 	orr.w	r2, r2, #8
 800726a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0204 	bic.w	r2, r2, #4
 800727a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691a      	ldr	r2, [r3, #16]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800728e:	e023      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fb3e 	bl	8007918 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	021a      	lsls	r2, r3, #8
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80072d0:	e002      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	75fb      	strb	r3, [r7, #23]
      break;
 80072d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop

080072ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a46      	ldr	r2, [pc, #280]	@ (8007418 <TIM_Base_SetConfig+0x12c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d013      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730a:	d00f      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a43      	ldr	r2, [pc, #268]	@ (800741c <TIM_Base_SetConfig+0x130>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a42      	ldr	r2, [pc, #264]	@ (8007420 <TIM_Base_SetConfig+0x134>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a41      	ldr	r2, [pc, #260]	@ (8007424 <TIM_Base_SetConfig+0x138>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_Base_SetConfig+0x40>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a40      	ldr	r2, [pc, #256]	@ (8007428 <TIM_Base_SetConfig+0x13c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d108      	bne.n	800733e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a35      	ldr	r2, [pc, #212]	@ (8007418 <TIM_Base_SetConfig+0x12c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d01f      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734c:	d01b      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a32      	ldr	r2, [pc, #200]	@ (800741c <TIM_Base_SetConfig+0x130>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d017      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a31      	ldr	r2, [pc, #196]	@ (8007420 <TIM_Base_SetConfig+0x134>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d013      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a30      	ldr	r2, [pc, #192]	@ (8007424 <TIM_Base_SetConfig+0x138>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00f      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2f      	ldr	r2, [pc, #188]	@ (8007428 <TIM_Base_SetConfig+0x13c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00b      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a2e      	ldr	r2, [pc, #184]	@ (800742c <TIM_Base_SetConfig+0x140>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d007      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a2d      	ldr	r2, [pc, #180]	@ (8007430 <TIM_Base_SetConfig+0x144>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_Base_SetConfig+0x9a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a2c      	ldr	r2, [pc, #176]	@ (8007434 <TIM_Base_SetConfig+0x148>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d108      	bne.n	8007398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800738c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a16      	ldr	r2, [pc, #88]	@ (8007418 <TIM_Base_SetConfig+0x12c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00f      	beq.n	80073e4 <TIM_Base_SetConfig+0xf8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a18      	ldr	r2, [pc, #96]	@ (8007428 <TIM_Base_SetConfig+0x13c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00b      	beq.n	80073e4 <TIM_Base_SetConfig+0xf8>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a17      	ldr	r2, [pc, #92]	@ (800742c <TIM_Base_SetConfig+0x140>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d007      	beq.n	80073e4 <TIM_Base_SetConfig+0xf8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a16      	ldr	r2, [pc, #88]	@ (8007430 <TIM_Base_SetConfig+0x144>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d003      	beq.n	80073e4 <TIM_Base_SetConfig+0xf8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a15      	ldr	r2, [pc, #84]	@ (8007434 <TIM_Base_SetConfig+0x148>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d103      	bne.n	80073ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d105      	bne.n	800740a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f023 0201 	bic.w	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	611a      	str	r2, [r3, #16]
  }
}
 800740a:	bf00      	nop
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	40010000 	.word	0x40010000
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40000c00 	.word	0x40000c00
 8007428:	40010400 	.word	0x40010400
 800742c:	40014000 	.word	0x40014000
 8007430:	40014400 	.word	0x40014400
 8007434:	40014800 	.word	0x40014800

08007438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f023 0201 	bic.w	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4b37      	ldr	r3, [pc, #220]	@ (8007540 <TIM_OC1_SetConfig+0x108>)
 8007464:	4013      	ands	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f023 0302 	bic.w	r3, r3, #2
 8007480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2d      	ldr	r2, [pc, #180]	@ (8007544 <TIM_OC1_SetConfig+0x10c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00f      	beq.n	80074b4 <TIM_OC1_SetConfig+0x7c>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a2c      	ldr	r2, [pc, #176]	@ (8007548 <TIM_OC1_SetConfig+0x110>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00b      	beq.n	80074b4 <TIM_OC1_SetConfig+0x7c>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a2b      	ldr	r2, [pc, #172]	@ (800754c <TIM_OC1_SetConfig+0x114>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d007      	beq.n	80074b4 <TIM_OC1_SetConfig+0x7c>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007550 <TIM_OC1_SetConfig+0x118>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <TIM_OC1_SetConfig+0x7c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a29      	ldr	r2, [pc, #164]	@ (8007554 <TIM_OC1_SetConfig+0x11c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d10c      	bne.n	80074ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f023 0308 	bic.w	r3, r3, #8
 80074ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f023 0304 	bic.w	r3, r3, #4
 80074cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007544 <TIM_OC1_SetConfig+0x10c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00f      	beq.n	80074f6 <TIM_OC1_SetConfig+0xbe>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007548 <TIM_OC1_SetConfig+0x110>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00b      	beq.n	80074f6 <TIM_OC1_SetConfig+0xbe>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a1a      	ldr	r2, [pc, #104]	@ (800754c <TIM_OC1_SetConfig+0x114>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d007      	beq.n	80074f6 <TIM_OC1_SetConfig+0xbe>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a19      	ldr	r2, [pc, #100]	@ (8007550 <TIM_OC1_SetConfig+0x118>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d003      	beq.n	80074f6 <TIM_OC1_SetConfig+0xbe>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a18      	ldr	r2, [pc, #96]	@ (8007554 <TIM_OC1_SetConfig+0x11c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d111      	bne.n	800751a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	621a      	str	r2, [r3, #32]
}
 8007534:	bf00      	nop
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	fffeff8f 	.word	0xfffeff8f
 8007544:	40010000 	.word	0x40010000
 8007548:	40010400 	.word	0x40010400
 800754c:	40014000 	.word	0x40014000
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800

08007558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	f023 0210 	bic.w	r2, r3, #16
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4b34      	ldr	r3, [pc, #208]	@ (8007654 <TIM_OC2_SetConfig+0xfc>)
 8007584:	4013      	ands	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800758e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f023 0320 	bic.w	r3, r3, #32
 80075a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a29      	ldr	r2, [pc, #164]	@ (8007658 <TIM_OC2_SetConfig+0x100>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_OC2_SetConfig+0x68>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a28      	ldr	r2, [pc, #160]	@ (800765c <TIM_OC2_SetConfig+0x104>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10d      	bne.n	80075dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a1e      	ldr	r2, [pc, #120]	@ (8007658 <TIM_OC2_SetConfig+0x100>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00f      	beq.n	8007604 <TIM_OC2_SetConfig+0xac>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a1d      	ldr	r2, [pc, #116]	@ (800765c <TIM_OC2_SetConfig+0x104>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00b      	beq.n	8007604 <TIM_OC2_SetConfig+0xac>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007660 <TIM_OC2_SetConfig+0x108>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <TIM_OC2_SetConfig+0xac>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007664 <TIM_OC2_SetConfig+0x10c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_OC2_SetConfig+0xac>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007668 <TIM_OC2_SetConfig+0x110>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d113      	bne.n	800762c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800760a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	621a      	str	r2, [r3, #32]
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	feff8fff 	.word	0xfeff8fff
 8007658:	40010000 	.word	0x40010000
 800765c:	40010400 	.word	0x40010400
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800

0800766c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4b33      	ldr	r3, [pc, #204]	@ (8007764 <TIM_OC3_SetConfig+0xf8>)
 8007698:	4013      	ands	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	021b      	lsls	r3, r3, #8
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a28      	ldr	r2, [pc, #160]	@ (8007768 <TIM_OC3_SetConfig+0xfc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d003      	beq.n	80076d2 <TIM_OC3_SetConfig+0x66>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a27      	ldr	r2, [pc, #156]	@ (800776c <TIM_OC3_SetConfig+0x100>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d10d      	bne.n	80076ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007768 <TIM_OC3_SetConfig+0xfc>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00f      	beq.n	8007716 <TIM_OC3_SetConfig+0xaa>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a1c      	ldr	r2, [pc, #112]	@ (800776c <TIM_OC3_SetConfig+0x100>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00b      	beq.n	8007716 <TIM_OC3_SetConfig+0xaa>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a1b      	ldr	r2, [pc, #108]	@ (8007770 <TIM_OC3_SetConfig+0x104>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d007      	beq.n	8007716 <TIM_OC3_SetConfig+0xaa>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a1a      	ldr	r2, [pc, #104]	@ (8007774 <TIM_OC3_SetConfig+0x108>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d003      	beq.n	8007716 <TIM_OC3_SetConfig+0xaa>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a19      	ldr	r2, [pc, #100]	@ (8007778 <TIM_OC3_SetConfig+0x10c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d113      	bne.n	800773e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800771c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	621a      	str	r2, [r3, #32]
}
 8007758:	bf00      	nop
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	fffeff8f 	.word	0xfffeff8f
 8007768:	40010000 	.word	0x40010000
 800776c:	40010400 	.word	0x40010400
 8007770:	40014000 	.word	0x40014000
 8007774:	40014400 	.word	0x40014400
 8007778:	40014800 	.word	0x40014800

0800777c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4b24      	ldr	r3, [pc, #144]	@ (8007838 <TIM_OC4_SetConfig+0xbc>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	031b      	lsls	r3, r3, #12
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a19      	ldr	r2, [pc, #100]	@ (800783c <TIM_OC4_SetConfig+0xc0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00f      	beq.n	80077fc <TIM_OC4_SetConfig+0x80>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a18      	ldr	r2, [pc, #96]	@ (8007840 <TIM_OC4_SetConfig+0xc4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00b      	beq.n	80077fc <TIM_OC4_SetConfig+0x80>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a17      	ldr	r2, [pc, #92]	@ (8007844 <TIM_OC4_SetConfig+0xc8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d007      	beq.n	80077fc <TIM_OC4_SetConfig+0x80>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a16      	ldr	r2, [pc, #88]	@ (8007848 <TIM_OC4_SetConfig+0xcc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d003      	beq.n	80077fc <TIM_OC4_SetConfig+0x80>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a15      	ldr	r2, [pc, #84]	@ (800784c <TIM_OC4_SetConfig+0xd0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d109      	bne.n	8007810 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	019b      	lsls	r3, r3, #6
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	621a      	str	r2, [r3, #32]
}
 800782a:	bf00      	nop
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	feff8fff 	.word	0xfeff8fff
 800783c:	40010000 	.word	0x40010000
 8007840:	40010400 	.word	0x40010400
 8007844:	40014000 	.word	0x40014000
 8007848:	40014400 	.word	0x40014400
 800784c:	40014800 	.word	0x40014800

08007850 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4b21      	ldr	r3, [pc, #132]	@ (8007900 <TIM_OC5_SetConfig+0xb0>)
 800787c:	4013      	ands	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007890:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	041b      	lsls	r3, r3, #16
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	4313      	orrs	r3, r2
 800789c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a18      	ldr	r2, [pc, #96]	@ (8007904 <TIM_OC5_SetConfig+0xb4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00f      	beq.n	80078c6 <TIM_OC5_SetConfig+0x76>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a17      	ldr	r2, [pc, #92]	@ (8007908 <TIM_OC5_SetConfig+0xb8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <TIM_OC5_SetConfig+0x76>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a16      	ldr	r2, [pc, #88]	@ (800790c <TIM_OC5_SetConfig+0xbc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d007      	beq.n	80078c6 <TIM_OC5_SetConfig+0x76>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a15      	ldr	r2, [pc, #84]	@ (8007910 <TIM_OC5_SetConfig+0xc0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_OC5_SetConfig+0x76>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a14      	ldr	r2, [pc, #80]	@ (8007914 <TIM_OC5_SetConfig+0xc4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d109      	bne.n	80078da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	021b      	lsls	r3, r3, #8
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	621a      	str	r2, [r3, #32]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	fffeff8f 	.word	0xfffeff8f
 8007904:	40010000 	.word	0x40010000
 8007908:	40010400 	.word	0x40010400
 800790c:	40014000 	.word	0x40014000
 8007910:	40014400 	.word	0x40014400
 8007914:	40014800 	.word	0x40014800

08007918 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	4b22      	ldr	r3, [pc, #136]	@ (80079cc <TIM_OC6_SetConfig+0xb4>)
 8007944:	4013      	ands	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800795a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	051b      	lsls	r3, r3, #20
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a19      	ldr	r2, [pc, #100]	@ (80079d0 <TIM_OC6_SetConfig+0xb8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00f      	beq.n	8007990 <TIM_OC6_SetConfig+0x78>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a18      	ldr	r2, [pc, #96]	@ (80079d4 <TIM_OC6_SetConfig+0xbc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00b      	beq.n	8007990 <TIM_OC6_SetConfig+0x78>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a17      	ldr	r2, [pc, #92]	@ (80079d8 <TIM_OC6_SetConfig+0xc0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d007      	beq.n	8007990 <TIM_OC6_SetConfig+0x78>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a16      	ldr	r2, [pc, #88]	@ (80079dc <TIM_OC6_SetConfig+0xc4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d003      	beq.n	8007990 <TIM_OC6_SetConfig+0x78>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a15      	ldr	r2, [pc, #84]	@ (80079e0 <TIM_OC6_SetConfig+0xc8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d109      	bne.n	80079a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007996:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	621a      	str	r2, [r3, #32]
}
 80079be:	bf00      	nop
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	feff8fff 	.word	0xfeff8fff
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40010400 	.word	0x40010400
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40014400 	.word	0x40014400
 80079e0:	40014800 	.word	0x40014800

080079e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e06d      	b.n	8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a30      	ldr	r2, [pc, #192]	@ (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d108      	bne.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007a36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a20      	ldr	r2, [pc, #128]	@ (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d022      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a6e:	d01d      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a1d      	ldr	r2, [pc, #116]	@ (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d018      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1a      	ldr	r2, [pc, #104]	@ (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00e      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a15      	ldr	r2, [pc, #84]	@ (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d009      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a16      	ldr	r2, [pc, #88]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a15      	ldr	r2, [pc, #84]	@ (8007afc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d10c      	bne.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ab2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40010400 	.word	0x40010400
 8007aec:	40000400 	.word	0x40000400
 8007af0:	40000800 	.word	0x40000800
 8007af4:	40000c00 	.word	0x40000c00
 8007af8:	40001800 	.word	0x40001800
 8007afc:	40014000 	.word	0x40014000

08007b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e042      	b.n	8007b98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d106      	bne.n	8007b2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7fa fc33 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2224      	movs	r2, #36	@ 0x24
 8007b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 0201 	bic.w	r2, r2, #1
 8007b40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fe94 	bl	8008878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f825 	bl	8007ba0 <UART_SetConfig>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d101      	bne.n	8007b60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e01b      	b.n	8007b98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0201 	orr.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 ff13 	bl	80089bc <UART_CheckIdleState>
 8007b96:	4603      	mov	r3, r0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ba4:	b092      	sub	sp, #72	@ 0x48
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	4bbe      	ldr	r3, [pc, #760]	@ (8007ec8 <UART_SetConfig+0x328>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4ab3      	ldr	r2, [pc, #716]	@ (8007ecc <UART_SetConfig+0x32c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	4baf      	ldr	r3, [pc, #700]	@ (8007ed0 <UART_SetConfig+0x330>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	6812      	ldr	r2, [r2, #0]
 8007c1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c26:	f023 010f 	bic.w	r1, r3, #15
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4aa6      	ldr	r2, [pc, #664]	@ (8007ed4 <UART_SetConfig+0x334>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d177      	bne.n	8007d30 <UART_SetConfig+0x190>
 8007c40:	4ba5      	ldr	r3, [pc, #660]	@ (8007ed8 <UART_SetConfig+0x338>)
 8007c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c48:	2b28      	cmp	r3, #40	@ 0x28
 8007c4a:	d86d      	bhi.n	8007d28 <UART_SetConfig+0x188>
 8007c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <UART_SetConfig+0xb4>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007cf9 	.word	0x08007cf9
 8007c58:	08007d29 	.word	0x08007d29
 8007c5c:	08007d29 	.word	0x08007d29
 8007c60:	08007d29 	.word	0x08007d29
 8007c64:	08007d29 	.word	0x08007d29
 8007c68:	08007d29 	.word	0x08007d29
 8007c6c:	08007d29 	.word	0x08007d29
 8007c70:	08007d29 	.word	0x08007d29
 8007c74:	08007d01 	.word	0x08007d01
 8007c78:	08007d29 	.word	0x08007d29
 8007c7c:	08007d29 	.word	0x08007d29
 8007c80:	08007d29 	.word	0x08007d29
 8007c84:	08007d29 	.word	0x08007d29
 8007c88:	08007d29 	.word	0x08007d29
 8007c8c:	08007d29 	.word	0x08007d29
 8007c90:	08007d29 	.word	0x08007d29
 8007c94:	08007d09 	.word	0x08007d09
 8007c98:	08007d29 	.word	0x08007d29
 8007c9c:	08007d29 	.word	0x08007d29
 8007ca0:	08007d29 	.word	0x08007d29
 8007ca4:	08007d29 	.word	0x08007d29
 8007ca8:	08007d29 	.word	0x08007d29
 8007cac:	08007d29 	.word	0x08007d29
 8007cb0:	08007d29 	.word	0x08007d29
 8007cb4:	08007d11 	.word	0x08007d11
 8007cb8:	08007d29 	.word	0x08007d29
 8007cbc:	08007d29 	.word	0x08007d29
 8007cc0:	08007d29 	.word	0x08007d29
 8007cc4:	08007d29 	.word	0x08007d29
 8007cc8:	08007d29 	.word	0x08007d29
 8007ccc:	08007d29 	.word	0x08007d29
 8007cd0:	08007d29 	.word	0x08007d29
 8007cd4:	08007d19 	.word	0x08007d19
 8007cd8:	08007d29 	.word	0x08007d29
 8007cdc:	08007d29 	.word	0x08007d29
 8007ce0:	08007d29 	.word	0x08007d29
 8007ce4:	08007d29 	.word	0x08007d29
 8007ce8:	08007d29 	.word	0x08007d29
 8007cec:	08007d29 	.word	0x08007d29
 8007cf0:	08007d29 	.word	0x08007d29
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfe:	e326      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d00:	2304      	movs	r3, #4
 8007d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d06:	e322      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d08:	2308      	movs	r3, #8
 8007d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0e:	e31e      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d10:	2310      	movs	r3, #16
 8007d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d16:	e31a      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d18:	2320      	movs	r3, #32
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1e:	e316      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d20:	2340      	movs	r3, #64	@ 0x40
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d26:	e312      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d28:	2380      	movs	r3, #128	@ 0x80
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2e:	e30e      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a69      	ldr	r2, [pc, #420]	@ (8007edc <UART_SetConfig+0x33c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d130      	bne.n	8007d9c <UART_SetConfig+0x1fc>
 8007d3a:	4b67      	ldr	r3, [pc, #412]	@ (8007ed8 <UART_SetConfig+0x338>)
 8007d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	d826      	bhi.n	8007d94 <UART_SetConfig+0x1f4>
 8007d46:	a201      	add	r2, pc, #4	@ (adr r2, 8007d4c <UART_SetConfig+0x1ac>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d65 	.word	0x08007d65
 8007d50:	08007d6d 	.word	0x08007d6d
 8007d54:	08007d75 	.word	0x08007d75
 8007d58:	08007d7d 	.word	0x08007d7d
 8007d5c:	08007d85 	.word	0x08007d85
 8007d60:	08007d8d 	.word	0x08007d8d
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6a:	e2f0      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d72:	e2ec      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d74:	2308      	movs	r3, #8
 8007d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7a:	e2e8      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d82:	e2e4      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d84:	2320      	movs	r3, #32
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8a:	e2e0      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d8c:	2340      	movs	r3, #64	@ 0x40
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d92:	e2dc      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d94:	2380      	movs	r3, #128	@ 0x80
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e2d8      	b.n	800834e <UART_SetConfig+0x7ae>
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a4f      	ldr	r2, [pc, #316]	@ (8007ee0 <UART_SetConfig+0x340>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d130      	bne.n	8007e08 <UART_SetConfig+0x268>
 8007da6:	4b4c      	ldr	r3, [pc, #304]	@ (8007ed8 <UART_SetConfig+0x338>)
 8007da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007daa:	f003 0307 	and.w	r3, r3, #7
 8007dae:	2b05      	cmp	r3, #5
 8007db0:	d826      	bhi.n	8007e00 <UART_SetConfig+0x260>
 8007db2:	a201      	add	r2, pc, #4	@ (adr r2, 8007db8 <UART_SetConfig+0x218>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007dd1 	.word	0x08007dd1
 8007dbc:	08007dd9 	.word	0x08007dd9
 8007dc0:	08007de1 	.word	0x08007de1
 8007dc4:	08007de9 	.word	0x08007de9
 8007dc8:	08007df1 	.word	0x08007df1
 8007dcc:	08007df9 	.word	0x08007df9
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd6:	e2ba      	b.n	800834e <UART_SetConfig+0x7ae>
 8007dd8:	2304      	movs	r3, #4
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dde:	e2b6      	b.n	800834e <UART_SetConfig+0x7ae>
 8007de0:	2308      	movs	r3, #8
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de6:	e2b2      	b.n	800834e <UART_SetConfig+0x7ae>
 8007de8:	2310      	movs	r3, #16
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dee:	e2ae      	b.n	800834e <UART_SetConfig+0x7ae>
 8007df0:	2320      	movs	r3, #32
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df6:	e2aa      	b.n	800834e <UART_SetConfig+0x7ae>
 8007df8:	2340      	movs	r3, #64	@ 0x40
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfe:	e2a6      	b.n	800834e <UART_SetConfig+0x7ae>
 8007e00:	2380      	movs	r3, #128	@ 0x80
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e06:	e2a2      	b.n	800834e <UART_SetConfig+0x7ae>
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a35      	ldr	r2, [pc, #212]	@ (8007ee4 <UART_SetConfig+0x344>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d130      	bne.n	8007e74 <UART_SetConfig+0x2d4>
 8007e12:	4b31      	ldr	r3, [pc, #196]	@ (8007ed8 <UART_SetConfig+0x338>)
 8007e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	d826      	bhi.n	8007e6c <UART_SetConfig+0x2cc>
 8007e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e24 <UART_SetConfig+0x284>)
 8007e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e24:	08007e3d 	.word	0x08007e3d
 8007e28:	08007e45 	.word	0x08007e45
 8007e2c:	08007e4d 	.word	0x08007e4d
 8007e30:	08007e55 	.word	0x08007e55
 8007e34:	08007e5d 	.word	0x08007e5d
 8007e38:	08007e65 	.word	0x08007e65
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e42:	e284      	b.n	800834e <UART_SetConfig+0x7ae>
 8007e44:	2304      	movs	r3, #4
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4a:	e280      	b.n	800834e <UART_SetConfig+0x7ae>
 8007e4c:	2308      	movs	r3, #8
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e27c      	b.n	800834e <UART_SetConfig+0x7ae>
 8007e54:	2310      	movs	r3, #16
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e278      	b.n	800834e <UART_SetConfig+0x7ae>
 8007e5c:	2320      	movs	r3, #32
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e62:	e274      	b.n	800834e <UART_SetConfig+0x7ae>
 8007e64:	2340      	movs	r3, #64	@ 0x40
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6a:	e270      	b.n	800834e <UART_SetConfig+0x7ae>
 8007e6c:	2380      	movs	r3, #128	@ 0x80
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e72:	e26c      	b.n	800834e <UART_SetConfig+0x7ae>
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee8 <UART_SetConfig+0x348>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d142      	bne.n	8007f04 <UART_SetConfig+0x364>
 8007e7e:	4b16      	ldr	r3, [pc, #88]	@ (8007ed8 <UART_SetConfig+0x338>)
 8007e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	2b05      	cmp	r3, #5
 8007e88:	d838      	bhi.n	8007efc <UART_SetConfig+0x35c>
 8007e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e90 <UART_SetConfig+0x2f0>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007ea9 	.word	0x08007ea9
 8007e94:	08007eb1 	.word	0x08007eb1
 8007e98:	08007eb9 	.word	0x08007eb9
 8007e9c:	08007ec1 	.word	0x08007ec1
 8007ea0:	08007eed 	.word	0x08007eed
 8007ea4:	08007ef5 	.word	0x08007ef5
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eae:	e24e      	b.n	800834e <UART_SetConfig+0x7ae>
 8007eb0:	2304      	movs	r3, #4
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb6:	e24a      	b.n	800834e <UART_SetConfig+0x7ae>
 8007eb8:	2308      	movs	r3, #8
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ebe:	e246      	b.n	800834e <UART_SetConfig+0x7ae>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec6:	e242      	b.n	800834e <UART_SetConfig+0x7ae>
 8007ec8:	cfff69f3 	.word	0xcfff69f3
 8007ecc:	58000c00 	.word	0x58000c00
 8007ed0:	11fff4ff 	.word	0x11fff4ff
 8007ed4:	40011000 	.word	0x40011000
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	40004400 	.word	0x40004400
 8007ee0:	40004800 	.word	0x40004800
 8007ee4:	40004c00 	.word	0x40004c00
 8007ee8:	40005000 	.word	0x40005000
 8007eec:	2320      	movs	r3, #32
 8007eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef2:	e22c      	b.n	800834e <UART_SetConfig+0x7ae>
 8007ef4:	2340      	movs	r3, #64	@ 0x40
 8007ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efa:	e228      	b.n	800834e <UART_SetConfig+0x7ae>
 8007efc:	2380      	movs	r3, #128	@ 0x80
 8007efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f02:	e224      	b.n	800834e <UART_SetConfig+0x7ae>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4ab1      	ldr	r2, [pc, #708]	@ (80081d0 <UART_SetConfig+0x630>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d176      	bne.n	8007ffc <UART_SetConfig+0x45c>
 8007f0e:	4bb1      	ldr	r3, [pc, #708]	@ (80081d4 <UART_SetConfig+0x634>)
 8007f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f16:	2b28      	cmp	r3, #40	@ 0x28
 8007f18:	d86c      	bhi.n	8007ff4 <UART_SetConfig+0x454>
 8007f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <UART_SetConfig+0x380>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007fc5 	.word	0x08007fc5
 8007f24:	08007ff5 	.word	0x08007ff5
 8007f28:	08007ff5 	.word	0x08007ff5
 8007f2c:	08007ff5 	.word	0x08007ff5
 8007f30:	08007ff5 	.word	0x08007ff5
 8007f34:	08007ff5 	.word	0x08007ff5
 8007f38:	08007ff5 	.word	0x08007ff5
 8007f3c:	08007ff5 	.word	0x08007ff5
 8007f40:	08007fcd 	.word	0x08007fcd
 8007f44:	08007ff5 	.word	0x08007ff5
 8007f48:	08007ff5 	.word	0x08007ff5
 8007f4c:	08007ff5 	.word	0x08007ff5
 8007f50:	08007ff5 	.word	0x08007ff5
 8007f54:	08007ff5 	.word	0x08007ff5
 8007f58:	08007ff5 	.word	0x08007ff5
 8007f5c:	08007ff5 	.word	0x08007ff5
 8007f60:	08007fd5 	.word	0x08007fd5
 8007f64:	08007ff5 	.word	0x08007ff5
 8007f68:	08007ff5 	.word	0x08007ff5
 8007f6c:	08007ff5 	.word	0x08007ff5
 8007f70:	08007ff5 	.word	0x08007ff5
 8007f74:	08007ff5 	.word	0x08007ff5
 8007f78:	08007ff5 	.word	0x08007ff5
 8007f7c:	08007ff5 	.word	0x08007ff5
 8007f80:	08007fdd 	.word	0x08007fdd
 8007f84:	08007ff5 	.word	0x08007ff5
 8007f88:	08007ff5 	.word	0x08007ff5
 8007f8c:	08007ff5 	.word	0x08007ff5
 8007f90:	08007ff5 	.word	0x08007ff5
 8007f94:	08007ff5 	.word	0x08007ff5
 8007f98:	08007ff5 	.word	0x08007ff5
 8007f9c:	08007ff5 	.word	0x08007ff5
 8007fa0:	08007fe5 	.word	0x08007fe5
 8007fa4:	08007ff5 	.word	0x08007ff5
 8007fa8:	08007ff5 	.word	0x08007ff5
 8007fac:	08007ff5 	.word	0x08007ff5
 8007fb0:	08007ff5 	.word	0x08007ff5
 8007fb4:	08007ff5 	.word	0x08007ff5
 8007fb8:	08007ff5 	.word	0x08007ff5
 8007fbc:	08007ff5 	.word	0x08007ff5
 8007fc0:	08007fed 	.word	0x08007fed
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fca:	e1c0      	b.n	800834e <UART_SetConfig+0x7ae>
 8007fcc:	2304      	movs	r3, #4
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd2:	e1bc      	b.n	800834e <UART_SetConfig+0x7ae>
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fda:	e1b8      	b.n	800834e <UART_SetConfig+0x7ae>
 8007fdc:	2310      	movs	r3, #16
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e1b4      	b.n	800834e <UART_SetConfig+0x7ae>
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e1b0      	b.n	800834e <UART_SetConfig+0x7ae>
 8007fec:	2340      	movs	r3, #64	@ 0x40
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e1ac      	b.n	800834e <UART_SetConfig+0x7ae>
 8007ff4:	2380      	movs	r3, #128	@ 0x80
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e1a8      	b.n	800834e <UART_SetConfig+0x7ae>
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a75      	ldr	r2, [pc, #468]	@ (80081d8 <UART_SetConfig+0x638>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d130      	bne.n	8008068 <UART_SetConfig+0x4c8>
 8008006:	4b73      	ldr	r3, [pc, #460]	@ (80081d4 <UART_SetConfig+0x634>)
 8008008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	2b05      	cmp	r3, #5
 8008010:	d826      	bhi.n	8008060 <UART_SetConfig+0x4c0>
 8008012:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <UART_SetConfig+0x478>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	08008031 	.word	0x08008031
 800801c:	08008039 	.word	0x08008039
 8008020:	08008041 	.word	0x08008041
 8008024:	08008049 	.word	0x08008049
 8008028:	08008051 	.word	0x08008051
 800802c:	08008059 	.word	0x08008059
 8008030:	2300      	movs	r3, #0
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008036:	e18a      	b.n	800834e <UART_SetConfig+0x7ae>
 8008038:	2304      	movs	r3, #4
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800803e:	e186      	b.n	800834e <UART_SetConfig+0x7ae>
 8008040:	2308      	movs	r3, #8
 8008042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008046:	e182      	b.n	800834e <UART_SetConfig+0x7ae>
 8008048:	2310      	movs	r3, #16
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804e:	e17e      	b.n	800834e <UART_SetConfig+0x7ae>
 8008050:	2320      	movs	r3, #32
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008056:	e17a      	b.n	800834e <UART_SetConfig+0x7ae>
 8008058:	2340      	movs	r3, #64	@ 0x40
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805e:	e176      	b.n	800834e <UART_SetConfig+0x7ae>
 8008060:	2380      	movs	r3, #128	@ 0x80
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008066:	e172      	b.n	800834e <UART_SetConfig+0x7ae>
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a5b      	ldr	r2, [pc, #364]	@ (80081dc <UART_SetConfig+0x63c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d130      	bne.n	80080d4 <UART_SetConfig+0x534>
 8008072:	4b58      	ldr	r3, [pc, #352]	@ (80081d4 <UART_SetConfig+0x634>)
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	2b05      	cmp	r3, #5
 800807c:	d826      	bhi.n	80080cc <UART_SetConfig+0x52c>
 800807e:	a201      	add	r2, pc, #4	@ (adr r2, 8008084 <UART_SetConfig+0x4e4>)
 8008080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008084:	0800809d 	.word	0x0800809d
 8008088:	080080a5 	.word	0x080080a5
 800808c:	080080ad 	.word	0x080080ad
 8008090:	080080b5 	.word	0x080080b5
 8008094:	080080bd 	.word	0x080080bd
 8008098:	080080c5 	.word	0x080080c5
 800809c:	2300      	movs	r3, #0
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a2:	e154      	b.n	800834e <UART_SetConfig+0x7ae>
 80080a4:	2304      	movs	r3, #4
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080aa:	e150      	b.n	800834e <UART_SetConfig+0x7ae>
 80080ac:	2308      	movs	r3, #8
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b2:	e14c      	b.n	800834e <UART_SetConfig+0x7ae>
 80080b4:	2310      	movs	r3, #16
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ba:	e148      	b.n	800834e <UART_SetConfig+0x7ae>
 80080bc:	2320      	movs	r3, #32
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c2:	e144      	b.n	800834e <UART_SetConfig+0x7ae>
 80080c4:	2340      	movs	r3, #64	@ 0x40
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ca:	e140      	b.n	800834e <UART_SetConfig+0x7ae>
 80080cc:	2380      	movs	r3, #128	@ 0x80
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d2:	e13c      	b.n	800834e <UART_SetConfig+0x7ae>
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a41      	ldr	r2, [pc, #260]	@ (80081e0 <UART_SetConfig+0x640>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	f040 8082 	bne.w	80081e4 <UART_SetConfig+0x644>
 80080e0:	4b3c      	ldr	r3, [pc, #240]	@ (80081d4 <UART_SetConfig+0x634>)
 80080e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080e8:	2b28      	cmp	r3, #40	@ 0x28
 80080ea:	d86d      	bhi.n	80081c8 <UART_SetConfig+0x628>
 80080ec:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <UART_SetConfig+0x554>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008199 	.word	0x08008199
 80080f8:	080081c9 	.word	0x080081c9
 80080fc:	080081c9 	.word	0x080081c9
 8008100:	080081c9 	.word	0x080081c9
 8008104:	080081c9 	.word	0x080081c9
 8008108:	080081c9 	.word	0x080081c9
 800810c:	080081c9 	.word	0x080081c9
 8008110:	080081c9 	.word	0x080081c9
 8008114:	080081a1 	.word	0x080081a1
 8008118:	080081c9 	.word	0x080081c9
 800811c:	080081c9 	.word	0x080081c9
 8008120:	080081c9 	.word	0x080081c9
 8008124:	080081c9 	.word	0x080081c9
 8008128:	080081c9 	.word	0x080081c9
 800812c:	080081c9 	.word	0x080081c9
 8008130:	080081c9 	.word	0x080081c9
 8008134:	080081a9 	.word	0x080081a9
 8008138:	080081c9 	.word	0x080081c9
 800813c:	080081c9 	.word	0x080081c9
 8008140:	080081c9 	.word	0x080081c9
 8008144:	080081c9 	.word	0x080081c9
 8008148:	080081c9 	.word	0x080081c9
 800814c:	080081c9 	.word	0x080081c9
 8008150:	080081c9 	.word	0x080081c9
 8008154:	080081b1 	.word	0x080081b1
 8008158:	080081c9 	.word	0x080081c9
 800815c:	080081c9 	.word	0x080081c9
 8008160:	080081c9 	.word	0x080081c9
 8008164:	080081c9 	.word	0x080081c9
 8008168:	080081c9 	.word	0x080081c9
 800816c:	080081c9 	.word	0x080081c9
 8008170:	080081c9 	.word	0x080081c9
 8008174:	080081b9 	.word	0x080081b9
 8008178:	080081c9 	.word	0x080081c9
 800817c:	080081c9 	.word	0x080081c9
 8008180:	080081c9 	.word	0x080081c9
 8008184:	080081c9 	.word	0x080081c9
 8008188:	080081c9 	.word	0x080081c9
 800818c:	080081c9 	.word	0x080081c9
 8008190:	080081c9 	.word	0x080081c9
 8008194:	080081c1 	.word	0x080081c1
 8008198:	2301      	movs	r3, #1
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819e:	e0d6      	b.n	800834e <UART_SetConfig+0x7ae>
 80081a0:	2304      	movs	r3, #4
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a6:	e0d2      	b.n	800834e <UART_SetConfig+0x7ae>
 80081a8:	2308      	movs	r3, #8
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ae:	e0ce      	b.n	800834e <UART_SetConfig+0x7ae>
 80081b0:	2310      	movs	r3, #16
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b6:	e0ca      	b.n	800834e <UART_SetConfig+0x7ae>
 80081b8:	2320      	movs	r3, #32
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081be:	e0c6      	b.n	800834e <UART_SetConfig+0x7ae>
 80081c0:	2340      	movs	r3, #64	@ 0x40
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081c6:	e0c2      	b.n	800834e <UART_SetConfig+0x7ae>
 80081c8:	2380      	movs	r3, #128	@ 0x80
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ce:	e0be      	b.n	800834e <UART_SetConfig+0x7ae>
 80081d0:	40011400 	.word	0x40011400
 80081d4:	58024400 	.word	0x58024400
 80081d8:	40007800 	.word	0x40007800
 80081dc:	40007c00 	.word	0x40007c00
 80081e0:	40011800 	.word	0x40011800
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4aad      	ldr	r2, [pc, #692]	@ (80084a0 <UART_SetConfig+0x900>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d176      	bne.n	80082dc <UART_SetConfig+0x73c>
 80081ee:	4bad      	ldr	r3, [pc, #692]	@ (80084a4 <UART_SetConfig+0x904>)
 80081f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081f6:	2b28      	cmp	r3, #40	@ 0x28
 80081f8:	d86c      	bhi.n	80082d4 <UART_SetConfig+0x734>
 80081fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008200 <UART_SetConfig+0x660>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	080082a5 	.word	0x080082a5
 8008204:	080082d5 	.word	0x080082d5
 8008208:	080082d5 	.word	0x080082d5
 800820c:	080082d5 	.word	0x080082d5
 8008210:	080082d5 	.word	0x080082d5
 8008214:	080082d5 	.word	0x080082d5
 8008218:	080082d5 	.word	0x080082d5
 800821c:	080082d5 	.word	0x080082d5
 8008220:	080082ad 	.word	0x080082ad
 8008224:	080082d5 	.word	0x080082d5
 8008228:	080082d5 	.word	0x080082d5
 800822c:	080082d5 	.word	0x080082d5
 8008230:	080082d5 	.word	0x080082d5
 8008234:	080082d5 	.word	0x080082d5
 8008238:	080082d5 	.word	0x080082d5
 800823c:	080082d5 	.word	0x080082d5
 8008240:	080082b5 	.word	0x080082b5
 8008244:	080082d5 	.word	0x080082d5
 8008248:	080082d5 	.word	0x080082d5
 800824c:	080082d5 	.word	0x080082d5
 8008250:	080082d5 	.word	0x080082d5
 8008254:	080082d5 	.word	0x080082d5
 8008258:	080082d5 	.word	0x080082d5
 800825c:	080082d5 	.word	0x080082d5
 8008260:	080082bd 	.word	0x080082bd
 8008264:	080082d5 	.word	0x080082d5
 8008268:	080082d5 	.word	0x080082d5
 800826c:	080082d5 	.word	0x080082d5
 8008270:	080082d5 	.word	0x080082d5
 8008274:	080082d5 	.word	0x080082d5
 8008278:	080082d5 	.word	0x080082d5
 800827c:	080082d5 	.word	0x080082d5
 8008280:	080082c5 	.word	0x080082c5
 8008284:	080082d5 	.word	0x080082d5
 8008288:	080082d5 	.word	0x080082d5
 800828c:	080082d5 	.word	0x080082d5
 8008290:	080082d5 	.word	0x080082d5
 8008294:	080082d5 	.word	0x080082d5
 8008298:	080082d5 	.word	0x080082d5
 800829c:	080082d5 	.word	0x080082d5
 80082a0:	080082cd 	.word	0x080082cd
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082aa:	e050      	b.n	800834e <UART_SetConfig+0x7ae>
 80082ac:	2304      	movs	r3, #4
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b2:	e04c      	b.n	800834e <UART_SetConfig+0x7ae>
 80082b4:	2308      	movs	r3, #8
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ba:	e048      	b.n	800834e <UART_SetConfig+0x7ae>
 80082bc:	2310      	movs	r3, #16
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e044      	b.n	800834e <UART_SetConfig+0x7ae>
 80082c4:	2320      	movs	r3, #32
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e040      	b.n	800834e <UART_SetConfig+0x7ae>
 80082cc:	2340      	movs	r3, #64	@ 0x40
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e03c      	b.n	800834e <UART_SetConfig+0x7ae>
 80082d4:	2380      	movs	r3, #128	@ 0x80
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e038      	b.n	800834e <UART_SetConfig+0x7ae>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a71      	ldr	r2, [pc, #452]	@ (80084a8 <UART_SetConfig+0x908>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d130      	bne.n	8008348 <UART_SetConfig+0x7a8>
 80082e6:	4b6f      	ldr	r3, [pc, #444]	@ (80084a4 <UART_SetConfig+0x904>)
 80082e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	2b05      	cmp	r3, #5
 80082f0:	d826      	bhi.n	8008340 <UART_SetConfig+0x7a0>
 80082f2:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <UART_SetConfig+0x758>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008311 	.word	0x08008311
 80082fc:	08008319 	.word	0x08008319
 8008300:	08008321 	.word	0x08008321
 8008304:	08008329 	.word	0x08008329
 8008308:	08008331 	.word	0x08008331
 800830c:	08008339 	.word	0x08008339
 8008310:	2302      	movs	r3, #2
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e01a      	b.n	800834e <UART_SetConfig+0x7ae>
 8008318:	2304      	movs	r3, #4
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831e:	e016      	b.n	800834e <UART_SetConfig+0x7ae>
 8008320:	2308      	movs	r3, #8
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008326:	e012      	b.n	800834e <UART_SetConfig+0x7ae>
 8008328:	2310      	movs	r3, #16
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832e:	e00e      	b.n	800834e <UART_SetConfig+0x7ae>
 8008330:	2320      	movs	r3, #32
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e00a      	b.n	800834e <UART_SetConfig+0x7ae>
 8008338:	2340      	movs	r3, #64	@ 0x40
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e006      	b.n	800834e <UART_SetConfig+0x7ae>
 8008340:	2380      	movs	r3, #128	@ 0x80
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e002      	b.n	800834e <UART_SetConfig+0x7ae>
 8008348:	2380      	movs	r3, #128	@ 0x80
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a55      	ldr	r2, [pc, #340]	@ (80084a8 <UART_SetConfig+0x908>)
 8008354:	4293      	cmp	r3, r2
 8008356:	f040 80f8 	bne.w	800854a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800835a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800835e:	2b20      	cmp	r3, #32
 8008360:	dc46      	bgt.n	80083f0 <UART_SetConfig+0x850>
 8008362:	2b02      	cmp	r3, #2
 8008364:	db75      	blt.n	8008452 <UART_SetConfig+0x8b2>
 8008366:	3b02      	subs	r3, #2
 8008368:	2b1e      	cmp	r3, #30
 800836a:	d872      	bhi.n	8008452 <UART_SetConfig+0x8b2>
 800836c:	a201      	add	r2, pc, #4	@ (adr r2, 8008374 <UART_SetConfig+0x7d4>)
 800836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008372:	bf00      	nop
 8008374:	080083f7 	.word	0x080083f7
 8008378:	08008453 	.word	0x08008453
 800837c:	080083ff 	.word	0x080083ff
 8008380:	08008453 	.word	0x08008453
 8008384:	08008453 	.word	0x08008453
 8008388:	08008453 	.word	0x08008453
 800838c:	0800840f 	.word	0x0800840f
 8008390:	08008453 	.word	0x08008453
 8008394:	08008453 	.word	0x08008453
 8008398:	08008453 	.word	0x08008453
 800839c:	08008453 	.word	0x08008453
 80083a0:	08008453 	.word	0x08008453
 80083a4:	08008453 	.word	0x08008453
 80083a8:	08008453 	.word	0x08008453
 80083ac:	0800841f 	.word	0x0800841f
 80083b0:	08008453 	.word	0x08008453
 80083b4:	08008453 	.word	0x08008453
 80083b8:	08008453 	.word	0x08008453
 80083bc:	08008453 	.word	0x08008453
 80083c0:	08008453 	.word	0x08008453
 80083c4:	08008453 	.word	0x08008453
 80083c8:	08008453 	.word	0x08008453
 80083cc:	08008453 	.word	0x08008453
 80083d0:	08008453 	.word	0x08008453
 80083d4:	08008453 	.word	0x08008453
 80083d8:	08008453 	.word	0x08008453
 80083dc:	08008453 	.word	0x08008453
 80083e0:	08008453 	.word	0x08008453
 80083e4:	08008453 	.word	0x08008453
 80083e8:	08008453 	.word	0x08008453
 80083ec:	08008445 	.word	0x08008445
 80083f0:	2b40      	cmp	r3, #64	@ 0x40
 80083f2:	d02a      	beq.n	800844a <UART_SetConfig+0x8aa>
 80083f4:	e02d      	b.n	8008452 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80083f6:	f7fd fb27 	bl	8005a48 <HAL_RCCEx_GetD3PCLK1Freq>
 80083fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80083fc:	e02f      	b.n	800845e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008402:	4618      	mov	r0, r3
 8008404:	f7fd fb36 	bl	8005a74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840c:	e027      	b.n	800845e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800840e:	f107 0318 	add.w	r3, r7, #24
 8008412:	4618      	mov	r0, r3
 8008414:	f7fd fc82 	bl	8005d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800841c:	e01f      	b.n	800845e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800841e:	4b21      	ldr	r3, [pc, #132]	@ (80084a4 <UART_SetConfig+0x904>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0320 	and.w	r3, r3, #32
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800842a:	4b1e      	ldr	r3, [pc, #120]	@ (80084a4 <UART_SetConfig+0x904>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	08db      	lsrs	r3, r3, #3
 8008430:	f003 0303 	and.w	r3, r3, #3
 8008434:	4a1d      	ldr	r2, [pc, #116]	@ (80084ac <UART_SetConfig+0x90c>)
 8008436:	fa22 f303 	lsr.w	r3, r2, r3
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800843c:	e00f      	b.n	800845e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800843e:	4b1b      	ldr	r3, [pc, #108]	@ (80084ac <UART_SetConfig+0x90c>)
 8008440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008442:	e00c      	b.n	800845e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008444:	4b1a      	ldr	r3, [pc, #104]	@ (80084b0 <UART_SetConfig+0x910>)
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008448:	e009      	b.n	800845e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800844a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800844e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008450:	e005      	b.n	800845e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800845c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800845e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 81ee 	beq.w	8008842 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846a:	4a12      	ldr	r2, [pc, #72]	@ (80084b4 <UART_SetConfig+0x914>)
 800846c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008470:	461a      	mov	r2, r3
 8008472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008474:	fbb3 f3f2 	udiv	r3, r3, r2
 8008478:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	4613      	mov	r3, r2
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	4413      	add	r3, r2
 8008484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008486:	429a      	cmp	r2, r3
 8008488:	d305      	bcc.n	8008496 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008492:	429a      	cmp	r2, r3
 8008494:	d910      	bls.n	80084b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800849c:	e1d1      	b.n	8008842 <UART_SetConfig+0xca2>
 800849e:	bf00      	nop
 80084a0:	40011c00 	.word	0x40011c00
 80084a4:	58024400 	.word	0x58024400
 80084a8:	58000c00 	.word	0x58000c00
 80084ac:	03d09000 	.word	0x03d09000
 80084b0:	003d0900 	.word	0x003d0900
 80084b4:	0800920c 	.word	0x0800920c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ba:	2200      	movs	r2, #0
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	60fa      	str	r2, [r7, #12]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c4:	4ac0      	ldr	r2, [pc, #768]	@ (80087c8 <UART_SetConfig+0xc28>)
 80084c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2200      	movs	r2, #0
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084da:	f7f7 ff59 	bl	8000390 <__aeabi_uldivmod>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4610      	mov	r0, r2
 80084e4:	4619      	mov	r1, r3
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	020b      	lsls	r3, r1, #8
 80084f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084f4:	0202      	lsls	r2, r0, #8
 80084f6:	6979      	ldr	r1, [r7, #20]
 80084f8:	6849      	ldr	r1, [r1, #4]
 80084fa:	0849      	lsrs	r1, r1, #1
 80084fc:	2000      	movs	r0, #0
 80084fe:	460c      	mov	r4, r1
 8008500:	4605      	mov	r5, r0
 8008502:	eb12 0804 	adds.w	r8, r2, r4
 8008506:	eb43 0905 	adc.w	r9, r3, r5
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	469a      	mov	sl, r3
 8008512:	4693      	mov	fp, r2
 8008514:	4652      	mov	r2, sl
 8008516:	465b      	mov	r3, fp
 8008518:	4640      	mov	r0, r8
 800851a:	4649      	mov	r1, r9
 800851c:	f7f7 ff38 	bl	8000390 <__aeabi_uldivmod>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4613      	mov	r3, r2
 8008526:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800852e:	d308      	bcc.n	8008542 <UART_SetConfig+0x9a2>
 8008530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008536:	d204      	bcs.n	8008542 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800853e:	60da      	str	r2, [r3, #12]
 8008540:	e17f      	b.n	8008842 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008548:	e17b      	b.n	8008842 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008552:	f040 80bd 	bne.w	80086d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008556:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800855a:	2b20      	cmp	r3, #32
 800855c:	dc48      	bgt.n	80085f0 <UART_SetConfig+0xa50>
 800855e:	2b00      	cmp	r3, #0
 8008560:	db7b      	blt.n	800865a <UART_SetConfig+0xaba>
 8008562:	2b20      	cmp	r3, #32
 8008564:	d879      	bhi.n	800865a <UART_SetConfig+0xaba>
 8008566:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <UART_SetConfig+0x9cc>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	080085f7 	.word	0x080085f7
 8008570:	080085ff 	.word	0x080085ff
 8008574:	0800865b 	.word	0x0800865b
 8008578:	0800865b 	.word	0x0800865b
 800857c:	08008607 	.word	0x08008607
 8008580:	0800865b 	.word	0x0800865b
 8008584:	0800865b 	.word	0x0800865b
 8008588:	0800865b 	.word	0x0800865b
 800858c:	08008617 	.word	0x08008617
 8008590:	0800865b 	.word	0x0800865b
 8008594:	0800865b 	.word	0x0800865b
 8008598:	0800865b 	.word	0x0800865b
 800859c:	0800865b 	.word	0x0800865b
 80085a0:	0800865b 	.word	0x0800865b
 80085a4:	0800865b 	.word	0x0800865b
 80085a8:	0800865b 	.word	0x0800865b
 80085ac:	08008627 	.word	0x08008627
 80085b0:	0800865b 	.word	0x0800865b
 80085b4:	0800865b 	.word	0x0800865b
 80085b8:	0800865b 	.word	0x0800865b
 80085bc:	0800865b 	.word	0x0800865b
 80085c0:	0800865b 	.word	0x0800865b
 80085c4:	0800865b 	.word	0x0800865b
 80085c8:	0800865b 	.word	0x0800865b
 80085cc:	0800865b 	.word	0x0800865b
 80085d0:	0800865b 	.word	0x0800865b
 80085d4:	0800865b 	.word	0x0800865b
 80085d8:	0800865b 	.word	0x0800865b
 80085dc:	0800865b 	.word	0x0800865b
 80085e0:	0800865b 	.word	0x0800865b
 80085e4:	0800865b 	.word	0x0800865b
 80085e8:	0800865b 	.word	0x0800865b
 80085ec:	0800864d 	.word	0x0800864d
 80085f0:	2b40      	cmp	r3, #64	@ 0x40
 80085f2:	d02e      	beq.n	8008652 <UART_SetConfig+0xab2>
 80085f4:	e031      	b.n	800865a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085f6:	f7fc f83d 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 80085fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085fc:	e033      	b.n	8008666 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085fe:	f7fc f84f 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 8008602:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008604:	e02f      	b.n	8008666 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800860a:	4618      	mov	r0, r3
 800860c:	f7fd fa32 	bl	8005a74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008614:	e027      	b.n	8008666 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008616:	f107 0318 	add.w	r3, r7, #24
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd fb7e 	bl	8005d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008624:	e01f      	b.n	8008666 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008626:	4b69      	ldr	r3, [pc, #420]	@ (80087cc <UART_SetConfig+0xc2c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008632:	4b66      	ldr	r3, [pc, #408]	@ (80087cc <UART_SetConfig+0xc2c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	08db      	lsrs	r3, r3, #3
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	4a64      	ldr	r2, [pc, #400]	@ (80087d0 <UART_SetConfig+0xc30>)
 800863e:	fa22 f303 	lsr.w	r3, r2, r3
 8008642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008644:	e00f      	b.n	8008666 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008646:	4b62      	ldr	r3, [pc, #392]	@ (80087d0 <UART_SetConfig+0xc30>)
 8008648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800864a:	e00c      	b.n	8008666 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800864c:	4b61      	ldr	r3, [pc, #388]	@ (80087d4 <UART_SetConfig+0xc34>)
 800864e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008650:	e009      	b.n	8008666 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008658:	e005      	b.n	8008666 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008664:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 80ea 	beq.w	8008842 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008672:	4a55      	ldr	r2, [pc, #340]	@ (80087c8 <UART_SetConfig+0xc28>)
 8008674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008678:	461a      	mov	r2, r3
 800867a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008680:	005a      	lsls	r2, r3, #1
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	085b      	lsrs	r3, r3, #1
 8008688:	441a      	add	r2, r3
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008692:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008696:	2b0f      	cmp	r3, #15
 8008698:	d916      	bls.n	80086c8 <UART_SetConfig+0xb28>
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086a0:	d212      	bcs.n	80086c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	f023 030f 	bic.w	r3, r3, #15
 80086aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086ba:	4313      	orrs	r3, r2
 80086bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80086c4:	60da      	str	r2, [r3, #12]
 80086c6:	e0bc      	b.n	8008842 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80086ce:	e0b8      	b.n	8008842 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	dc4b      	bgt.n	8008770 <UART_SetConfig+0xbd0>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f2c0 8087 	blt.w	80087ec <UART_SetConfig+0xc4c>
 80086de:	2b20      	cmp	r3, #32
 80086e0:	f200 8084 	bhi.w	80087ec <UART_SetConfig+0xc4c>
 80086e4:	a201      	add	r2, pc, #4	@ (adr r2, 80086ec <UART_SetConfig+0xb4c>)
 80086e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ea:	bf00      	nop
 80086ec:	08008777 	.word	0x08008777
 80086f0:	0800877f 	.word	0x0800877f
 80086f4:	080087ed 	.word	0x080087ed
 80086f8:	080087ed 	.word	0x080087ed
 80086fc:	08008787 	.word	0x08008787
 8008700:	080087ed 	.word	0x080087ed
 8008704:	080087ed 	.word	0x080087ed
 8008708:	080087ed 	.word	0x080087ed
 800870c:	08008797 	.word	0x08008797
 8008710:	080087ed 	.word	0x080087ed
 8008714:	080087ed 	.word	0x080087ed
 8008718:	080087ed 	.word	0x080087ed
 800871c:	080087ed 	.word	0x080087ed
 8008720:	080087ed 	.word	0x080087ed
 8008724:	080087ed 	.word	0x080087ed
 8008728:	080087ed 	.word	0x080087ed
 800872c:	080087a7 	.word	0x080087a7
 8008730:	080087ed 	.word	0x080087ed
 8008734:	080087ed 	.word	0x080087ed
 8008738:	080087ed 	.word	0x080087ed
 800873c:	080087ed 	.word	0x080087ed
 8008740:	080087ed 	.word	0x080087ed
 8008744:	080087ed 	.word	0x080087ed
 8008748:	080087ed 	.word	0x080087ed
 800874c:	080087ed 	.word	0x080087ed
 8008750:	080087ed 	.word	0x080087ed
 8008754:	080087ed 	.word	0x080087ed
 8008758:	080087ed 	.word	0x080087ed
 800875c:	080087ed 	.word	0x080087ed
 8008760:	080087ed 	.word	0x080087ed
 8008764:	080087ed 	.word	0x080087ed
 8008768:	080087ed 	.word	0x080087ed
 800876c:	080087df 	.word	0x080087df
 8008770:	2b40      	cmp	r3, #64	@ 0x40
 8008772:	d037      	beq.n	80087e4 <UART_SetConfig+0xc44>
 8008774:	e03a      	b.n	80087ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008776:	f7fb ff7d 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 800877a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800877c:	e03c      	b.n	80087f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800877e:	f7fb ff8f 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 8008782:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008784:	e038      	b.n	80087f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800878a:	4618      	mov	r0, r3
 800878c:	f7fd f972 	bl	8005a74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008794:	e030      	b.n	80087f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008796:	f107 0318 	add.w	r3, r7, #24
 800879a:	4618      	mov	r0, r3
 800879c:	f7fd fabe 	bl	8005d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a4:	e028      	b.n	80087f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a6:	4b09      	ldr	r3, [pc, #36]	@ (80087cc <UART_SetConfig+0xc2c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d012      	beq.n	80087d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087b2:	4b06      	ldr	r3, [pc, #24]	@ (80087cc <UART_SetConfig+0xc2c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	08db      	lsrs	r3, r3, #3
 80087b8:	f003 0303 	and.w	r3, r3, #3
 80087bc:	4a04      	ldr	r2, [pc, #16]	@ (80087d0 <UART_SetConfig+0xc30>)
 80087be:	fa22 f303 	lsr.w	r3, r2, r3
 80087c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087c4:	e018      	b.n	80087f8 <UART_SetConfig+0xc58>
 80087c6:	bf00      	nop
 80087c8:	0800920c 	.word	0x0800920c
 80087cc:	58024400 	.word	0x58024400
 80087d0:	03d09000 	.word	0x03d09000
 80087d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80087d8:	4b24      	ldr	r3, [pc, #144]	@ (800886c <UART_SetConfig+0xccc>)
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087dc:	e00c      	b.n	80087f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087de:	4b24      	ldr	r3, [pc, #144]	@ (8008870 <UART_SetConfig+0xcd0>)
 80087e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e2:	e009      	b.n	80087f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ea:	e005      	b.n	80087f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80087f6:	bf00      	nop
    }

    if (pclk != 0U)
 80087f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d021      	beq.n	8008842 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008802:	4a1c      	ldr	r2, [pc, #112]	@ (8008874 <UART_SetConfig+0xcd4>)
 8008804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008808:	461a      	mov	r2, r3
 800880a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800880c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	441a      	add	r2, r3
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008820:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008824:	2b0f      	cmp	r3, #15
 8008826:	d909      	bls.n	800883c <UART_SetConfig+0xc9c>
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800882e:	d205      	bcs.n	800883c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008832:	b29a      	uxth	r2, r3
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	60da      	str	r2, [r3, #12]
 800883a:	e002      	b.n	8008842 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2201      	movs	r2, #1
 8008846:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2201      	movs	r2, #1
 800884e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2200      	movs	r2, #0
 8008856:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2200      	movs	r2, #0
 800885c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800885e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008862:	4618      	mov	r0, r3
 8008864:	3748      	adds	r7, #72	@ 0x48
 8008866:	46bd      	mov	sp, r7
 8008868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800886c:	03d09000 	.word	0x03d09000
 8008870:	003d0900 	.word	0x003d0900
 8008874:	0800920c 	.word	0x0800920c

08008878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ea:	f003 0304 	and.w	r3, r3, #4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890c:	f003 0310 	and.w	r3, r3, #16
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892e:	f003 0320 	and.w	r3, r3, #32
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01a      	beq.n	800898e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008976:	d10a      	bne.n	800898e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	605a      	str	r2, [r3, #4]
  }
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b098      	sub	sp, #96	@ 0x60
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089cc:	f7f9 fe98 	bl	8002700 <HAL_GetTick>
 80089d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0308 	and.w	r3, r3, #8
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d12f      	bne.n	8008a40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089e8:	2200      	movs	r2, #0
 80089ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f88e 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d022      	beq.n	8008a40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e6      	bne.n	80089fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e063      	b.n	8008b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d149      	bne.n	8008ae2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a56:	2200      	movs	r2, #0
 8008a58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f857 	bl	8008b10 <UART_WaitOnFlagUntilTimeout>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d03c      	beq.n	8008ae2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	623b      	str	r3, [r7, #32]
   return(result);
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e6      	bne.n	8008a68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f023 0301 	bic.w	r3, r3, #1
 8008ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aba:	61fa      	str	r2, [r7, #28]
 8008abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	69b9      	ldr	r1, [r7, #24]
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e5      	bne.n	8008a9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e012      	b.n	8008b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3758      	adds	r7, #88	@ 0x58
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b20:	e04f      	b.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b28:	d04b      	beq.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2a:	f7f9 fde9 	bl	8002700 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d302      	bcc.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e04e      	b.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0304 	and.w	r3, r3, #4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d037      	beq.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b80      	cmp	r3, #128	@ 0x80
 8008b56:	d034      	beq.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b40      	cmp	r3, #64	@ 0x40
 8008b5c:	d031      	beq.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	f003 0308 	and.w	r3, r3, #8
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d110      	bne.n	8008b8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2208      	movs	r2, #8
 8008b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f839 	bl	8008bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2208      	movs	r2, #8
 8008b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e029      	b.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b9c:	d111      	bne.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f81f 	bl	8008bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e00f      	b.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	bf0c      	ite	eq
 8008bd2:	2301      	moveq	r3, #1
 8008bd4:	2300      	movne	r3, #0
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d0a0      	beq.n	8008b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b095      	sub	sp, #84	@ 0x54
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c12:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c1a:	e841 2300 	strex	r3, r2, [r1]
 8008c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1e6      	bne.n	8008bf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	e853 3f00 	ldrex	r3, [r3]
 8008c34:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb4 <UART_EndRxTransfer+0xc8>)
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3308      	adds	r3, #8
 8008c44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e5      	bne.n	8008c26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d118      	bne.n	8008c94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	e853 3f00 	ldrex	r3, [r3]
 8008c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f023 0310 	bic.w	r3, r3, #16
 8008c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c80:	61bb      	str	r3, [r7, #24]
 8008c82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	6979      	ldr	r1, [r7, #20]
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	e841 2300 	strex	r3, r2, [r1]
 8008c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e6      	bne.n	8008c62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ca8:	bf00      	nop
 8008caa:	3754      	adds	r7, #84	@ 0x54
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	effffffe 	.word	0xeffffffe

08008cb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d101      	bne.n	8008cce <HAL_UARTEx_DisableFifoMode+0x16>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e027      	b.n	8008d1e <HAL_UARTEx_DisableFifoMode+0x66>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2224      	movs	r2, #36	@ 0x24
 8008cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0201 	bic.w	r2, r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008cfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e02d      	b.n	8008d9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2224      	movs	r2, #36	@ 0x24
 8008d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0201 	bic.w	r2, r2, #1
 8008d68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f850 	bl	8008e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e02d      	b.n	8008e1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2224      	movs	r2, #36	@ 0x24
 8008dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0201 	bic.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f812 	bl	8008e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d108      	bne.n	8008e46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e44:	e031      	b.n	8008eaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e46:	2310      	movs	r3, #16
 8008e48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	0e5b      	lsrs	r3, r3, #25
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	f003 0307 	and.w	r3, r3, #7
 8008e5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	0f5b      	lsrs	r3, r3, #29
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	7b3a      	ldrb	r2, [r7, #12]
 8008e72:	4911      	ldr	r1, [pc, #68]	@ (8008eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008e74:	5c8a      	ldrb	r2, [r1, r2]
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e7a:	7b3a      	ldrb	r2, [r7, #12]
 8008e7c:	490f      	ldr	r1, [pc, #60]	@ (8008ebc <UARTEx_SetNbDataToProcess+0x98>)
 8008e7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	7b7a      	ldrb	r2, [r7, #13]
 8008e90:	4909      	ldr	r1, [pc, #36]	@ (8008eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008e92:	5c8a      	ldrb	r2, [r1, r2]
 8008e94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e98:	7b7a      	ldrb	r2, [r7, #13]
 8008e9a:	4908      	ldr	r1, [pc, #32]	@ (8008ebc <UARTEx_SetNbDataToProcess+0x98>)
 8008e9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008eaa:	bf00      	nop
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	08009224 	.word	0x08009224
 8008ebc:	0800922c 	.word	0x0800922c

08008ec0 <memset>:
 8008ec0:	4402      	add	r2, r0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d100      	bne.n	8008eca <memset+0xa>
 8008ec8:	4770      	bx	lr
 8008eca:	f803 1b01 	strb.w	r1, [r3], #1
 8008ece:	e7f9      	b.n	8008ec4 <memset+0x4>

08008ed0 <__errno>:
 8008ed0:	4b01      	ldr	r3, [pc, #4]	@ (8008ed8 <__errno+0x8>)
 8008ed2:	6818      	ldr	r0, [r3, #0]
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	24000010 	.word	0x24000010

08008edc <__libc_init_array>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	4d0d      	ldr	r5, [pc, #52]	@ (8008f14 <__libc_init_array+0x38>)
 8008ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8008f18 <__libc_init_array+0x3c>)
 8008ee2:	1b64      	subs	r4, r4, r5
 8008ee4:	10a4      	asrs	r4, r4, #2
 8008ee6:	2600      	movs	r6, #0
 8008ee8:	42a6      	cmp	r6, r4
 8008eea:	d109      	bne.n	8008f00 <__libc_init_array+0x24>
 8008eec:	4d0b      	ldr	r5, [pc, #44]	@ (8008f1c <__libc_init_array+0x40>)
 8008eee:	4c0c      	ldr	r4, [pc, #48]	@ (8008f20 <__libc_init_array+0x44>)
 8008ef0:	f000 f952 	bl	8009198 <_init>
 8008ef4:	1b64      	subs	r4, r4, r5
 8008ef6:	10a4      	asrs	r4, r4, #2
 8008ef8:	2600      	movs	r6, #0
 8008efa:	42a6      	cmp	r6, r4
 8008efc:	d105      	bne.n	8008f0a <__libc_init_array+0x2e>
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f04:	4798      	blx	r3
 8008f06:	3601      	adds	r6, #1
 8008f08:	e7ee      	b.n	8008ee8 <__libc_init_array+0xc>
 8008f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0e:	4798      	blx	r3
 8008f10:	3601      	adds	r6, #1
 8008f12:	e7f2      	b.n	8008efa <__libc_init_array+0x1e>
 8008f14:	08009ad0 	.word	0x08009ad0
 8008f18:	08009ad0 	.word	0x08009ad0
 8008f1c:	08009ad0 	.word	0x08009ad0
 8008f20:	08009ad4 	.word	0x08009ad4

08008f24 <memcpy>:
 8008f24:	440a      	add	r2, r1
 8008f26:	4291      	cmp	r1, r2
 8008f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f2c:	d100      	bne.n	8008f30 <memcpy+0xc>
 8008f2e:	4770      	bx	lr
 8008f30:	b510      	push	{r4, lr}
 8008f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f3a:	4291      	cmp	r1, r2
 8008f3c:	d1f9      	bne.n	8008f32 <memcpy+0xe>
 8008f3e:	bd10      	pop	{r4, pc}

08008f40 <log>:
 8008f40:	b4f0      	push	{r4, r5, r6, r7}
 8008f42:	ee10 0a90 	vmov	r0, s1
 8008f46:	ee10 3a10 	vmov	r3, s0
 8008f4a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f4e:	429c      	cmp	r4, r3
 8008f50:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8008f54:	4c70      	ldr	r4, [pc, #448]	@ (8009118 <log+0x1d8>)
 8008f56:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8008f5a:	418c      	sbcs	r4, r1
 8008f5c:	ed2d 8b02 	vpush	{d8}
 8008f60:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8008f64:	d35a      	bcc.n	800901c <log+0xdc>
 8008f66:	4a6d      	ldr	r2, [pc, #436]	@ (800911c <log+0x1dc>)
 8008f68:	4290      	cmp	r0, r2
 8008f6a:	bf08      	it	eq
 8008f6c:	2b00      	cmpeq	r3, #0
 8008f6e:	f000 80c4 	beq.w	80090fa <log+0x1ba>
 8008f72:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8008f76:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008f7a:	4b69      	ldr	r3, [pc, #420]	@ (8009120 <log+0x1e0>)
 8008f7c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8008f80:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8008f84:	ee20 4b02 	vmul.f64	d4, d0, d2
 8008f88:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8008f8c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8008f90:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8008f94:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8008f98:	eea6 7b02 	vfma.f64	d7, d6, d2
 8008f9c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8008fa0:	eea5 6b00 	vfma.f64	d6, d5, d0
 8008fa4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8008fa8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8008fac:	eea5 6b02 	vfma.f64	d6, d5, d2
 8008fb0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8008fb4:	eea3 5b00 	vfma.f64	d5, d3, d0
 8008fb8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8008fbc:	eea3 5b02 	vfma.f64	d5, d3, d2
 8008fc0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8008fc4:	eea3 5b04 	vfma.f64	d5, d3, d4
 8008fc8:	eea5 6b04 	vfma.f64	d6, d5, d4
 8008fcc:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8008fd0:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008fd4:	eeb0 2b47 	vmov.f64	d2, d7
 8008fd8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8009100 <log+0x1c0>
 8008fdc:	eeb0 6b40 	vmov.f64	d6, d0
 8008fe0:	eeb0 3b40 	vmov.f64	d3, d0
 8008fe4:	eea0 6b07 	vfma.f64	d6, d0, d7
 8008fe8:	eea0 6b47 	vfms.f64	d6, d0, d7
 8008fec:	ee30 8b46 	vsub.f64	d8, d0, d6
 8008ff0:	ee26 1b06 	vmul.f64	d1, d6, d6
 8008ff4:	eea1 3b05 	vfma.f64	d3, d1, d5
 8008ff8:	ee30 7b43 	vsub.f64	d7, d0, d3
 8008ffc:	ee30 0b06 	vadd.f64	d0, d0, d6
 8009000:	eea1 7b05 	vfma.f64	d7, d1, d5
 8009004:	ee25 5b08 	vmul.f64	d5, d5, d8
 8009008:	eea5 7b00 	vfma.f64	d7, d5, d0
 800900c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8009010:	ee33 0b07 	vadd.f64	d0, d3, d7
 8009014:	ecbd 8b02 	vpop	{d8}
 8009018:	bcf0      	pop	{r4, r5, r6, r7}
 800901a:	4770      	bx	lr
 800901c:	f1a2 0410 	sub.w	r4, r2, #16
 8009020:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8009024:	428c      	cmp	r4, r1
 8009026:	d923      	bls.n	8009070 <log+0x130>
 8009028:	18d9      	adds	r1, r3, r3
 800902a:	eb40 0400 	adc.w	r4, r0, r0
 800902e:	4321      	orrs	r1, r4
 8009030:	d105      	bne.n	800903e <log+0xfe>
 8009032:	ecbd 8b02 	vpop	{d8}
 8009036:	2001      	movs	r0, #1
 8009038:	bcf0      	pop	{r4, r5, r6, r7}
 800903a:	f000 b885 	b.w	8009148 <__math_divzero>
 800903e:	4939      	ldr	r1, [pc, #228]	@ (8009124 <log+0x1e4>)
 8009040:	4288      	cmp	r0, r1
 8009042:	bf08      	it	eq
 8009044:	2b00      	cmpeq	r3, #0
 8009046:	d0e5      	beq.n	8009014 <log+0xd4>
 8009048:	0413      	lsls	r3, r2, #16
 800904a:	d403      	bmi.n	8009054 <log+0x114>
 800904c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009050:	4393      	bics	r3, r2
 8009052:	d104      	bne.n	800905e <log+0x11e>
 8009054:	ecbd 8b02 	vpop	{d8}
 8009058:	bcf0      	pop	{r4, r5, r6, r7}
 800905a:	f000 b88d 	b.w	8009178 <__math_invalid>
 800905e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009108 <log+0x1c8>
 8009062:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009066:	ec53 2b17 	vmov	r2, r3, d7
 800906a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 800906e:	4613      	mov	r3, r2
 8009070:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8009074:	492a      	ldr	r1, [pc, #168]	@ (8009120 <log+0x1e0>)
 8009076:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800907a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 800907e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8009082:	0d15      	lsrs	r5, r2, #20
 8009084:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8009088:	052d      	lsls	r5, r5, #20
 800908a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 800908e:	1e1e      	subs	r6, r3, #0
 8009090:	1b47      	subs	r7, r0, r5
 8009092:	ec47 6b16 	vmov	d6, r6, r7
 8009096:	1512      	asrs	r2, r2, #20
 8009098:	eea7 5b06 	vfma.f64	d5, d7, d6
 800909c:	ee07 2a90 	vmov	s15, r2
 80090a0:	ee25 2b05 	vmul.f64	d2, d5, d5
 80090a4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80090a8:	ed91 4b00 	vldr	d4, [r1]
 80090ac:	ee25 1b02 	vmul.f64	d1, d5, d2
 80090b0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 80090b4:	eea4 7b06 	vfma.f64	d7, d4, d6
 80090b8:	ee35 4b07 	vadd.f64	d4, d5, d7
 80090bc:	ee37 0b44 	vsub.f64	d0, d7, d4
 80090c0:	ed91 7b02 	vldr	d7, [r1, #8]
 80090c4:	ee30 0b05 	vadd.f64	d0, d0, d5
 80090c8:	eea7 0b06 	vfma.f64	d0, d7, d6
 80090cc:	ed91 7b04 	vldr	d7, [r1, #16]
 80090d0:	ed91 6b08 	vldr	d6, [r1, #32]
 80090d4:	eea7 0b02 	vfma.f64	d0, d7, d2
 80090d8:	ed91 7b06 	vldr	d7, [r1, #24]
 80090dc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 80090e0:	eea6 7b05 	vfma.f64	d7, d6, d5
 80090e4:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 80090e8:	eea3 6b05 	vfma.f64	d6, d3, d5
 80090ec:	eea6 7b02 	vfma.f64	d7, d6, d2
 80090f0:	eea1 0b07 	vfma.f64	d0, d1, d7
 80090f4:	ee30 0b04 	vadd.f64	d0, d0, d4
 80090f8:	e78c      	b.n	8009014 <log+0xd4>
 80090fa:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8009110 <log+0x1d0>
 80090fe:	e789      	b.n	8009014 <log+0xd4>
 8009100:	00000000 	.word	0x00000000
 8009104:	41a00000 	.word	0x41a00000
 8009108:	00000000 	.word	0x00000000
 800910c:	43300000 	.word	0x43300000
	...
 8009118:	000308ff 	.word	0x000308ff
 800911c:	3ff00000 	.word	0x3ff00000
 8009120:	08009238 	.word	0x08009238
 8009124:	7ff00000 	.word	0x7ff00000

08009128 <with_errno>:
 8009128:	b510      	push	{r4, lr}
 800912a:	ed2d 8b02 	vpush	{d8}
 800912e:	eeb0 8b40 	vmov.f64	d8, d0
 8009132:	4604      	mov	r4, r0
 8009134:	f7ff fecc 	bl	8008ed0 <__errno>
 8009138:	eeb0 0b48 	vmov.f64	d0, d8
 800913c:	ecbd 8b02 	vpop	{d8}
 8009140:	6004      	str	r4, [r0, #0]
 8009142:	bd10      	pop	{r4, pc}
 8009144:	0000      	movs	r0, r0
	...

08009148 <__math_divzero>:
 8009148:	b082      	sub	sp, #8
 800914a:	2800      	cmp	r0, #0
 800914c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8009150:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8009154:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8009158:	ed8d 7b00 	vstr	d7, [sp]
 800915c:	ed9d 0b00 	vldr	d0, [sp]
 8009160:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8009170 <__math_divzero+0x28>
 8009164:	2022      	movs	r0, #34	@ 0x22
 8009166:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800916a:	b002      	add	sp, #8
 800916c:	f7ff bfdc 	b.w	8009128 <with_errno>
	...

08009178 <__math_invalid>:
 8009178:	eeb0 7b40 	vmov.f64	d7, d0
 800917c:	eeb4 7b47 	vcmp.f64	d7, d7
 8009180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009184:	ee30 6b40 	vsub.f64	d6, d0, d0
 8009188:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800918c:	d602      	bvs.n	8009194 <__math_invalid+0x1c>
 800918e:	2021      	movs	r0, #33	@ 0x21
 8009190:	f7ff bfca 	b.w	8009128 <with_errno>
 8009194:	4770      	bx	lr
	...

08009198 <_init>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	bf00      	nop
 800919c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919e:	bc08      	pop	{r3}
 80091a0:	469e      	mov	lr, r3
 80091a2:	4770      	bx	lr

080091a4 <_fini>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	bf00      	nop
 80091a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091aa:	bc08      	pop	{r3}
 80091ac:	469e      	mov	lr, r3
 80091ae:	4770      	bx	lr
