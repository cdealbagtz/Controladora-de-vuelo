
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cc8  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  08011f78  08011f78  00012f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012d78  08012d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012d80  08012d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012d84  08012d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a8  24000000  08012d88  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002a50  240000a8  08012e30  000140a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002af8  08012e30  00014af8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000140a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026e02  00000000  00000000  000140d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004da5  00000000  00000000  0003aed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e50  00000000  00000000  0003fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017a3  00000000  00000000  00041ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036fbd  00000000  00000000  00043273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f8ad  00000000  00000000  0007a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001542b6  00000000  00000000  000a9add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fdd93  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008364  00000000  00000000  001fddd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0020613c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000a8 	.word	0x240000a8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08011f60 	.word	0x08011f60

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000ac 	.word	0x240000ac
 80002ec:	08011f60 	.word	0x08011f60

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f006 fa70 	bl	8006b7c <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f009 faaf 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f009 faa9 	bl	8009c10 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f006 fa59 	bl	8006b7c <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002304 	.word	0x24002304

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f006 fa40 	bl	8006b7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f009 fa83 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f009 fc6a 	bl	8009fec <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f006 fa2c 	bl	8006b7c <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002304 	.word	0x24002304

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f006 fa01 	bl	8006b7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f009 fa44 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f009 fc2c 	bl	8009fec <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f006 f9ee 	bl	8006b7c <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002304 	.word	0x24002304
 800088c:	240000d8 	.word	0x240000d8
 8000890:	240000dc 	.word	0x240000dc
 8000894:	240000de 	.word	0x240000de
 8000898:	240000da 	.word	0x240000da
 800089c:	240000e0 	.word	0x240000e0
 80008a0:	240000e2 	.word	0x240000e2
 80008a4:	240000e4 	.word	0x240000e4
 80008a8:	240000e6 	.word	0x240000e6
 80008ac:	240000e8 	.word	0x240000e8
 80008b0:	240000ea 	.word	0x240000ea
 80008b4:	240000ec 	.word	0x240000ec
 80008b8:	240000ee 	.word	0x240000ee

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 f951 	bl	8006b7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 f995 	bl	8009c10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f009 fb7d 	bl	8009fec <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 f93f 	bl	8006b7c <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002304 	.word	0x24002304
 800093c:	240000f4 	.word	0x240000f4
 8000940:	240000f0 	.word	0x240000f0

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	240000f0 	.word	0x240000f0
 80009bc:	240000d8 	.word	0x240000d8
 80009c0:	240000dc 	.word	0x240000dc
 80009c4:	240000de 	.word	0x240000de
 80009c8:	240000f8 	.word	0x240000f8

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	240000f8 	.word	0x240000f8
 8000c9c:	240000e8 	.word	0x240000e8
 8000ca0:	240000e6 	.word	0x240000e6
 8000ca4:	240000e4 	.word	0x240000e4
 8000ca8:	240000e2 	.word	0x240000e2
 8000cac:	240000e0 	.word	0x240000e0
 8000cb0:	240000da 	.word	0x240000da
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	240000ee 	.word	0x240000ee
 8000f50:	240000ec 	.word	0x240000ec
 8000f54:	240000ea 	.word	0x240000ea

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f010 fec1 	bl	8011d08 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f005 fdae 	bl	8006b7c <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	240000c4 	.word	0x240000c4
 8001058:	240000f0 	.word	0x240000f0

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240000c4 	.word	0x240000c4
 80010c8:	240000f0 	.word	0x240000f0
 80010cc:	240000f4 	.word	0x240000f4

080010d0 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	4903      	ldr	r1, [pc, #12]	@ (80010e4 <SBUS_init+0x14>)
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <SBUS_init+0x18>)
 80010da:	f00a fc39 	bl	800b950 <HAL_UART_Receive_DMA>

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	24000115 	.word	0x24000115
 80010e8:	240025d8 	.word	0x240025d8

080010ec <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80010f6:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <SBUS_Receive+0x8c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <SBUS_Receive+0x18>
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d017      	beq.n	8001132 <SBUS_Receive+0x46>
 8001102:	e02f      	b.n	8001164 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d10f      	bne.n	800112a <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800110a:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <SBUS_Receive+0x90>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <SBUS_Receive+0x94>)
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <SBUS_Receive+0x8c>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
				RxCount++;
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <SBUS_Receive+0x90>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <SBUS_Receive+0x90>)
 8001126:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001128:	e021      	b.n	800116e <SBUS_Receive+0x82>
				RxCount = 0;
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <SBUS_Receive+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
			break;
 8001130:	e01d      	b.n	800116e <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <SBUS_Receive+0x90>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <SBUS_Receive+0x94>)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	5453      	strb	r3, [r2, r1]
			RxCount++;
 800113e:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <SBUS_Receive+0x90>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <SBUS_Receive+0x90>)
 8001148:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <SBUS_Receive+0x90>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b18      	cmp	r3, #24
 8001150:	d10c      	bne.n	800116c <SBUS_Receive+0x80>
				RxCount = 0;
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <SBUS_Receive+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <SBUS_Receive+0x8c>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 800115e:	f000 f811 	bl	8001184 <SBUS_getData>
			}
			break;
 8001162:	e003      	b.n	800116c <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <SBUS_Receive+0x8c>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
			break;
 800116a:	e000      	b.n	800116e <SBUS_Receive+0x82>
			break;
 800116c:	bf00      	nop
	}
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	24000116 	.word	0x24000116
 800117c:	24000117 	.word	0x24000117
 8001180:	240000fc 	.word	0x240000fc

08001184 <SBUS_getData>:

void SBUS_getData(void){
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001188:	4b95      	ldr	r3, [pc, #596]	@ (80013e0 <SBUS_getData+0x25c>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	b21a      	sxth	r2, r3
 800118e:	4b94      	ldr	r3, [pc, #592]	@ (80013e0 <SBUS_getData+0x25c>)
 8001190:	789b      	ldrb	r3, [r3, #2]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21b      	sxth	r3, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b90      	ldr	r3, [pc, #576]	@ (80013e4 <SBUS_getData+0x260>)
 80011a4:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 80011a6:	4b8e      	ldr	r3, [pc, #568]	@ (80013e0 <SBUS_getData+0x25c>)
 80011a8:	789b      	ldrb	r3, [r3, #2]
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b8b      	ldr	r3, [pc, #556]	@ (80013e0 <SBUS_getData+0x25c>)
 80011b2:	78db      	ldrb	r3, [r3, #3]
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	b29b      	uxth	r3, r3
 80011be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b87      	ldr	r3, [pc, #540]	@ (80013e4 <SBUS_getData+0x260>)
 80011c6:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 80011c8:	4b85      	ldr	r3, [pc, #532]	@ (80013e0 <SBUS_getData+0x25c>)
 80011ca:	78db      	ldrb	r3, [r3, #3]
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	4b83      	ldr	r3, [pc, #524]	@ (80013e0 <SBUS_getData+0x25c>)
 80011d4:	791b      	ldrb	r3, [r3, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b80      	ldr	r3, [pc, #512]	@ (80013e0 <SBUS_getData+0x25c>)
 80011e0:	795b      	ldrb	r3, [r3, #5]
 80011e2:	029b      	lsls	r3, r3, #10
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b7c      	ldr	r3, [pc, #496]	@ (80013e4 <SBUS_getData+0x260>)
 80011f4:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80011f6:	4b7a      	ldr	r3, [pc, #488]	@ (80013e0 <SBUS_getData+0x25c>)
 80011f8:	795b      	ldrb	r3, [r3, #5]
 80011fa:	085b      	lsrs	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	b21a      	sxth	r2, r3
 8001200:	4b77      	ldr	r3, [pc, #476]	@ (80013e0 <SBUS_getData+0x25c>)
 8001202:	799b      	ldrb	r3, [r3, #6]
 8001204:	01db      	lsls	r3, r3, #7
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b73      	ldr	r3, [pc, #460]	@ (80013e4 <SBUS_getData+0x260>)
 8001216:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8001218:	4b71      	ldr	r3, [pc, #452]	@ (80013e0 <SBUS_getData+0x25c>)
 800121a:	799b      	ldrb	r3, [r3, #6]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	b2db      	uxtb	r3, r3
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b6f      	ldr	r3, [pc, #444]	@ (80013e0 <SBUS_getData+0x25c>)
 8001224:	79db      	ldrb	r3, [r3, #7]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21b      	sxth	r3, r3
 800122e:	b29b      	uxth	r3, r3
 8001230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b6b      	ldr	r3, [pc, #428]	@ (80013e4 <SBUS_getData+0x260>)
 8001238:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 800123a:	4b69      	ldr	r3, [pc, #420]	@ (80013e0 <SBUS_getData+0x25c>)
 800123c:	79db      	ldrb	r3, [r3, #7]
 800123e:	09db      	lsrs	r3, r3, #7
 8001240:	b2db      	uxtb	r3, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b66      	ldr	r3, [pc, #408]	@ (80013e0 <SBUS_getData+0x25c>)
 8001246:	7a1b      	ldrb	r3, [r3, #8]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21a      	sxth	r2, r3
 8001250:	4b63      	ldr	r3, [pc, #396]	@ (80013e0 <SBUS_getData+0x25c>)
 8001252:	7a5b      	ldrb	r3, [r3, #9]
 8001254:	025b      	lsls	r3, r3, #9
 8001256:	b21b      	sxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b21b      	sxth	r3, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b5f      	ldr	r3, [pc, #380]	@ (80013e4 <SBUS_getData+0x260>)
 8001266:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001268:	4b5d      	ldr	r3, [pc, #372]	@ (80013e0 <SBUS_getData+0x25c>)
 800126a:	7a5b      	ldrb	r3, [r3, #9]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	b2db      	uxtb	r3, r3
 8001270:	b21a      	sxth	r2, r3
 8001272:	4b5b      	ldr	r3, [pc, #364]	@ (80013e0 <SBUS_getData+0x25c>)
 8001274:	7a9b      	ldrb	r3, [r3, #10]
 8001276:	019b      	lsls	r3, r3, #6
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b21b      	sxth	r3, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b57      	ldr	r3, [pc, #348]	@ (80013e4 <SBUS_getData+0x260>)
 8001288:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 800128a:	4b55      	ldr	r3, [pc, #340]	@ (80013e0 <SBUS_getData+0x25c>)
 800128c:	7a9b      	ldrb	r3, [r3, #10]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	b2db      	uxtb	r3, r3
 8001292:	b21a      	sxth	r2, r3
 8001294:	4b52      	ldr	r3, [pc, #328]	@ (80013e0 <SBUS_getData+0x25c>)
 8001296:	7adb      	ldrb	r3, [r3, #11]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21b      	sxth	r3, r3
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b4e      	ldr	r3, [pc, #312]	@ (80013e4 <SBUS_getData+0x260>)
 80012aa:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80012ac:	4b4c      	ldr	r3, [pc, #304]	@ (80013e0 <SBUS_getData+0x25c>)
 80012ae:	7b1b      	ldrb	r3, [r3, #12]
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	4b4b      	ldr	r3, [pc, #300]	@ (80013e0 <SBUS_getData+0x25c>)
 80012b4:	7b5b      	ldrb	r3, [r3, #13]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21b      	sxth	r3, r3
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b47      	ldr	r3, [pc, #284]	@ (80013e4 <SBUS_getData+0x260>)
 80012c8:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80012ca:	4b45      	ldr	r3, [pc, #276]	@ (80013e0 <SBUS_getData+0x25c>)
 80012cc:	7b5b      	ldrb	r3, [r3, #13]
 80012ce:	08db      	lsrs	r3, r3, #3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b42      	ldr	r3, [pc, #264]	@ (80013e0 <SBUS_getData+0x25c>)
 80012d6:	7b9b      	ldrb	r3, [r3, #14]
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21b      	sxth	r3, r3
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b3e      	ldr	r3, [pc, #248]	@ (80013e4 <SBUS_getData+0x260>)
 80012ea:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80012ec:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <SBUS_getData+0x25c>)
 80012ee:	7b9b      	ldrb	r3, [r3, #14]
 80012f0:	099b      	lsrs	r3, r3, #6
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b3a      	ldr	r3, [pc, #232]	@ (80013e0 <SBUS_getData+0x25c>)
 80012f8:	7bdb      	ldrb	r3, [r3, #15]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <SBUS_getData+0x25c>)
 8001304:	7c1b      	ldrb	r3, [r3, #16]
 8001306:	029b      	lsls	r3, r3, #10
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b21b      	sxth	r3, r3
 800130e:	b29b      	uxth	r3, r3
 8001310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <SBUS_getData+0x260>)
 8001318:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 800131a:	4b31      	ldr	r3, [pc, #196]	@ (80013e0 <SBUS_getData+0x25c>)
 800131c:	7c1b      	ldrb	r3, [r3, #16]
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b2e      	ldr	r3, [pc, #184]	@ (80013e0 <SBUS_getData+0x25c>)
 8001326:	7c5b      	ldrb	r3, [r3, #17]
 8001328:	01db      	lsls	r3, r3, #7
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	b29b      	uxth	r3, r3
 8001332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <SBUS_getData+0x260>)
 800133a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <SBUS_getData+0x25c>)
 800133e:	7c5b      	ldrb	r3, [r3, #17]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	b2db      	uxtb	r3, r3
 8001344:	b21a      	sxth	r2, r3
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <SBUS_getData+0x25c>)
 8001348:	7c9b      	ldrb	r3, [r3, #18]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	b29b      	uxth	r3, r3
 8001354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <SBUS_getData+0x260>)
 800135c:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <SBUS_getData+0x25c>)
 8001360:	7c9b      	ldrb	r3, [r3, #18]
 8001362:	09db      	lsrs	r3, r3, #7
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <SBUS_getData+0x25c>)
 800136a:	7cdb      	ldrb	r3, [r3, #19]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <SBUS_getData+0x25c>)
 8001376:	7d1b      	ldrb	r3, [r3, #20]
 8001378:	025b      	lsls	r3, r3, #9
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <SBUS_getData+0x260>)
 800138a:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <SBUS_getData+0x25c>)
 800138e:	7d1b      	ldrb	r3, [r3, #20]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	b21a      	sxth	r2, r3
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <SBUS_getData+0x25c>)
 8001398:	7d5b      	ldrb	r3, [r3, #21]
 800139a:	019b      	lsls	r3, r3, #6
 800139c:	b21b      	sxth	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <SBUS_getData+0x260>)
 80013ac:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <SBUS_getData+0x25c>)
 80013b0:	7d5b      	ldrb	r3, [r3, #21]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <SBUS_getData+0x25c>)
 80013ba:	7d9b      	ldrb	r3, [r3, #22]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <SBUS_getData+0x260>)
 80013ce:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <SBUS_getData+0x260>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013dc:	e00a      	b.n	80013f4 <SBUS_getData+0x270>
 80013de:	bf00      	nop
 80013e0:	240000fc 	.word	0x240000fc
 80013e4:	24000000 	.word	0x24000000
 80013e8:	43b00000 	.word	0x43b00000
 80013ec:	44a80000 	.word	0x44a80000
 80013f0:	447a0000 	.word	0x447a0000
 80013f4:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80013e8 <SBUS_getData+0x264>
 80013f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013fc:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80013ec <SBUS_getData+0x268>
 8001400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001404:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80013f0 <SBUS_getData+0x26c>
 8001408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001410:	ee17 3a90 	vmov	r3, s15
 8001414:	b29b      	uxth	r3, r3
 8001416:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800141a:	b29a      	uxth	r2, r3
 800141c:	4bd1      	ldr	r3, [pc, #836]	@ (8001764 <SBUS_getData+0x5e0>)
 800141e:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8001420:	4bd0      	ldr	r3, [pc, #832]	@ (8001764 <SBUS_getData+0x5e0>)
 8001422:	885b      	ldrh	r3, [r3, #2]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800142c:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8001768 <SBUS_getData+0x5e4>
 8001430:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001434:	eddf 6acd 	vldr	s13, [pc, #820]	@ 800176c <SBUS_getData+0x5e8>
 8001438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143c:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001770 <SBUS_getData+0x5ec>
 8001440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001448:	ee17 3a90 	vmov	r3, s15
 800144c:	b29b      	uxth	r3, r3
 800144e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001452:	b29a      	uxth	r2, r3
 8001454:	4bc3      	ldr	r3, [pc, #780]	@ (8001764 <SBUS_getData+0x5e0>)
 8001456:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001458:	4bc2      	ldr	r3, [pc, #776]	@ (8001764 <SBUS_getData+0x5e0>)
 800145a:	889b      	ldrh	r3, [r3, #4]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001464:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8001768 <SBUS_getData+0x5e4>
 8001468:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800146c:	eddf 6abf 	vldr	s13, [pc, #764]	@ 800176c <SBUS_getData+0x5e8>
 8001470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001474:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001770 <SBUS_getData+0x5ec>
 8001478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001480:	ee17 3a90 	vmov	r3, s15
 8001484:	b29b      	uxth	r3, r3
 8001486:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800148a:	b29a      	uxth	r2, r3
 800148c:	4bb5      	ldr	r3, [pc, #724]	@ (8001764 <SBUS_getData+0x5e0>)
 800148e:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8001490:	4bb4      	ldr	r3, [pc, #720]	@ (8001764 <SBUS_getData+0x5e0>)
 8001492:	88db      	ldrh	r3, [r3, #6]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001768 <SBUS_getData+0x5e4>
 80014a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014a4:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 800176c <SBUS_getData+0x5e8>
 80014a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ac:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001770 <SBUS_getData+0x5ec>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b8:	ee17 3a90 	vmov	r3, s15
 80014bc:	b29b      	uxth	r3, r3
 80014be:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4ba7      	ldr	r3, [pc, #668]	@ (8001764 <SBUS_getData+0x5e0>)
 80014c6:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80014c8:	4ba6      	ldr	r3, [pc, #664]	@ (8001764 <SBUS_getData+0x5e0>)
 80014ca:	891b      	ldrh	r3, [r3, #8]
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d4:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001768 <SBUS_getData+0x5e4>
 80014d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014dc:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 800176c <SBUS_getData+0x5e8>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001770 <SBUS_getData+0x5ec>
 80014e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f0:	ee17 3a90 	vmov	r3, s15
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b99      	ldr	r3, [pc, #612]	@ (8001764 <SBUS_getData+0x5e0>)
 80014fe:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8001500:	4b98      	ldr	r3, [pc, #608]	@ (8001764 <SBUS_getData+0x5e0>)
 8001502:	895b      	ldrh	r3, [r3, #10]
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800150c:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001768 <SBUS_getData+0x5e4>
 8001510:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001514:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800176c <SBUS_getData+0x5e8>
 8001518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151c:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001770 <SBUS_getData+0x5ec>
 8001520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001528:	ee17 3a90 	vmov	r3, s15
 800152c:	b29b      	uxth	r3, r3
 800152e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b8b      	ldr	r3, [pc, #556]	@ (8001764 <SBUS_getData+0x5e0>)
 8001536:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001538:	4b8a      	ldr	r3, [pc, #552]	@ (8001764 <SBUS_getData+0x5e0>)
 800153a:	899b      	ldrh	r3, [r3, #12]
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001544:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001768 <SBUS_getData+0x5e4>
 8001548:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800154c:	eddf 6a87 	vldr	s13, [pc, #540]	@ 800176c <SBUS_getData+0x5e8>
 8001550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001554:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001770 <SBUS_getData+0x5ec>
 8001558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001560:	ee17 3a90 	vmov	r3, s15
 8001564:	b29b      	uxth	r3, r3
 8001566:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b7d      	ldr	r3, [pc, #500]	@ (8001764 <SBUS_getData+0x5e0>)
 800156e:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8001570:	4b7c      	ldr	r3, [pc, #496]	@ (8001764 <SBUS_getData+0x5e0>)
 8001572:	89db      	ldrh	r3, [r3, #14]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157c:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001768 <SBUS_getData+0x5e4>
 8001580:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001584:	eddf 6a79 	vldr	s13, [pc, #484]	@ 800176c <SBUS_getData+0x5e8>
 8001588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158c:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001770 <SBUS_getData+0x5ec>
 8001590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001598:	ee17 3a90 	vmov	r3, s15
 800159c:	b29b      	uxth	r3, r3
 800159e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001764 <SBUS_getData+0x5e0>)
 80015a6:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80015a8:	4b6e      	ldr	r3, [pc, #440]	@ (8001764 <SBUS_getData+0x5e0>)
 80015aa:	8a1b      	ldrh	r3, [r3, #16]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b4:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001768 <SBUS_getData+0x5e4>
 80015b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015bc:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 800176c <SBUS_getData+0x5e8>
 80015c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c4:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001770 <SBUS_getData+0x5ec>
 80015c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d0:	ee17 3a90 	vmov	r3, s15
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b61      	ldr	r3, [pc, #388]	@ (8001764 <SBUS_getData+0x5e0>)
 80015de:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80015e0:	4b60      	ldr	r3, [pc, #384]	@ (8001764 <SBUS_getData+0x5e0>)
 80015e2:	8a5b      	ldrh	r3, [r3, #18]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ec:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001768 <SBUS_getData+0x5e4>
 80015f0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015f4:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 800176c <SBUS_getData+0x5e8>
 80015f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001770 <SBUS_getData+0x5ec>
 8001600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001608:	ee17 3a90 	vmov	r3, s15
 800160c:	b29b      	uxth	r3, r3
 800160e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b53      	ldr	r3, [pc, #332]	@ (8001764 <SBUS_getData+0x5e0>)
 8001616:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8001618:	4b52      	ldr	r3, [pc, #328]	@ (8001764 <SBUS_getData+0x5e0>)
 800161a:	8a9b      	ldrh	r3, [r3, #20]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001624:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001768 <SBUS_getData+0x5e4>
 8001628:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800162c:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800176c <SBUS_getData+0x5e8>
 8001630:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001634:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001770 <SBUS_getData+0x5ec>
 8001638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001640:	ee17 3a90 	vmov	r3, s15
 8001644:	b29b      	uxth	r3, r3
 8001646:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800164a:	b29a      	uxth	r2, r3
 800164c:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <SBUS_getData+0x5e0>)
 800164e:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8001650:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <SBUS_getData+0x5e0>)
 8001652:	8adb      	ldrh	r3, [r3, #22]
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001768 <SBUS_getData+0x5e4>
 8001660:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001664:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800176c <SBUS_getData+0x5e8>
 8001668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166c:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001770 <SBUS_getData+0x5ec>
 8001670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001678:	ee17 3a90 	vmov	r3, s15
 800167c:	b29b      	uxth	r3, r3
 800167e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b37      	ldr	r3, [pc, #220]	@ (8001764 <SBUS_getData+0x5e0>)
 8001686:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8001688:	4b36      	ldr	r3, [pc, #216]	@ (8001764 <SBUS_getData+0x5e0>)
 800168a:	8b1b      	ldrh	r3, [r3, #24]
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001694:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001768 <SBUS_getData+0x5e4>
 8001698:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800169c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800176c <SBUS_getData+0x5e8>
 80016a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001770 <SBUS_getData+0x5ec>
 80016a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b0:	ee17 3a90 	vmov	r3, s15
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <SBUS_getData+0x5e0>)
 80016be:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80016c0:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <SBUS_getData+0x5e0>)
 80016c2:	8b5b      	ldrh	r3, [r3, #26]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016cc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001768 <SBUS_getData+0x5e4>
 80016d0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016d4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800176c <SBUS_getData+0x5e8>
 80016d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016dc:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001770 <SBUS_getData+0x5ec>
 80016e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e8:	ee17 3a90 	vmov	r3, s15
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <SBUS_getData+0x5e0>)
 80016f6:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <SBUS_getData+0x5e0>)
 80016fa:	8b9b      	ldrh	r3, [r3, #28]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001768 <SBUS_getData+0x5e4>
 8001708:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800170c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800176c <SBUS_getData+0x5e8>
 8001710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001714:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001770 <SBUS_getData+0x5ec>
 8001718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001720:	ee17 3a90 	vmov	r3, s15
 8001724:	b29b      	uxth	r3, r3
 8001726:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <SBUS_getData+0x5e0>)
 800172e:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <SBUS_getData+0x5e0>)
 8001732:	8bdb      	ldrh	r3, [r3, #30]
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001768 <SBUS_getData+0x5e4>
 8001740:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001744:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800176c <SBUS_getData+0x5e8>
 8001748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001770 <SBUS_getData+0x5ec>
 8001750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	b29b      	uxth	r3, r3
 800175e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001762:	e007      	b.n	8001774 <SBUS_getData+0x5f0>
 8001764:	24000000 	.word	0x24000000
 8001768:	43b00000 	.word	0x43b00000
 800176c:	44a80000 	.word	0x44a80000
 8001770:	447a0000 	.word	0x447a0000
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <SBUS_getData+0x67c>)
 8001778:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 800177a:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <SBUS_getData+0x680>)
 800177c:	7ddb      	ldrb	r3, [r3, #23]
 800177e:	2b07      	cmp	r3, #7
 8001780:	d90a      	bls.n	8001798 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 8001782:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <SBUS_getData+0x680>)
 8001784:	7ddb      	ldrb	r3, [r3, #23]
 8001786:	3b08      	subs	r3, #8
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <SBUS_getData+0x680>)
 800178c:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = 1;
 800178e:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <SBUS_getData+0x67c>)
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001796:	e003      	b.n	80017a0 <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= 0;
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <SBUS_getData+0x67c>)
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 80017a0:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <SBUS_getData+0x680>)
 80017a2:	7ddb      	ldrb	r3, [r3, #23]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d90a      	bls.n	80017be <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 80017a8:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <SBUS_getData+0x680>)
 80017aa:	7ddb      	ldrb	r3, [r3, #23]
 80017ac:	3b04      	subs	r3, #4
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <SBUS_getData+0x680>)
 80017b2:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = 1;
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <SBUS_getData+0x67c>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80017bc:	e003      	b.n	80017c6 <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=0;
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <SBUS_getData+0x67c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <SBUS_getData+0x680>)
 80017c8:	7ddb      	ldrb	r3, [r3, #23]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d90a      	bls.n	80017e4 <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <SBUS_getData+0x680>)
 80017d0:	7ddb      	ldrb	r3, [r3, #23]
 80017d2:	3b02      	subs	r3, #2
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <SBUS_getData+0x680>)
 80017d8:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=1;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <SBUS_getData+0x67c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80017e2:	e003      	b.n	80017ec <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=0;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <SBUS_getData+0x67c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21


	Radio_input.Interruptor_1=SBUS_UART_Rx[23];
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <SBUS_getData+0x680>)
 80017ee:	7dda      	ldrb	r2, [r3, #23]
 80017f0:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <SBUS_getData+0x67c>)
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	24000000 	.word	0x24000000
 8001804:	240000fc 	.word	0x240000fc

08001808 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 800180c:	2201      	movs	r2, #1
 800180e:	4910      	ldr	r1, [pc, #64]	@ (8001850 <SD_init+0x48>)
 8001810:	4810      	ldr	r0, [pc, #64]	@ (8001854 <SD_init+0x4c>)
 8001812:	f00f f813 	bl	801083c <f_mount>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <SD_init+0x50>)
 800181c:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800181e:	2213      	movs	r2, #19
 8001820:	490e      	ldr	r1, [pc, #56]	@ (800185c <SD_init+0x54>)
 8001822:	480f      	ldr	r0, [pc, #60]	@ (8001860 <SD_init+0x58>)
 8001824:	f00f f850 	bl	80108c8 <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <SD_init+0x58>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4619      	mov	r1, r3
 800182e:	480c      	ldr	r0, [pc, #48]	@ (8001860 <SD_init+0x58>)
 8001830:	f00f fc4e 	bl	80110d0 <f_lseek>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <SD_init+0x50>)
 800183a:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,AngX,AngY,Alt,Pressure,Temp,Parachute,Peripheral\n");
 800183c:	4909      	ldr	r1, [pc, #36]	@ (8001864 <SD_init+0x5c>)
 800183e:	4808      	ldr	r0, [pc, #32]	@ (8001860 <SD_init+0x58>)
 8001840:	f00f fee2 	bl	8011608 <f_printf>
	  f_close(&fil);
 8001844:	4806      	ldr	r0, [pc, #24]	@ (8001860 <SD_init+0x58>)
 8001846:	f00f fc19 	bl	801107c <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	08011f78 	.word	0x08011f78
 8001854:	24000118 	.word	0x24000118
 8001858:	24002184 	.word	0x24002184
 800185c:	24000024 	.word	0x24000024
 8001860:	24001154 	.word	0x24001154
 8001864:	08011f7c 	.word	0x08011f7c

08001868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <MX_DMA_Init+0x3c>)
 8001870:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001874:	4a0b      	ldr	r2, [pc, #44]	@ (80018a4 <MX_DMA_Init+0x3c>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_DMA_Init+0x3c>)
 8001880:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	200b      	movs	r0, #11
 8001892:	f001 fcd4 	bl	800323e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001896:	200b      	movs	r0, #11
 8001898:	f001 fceb 	bl	8003272 <HAL_NVIC_EnableIRQ>

}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	58024400 	.word	0x58024400

080018a8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80018ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018ae:	4a2f      	ldr	r2, [pc, #188]	@ (800196c <MX_FDCAN1_Init+0xc4>)
 80018b0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80018b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80018be:	4b2a      	ldr	r3, [pc, #168]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80018c4:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80018ca:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80018d0:	4b25      	ldr	r3, [pc, #148]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018d2:	2210      	movs	r2, #16
 80018d4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80018d6:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018d8:	2201      	movs	r2, #1
 80018da:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80018dc:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018de:	2202      	movs	r2, #2
 80018e0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80018e2:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018e4:	2202      	movs	r2, #2
 80018e6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80018e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001902:	2200      	movs	r2, #0
 8001904:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001908:	2200      	movs	r2, #0
 800190a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 800190e:	2200      	movs	r2, #0
 8001910:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001914:	2200      	movs	r2, #0
 8001916:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 800191a:	2204      	movs	r2, #4
 800191c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001920:	2200      	movs	r2, #0
 8001922:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001926:	2204      	movs	r2, #4
 8001928:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 800192c:	2200      	movs	r2, #0
 800192e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001932:	2204      	movs	r2, #4
 8001934:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001938:	2200      	movs	r2, #0
 800193a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 800193e:	2200      	movs	r2, #0
 8001940:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001944:	2200      	movs	r2, #0
 8001946:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001948:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 800194a:	2200      	movs	r2, #0
 800194c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001950:	2204      	movs	r2, #4
 8001952:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	@ (8001968 <MX_FDCAN1_Init+0xc0>)
 8001956:	f004 fbfd 	bl	8006154 <HAL_FDCAN_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001960:	f000 faec 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	24002188 	.word	0x24002188
 800196c:	4000a000 	.word	0x4000a000

08001970 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0ba      	sub	sp, #232	@ 0xe8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	22c0      	movs	r2, #192	@ 0xc0
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f010 f979 	bl	8011c88 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a58 <HAL_FDCAN_MspInit+0xe8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d157      	bne.n	8001a50 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80019ac:	2304      	movs	r3, #4
 80019ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80019b0:	2308      	movs	r3, #8
 80019b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019bc:	2302      	movs	r3, #2
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019c0:	23c0      	movs	r3, #192	@ 0xc0
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80019cc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4618      	mov	r0, r3
 80019da:	f006 fa15 	bl	8007e08 <HAL_RCCEx_PeriphCLKConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80019e4:	f000 faaa 	bl	8001f3c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80019e8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <HAL_FDCAN_MspInit+0xec>)
 80019ea:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80019ee:	4a1b      	ldr	r2, [pc, #108]	@ (8001a5c <HAL_FDCAN_MspInit+0xec>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f4:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80019f8:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <HAL_FDCAN_MspInit+0xec>)
 80019fa:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80019fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_FDCAN_MspInit+0xec>)
 8001a08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a0c:	4a13      	ldr	r2, [pc, #76]	@ (8001a5c <HAL_FDCAN_MspInit+0xec>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_FDCAN_MspInit+0xec>)
 8001a18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a24:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001a3e:	2309      	movs	r3, #9
 8001a40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <HAL_FDCAN_MspInit+0xf0>)
 8001a4c:	f004 fee6 	bl	800681c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001a50:	bf00      	nop
 8001a52:	37e8      	adds	r7, #232	@ 0xe8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	4000a000 	.word	0x4000a000
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	58020000 	.word	0x58020000

08001a64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	4b48      	ldr	r3, [pc, #288]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a80:	4a46      	ldr	r2, [pc, #280]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a8a:	4b44      	ldr	r3, [pc, #272]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001a8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b40      	ldr	r3, [pc, #256]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001aaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b39      	ldr	r3, [pc, #228]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001abc:	4a37      	ldr	r2, [pc, #220]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ac6:	4b35      	ldr	r3, [pc, #212]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001ac8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad4:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ada:	4a30      	ldr	r2, [pc, #192]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <MX_GPIO_Init+0x138>)
 8001ae6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001af2:	2200      	movs	r2, #0
 8001af4:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001af8:	4829      	ldr	r0, [pc, #164]	@ (8001ba0 <MX_GPIO_Init+0x13c>)
 8001afa:	f005 f83f 	bl	8006b7c <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2110      	movs	r1, #16
 8001b02:	4828      	ldr	r0, [pc, #160]	@ (8001ba4 <MX_GPIO_Init+0x140>)
 8001b04:	f005 f83a 	bl	8006b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME_NSS_GPIO_Port, BME_NSS_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b0e:	4826      	ldr	r0, [pc, #152]	@ (8001ba8 <MX_GPIO_Init+0x144>)
 8001b10:	f005 f834 	bl	8006b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2104      	movs	r1, #4
 8001b18:	4824      	ldr	r0, [pc, #144]	@ (8001bac <MX_GPIO_Init+0x148>)
 8001b1a:	f005 f82f 	bl	8006b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001b1e:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001b22:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	481a      	ldr	r0, [pc, #104]	@ (8001ba0 <MX_GPIO_Init+0x13c>)
 8001b38:	f004 fe70 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8001b3c:	2310      	movs	r3, #16
 8001b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4814      	ldr	r0, [pc, #80]	@ (8001ba4 <MX_GPIO_Init+0x140>)
 8001b54:	f004 fe62 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME_NSS_Pin;
 8001b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BME_NSS_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <MX_GPIO_Init+0x144>)
 8001b72:	f004 fe53 	bl	800681c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001b76:	2304      	movs	r3, #4
 8001b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4807      	ldr	r0, [pc, #28]	@ (8001bac <MX_GPIO_Init+0x148>)
 8001b8e:	f004 fe45 	bl	800681c <HAL_GPIO_Init>

}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	@ 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	58024400 	.word	0x58024400
 8001ba0:	58020800 	.word	0x58020800
 8001ba4:	58020000 	.word	0x58020000
 8001ba8:	58020400 	.word	0x58020400
 8001bac:	58020c00 	.word	0x58020c00

08001bb0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c28 <MX_I2C3_Init+0x78>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c2c <MX_I2C3_Init+0x7c>)
 8001bbe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001bc0:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bde:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bea:	480e      	ldr	r0, [pc, #56]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001bec:	f004 ffe0 	bl	8006bb0 <HAL_I2C_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001bf6:	f000 f9a1 	bl	8001f3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4809      	ldr	r0, [pc, #36]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001bfe:	f005 f873 	bl	8006ce8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001c08:	f000 f998 	bl	8001f3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_I2C3_Init+0x74>)
 8001c10:	f005 f8b5 	bl	8006d7e <HAL_I2CEx_ConfigDigitalFilter>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001c1a:	f000 f98f 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	24002228 	.word	0x24002228
 8001c28:	40005c00 	.word	0x40005c00
 8001c2c:	20b0ccff 	.word	0x20b0ccff

08001c30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0bc      	sub	sp, #240	@ 0xf0
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	22c0      	movs	r2, #192	@ 0xc0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f010 f819 	bl	8011c88 <memset>
  if(i2cHandle->Instance==I2C3)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a39      	ldr	r2, [pc, #228]	@ (8001d40 <HAL_I2C_MspInit+0x110>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d16b      	bne.n	8001d38 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c60:	f04f 0208 	mov.w	r2, #8
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	4618      	mov	r0, r3
 8001c78:	f006 f8c6 	bl	8007e08 <HAL_RCCEx_PeriphCLKConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001c82:	f000 f95b 	bl	8001f3c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c86:	4b2f      	ldr	r3, [pc, #188]	@ (8001d44 <HAL_I2C_MspInit+0x114>)
 8001c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <HAL_I2C_MspInit+0x114>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c96:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <HAL_I2C_MspInit+0x114>)
 8001c98:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <HAL_I2C_MspInit+0x114>)
 8001ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001caa:	4a26      	ldr	r2, [pc, #152]	@ (8001d44 <HAL_I2C_MspInit+0x114>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001cb4:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <HAL_I2C_MspInit+0x114>)
 8001cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cca:	2312      	movs	r3, #18
 8001ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4817      	ldr	r0, [pc, #92]	@ (8001d48 <HAL_I2C_MspInit+0x118>)
 8001cea:	f004 fd97 	bl	800681c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf6:	2312      	movs	r3, #18
 8001cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d12:	4619      	mov	r1, r3
 8001d14:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <HAL_I2C_MspInit+0x11c>)
 8001d16:	f004 fd81 	bl	800681c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_I2C_MspInit+0x114>)
 8001d1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d20:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_I2C_MspInit+0x114>)
 8001d22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d26:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_I2C_MspInit+0x114>)
 8001d2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d38:	bf00      	nop
 8001d3a:	37f0      	adds	r7, #240	@ 0xf0
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40005c00 	.word	0x40005c00
 8001d44:	58024400 	.word	0x58024400
 8001d48:	58020800 	.word	0x58020800
 8001d4c:	58020000 	.word	0x58020000

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001d54:	f000 f8c6 	bl	8001ee4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d58:	f001 f8e0 	bl	8002f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5c:	f000 f82c 	bl	8001db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d60:	f7ff fe80 	bl	8001a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d64:	f7ff fd80 	bl	8001868 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001d68:	f7ff fd9e 	bl	80018a8 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8001d6c:	f7ff ff20 	bl	8001bb0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001d70:	f000 f8ea 	bl	8001f48 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001d74:	f000 f93e 	bl	8001ff4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001d78:	f000 f992 	bl	80020a0 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001d7c:	f000 fbde 	bl	800253c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d80:	f000 fc58 	bl	8002634 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d84:	f000 fcbc 	bl	8002700 <MX_TIM4_Init>
  MX_UART4_Init();
 8001d88:	f000 fe74 	bl	8002a74 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001d8c:	f000 febe 	bl	8002b0c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001d90:	f000 ff0c 	bl	8002bac <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8001d94:	f000 fd30 	bl	80027f8 <MX_TIM13_Init>
  MX_FATFS_Init();
 8001d98:	f00b fdd4 	bl	800d944 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8001d9c:	f7ff f938 	bl	8001010 <BMP280_init>
  SD_init();
 8001da0:	f7ff fd32 	bl	8001808 <SD_init>
  SBUS_init();
 8001da4:	f7ff f994 	bl	80010d0 <SBUS_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 8001da8:	f7ff f958 	bl	800105c <BMP280_calculate>


	  HAL_Delay(50);
 8001dac:	2032      	movs	r0, #50	@ 0x32
 8001dae:	f001 f947 	bl	8003040 <HAL_Delay>
	  BMP280_calculate();
 8001db2:	bf00      	nop
 8001db4:	e7f8      	b.n	8001da8 <main+0x58>
	...

08001db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b09c      	sub	sp, #112	@ 0x70
 8001dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc2:	224c      	movs	r2, #76	@ 0x4c
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00f ff5e 	bl	8011c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2220      	movs	r2, #32
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00f ff58 	bl	8011c88 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001dd8:	4b30      	ldr	r3, [pc, #192]	@ (8001e9c <SystemClock_Config+0xe4>)
 8001dda:	f04f 32ff 	mov.w	r2, #4294967295
 8001dde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001de2:	2002      	movs	r0, #2
 8001de4:	f005 f818 	bl	8006e18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001de8:	2300      	movs	r3, #0
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea0 <SystemClock_Config+0xe8>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea0 <SystemClock_Config+0xe8>)
 8001df2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <SystemClock_Config+0xe8>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e04:	bf00      	nop
 8001e06:	4b26      	ldr	r3, [pc, #152]	@ (8001ea0 <SystemClock_Config+0xe8>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e12:	d1f8      	bne.n	8001e06 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e14:	2302      	movs	r3, #2
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001e1c:	2340      	movs	r3, #64	@ 0x40
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e20:	2302      	movs	r3, #2
 8001e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001e2c:	2323      	movs	r3, #35	@ 0x23
 8001e2e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e34:	2302      	movs	r3, #2
 8001e36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f005 f81d 	bl	8006e8c <HAL_RCC_OscConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001e58:	f000 f870 	bl	8001f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5c:	233f      	movs	r3, #63	@ 0x3f
 8001e5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e60:	2303      	movs	r3, #3
 8001e62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e6c:	2340      	movs	r3, #64	@ 0x40
 8001e6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e70:	2340      	movs	r3, #64	@ 0x40
 8001e72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e7a:	2340      	movs	r3, #64	@ 0x40
 8001e7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2106      	movs	r1, #6
 8001e82:	4618      	mov	r0, r3
 8001e84:	f005 fc34 	bl	80076f0 <HAL_RCC_ClockConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001e8e:	f000 f855 	bl	8001f3c <Error_Handler>
  }
}
 8001e92:	bf00      	nop
 8001e94:	3770      	adds	r7, #112	@ 0x70
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	58024800 	.word	0x58024800

08001ea4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <HAL_UART_RxCpltCallback+0x34>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10b      	bne.n	8001ece <HAL_UART_RxCpltCallback+0x2a>
		SBUS_Receive(SBUS_RxBuffer);
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_UART_RxCpltCallback+0x38>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f916 	bl	80010ec <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, SBUS_RxBuffer, 1);
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_UART_RxCpltCallback+0x38>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <HAL_UART_RxCpltCallback+0x3c>)
 8001eca:	f009 fd41 	bl	800b950 <HAL_UART_Receive_DMA>
	}


}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	24000115 	.word	0x24000115
 8001ee0:	240025d8 	.word	0x240025d8

08001ee4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001eea:	463b      	mov	r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001ef6:	f001 f9d7 	bl	80032a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f06:	231f      	movs	r3, #31
 8001f08:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001f0a:	2387      	movs	r3, #135	@ 0x87
 8001f0c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001f12:	2300      	movs	r3, #0
 8001f14:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f26:	463b      	mov	r3, r7
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 f9f5 	bl	8003318 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f2e:	2004      	movs	r0, #4
 8001f30:	f001 f9d2 	bl	80032d8 <HAL_MPU_Enable>

}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <Error_Handler+0x8>

08001f48 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f4c:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f4e:	4a28      	ldr	r2, [pc, #160]	@ (8001ff0 <MX_SPI1_Init+0xa8>)
 8001f50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f52:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f54:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f5a:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f60:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f62:	2207      	movs	r2, #7
 8001f64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f66:	4b21      	ldr	r3, [pc, #132]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f72:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f74:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f7c:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8001f80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f88:	4b18      	ldr	r3, [pc, #96]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f94:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001f9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001fa2:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001fa8:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fd8:	4804      	ldr	r0, [pc, #16]	@ (8001fec <MX_SPI1_Init+0xa4>)
 8001fda:	f007 fcf5 	bl	80099c8 <HAL_SPI_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001fe4:	f7ff ffaa 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	2400227c 	.word	0x2400227c
 8001ff0:	40013000 	.word	0x40013000

08001ff4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ff8:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8001ffa:	4a28      	ldr	r2, [pc, #160]	@ (800209c <MX_SPI2_Init+0xa8>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ffe:	4b26      	ldr	r3, [pc, #152]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002000:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002004:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002006:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800200c:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <MX_SPI2_Init+0xa4>)
 800200e:	2207      	movs	r2, #7
 8002010:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002012:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002018:	4b1f      	ldr	r3, [pc, #124]	@ (8002098 <MX_SPI2_Init+0xa4>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002020:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002024:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002026:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002028:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800202c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002034:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800203a:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <MX_SPI2_Init+0xa4>)
 800203c:	2200      	movs	r2, #0
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002042:	2200      	movs	r2, #0
 8002044:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002046:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002048:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800204c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800204e:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002050:	2200      	movs	r2, #0
 8002052:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002054:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002056:	2200      	movs	r2, #0
 8002058:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <MX_SPI2_Init+0xa4>)
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002060:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002066:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002068:	2200      	movs	r2, #0
 800206a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800206c:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <MX_SPI2_Init+0xa4>)
 800206e:	2200      	movs	r2, #0
 8002070:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002074:	2200      	movs	r2, #0
 8002076:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002078:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <MX_SPI2_Init+0xa4>)
 800207a:	2200      	movs	r2, #0
 800207c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002080:	2200      	movs	r2, #0
 8002082:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002084:	4804      	ldr	r0, [pc, #16]	@ (8002098 <MX_SPI2_Init+0xa4>)
 8002086:	f007 fc9f 	bl	80099c8 <HAL_SPI_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002090:	f7ff ff54 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	24002304 	.word	0x24002304
 800209c:	40003800 	.word	0x40003800

080020a0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80020a4:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020a6:	4a28      	ldr	r2, [pc, #160]	@ (8002148 <MX_SPI3_Init+0xa8>)
 80020a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80020aa:	4b26      	ldr	r3, [pc, #152]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80020b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80020b2:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80020b8:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020ba:	2207      	movs	r2, #7
 80020bc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020be:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020d0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020d4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80020d8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020da:	4b1a      	ldr	r3, [pc, #104]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e6:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020f2:	4b14      	ldr	r3, [pc, #80]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <MX_SPI3_Init+0xa4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002100:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <MX_SPI3_Init+0xa4>)
 8002102:	2200      	movs	r2, #0
 8002104:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <MX_SPI3_Init+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <MX_SPI3_Init+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <MX_SPI3_Init+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <MX_SPI3_Init+0xa4>)
 800211a:	2200      	movs	r2, #0
 800211c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <MX_SPI3_Init+0xa4>)
 8002120:	2200      	movs	r2, #0
 8002122:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002124:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <MX_SPI3_Init+0xa4>)
 8002126:	2200      	movs	r2, #0
 8002128:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <MX_SPI3_Init+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002130:	4804      	ldr	r0, [pc, #16]	@ (8002144 <MX_SPI3_Init+0xa4>)
 8002132:	f007 fc49 	bl	80099c8 <HAL_SPI_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800213c:	f7ff fefe 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2400238c 	.word	0x2400238c
 8002148:	40003c00 	.word	0x40003c00

0800214c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b0be      	sub	sp, #248	@ 0xf8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002164:	f107 0320 	add.w	r3, r7, #32
 8002168:	22c0      	movs	r2, #192	@ 0xc0
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f00f fd8b 	bl	8011c88 <memset>
  if(spiHandle->Instance==SPI1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a73      	ldr	r2, [pc, #460]	@ (8002344 <HAL_SPI_MspInit+0x1f8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d146      	bne.n	800220a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800217c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218e:	f107 0320 	add.w	r3, r7, #32
 8002192:	4618      	mov	r0, r3
 8002194:	f005 fe38 	bl	8007e08 <HAL_RCCEx_PeriphCLKConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800219e:	f7ff fecd 	bl	8001f3c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021a2:	4b69      	ldr	r3, [pc, #420]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80021a4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80021a8:	4a67      	ldr	r2, [pc, #412]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80021aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ae:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80021b2:	4b65      	ldr	r3, [pc, #404]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80021b4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80021b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	4b61      	ldr	r3, [pc, #388]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80021c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021c6:	4a60      	ldr	r2, [pc, #384]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80021d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80021d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80021de:	23e0      	movs	r3, #224	@ 0xe0
 80021e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f6:	2305      	movs	r3, #5
 80021f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002200:	4619      	mov	r1, r3
 8002202:	4852      	ldr	r0, [pc, #328]	@ (800234c <HAL_SPI_MspInit+0x200>)
 8002204:	f004 fb0a 	bl	800681c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002208:	e098      	b.n	800233c <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a50      	ldr	r2, [pc, #320]	@ (8002350 <HAL_SPI_MspInit+0x204>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d147      	bne.n	80022a4 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002214:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002226:	f107 0320 	add.w	r3, r7, #32
 800222a:	4618      	mov	r0, r3
 800222c:	f005 fdec 	bl	8007e08 <HAL_RCCEx_PeriphCLKConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8002236:	f7ff fe81 	bl	8001f3c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800223a:	4b43      	ldr	r3, [pc, #268]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 800223c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002240:	4a41      	ldr	r2, [pc, #260]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 8002242:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002246:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800224a:	4b3f      	ldr	r3, [pc, #252]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 800224c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002258:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 800225a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800225e:	4a3a      	ldr	r2, [pc, #232]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002268:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 800226a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8002276:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800227a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002290:	2305      	movs	r3, #5
 8002292:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800229a:	4619      	mov	r1, r3
 800229c:	482d      	ldr	r0, [pc, #180]	@ (8002354 <HAL_SPI_MspInit+0x208>)
 800229e:	f004 fabd 	bl	800681c <HAL_GPIO_Init>
}
 80022a2:	e04b      	b.n	800233c <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002358 <HAL_SPI_MspInit+0x20c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d146      	bne.n	800233c <HAL_SPI_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80022ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c0:	f107 0320 	add.w	r3, r7, #32
 80022c4:	4618      	mov	r0, r3
 80022c6:	f005 fd9f 	bl	8007e08 <HAL_RCCEx_PeriphCLKConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 80022d0:	f7ff fe34 	bl	8001f3c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80022d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80022da:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80022dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80022e4:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80022e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80022ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80022f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022f8:	4a13      	ldr	r2, [pc, #76]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_SPI_MspInit+0x1fc>)
 8002304:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002310:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002314:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800232a:	2306      	movs	r3, #6
 800232c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002334:	4619      	mov	r1, r3
 8002336:	4809      	ldr	r0, [pc, #36]	@ (800235c <HAL_SPI_MspInit+0x210>)
 8002338:	f004 fa70 	bl	800681c <HAL_GPIO_Init>
}
 800233c:	bf00      	nop
 800233e:	37f8      	adds	r7, #248	@ 0xf8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40013000 	.word	0x40013000
 8002348:	58024400 	.word	0x58024400
 800234c:	58020000 	.word	0x58020000
 8002350:	40003800 	.word	0x40003800
 8002354:	58020400 	.word	0x58020400
 8002358:	40003c00 	.word	0x40003c00
 800235c:	58020800 	.word	0x58020800

08002360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_MspInit+0x30>)
 8002368:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800236c:	4a08      	ldr	r2, [pc, #32]	@ (8002390 <HAL_MspInit+0x30>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_MspInit+0x30>)
 8002378:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	58024400 	.word	0x58024400

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <NMI_Handler+0x4>

0800239c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <MemManage_Handler+0x4>

080023ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <UsageFault_Handler+0x4>

080023bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <SysTick_Handler+0x34>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <SysTick_Handler+0x18>
	    Timer1--;
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <SysTick_Handler+0x34>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <SysTick_Handler+0x34>)
 80023fe:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8002400:	4b07      	ldr	r3, [pc, #28]	@ (8002420 <SysTick_Handler+0x38>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <SysTick_Handler+0x2c>
	    Timer2--;
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <SysTick_Handler+0x38>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <SysTick_Handler+0x38>)
 8002412:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002414:	f000 fdf4 	bl	8003000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	24002784 	.word	0x24002784
 8002420:	24002786 	.word	0x24002786

08002424 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002428:	4802      	ldr	r0, [pc, #8]	@ (8002434 <DMA1_Stream0_IRQHandler+0x10>)
 800242a:	f002 fb11 	bl	8004a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	24002700 	.word	0x24002700

08002438 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800243c:	4802      	ldr	r0, [pc, #8]	@ (8002448 <USART1_IRQHandler+0x10>)
 800243e:	f009 fad3 	bl	800b9e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	240025d8 	.word	0x240025d8

0800244c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002450:	4b32      	ldr	r3, [pc, #200]	@ (800251c <SystemInit+0xd0>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	4a31      	ldr	r2, [pc, #196]	@ (800251c <SystemInit+0xd0>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002460:	4b2f      	ldr	r3, [pc, #188]	@ (8002520 <SystemInit+0xd4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	2b02      	cmp	r3, #2
 800246a:	d807      	bhi.n	800247c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800246c:	4b2c      	ldr	r3, [pc, #176]	@ (8002520 <SystemInit+0xd4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 030f 	bic.w	r3, r3, #15
 8002474:	4a2a      	ldr	r2, [pc, #168]	@ (8002520 <SystemInit+0xd4>)
 8002476:	f043 0303 	orr.w	r3, r3, #3
 800247a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800247c:	4b29      	ldr	r3, [pc, #164]	@ (8002524 <SystemInit+0xd8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a28      	ldr	r2, [pc, #160]	@ (8002524 <SystemInit+0xd8>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002488:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <SystemInit+0xd8>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800248e:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <SystemInit+0xd8>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4924      	ldr	r1, [pc, #144]	@ (8002524 <SystemInit+0xd8>)
 8002494:	4b24      	ldr	r3, [pc, #144]	@ (8002528 <SystemInit+0xdc>)
 8002496:	4013      	ands	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800249a:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <SystemInit+0xd4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <SystemInit+0xd4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 030f 	bic.w	r3, r3, #15
 80024ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002520 <SystemInit+0xd4>)
 80024b0:	f043 0303 	orr.w	r3, r3, #3
 80024b4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80024b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <SystemInit+0xd8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <SystemInit+0xd8>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <SystemInit+0xd8>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024c8:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <SystemInit+0xd8>)
 80024ca:	4a18      	ldr	r2, [pc, #96]	@ (800252c <SystemInit+0xe0>)
 80024cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <SystemInit+0xd8>)
 80024d0:	4a17      	ldr	r2, [pc, #92]	@ (8002530 <SystemInit+0xe4>)
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024d4:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <SystemInit+0xd8>)
 80024d6:	4a17      	ldr	r2, [pc, #92]	@ (8002534 <SystemInit+0xe8>)
 80024d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024da:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <SystemInit+0xd8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024e0:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <SystemInit+0xd8>)
 80024e2:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <SystemInit+0xe8>)
 80024e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <SystemInit+0xd8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <SystemInit+0xd8>)
 80024ee:	4a11      	ldr	r2, [pc, #68]	@ (8002534 <SystemInit+0xe8>)
 80024f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <SystemInit+0xd8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <SystemInit+0xd8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a09      	ldr	r2, [pc, #36]	@ (8002524 <SystemInit+0xd8>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002502:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002504:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <SystemInit+0xd8>)
 8002506:	2200      	movs	r2, #0
 8002508:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800250a:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <SystemInit+0xec>)
 800250c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002510:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00
 8002520:	52002000 	.word	0x52002000
 8002524:	58024400 	.word	0x58024400
 8002528:	eaf6ed7f 	.word	0xeaf6ed7f
 800252c:	02020200 	.word	0x02020200
 8002530:	01ff0000 	.word	0x01ff0000
 8002534:	01010280 	.word	0x01010280
 8002538:	52004000 	.word	0x52004000

0800253c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	@ 0x28
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800254e:	463b      	mov	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
 800255c:	615a      	str	r2, [r3, #20]
 800255e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <MX_TIM2_Init+0xf4>)
 8002562:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002566:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002568:	4b31      	ldr	r3, [pc, #196]	@ (8002630 <MX_TIM2_Init+0xf4>)
 800256a:	f240 1217 	movw	r2, #279	@ 0x117
 800256e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002570:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <MX_TIM2_Init+0xf4>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002576:	4b2e      	ldr	r3, [pc, #184]	@ (8002630 <MX_TIM2_Init+0xf4>)
 8002578:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800257c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257e:	4b2c      	ldr	r3, [pc, #176]	@ (8002630 <MX_TIM2_Init+0xf4>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002584:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <MX_TIM2_Init+0xf4>)
 8002586:	2280      	movs	r2, #128	@ 0x80
 8002588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800258a:	4829      	ldr	r0, [pc, #164]	@ (8002630 <MX_TIM2_Init+0xf4>)
 800258c:	f008 fc1a 	bl	800adc4 <HAL_TIM_PWM_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002596:	f7ff fcd1 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	4619      	mov	r1, r3
 80025a8:	4821      	ldr	r0, [pc, #132]	@ (8002630 <MX_TIM2_Init+0xf4>)
 80025aa:	f009 f8f3 	bl	800b794 <HAL_TIMEx_MasterConfigSynchronization>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80025b4:	f7ff fcc2 	bl	8001f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b8:	2360      	movs	r3, #96	@ 0x60
 80025ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025c8:	463b      	mov	r3, r7
 80025ca:	2200      	movs	r2, #0
 80025cc:	4619      	mov	r1, r3
 80025ce:	4818      	ldr	r0, [pc, #96]	@ (8002630 <MX_TIM2_Init+0xf4>)
 80025d0:	f008 fc50 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80025da:	f7ff fcaf 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025de:	463b      	mov	r3, r7
 80025e0:	2204      	movs	r2, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4812      	ldr	r0, [pc, #72]	@ (8002630 <MX_TIM2_Init+0xf4>)
 80025e6:	f008 fc45 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80025f0:	f7ff fca4 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	2208      	movs	r2, #8
 80025f8:	4619      	mov	r1, r3
 80025fa:	480d      	ldr	r0, [pc, #52]	@ (8002630 <MX_TIM2_Init+0xf4>)
 80025fc:	f008 fc3a 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002606:	f7ff fc99 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800260a:	463b      	mov	r3, r7
 800260c:	220c      	movs	r2, #12
 800260e:	4619      	mov	r1, r3
 8002610:	4807      	ldr	r0, [pc, #28]	@ (8002630 <MX_TIM2_Init+0xf4>)
 8002612:	f008 fc2f 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 800261c:	f7ff fc8e 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002620:	4803      	ldr	r0, [pc, #12]	@ (8002630 <MX_TIM2_Init+0xf4>)
 8002622:	f000 f97d 	bl	8002920 <HAL_TIM_MspPostInit>

}
 8002626:	bf00      	nop
 8002628:	3728      	adds	r7, #40	@ 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	24002414 	.word	0x24002414

08002634 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002646:	463b      	mov	r3, r7
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002658:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 800265a:	4a28      	ldr	r2, [pc, #160]	@ (80026fc <MX_TIM3_Init+0xc8>)
 800265c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 800265e:	4b26      	ldr	r3, [pc, #152]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 8002660:	f240 1217 	movw	r2, #279	@ 0x117
 8002664:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002666:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 800266c:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 800266e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002672:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002674:	4b20      	ldr	r3, [pc, #128]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800267a:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 800267c:	2280      	movs	r2, #128	@ 0x80
 800267e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002680:	481d      	ldr	r0, [pc, #116]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 8002682:	f008 fb9f 	bl	800adc4 <HAL_TIM_PWM_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800268c:	f7ff fc56 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	4619      	mov	r1, r3
 800269e:	4816      	ldr	r0, [pc, #88]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 80026a0:	f009 f878 	bl	800b794 <HAL_TIMEx_MasterConfigSynchronization>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80026aa:	f7ff fc47 	bl	8001f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ae:	2360      	movs	r3, #96	@ 0x60
 80026b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026be:	463b      	mov	r3, r7
 80026c0:	2200      	movs	r2, #0
 80026c2:	4619      	mov	r1, r3
 80026c4:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 80026c6:	f008 fbd5 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80026d0:	f7ff fc34 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026d4:	463b      	mov	r3, r7
 80026d6:	2204      	movs	r2, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4807      	ldr	r0, [pc, #28]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 80026dc:	f008 fbca 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80026e6:	f7ff fc29 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026ea:	4803      	ldr	r0, [pc, #12]	@ (80026f8 <MX_TIM3_Init+0xc4>)
 80026ec:	f000 f918 	bl	8002920 <HAL_TIM_MspPostInit>

}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	@ 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	24002460 	.word	0x24002460
 80026fc:	40000400 	.word	0x40000400

08002700 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	@ 0x28
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002712:	463b      	mov	r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
 8002720:	615a      	str	r2, [r3, #20]
 8002722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002724:	4b32      	ldr	r3, [pc, #200]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 8002726:	4a33      	ldr	r2, [pc, #204]	@ (80027f4 <MX_TIM4_Init+0xf4>)
 8002728:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 800272a:	4b31      	ldr	r3, [pc, #196]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 800272c:	f240 1217 	movw	r2, #279	@ 0x117
 8002730:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002732:	4b2f      	ldr	r3, [pc, #188]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002738:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 800273a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800273e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002740:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002746:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 8002748:	2280      	movs	r2, #128	@ 0x80
 800274a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800274c:	4828      	ldr	r0, [pc, #160]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 800274e:	f008 fb39 	bl	800adc4 <HAL_TIM_PWM_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002758:	f7ff fbf0 	bl	8001f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	4821      	ldr	r0, [pc, #132]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 800276c:	f009 f812 	bl	800b794 <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002776:	f7ff fbe1 	bl	8001f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800277a:	2360      	movs	r3, #96	@ 0x60
 800277c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800278a:	463b      	mov	r3, r7
 800278c:	2200      	movs	r2, #0
 800278e:	4619      	mov	r1, r3
 8002790:	4817      	ldr	r0, [pc, #92]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 8002792:	f008 fb6f 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 800279c:	f7ff fbce 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027a0:	463b      	mov	r3, r7
 80027a2:	2204      	movs	r2, #4
 80027a4:	4619      	mov	r1, r3
 80027a6:	4812      	ldr	r0, [pc, #72]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 80027a8:	f008 fb64 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80027b2:	f7ff fbc3 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027b6:	463b      	mov	r3, r7
 80027b8:	2208      	movs	r2, #8
 80027ba:	4619      	mov	r1, r3
 80027bc:	480c      	ldr	r0, [pc, #48]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 80027be:	f008 fb59 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 80027c8:	f7ff fbb8 	bl	8001f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027cc:	463b      	mov	r3, r7
 80027ce:	220c      	movs	r2, #12
 80027d0:	4619      	mov	r1, r3
 80027d2:	4807      	ldr	r0, [pc, #28]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 80027d4:	f008 fb4e 	bl	800ae74 <HAL_TIM_PWM_ConfigChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 80027de:	f7ff fbad 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027e2:	4803      	ldr	r0, [pc, #12]	@ (80027f0 <MX_TIM4_Init+0xf0>)
 80027e4:	f000 f89c 	bl	8002920 <HAL_TIM_MspPostInit>

}
 80027e8:	bf00      	nop
 80027ea:	3728      	adds	r7, #40	@ 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	240024ac 	.word	0x240024ac
 80027f4:	40000800 	.word	0x40000800

080027f8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80027fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <MX_TIM13_Init+0x40>)
 80027fe:	4a0f      	ldr	r2, [pc, #60]	@ (800283c <MX_TIM13_Init+0x44>)
 8002800:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <MX_TIM13_Init+0x40>)
 8002804:	f240 1217 	movw	r2, #279	@ 0x117
 8002808:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <MX_TIM13_Init+0x40>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <MX_TIM13_Init+0x40>)
 8002812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002816:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002818:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <MX_TIM13_Init+0x40>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <MX_TIM13_Init+0x40>)
 8002820:	2280      	movs	r2, #128	@ 0x80
 8002822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002824:	4804      	ldr	r0, [pc, #16]	@ (8002838 <MX_TIM13_Init+0x40>)
 8002826:	f008 fa76 	bl	800ad16 <HAL_TIM_Base_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002830:	f7ff fb84 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	240024f8 	.word	0x240024f8
 800283c:	40001c00 	.word	0x40001c00

08002840 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002850:	d10f      	bne.n	8002872 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002852:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x90>)
 8002854:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002858:	4a1d      	ldr	r2, [pc, #116]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x90>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002862:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x90>)
 8002864:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002870:	e028      	b.n	80028c4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a17      	ldr	r2, [pc, #92]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x94>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d10f      	bne.n	800289c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800287c:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x90>)
 800287e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002882:	4a13      	ldr	r2, [pc, #76]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x90>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800288c:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x90>)
 800288e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
}
 800289a:	e013      	b.n	80028c4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <HAL_TIM_PWM_MspInit+0x98>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x90>)
 80028a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80028ac:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x90>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80028b6:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_TIM_PWM_MspInit+0x90>)
 80028b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	58024400 	.word	0x58024400
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800

080028dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002918 <HAL_TIM_Base_MspInit+0x3c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80028ee:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_TIM_Base_MspInit+0x40>)
 80028f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80028f4:	4a09      	ldr	r2, [pc, #36]	@ (800291c <HAL_TIM_Base_MspInit+0x40>)
 80028f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028fa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80028fe:	4b07      	ldr	r3, [pc, #28]	@ (800291c <HAL_TIM_Base_MspInit+0x40>)
 8002900:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40001c00 	.word	0x40001c00
 800291c:	58024400 	.word	0x58024400

08002920 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	@ 0x30
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002940:	d13f      	bne.n	80029c2 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	4b47      	ldr	r3, [pc, #284]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002944:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002948:	4a45      	ldr	r2, [pc, #276]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002952:	4b43      	ldr	r3, [pc, #268]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002954:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b3f      	ldr	r3, [pc, #252]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002962:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002966:	4a3e      	ldr	r2, [pc, #248]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002970:	4b3b      	ldr	r3, [pc, #236]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002972:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800297e:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002990:	2301      	movs	r3, #1
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	4832      	ldr	r0, [pc, #200]	@ (8002a64 <HAL_TIM_MspPostInit+0x144>)
 800299c:	f003 ff3e 	bl	800681c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029a0:	2308      	movs	r3, #8
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029b0:	2301      	movs	r3, #1
 80029b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	4619      	mov	r1, r3
 80029ba:	482b      	ldr	r0, [pc, #172]	@ (8002a68 <HAL_TIM_MspPostInit+0x148>)
 80029bc:	f003 ff2e 	bl	800681c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029c0:	e049      	b.n	8002a56 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a29      	ldr	r2, [pc, #164]	@ (8002a6c <HAL_TIM_MspPostInit+0x14c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d11f      	bne.n	8002a0c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029cc:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 80029ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029d2:	4a23      	ldr	r2, [pc, #140]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80029dc:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 80029de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029ea:	2330      	movs	r3, #48	@ 0x30
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029fa:	2302      	movs	r3, #2
 80029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fe:	f107 031c 	add.w	r3, r7, #28
 8002a02:	4619      	mov	r1, r3
 8002a04:	4818      	ldr	r0, [pc, #96]	@ (8002a68 <HAL_TIM_MspPostInit+0x148>)
 8002a06:	f003 ff09 	bl	800681c <HAL_GPIO_Init>
}
 8002a0a:	e024      	b.n	8002a56 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <HAL_TIM_MspPostInit+0x150>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d11f      	bne.n	8002a56 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002a18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a1c:	4a10      	ldr	r2, [pc, #64]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_TIM_MspPostInit+0x140>)
 8002a28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002a34:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a46:	2302      	movs	r3, #2
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	@ (8002a68 <HAL_TIM_MspPostInit+0x148>)
 8002a52:	f003 fee3 	bl	800681c <HAL_GPIO_Init>
}
 8002a56:	bf00      	nop
 8002a58:	3730      	adds	r7, #48	@ 0x30
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	58024400 	.word	0x58024400
 8002a64:	58020000 	.word	0x58020000
 8002a68:	58020400 	.word	0x58020400
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800

08002a74 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a78:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002a7a:	4a23      	ldr	r2, [pc, #140]	@ (8002b08 <MX_UART4_Init+0x94>)
 8002a7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002a7e:	4b21      	ldr	r3, [pc, #132]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002a80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a86:	4b1f      	ldr	r3, [pc, #124]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a92:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a98:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9e:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa4:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aaa:	4b16      	ldr	r3, [pc, #88]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ab0:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ab6:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002abc:	4811      	ldr	r0, [pc, #68]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002abe:	f008 fef7 	bl	800b8b0 <HAL_UART_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002ac8:	f7ff fa38 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002acc:	2100      	movs	r1, #0
 8002ace:	480d      	ldr	r0, [pc, #52]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002ad0:	f00a fe6d 	bl	800d7ae <HAL_UARTEx_SetTxFifoThreshold>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002ada:	f7ff fa2f 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4808      	ldr	r0, [pc, #32]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002ae2:	f00a fea2 	bl	800d82a <HAL_UARTEx_SetRxFifoThreshold>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002aec:	f7ff fa26 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002af0:	4804      	ldr	r0, [pc, #16]	@ (8002b04 <MX_UART4_Init+0x90>)
 8002af2:	f00a fe23 	bl	800d73c <HAL_UARTEx_DisableFifoMode>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002afc:	f7ff fa1e 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	24002544 	.word	0x24002544
 8002b08:	40004c00 	.word	0x40004c00

08002b0c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b10:	4b23      	ldr	r3, [pc, #140]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b12:	4a24      	ldr	r2, [pc, #144]	@ (8002ba4 <MX_USART1_UART_Init+0x98>)
 8002b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002b16:	4b22      	ldr	r3, [pc, #136]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b18:	4a23      	ldr	r2, [pc, #140]	@ (8002ba8 <MX_USART1_UART_Init+0x9c>)
 8002b1a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002b1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b30:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b34:	220c      	movs	r2, #12
 8002b36:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b44:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b56:	4812      	ldr	r0, [pc, #72]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b58:	f008 feaa 	bl	800b8b0 <HAL_UART_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002b62:	f7ff f9eb 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b66:	2100      	movs	r1, #0
 8002b68:	480d      	ldr	r0, [pc, #52]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b6a:	f00a fe20 	bl	800d7ae <HAL_UARTEx_SetTxFifoThreshold>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002b74:	f7ff f9e2 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4809      	ldr	r0, [pc, #36]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b7c:	f00a fe55 	bl	800d82a <HAL_UARTEx_SetRxFifoThreshold>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002b86:	f7ff f9d9 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <MX_USART1_UART_Init+0x94>)
 8002b8c:	f00a fdd6 	bl	800d73c <HAL_UARTEx_DisableFifoMode>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002b96:	f7ff f9d1 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	240025d8 	.word	0x240025d8
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	000186a0 	.word	0x000186a0

08002bac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002bb0:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bb2:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <MX_USART6_UART_Init+0x94>)
 8002bb4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002bb6:	4b21      	ldr	r3, [pc, #132]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bca:	4b1c      	ldr	r3, [pc, #112]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd6:	4b19      	ldr	r3, [pc, #100]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bdc:	4b17      	ldr	r3, [pc, #92]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002be2:	4b16      	ldr	r3, [pc, #88]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002be8:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bee:	4b13      	ldr	r3, [pc, #76]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002bf4:	4811      	ldr	r0, [pc, #68]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002bf6:	f008 fe5b 	bl	800b8b0 <HAL_UART_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002c00:	f7ff f99c 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c04:	2100      	movs	r1, #0
 8002c06:	480d      	ldr	r0, [pc, #52]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002c08:	f00a fdd1 	bl	800d7ae <HAL_UARTEx_SetTxFifoThreshold>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002c12:	f7ff f993 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c16:	2100      	movs	r1, #0
 8002c18:	4808      	ldr	r0, [pc, #32]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002c1a:	f00a fe06 	bl	800d82a <HAL_UARTEx_SetRxFifoThreshold>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002c24:	f7ff f98a 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002c28:	4804      	ldr	r0, [pc, #16]	@ (8002c3c <MX_USART6_UART_Init+0x90>)
 8002c2a:	f00a fd87 	bl	800d73c <HAL_UARTEx_DisableFifoMode>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002c34:	f7ff f982 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	2400266c 	.word	0x2400266c
 8002c40:	40011400 	.word	0x40011400

08002c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b0be      	sub	sp, #248	@ 0xf8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c5c:	f107 0320 	add.w	r3, r7, #32
 8002c60:	22c0      	movs	r2, #192	@ 0xc0
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00f f80f 	bl	8011c88 <memset>
  if(uartHandle->Instance==UART4)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a8e      	ldr	r2, [pc, #568]	@ (8002ea8 <HAL_UART_MspInit+0x264>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d146      	bne.n	8002d02 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002c74:	f04f 0202 	mov.w	r2, #2
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c86:	f107 0320 	add.w	r3, r7, #32
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 f8bc 	bl	8007e08 <HAL_RCCEx_PeriphCLKConfig>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c96:	f7ff f951 	bl	8001f3c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c9a:	4b84      	ldr	r3, [pc, #528]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002c9c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ca0:	4a82      	ldr	r2, [pc, #520]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002ca2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ca6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002caa:	4b80      	ldr	r3, [pc, #512]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002cac:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	4b7c      	ldr	r3, [pc, #496]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002cba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cbe:	4a7b      	ldr	r2, [pc, #492]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002cc8:	4b78      	ldr	r3, [pc, #480]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002cca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cee:	2308      	movs	r3, #8
 8002cf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	486d      	ldr	r0, [pc, #436]	@ (8002eb0 <HAL_UART_MspInit+0x26c>)
 8002cfc:	f003 fd8e 	bl	800681c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002d00:	e0ce      	b.n	8002ea0 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a6b      	ldr	r2, [pc, #428]	@ (8002eb4 <HAL_UART_MspInit+0x270>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d17e      	bne.n	8002e0a <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d0c:	f04f 0201 	mov.w	r2, #1
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d1e:	f107 0320 	add.w	r3, r7, #32
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 f870 	bl	8007e08 <HAL_RCCEx_PeriphCLKConfig>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8002d2e:	f7ff f905 	bl	8001f3c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d32:	4b5e      	ldr	r3, [pc, #376]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002d34:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002d38:	4a5c      	ldr	r2, [pc, #368]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002d42:	4b5a      	ldr	r3, [pc, #360]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002d44:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d50:	4b56      	ldr	r3, [pc, #344]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002d52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d56:	4a55      	ldr	r2, [pc, #340]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d60:	4b52      	ldr	r3, [pc, #328]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8002d6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d88:	2307      	movs	r3, #7
 8002d8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4846      	ldr	r0, [pc, #280]	@ (8002eb0 <HAL_UART_MspInit+0x26c>)
 8002d96:	f003 fd41 	bl	800681c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002d9a:	4b47      	ldr	r3, [pc, #284]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002d9c:	4a47      	ldr	r2, [pc, #284]	@ (8002ebc <HAL_UART_MspInit+0x278>)
 8002d9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002da0:	4b45      	ldr	r3, [pc, #276]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002da2:	2229      	movs	r2, #41	@ 0x29
 8002da4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da6:	4b44      	ldr	r3, [pc, #272]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dac:	4b42      	ldr	r3, [pc, #264]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002db2:	4b41      	ldr	r3, [pc, #260]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002db4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002db8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dba:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc0:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002dc6:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002dc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dcc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dce:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd4:	4b38      	ldr	r3, [pc, #224]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002dda:	4837      	ldr	r0, [pc, #220]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002ddc:	f000 fadc 	bl	8003398 <HAL_DMA_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8002de6:	f7ff f8a9 	bl	8001f3c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a32      	ldr	r2, [pc, #200]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002df2:	4a31      	ldr	r2, [pc, #196]	@ (8002eb8 <HAL_UART_MspInit+0x274>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2025      	movs	r0, #37	@ 0x25
 8002dfe:	f000 fa1e 	bl	800323e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e02:	2025      	movs	r0, #37	@ 0x25
 8002e04:	f000 fa35 	bl	8003272 <HAL_NVIC_EnableIRQ>
}
 8002e08:	e04a      	b.n	8002ea0 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART6)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <HAL_UART_MspInit+0x27c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d145      	bne.n	8002ea0 <HAL_UART_MspInit+0x25c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002e14:	f04f 0201 	mov.w	r2, #1
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e26:	f107 0320 	add.w	r3, r7, #32
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 ffec 	bl	8007e08 <HAL_RCCEx_PeriphCLKConfig>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8002e36:	f7ff f881 	bl	8001f3c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002e3c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002e40:	4a1a      	ldr	r2, [pc, #104]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002e42:	f043 0320 	orr.w	r3, r3, #32
 8002e46:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002e4a:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002e4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e58:	4b14      	ldr	r3, [pc, #80]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002e5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e5e:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e68:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <HAL_UART_MspInit+0x268>)
 8002e6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e76:	23c0      	movs	r3, #192	@ 0xc0
 8002e78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002e8e:	2307      	movs	r3, #7
 8002e90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e94:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	480a      	ldr	r0, [pc, #40]	@ (8002ec4 <HAL_UART_MspInit+0x280>)
 8002e9c:	f003 fcbe 	bl	800681c <HAL_GPIO_Init>
}
 8002ea0:	bf00      	nop
 8002ea2:	37f8      	adds	r7, #248	@ 0xf8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40004c00 	.word	0x40004c00
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	58020000 	.word	0x58020000
 8002eb4:	40011000 	.word	0x40011000
 8002eb8:	24002700 	.word	0x24002700
 8002ebc:	40020010 	.word	0x40020010
 8002ec0:	40011400 	.word	0x40011400
 8002ec4:	58020800 	.word	0x58020800

08002ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ecc:	f7ff fabe 	bl	800244c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ed0:	480c      	ldr	r0, [pc, #48]	@ (8002f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ed2:	490d      	ldr	r1, [pc, #52]	@ (8002f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed8:	e002      	b.n	8002ee0 <LoopCopyDataInit>

08002eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ede:	3304      	adds	r3, #4

08002ee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee4:	d3f9      	bcc.n	8002eda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8002f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eec:	e001      	b.n	8002ef2 <LoopFillZerobss>

08002eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef0:	3204      	adds	r2, #4

08002ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef4:	d3fb      	bcc.n	8002eee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f00e fed5 	bl	8011ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efa:	f7fe ff29 	bl	8001d50 <main>
  bx  lr
 8002efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f00:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002f04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f08:	240000a8 	.word	0x240000a8
  ldr r2, =_sidata
 8002f0c:	08012d88 	.word	0x08012d88
  ldr r2, =_sbss
 8002f10:	240000a8 	.word	0x240000a8
  ldr r4, =_ebss
 8002f14:	24002af8 	.word	0x24002af8

08002f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC_IRQHandler>
	...

08002f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f22:	2003      	movs	r0, #3
 8002f24:	f000 f980 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002f28:	f004 fd98 	bl	8007a5c <HAL_RCC_GetSysClockFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <HAL_Init+0x68>)
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	4913      	ldr	r1, [pc, #76]	@ (8002f88 <HAL_Init+0x6c>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f46:	4b0f      	ldr	r3, [pc, #60]	@ (8002f84 <HAL_Init+0x68>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f88 <HAL_Init+0x6c>)
 8002f50:	5cd3      	ldrb	r3, [r2, r3]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f8c <HAL_Init+0x70>)
 8002f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f60:	4a0b      	ldr	r2, [pc, #44]	@ (8002f90 <HAL_Init+0x74>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f66:	200f      	movs	r0, #15
 8002f68:	f000 f814 	bl	8002f94 <HAL_InitTick>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e002      	b.n	8002f7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f76:	f7ff f9f3 	bl	8002360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	58024400 	.word	0x58024400
 8002f88:	08012068 	.word	0x08012068
 8002f8c:	24000034 	.word	0x24000034
 8002f90:	24000030 	.word	0x24000030

08002f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f9c:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_InitTick+0x60>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e021      	b.n	8002fec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fa8:	4b13      	ldr	r3, [pc, #76]	@ (8002ff8 <HAL_InitTick+0x64>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_InitTick+0x60>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f965 	bl	800328e <HAL_SYSTICK_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00e      	b.n	8002fec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	d80a      	bhi.n	8002fea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f000 f92f 	bl	800323e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe0:	4a06      	ldr	r2, [pc, #24]	@ (8002ffc <HAL_InitTick+0x68>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2400003c 	.word	0x2400003c
 8002ff8:	24000030 	.word	0x24000030
 8002ffc:	24000038 	.word	0x24000038

08003000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_IncTick+0x20>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <HAL_IncTick+0x24>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4413      	add	r3, r2
 8003010:	4a04      	ldr	r2, [pc, #16]	@ (8003024 <HAL_IncTick+0x24>)
 8003012:	6013      	str	r3, [r2, #0]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	2400003c 	.word	0x2400003c
 8003024:	24002778 	.word	0x24002778

08003028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return uwTick;
 800302c:	4b03      	ldr	r3, [pc, #12]	@ (800303c <HAL_GetTick+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	24002778 	.word	0x24002778

08003040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7ff ffee 	bl	8003028 <HAL_GetTick>
 800304c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d005      	beq.n	8003066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_Delay+0x44>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003066:	bf00      	nop
 8003068:	f7ff ffde 	bl	8003028 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	429a      	cmp	r2, r3
 8003076:	d8f7      	bhi.n	8003068 <HAL_Delay+0x28>
  {
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2400003c 	.word	0x2400003c

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <__NVIC_SetPriorityGrouping+0x40>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b6:	4a04      	ldr	r2, [pc, #16]	@ (80030c8 <__NVIC_SetPriorityGrouping+0x40>)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	60d3      	str	r3, [r2, #12]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00
 80030cc:	05fa0000 	.word	0x05fa0000

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4907      	ldr	r1, [pc, #28]	@ (8003124 <__NVIC_EnableIRQ+0x38>)
 8003106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	@ (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	@ (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	@ 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
         );
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f4:	d301      	bcc.n	80031fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00f      	b.n	800321a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003224 <SysTick_Config+0x40>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003202:	210f      	movs	r1, #15
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	f7ff ff8e 	bl	8003128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <SysTick_Config+0x40>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003212:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <SysTick_Config+0x40>)
 8003214:	2207      	movs	r2, #7
 8003216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000e010 	.word	0xe000e010

08003228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff29 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800324c:	f7ff ff40 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	6978      	ldr	r0, [r7, #20]
 8003258:	f7ff ff90 	bl	800317c <NVIC_EncodePriority>
 800325c:	4602      	mov	r2, r0
 800325e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff5f 	bl	8003128 <__NVIC_SetPriority>
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800327c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff33 	bl	80030ec <__NVIC_EnableIRQ>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffa4 	bl	80031e4 <SysTick_Config>
 800329c:	4603      	mov	r3, r0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80032ac:	f3bf 8f5f 	dmb	sy
}
 80032b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80032b2:	4b07      	ldr	r3, [pc, #28]	@ (80032d0 <HAL_MPU_Disable+0x28>)
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	4a06      	ldr	r2, [pc, #24]	@ (80032d0 <HAL_MPU_Disable+0x28>)
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032bc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80032be:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <HAL_MPU_Disable+0x2c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	605a      	str	r2, [r3, #4]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000ed00 	.word	0xe000ed00
 80032d4:	e000ed90 	.word	0xe000ed90

080032d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80032e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003310 <HAL_MPU_Enable+0x38>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80032ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_MPU_Enable+0x3c>)
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	4a09      	ldr	r2, [pc, #36]	@ (8003314 <HAL_MPU_Enable+0x3c>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80032f6:	f3bf 8f4f 	dsb	sy
}
 80032fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032fc:	f3bf 8f6f 	isb	sy
}
 8003300:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000ed90 	.word	0xe000ed90
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	785a      	ldrb	r2, [r3, #1]
 8003324:	4b1b      	ldr	r3, [pc, #108]	@ (8003394 <HAL_MPU_ConfigRegion+0x7c>)
 8003326:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003328:	4b1a      	ldr	r3, [pc, #104]	@ (8003394 <HAL_MPU_ConfigRegion+0x7c>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	4a19      	ldr	r2, [pc, #100]	@ (8003394 <HAL_MPU_ConfigRegion+0x7c>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003334:	4a17      	ldr	r2, [pc, #92]	@ (8003394 <HAL_MPU_ConfigRegion+0x7c>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7b1b      	ldrb	r3, [r3, #12]
 8003340:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7adb      	ldrb	r3, [r3, #11]
 8003346:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003348:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7a9b      	ldrb	r3, [r3, #10]
 800334e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003350:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7b5b      	ldrb	r3, [r3, #13]
 8003356:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003358:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7b9b      	ldrb	r3, [r3, #14]
 800335e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003360:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7bdb      	ldrb	r3, [r3, #15]
 8003366:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003368:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7a5b      	ldrb	r3, [r3, #9]
 800336e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003370:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7a1b      	ldrb	r3, [r3, #8]
 8003376:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003378:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003380:	4a04      	ldr	r2, [pc, #16]	@ (8003394 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003382:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003384:	6113      	str	r3, [r2, #16]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	e000ed90 	.word	0xe000ed90

08003398 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff fe42 	bl	8003028 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e37d      	b.n	8003aac <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a66      	ldr	r2, [pc, #408]	@ (8003550 <HAL_DMA_Init+0x1b8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d04a      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a65      	ldr	r2, [pc, #404]	@ (8003554 <HAL_DMA_Init+0x1bc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d045      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a63      	ldr	r2, [pc, #396]	@ (8003558 <HAL_DMA_Init+0x1c0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d040      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a62      	ldr	r2, [pc, #392]	@ (800355c <HAL_DMA_Init+0x1c4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d03b      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a60      	ldr	r2, [pc, #384]	@ (8003560 <HAL_DMA_Init+0x1c8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d036      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003564 <HAL_DMA_Init+0x1cc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d031      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003568 <HAL_DMA_Init+0x1d0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d02c      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5c      	ldr	r2, [pc, #368]	@ (800356c <HAL_DMA_Init+0x1d4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d027      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5a      	ldr	r2, [pc, #360]	@ (8003570 <HAL_DMA_Init+0x1d8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d022      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a59      	ldr	r2, [pc, #356]	@ (8003574 <HAL_DMA_Init+0x1dc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d01d      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a57      	ldr	r2, [pc, #348]	@ (8003578 <HAL_DMA_Init+0x1e0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d018      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a56      	ldr	r2, [pc, #344]	@ (800357c <HAL_DMA_Init+0x1e4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a54      	ldr	r2, [pc, #336]	@ (8003580 <HAL_DMA_Init+0x1e8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00e      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a53      	ldr	r2, [pc, #332]	@ (8003584 <HAL_DMA_Init+0x1ec>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a51      	ldr	r2, [pc, #324]	@ (8003588 <HAL_DMA_Init+0x1f0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_DMA_Init+0xb8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a50      	ldr	r2, [pc, #320]	@ (800358c <HAL_DMA_Init+0x1f4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_DMA_Init+0xbc>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_DMA_Init+0xbe>
 8003454:	2300      	movs	r3, #0
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 813c 	beq.w	80036d4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a37      	ldr	r2, [pc, #220]	@ (8003550 <HAL_DMA_Init+0x1b8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d04a      	beq.n	800350c <HAL_DMA_Init+0x174>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a36      	ldr	r2, [pc, #216]	@ (8003554 <HAL_DMA_Init+0x1bc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d045      	beq.n	800350c <HAL_DMA_Init+0x174>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a34      	ldr	r2, [pc, #208]	@ (8003558 <HAL_DMA_Init+0x1c0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d040      	beq.n	800350c <HAL_DMA_Init+0x174>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a33      	ldr	r2, [pc, #204]	@ (800355c <HAL_DMA_Init+0x1c4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d03b      	beq.n	800350c <HAL_DMA_Init+0x174>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a31      	ldr	r2, [pc, #196]	@ (8003560 <HAL_DMA_Init+0x1c8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d036      	beq.n	800350c <HAL_DMA_Init+0x174>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a30      	ldr	r2, [pc, #192]	@ (8003564 <HAL_DMA_Init+0x1cc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d031      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003568 <HAL_DMA_Init+0x1d0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d02c      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2d      	ldr	r2, [pc, #180]	@ (800356c <HAL_DMA_Init+0x1d4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d027      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003570 <HAL_DMA_Init+0x1d8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003574 <HAL_DMA_Init+0x1dc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d01d      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a28      	ldr	r2, [pc, #160]	@ (8003578 <HAL_DMA_Init+0x1e0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a27      	ldr	r2, [pc, #156]	@ (800357c <HAL_DMA_Init+0x1e4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a25      	ldr	r2, [pc, #148]	@ (8003580 <HAL_DMA_Init+0x1e8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a24      	ldr	r2, [pc, #144]	@ (8003584 <HAL_DMA_Init+0x1ec>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_DMA_Init+0x174>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a22      	ldr	r2, [pc, #136]	@ (8003588 <HAL_DMA_Init+0x1f0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_DMA_Init+0x174>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a21      	ldr	r2, [pc, #132]	@ (800358c <HAL_DMA_Init+0x1f4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d108      	bne.n	800351e <HAL_DMA_Init+0x186>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e007      	b.n	800352e <HAL_DMA_Init+0x196>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800352e:	e02f      	b.n	8003590 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003530:	f7ff fd7a 	bl	8003028 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b05      	cmp	r3, #5
 800353c:	d928      	bls.n	8003590 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e2ad      	b.n	8003aac <HAL_DMA_Init+0x714>
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1c8      	bne.n	8003530 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4b73      	ldr	r3, [pc, #460]	@ (8003778 <HAL_DMA_Init+0x3e0>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80035b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d107      	bne.n	80035f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	4313      	orrs	r3, r2
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b28      	cmp	r3, #40	@ 0x28
 80035fa:	d903      	bls.n	8003604 <HAL_DMA_Init+0x26c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b2e      	cmp	r3, #46	@ 0x2e
 8003602:	d91f      	bls.n	8003644 <HAL_DMA_Init+0x2ac>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b3e      	cmp	r3, #62	@ 0x3e
 800360a:	d903      	bls.n	8003614 <HAL_DMA_Init+0x27c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b42      	cmp	r3, #66	@ 0x42
 8003612:	d917      	bls.n	8003644 <HAL_DMA_Init+0x2ac>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b46      	cmp	r3, #70	@ 0x46
 800361a:	d903      	bls.n	8003624 <HAL_DMA_Init+0x28c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b48      	cmp	r3, #72	@ 0x48
 8003622:	d90f      	bls.n	8003644 <HAL_DMA_Init+0x2ac>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b4e      	cmp	r3, #78	@ 0x4e
 800362a:	d903      	bls.n	8003634 <HAL_DMA_Init+0x29c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b52      	cmp	r3, #82	@ 0x52
 8003632:	d907      	bls.n	8003644 <HAL_DMA_Init+0x2ac>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b73      	cmp	r3, #115	@ 0x73
 800363a:	d905      	bls.n	8003648 <HAL_DMA_Init+0x2b0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b77      	cmp	r3, #119	@ 0x77
 8003642:	d801      	bhi.n	8003648 <HAL_DMA_Init+0x2b0>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_DMA_Init+0x2b2>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003654:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 0307 	bic.w	r3, r3, #7
 800366c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	2b04      	cmp	r3, #4
 800367e:	d117      	bne.n	80036b0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f002 fbd4 	bl	8005e40 <DMA_CheckFifoParam>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2240      	movs	r2, #64	@ 0x40
 80036a2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e1fd      	b.n	8003aac <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f002 fb0f 	bl	8005cdc <DMA_CalcBaseAndBitshift>
 80036be:	4603      	mov	r3, r0
 80036c0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	223f      	movs	r2, #63	@ 0x3f
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	e0fd      	b.n	80038d0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a28      	ldr	r2, [pc, #160]	@ (800377c <HAL_DMA_Init+0x3e4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d04a      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a27      	ldr	r2, [pc, #156]	@ (8003780 <HAL_DMA_Init+0x3e8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d045      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a25      	ldr	r2, [pc, #148]	@ (8003784 <HAL_DMA_Init+0x3ec>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d040      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a24      	ldr	r2, [pc, #144]	@ (8003788 <HAL_DMA_Init+0x3f0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d03b      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a22      	ldr	r2, [pc, #136]	@ (800378c <HAL_DMA_Init+0x3f4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d036      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a21      	ldr	r2, [pc, #132]	@ (8003790 <HAL_DMA_Init+0x3f8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d031      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1f      	ldr	r2, [pc, #124]	@ (8003794 <HAL_DMA_Init+0x3fc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d02c      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1e      	ldr	r2, [pc, #120]	@ (8003798 <HAL_DMA_Init+0x400>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d027      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1c      	ldr	r2, [pc, #112]	@ (800379c <HAL_DMA_Init+0x404>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1b      	ldr	r2, [pc, #108]	@ (80037a0 <HAL_DMA_Init+0x408>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d01d      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	@ (80037a4 <HAL_DMA_Init+0x40c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a18      	ldr	r2, [pc, #96]	@ (80037a8 <HAL_DMA_Init+0x410>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a16      	ldr	r2, [pc, #88]	@ (80037ac <HAL_DMA_Init+0x414>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a15      	ldr	r2, [pc, #84]	@ (80037b0 <HAL_DMA_Init+0x418>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a13      	ldr	r2, [pc, #76]	@ (80037b4 <HAL_DMA_Init+0x41c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_DMA_Init+0x3dc>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a12      	ldr	r2, [pc, #72]	@ (80037b8 <HAL_DMA_Init+0x420>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d123      	bne.n	80037bc <HAL_DMA_Init+0x424>
 8003774:	2301      	movs	r3, #1
 8003776:	e022      	b.n	80037be <HAL_DMA_Init+0x426>
 8003778:	fe10803f 	.word	0xfe10803f
 800377c:	48022c08 	.word	0x48022c08
 8003780:	48022c1c 	.word	0x48022c1c
 8003784:	48022c30 	.word	0x48022c30
 8003788:	48022c44 	.word	0x48022c44
 800378c:	48022c58 	.word	0x48022c58
 8003790:	48022c6c 	.word	0x48022c6c
 8003794:	48022c80 	.word	0x48022c80
 8003798:	48022c94 	.word	0x48022c94
 800379c:	58025408 	.word	0x58025408
 80037a0:	5802541c 	.word	0x5802541c
 80037a4:	58025430 	.word	0x58025430
 80037a8:	58025444 	.word	0x58025444
 80037ac:	58025458 	.word	0x58025458
 80037b0:	5802546c 	.word	0x5802546c
 80037b4:	58025480 	.word	0x58025480
 80037b8:	58025494 	.word	0x58025494
 80037bc:	2300      	movs	r3, #0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d07d      	beq.n	80038be <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7f      	ldr	r2, [pc, #508]	@ (80039c4 <HAL_DMA_Init+0x62c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d021      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7d      	ldr	r2, [pc, #500]	@ (80039c8 <HAL_DMA_Init+0x630>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01c      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7c      	ldr	r2, [pc, #496]	@ (80039cc <HAL_DMA_Init+0x634>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d017      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a7a      	ldr	r2, [pc, #488]	@ (80039d0 <HAL_DMA_Init+0x638>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d012      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a79      	ldr	r2, [pc, #484]	@ (80039d4 <HAL_DMA_Init+0x63c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00d      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a77      	ldr	r2, [pc, #476]	@ (80039d8 <HAL_DMA_Init+0x640>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d008      	beq.n	8003810 <HAL_DMA_Init+0x478>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a76      	ldr	r2, [pc, #472]	@ (80039dc <HAL_DMA_Init+0x644>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <HAL_DMA_Init+0x478>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a74      	ldr	r2, [pc, #464]	@ (80039e0 <HAL_DMA_Init+0x648>)
 800380e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4b6e      	ldr	r3, [pc, #440]	@ (80039e4 <HAL_DMA_Init+0x64c>)
 800382c:	4013      	ands	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	d008      	beq.n	800384a <HAL_DMA_Init+0x4b2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b80      	cmp	r3, #128	@ 0x80
 800383e:	d102      	bne.n	8003846 <HAL_DMA_Init+0x4ae>
 8003840:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003844:	e002      	b.n	800384c <HAL_DMA_Init+0x4b4>
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_DMA_Init+0x4b4>
 800384a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68d2      	ldr	r2, [r2, #12]
 8003850:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003852:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800385a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003862:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800386a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003872:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800387a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	4b55      	ldr	r3, [pc, #340]	@ (80039e8 <HAL_DMA_Init+0x650>)
 8003892:	4413      	add	r3, r2
 8003894:	4a55      	ldr	r2, [pc, #340]	@ (80039ec <HAL_DMA_Init+0x654>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	009a      	lsls	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f002 fa1a 	bl	8005cdc <DMA_CalcBaseAndBitshift>
 80038a8:	4603      	mov	r3, r0
 80038aa:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	2201      	movs	r2, #1
 80038b6:	409a      	lsls	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	e008      	b.n	80038d0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2240      	movs	r2, #64	@ 0x40
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2203      	movs	r2, #3
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0ed      	b.n	8003aac <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a46      	ldr	r2, [pc, #280]	@ (80039f0 <HAL_DMA_Init+0x658>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d072      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a45      	ldr	r2, [pc, #276]	@ (80039f4 <HAL_DMA_Init+0x65c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d06d      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a43      	ldr	r2, [pc, #268]	@ (80039f8 <HAL_DMA_Init+0x660>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d068      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a42      	ldr	r2, [pc, #264]	@ (80039fc <HAL_DMA_Init+0x664>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d063      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a40      	ldr	r2, [pc, #256]	@ (8003a00 <HAL_DMA_Init+0x668>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d05e      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a3f      	ldr	r2, [pc, #252]	@ (8003a04 <HAL_DMA_Init+0x66c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d059      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a3d      	ldr	r2, [pc, #244]	@ (8003a08 <HAL_DMA_Init+0x670>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d054      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a3c      	ldr	r2, [pc, #240]	@ (8003a0c <HAL_DMA_Init+0x674>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d04f      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a3a      	ldr	r2, [pc, #232]	@ (8003a10 <HAL_DMA_Init+0x678>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d04a      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a39      	ldr	r2, [pc, #228]	@ (8003a14 <HAL_DMA_Init+0x67c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d045      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a37      	ldr	r2, [pc, #220]	@ (8003a18 <HAL_DMA_Init+0x680>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d040      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a36      	ldr	r2, [pc, #216]	@ (8003a1c <HAL_DMA_Init+0x684>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d03b      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a34      	ldr	r2, [pc, #208]	@ (8003a20 <HAL_DMA_Init+0x688>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d036      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a33      	ldr	r2, [pc, #204]	@ (8003a24 <HAL_DMA_Init+0x68c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d031      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a31      	ldr	r2, [pc, #196]	@ (8003a28 <HAL_DMA_Init+0x690>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02c      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a30      	ldr	r2, [pc, #192]	@ (8003a2c <HAL_DMA_Init+0x694>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d027      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <HAL_DMA_Init+0x62c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a12      	ldr	r2, [pc, #72]	@ (80039c8 <HAL_DMA_Init+0x630>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d01d      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a10      	ldr	r2, [pc, #64]	@ (80039cc <HAL_DMA_Init+0x634>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a0f      	ldr	r2, [pc, #60]	@ (80039d0 <HAL_DMA_Init+0x638>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <HAL_DMA_Init+0x63c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	@ (80039d8 <HAL_DMA_Init+0x640>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	@ (80039dc <HAL_DMA_Init+0x644>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_Init+0x628>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a09      	ldr	r2, [pc, #36]	@ (80039e0 <HAL_DMA_Init+0x648>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d137      	bne.n	8003a30 <HAL_DMA_Init+0x698>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e036      	b.n	8003a32 <HAL_DMA_Init+0x69a>
 80039c4:	58025408 	.word	0x58025408
 80039c8:	5802541c 	.word	0x5802541c
 80039cc:	58025430 	.word	0x58025430
 80039d0:	58025444 	.word	0x58025444
 80039d4:	58025458 	.word	0x58025458
 80039d8:	5802546c 	.word	0x5802546c
 80039dc:	58025480 	.word	0x58025480
 80039e0:	58025494 	.word	0x58025494
 80039e4:	fffe000f 	.word	0xfffe000f
 80039e8:	a7fdabf8 	.word	0xa7fdabf8
 80039ec:	cccccccd 	.word	0xcccccccd
 80039f0:	40020010 	.word	0x40020010
 80039f4:	40020028 	.word	0x40020028
 80039f8:	40020040 	.word	0x40020040
 80039fc:	40020058 	.word	0x40020058
 8003a00:	40020070 	.word	0x40020070
 8003a04:	40020088 	.word	0x40020088
 8003a08:	400200a0 	.word	0x400200a0
 8003a0c:	400200b8 	.word	0x400200b8
 8003a10:	40020410 	.word	0x40020410
 8003a14:	40020428 	.word	0x40020428
 8003a18:	40020440 	.word	0x40020440
 8003a1c:	40020458 	.word	0x40020458
 8003a20:	40020470 	.word	0x40020470
 8003a24:	40020488 	.word	0x40020488
 8003a28:	400204a0 	.word	0x400204a0
 8003a2c:	400204b8 	.word	0x400204b8
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d032      	beq.n	8003a9c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f002 fa7e 	bl	8005f38 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b80      	cmp	r3, #128	@ 0x80
 8003a42:	d102      	bne.n	8003a4a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a5e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d010      	beq.n	8003a8a <HAL_DMA_Init+0x6f2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d80c      	bhi.n	8003a8a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f002 fafb 	bl	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	e008      	b.n	8003a9c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e226      	b.n	8003f1e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_DMA_Start_IT+0x2a>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e21f      	b.n	8003f1e <HAL_DMA_Start_IT+0x46a>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	f040 820a 	bne.w	8003f08 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a68      	ldr	r2, [pc, #416]	@ (8003ca8 <HAL_DMA_Start_IT+0x1f4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d04a      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a66      	ldr	r2, [pc, #408]	@ (8003cac <HAL_DMA_Start_IT+0x1f8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d045      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a65      	ldr	r2, [pc, #404]	@ (8003cb0 <HAL_DMA_Start_IT+0x1fc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d040      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a63      	ldr	r2, [pc, #396]	@ (8003cb4 <HAL_DMA_Start_IT+0x200>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d03b      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a62      	ldr	r2, [pc, #392]	@ (8003cb8 <HAL_DMA_Start_IT+0x204>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d036      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a60      	ldr	r2, [pc, #384]	@ (8003cbc <HAL_DMA_Start_IT+0x208>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d031      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a5f      	ldr	r2, [pc, #380]	@ (8003cc0 <HAL_DMA_Start_IT+0x20c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d02c      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003cc4 <HAL_DMA_Start_IT+0x210>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d027      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a5c      	ldr	r2, [pc, #368]	@ (8003cc8 <HAL_DMA_Start_IT+0x214>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d022      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5a      	ldr	r2, [pc, #360]	@ (8003ccc <HAL_DMA_Start_IT+0x218>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01d      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a59      	ldr	r2, [pc, #356]	@ (8003cd0 <HAL_DMA_Start_IT+0x21c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a57      	ldr	r2, [pc, #348]	@ (8003cd4 <HAL_DMA_Start_IT+0x220>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a56      	ldr	r2, [pc, #344]	@ (8003cd8 <HAL_DMA_Start_IT+0x224>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a54      	ldr	r2, [pc, #336]	@ (8003cdc <HAL_DMA_Start_IT+0x228>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a53      	ldr	r2, [pc, #332]	@ (8003ce0 <HAL_DMA_Start_IT+0x22c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_DMA_Start_IT+0xee>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a51      	ldr	r2, [pc, #324]	@ (8003ce4 <HAL_DMA_Start_IT+0x230>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d108      	bne.n	8003bb4 <HAL_DMA_Start_IT+0x100>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e007      	b.n	8003bc4 <HAL_DMA_Start_IT+0x110>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f001 fea2 	bl	8005914 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a34      	ldr	r2, [pc, #208]	@ (8003ca8 <HAL_DMA_Start_IT+0x1f4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d04a      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a33      	ldr	r2, [pc, #204]	@ (8003cac <HAL_DMA_Start_IT+0x1f8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d045      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a31      	ldr	r2, [pc, #196]	@ (8003cb0 <HAL_DMA_Start_IT+0x1fc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d040      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a30      	ldr	r2, [pc, #192]	@ (8003cb4 <HAL_DMA_Start_IT+0x200>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d03b      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb8 <HAL_DMA_Start_IT+0x204>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d036      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2d      	ldr	r2, [pc, #180]	@ (8003cbc <HAL_DMA_Start_IT+0x208>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d031      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc0 <HAL_DMA_Start_IT+0x20c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d02c      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc4 <HAL_DMA_Start_IT+0x210>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d027      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a28      	ldr	r2, [pc, #160]	@ (8003cc8 <HAL_DMA_Start_IT+0x214>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d022      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a27      	ldr	r2, [pc, #156]	@ (8003ccc <HAL_DMA_Start_IT+0x218>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d01d      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a25      	ldr	r2, [pc, #148]	@ (8003cd0 <HAL_DMA_Start_IT+0x21c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d018      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a24      	ldr	r2, [pc, #144]	@ (8003cd4 <HAL_DMA_Start_IT+0x220>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a22      	ldr	r2, [pc, #136]	@ (8003cd8 <HAL_DMA_Start_IT+0x224>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00e      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a21      	ldr	r2, [pc, #132]	@ (8003cdc <HAL_DMA_Start_IT+0x228>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d009      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce0 <HAL_DMA_Start_IT+0x22c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <HAL_DMA_Start_IT+0x1bc>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce4 <HAL_DMA_Start_IT+0x230>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <HAL_DMA_Start_IT+0x1c0>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_DMA_Start_IT+0x1c2>
 8003c74:	2300      	movs	r3, #0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d036      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 021e 	bic.w	r2, r3, #30
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0216 	orr.w	r2, r2, #22
 8003c8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d03e      	beq.n	8003d14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0208 	orr.w	r2, r2, #8
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	e035      	b.n	8003d14 <HAL_DMA_Start_IT+0x260>
 8003ca8:	40020010 	.word	0x40020010
 8003cac:	40020028 	.word	0x40020028
 8003cb0:	40020040 	.word	0x40020040
 8003cb4:	40020058 	.word	0x40020058
 8003cb8:	40020070 	.word	0x40020070
 8003cbc:	40020088 	.word	0x40020088
 8003cc0:	400200a0 	.word	0x400200a0
 8003cc4:	400200b8 	.word	0x400200b8
 8003cc8:	40020410 	.word	0x40020410
 8003ccc:	40020428 	.word	0x40020428
 8003cd0:	40020440 	.word	0x40020440
 8003cd4:	40020458 	.word	0x40020458
 8003cd8:	40020470 	.word	0x40020470
 8003cdc:	40020488 	.word	0x40020488
 8003ce0:	400204a0 	.word	0x400204a0
 8003ce4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 020e 	bic.w	r2, r3, #14
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 020a 	orr.w	r2, r2, #10
 8003cfa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0204 	orr.w	r2, r2, #4
 8003d12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a83      	ldr	r2, [pc, #524]	@ (8003f28 <HAL_DMA_Start_IT+0x474>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d072      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a82      	ldr	r2, [pc, #520]	@ (8003f2c <HAL_DMA_Start_IT+0x478>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d06d      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a80      	ldr	r2, [pc, #512]	@ (8003f30 <HAL_DMA_Start_IT+0x47c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d068      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7f      	ldr	r2, [pc, #508]	@ (8003f34 <HAL_DMA_Start_IT+0x480>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d063      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7d      	ldr	r2, [pc, #500]	@ (8003f38 <HAL_DMA_Start_IT+0x484>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d05e      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f3c <HAL_DMA_Start_IT+0x488>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d059      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7a      	ldr	r2, [pc, #488]	@ (8003f40 <HAL_DMA_Start_IT+0x48c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d054      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a79      	ldr	r2, [pc, #484]	@ (8003f44 <HAL_DMA_Start_IT+0x490>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d04f      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a77      	ldr	r2, [pc, #476]	@ (8003f48 <HAL_DMA_Start_IT+0x494>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d04a      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <HAL_DMA_Start_IT+0x498>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d045      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a74      	ldr	r2, [pc, #464]	@ (8003f50 <HAL_DMA_Start_IT+0x49c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d040      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	@ (8003f54 <HAL_DMA_Start_IT+0x4a0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d03b      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a71      	ldr	r2, [pc, #452]	@ (8003f58 <HAL_DMA_Start_IT+0x4a4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d036      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a70      	ldr	r2, [pc, #448]	@ (8003f5c <HAL_DMA_Start_IT+0x4a8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d031      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_DMA_Start_IT+0x4ac>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02c      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6d      	ldr	r2, [pc, #436]	@ (8003f64 <HAL_DMA_Start_IT+0x4b0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d027      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f68 <HAL_DMA_Start_IT+0x4b4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d022      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f6c <HAL_DMA_Start_IT+0x4b8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01d      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a68      	ldr	r2, [pc, #416]	@ (8003f70 <HAL_DMA_Start_IT+0x4bc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d018      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a67      	ldr	r2, [pc, #412]	@ (8003f74 <HAL_DMA_Start_IT+0x4c0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a65      	ldr	r2, [pc, #404]	@ (8003f78 <HAL_DMA_Start_IT+0x4c4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a64      	ldr	r2, [pc, #400]	@ (8003f7c <HAL_DMA_Start_IT+0x4c8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a62      	ldr	r2, [pc, #392]	@ (8003f80 <HAL_DMA_Start_IT+0x4cc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_DMA_Start_IT+0x350>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a61      	ldr	r2, [pc, #388]	@ (8003f84 <HAL_DMA_Start_IT+0x4d0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <HAL_DMA_Start_IT+0x354>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_DMA_Start_IT+0x356>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01a      	beq.n	8003e44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a37      	ldr	r2, [pc, #220]	@ (8003f28 <HAL_DMA_Start_IT+0x474>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d04a      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a36      	ldr	r2, [pc, #216]	@ (8003f2c <HAL_DMA_Start_IT+0x478>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d045      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a34      	ldr	r2, [pc, #208]	@ (8003f30 <HAL_DMA_Start_IT+0x47c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d040      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a33      	ldr	r2, [pc, #204]	@ (8003f34 <HAL_DMA_Start_IT+0x480>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d03b      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a31      	ldr	r2, [pc, #196]	@ (8003f38 <HAL_DMA_Start_IT+0x484>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d036      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <HAL_DMA_Start_IT+0x488>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d031      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2e      	ldr	r2, [pc, #184]	@ (8003f40 <HAL_DMA_Start_IT+0x48c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d02c      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f44 <HAL_DMA_Start_IT+0x490>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d027      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2b      	ldr	r2, [pc, #172]	@ (8003f48 <HAL_DMA_Start_IT+0x494>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d022      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f4c <HAL_DMA_Start_IT+0x498>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d01d      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a28      	ldr	r2, [pc, #160]	@ (8003f50 <HAL_DMA_Start_IT+0x49c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d018      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a27      	ldr	r2, [pc, #156]	@ (8003f54 <HAL_DMA_Start_IT+0x4a0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a25      	ldr	r2, [pc, #148]	@ (8003f58 <HAL_DMA_Start_IT+0x4a4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00e      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a24      	ldr	r2, [pc, #144]	@ (8003f5c <HAL_DMA_Start_IT+0x4a8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a22      	ldr	r2, [pc, #136]	@ (8003f60 <HAL_DMA_Start_IT+0x4ac>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_DMA_Start_IT+0x430>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <HAL_DMA_Start_IT+0x4b0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d108      	bne.n	8003ef6 <HAL_DMA_Start_IT+0x442>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e012      	b.n	8003f1c <HAL_DMA_Start_IT+0x468>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e009      	b.n	8003f1c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40020010 	.word	0x40020010
 8003f2c:	40020028 	.word	0x40020028
 8003f30:	40020040 	.word	0x40020040
 8003f34:	40020058 	.word	0x40020058
 8003f38:	40020070 	.word	0x40020070
 8003f3c:	40020088 	.word	0x40020088
 8003f40:	400200a0 	.word	0x400200a0
 8003f44:	400200b8 	.word	0x400200b8
 8003f48:	40020410 	.word	0x40020410
 8003f4c:	40020428 	.word	0x40020428
 8003f50:	40020440 	.word	0x40020440
 8003f54:	40020458 	.word	0x40020458
 8003f58:	40020470 	.word	0x40020470
 8003f5c:	40020488 	.word	0x40020488
 8003f60:	400204a0 	.word	0x400204a0
 8003f64:	400204b8 	.word	0x400204b8
 8003f68:	58025408 	.word	0x58025408
 8003f6c:	5802541c 	.word	0x5802541c
 8003f70:	58025430 	.word	0x58025430
 8003f74:	58025444 	.word	0x58025444
 8003f78:	58025458 	.word	0x58025458
 8003f7c:	5802546c 	.word	0x5802546c
 8003f80:	58025480 	.word	0x58025480
 8003f84:	58025494 	.word	0x58025494

08003f88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003f90:	f7ff f84a 	bl	8003028 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e2dc      	b.n	800455a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d008      	beq.n	8003fbe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2280      	movs	r2, #128	@ 0x80
 8003fb0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e2cd      	b.n	800455a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a76      	ldr	r2, [pc, #472]	@ (800419c <HAL_DMA_Abort+0x214>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d04a      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a74      	ldr	r2, [pc, #464]	@ (80041a0 <HAL_DMA_Abort+0x218>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d045      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a73      	ldr	r2, [pc, #460]	@ (80041a4 <HAL_DMA_Abort+0x21c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d040      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a71      	ldr	r2, [pc, #452]	@ (80041a8 <HAL_DMA_Abort+0x220>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d03b      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a70      	ldr	r2, [pc, #448]	@ (80041ac <HAL_DMA_Abort+0x224>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d036      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80041b0 <HAL_DMA_Abort+0x228>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d031      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6d      	ldr	r2, [pc, #436]	@ (80041b4 <HAL_DMA_Abort+0x22c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d02c      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6b      	ldr	r2, [pc, #428]	@ (80041b8 <HAL_DMA_Abort+0x230>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d027      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6a      	ldr	r2, [pc, #424]	@ (80041bc <HAL_DMA_Abort+0x234>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a68      	ldr	r2, [pc, #416]	@ (80041c0 <HAL_DMA_Abort+0x238>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01d      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a67      	ldr	r2, [pc, #412]	@ (80041c4 <HAL_DMA_Abort+0x23c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a65      	ldr	r2, [pc, #404]	@ (80041c8 <HAL_DMA_Abort+0x240>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a64      	ldr	r2, [pc, #400]	@ (80041cc <HAL_DMA_Abort+0x244>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a62      	ldr	r2, [pc, #392]	@ (80041d0 <HAL_DMA_Abort+0x248>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a61      	ldr	r2, [pc, #388]	@ (80041d4 <HAL_DMA_Abort+0x24c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_DMA_Abort+0xd6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a5f      	ldr	r2, [pc, #380]	@ (80041d8 <HAL_DMA_Abort+0x250>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d101      	bne.n	8004062 <HAL_DMA_Abort+0xda>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_DMA_Abort+0xdc>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 021e 	bic.w	r2, r2, #30
 8004076:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004086:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e00a      	b.n	80040a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 020e 	bic.w	r2, r2, #14
 800409e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a3c      	ldr	r2, [pc, #240]	@ (800419c <HAL_DMA_Abort+0x214>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d072      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a3a      	ldr	r2, [pc, #232]	@ (80041a0 <HAL_DMA_Abort+0x218>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d06d      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a39      	ldr	r2, [pc, #228]	@ (80041a4 <HAL_DMA_Abort+0x21c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d068      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a37      	ldr	r2, [pc, #220]	@ (80041a8 <HAL_DMA_Abort+0x220>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d063      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a36      	ldr	r2, [pc, #216]	@ (80041ac <HAL_DMA_Abort+0x224>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d05e      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a34      	ldr	r2, [pc, #208]	@ (80041b0 <HAL_DMA_Abort+0x228>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d059      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a33      	ldr	r2, [pc, #204]	@ (80041b4 <HAL_DMA_Abort+0x22c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d054      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a31      	ldr	r2, [pc, #196]	@ (80041b8 <HAL_DMA_Abort+0x230>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d04f      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a30      	ldr	r2, [pc, #192]	@ (80041bc <HAL_DMA_Abort+0x234>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d04a      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2e      	ldr	r2, [pc, #184]	@ (80041c0 <HAL_DMA_Abort+0x238>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d045      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2d      	ldr	r2, [pc, #180]	@ (80041c4 <HAL_DMA_Abort+0x23c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d040      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2b      	ldr	r2, [pc, #172]	@ (80041c8 <HAL_DMA_Abort+0x240>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03b      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2a      	ldr	r2, [pc, #168]	@ (80041cc <HAL_DMA_Abort+0x244>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d036      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a28      	ldr	r2, [pc, #160]	@ (80041d0 <HAL_DMA_Abort+0x248>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d031      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a27      	ldr	r2, [pc, #156]	@ (80041d4 <HAL_DMA_Abort+0x24c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d02c      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a25      	ldr	r2, [pc, #148]	@ (80041d8 <HAL_DMA_Abort+0x250>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d027      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a24      	ldr	r2, [pc, #144]	@ (80041dc <HAL_DMA_Abort+0x254>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a22      	ldr	r2, [pc, #136]	@ (80041e0 <HAL_DMA_Abort+0x258>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01d      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <HAL_DMA_Abort+0x25c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1f      	ldr	r2, [pc, #124]	@ (80041e8 <HAL_DMA_Abort+0x260>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1e      	ldr	r2, [pc, #120]	@ (80041ec <HAL_DMA_Abort+0x264>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1c      	ldr	r2, [pc, #112]	@ (80041f0 <HAL_DMA_Abort+0x268>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1b      	ldr	r2, [pc, #108]	@ (80041f4 <HAL_DMA_Abort+0x26c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_Abort+0x20e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a19      	ldr	r2, [pc, #100]	@ (80041f8 <HAL_DMA_Abort+0x270>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d132      	bne.n	80041fc <HAL_DMA_Abort+0x274>
 8004196:	2301      	movs	r3, #1
 8004198:	e031      	b.n	80041fe <HAL_DMA_Abort+0x276>
 800419a:	bf00      	nop
 800419c:	40020010 	.word	0x40020010
 80041a0:	40020028 	.word	0x40020028
 80041a4:	40020040 	.word	0x40020040
 80041a8:	40020058 	.word	0x40020058
 80041ac:	40020070 	.word	0x40020070
 80041b0:	40020088 	.word	0x40020088
 80041b4:	400200a0 	.word	0x400200a0
 80041b8:	400200b8 	.word	0x400200b8
 80041bc:	40020410 	.word	0x40020410
 80041c0:	40020428 	.word	0x40020428
 80041c4:	40020440 	.word	0x40020440
 80041c8:	40020458 	.word	0x40020458
 80041cc:	40020470 	.word	0x40020470
 80041d0:	40020488 	.word	0x40020488
 80041d4:	400204a0 	.word	0x400204a0
 80041d8:	400204b8 	.word	0x400204b8
 80041dc:	58025408 	.word	0x58025408
 80041e0:	5802541c 	.word	0x5802541c
 80041e4:	58025430 	.word	0x58025430
 80041e8:	58025444 	.word	0x58025444
 80041ec:	58025458 	.word	0x58025458
 80041f0:	5802546c 	.word	0x5802546c
 80041f4:	58025480 	.word	0x58025480
 80041f8:	58025494 	.word	0x58025494
 80041fc:	2300      	movs	r3, #0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004210:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a6d      	ldr	r2, [pc, #436]	@ (80043cc <HAL_DMA_Abort+0x444>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d04a      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6b      	ldr	r2, [pc, #428]	@ (80043d0 <HAL_DMA_Abort+0x448>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d045      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6a      	ldr	r2, [pc, #424]	@ (80043d4 <HAL_DMA_Abort+0x44c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d040      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a68      	ldr	r2, [pc, #416]	@ (80043d8 <HAL_DMA_Abort+0x450>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d03b      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a67      	ldr	r2, [pc, #412]	@ (80043dc <HAL_DMA_Abort+0x454>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d036      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a65      	ldr	r2, [pc, #404]	@ (80043e0 <HAL_DMA_Abort+0x458>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d031      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a64      	ldr	r2, [pc, #400]	@ (80043e4 <HAL_DMA_Abort+0x45c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d02c      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a62      	ldr	r2, [pc, #392]	@ (80043e8 <HAL_DMA_Abort+0x460>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d027      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a61      	ldr	r2, [pc, #388]	@ (80043ec <HAL_DMA_Abort+0x464>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d022      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a5f      	ldr	r2, [pc, #380]	@ (80043f0 <HAL_DMA_Abort+0x468>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01d      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a5e      	ldr	r2, [pc, #376]	@ (80043f4 <HAL_DMA_Abort+0x46c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5c      	ldr	r2, [pc, #368]	@ (80043f8 <HAL_DMA_Abort+0x470>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a5b      	ldr	r2, [pc, #364]	@ (80043fc <HAL_DMA_Abort+0x474>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a59      	ldr	r2, [pc, #356]	@ (8004400 <HAL_DMA_Abort+0x478>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a58      	ldr	r2, [pc, #352]	@ (8004404 <HAL_DMA_Abort+0x47c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_DMA_Abort+0x32a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a56      	ldr	r2, [pc, #344]	@ (8004408 <HAL_DMA_Abort+0x480>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <HAL_DMA_Abort+0x33c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e007      	b.n	80042d4 <HAL_DMA_Abort+0x34c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042d4:	e013      	b.n	80042fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042d6:	f7fe fea7 	bl	8003028 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d90c      	bls.n	80042fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2203      	movs	r2, #3
 80042ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e12d      	b.n	800455a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e5      	bne.n	80042d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2f      	ldr	r2, [pc, #188]	@ (80043cc <HAL_DMA_Abort+0x444>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d04a      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2d      	ldr	r2, [pc, #180]	@ (80043d0 <HAL_DMA_Abort+0x448>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d045      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a2c      	ldr	r2, [pc, #176]	@ (80043d4 <HAL_DMA_Abort+0x44c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d040      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2a      	ldr	r2, [pc, #168]	@ (80043d8 <HAL_DMA_Abort+0x450>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d03b      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a29      	ldr	r2, [pc, #164]	@ (80043dc <HAL_DMA_Abort+0x454>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d036      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a27      	ldr	r2, [pc, #156]	@ (80043e0 <HAL_DMA_Abort+0x458>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d031      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a26      	ldr	r2, [pc, #152]	@ (80043e4 <HAL_DMA_Abort+0x45c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d02c      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a24      	ldr	r2, [pc, #144]	@ (80043e8 <HAL_DMA_Abort+0x460>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d027      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <HAL_DMA_Abort+0x464>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d022      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <HAL_DMA_Abort+0x468>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01d      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a20      	ldr	r2, [pc, #128]	@ (80043f4 <HAL_DMA_Abort+0x46c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d018      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <HAL_DMA_Abort+0x470>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1d      	ldr	r2, [pc, #116]	@ (80043fc <HAL_DMA_Abort+0x474>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <HAL_DMA_Abort+0x478>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1a      	ldr	r2, [pc, #104]	@ (8004404 <HAL_DMA_Abort+0x47c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_DMA_Abort+0x422>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a18      	ldr	r2, [pc, #96]	@ (8004408 <HAL_DMA_Abort+0x480>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_DMA_Abort+0x426>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_DMA_Abort+0x428>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02b      	beq.n	800440c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	223f      	movs	r2, #63	@ 0x3f
 80043c4:	409a      	lsls	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	609a      	str	r2, [r3, #8]
 80043ca:	e02a      	b.n	8004422 <HAL_DMA_Abort+0x49a>
 80043cc:	40020010 	.word	0x40020010
 80043d0:	40020028 	.word	0x40020028
 80043d4:	40020040 	.word	0x40020040
 80043d8:	40020058 	.word	0x40020058
 80043dc:	40020070 	.word	0x40020070
 80043e0:	40020088 	.word	0x40020088
 80043e4:	400200a0 	.word	0x400200a0
 80043e8:	400200b8 	.word	0x400200b8
 80043ec:	40020410 	.word	0x40020410
 80043f0:	40020428 	.word	0x40020428
 80043f4:	40020440 	.word	0x40020440
 80043f8:	40020458 	.word	0x40020458
 80043fc:	40020470 	.word	0x40020470
 8004400:	40020488 	.word	0x40020488
 8004404:	400204a0 	.word	0x400204a0
 8004408:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004410:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2201      	movs	r2, #1
 800441c:	409a      	lsls	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a4f      	ldr	r2, [pc, #316]	@ (8004564 <HAL_DMA_Abort+0x5dc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d072      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a4d      	ldr	r2, [pc, #308]	@ (8004568 <HAL_DMA_Abort+0x5e0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d06d      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a4c      	ldr	r2, [pc, #304]	@ (800456c <HAL_DMA_Abort+0x5e4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d068      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a4a      	ldr	r2, [pc, #296]	@ (8004570 <HAL_DMA_Abort+0x5e8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d063      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a49      	ldr	r2, [pc, #292]	@ (8004574 <HAL_DMA_Abort+0x5ec>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d05e      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a47      	ldr	r2, [pc, #284]	@ (8004578 <HAL_DMA_Abort+0x5f0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d059      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a46      	ldr	r2, [pc, #280]	@ (800457c <HAL_DMA_Abort+0x5f4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d054      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a44      	ldr	r2, [pc, #272]	@ (8004580 <HAL_DMA_Abort+0x5f8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d04f      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a43      	ldr	r2, [pc, #268]	@ (8004584 <HAL_DMA_Abort+0x5fc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d04a      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a41      	ldr	r2, [pc, #260]	@ (8004588 <HAL_DMA_Abort+0x600>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d045      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a40      	ldr	r2, [pc, #256]	@ (800458c <HAL_DMA_Abort+0x604>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d040      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3e      	ldr	r2, [pc, #248]	@ (8004590 <HAL_DMA_Abort+0x608>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d03b      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a3d      	ldr	r2, [pc, #244]	@ (8004594 <HAL_DMA_Abort+0x60c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d036      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004598 <HAL_DMA_Abort+0x610>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d031      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3a      	ldr	r2, [pc, #232]	@ (800459c <HAL_DMA_Abort+0x614>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d02c      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a38      	ldr	r2, [pc, #224]	@ (80045a0 <HAL_DMA_Abort+0x618>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d027      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a37      	ldr	r2, [pc, #220]	@ (80045a4 <HAL_DMA_Abort+0x61c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d022      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a35      	ldr	r2, [pc, #212]	@ (80045a8 <HAL_DMA_Abort+0x620>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d01d      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a34      	ldr	r2, [pc, #208]	@ (80045ac <HAL_DMA_Abort+0x624>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d018      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a32      	ldr	r2, [pc, #200]	@ (80045b0 <HAL_DMA_Abort+0x628>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a31      	ldr	r2, [pc, #196]	@ (80045b4 <HAL_DMA_Abort+0x62c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00e      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a2f      	ldr	r2, [pc, #188]	@ (80045b8 <HAL_DMA_Abort+0x630>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2e      	ldr	r2, [pc, #184]	@ (80045bc <HAL_DMA_Abort+0x634>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_DMA_Abort+0x58a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2c      	ldr	r2, [pc, #176]	@ (80045c0 <HAL_DMA_Abort+0x638>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d101      	bne.n	8004516 <HAL_DMA_Abort+0x58e>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <HAL_DMA_Abort+0x590>
 8004516:	2300      	movs	r3, #0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d015      	beq.n	8004548 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004524:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800453c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004546:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40020010 	.word	0x40020010
 8004568:	40020028 	.word	0x40020028
 800456c:	40020040 	.word	0x40020040
 8004570:	40020058 	.word	0x40020058
 8004574:	40020070 	.word	0x40020070
 8004578:	40020088 	.word	0x40020088
 800457c:	400200a0 	.word	0x400200a0
 8004580:	400200b8 	.word	0x400200b8
 8004584:	40020410 	.word	0x40020410
 8004588:	40020428 	.word	0x40020428
 800458c:	40020440 	.word	0x40020440
 8004590:	40020458 	.word	0x40020458
 8004594:	40020470 	.word	0x40020470
 8004598:	40020488 	.word	0x40020488
 800459c:	400204a0 	.word	0x400204a0
 80045a0:	400204b8 	.word	0x400204b8
 80045a4:	58025408 	.word	0x58025408
 80045a8:	5802541c 	.word	0x5802541c
 80045ac:	58025430 	.word	0x58025430
 80045b0:	58025444 	.word	0x58025444
 80045b4:	58025458 	.word	0x58025458
 80045b8:	5802546c 	.word	0x5802546c
 80045bc:	58025480 	.word	0x58025480
 80045c0:	58025494 	.word	0x58025494

080045c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e237      	b.n	8004a46 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d004      	beq.n	80045ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2280      	movs	r2, #128	@ 0x80
 80045e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e22c      	b.n	8004a46 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5c      	ldr	r2, [pc, #368]	@ (8004764 <HAL_DMA_Abort_IT+0x1a0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d04a      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004768 <HAL_DMA_Abort_IT+0x1a4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d045      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a59      	ldr	r2, [pc, #356]	@ (800476c <HAL_DMA_Abort_IT+0x1a8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d040      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a58      	ldr	r2, [pc, #352]	@ (8004770 <HAL_DMA_Abort_IT+0x1ac>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d03b      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a56      	ldr	r2, [pc, #344]	@ (8004774 <HAL_DMA_Abort_IT+0x1b0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d036      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a55      	ldr	r2, [pc, #340]	@ (8004778 <HAL_DMA_Abort_IT+0x1b4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d031      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a53      	ldr	r2, [pc, #332]	@ (800477c <HAL_DMA_Abort_IT+0x1b8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d02c      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a52      	ldr	r2, [pc, #328]	@ (8004780 <HAL_DMA_Abort_IT+0x1bc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d027      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a50      	ldr	r2, [pc, #320]	@ (8004784 <HAL_DMA_Abort_IT+0x1c0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d022      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a4f      	ldr	r2, [pc, #316]	@ (8004788 <HAL_DMA_Abort_IT+0x1c4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d01d      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a4d      	ldr	r2, [pc, #308]	@ (800478c <HAL_DMA_Abort_IT+0x1c8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d018      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a4c      	ldr	r2, [pc, #304]	@ (8004790 <HAL_DMA_Abort_IT+0x1cc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a4a      	ldr	r2, [pc, #296]	@ (8004794 <HAL_DMA_Abort_IT+0x1d0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a49      	ldr	r2, [pc, #292]	@ (8004798 <HAL_DMA_Abort_IT+0x1d4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d009      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a47      	ldr	r2, [pc, #284]	@ (800479c <HAL_DMA_Abort_IT+0x1d8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_DMA_Abort_IT+0xc8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a46      	ldr	r2, [pc, #280]	@ (80047a0 <HAL_DMA_Abort_IT+0x1dc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d101      	bne.n	8004690 <HAL_DMA_Abort_IT+0xcc>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <HAL_DMA_Abort_IT+0xce>
 8004690:	2300      	movs	r3, #0
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8086 	beq.w	80047a4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2204      	movs	r2, #4
 800469c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004764 <HAL_DMA_Abort_IT+0x1a0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d04a      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004768 <HAL_DMA_Abort_IT+0x1a4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d045      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a2c      	ldr	r2, [pc, #176]	@ (800476c <HAL_DMA_Abort_IT+0x1a8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d040      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004770 <HAL_DMA_Abort_IT+0x1ac>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d03b      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <HAL_DMA_Abort_IT+0x1b0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d036      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a28      	ldr	r2, [pc, #160]	@ (8004778 <HAL_DMA_Abort_IT+0x1b4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d031      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a26      	ldr	r2, [pc, #152]	@ (800477c <HAL_DMA_Abort_IT+0x1b8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d02c      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a25      	ldr	r2, [pc, #148]	@ (8004780 <HAL_DMA_Abort_IT+0x1bc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d027      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a23      	ldr	r2, [pc, #140]	@ (8004784 <HAL_DMA_Abort_IT+0x1c0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d022      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a22      	ldr	r2, [pc, #136]	@ (8004788 <HAL_DMA_Abort_IT+0x1c4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d01d      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a20      	ldr	r2, [pc, #128]	@ (800478c <HAL_DMA_Abort_IT+0x1c8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d018      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1f      	ldr	r2, [pc, #124]	@ (8004790 <HAL_DMA_Abort_IT+0x1cc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d013      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1d      	ldr	r2, [pc, #116]	@ (8004794 <HAL_DMA_Abort_IT+0x1d0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00e      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1c      	ldr	r2, [pc, #112]	@ (8004798 <HAL_DMA_Abort_IT+0x1d4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d009      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1a      	ldr	r2, [pc, #104]	@ (800479c <HAL_DMA_Abort_IT+0x1d8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_DMA_Abort_IT+0x17c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a19      	ldr	r2, [pc, #100]	@ (80047a0 <HAL_DMA_Abort_IT+0x1dc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <HAL_DMA_Abort_IT+0x18e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e178      	b.n	8004a44 <HAL_DMA_Abort_IT+0x480>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e16f      	b.n	8004a44 <HAL_DMA_Abort_IT+0x480>
 8004764:	40020010 	.word	0x40020010
 8004768:	40020028 	.word	0x40020028
 800476c:	40020040 	.word	0x40020040
 8004770:	40020058 	.word	0x40020058
 8004774:	40020070 	.word	0x40020070
 8004778:	40020088 	.word	0x40020088
 800477c:	400200a0 	.word	0x400200a0
 8004780:	400200b8 	.word	0x400200b8
 8004784:	40020410 	.word	0x40020410
 8004788:	40020428 	.word	0x40020428
 800478c:	40020440 	.word	0x40020440
 8004790:	40020458 	.word	0x40020458
 8004794:	40020470 	.word	0x40020470
 8004798:	40020488 	.word	0x40020488
 800479c:	400204a0 	.word	0x400204a0
 80047a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 020e 	bic.w	r2, r2, #14
 80047b2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a6c      	ldr	r2, [pc, #432]	@ (800496c <HAL_DMA_Abort_IT+0x3a8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d04a      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a6b      	ldr	r2, [pc, #428]	@ (8004970 <HAL_DMA_Abort_IT+0x3ac>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d045      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a69      	ldr	r2, [pc, #420]	@ (8004974 <HAL_DMA_Abort_IT+0x3b0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d040      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a68      	ldr	r2, [pc, #416]	@ (8004978 <HAL_DMA_Abort_IT+0x3b4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d03b      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a66      	ldr	r2, [pc, #408]	@ (800497c <HAL_DMA_Abort_IT+0x3b8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d036      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a65      	ldr	r2, [pc, #404]	@ (8004980 <HAL_DMA_Abort_IT+0x3bc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d031      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a63      	ldr	r2, [pc, #396]	@ (8004984 <HAL_DMA_Abort_IT+0x3c0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d02c      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a62      	ldr	r2, [pc, #392]	@ (8004988 <HAL_DMA_Abort_IT+0x3c4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d027      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a60      	ldr	r2, [pc, #384]	@ (800498c <HAL_DMA_Abort_IT+0x3c8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d022      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a5f      	ldr	r2, [pc, #380]	@ (8004990 <HAL_DMA_Abort_IT+0x3cc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d01d      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a5d      	ldr	r2, [pc, #372]	@ (8004994 <HAL_DMA_Abort_IT+0x3d0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a5c      	ldr	r2, [pc, #368]	@ (8004998 <HAL_DMA_Abort_IT+0x3d4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a5a      	ldr	r2, [pc, #360]	@ (800499c <HAL_DMA_Abort_IT+0x3d8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a59      	ldr	r2, [pc, #356]	@ (80049a0 <HAL_DMA_Abort_IT+0x3dc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a57      	ldr	r2, [pc, #348]	@ (80049a4 <HAL_DMA_Abort_IT+0x3e0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_DMA_Abort_IT+0x290>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a56      	ldr	r2, [pc, #344]	@ (80049a8 <HAL_DMA_Abort_IT+0x3e4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d108      	bne.n	8004866 <HAL_DMA_Abort_IT+0x2a2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e007      	b.n	8004876 <HAL_DMA_Abort_IT+0x2b2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3c      	ldr	r2, [pc, #240]	@ (800496c <HAL_DMA_Abort_IT+0x3a8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d072      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a3a      	ldr	r2, [pc, #232]	@ (8004970 <HAL_DMA_Abort_IT+0x3ac>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d06d      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a39      	ldr	r2, [pc, #228]	@ (8004974 <HAL_DMA_Abort_IT+0x3b0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d068      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a37      	ldr	r2, [pc, #220]	@ (8004978 <HAL_DMA_Abort_IT+0x3b4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d063      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a36      	ldr	r2, [pc, #216]	@ (800497c <HAL_DMA_Abort_IT+0x3b8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d05e      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a34      	ldr	r2, [pc, #208]	@ (8004980 <HAL_DMA_Abort_IT+0x3bc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d059      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a33      	ldr	r2, [pc, #204]	@ (8004984 <HAL_DMA_Abort_IT+0x3c0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d054      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a31      	ldr	r2, [pc, #196]	@ (8004988 <HAL_DMA_Abort_IT+0x3c4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d04f      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a30      	ldr	r2, [pc, #192]	@ (800498c <HAL_DMA_Abort_IT+0x3c8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d04a      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004990 <HAL_DMA_Abort_IT+0x3cc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d045      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2d      	ldr	r2, [pc, #180]	@ (8004994 <HAL_DMA_Abort_IT+0x3d0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d040      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004998 <HAL_DMA_Abort_IT+0x3d4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d03b      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a2a      	ldr	r2, [pc, #168]	@ (800499c <HAL_DMA_Abort_IT+0x3d8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d036      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a28      	ldr	r2, [pc, #160]	@ (80049a0 <HAL_DMA_Abort_IT+0x3dc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d031      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a27      	ldr	r2, [pc, #156]	@ (80049a4 <HAL_DMA_Abort_IT+0x3e0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d02c      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a25      	ldr	r2, [pc, #148]	@ (80049a8 <HAL_DMA_Abort_IT+0x3e4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d027      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a24      	ldr	r2, [pc, #144]	@ (80049ac <HAL_DMA_Abort_IT+0x3e8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d022      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a22      	ldr	r2, [pc, #136]	@ (80049b0 <HAL_DMA_Abort_IT+0x3ec>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01d      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a21      	ldr	r2, [pc, #132]	@ (80049b4 <HAL_DMA_Abort_IT+0x3f0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d018      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1f      	ldr	r2, [pc, #124]	@ (80049b8 <HAL_DMA_Abort_IT+0x3f4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1e      	ldr	r2, [pc, #120]	@ (80049bc <HAL_DMA_Abort_IT+0x3f8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00e      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1c      	ldr	r2, [pc, #112]	@ (80049c0 <HAL_DMA_Abort_IT+0x3fc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d009      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1b      	ldr	r2, [pc, #108]	@ (80049c4 <HAL_DMA_Abort_IT+0x400>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d004      	beq.n	8004966 <HAL_DMA_Abort_IT+0x3a2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a19      	ldr	r2, [pc, #100]	@ (80049c8 <HAL_DMA_Abort_IT+0x404>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d132      	bne.n	80049cc <HAL_DMA_Abort_IT+0x408>
 8004966:	2301      	movs	r3, #1
 8004968:	e031      	b.n	80049ce <HAL_DMA_Abort_IT+0x40a>
 800496a:	bf00      	nop
 800496c:	40020010 	.word	0x40020010
 8004970:	40020028 	.word	0x40020028
 8004974:	40020040 	.word	0x40020040
 8004978:	40020058 	.word	0x40020058
 800497c:	40020070 	.word	0x40020070
 8004980:	40020088 	.word	0x40020088
 8004984:	400200a0 	.word	0x400200a0
 8004988:	400200b8 	.word	0x400200b8
 800498c:	40020410 	.word	0x40020410
 8004990:	40020428 	.word	0x40020428
 8004994:	40020440 	.word	0x40020440
 8004998:	40020458 	.word	0x40020458
 800499c:	40020470 	.word	0x40020470
 80049a0:	40020488 	.word	0x40020488
 80049a4:	400204a0 	.word	0x400204a0
 80049a8:	400204b8 	.word	0x400204b8
 80049ac:	58025408 	.word	0x58025408
 80049b0:	5802541c 	.word	0x5802541c
 80049b4:	58025430 	.word	0x58025430
 80049b8:	58025444 	.word	0x58025444
 80049bc:	58025458 	.word	0x58025458
 80049c0:	5802546c 	.word	0x5802546c
 80049c4:	58025480 	.word	0x58025480
 80049c8:	58025494 	.word	0x58025494
 80049cc:	2300      	movs	r3, #0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d028      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	2201      	movs	r2, #1
 80049f2:	409a      	lsls	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00c      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop

08004a50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	@ 0x28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a5c:	4b67      	ldr	r3, [pc, #412]	@ (8004bfc <HAL_DMA_IRQHandler+0x1ac>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a67      	ldr	r2, [pc, #412]	@ (8004c00 <HAL_DMA_IRQHandler+0x1b0>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	0a9b      	lsrs	r3, r3, #10
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a5f      	ldr	r2, [pc, #380]	@ (8004c04 <HAL_DMA_IRQHandler+0x1b4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d04a      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a5d      	ldr	r2, [pc, #372]	@ (8004c08 <HAL_DMA_IRQHandler+0x1b8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d045      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8004c0c <HAL_DMA_IRQHandler+0x1bc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d040      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a5a      	ldr	r2, [pc, #360]	@ (8004c10 <HAL_DMA_IRQHandler+0x1c0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d03b      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a59      	ldr	r2, [pc, #356]	@ (8004c14 <HAL_DMA_IRQHandler+0x1c4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d036      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a57      	ldr	r2, [pc, #348]	@ (8004c18 <HAL_DMA_IRQHandler+0x1c8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d031      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a56      	ldr	r2, [pc, #344]	@ (8004c1c <HAL_DMA_IRQHandler+0x1cc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d02c      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a54      	ldr	r2, [pc, #336]	@ (8004c20 <HAL_DMA_IRQHandler+0x1d0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d027      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a53      	ldr	r2, [pc, #332]	@ (8004c24 <HAL_DMA_IRQHandler+0x1d4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a51      	ldr	r2, [pc, #324]	@ (8004c28 <HAL_DMA_IRQHandler+0x1d8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01d      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a50      	ldr	r2, [pc, #320]	@ (8004c2c <HAL_DMA_IRQHandler+0x1dc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a4e      	ldr	r2, [pc, #312]	@ (8004c30 <HAL_DMA_IRQHandler+0x1e0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a4d      	ldr	r2, [pc, #308]	@ (8004c34 <HAL_DMA_IRQHandler+0x1e4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a4b      	ldr	r2, [pc, #300]	@ (8004c38 <HAL_DMA_IRQHandler+0x1e8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a4a      	ldr	r2, [pc, #296]	@ (8004c3c <HAL_DMA_IRQHandler+0x1ec>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_DMA_IRQHandler+0xd2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a48      	ldr	r2, [pc, #288]	@ (8004c40 <HAL_DMA_IRQHandler+0x1f0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_DMA_IRQHandler+0xd6>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_DMA_IRQHandler+0xd8>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 842b 	beq.w	8005384 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	2208      	movs	r2, #8
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80a2 	beq.w	8004c88 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2e      	ldr	r2, [pc, #184]	@ (8004c04 <HAL_DMA_IRQHandler+0x1b4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d04a      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a2d      	ldr	r2, [pc, #180]	@ (8004c08 <HAL_DMA_IRQHandler+0x1b8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d045      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c0c <HAL_DMA_IRQHandler+0x1bc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d040      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a2a      	ldr	r2, [pc, #168]	@ (8004c10 <HAL_DMA_IRQHandler+0x1c0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d03b      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a28      	ldr	r2, [pc, #160]	@ (8004c14 <HAL_DMA_IRQHandler+0x1c4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d036      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a27      	ldr	r2, [pc, #156]	@ (8004c18 <HAL_DMA_IRQHandler+0x1c8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d031      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a25      	ldr	r2, [pc, #148]	@ (8004c1c <HAL_DMA_IRQHandler+0x1cc>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d02c      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a24      	ldr	r2, [pc, #144]	@ (8004c20 <HAL_DMA_IRQHandler+0x1d0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d027      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a22      	ldr	r2, [pc, #136]	@ (8004c24 <HAL_DMA_IRQHandler+0x1d4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d022      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a21      	ldr	r2, [pc, #132]	@ (8004c28 <HAL_DMA_IRQHandler+0x1d8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d01d      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1f      	ldr	r2, [pc, #124]	@ (8004c2c <HAL_DMA_IRQHandler+0x1dc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d018      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c30 <HAL_DMA_IRQHandler+0x1e0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c34 <HAL_DMA_IRQHandler+0x1e4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00e      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a1b      	ldr	r2, [pc, #108]	@ (8004c38 <HAL_DMA_IRQHandler+0x1e8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a19      	ldr	r2, [pc, #100]	@ (8004c3c <HAL_DMA_IRQHandler+0x1ec>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x194>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a18      	ldr	r2, [pc, #96]	@ (8004c40 <HAL_DMA_IRQHandler+0x1f0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d12f      	bne.n	8004c44 <HAL_DMA_IRQHandler+0x1f4>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e02e      	b.n	8004c58 <HAL_DMA_IRQHandler+0x208>
 8004bfa:	bf00      	nop
 8004bfc:	24000030 	.word	0x24000030
 8004c00:	1b4e81b5 	.word	0x1b4e81b5
 8004c04:	40020010 	.word	0x40020010
 8004c08:	40020028 	.word	0x40020028
 8004c0c:	40020040 	.word	0x40020040
 8004c10:	40020058 	.word	0x40020058
 8004c14:	40020070 	.word	0x40020070
 8004c18:	40020088 	.word	0x40020088
 8004c1c:	400200a0 	.word	0x400200a0
 8004c20:	400200b8 	.word	0x400200b8
 8004c24:	40020410 	.word	0x40020410
 8004c28:	40020428 	.word	0x40020428
 8004c2c:	40020440 	.word	0x40020440
 8004c30:	40020458 	.word	0x40020458
 8004c34:	40020470 	.word	0x40020470
 8004c38:	40020488 	.word	0x40020488
 8004c3c:	400204a0 	.word	0x400204a0
 8004c40:	400204b8 	.word	0x400204b8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bf14      	ite	ne
 8004c52:	2301      	movne	r3, #1
 8004c54:	2300      	moveq	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0204 	bic.w	r2, r2, #4
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2208      	movs	r2, #8
 8004c76:	409a      	lsls	r2, r3
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c80:	f043 0201 	orr.w	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	fa22 f303 	lsr.w	r3, r2, r3
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d06e      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a69      	ldr	r2, [pc, #420]	@ (8004e48 <HAL_DMA_IRQHandler+0x3f8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d04a      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a67      	ldr	r2, [pc, #412]	@ (8004e4c <HAL_DMA_IRQHandler+0x3fc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d045      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a66      	ldr	r2, [pc, #408]	@ (8004e50 <HAL_DMA_IRQHandler+0x400>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d040      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a64      	ldr	r2, [pc, #400]	@ (8004e54 <HAL_DMA_IRQHandler+0x404>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d03b      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a63      	ldr	r2, [pc, #396]	@ (8004e58 <HAL_DMA_IRQHandler+0x408>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d036      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a61      	ldr	r2, [pc, #388]	@ (8004e5c <HAL_DMA_IRQHandler+0x40c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d031      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a60      	ldr	r2, [pc, #384]	@ (8004e60 <HAL_DMA_IRQHandler+0x410>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d02c      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e64 <HAL_DMA_IRQHandler+0x414>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d027      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a5d      	ldr	r2, [pc, #372]	@ (8004e68 <HAL_DMA_IRQHandler+0x418>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a5b      	ldr	r2, [pc, #364]	@ (8004e6c <HAL_DMA_IRQHandler+0x41c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01d      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a5a      	ldr	r2, [pc, #360]	@ (8004e70 <HAL_DMA_IRQHandler+0x420>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a58      	ldr	r2, [pc, #352]	@ (8004e74 <HAL_DMA_IRQHandler+0x424>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a57      	ldr	r2, [pc, #348]	@ (8004e78 <HAL_DMA_IRQHandler+0x428>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a55      	ldr	r2, [pc, #340]	@ (8004e7c <HAL_DMA_IRQHandler+0x42c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a54      	ldr	r2, [pc, #336]	@ (8004e80 <HAL_DMA_IRQHandler+0x430>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_DMA_IRQHandler+0x2ee>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a52      	ldr	r2, [pc, #328]	@ (8004e84 <HAL_DMA_IRQHandler+0x434>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10a      	bne.n	8004d54 <HAL_DMA_IRQHandler+0x304>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e003      	b.n	8004d5c <HAL_DMA_IRQHandler+0x30c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	2201      	movs	r2, #1
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d74:	f043 0202 	orr.w	r2, r3, #2
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2204      	movs	r2, #4
 8004d86:	409a      	lsls	r2, r3
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 808f 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a2c      	ldr	r2, [pc, #176]	@ (8004e48 <HAL_DMA_IRQHandler+0x3f8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d04a      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e4c <HAL_DMA_IRQHandler+0x3fc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d045      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a29      	ldr	r2, [pc, #164]	@ (8004e50 <HAL_DMA_IRQHandler+0x400>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d040      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a27      	ldr	r2, [pc, #156]	@ (8004e54 <HAL_DMA_IRQHandler+0x404>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d03b      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a26      	ldr	r2, [pc, #152]	@ (8004e58 <HAL_DMA_IRQHandler+0x408>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d036      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a24      	ldr	r2, [pc, #144]	@ (8004e5c <HAL_DMA_IRQHandler+0x40c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d031      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a23      	ldr	r2, [pc, #140]	@ (8004e60 <HAL_DMA_IRQHandler+0x410>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d02c      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a21      	ldr	r2, [pc, #132]	@ (8004e64 <HAL_DMA_IRQHandler+0x414>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d027      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a20      	ldr	r2, [pc, #128]	@ (8004e68 <HAL_DMA_IRQHandler+0x418>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d022      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e6c <HAL_DMA_IRQHandler+0x41c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01d      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004e70 <HAL_DMA_IRQHandler+0x420>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d018      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1b      	ldr	r2, [pc, #108]	@ (8004e74 <HAL_DMA_IRQHandler+0x424>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004e78 <HAL_DMA_IRQHandler+0x428>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00e      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a18      	ldr	r2, [pc, #96]	@ (8004e7c <HAL_DMA_IRQHandler+0x42c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a17      	ldr	r2, [pc, #92]	@ (8004e80 <HAL_DMA_IRQHandler+0x430>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x3e2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	@ (8004e84 <HAL_DMA_IRQHandler+0x434>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d12a      	bne.n	8004e88 <HAL_DMA_IRQHandler+0x438>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e023      	b.n	8004e90 <HAL_DMA_IRQHandler+0x440>
 8004e48:	40020010 	.word	0x40020010
 8004e4c:	40020028 	.word	0x40020028
 8004e50:	40020040 	.word	0x40020040
 8004e54:	40020058 	.word	0x40020058
 8004e58:	40020070 	.word	0x40020070
 8004e5c:	40020088 	.word	0x40020088
 8004e60:	400200a0 	.word	0x400200a0
 8004e64:	400200b8 	.word	0x400200b8
 8004e68:	40020410 	.word	0x40020410
 8004e6c:	40020428 	.word	0x40020428
 8004e70:	40020440 	.word	0x40020440
 8004e74:	40020458 	.word	0x40020458
 8004e78:	40020470 	.word	0x40020470
 8004e7c:	40020488 	.word	0x40020488
 8004e80:	400204a0 	.word	0x400204a0
 8004e84:	400204b8 	.word	0x400204b8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00d      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	f043 0204 	orr.w	r2, r3, #4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2210      	movs	r2, #16
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80a6 	beq.w	8005012 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a85      	ldr	r2, [pc, #532]	@ (80050e0 <HAL_DMA_IRQHandler+0x690>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d04a      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a83      	ldr	r2, [pc, #524]	@ (80050e4 <HAL_DMA_IRQHandler+0x694>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d045      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a82      	ldr	r2, [pc, #520]	@ (80050e8 <HAL_DMA_IRQHandler+0x698>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d040      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a80      	ldr	r2, [pc, #512]	@ (80050ec <HAL_DMA_IRQHandler+0x69c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d03b      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a7f      	ldr	r2, [pc, #508]	@ (80050f0 <HAL_DMA_IRQHandler+0x6a0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d036      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a7d      	ldr	r2, [pc, #500]	@ (80050f4 <HAL_DMA_IRQHandler+0x6a4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d031      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7c      	ldr	r2, [pc, #496]	@ (80050f8 <HAL_DMA_IRQHandler+0x6a8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d02c      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a7a      	ldr	r2, [pc, #488]	@ (80050fc <HAL_DMA_IRQHandler+0x6ac>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d027      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a79      	ldr	r2, [pc, #484]	@ (8005100 <HAL_DMA_IRQHandler+0x6b0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a77      	ldr	r2, [pc, #476]	@ (8005104 <HAL_DMA_IRQHandler+0x6b4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a76      	ldr	r2, [pc, #472]	@ (8005108 <HAL_DMA_IRQHandler+0x6b8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a74      	ldr	r2, [pc, #464]	@ (800510c <HAL_DMA_IRQHandler+0x6bc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a73      	ldr	r2, [pc, #460]	@ (8005110 <HAL_DMA_IRQHandler+0x6c0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a71      	ldr	r2, [pc, #452]	@ (8005114 <HAL_DMA_IRQHandler+0x6c4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a70      	ldr	r2, [pc, #448]	@ (8005118 <HAL_DMA_IRQHandler+0x6c8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x516>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a6e      	ldr	r2, [pc, #440]	@ (800511c <HAL_DMA_IRQHandler+0x6cc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10a      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x52c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e009      	b.n	8004f90 <HAL_DMA_IRQHandler+0x540>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d03e      	beq.n	8005012 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d018      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d108      	bne.n	8004fd2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d024      	beq.n	8005012 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4798      	blx	r3
 8004fd0:	e01f      	b.n	8005012 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01b      	beq.n	8005012 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
 8004fe2:	e016      	b.n	8005012 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d107      	bne.n	8005002 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0208 	bic.w	r2, r2, #8
 8005000:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	2220      	movs	r2, #32
 800501c:	409a      	lsls	r2, r3
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	4013      	ands	r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8110 	beq.w	8005248 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2c      	ldr	r2, [pc, #176]	@ (80050e0 <HAL_DMA_IRQHandler+0x690>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d04a      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2b      	ldr	r2, [pc, #172]	@ (80050e4 <HAL_DMA_IRQHandler+0x694>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d045      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a29      	ldr	r2, [pc, #164]	@ (80050e8 <HAL_DMA_IRQHandler+0x698>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d040      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a28      	ldr	r2, [pc, #160]	@ (80050ec <HAL_DMA_IRQHandler+0x69c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d03b      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a26      	ldr	r2, [pc, #152]	@ (80050f0 <HAL_DMA_IRQHandler+0x6a0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d036      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a25      	ldr	r2, [pc, #148]	@ (80050f4 <HAL_DMA_IRQHandler+0x6a4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d031      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a23      	ldr	r2, [pc, #140]	@ (80050f8 <HAL_DMA_IRQHandler+0x6a8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d02c      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a22      	ldr	r2, [pc, #136]	@ (80050fc <HAL_DMA_IRQHandler+0x6ac>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d027      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a20      	ldr	r2, [pc, #128]	@ (8005100 <HAL_DMA_IRQHandler+0x6b0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d022      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1f      	ldr	r2, [pc, #124]	@ (8005104 <HAL_DMA_IRQHandler+0x6b4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d01d      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1d      	ldr	r2, [pc, #116]	@ (8005108 <HAL_DMA_IRQHandler+0x6b8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d018      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1c      	ldr	r2, [pc, #112]	@ (800510c <HAL_DMA_IRQHandler+0x6bc>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005110 <HAL_DMA_IRQHandler+0x6c0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00e      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a19      	ldr	r2, [pc, #100]	@ (8005114 <HAL_DMA_IRQHandler+0x6c4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a17      	ldr	r2, [pc, #92]	@ (8005118 <HAL_DMA_IRQHandler+0x6c8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x678>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a16      	ldr	r2, [pc, #88]	@ (800511c <HAL_DMA_IRQHandler+0x6cc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d12b      	bne.n	8005120 <HAL_DMA_IRQHandler+0x6d0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bf14      	ite	ne
 80050d6:	2301      	movne	r3, #1
 80050d8:	2300      	moveq	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	e02a      	b.n	8005134 <HAL_DMA_IRQHandler+0x6e4>
 80050de:	bf00      	nop
 80050e0:	40020010 	.word	0x40020010
 80050e4:	40020028 	.word	0x40020028
 80050e8:	40020040 	.word	0x40020040
 80050ec:	40020058 	.word	0x40020058
 80050f0:	40020070 	.word	0x40020070
 80050f4:	40020088 	.word	0x40020088
 80050f8:	400200a0 	.word	0x400200a0
 80050fc:	400200b8 	.word	0x400200b8
 8005100:	40020410 	.word	0x40020410
 8005104:	40020428 	.word	0x40020428
 8005108:	40020440 	.word	0x40020440
 800510c:	40020458 	.word	0x40020458
 8005110:	40020470 	.word	0x40020470
 8005114:	40020488 	.word	0x40020488
 8005118:	400204a0 	.word	0x400204a0
 800511c:	400204b8 	.word	0x400204b8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	bf14      	ite	ne
 800512e:	2301      	movne	r3, #1
 8005130:	2300      	moveq	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8087 	beq.w	8005248 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513e:	f003 031f 	and.w	r3, r3, #31
 8005142:	2220      	movs	r2, #32
 8005144:	409a      	lsls	r2, r3
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b04      	cmp	r3, #4
 8005154:	d139      	bne.n	80051ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0216 	bic.w	r2, r2, #22
 8005164:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005174:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <HAL_DMA_IRQHandler+0x736>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0208 	bic.w	r2, r2, #8
 8005194:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	223f      	movs	r2, #63	@ 0x3f
 80051a0:	409a      	lsls	r2, r3
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8382 	beq.w	80058c4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
          }
          return;
 80051c8:	e37c      	b.n	80058c4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d018      	beq.n	800520a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d108      	bne.n	80051f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02c      	beq.n	8005248 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
 80051f6:	e027      	b.n	8005248 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d023      	beq.n	8005248 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
 8005208:	e01e      	b.n	8005248 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10f      	bne.n	8005238 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0210 	bic.w	r2, r2, #16
 8005226:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 833e 	beq.w	80058ce <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8088 	beq.w	8005370 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2204      	movs	r2, #4
 8005264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a89      	ldr	r2, [pc, #548]	@ (8005494 <HAL_DMA_IRQHandler+0xa44>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d04a      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a88      	ldr	r2, [pc, #544]	@ (8005498 <HAL_DMA_IRQHandler+0xa48>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d045      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a86      	ldr	r2, [pc, #536]	@ (800549c <HAL_DMA_IRQHandler+0xa4c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d040      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a85      	ldr	r2, [pc, #532]	@ (80054a0 <HAL_DMA_IRQHandler+0xa50>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d03b      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a83      	ldr	r2, [pc, #524]	@ (80054a4 <HAL_DMA_IRQHandler+0xa54>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d036      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a82      	ldr	r2, [pc, #520]	@ (80054a8 <HAL_DMA_IRQHandler+0xa58>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d031      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a80      	ldr	r2, [pc, #512]	@ (80054ac <HAL_DMA_IRQHandler+0xa5c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d02c      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a7f      	ldr	r2, [pc, #508]	@ (80054b0 <HAL_DMA_IRQHandler+0xa60>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d027      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a7d      	ldr	r2, [pc, #500]	@ (80054b4 <HAL_DMA_IRQHandler+0xa64>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d022      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a7c      	ldr	r2, [pc, #496]	@ (80054b8 <HAL_DMA_IRQHandler+0xa68>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d01d      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a7a      	ldr	r2, [pc, #488]	@ (80054bc <HAL_DMA_IRQHandler+0xa6c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a79      	ldr	r2, [pc, #484]	@ (80054c0 <HAL_DMA_IRQHandler+0xa70>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a77      	ldr	r2, [pc, #476]	@ (80054c4 <HAL_DMA_IRQHandler+0xa74>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a76      	ldr	r2, [pc, #472]	@ (80054c8 <HAL_DMA_IRQHandler+0xa78>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a74      	ldr	r2, [pc, #464]	@ (80054cc <HAL_DMA_IRQHandler+0xa7c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_DMA_IRQHandler+0x8b8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a73      	ldr	r2, [pc, #460]	@ (80054d0 <HAL_DMA_IRQHandler+0xa80>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d108      	bne.n	800531a <HAL_DMA_IRQHandler+0x8ca>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e007      	b.n	800532a <HAL_DMA_IRQHandler+0x8da>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005332:	429a      	cmp	r2, r3
 8005334:	d307      	bcc.n	8005346 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f2      	bne.n	800532a <HAL_DMA_IRQHandler+0x8da>
 8005344:	e000      	b.n	8005348 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005346:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2203      	movs	r2, #3
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800535e:	e003      	b.n	8005368 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 82aa 	beq.w	80058ce <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
 8005382:	e2a4      	b.n	80058ce <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a52      	ldr	r2, [pc, #328]	@ (80054d4 <HAL_DMA_IRQHandler+0xa84>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d04a      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a51      	ldr	r2, [pc, #324]	@ (80054d8 <HAL_DMA_IRQHandler+0xa88>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d045      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a4f      	ldr	r2, [pc, #316]	@ (80054dc <HAL_DMA_IRQHandler+0xa8c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d040      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a4e      	ldr	r2, [pc, #312]	@ (80054e0 <HAL_DMA_IRQHandler+0xa90>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d03b      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a4c      	ldr	r2, [pc, #304]	@ (80054e4 <HAL_DMA_IRQHandler+0xa94>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d036      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a4b      	ldr	r2, [pc, #300]	@ (80054e8 <HAL_DMA_IRQHandler+0xa98>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d031      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a49      	ldr	r2, [pc, #292]	@ (80054ec <HAL_DMA_IRQHandler+0xa9c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02c      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a48      	ldr	r2, [pc, #288]	@ (80054f0 <HAL_DMA_IRQHandler+0xaa0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d027      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a46      	ldr	r2, [pc, #280]	@ (80054f4 <HAL_DMA_IRQHandler+0xaa4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d022      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a45      	ldr	r2, [pc, #276]	@ (80054f8 <HAL_DMA_IRQHandler+0xaa8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d01d      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a43      	ldr	r2, [pc, #268]	@ (80054fc <HAL_DMA_IRQHandler+0xaac>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d018      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a42      	ldr	r2, [pc, #264]	@ (8005500 <HAL_DMA_IRQHandler+0xab0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a40      	ldr	r2, [pc, #256]	@ (8005504 <HAL_DMA_IRQHandler+0xab4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00e      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a3f      	ldr	r2, [pc, #252]	@ (8005508 <HAL_DMA_IRQHandler+0xab8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a3d      	ldr	r2, [pc, #244]	@ (800550c <HAL_DMA_IRQHandler+0xabc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_DMA_IRQHandler+0x9d4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a3c      	ldr	r2, [pc, #240]	@ (8005510 <HAL_DMA_IRQHandler+0xac0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d101      	bne.n	8005428 <HAL_DMA_IRQHandler+0x9d8>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_DMA_IRQHandler+0x9da>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 824f 	beq.w	80058ce <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2204      	movs	r2, #4
 8005442:	409a      	lsls	r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80dd 	beq.w	8005608 <HAL_DMA_IRQHandler+0xbb8>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80d7 	beq.w	8005608 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	2204      	movs	r2, #4
 8005464:	409a      	lsls	r2, r3
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d059      	beq.n	8005528 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d14a      	bne.n	8005514 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8220 	beq.w	80058c8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005490:	e21a      	b.n	80058c8 <HAL_DMA_IRQHandler+0xe78>
 8005492:	bf00      	nop
 8005494:	40020010 	.word	0x40020010
 8005498:	40020028 	.word	0x40020028
 800549c:	40020040 	.word	0x40020040
 80054a0:	40020058 	.word	0x40020058
 80054a4:	40020070 	.word	0x40020070
 80054a8:	40020088 	.word	0x40020088
 80054ac:	400200a0 	.word	0x400200a0
 80054b0:	400200b8 	.word	0x400200b8
 80054b4:	40020410 	.word	0x40020410
 80054b8:	40020428 	.word	0x40020428
 80054bc:	40020440 	.word	0x40020440
 80054c0:	40020458 	.word	0x40020458
 80054c4:	40020470 	.word	0x40020470
 80054c8:	40020488 	.word	0x40020488
 80054cc:	400204a0 	.word	0x400204a0
 80054d0:	400204b8 	.word	0x400204b8
 80054d4:	48022c08 	.word	0x48022c08
 80054d8:	48022c1c 	.word	0x48022c1c
 80054dc:	48022c30 	.word	0x48022c30
 80054e0:	48022c44 	.word	0x48022c44
 80054e4:	48022c58 	.word	0x48022c58
 80054e8:	48022c6c 	.word	0x48022c6c
 80054ec:	48022c80 	.word	0x48022c80
 80054f0:	48022c94 	.word	0x48022c94
 80054f4:	58025408 	.word	0x58025408
 80054f8:	5802541c 	.word	0x5802541c
 80054fc:	58025430 	.word	0x58025430
 8005500:	58025444 	.word	0x58025444
 8005504:	58025458 	.word	0x58025458
 8005508:	5802546c 	.word	0x5802546c
 800550c:	58025480 	.word	0x58025480
 8005510:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 81d5 	beq.w	80058c8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005526:	e1cf      	b.n	80058c8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d160      	bne.n	80055f4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a7f      	ldr	r2, [pc, #508]	@ (8005734 <HAL_DMA_IRQHandler+0xce4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d04a      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a7d      	ldr	r2, [pc, #500]	@ (8005738 <HAL_DMA_IRQHandler+0xce8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d045      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a7c      	ldr	r2, [pc, #496]	@ (800573c <HAL_DMA_IRQHandler+0xcec>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d040      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a7a      	ldr	r2, [pc, #488]	@ (8005740 <HAL_DMA_IRQHandler+0xcf0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d03b      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a79      	ldr	r2, [pc, #484]	@ (8005744 <HAL_DMA_IRQHandler+0xcf4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d036      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a77      	ldr	r2, [pc, #476]	@ (8005748 <HAL_DMA_IRQHandler+0xcf8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d031      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a76      	ldr	r2, [pc, #472]	@ (800574c <HAL_DMA_IRQHandler+0xcfc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d02c      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a74      	ldr	r2, [pc, #464]	@ (8005750 <HAL_DMA_IRQHandler+0xd00>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d027      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a73      	ldr	r2, [pc, #460]	@ (8005754 <HAL_DMA_IRQHandler+0xd04>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a71      	ldr	r2, [pc, #452]	@ (8005758 <HAL_DMA_IRQHandler+0xd08>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01d      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a70      	ldr	r2, [pc, #448]	@ (800575c <HAL_DMA_IRQHandler+0xd0c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005760 <HAL_DMA_IRQHandler+0xd10>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a6d      	ldr	r2, [pc, #436]	@ (8005764 <HAL_DMA_IRQHandler+0xd14>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005768 <HAL_DMA_IRQHandler+0xd18>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a6a      	ldr	r2, [pc, #424]	@ (800576c <HAL_DMA_IRQHandler+0xd1c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xb82>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a68      	ldr	r2, [pc, #416]	@ (8005770 <HAL_DMA_IRQHandler+0xd20>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <HAL_DMA_IRQHandler+0xb94>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0208 	bic.w	r2, r2, #8
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e007      	b.n	80055f4 <HAL_DMA_IRQHandler+0xba4>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8165 	beq.w	80058c8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005606:	e15f      	b.n	80058c8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	2202      	movs	r2, #2
 8005612:	409a      	lsls	r2, r3
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80c5 	beq.w	80057a8 <HAL_DMA_IRQHandler+0xd58>
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80bf 	beq.w	80057a8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2202      	movs	r2, #2
 8005634:	409a      	lsls	r2, r3
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d018      	beq.n	8005676 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 813a 	beq.w	80058cc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005660:	e134      	b.n	80058cc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8130 	beq.w	80058cc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005674:	e12a      	b.n	80058cc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	f040 8089 	bne.w	8005794 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a2b      	ldr	r2, [pc, #172]	@ (8005734 <HAL_DMA_IRQHandler+0xce4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d04a      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a29      	ldr	r2, [pc, #164]	@ (8005738 <HAL_DMA_IRQHandler+0xce8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d045      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a28      	ldr	r2, [pc, #160]	@ (800573c <HAL_DMA_IRQHandler+0xcec>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d040      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a26      	ldr	r2, [pc, #152]	@ (8005740 <HAL_DMA_IRQHandler+0xcf0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d03b      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a25      	ldr	r2, [pc, #148]	@ (8005744 <HAL_DMA_IRQHandler+0xcf4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d036      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a23      	ldr	r2, [pc, #140]	@ (8005748 <HAL_DMA_IRQHandler+0xcf8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d031      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a22      	ldr	r2, [pc, #136]	@ (800574c <HAL_DMA_IRQHandler+0xcfc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d02c      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a20      	ldr	r2, [pc, #128]	@ (8005750 <HAL_DMA_IRQHandler+0xd00>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d027      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <HAL_DMA_IRQHandler+0xd04>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <HAL_DMA_IRQHandler+0xd08>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01d      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1c      	ldr	r2, [pc, #112]	@ (800575c <HAL_DMA_IRQHandler+0xd0c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005760 <HAL_DMA_IRQHandler+0xd10>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a19      	ldr	r2, [pc, #100]	@ (8005764 <HAL_DMA_IRQHandler+0xd14>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a17      	ldr	r2, [pc, #92]	@ (8005768 <HAL_DMA_IRQHandler+0xd18>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a16      	ldr	r2, [pc, #88]	@ (800576c <HAL_DMA_IRQHandler+0xd1c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_DMA_IRQHandler+0xcd2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a14      	ldr	r2, [pc, #80]	@ (8005770 <HAL_DMA_IRQHandler+0xd20>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d128      	bne.n	8005774 <HAL_DMA_IRQHandler+0xd24>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0214 	bic.w	r2, r2, #20
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e027      	b.n	8005784 <HAL_DMA_IRQHandler+0xd34>
 8005734:	40020010 	.word	0x40020010
 8005738:	40020028 	.word	0x40020028
 800573c:	40020040 	.word	0x40020040
 8005740:	40020058 	.word	0x40020058
 8005744:	40020070 	.word	0x40020070
 8005748:	40020088 	.word	0x40020088
 800574c:	400200a0 	.word	0x400200a0
 8005750:	400200b8 	.word	0x400200b8
 8005754:	40020410 	.word	0x40020410
 8005758:	40020428 	.word	0x40020428
 800575c:	40020440 	.word	0x40020440
 8005760:	40020458 	.word	0x40020458
 8005764:	40020470 	.word	0x40020470
 8005768:	40020488 	.word	0x40020488
 800576c:	400204a0 	.word	0x400204a0
 8005770:	400204b8 	.word	0x400204b8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 020a 	bic.w	r2, r2, #10
 8005782:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8097 	beq.w	80058cc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057a6:	e091      	b.n	80058cc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	2208      	movs	r2, #8
 80057b2:	409a      	lsls	r2, r3
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8088 	beq.w	80058ce <HAL_DMA_IRQHandler+0xe7e>
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 8082 	beq.w	80058ce <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a41      	ldr	r2, [pc, #260]	@ (80058d4 <HAL_DMA_IRQHandler+0xe84>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d04a      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a3f      	ldr	r2, [pc, #252]	@ (80058d8 <HAL_DMA_IRQHandler+0xe88>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d045      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a3e      	ldr	r2, [pc, #248]	@ (80058dc <HAL_DMA_IRQHandler+0xe8c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d040      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a3c      	ldr	r2, [pc, #240]	@ (80058e0 <HAL_DMA_IRQHandler+0xe90>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d03b      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a3b      	ldr	r2, [pc, #236]	@ (80058e4 <HAL_DMA_IRQHandler+0xe94>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d036      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a39      	ldr	r2, [pc, #228]	@ (80058e8 <HAL_DMA_IRQHandler+0xe98>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d031      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a38      	ldr	r2, [pc, #224]	@ (80058ec <HAL_DMA_IRQHandler+0xe9c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d02c      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a36      	ldr	r2, [pc, #216]	@ (80058f0 <HAL_DMA_IRQHandler+0xea0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d027      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a35      	ldr	r2, [pc, #212]	@ (80058f4 <HAL_DMA_IRQHandler+0xea4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a33      	ldr	r2, [pc, #204]	@ (80058f8 <HAL_DMA_IRQHandler+0xea8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01d      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a32      	ldr	r2, [pc, #200]	@ (80058fc <HAL_DMA_IRQHandler+0xeac>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a30      	ldr	r2, [pc, #192]	@ (8005900 <HAL_DMA_IRQHandler+0xeb0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2f      	ldr	r2, [pc, #188]	@ (8005904 <HAL_DMA_IRQHandler+0xeb4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2d      	ldr	r2, [pc, #180]	@ (8005908 <HAL_DMA_IRQHandler+0xeb8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a2c      	ldr	r2, [pc, #176]	@ (800590c <HAL_DMA_IRQHandler+0xebc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_DMA_IRQHandler+0xe1a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a2a      	ldr	r2, [pc, #168]	@ (8005910 <HAL_DMA_IRQHandler+0xec0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d108      	bne.n	800587c <HAL_DMA_IRQHandler+0xe2c>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 021c 	bic.w	r2, r2, #28
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e007      	b.n	800588c <HAL_DMA_IRQHandler+0xe3c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 020e 	bic.w	r2, r2, #14
 800588a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2201      	movs	r2, #1
 8005896:	409a      	lsls	r2, r3
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	4798      	blx	r3
 80058c2:	e004      	b.n	80058ce <HAL_DMA_IRQHandler+0xe7e>
          return;
 80058c4:	bf00      	nop
 80058c6:	e002      	b.n	80058ce <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058c8:	bf00      	nop
 80058ca:	e000      	b.n	80058ce <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058ce:	3728      	adds	r7, #40	@ 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40020010 	.word	0x40020010
 80058d8:	40020028 	.word	0x40020028
 80058dc:	40020040 	.word	0x40020040
 80058e0:	40020058 	.word	0x40020058
 80058e4:	40020070 	.word	0x40020070
 80058e8:	40020088 	.word	0x40020088
 80058ec:	400200a0 	.word	0x400200a0
 80058f0:	400200b8 	.word	0x400200b8
 80058f4:	40020410 	.word	0x40020410
 80058f8:	40020428 	.word	0x40020428
 80058fc:	40020440 	.word	0x40020440
 8005900:	40020458 	.word	0x40020458
 8005904:	40020470 	.word	0x40020470
 8005908:	40020488 	.word	0x40020488
 800590c:	400204a0 	.word	0x400204a0
 8005910:	400204b8 	.word	0x400204b8

08005914 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005926:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a7f      	ldr	r2, [pc, #508]	@ (8005b30 <DMA_SetConfig+0x21c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d072      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a7d      	ldr	r2, [pc, #500]	@ (8005b34 <DMA_SetConfig+0x220>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d06d      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a7c      	ldr	r2, [pc, #496]	@ (8005b38 <DMA_SetConfig+0x224>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d068      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a7a      	ldr	r2, [pc, #488]	@ (8005b3c <DMA_SetConfig+0x228>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d063      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a79      	ldr	r2, [pc, #484]	@ (8005b40 <DMA_SetConfig+0x22c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d05e      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a77      	ldr	r2, [pc, #476]	@ (8005b44 <DMA_SetConfig+0x230>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d059      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a76      	ldr	r2, [pc, #472]	@ (8005b48 <DMA_SetConfig+0x234>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d054      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a74      	ldr	r2, [pc, #464]	@ (8005b4c <DMA_SetConfig+0x238>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d04f      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a73      	ldr	r2, [pc, #460]	@ (8005b50 <DMA_SetConfig+0x23c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d04a      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a71      	ldr	r2, [pc, #452]	@ (8005b54 <DMA_SetConfig+0x240>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d045      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a70      	ldr	r2, [pc, #448]	@ (8005b58 <DMA_SetConfig+0x244>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d040      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a6e      	ldr	r2, [pc, #440]	@ (8005b5c <DMA_SetConfig+0x248>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d03b      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005b60 <DMA_SetConfig+0x24c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d036      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005b64 <DMA_SetConfig+0x250>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d031      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a6a      	ldr	r2, [pc, #424]	@ (8005b68 <DMA_SetConfig+0x254>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d02c      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a68      	ldr	r2, [pc, #416]	@ (8005b6c <DMA_SetConfig+0x258>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d027      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a67      	ldr	r2, [pc, #412]	@ (8005b70 <DMA_SetConfig+0x25c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d022      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a65      	ldr	r2, [pc, #404]	@ (8005b74 <DMA_SetConfig+0x260>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01d      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a64      	ldr	r2, [pc, #400]	@ (8005b78 <DMA_SetConfig+0x264>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d018      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a62      	ldr	r2, [pc, #392]	@ (8005b7c <DMA_SetConfig+0x268>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a61      	ldr	r2, [pc, #388]	@ (8005b80 <DMA_SetConfig+0x26c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a5f      	ldr	r2, [pc, #380]	@ (8005b84 <DMA_SetConfig+0x270>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d009      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a5e      	ldr	r2, [pc, #376]	@ (8005b88 <DMA_SetConfig+0x274>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a5c      	ldr	r2, [pc, #368]	@ (8005b8c <DMA_SetConfig+0x278>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d101      	bne.n	8005a22 <DMA_SetConfig+0x10e>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <DMA_SetConfig+0x110>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005a30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a39      	ldr	r2, [pc, #228]	@ (8005b30 <DMA_SetConfig+0x21c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d04a      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a38      	ldr	r2, [pc, #224]	@ (8005b34 <DMA_SetConfig+0x220>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d045      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a36      	ldr	r2, [pc, #216]	@ (8005b38 <DMA_SetConfig+0x224>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d040      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a35      	ldr	r2, [pc, #212]	@ (8005b3c <DMA_SetConfig+0x228>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d03b      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a33      	ldr	r2, [pc, #204]	@ (8005b40 <DMA_SetConfig+0x22c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d036      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a32      	ldr	r2, [pc, #200]	@ (8005b44 <DMA_SetConfig+0x230>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d031      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a30      	ldr	r2, [pc, #192]	@ (8005b48 <DMA_SetConfig+0x234>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d02c      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8005b4c <DMA_SetConfig+0x238>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d027      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2d      	ldr	r2, [pc, #180]	@ (8005b50 <DMA_SetConfig+0x23c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d022      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b54 <DMA_SetConfig+0x240>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d01d      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2a      	ldr	r2, [pc, #168]	@ (8005b58 <DMA_SetConfig+0x244>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d018      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a29      	ldr	r2, [pc, #164]	@ (8005b5c <DMA_SetConfig+0x248>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a27      	ldr	r2, [pc, #156]	@ (8005b60 <DMA_SetConfig+0x24c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00e      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a26      	ldr	r2, [pc, #152]	@ (8005b64 <DMA_SetConfig+0x250>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d009      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a24      	ldr	r2, [pc, #144]	@ (8005b68 <DMA_SetConfig+0x254>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a23      	ldr	r2, [pc, #140]	@ (8005b6c <DMA_SetConfig+0x258>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <DMA_SetConfig+0x1d4>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <DMA_SetConfig+0x1d6>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d059      	beq.n	8005ba2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	223f      	movs	r2, #63	@ 0x3f
 8005af8:	409a      	lsls	r2, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b40      	cmp	r3, #64	@ 0x40
 8005b1c:	d138      	bne.n	8005b90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b2e:	e0ae      	b.n	8005c8e <DMA_SetConfig+0x37a>
 8005b30:	40020010 	.word	0x40020010
 8005b34:	40020028 	.word	0x40020028
 8005b38:	40020040 	.word	0x40020040
 8005b3c:	40020058 	.word	0x40020058
 8005b40:	40020070 	.word	0x40020070
 8005b44:	40020088 	.word	0x40020088
 8005b48:	400200a0 	.word	0x400200a0
 8005b4c:	400200b8 	.word	0x400200b8
 8005b50:	40020410 	.word	0x40020410
 8005b54:	40020428 	.word	0x40020428
 8005b58:	40020440 	.word	0x40020440
 8005b5c:	40020458 	.word	0x40020458
 8005b60:	40020470 	.word	0x40020470
 8005b64:	40020488 	.word	0x40020488
 8005b68:	400204a0 	.word	0x400204a0
 8005b6c:	400204b8 	.word	0x400204b8
 8005b70:	58025408 	.word	0x58025408
 8005b74:	5802541c 	.word	0x5802541c
 8005b78:	58025430 	.word	0x58025430
 8005b7c:	58025444 	.word	0x58025444
 8005b80:	58025458 	.word	0x58025458
 8005b84:	5802546c 	.word	0x5802546c
 8005b88:	58025480 	.word	0x58025480
 8005b8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	60da      	str	r2, [r3, #12]
}
 8005ba0:	e075      	b.n	8005c8e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8005c9c <DMA_SetConfig+0x388>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d04a      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ca0 <DMA_SetConfig+0x38c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d045      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a3a      	ldr	r2, [pc, #232]	@ (8005ca4 <DMA_SetConfig+0x390>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d040      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a38      	ldr	r2, [pc, #224]	@ (8005ca8 <DMA_SetConfig+0x394>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d03b      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a37      	ldr	r2, [pc, #220]	@ (8005cac <DMA_SetConfig+0x398>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d036      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a35      	ldr	r2, [pc, #212]	@ (8005cb0 <DMA_SetConfig+0x39c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d031      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a34      	ldr	r2, [pc, #208]	@ (8005cb4 <DMA_SetConfig+0x3a0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d02c      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a32      	ldr	r2, [pc, #200]	@ (8005cb8 <DMA_SetConfig+0x3a4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d027      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a31      	ldr	r2, [pc, #196]	@ (8005cbc <DMA_SetConfig+0x3a8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d022      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2f      	ldr	r2, [pc, #188]	@ (8005cc0 <DMA_SetConfig+0x3ac>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01d      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc4 <DMA_SetConfig+0x3b0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d018      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc8 <DMA_SetConfig+0x3b4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005ccc <DMA_SetConfig+0x3b8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a29      	ldr	r2, [pc, #164]	@ (8005cd0 <DMA_SetConfig+0x3bc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a28      	ldr	r2, [pc, #160]	@ (8005cd4 <DMA_SetConfig+0x3c0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a26      	ldr	r2, [pc, #152]	@ (8005cd8 <DMA_SetConfig+0x3c4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d101      	bne.n	8005c46 <DMA_SetConfig+0x332>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <DMA_SetConfig+0x334>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d020      	beq.n	8005c8e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	2201      	movs	r2, #1
 8005c56:	409a      	lsls	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b40      	cmp	r3, #64	@ 0x40
 8005c6a:	d108      	bne.n	8005c7e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	60da      	str	r2, [r3, #12]
}
 8005c7c:	e007      	b.n	8005c8e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	60da      	str	r2, [r3, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	48022c08 	.word	0x48022c08
 8005ca0:	48022c1c 	.word	0x48022c1c
 8005ca4:	48022c30 	.word	0x48022c30
 8005ca8:	48022c44 	.word	0x48022c44
 8005cac:	48022c58 	.word	0x48022c58
 8005cb0:	48022c6c 	.word	0x48022c6c
 8005cb4:	48022c80 	.word	0x48022c80
 8005cb8:	48022c94 	.word	0x48022c94
 8005cbc:	58025408 	.word	0x58025408
 8005cc0:	5802541c 	.word	0x5802541c
 8005cc4:	58025430 	.word	0x58025430
 8005cc8:	58025444 	.word	0x58025444
 8005ccc:	58025458 	.word	0x58025458
 8005cd0:	5802546c 	.word	0x5802546c
 8005cd4:	58025480 	.word	0x58025480
 8005cd8:	58025494 	.word	0x58025494

08005cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a42      	ldr	r2, [pc, #264]	@ (8005df4 <DMA_CalcBaseAndBitshift+0x118>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d04a      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a41      	ldr	r2, [pc, #260]	@ (8005df8 <DMA_CalcBaseAndBitshift+0x11c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d045      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a3f      	ldr	r2, [pc, #252]	@ (8005dfc <DMA_CalcBaseAndBitshift+0x120>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d040      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a3e      	ldr	r2, [pc, #248]	@ (8005e00 <DMA_CalcBaseAndBitshift+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d03b      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a3c      	ldr	r2, [pc, #240]	@ (8005e04 <DMA_CalcBaseAndBitshift+0x128>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d036      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e08 <DMA_CalcBaseAndBitshift+0x12c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d031      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a39      	ldr	r2, [pc, #228]	@ (8005e0c <DMA_CalcBaseAndBitshift+0x130>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02c      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a38      	ldr	r2, [pc, #224]	@ (8005e10 <DMA_CalcBaseAndBitshift+0x134>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d027      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a36      	ldr	r2, [pc, #216]	@ (8005e14 <DMA_CalcBaseAndBitshift+0x138>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d022      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a35      	ldr	r2, [pc, #212]	@ (8005e18 <DMA_CalcBaseAndBitshift+0x13c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d01d      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a33      	ldr	r2, [pc, #204]	@ (8005e1c <DMA_CalcBaseAndBitshift+0x140>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d018      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a32      	ldr	r2, [pc, #200]	@ (8005e20 <DMA_CalcBaseAndBitshift+0x144>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a30      	ldr	r2, [pc, #192]	@ (8005e24 <DMA_CalcBaseAndBitshift+0x148>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005e28 <DMA_CalcBaseAndBitshift+0x14c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2d      	ldr	r2, [pc, #180]	@ (8005e2c <DMA_CalcBaseAndBitshift+0x150>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005e30 <DMA_CalcBaseAndBitshift+0x154>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d101      	bne.n	8005d88 <DMA_CalcBaseAndBitshift+0xac>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <DMA_CalcBaseAndBitshift+0xae>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d024      	beq.n	8005dd8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	3b10      	subs	r3, #16
 8005d96:	4a27      	ldr	r2, [pc, #156]	@ (8005e34 <DMA_CalcBaseAndBitshift+0x158>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	091b      	lsrs	r3, r3, #4
 8005d9e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	4a24      	ldr	r2, [pc, #144]	@ (8005e38 <DMA_CalcBaseAndBitshift+0x15c>)
 8005da8:	5cd3      	ldrb	r3, [r2, r3]
 8005daa:	461a      	mov	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d908      	bls.n	8005dc8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8005e3c <DMA_CalcBaseAndBitshift+0x160>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005dc6:	e00d      	b.n	8005de4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <DMA_CalcBaseAndBitshift+0x160>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd6:	e005      	b.n	8005de4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40020010 	.word	0x40020010
 8005df8:	40020028 	.word	0x40020028
 8005dfc:	40020040 	.word	0x40020040
 8005e00:	40020058 	.word	0x40020058
 8005e04:	40020070 	.word	0x40020070
 8005e08:	40020088 	.word	0x40020088
 8005e0c:	400200a0 	.word	0x400200a0
 8005e10:	400200b8 	.word	0x400200b8
 8005e14:	40020410 	.word	0x40020410
 8005e18:	40020428 	.word	0x40020428
 8005e1c:	40020440 	.word	0x40020440
 8005e20:	40020458 	.word	0x40020458
 8005e24:	40020470 	.word	0x40020470
 8005e28:	40020488 	.word	0x40020488
 8005e2c:	400204a0 	.word	0x400204a0
 8005e30:	400204b8 	.word	0x400204b8
 8005e34:	aaaaaaab 	.word	0xaaaaaaab
 8005e38:	08012078 	.word	0x08012078
 8005e3c:	fffffc00 	.word	0xfffffc00

08005e40 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d120      	bne.n	8005e96 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d858      	bhi.n	8005f0e <DMA_CheckFifoParam+0xce>
 8005e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <DMA_CheckFifoParam+0x24>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005e75 	.word	0x08005e75
 8005e68:	08005e87 	.word	0x08005e87
 8005e6c:	08005e75 	.word	0x08005e75
 8005e70:	08005f0f 	.word	0x08005f0f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d048      	beq.n	8005f12 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e84:	e045      	b.n	8005f12 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e8e:	d142      	bne.n	8005f16 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e94:	e03f      	b.n	8005f16 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e9e:	d123      	bne.n	8005ee8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d838      	bhi.n	8005f1a <DMA_CheckFifoParam+0xda>
 8005ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb0 <DMA_CheckFifoParam+0x70>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ec1 	.word	0x08005ec1
 8005eb4:	08005ec7 	.word	0x08005ec7
 8005eb8:	08005ec1 	.word	0x08005ec1
 8005ebc:	08005ed9 	.word	0x08005ed9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ec4:	e030      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d025      	beq.n	8005f1e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ed6:	e022      	b.n	8005f1e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005edc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ee0:	d11f      	bne.n	8005f22 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ee6:	e01c      	b.n	8005f22 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d902      	bls.n	8005ef6 <DMA_CheckFifoParam+0xb6>
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d003      	beq.n	8005efc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ef4:	e018      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8005efa:	e015      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00e      	beq.n	8005f26 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f0c:	e00b      	b.n	8005f26 <DMA_CheckFifoParam+0xe6>
        break;
 8005f0e:	bf00      	nop
 8005f10:	e00a      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f12:	bf00      	nop
 8005f14:	e008      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f16:	bf00      	nop
 8005f18:	e006      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e004      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
    break;
 8005f26:	bf00      	nop
    }
  }

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop

08005f38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a38      	ldr	r2, [pc, #224]	@ (800602c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a36      	ldr	r2, [pc, #216]	@ (8006030 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a35      	ldr	r2, [pc, #212]	@ (8006034 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a33      	ldr	r2, [pc, #204]	@ (8006038 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a32      	ldr	r2, [pc, #200]	@ (800603c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a30      	ldr	r2, [pc, #192]	@ (8006040 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a2f      	ldr	r2, [pc, #188]	@ (8006044 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2d      	ldr	r2, [pc, #180]	@ (8006048 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d101      	bne.n	8005f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01a      	beq.n	8005fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	3b08      	subs	r3, #8
 8005fa8:	4a28      	ldr	r2, [pc, #160]	@ (800604c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4b26      	ldr	r3, [pc, #152]	@ (8006050 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	461a      	mov	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a24      	ldr	r2, [pc, #144]	@ (8006054 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005fc4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2201      	movs	r2, #1
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005fd4:	e024      	b.n	8006020 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	3b10      	subs	r3, #16
 8005fde:	4a1e      	ldr	r2, [pc, #120]	@ (8006058 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	091b      	lsrs	r3, r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a1c      	ldr	r2, [pc, #112]	@ (800605c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d806      	bhi.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8006060 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d902      	bls.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4b18      	ldr	r3, [pc, #96]	@ (8006064 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a16      	ldr	r2, [pc, #88]	@ (8006068 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006010:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2201      	movs	r2, #1
 800601a:	409a      	lsls	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	58025408 	.word	0x58025408
 8006030:	5802541c 	.word	0x5802541c
 8006034:	58025430 	.word	0x58025430
 8006038:	58025444 	.word	0x58025444
 800603c:	58025458 	.word	0x58025458
 8006040:	5802546c 	.word	0x5802546c
 8006044:	58025480 	.word	0x58025480
 8006048:	58025494 	.word	0x58025494
 800604c:	cccccccd 	.word	0xcccccccd
 8006050:	16009600 	.word	0x16009600
 8006054:	58025880 	.word	0x58025880
 8006058:	aaaaaaab 	.word	0xaaaaaaab
 800605c:	400204b8 	.word	0x400204b8
 8006060:	4002040f 	.word	0x4002040f
 8006064:	10008200 	.word	0x10008200
 8006068:	40020880 	.word	0x40020880

0800606c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d04a      	beq.n	8006118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b08      	cmp	r3, #8
 8006086:	d847      	bhi.n	8006118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a25      	ldr	r2, [pc, #148]	@ (8006124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d022      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a24      	ldr	r2, [pc, #144]	@ (8006128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d01d      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a22      	ldr	r2, [pc, #136]	@ (800612c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d018      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a21      	ldr	r2, [pc, #132]	@ (8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d013      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00e      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1e      	ldr	r2, [pc, #120]	@ (8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d009      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1c      	ldr	r2, [pc, #112]	@ (800613c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d101      	bne.n	80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4b17      	ldr	r3, [pc, #92]	@ (8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	461a      	mov	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a15      	ldr	r2, [pc, #84]	@ (8006148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80060f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80060f6:	e009      	b.n	800610c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4b14      	ldr	r3, [pc, #80]	@ (800614c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	461a      	mov	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a11      	ldr	r2, [pc, #68]	@ (8006150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800610a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3b01      	subs	r3, #1
 8006110:	2201      	movs	r2, #1
 8006112:	409a      	lsls	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	58025408 	.word	0x58025408
 8006128:	5802541c 	.word	0x5802541c
 800612c:	58025430 	.word	0x58025430
 8006130:	58025444 	.word	0x58025444
 8006134:	58025458 	.word	0x58025458
 8006138:	5802546c 	.word	0x5802546c
 800613c:	58025480 	.word	0x58025480
 8006140:	58025494 	.word	0x58025494
 8006144:	1600963f 	.word	0x1600963f
 8006148:	58025940 	.word	0x58025940
 800614c:	1000823f 	.word	0x1000823f
 8006150:	40020940 	.word	0x40020940

08006154 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b098      	sub	sp, #96	@ 0x60
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800615c:	4a84      	ldr	r2, [pc, #528]	@ (8006370 <HAL_FDCAN_Init+0x21c>)
 800615e:	f107 030c 	add.w	r3, r7, #12
 8006162:	4611      	mov	r1, r2
 8006164:	224c      	movs	r2, #76	@ 0x4c
 8006166:	4618      	mov	r0, r3
 8006168:	f00b fdc0 	bl	8011cec <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e1c6      	b.n	8006504 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a7e      	ldr	r2, [pc, #504]	@ (8006374 <HAL_FDCAN_Init+0x220>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d106      	bne.n	800618e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fb fbe4 	bl	8001970 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0210 	bic.w	r2, r2, #16
 80061b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061b8:	f7fc ff36 	bl	8003028 <HAL_GetTick>
 80061bc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061be:	e014      	b.n	80061ea <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061c0:	f7fc ff32 	bl	8003028 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b0a      	cmp	r3, #10
 80061cc:	d90d      	bls.n	80061ea <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061d4:	f043 0201 	orr.w	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2203      	movs	r2, #3
 80061e2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e18c      	b.n	8006504 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d0e3      	beq.n	80061c0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006208:	f7fc ff0e 	bl	8003028 <HAL_GetTick>
 800620c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800620e:	e014      	b.n	800623a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006210:	f7fc ff0a 	bl	8003028 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b0a      	cmp	r3, #10
 800621c:	d90d      	bls.n	800623a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006224:	f043 0201 	orr.w	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2203      	movs	r2, #3
 8006232:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e164      	b.n	8006504 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0e3      	beq.n	8006210 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0202 	orr.w	r2, r2, #2
 8006256:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7c1b      	ldrb	r3, [r3, #16]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d108      	bne.n	8006272 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800626e:	619a      	str	r2, [r3, #24]
 8006270:	e007      	b.n	8006282 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006280:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	7c5b      	ldrb	r3, [r3, #17]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d108      	bne.n	800629c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006298:	619a      	str	r2, [r3, #24]
 800629a:	e007      	b.n	80062ac <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7c9b      	ldrb	r3, [r3, #18]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d108      	bne.n	80062c6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062c2:	619a      	str	r2, [r3, #24]
 80062c4:	e007      	b.n	80062d6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062d4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80062fa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0210 	bic.w	r2, r2, #16
 800630a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d108      	bne.n	8006326 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0204 	orr.w	r2, r2, #4
 8006322:	619a      	str	r2, [r3, #24]
 8006324:	e030      	b.n	8006388 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d02c      	beq.n	8006388 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d020      	beq.n	8006378 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699a      	ldr	r2, [r3, #24]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006344:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0210 	orr.w	r2, r2, #16
 8006354:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	2b03      	cmp	r3, #3
 800635c:	d114      	bne.n	8006388 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0220 	orr.w	r2, r2, #32
 800636c:	619a      	str	r2, [r3, #24]
 800636e:	e00b      	b.n	8006388 <HAL_FDCAN_Init+0x234>
 8006370:	08011fd4 	.word	0x08011fd4
 8006374:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0220 	orr.w	r2, r2, #32
 8006386:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	3b01      	subs	r3, #1
 800638e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	3b01      	subs	r3, #1
 8006396:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006398:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80063a0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80063b0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80063b2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063bc:	d115      	bne.n	80063ea <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c8:	3b01      	subs	r3, #1
 80063ca:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063cc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d2:	3b01      	subs	r3, #1
 80063d4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80063d6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063de:	3b01      	subs	r3, #1
 80063e0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80063e6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80063e8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006410:	4413      	add	r3, r2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d011      	beq.n	800643a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800641e:	f023 0107 	bic.w	r1, r3, #7
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	3360      	adds	r3, #96	@ 0x60
 800642a:	443b      	add	r3, r7
 800642c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d011      	beq.n	8006466 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800644a:	f023 0107 	bic.w	r1, r3, #7
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	3360      	adds	r3, #96	@ 0x60
 8006456:	443b      	add	r3, r7
 8006458:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800646a:	2b00      	cmp	r3, #0
 800646c:	d012      	beq.n	8006494 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006476:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	3360      	adds	r3, #96	@ 0x60
 8006482:	443b      	add	r3, r7
 8006484:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006488:	011a      	lsls	r2, r3, #4
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006498:	2b00      	cmp	r3, #0
 800649a:	d012      	beq.n	80064c2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80064a4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	3360      	adds	r3, #96	@ 0x60
 80064b0:	443b      	add	r3, r7
 80064b2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80064b6:	021a      	lsls	r2, r3, #8
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a11      	ldr	r2, [pc, #68]	@ (800650c <HAL_FDCAN_Init+0x3b8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d107      	bne.n	80064dc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f022 0203 	bic.w	r2, r2, #3
 80064da:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f80b 	bl	8006510 <FDCAN_CalcultateRamBlockAddresses>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006500:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006504:	4618      	mov	r0, r3
 8006506:	3760      	adds	r7, #96	@ 0x60
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	4000a000 	.word	0x4000a000

08006510 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800651c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006526:	4ba7      	ldr	r3, [pc, #668]	@ (80067c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006528:	4013      	ands	r3, r2
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	0091      	lsls	r1, r2, #2
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	430b      	orrs	r3, r1
 8006534:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006540:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006548:	041a      	lsls	r2, r3, #16
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	4413      	add	r3, r2
 800655c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006566:	4b97      	ldr	r3, [pc, #604]	@ (80067c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006568:	4013      	ands	r3, r2
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	0091      	lsls	r1, r2, #2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	430b      	orrs	r3, r1
 8006574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006580:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006588:	041a      	lsls	r2, r3, #16
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	4413      	add	r3, r2
 800659e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80065a8:	4b86      	ldr	r3, [pc, #536]	@ (80067c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	0091      	lsls	r1, r2, #2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	430b      	orrs	r3, r1
 80065b6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065c2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	041a      	lsls	r2, r3, #16
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80065de:	fb02 f303 	mul.w	r3, r2, r3
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4413      	add	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80065f0:	4b74      	ldr	r3, [pc, #464]	@ (80067c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	0091      	lsls	r1, r2, #2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	430b      	orrs	r3, r1
 80065fe:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800660a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006612:	041a      	lsls	r2, r3, #16
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006626:	fb02 f303 	mul.w	r3, r2, r3
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	4413      	add	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006638:	4b62      	ldr	r3, [pc, #392]	@ (80067c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800663a:	4013      	ands	r3, r2
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	0091      	lsls	r1, r2, #2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	430b      	orrs	r3, r1
 8006646:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	4413      	add	r3, r2
 800665a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006664:	4b57      	ldr	r3, [pc, #348]	@ (80067c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006666:	4013      	ands	r3, r2
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	0091      	lsls	r1, r2, #2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	430b      	orrs	r3, r1
 8006672:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800667e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006686:	041a      	lsls	r2, r3, #16
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	4413      	add	r3, r2
 800669c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80066a6:	4b47      	ldr	r3, [pc, #284]	@ (80067c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	0091      	lsls	r1, r2, #2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	430b      	orrs	r3, r1
 80066b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80066c0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c8:	041a      	lsls	r2, r3, #16
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80066dc:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e4:	061a      	lsls	r2, r3, #24
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066f4:	4b34      	ldr	r3, [pc, #208]	@ (80067c8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80066f6:	4413      	add	r3, r2
 80066f8:	009a      	lsls	r2, r3, #2
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	441a      	add	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006730:	441a      	add	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006748:	441a      	add	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006760:	441a      	add	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	441a      	add	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800678a:	fb01 f303 	mul.w	r3, r1, r3
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80067ac:	441a      	add	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ba:	4a04      	ldr	r2, [pc, #16]	@ (80067cc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d915      	bls.n	80067ec <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80067c0:	e006      	b.n	80067d0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80067c2:	bf00      	nop
 80067c4:	ffff0003 	.word	0xffff0003
 80067c8:	10002b00 	.word	0x10002b00
 80067cc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2203      	movs	r2, #3
 80067e4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e010      	b.n	800680e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e005      	b.n	8006800 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3304      	adds	r3, #4
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	429a      	cmp	r2, r3
 800680a:	d3f3      	bcc.n	80067f4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop

0800681c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800681c:	b480      	push	{r7}
 800681e:	b089      	sub	sp, #36	@ 0x24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800682a:	4b89      	ldr	r3, [pc, #548]	@ (8006a50 <HAL_GPIO_Init+0x234>)
 800682c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800682e:	e194      	b.n	8006b5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	2101      	movs	r1, #1
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	fa01 f303 	lsl.w	r3, r1, r3
 800683c:	4013      	ands	r3, r2
 800683e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8186 	beq.w	8006b54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d005      	beq.n	8006860 <HAL_GPIO_Init+0x44>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d130      	bne.n	80068c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	2203      	movs	r2, #3
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	43db      	mvns	r3, r3
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	4013      	ands	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	4313      	orrs	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006896:	2201      	movs	r2, #1
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43db      	mvns	r3, r3
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	4013      	ands	r3, r2
 80068a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	091b      	lsrs	r3, r3, #4
 80068ac:	f003 0201 	and.w	r2, r3, #1
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d017      	beq.n	80068fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	2203      	movs	r2, #3
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43db      	mvns	r3, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	4013      	ands	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d123      	bne.n	8006952 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	08da      	lsrs	r2, r3, #3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3208      	adds	r2, #8
 8006912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	220f      	movs	r2, #15
 8006922:	fa02 f303 	lsl.w	r3, r2, r3
 8006926:	43db      	mvns	r3, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4013      	ands	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	4313      	orrs	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	08da      	lsrs	r2, r3, #3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3208      	adds	r2, #8
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	2203      	movs	r2, #3
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	43db      	mvns	r3, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	4013      	ands	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 0203 	and.w	r2, r3, #3
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	4313      	orrs	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80e0 	beq.w	8006b54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006994:	4b2f      	ldr	r3, [pc, #188]	@ (8006a54 <HAL_GPIO_Init+0x238>)
 8006996:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800699a:	4a2e      	ldr	r2, [pc, #184]	@ (8006a54 <HAL_GPIO_Init+0x238>)
 800699c:	f043 0302 	orr.w	r3, r3, #2
 80069a0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80069a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a54 <HAL_GPIO_Init+0x238>)
 80069a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069b2:	4a29      	ldr	r2, [pc, #164]	@ (8006a58 <HAL_GPIO_Init+0x23c>)
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	089b      	lsrs	r3, r3, #2
 80069b8:	3302      	adds	r3, #2
 80069ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	220f      	movs	r2, #15
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	43db      	mvns	r3, r3
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	4013      	ands	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a20      	ldr	r2, [pc, #128]	@ (8006a5c <HAL_GPIO_Init+0x240>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d052      	beq.n	8006a84 <HAL_GPIO_Init+0x268>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a60 <HAL_GPIO_Init+0x244>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d031      	beq.n	8006a4a <HAL_GPIO_Init+0x22e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a64 <HAL_GPIO_Init+0x248>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d02b      	beq.n	8006a46 <HAL_GPIO_Init+0x22a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a68 <HAL_GPIO_Init+0x24c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d025      	beq.n	8006a42 <HAL_GPIO_Init+0x226>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <HAL_GPIO_Init+0x250>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d01f      	beq.n	8006a3e <HAL_GPIO_Init+0x222>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1b      	ldr	r2, [pc, #108]	@ (8006a70 <HAL_GPIO_Init+0x254>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d019      	beq.n	8006a3a <HAL_GPIO_Init+0x21e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1a      	ldr	r2, [pc, #104]	@ (8006a74 <HAL_GPIO_Init+0x258>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <HAL_GPIO_Init+0x21a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a19      	ldr	r2, [pc, #100]	@ (8006a78 <HAL_GPIO_Init+0x25c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00d      	beq.n	8006a32 <HAL_GPIO_Init+0x216>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a18      	ldr	r2, [pc, #96]	@ (8006a7c <HAL_GPIO_Init+0x260>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d007      	beq.n	8006a2e <HAL_GPIO_Init+0x212>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a17      	ldr	r2, [pc, #92]	@ (8006a80 <HAL_GPIO_Init+0x264>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d101      	bne.n	8006a2a <HAL_GPIO_Init+0x20e>
 8006a26:	2309      	movs	r3, #9
 8006a28:	e02d      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a2a:	230a      	movs	r3, #10
 8006a2c:	e02b      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a2e:	2308      	movs	r3, #8
 8006a30:	e029      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a32:	2307      	movs	r3, #7
 8006a34:	e027      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a36:	2306      	movs	r3, #6
 8006a38:	e025      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a3a:	2305      	movs	r3, #5
 8006a3c:	e023      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	e021      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a42:	2303      	movs	r3, #3
 8006a44:	e01f      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e01d      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e01b      	b.n	8006a86 <HAL_GPIO_Init+0x26a>
 8006a4e:	bf00      	nop
 8006a50:	58000080 	.word	0x58000080
 8006a54:	58024400 	.word	0x58024400
 8006a58:	58000400 	.word	0x58000400
 8006a5c:	58020000 	.word	0x58020000
 8006a60:	58020400 	.word	0x58020400
 8006a64:	58020800 	.word	0x58020800
 8006a68:	58020c00 	.word	0x58020c00
 8006a6c:	58021000 	.word	0x58021000
 8006a70:	58021400 	.word	0x58021400
 8006a74:	58021800 	.word	0x58021800
 8006a78:	58021c00 	.word	0x58021c00
 8006a7c:	58022000 	.word	0x58022000
 8006a80:	58022400 	.word	0x58022400
 8006a84:	2300      	movs	r3, #0
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	f002 0203 	and.w	r2, r2, #3
 8006a8c:	0092      	lsls	r2, r2, #2
 8006a8e:	4093      	lsls	r3, r2
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a96:	4938      	ldr	r1, [pc, #224]	@ (8006b78 <HAL_GPIO_Init+0x35c>)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	089b      	lsrs	r3, r3, #2
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006aca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	43db      	mvns	r3, r3
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006af8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	43db      	mvns	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4013      	ands	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f47f ae63 	bne.w	8006830 <HAL_GPIO_Init+0x14>
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	3724      	adds	r7, #36	@ 0x24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	58000400 	.word	0x58000400

08006b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	807b      	strh	r3, [r7, #2]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b8c:	787b      	ldrb	r3, [r7, #1]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b92:	887a      	ldrh	r2, [r7, #2]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006b98:	e003      	b.n	8006ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b9a:	887b      	ldrh	r3, [r7, #2]
 8006b9c:	041a      	lsls	r2, r3, #16
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	619a      	str	r2, [r3, #24]
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e08b      	b.n	8006cda <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fb f82a 	bl	8001c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2224      	movs	r2, #36	@ 0x24
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0201 	bic.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006c00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d107      	bne.n	8006c2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c26:	609a      	str	r2, [r3, #8]
 8006c28:	e006      	b.n	8006c38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006c36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d108      	bne.n	8006c52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c4e:	605a      	str	r2, [r3, #4]
 8006c50:	e007      	b.n	8006c62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6859      	ldr	r1, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce4 <HAL_I2C_Init+0x134>)
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	69d9      	ldr	r1, [r3, #28]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1a      	ldr	r2, [r3, #32]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	02008000 	.word	0x02008000

08006ce8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d138      	bne.n	8006d70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e032      	b.n	8006d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2224      	movs	r2, #36	@ 0x24
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6819      	ldr	r1, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e000      	b.n	8006d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
  }
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d139      	bne.n	8006e08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e033      	b.n	8006e0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2224      	movs	r2, #36	@ 0x24
 8006dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0201 	bic.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006dd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e000      	b.n	8006e0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e08:	2302      	movs	r3, #2
  }
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e20:	4b19      	ldr	r3, [pc, #100]	@ (8006e88 <HAL_PWREx_ConfigSupply+0x70>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d00a      	beq.n	8006e42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e2c:	4b16      	ldr	r3, [pc, #88]	@ (8006e88 <HAL_PWREx_ConfigSupply+0x70>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d001      	beq.n	8006e3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e01f      	b.n	8006e7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e01d      	b.n	8006e7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e42:	4b11      	ldr	r3, [pc, #68]	@ (8006e88 <HAL_PWREx_ConfigSupply+0x70>)
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f023 0207 	bic.w	r2, r3, #7
 8006e4a:	490f      	ldr	r1, [pc, #60]	@ (8006e88 <HAL_PWREx_ConfigSupply+0x70>)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e52:	f7fc f8e9 	bl	8003028 <HAL_GetTick>
 8006e56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e58:	e009      	b.n	8006e6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e5a:	f7fc f8e5 	bl	8003028 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e68:	d901      	bls.n	8006e6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e007      	b.n	8006e7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e6e:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <HAL_PWREx_ConfigSupply+0x70>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e7a:	d1ee      	bne.n	8006e5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	58024800 	.word	0x58024800

08006e8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08c      	sub	sp, #48	@ 0x30
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d102      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f000 bc1f 	b.w	80076de <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80b3 	beq.w	8007014 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eae:	4b95      	ldr	r3, [pc, #596]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eb8:	4b92      	ldr	r3, [pc, #584]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d007      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x48>
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	2b18      	cmp	r3, #24
 8006ec8:	d112      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x64>
 8006eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d10d      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed4:	4b8b      	ldr	r3, [pc, #556]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8098 	beq.w	8007012 <HAL_RCC_OscConfig+0x186>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f040 8093 	bne.w	8007012 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e3f6      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef8:	d106      	bne.n	8006f08 <HAL_RCC_OscConfig+0x7c>
 8006efa:	4b82      	ldr	r3, [pc, #520]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a81      	ldr	r2, [pc, #516]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	e058      	b.n	8006fba <HAL_RCC_OscConfig+0x12e>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d112      	bne.n	8006f36 <HAL_RCC_OscConfig+0xaa>
 8006f10:	4b7c      	ldr	r3, [pc, #496]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a7b      	ldr	r2, [pc, #492]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	4b79      	ldr	r3, [pc, #484]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a78      	ldr	r2, [pc, #480]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f22:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	4b76      	ldr	r3, [pc, #472]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a75      	ldr	r2, [pc, #468]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	e041      	b.n	8006fba <HAL_RCC_OscConfig+0x12e>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f3e:	d112      	bne.n	8006f66 <HAL_RCC_OscConfig+0xda>
 8006f40:	4b70      	ldr	r3, [pc, #448]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a6f      	ldr	r2, [pc, #444]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	4b6d      	ldr	r3, [pc, #436]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a6c      	ldr	r2, [pc, #432]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f52:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	4b6a      	ldr	r3, [pc, #424]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a69      	ldr	r2, [pc, #420]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	e029      	b.n	8006fba <HAL_RCC_OscConfig+0x12e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006f6e:	d112      	bne.n	8006f96 <HAL_RCC_OscConfig+0x10a>
 8006f70:	4b64      	ldr	r3, [pc, #400]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a63      	ldr	r2, [pc, #396]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	4b61      	ldr	r3, [pc, #388]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a60      	ldr	r2, [pc, #384]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	4b5e      	ldr	r3, [pc, #376]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e011      	b.n	8006fba <HAL_RCC_OscConfig+0x12e>
 8006f96:	4b5b      	ldr	r3, [pc, #364]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a5a      	ldr	r2, [pc, #360]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	4b58      	ldr	r3, [pc, #352]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a57      	ldr	r2, [pc, #348]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006fa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4b55      	ldr	r3, [pc, #340]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a54      	ldr	r2, [pc, #336]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006fb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fb8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d013      	beq.n	8006fea <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc2:	f7fc f831 	bl	8003028 <HAL_GetTick>
 8006fc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fca:	f7fc f82d 	bl	8003028 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b64      	cmp	r3, #100	@ 0x64
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e380      	b.n	80076de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fdc:	4b49      	ldr	r3, [pc, #292]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <HAL_RCC_OscConfig+0x13e>
 8006fe8:	e014      	b.n	8007014 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fea:	f7fc f81d 	bl	8003028 <HAL_GetTick>
 8006fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ff0:	e008      	b.n	8007004 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ff2:	f7fc f819 	bl	8003028 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b64      	cmp	r3, #100	@ 0x64
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e36c      	b.n	80076de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007004:	4b3f      	ldr	r3, [pc, #252]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1f0      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x166>
 8007010:	e000      	b.n	8007014 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007012:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 808c 	beq.w	800713a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007022:	4b38      	ldr	r3, [pc, #224]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800702a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800702c:	4b35      	ldr	r3, [pc, #212]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <HAL_RCC_OscConfig+0x1bc>
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	2b18      	cmp	r3, #24
 800703c:	d137      	bne.n	80070ae <HAL_RCC_OscConfig+0x222>
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d132      	bne.n	80070ae <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007048:	4b2e      	ldr	r3, [pc, #184]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <HAL_RCC_OscConfig+0x1d4>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e33e      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007060:	4b28      	ldr	r3, [pc, #160]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f023 0219 	bic.w	r2, r3, #25
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4925      	ldr	r1, [pc, #148]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 800706e:	4313      	orrs	r3, r2
 8007070:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007072:	f7fb ffd9 	bl	8003028 <HAL_GetTick>
 8007076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007078:	e008      	b.n	800708c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800707a:	f7fb ffd5 	bl	8003028 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d901      	bls.n	800708c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e328      	b.n	80076de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800708c:	4b1d      	ldr	r3, [pc, #116]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0f0      	beq.n	800707a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007098:	4b1a      	ldr	r3, [pc, #104]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	061b      	lsls	r3, r3, #24
 80070a6:	4917      	ldr	r1, [pc, #92]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ac:	e045      	b.n	800713a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d028      	beq.n	8007108 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070b6:	4b13      	ldr	r3, [pc, #76]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f023 0219 	bic.w	r2, r3, #25
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	4910      	ldr	r1, [pc, #64]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c8:	f7fb ffae 	bl	8003028 <HAL_GetTick>
 80070cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070d0:	f7fb ffaa 	bl	8003028 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e2fd      	b.n	80076de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070e2:	4b08      	ldr	r3, [pc, #32]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0f0      	beq.n	80070d0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ee:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	061b      	lsls	r3, r3, #24
 80070fc:	4901      	ldr	r1, [pc, #4]	@ (8007104 <HAL_RCC_OscConfig+0x278>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	604b      	str	r3, [r1, #4]
 8007102:	e01a      	b.n	800713a <HAL_RCC_OscConfig+0x2ae>
 8007104:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007108:	4b97      	ldr	r3, [pc, #604]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a96      	ldr	r2, [pc, #600]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007114:	f7fb ff88 	bl	8003028 <HAL_GetTick>
 8007118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800711c:	f7fb ff84 	bl	8003028 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e2d7      	b.n	80076de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800712e:	4b8e      	ldr	r3, [pc, #568]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1f0      	bne.n	800711c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b00      	cmp	r3, #0
 8007144:	d06a      	beq.n	800721c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007146:	4b88      	ldr	r3, [pc, #544]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800714e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007150:	4b85      	ldr	r3, [pc, #532]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007154:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b08      	cmp	r3, #8
 800715a:	d007      	beq.n	800716c <HAL_RCC_OscConfig+0x2e0>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b18      	cmp	r3, #24
 8007160:	d11b      	bne.n	800719a <HAL_RCC_OscConfig+0x30e>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	2b01      	cmp	r3, #1
 800716a:	d116      	bne.n	800719a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800716c:	4b7e      	ldr	r3, [pc, #504]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <HAL_RCC_OscConfig+0x2f8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	2b80      	cmp	r3, #128	@ 0x80
 800717e:	d001      	beq.n	8007184 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e2ac      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007184:	4b78      	ldr	r3, [pc, #480]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	061b      	lsls	r3, r3, #24
 8007192:	4975      	ldr	r1, [pc, #468]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007194:	4313      	orrs	r3, r2
 8007196:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007198:	e040      	b.n	800721c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d023      	beq.n	80071ea <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071a2:	4b71      	ldr	r3, [pc, #452]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a70      	ldr	r2, [pc, #448]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80071a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ae:	f7fb ff3b 	bl	8003028 <HAL_GetTick>
 80071b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071b4:	e008      	b.n	80071c8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071b6:	f7fb ff37 	bl	8003028 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e28a      	b.n	80076de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071c8:	4b67      	ldr	r3, [pc, #412]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f0      	beq.n	80071b6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071d4:	4b64      	ldr	r3, [pc, #400]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	4961      	ldr	r1, [pc, #388]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60cb      	str	r3, [r1, #12]
 80071e8:	e018      	b.n	800721c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071ea:	4b5f      	ldr	r3, [pc, #380]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a5e      	ldr	r2, [pc, #376]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80071f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f6:	f7fb ff17 	bl	8003028 <HAL_GetTick>
 80071fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071fc:	e008      	b.n	8007210 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071fe:	f7fb ff13 	bl	8003028 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e266      	b.n	80076de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007210:	4b55      	ldr	r3, [pc, #340]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f0      	bne.n	80071fe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d036      	beq.n	8007296 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d019      	beq.n	8007264 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007230:	4b4d      	ldr	r3, [pc, #308]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007234:	4a4c      	ldr	r2, [pc, #304]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007236:	f043 0301 	orr.w	r3, r3, #1
 800723a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723c:	f7fb fef4 	bl	8003028 <HAL_GetTick>
 8007240:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007244:	f7fb fef0 	bl	8003028 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e243      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007256:	4b44      	ldr	r3, [pc, #272]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0f0      	beq.n	8007244 <HAL_RCC_OscConfig+0x3b8>
 8007262:	e018      	b.n	8007296 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007264:	4b40      	ldr	r3, [pc, #256]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007268:	4a3f      	ldr	r2, [pc, #252]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007270:	f7fb feda 	bl	8003028 <HAL_GetTick>
 8007274:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007278:	f7fb fed6 	bl	8003028 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e229      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800728a:	4b37      	ldr	r3, [pc, #220]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 800728c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d036      	beq.n	8007310 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d019      	beq.n	80072de <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a2e      	ldr	r2, [pc, #184]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80072b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072b6:	f7fb feb7 	bl	8003028 <HAL_GetTick>
 80072ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072bc:	e008      	b.n	80072d0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072be:	f7fb feb3 	bl	8003028 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e206      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072d0:	4b25      	ldr	r3, [pc, #148]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0f0      	beq.n	80072be <HAL_RCC_OscConfig+0x432>
 80072dc:	e018      	b.n	8007310 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072de:	4b22      	ldr	r3, [pc, #136]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a21      	ldr	r2, [pc, #132]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 80072e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072ea:	f7fb fe9d 	bl	8003028 <HAL_GetTick>
 80072ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072f0:	e008      	b.n	8007304 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072f2:	f7fb fe99 	bl	8003028 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e1ec      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007304:	4b18      	ldr	r3, [pc, #96]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1f0      	bne.n	80072f2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 80af 	beq.w	800747c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800731e:	4b13      	ldr	r3, [pc, #76]	@ (800736c <HAL_RCC_OscConfig+0x4e0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a12      	ldr	r2, [pc, #72]	@ (800736c <HAL_RCC_OscConfig+0x4e0>)
 8007324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007328:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800732a:	f7fb fe7d 	bl	8003028 <HAL_GetTick>
 800732e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007330:	e008      	b.n	8007344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007332:	f7fb fe79 	bl	8003028 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b64      	cmp	r3, #100	@ 0x64
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e1cc      	b.n	80076de <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007344:	4b09      	ldr	r3, [pc, #36]	@ (800736c <HAL_RCC_OscConfig+0x4e0>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f0      	beq.n	8007332 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d10b      	bne.n	8007370 <HAL_RCC_OscConfig+0x4e4>
 8007358:	4b03      	ldr	r3, [pc, #12]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 800735a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735c:	4a02      	ldr	r2, [pc, #8]	@ (8007368 <HAL_RCC_OscConfig+0x4dc>)
 800735e:	f043 0301 	orr.w	r3, r3, #1
 8007362:	6713      	str	r3, [r2, #112]	@ 0x70
 8007364:	e05b      	b.n	800741e <HAL_RCC_OscConfig+0x592>
 8007366:	bf00      	nop
 8007368:	58024400 	.word	0x58024400
 800736c:	58024800 	.word	0x58024800
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d112      	bne.n	800739e <HAL_RCC_OscConfig+0x512>
 8007378:	4b9d      	ldr	r3, [pc, #628]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737c:	4a9c      	ldr	r2, [pc, #624]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	6713      	str	r3, [r2, #112]	@ 0x70
 8007384:	4b9a      	ldr	r3, [pc, #616]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007388:	4a99      	ldr	r2, [pc, #612]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800738a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800738e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007390:	4b97      	ldr	r3, [pc, #604]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007394:	4a96      	ldr	r2, [pc, #600]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007396:	f023 0304 	bic.w	r3, r3, #4
 800739a:	6713      	str	r3, [r2, #112]	@ 0x70
 800739c:	e03f      	b.n	800741e <HAL_RCC_OscConfig+0x592>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b05      	cmp	r3, #5
 80073a4:	d112      	bne.n	80073cc <HAL_RCC_OscConfig+0x540>
 80073a6:	4b92      	ldr	r3, [pc, #584]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073aa:	4a91      	ldr	r2, [pc, #580]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073ac:	f043 0304 	orr.w	r3, r3, #4
 80073b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b2:	4b8f      	ldr	r3, [pc, #572]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b6:	4a8e      	ldr	r2, [pc, #568]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80073be:	4b8c      	ldr	r3, [pc, #560]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c2:	4a8b      	ldr	r2, [pc, #556]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073c4:	f043 0301 	orr.w	r3, r3, #1
 80073c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ca:	e028      	b.n	800741e <HAL_RCC_OscConfig+0x592>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	2b85      	cmp	r3, #133	@ 0x85
 80073d2:	d112      	bne.n	80073fa <HAL_RCC_OscConfig+0x56e>
 80073d4:	4b86      	ldr	r3, [pc, #536]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d8:	4a85      	ldr	r2, [pc, #532]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073da:	f043 0304 	orr.w	r3, r3, #4
 80073de:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e0:	4b83      	ldr	r3, [pc, #524]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e4:	4a82      	ldr	r2, [pc, #520]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ec:	4b80      	ldr	r3, [pc, #512]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f0:	4a7f      	ldr	r2, [pc, #508]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073f2:	f043 0301 	orr.w	r3, r3, #1
 80073f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80073f8:	e011      	b.n	800741e <HAL_RCC_OscConfig+0x592>
 80073fa:	4b7d      	ldr	r3, [pc, #500]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80073fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fe:	4a7c      	ldr	r2, [pc, #496]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	6713      	str	r3, [r2, #112]	@ 0x70
 8007406:	4b7a      	ldr	r3, [pc, #488]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740a:	4a79      	ldr	r2, [pc, #484]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800740c:	f023 0304 	bic.w	r3, r3, #4
 8007410:	6713      	str	r3, [r2, #112]	@ 0x70
 8007412:	4b77      	ldr	r3, [pc, #476]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007416:	4a76      	ldr	r2, [pc, #472]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007418:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800741c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d015      	beq.n	8007452 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007426:	f7fb fdff 	bl	8003028 <HAL_GetTick>
 800742a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800742c:	e00a      	b.n	8007444 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800742e:	f7fb fdfb 	bl	8003028 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800743c:	4293      	cmp	r3, r2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e14c      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007444:	4b6a      	ldr	r3, [pc, #424]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0ee      	beq.n	800742e <HAL_RCC_OscConfig+0x5a2>
 8007450:	e014      	b.n	800747c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007452:	f7fb fde9 	bl	8003028 <HAL_GetTick>
 8007456:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007458:	e00a      	b.n	8007470 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745a:	f7fb fde5 	bl	8003028 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007468:	4293      	cmp	r3, r2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e136      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007470:	4b5f      	ldr	r3, [pc, #380]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1ee      	bne.n	800745a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 812b 	beq.w	80076dc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007486:	4b5a      	ldr	r3, [pc, #360]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800748e:	2b18      	cmp	r3, #24
 8007490:	f000 80bb 	beq.w	800760a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	2b02      	cmp	r3, #2
 800749a:	f040 8095 	bne.w	80075c8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749e:	4b54      	ldr	r3, [pc, #336]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a53      	ldr	r2, [pc, #332]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80074a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074aa:	f7fb fdbd 	bl	8003028 <HAL_GetTick>
 80074ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074b0:	e008      	b.n	80074c4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b2:	f7fb fdb9 	bl	8003028 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e10c      	b.n	80076de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074c4:	4b4a      	ldr	r3, [pc, #296]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1f0      	bne.n	80074b2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074d0:	4b47      	ldr	r3, [pc, #284]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80074d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074d4:	4b47      	ldr	r3, [pc, #284]	@ (80075f4 <HAL_RCC_OscConfig+0x768>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074e0:	0112      	lsls	r2, r2, #4
 80074e2:	430a      	orrs	r2, r1
 80074e4:	4942      	ldr	r1, [pc, #264]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	628b      	str	r3, [r1, #40]	@ 0x28
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ee:	3b01      	subs	r3, #1
 80074f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f8:	3b01      	subs	r3, #1
 80074fa:	025b      	lsls	r3, r3, #9
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	3b01      	subs	r3, #1
 8007506:	041b      	lsls	r3, r3, #16
 8007508:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007512:	3b01      	subs	r3, #1
 8007514:	061b      	lsls	r3, r3, #24
 8007516:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800751a:	4935      	ldr	r1, [pc, #212]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800751c:	4313      	orrs	r3, r2
 800751e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007520:	4b33      	ldr	r3, [pc, #204]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	4a32      	ldr	r2, [pc, #200]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007526:	f023 0301 	bic.w	r3, r3, #1
 800752a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800752c:	4b30      	ldr	r3, [pc, #192]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800752e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007530:	4b31      	ldr	r3, [pc, #196]	@ (80075f8 <HAL_RCC_OscConfig+0x76c>)
 8007532:	4013      	ands	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007538:	00d2      	lsls	r2, r2, #3
 800753a:	492d      	ldr	r1, [pc, #180]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800753c:	4313      	orrs	r3, r2
 800753e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007540:	4b2b      	ldr	r3, [pc, #172]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	f023 020c 	bic.w	r2, r3, #12
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754c:	4928      	ldr	r1, [pc, #160]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800754e:	4313      	orrs	r3, r2
 8007550:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007552:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	f023 0202 	bic.w	r2, r3, #2
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800755e:	4924      	ldr	r1, [pc, #144]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007560:	4313      	orrs	r3, r2
 8007562:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007564:	4b22      	ldr	r3, [pc, #136]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	4a21      	ldr	r2, [pc, #132]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800756a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800756e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007570:	4b1f      	ldr	r3, [pc, #124]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	4a1e      	ldr	r2, [pc, #120]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800757a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800757c:	4b1c      	ldr	r3, [pc, #112]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	4a1b      	ldr	r2, [pc, #108]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007582:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007588:	4b19      	ldr	r3, [pc, #100]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	4a18      	ldr	r2, [pc, #96]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007594:	4b16      	ldr	r3, [pc, #88]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a15      	ldr	r2, [pc, #84]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 800759a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800759e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a0:	f7fb fd42 	bl	8003028 <HAL_GetTick>
 80075a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075a8:	f7fb fd3e 	bl	8003028 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e091      	b.n	80076de <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075ba:	4b0d      	ldr	r3, [pc, #52]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0f0      	beq.n	80075a8 <HAL_RCC_OscConfig+0x71c>
 80075c6:	e089      	b.n	80076dc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075c8:	4b09      	ldr	r3, [pc, #36]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a08      	ldr	r2, [pc, #32]	@ (80075f0 <HAL_RCC_OscConfig+0x764>)
 80075ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d4:	f7fb fd28 	bl	8003028 <HAL_GetTick>
 80075d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075da:	e00f      	b.n	80075fc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075dc:	f7fb fd24 	bl	8003028 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d908      	bls.n	80075fc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e077      	b.n	80076de <HAL_RCC_OscConfig+0x852>
 80075ee:	bf00      	nop
 80075f0:	58024400 	.word	0x58024400
 80075f4:	fffffc0c 	.word	0xfffffc0c
 80075f8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075fc:	4b3a      	ldr	r3, [pc, #232]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e9      	bne.n	80075dc <HAL_RCC_OscConfig+0x750>
 8007608:	e068      	b.n	80076dc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800760a:	4b37      	ldr	r3, [pc, #220]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 800760c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007610:	4b35      	ldr	r3, [pc, #212]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 8007612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007614:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761a:	2b01      	cmp	r3, #1
 800761c:	d031      	beq.n	8007682 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f003 0203 	and.w	r2, r3, #3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007628:	429a      	cmp	r2, r3
 800762a:	d12a      	bne.n	8007682 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	091b      	lsrs	r3, r3, #4
 8007630:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007638:	429a      	cmp	r2, r3
 800763a:	d122      	bne.n	8007682 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007646:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007648:	429a      	cmp	r2, r3
 800764a:	d11a      	bne.n	8007682 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	0a5b      	lsrs	r3, r3, #9
 8007650:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007658:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800765a:	429a      	cmp	r2, r3
 800765c:	d111      	bne.n	8007682 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	0c1b      	lsrs	r3, r3, #16
 8007662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800766c:	429a      	cmp	r2, r3
 800766e:	d108      	bne.n	8007682 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	0e1b      	lsrs	r3, r3, #24
 8007674:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800767c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800767e:	429a      	cmp	r2, r3
 8007680:	d001      	beq.n	8007686 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e02b      	b.n	80076de <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007686:	4b18      	ldr	r3, [pc, #96]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 8007688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800768a:	08db      	lsrs	r3, r3, #3
 800768c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007690:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	429a      	cmp	r2, r3
 800769a:	d01f      	beq.n	80076dc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800769c:	4b12      	ldr	r3, [pc, #72]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	4a11      	ldr	r2, [pc, #68]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 80076a2:	f023 0301 	bic.w	r3, r3, #1
 80076a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076a8:	f7fb fcbe 	bl	8003028 <HAL_GetTick>
 80076ac:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80076ae:	bf00      	nop
 80076b0:	f7fb fcba 	bl	8003028 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d0f9      	beq.n	80076b0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076bc:	4b0a      	ldr	r3, [pc, #40]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 80076be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076c0:	4b0a      	ldr	r3, [pc, #40]	@ (80076ec <HAL_RCC_OscConfig+0x860>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80076c8:	00d2      	lsls	r2, r2, #3
 80076ca:	4907      	ldr	r1, [pc, #28]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80076d0:	4b05      	ldr	r3, [pc, #20]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	4a04      	ldr	r2, [pc, #16]	@ (80076e8 <HAL_RCC_OscConfig+0x85c>)
 80076d6:	f043 0301 	orr.w	r3, r3, #1
 80076da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3730      	adds	r7, #48	@ 0x30
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	58024400 	.word	0x58024400
 80076ec:	ffff0007 	.word	0xffff0007

080076f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e19c      	b.n	8007a3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007704:	4b8a      	ldr	r3, [pc, #552]	@ (8007930 <HAL_RCC_ClockConfig+0x240>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d910      	bls.n	8007734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007712:	4b87      	ldr	r3, [pc, #540]	@ (8007930 <HAL_RCC_ClockConfig+0x240>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f023 020f 	bic.w	r2, r3, #15
 800771a:	4985      	ldr	r1, [pc, #532]	@ (8007930 <HAL_RCC_ClockConfig+0x240>)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	4313      	orrs	r3, r2
 8007720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007722:	4b83      	ldr	r3, [pc, #524]	@ (8007930 <HAL_RCC_ClockConfig+0x240>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d001      	beq.n	8007734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e184      	b.n	8007a3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d010      	beq.n	8007762 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	4b7b      	ldr	r3, [pc, #492]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800774c:	429a      	cmp	r2, r3
 800774e:	d908      	bls.n	8007762 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007750:	4b78      	ldr	r3, [pc, #480]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	4975      	ldr	r1, [pc, #468]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 800775e:	4313      	orrs	r3, r2
 8007760:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d010      	beq.n	8007790 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	4b70      	ldr	r3, [pc, #448]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800777a:	429a      	cmp	r2, r3
 800777c:	d908      	bls.n	8007790 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800777e:	4b6d      	ldr	r3, [pc, #436]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	496a      	ldr	r1, [pc, #424]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 800778c:	4313      	orrs	r3, r2
 800778e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b00      	cmp	r3, #0
 800779a:	d010      	beq.n	80077be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	4b64      	ldr	r3, [pc, #400]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d908      	bls.n	80077be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077ac:	4b61      	ldr	r3, [pc, #388]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	495e      	ldr	r1, [pc, #376]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d010      	beq.n	80077ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69da      	ldr	r2, [r3, #28]
 80077ce:	4b59      	ldr	r3, [pc, #356]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d908      	bls.n	80077ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077da:	4b56      	ldr	r3, [pc, #344]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	4953      	ldr	r1, [pc, #332]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d010      	beq.n	800781a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	4b4d      	ldr	r3, [pc, #308]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f003 030f 	and.w	r3, r3, #15
 8007804:	429a      	cmp	r2, r3
 8007806:	d908      	bls.n	800781a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007808:	4b4a      	ldr	r3, [pc, #296]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f023 020f 	bic.w	r2, r3, #15
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	4947      	ldr	r1, [pc, #284]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007816:	4313      	orrs	r3, r2
 8007818:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d055      	beq.n	80078d2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007826:	4b43      	ldr	r3, [pc, #268]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	4940      	ldr	r1, [pc, #256]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007834:	4313      	orrs	r3, r2
 8007836:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d107      	bne.n	8007850 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007840:	4b3c      	ldr	r3, [pc, #240]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d121      	bne.n	8007890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e0f6      	b.n	8007a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b03      	cmp	r3, #3
 8007856:	d107      	bne.n	8007868 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007858:	4b36      	ldr	r3, [pc, #216]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d115      	bne.n	8007890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e0ea      	b.n	8007a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d107      	bne.n	8007880 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007870:	4b30      	ldr	r3, [pc, #192]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007878:	2b00      	cmp	r3, #0
 800787a:	d109      	bne.n	8007890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e0de      	b.n	8007a3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007880:	4b2c      	ldr	r3, [pc, #176]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e0d6      	b.n	8007a3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007890:	4b28      	ldr	r3, [pc, #160]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f023 0207 	bic.w	r2, r3, #7
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	4925      	ldr	r1, [pc, #148]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078a2:	f7fb fbc1 	bl	8003028 <HAL_GetTick>
 80078a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078a8:	e00a      	b.n	80078c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078aa:	f7fb fbbd 	bl	8003028 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e0be      	b.n	8007a3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d1eb      	bne.n	80078aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d010      	beq.n	8007900 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	4b14      	ldr	r3, [pc, #80]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d208      	bcs.n	8007900 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078ee:	4b11      	ldr	r3, [pc, #68]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f023 020f 	bic.w	r2, r3, #15
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	490e      	ldr	r1, [pc, #56]	@ (8007934 <HAL_RCC_ClockConfig+0x244>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <HAL_RCC_ClockConfig+0x240>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d214      	bcs.n	8007938 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800790e:	4b08      	ldr	r3, [pc, #32]	@ (8007930 <HAL_RCC_ClockConfig+0x240>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f023 020f 	bic.w	r2, r3, #15
 8007916:	4906      	ldr	r1, [pc, #24]	@ (8007930 <HAL_RCC_ClockConfig+0x240>)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	4313      	orrs	r3, r2
 800791c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800791e:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <HAL_RCC_ClockConfig+0x240>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d005      	beq.n	8007938 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e086      	b.n	8007a3e <HAL_RCC_ClockConfig+0x34e>
 8007930:	52002000 	.word	0x52002000
 8007934:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d010      	beq.n	8007966 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	4b3f      	ldr	r3, [pc, #252]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007950:	429a      	cmp	r2, r3
 8007952:	d208      	bcs.n	8007966 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007954:	4b3c      	ldr	r3, [pc, #240]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	4939      	ldr	r1, [pc, #228]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 8007962:	4313      	orrs	r3, r2
 8007964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d010      	beq.n	8007994 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695a      	ldr	r2, [r3, #20]
 8007976:	4b34      	ldr	r3, [pc, #208]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800797e:	429a      	cmp	r2, r3
 8007980:	d208      	bcs.n	8007994 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007982:	4b31      	ldr	r3, [pc, #196]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	492e      	ldr	r1, [pc, #184]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 8007990:	4313      	orrs	r3, r2
 8007992:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b00      	cmp	r3, #0
 800799e:	d010      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	699a      	ldr	r2, [r3, #24]
 80079a4:	4b28      	ldr	r3, [pc, #160]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d208      	bcs.n	80079c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079b0:	4b25      	ldr	r3, [pc, #148]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	4922      	ldr	r1, [pc, #136]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d010      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69da      	ldr	r2, [r3, #28]
 80079d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079da:	429a      	cmp	r2, r3
 80079dc:	d208      	bcs.n	80079f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80079de:	4b1a      	ldr	r3, [pc, #104]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	4917      	ldr	r1, [pc, #92]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80079f0:	f000 f834 	bl	8007a5c <HAL_RCC_GetSysClockFreq>
 80079f4:	4602      	mov	r2, r0
 80079f6:	4b14      	ldr	r3, [pc, #80]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	4912      	ldr	r1, [pc, #72]	@ (8007a4c <HAL_RCC_ClockConfig+0x35c>)
 8007a02:	5ccb      	ldrb	r3, [r1, r3]
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a48 <HAL_RCC_ClockConfig+0x358>)
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	4a0d      	ldr	r2, [pc, #52]	@ (8007a4c <HAL_RCC_ClockConfig+0x35c>)
 8007a18:	5cd3      	ldrb	r3, [r2, r3]
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	fa22 f303 	lsr.w	r3, r2, r3
 8007a24:	4a0a      	ldr	r2, [pc, #40]	@ (8007a50 <HAL_RCC_ClockConfig+0x360>)
 8007a26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a28:	4a0a      	ldr	r2, [pc, #40]	@ (8007a54 <HAL_RCC_ClockConfig+0x364>)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a58 <HAL_RCC_ClockConfig+0x368>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fb faae 	bl	8002f94 <HAL_InitTick>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	58024400 	.word	0x58024400
 8007a4c:	08012068 	.word	0x08012068
 8007a50:	24000034 	.word	0x24000034
 8007a54:	24000030 	.word	0x24000030
 8007a58:	24000038 	.word	0x24000038

08007a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b089      	sub	sp, #36	@ 0x24
 8007a60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a62:	4bb3      	ldr	r3, [pc, #716]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a6a:	2b18      	cmp	r3, #24
 8007a6c:	f200 8155 	bhi.w	8007d1a <HAL_RCC_GetSysClockFreq+0x2be>
 8007a70:	a201      	add	r2, pc, #4	@ (adr r2, 8007a78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007add 	.word	0x08007add
 8007a7c:	08007d1b 	.word	0x08007d1b
 8007a80:	08007d1b 	.word	0x08007d1b
 8007a84:	08007d1b 	.word	0x08007d1b
 8007a88:	08007d1b 	.word	0x08007d1b
 8007a8c:	08007d1b 	.word	0x08007d1b
 8007a90:	08007d1b 	.word	0x08007d1b
 8007a94:	08007d1b 	.word	0x08007d1b
 8007a98:	08007b03 	.word	0x08007b03
 8007a9c:	08007d1b 	.word	0x08007d1b
 8007aa0:	08007d1b 	.word	0x08007d1b
 8007aa4:	08007d1b 	.word	0x08007d1b
 8007aa8:	08007d1b 	.word	0x08007d1b
 8007aac:	08007d1b 	.word	0x08007d1b
 8007ab0:	08007d1b 	.word	0x08007d1b
 8007ab4:	08007d1b 	.word	0x08007d1b
 8007ab8:	08007b09 	.word	0x08007b09
 8007abc:	08007d1b 	.word	0x08007d1b
 8007ac0:	08007d1b 	.word	0x08007d1b
 8007ac4:	08007d1b 	.word	0x08007d1b
 8007ac8:	08007d1b 	.word	0x08007d1b
 8007acc:	08007d1b 	.word	0x08007d1b
 8007ad0:	08007d1b 	.word	0x08007d1b
 8007ad4:	08007d1b 	.word	0x08007d1b
 8007ad8:	08007b0f 	.word	0x08007b0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007adc:	4b94      	ldr	r3, [pc, #592]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d009      	beq.n	8007afc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ae8:	4b91      	ldr	r3, [pc, #580]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	08db      	lsrs	r3, r3, #3
 8007aee:	f003 0303 	and.w	r3, r3, #3
 8007af2:	4a90      	ldr	r2, [pc, #576]	@ (8007d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007af4:	fa22 f303 	lsr.w	r3, r2, r3
 8007af8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007afa:	e111      	b.n	8007d20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007afc:	4b8d      	ldr	r3, [pc, #564]	@ (8007d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007afe:	61bb      	str	r3, [r7, #24]
      break;
 8007b00:	e10e      	b.n	8007d20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007b02:	4b8d      	ldr	r3, [pc, #564]	@ (8007d38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b04:	61bb      	str	r3, [r7, #24]
      break;
 8007b06:	e10b      	b.n	8007d20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007b08:	4b8c      	ldr	r3, [pc, #560]	@ (8007d3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b0a:	61bb      	str	r3, [r7, #24]
      break;
 8007b0c:	e108      	b.n	8007d20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b0e:	4b88      	ldr	r3, [pc, #544]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007b18:	4b85      	ldr	r3, [pc, #532]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	091b      	lsrs	r3, r3, #4
 8007b1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b24:	4b82      	ldr	r3, [pc, #520]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b2e:	4b80      	ldr	r3, [pc, #512]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b32:	08db      	lsrs	r3, r3, #3
 8007b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	fb02 f303 	mul.w	r3, r2, r3
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80e1 	beq.w	8007d14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	f000 8083 	beq.w	8007c60 <HAL_RCC_GetSysClockFreq+0x204>
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	f200 80a1 	bhi.w	8007ca4 <HAL_RCC_GetSysClockFreq+0x248>
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0x114>
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d056      	beq.n	8007c1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007b6e:	e099      	b.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b70:	4b6f      	ldr	r3, [pc, #444]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d02d      	beq.n	8007bd8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	08db      	lsrs	r3, r3, #3
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	4a6b      	ldr	r2, [pc, #428]	@ (8007d34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b88:	fa22 f303 	lsr.w	r3, r2, r3
 8007b8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	ee07 3a90 	vmov	s15, r3
 8007b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba6:	4b62      	ldr	r3, [pc, #392]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007bd6:	e087      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007d44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bea:	4b51      	ldr	r3, [pc, #324]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bfe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c1a:	e065      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007d48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2e:	4b40      	ldr	r3, [pc, #256]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c5e:	e043      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007d4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c72:	4b2f      	ldr	r3, [pc, #188]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ca2:	e021      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007d48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007d40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ce6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007ce8:	4b11      	ldr	r3, [pc, #68]	@ (8007d30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cec:	0a5b      	lsrs	r3, r3, #9
 8007cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d0c:	ee17 3a90 	vmov	r3, s15
 8007d10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007d12:	e005      	b.n	8007d20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61bb      	str	r3, [r7, #24]
      break;
 8007d18:	e002      	b.n	8007d20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007d1a:	4b07      	ldr	r3, [pc, #28]	@ (8007d38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d1c:	61bb      	str	r3, [r7, #24]
      break;
 8007d1e:	bf00      	nop
  }

  return sysclockfreq;
 8007d20:	69bb      	ldr	r3, [r7, #24]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3724      	adds	r7, #36	@ 0x24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	58024400 	.word	0x58024400
 8007d34:	03d09000 	.word	0x03d09000
 8007d38:	003d0900 	.word	0x003d0900
 8007d3c:	016e3600 	.word	0x016e3600
 8007d40:	46000000 	.word	0x46000000
 8007d44:	4c742400 	.word	0x4c742400
 8007d48:	4a742400 	.word	0x4a742400
 8007d4c:	4bb71b00 	.word	0x4bb71b00

08007d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007d56:	f7ff fe81 	bl	8007a5c <HAL_RCC_GetSysClockFreq>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	4b10      	ldr	r3, [pc, #64]	@ (8007da0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	0a1b      	lsrs	r3, r3, #8
 8007d62:	f003 030f 	and.w	r3, r3, #15
 8007d66:	490f      	ldr	r1, [pc, #60]	@ (8007da4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d68:	5ccb      	ldrb	r3, [r1, r3]
 8007d6a:	f003 031f 	and.w	r3, r3, #31
 8007d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d72:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007d74:	4b0a      	ldr	r3, [pc, #40]	@ (8007da0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	4a09      	ldr	r2, [pc, #36]	@ (8007da4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d7e:	5cd3      	ldrb	r3, [r2, r3]
 8007d80:	f003 031f 	and.w	r3, r3, #31
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8a:	4a07      	ldr	r2, [pc, #28]	@ (8007da8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d8e:	4a07      	ldr	r2, [pc, #28]	@ (8007dac <HAL_RCC_GetHCLKFreq+0x5c>)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007d94:	4b04      	ldr	r3, [pc, #16]	@ (8007da8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d96:	681b      	ldr	r3, [r3, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	58024400 	.word	0x58024400
 8007da4:	08012068 	.word	0x08012068
 8007da8:	24000034 	.word	0x24000034
 8007dac:	24000030 	.word	0x24000030

08007db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007db4:	f7ff ffcc 	bl	8007d50 <HAL_RCC_GetHCLKFreq>
 8007db8:	4602      	mov	r2, r0
 8007dba:	4b06      	ldr	r3, [pc, #24]	@ (8007dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	091b      	lsrs	r3, r3, #4
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	4904      	ldr	r1, [pc, #16]	@ (8007dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007dc6:	5ccb      	ldrb	r3, [r1, r3]
 8007dc8:	f003 031f 	and.w	r3, r3, #31
 8007dcc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	08012068 	.word	0x08012068

08007ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007de0:	f7ff ffb6 	bl	8007d50 <HAL_RCC_GetHCLKFreq>
 8007de4:	4602      	mov	r2, r0
 8007de6:	4b06      	ldr	r3, [pc, #24]	@ (8007e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	0a1b      	lsrs	r3, r3, #8
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	4904      	ldr	r1, [pc, #16]	@ (8007e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007df2:	5ccb      	ldrb	r3, [r1, r3]
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	58024400 	.word	0x58024400
 8007e04:	08012068 	.word	0x08012068

08007e08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e0c:	b0c8      	sub	sp, #288	@ 0x120
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e14:	2300      	movs	r3, #0
 8007e16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007e2c:	2500      	movs	r5, #0
 8007e2e:	ea54 0305 	orrs.w	r3, r4, r5
 8007e32:	d049      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e3e:	d02f      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007e40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e44:	d828      	bhi.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e4a:	d01a      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007e4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e50:	d822      	bhi.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e5a:	d007      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007e5c:	e01c      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e5e:	4ba7      	ldr	r3, [pc, #668]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e62:	4aa6      	ldr	r2, [pc, #664]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e6a:	e01a      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e70:	3308      	adds	r3, #8
 8007e72:	2102      	movs	r1, #2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 fc43 	bl	8009700 <RCCEx_PLL2_Config>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e80:	e00f      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e86:	3328      	adds	r3, #40	@ 0x28
 8007e88:	2102      	movs	r1, #2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 fcea 	bl	8009864 <RCCEx_PLL3_Config>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007e96:	e004      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007eaa:	4b94      	ldr	r3, [pc, #592]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb8:	4a90      	ldr	r2, [pc, #576]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ebe:	e003      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ec4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007ed4:	f04f 0900 	mov.w	r9, #0
 8007ed8:	ea58 0309 	orrs.w	r3, r8, r9
 8007edc:	d047      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d82a      	bhi.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f05 	.word	0x08007f05
 8007ef4:	08007f13 	.word	0x08007f13
 8007ef8:	08007f29 	.word	0x08007f29
 8007efc:	08007f47 	.word	0x08007f47
 8007f00:	08007f47 	.word	0x08007f47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f04:	4b7d      	ldr	r3, [pc, #500]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f08:	4a7c      	ldr	r2, [pc, #496]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f10:	e01a      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f16:	3308      	adds	r3, #8
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f001 fbf0 	bl	8009700 <RCCEx_PLL2_Config>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f26:	e00f      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f2c:	3328      	adds	r3, #40	@ 0x28
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 fc97 	bl	8009864 <RCCEx_PLL3_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f3c:	e004      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f44:	e000      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f50:	4b6a      	ldr	r3, [pc, #424]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f54:	f023 0107 	bic.w	r1, r3, #7
 8007f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f5e:	4a67      	ldr	r2, [pc, #412]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f64:	e003      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007f7a:	f04f 0b00 	mov.w	fp, #0
 8007f7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007f82:	d054      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f8a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007f8e:	d036      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007f90:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007f94:	d82f      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f9a:	d032      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fa0:	d829      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fa4:	d02f      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fa8:	d825      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007faa:	2b80      	cmp	r3, #128	@ 0x80
 8007fac:	d018      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007fae:	2b80      	cmp	r3, #128	@ 0x80
 8007fb0:	d821      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007fb6:	2b40      	cmp	r3, #64	@ 0x40
 8007fb8:	d007      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007fba:	e01c      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fbc:	4b4f      	ldr	r3, [pc, #316]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007fc8:	e01e      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fce:	3308      	adds	r3, #8
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 fb94 	bl	8009700 <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007fde:	e013      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe4:	3328      	adds	r3, #40	@ 0x28
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 fc3b 	bl	8009864 <RCCEx_PLL3_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007ff4:	e008      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ffc:	e004      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007ffe:	bf00      	nop
 8008000:	e002      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008002:	bf00      	nop
 8008004:	e000      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008008:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008010:	4b3a      	ldr	r3, [pc, #232]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008014:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800801c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800801e:	4a37      	ldr	r2, [pc, #220]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008020:	430b      	orrs	r3, r1
 8008022:	6513      	str	r3, [r2, #80]	@ 0x50
 8008024:	e003      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008026:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800802a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800802e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800803a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800803e:	2300      	movs	r3, #0
 8008040:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008044:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008048:	460b      	mov	r3, r1
 800804a:	4313      	orrs	r3, r2
 800804c:	d05c      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800804e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008054:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008058:	d03b      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800805a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800805e:	d834      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008064:	d037      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800806a:	d82e      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800806c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008070:	d033      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008072:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008076:	d828      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800807c:	d01a      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800807e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008082:	d822      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d003      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800808c:	d007      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800808e:	e01c      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008090:	4b1a      	ldr	r3, [pc, #104]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008094:	4a19      	ldr	r2, [pc, #100]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800809a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800809c:	e01e      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800809e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a2:	3308      	adds	r3, #8
 80080a4:	2100      	movs	r1, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f001 fb2a 	bl	8009700 <RCCEx_PLL2_Config>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80080b2:	e013      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080b8:	3328      	adds	r3, #40	@ 0x28
 80080ba:	2100      	movs	r1, #0
 80080bc:	4618      	mov	r0, r3
 80080be:	f001 fbd1 	bl	8009864 <RCCEx_PLL3_Config>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80080c8:	e008      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080d0:	e004      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80080d2:	bf00      	nop
 80080d4:	e002      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80080d6:	bf00      	nop
 80080d8:	e000      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80080da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10d      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80080e4:	4b05      	ldr	r3, [pc, #20]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80080ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f2:	4a02      	ldr	r2, [pc, #8]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080f4:	430b      	orrs	r3, r1
 80080f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80080f8:	e006      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80080fa:	bf00      	nop
 80080fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008104:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008114:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008118:	2300      	movs	r3, #0
 800811a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800811e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008122:	460b      	mov	r3, r1
 8008124:	4313      	orrs	r3, r2
 8008126:	d03a      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800812e:	2b30      	cmp	r3, #48	@ 0x30
 8008130:	d01f      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008132:	2b30      	cmp	r3, #48	@ 0x30
 8008134:	d819      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008136:	2b20      	cmp	r3, #32
 8008138:	d00c      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800813a:	2b20      	cmp	r3, #32
 800813c:	d815      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800813e:	2b00      	cmp	r3, #0
 8008140:	d019      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008142:	2b10      	cmp	r3, #16
 8008144:	d111      	bne.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008146:	4bae      	ldr	r3, [pc, #696]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814a:	4aad      	ldr	r2, [pc, #692]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800814c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008152:	e011      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008158:	3308      	adds	r3, #8
 800815a:	2102      	movs	r1, #2
 800815c:	4618      	mov	r0, r3
 800815e:	f001 facf 	bl	8009700 <RCCEx_PLL2_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008168:	e006      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008170:	e002      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008172:	bf00      	nop
 8008174:	e000      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008178:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008180:	4b9f      	ldr	r3, [pc, #636]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008184:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800818c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800818e:	4a9c      	ldr	r2, [pc, #624]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008190:	430b      	orrs	r3, r1
 8008192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008194:	e003      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008196:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800819a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800819e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80081aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081ae:	2300      	movs	r3, #0
 80081b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80081b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4313      	orrs	r3, r2
 80081bc:	d051      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80081be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081c8:	d035      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80081ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081ce:	d82e      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80081d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081d4:	d031      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80081d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081da:	d828      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80081dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081e0:	d01a      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80081e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081e6:	d822      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80081ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081f0:	d007      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80081f2:	e01c      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f4:	4b82      	ldr	r3, [pc, #520]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f8:	4a81      	ldr	r2, [pc, #516]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008200:	e01c      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008206:	3308      	adds	r3, #8
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fa78 	bl	8009700 <RCCEx_PLL2_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008216:	e011      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800821c:	3328      	adds	r3, #40	@ 0x28
 800821e:	2100      	movs	r1, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f001 fb1f 	bl	8009864 <RCCEx_PLL3_Config>
 8008226:	4603      	mov	r3, r0
 8008228:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800822c:	e006      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008234:	e002      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008236:	bf00      	nop
 8008238:	e000      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800823a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800823c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008244:	4b6e      	ldr	r3, [pc, #440]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008248:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800824c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008252:	4a6b      	ldr	r2, [pc, #428]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008254:	430b      	orrs	r3, r1
 8008256:	6513      	str	r3, [r2, #80]	@ 0x50
 8008258:	e003      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800825e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800826e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008272:	2300      	movs	r3, #0
 8008274:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008278:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800827c:	460b      	mov	r3, r1
 800827e:	4313      	orrs	r3, r2
 8008280:	d053      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800828c:	d033      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800828e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008292:	d82c      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008294:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008298:	d02f      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800829a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800829e:	d826      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082a4:	d02b      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80082a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082aa:	d820      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082b0:	d012      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80082b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082b6:	d81a      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d022      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80082bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082c0:	d115      	bne.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c6:	3308      	adds	r3, #8
 80082c8:	2101      	movs	r1, #1
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 fa18 	bl	8009700 <RCCEx_PLL2_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082d6:	e015      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082dc:	3328      	adds	r3, #40	@ 0x28
 80082de:	2101      	movs	r1, #1
 80082e0:	4618      	mov	r0, r3
 80082e2:	f001 fabf 	bl	8009864 <RCCEx_PLL3_Config>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082ec:	e00a      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082f4:	e006      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80082f6:	bf00      	nop
 80082f8:	e004      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80082fa:	bf00      	nop
 80082fc:	e002      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80082fe:	bf00      	nop
 8008300:	e000      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008304:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800830c:	4b3c      	ldr	r3, [pc, #240]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800830e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008310:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800831a:	4a39      	ldr	r2, [pc, #228]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800831c:	430b      	orrs	r3, r1
 800831e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008320:	e003      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008322:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008326:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800832a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008336:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800833a:	2300      	movs	r3, #0
 800833c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008340:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008344:	460b      	mov	r3, r1
 8008346:	4313      	orrs	r3, r2
 8008348:	d060      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800834a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800834e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008352:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008356:	d039      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008358:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800835c:	d832      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800835e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008362:	d035      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008364:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008368:	d82c      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800836a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800836e:	d031      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008374:	d826      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008376:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800837a:	d02d      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800837c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008380:	d820      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008386:	d012      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800838c:	d81a      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d024      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008396:	d115      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839c:	3308      	adds	r3, #8
 800839e:	2101      	movs	r1, #1
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 f9ad 	bl	8009700 <RCCEx_PLL2_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083ac:	e017      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b2:	3328      	adds	r3, #40	@ 0x28
 80083b4:	2101      	movs	r1, #1
 80083b6:	4618      	mov	r0, r3
 80083b8:	f001 fa54 	bl	8009864 <RCCEx_PLL3_Config>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083c2:	e00c      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083ca:	e008      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80083cc:	bf00      	nop
 80083ce:	e006      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80083d0:	bf00      	nop
 80083d2:	e004      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80083d4:	bf00      	nop
 80083d6:	e002      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80083d8:	bf00      	nop
 80083da:	e000      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80083dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10e      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80083e6:	4b06      	ldr	r3, [pc, #24]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80083ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80083f6:	4a02      	ldr	r2, [pc, #8]	@ (8008400 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083f8:	430b      	orrs	r3, r1
 80083fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80083fc:	e006      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x604>
 80083fe:	bf00      	nop
 8008400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008408:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800840c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800841c:	2300      	movs	r3, #0
 800841e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008426:	460b      	mov	r3, r1
 8008428:	4313      	orrs	r3, r2
 800842a:	d037      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800842c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008430:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008436:	d00e      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800843c:	d816      	bhi.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d018      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008446:	d111      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008448:	4bc4      	ldr	r3, [pc, #784]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844c:	4ac3      	ldr	r2, [pc, #780]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800844e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008454:	e00f      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845a:	3308      	adds	r3, #8
 800845c:	2101      	movs	r1, #1
 800845e:	4618      	mov	r0, r3
 8008460:	f001 f94e 	bl	8009700 <RCCEx_PLL2_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800846a:	e004      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008472:	e000      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008476:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10a      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800847e:	4bb7      	ldr	r3, [pc, #732]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008482:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800848a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800848c:	4ab3      	ldr	r2, [pc, #716]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800848e:	430b      	orrs	r3, r1
 8008490:	6513      	str	r3, [r2, #80]	@ 0x50
 8008492:	e003      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008494:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008498:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800849c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80084a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084ac:	2300      	movs	r3, #0
 80084ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80084b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4313      	orrs	r3, r2
 80084ba:	d039      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80084bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d81c      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80084c6:	a201      	add	r2, pc, #4	@ (adr r2, 80084cc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	08008509 	.word	0x08008509
 80084d0:	080084dd 	.word	0x080084dd
 80084d4:	080084eb 	.word	0x080084eb
 80084d8:	08008509 	.word	0x08008509
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084dc:	4b9f      	ldr	r3, [pc, #636]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	4a9e      	ldr	r2, [pc, #632]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084e8:	e00f      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ee:	3308      	adds	r3, #8
 80084f0:	2102      	movs	r1, #2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 f904 	bl	8009700 <RCCEx_PLL2_Config>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084fe:	e004      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008506:	e000      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008512:	4b92      	ldr	r3, [pc, #584]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008516:	f023 0103 	bic.w	r1, r3, #3
 800851a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800851e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008520:	4a8e      	ldr	r2, [pc, #568]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008522:	430b      	orrs	r3, r1
 8008524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008526:	e003      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800852c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800853c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008540:	2300      	movs	r3, #0
 8008542:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008546:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800854a:	460b      	mov	r3, r1
 800854c:	4313      	orrs	r3, r2
 800854e:	f000 8099 	beq.w	8008684 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008552:	4b83      	ldr	r3, [pc, #524]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a82      	ldr	r2, [pc, #520]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800855c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800855e:	f7fa fd63 	bl	8003028 <HAL_GetTick>
 8008562:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008566:	e00b      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008568:	f7fa fd5e 	bl	8003028 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	2b64      	cmp	r3, #100	@ 0x64
 8008576:	d903      	bls.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800857e:	e005      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008580:	4b77      	ldr	r3, [pc, #476]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0ed      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800858c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008590:	2b00      	cmp	r3, #0
 8008592:	d173      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008594:	4b71      	ldr	r3, [pc, #452]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008596:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800859c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085a0:	4053      	eors	r3, r2
 80085a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d015      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085aa:	4b6c      	ldr	r3, [pc, #432]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085b2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085b6:	4b69      	ldr	r3, [pc, #420]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ba:	4a68      	ldr	r2, [pc, #416]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085c2:	4b66      	ldr	r3, [pc, #408]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085c6:	4a65      	ldr	r2, [pc, #404]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80085ce:	4a63      	ldr	r2, [pc, #396]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80085d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e2:	d118      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e4:	f7fa fd20 	bl	8003028 <HAL_GetTick>
 80085e8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085ec:	e00d      	b.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ee:	f7fa fd1b 	bl	8003028 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80085f8:	1ad2      	subs	r2, r2, r3
 80085fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80085fe:	429a      	cmp	r2, r3
 8008600:	d903      	bls.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008608:	e005      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800860a:	4b54      	ldr	r3, [pc, #336]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0eb      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008616:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800861a:	2b00      	cmp	r3, #0
 800861c:	d129      	bne.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800861e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008622:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800862a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800862e:	d10e      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008630:	4b4a      	ldr	r3, [pc, #296]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800863c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008640:	091a      	lsrs	r2, r3, #4
 8008642:	4b48      	ldr	r3, [pc, #288]	@ (8008764 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008644:	4013      	ands	r3, r2
 8008646:	4a45      	ldr	r2, [pc, #276]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008648:	430b      	orrs	r3, r1
 800864a:	6113      	str	r3, [r2, #16]
 800864c:	e005      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800864e:	4b43      	ldr	r3, [pc, #268]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	4a42      	ldr	r2, [pc, #264]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008654:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008658:	6113      	str	r3, [r2, #16]
 800865a:	4b40      	ldr	r3, [pc, #256]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800865c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800865e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800866a:	4a3c      	ldr	r2, [pc, #240]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800866c:	430b      	orrs	r3, r1
 800866e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008670:	e008      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008672:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008676:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800867a:	e003      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008680:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f002 0301 	and.w	r3, r2, #1
 8008690:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008694:	2300      	movs	r3, #0
 8008696:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800869a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800869e:	460b      	mov	r3, r1
 80086a0:	4313      	orrs	r3, r2
 80086a2:	f000 8090 	beq.w	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80086a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ae:	2b28      	cmp	r3, #40	@ 0x28
 80086b0:	d870      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80086b2:	a201      	add	r2, pc, #4	@ (adr r2, 80086b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	0800879d 	.word	0x0800879d
 80086bc:	08008795 	.word	0x08008795
 80086c0:	08008795 	.word	0x08008795
 80086c4:	08008795 	.word	0x08008795
 80086c8:	08008795 	.word	0x08008795
 80086cc:	08008795 	.word	0x08008795
 80086d0:	08008795 	.word	0x08008795
 80086d4:	08008795 	.word	0x08008795
 80086d8:	08008769 	.word	0x08008769
 80086dc:	08008795 	.word	0x08008795
 80086e0:	08008795 	.word	0x08008795
 80086e4:	08008795 	.word	0x08008795
 80086e8:	08008795 	.word	0x08008795
 80086ec:	08008795 	.word	0x08008795
 80086f0:	08008795 	.word	0x08008795
 80086f4:	08008795 	.word	0x08008795
 80086f8:	0800877f 	.word	0x0800877f
 80086fc:	08008795 	.word	0x08008795
 8008700:	08008795 	.word	0x08008795
 8008704:	08008795 	.word	0x08008795
 8008708:	08008795 	.word	0x08008795
 800870c:	08008795 	.word	0x08008795
 8008710:	08008795 	.word	0x08008795
 8008714:	08008795 	.word	0x08008795
 8008718:	0800879d 	.word	0x0800879d
 800871c:	08008795 	.word	0x08008795
 8008720:	08008795 	.word	0x08008795
 8008724:	08008795 	.word	0x08008795
 8008728:	08008795 	.word	0x08008795
 800872c:	08008795 	.word	0x08008795
 8008730:	08008795 	.word	0x08008795
 8008734:	08008795 	.word	0x08008795
 8008738:	0800879d 	.word	0x0800879d
 800873c:	08008795 	.word	0x08008795
 8008740:	08008795 	.word	0x08008795
 8008744:	08008795 	.word	0x08008795
 8008748:	08008795 	.word	0x08008795
 800874c:	08008795 	.word	0x08008795
 8008750:	08008795 	.word	0x08008795
 8008754:	08008795 	.word	0x08008795
 8008758:	0800879d 	.word	0x0800879d
 800875c:	58024400 	.word	0x58024400
 8008760:	58024800 	.word	0x58024800
 8008764:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800876c:	3308      	adds	r3, #8
 800876e:	2101      	movs	r1, #1
 8008770:	4618      	mov	r0, r3
 8008772:	f000 ffc5 	bl	8009700 <RCCEx_PLL2_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800877c:	e00f      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800877e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008782:	3328      	adds	r3, #40	@ 0x28
 8008784:	2101      	movs	r1, #1
 8008786:	4618      	mov	r0, r3
 8008788:	f001 f86c 	bl	8009864 <RCCEx_PLL3_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008792:	e004      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800879a:	e000      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800879c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800879e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10b      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087a6:	4bc0      	ldr	r3, [pc, #768]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80087ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087b6:	4abc      	ldr	r2, [pc, #752]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087b8:	430b      	orrs	r3, r1
 80087ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80087bc:	e003      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f002 0302 	and.w	r3, r2, #2
 80087d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80087dc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80087e0:	460b      	mov	r3, r1
 80087e2:	4313      	orrs	r3, r2
 80087e4:	d043      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80087e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ee:	2b05      	cmp	r3, #5
 80087f0:	d824      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80087f2:	a201      	add	r2, pc, #4	@ (adr r2, 80087f8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f8:	08008845 	.word	0x08008845
 80087fc:	08008811 	.word	0x08008811
 8008800:	08008827 	.word	0x08008827
 8008804:	08008845 	.word	0x08008845
 8008808:	08008845 	.word	0x08008845
 800880c:	08008845 	.word	0x08008845
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008814:	3308      	adds	r3, #8
 8008816:	2101      	movs	r1, #1
 8008818:	4618      	mov	r0, r3
 800881a:	f000 ff71 	bl	8009700 <RCCEx_PLL2_Config>
 800881e:	4603      	mov	r3, r0
 8008820:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008824:	e00f      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800882a:	3328      	adds	r3, #40	@ 0x28
 800882c:	2101      	movs	r1, #1
 800882e:	4618      	mov	r0, r3
 8008830:	f001 f818 	bl	8009864 <RCCEx_PLL3_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800883a:	e004      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008842:	e000      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008846:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800884e:	4b96      	ldr	r3, [pc, #600]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008852:	f023 0107 	bic.w	r1, r3, #7
 8008856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800885a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885e:	4a92      	ldr	r2, [pc, #584]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008860:	430b      	orrs	r3, r1
 8008862:	6553      	str	r3, [r2, #84]	@ 0x54
 8008864:	e003      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008866:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800886a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800886e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f002 0304 	and.w	r3, r2, #4
 800887a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800887e:	2300      	movs	r3, #0
 8008880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008884:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008888:	460b      	mov	r3, r1
 800888a:	4313      	orrs	r3, r2
 800888c:	d043      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800888e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008896:	2b05      	cmp	r3, #5
 8008898:	d824      	bhi.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800889a:	a201      	add	r2, pc, #4	@ (adr r2, 80088a0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	080088ed 	.word	0x080088ed
 80088a4:	080088b9 	.word	0x080088b9
 80088a8:	080088cf 	.word	0x080088cf
 80088ac:	080088ed 	.word	0x080088ed
 80088b0:	080088ed 	.word	0x080088ed
 80088b4:	080088ed 	.word	0x080088ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088bc:	3308      	adds	r3, #8
 80088be:	2101      	movs	r1, #1
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 ff1d 	bl	8009700 <RCCEx_PLL2_Config>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088cc:	e00f      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d2:	3328      	adds	r3, #40	@ 0x28
 80088d4:	2101      	movs	r1, #1
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 ffc4 	bl	8009864 <RCCEx_PLL3_Config>
 80088dc:	4603      	mov	r3, r0
 80088de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088e2:	e004      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088ea:	e000      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80088ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10b      	bne.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088f6:	4b6c      	ldr	r3, [pc, #432]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088fa:	f023 0107 	bic.w	r1, r3, #7
 80088fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008902:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008906:	4a68      	ldr	r2, [pc, #416]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008908:	430b      	orrs	r3, r1
 800890a:	6593      	str	r3, [r2, #88]	@ 0x58
 800890c:	e003      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800890e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008912:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f002 0320 	and.w	r3, r2, #32
 8008922:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008926:	2300      	movs	r3, #0
 8008928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800892c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008930:	460b      	mov	r3, r1
 8008932:	4313      	orrs	r3, r2
 8008934:	d055      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800893a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800893e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008942:	d033      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008948:	d82c      	bhi.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800894a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800894e:	d02f      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008954:	d826      	bhi.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800895a:	d02b      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800895c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008960:	d820      	bhi.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008966:	d012      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800896c:	d81a      	bhi.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800896e:	2b00      	cmp	r3, #0
 8008970:	d022      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008976:	d115      	bne.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800897c:	3308      	adds	r3, #8
 800897e:	2100      	movs	r1, #0
 8008980:	4618      	mov	r0, r3
 8008982:	f000 febd 	bl	8009700 <RCCEx_PLL2_Config>
 8008986:	4603      	mov	r3, r0
 8008988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800898c:	e015      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800898e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008992:	3328      	adds	r3, #40	@ 0x28
 8008994:	2102      	movs	r1, #2
 8008996:	4618      	mov	r0, r3
 8008998:	f000 ff64 	bl	8009864 <RCCEx_PLL3_Config>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089a2:	e00a      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089aa:	e006      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089ac:	bf00      	nop
 80089ae:	e004      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089b0:	bf00      	nop
 80089b2:	e002      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089b4:	bf00      	nop
 80089b6:	e000      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10b      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089c2:	4b39      	ldr	r3, [pc, #228]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80089c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80089ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089d2:	4a35      	ldr	r2, [pc, #212]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80089d4:	430b      	orrs	r3, r1
 80089d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80089d8:	e003      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80089e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80089ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089f2:	2300      	movs	r3, #0
 80089f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80089f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4313      	orrs	r3, r2
 8008a00:	d058      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a0e:	d033      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008a10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a14:	d82c      	bhi.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a1a:	d02f      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a20:	d826      	bhi.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a26:	d02b      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008a28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a2c:	d820      	bhi.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a32:	d012      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a38:	d81a      	bhi.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d022      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a42:	d115      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a48:	3308      	adds	r3, #8
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fe57 	bl	8009700 <RCCEx_PLL2_Config>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a58:	e015      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a5e:	3328      	adds	r3, #40	@ 0x28
 8008a60:	2102      	movs	r1, #2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fefe 	bl	8009864 <RCCEx_PLL3_Config>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a6e:	e00a      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a76:	e006      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008a78:	bf00      	nop
 8008a7a:	e004      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008a7c:	bf00      	nop
 8008a7e:	e002      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008a80:	bf00      	nop
 8008a82:	e000      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10e      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a8e:	4b06      	ldr	r3, [pc, #24]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a9e:	4a02      	ldr	r2, [pc, #8]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008aa4:	e006      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008aa6:	bf00      	nop
 8008aa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ab0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008aca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	d055      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ad8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008adc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ae0:	d033      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008ae2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ae6:	d82c      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aec:	d02f      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008aee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008af2:	d826      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008af4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008af8:	d02b      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008afa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008afe:	d820      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b04:	d012      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008b06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b0a:	d81a      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d022      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b14:	d115      	bne.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fdee 	bl	8009700 <RCCEx_PLL2_Config>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b2a:	e015      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b30:	3328      	adds	r3, #40	@ 0x28
 8008b32:	2102      	movs	r1, #2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fe95 	bl	8009864 <RCCEx_PLL3_Config>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b40:	e00a      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b48:	e006      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b4a:	bf00      	nop
 8008b4c:	e004      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b4e:	bf00      	nop
 8008b50:	e002      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b52:	bf00      	nop
 8008b54:	e000      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10b      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b60:	4ba1      	ldr	r3, [pc, #644]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b70:	4a9d      	ldr	r2, [pc, #628]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008b72:	430b      	orrs	r3, r1
 8008b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b76:	e003      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f002 0308 	and.w	r3, r2, #8
 8008b8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b90:	2300      	movs	r3, #0
 8008b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	d01e      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bac:	d10c      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb2:	3328      	adds	r3, #40	@ 0x28
 8008bb4:	2102      	movs	r1, #2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fe54 	bl	8009864 <RCCEx_PLL3_Config>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008bc8:	4b87      	ldr	r3, [pc, #540]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bcc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bd8:	4a83      	ldr	r2, [pc, #524]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bda:	430b      	orrs	r3, r1
 8008bdc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f002 0310 	and.w	r3, r2, #16
 8008bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008bf4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	d01e      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c0a:	d10c      	bne.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c10:	3328      	adds	r3, #40	@ 0x28
 8008c12:	2102      	movs	r1, #2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fe25 	bl	8009864 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c26:	4b70      	ldr	r3, [pc, #448]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c36:	4a6c      	ldr	r2, [pc, #432]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008c56:	460b      	mov	r3, r1
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	d03e      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c68:	d022      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c6e:	d81b      	bhi.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c78:	d00b      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008c7a:	e015      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c80:	3308      	adds	r3, #8
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 fd3b 	bl	8009700 <RCCEx_PLL2_Config>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c90:	e00f      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c96:	3328      	adds	r3, #40	@ 0x28
 8008c98:	2102      	movs	r1, #2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fde2 	bl	8009864 <RCCEx_PLL3_Config>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ca6:	e004      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008cae:	e000      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cba:	4b4b      	ldr	r3, [pc, #300]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008cca:	4a47      	ldr	r2, [pc, #284]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cd0:	e003      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ce8:	2300      	movs	r3, #0
 8008cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	d03b      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d02:	d01f      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008d04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d08:	d818      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d0e:	d003      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008d10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d14:	d007      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008d16:	e011      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d18:	4b33      	ldr	r3, [pc, #204]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1c:	4a32      	ldr	r2, [pc, #200]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d24:	e00f      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d2a:	3328      	adds	r3, #40	@ 0x28
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fd98 	bl	8009864 <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d3a:	e004      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d42:	e000      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10b      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d4e:	4b26      	ldr	r3, [pc, #152]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d5e:	4a22      	ldr	r2, [pc, #136]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d60:	430b      	orrs	r3, r1
 8008d62:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d64:	e003      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008d7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008d84:	460b      	mov	r3, r1
 8008d86:	4313      	orrs	r3, r2
 8008d88:	d034      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d98:	d007      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008d9a:	e011      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d9c:	4b12      	ldr	r3, [pc, #72]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	4a11      	ldr	r2, [pc, #68]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008da8:	e00e      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dae:	3308      	adds	r3, #8
 8008db0:	2102      	movs	r1, #2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fca4 	bl	8009700 <RCCEx_PLL2_Config>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008dbe:	e003      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10d      	bne.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008dd0:	4b05      	ldr	r3, [pc, #20]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dde:	4a02      	ldr	r2, [pc, #8]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de0:	430b      	orrs	r3, r1
 8008de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008de4:	e006      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008de6:	bf00      	nop
 8008de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008df0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e02:	2300      	movs	r3, #0
 8008e04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	d00c      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e14:	3328      	adds	r3, #40	@ 0x28
 8008e16:	2102      	movs	r1, #2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fd23 	bl	8009864 <RCCEx_PLL3_Config>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008e36:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e38:	2300      	movs	r3, #0
 8008e3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008e40:	460b      	mov	r3, r1
 8008e42:	4313      	orrs	r3, r2
 8008e44:	d038      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e52:	d018      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008e54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e58:	d811      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e5e:	d014      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e64:	d80b      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d011      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e6e:	d106      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e70:	4bc3      	ldr	r3, [pc, #780]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	4ac2      	ldr	r2, [pc, #776]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008e7c:	e008      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e84:	e004      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008e86:	bf00      	nop
 8008e88:	e002      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008e8a:	bf00      	nop
 8008e8c:	e000      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10b      	bne.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e98:	4bb9      	ldr	r3, [pc, #740]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ea8:	4ab5      	ldr	r2, [pc, #724]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	6553      	str	r3, [r2, #84]	@ 0x54
 8008eae:	e003      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008eca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	d009      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ed4:	4baa      	ldr	r3, [pc, #680]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ee2:	4aa7      	ldr	r2, [pc, #668]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008efa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008efe:	460b      	mov	r3, r1
 8008f00:	4313      	orrs	r3, r2
 8008f02:	d009      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f04:	4b9e      	ldr	r3, [pc, #632]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f08:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f12:	4a9b      	ldr	r2, [pc, #620]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f14:	430b      	orrs	r3, r1
 8008f16:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f26:	2300      	movs	r3, #0
 8008f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4313      	orrs	r3, r2
 8008f32:	d009      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008f34:	4b92      	ldr	r3, [pc, #584]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f38:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f42:	4a8f      	ldr	r2, [pc, #572]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f44:	430b      	orrs	r3, r1
 8008f46:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f56:	2300      	movs	r3, #0
 8008f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4313      	orrs	r3, r2
 8008f62:	d00e      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f64:	4b86      	ldr	r3, [pc, #536]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	4a85      	ldr	r2, [pc, #532]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f6e:	6113      	str	r3, [r2, #16]
 8008f70:	4b83      	ldr	r3, [pc, #524]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f72:	6919      	ldr	r1, [r3, #16]
 8008f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008f7c:	4a80      	ldr	r2, [pc, #512]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f90:	2300      	movs	r3, #0
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f94:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	d009      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f9e:	4b78      	ldr	r3, [pc, #480]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fa2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fac:	4a74      	ldr	r2, [pc, #464]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	d00a      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008fce:	4b6c      	ldr	r3, [pc, #432]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fd2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fde:	4a68      	ldr	r2, [pc, #416]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	2100      	movs	r1, #0
 8008fee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ff6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	d011      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009004:	3308      	adds	r3, #8
 8009006:	2100      	movs	r1, #0
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fb79 	bl	8009700 <RCCEx_PLL2_Config>
 800900e:	4603      	mov	r3, r0
 8009010:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009020:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	2100      	movs	r1, #0
 800902e:	6239      	str	r1, [r7, #32]
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
 8009036:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800903a:	460b      	mov	r3, r1
 800903c:	4313      	orrs	r3, r2
 800903e:	d011      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009044:	3308      	adds	r3, #8
 8009046:	2101      	movs	r1, #1
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fb59 	bl	8009700 <RCCEx_PLL2_Config>
 800904e:	4603      	mov	r3, r0
 8009050:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009054:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009060:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	2100      	movs	r1, #0
 800906e:	61b9      	str	r1, [r7, #24]
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	61fb      	str	r3, [r7, #28]
 8009076:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800907a:	460b      	mov	r3, r1
 800907c:	4313      	orrs	r3, r2
 800907e:	d011      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009084:	3308      	adds	r3, #8
 8009086:	2102      	movs	r1, #2
 8009088:	4618      	mov	r0, r3
 800908a:	f000 fb39 	bl	8009700 <RCCEx_PLL2_Config>
 800908e:	4603      	mov	r3, r0
 8009090:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009094:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80090a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	2100      	movs	r1, #0
 80090ae:	6139      	str	r1, [r7, #16]
 80090b0:	f003 0308 	and.w	r3, r3, #8
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80090ba:	460b      	mov	r3, r1
 80090bc:	4313      	orrs	r3, r2
 80090be:	d011      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090c4:	3328      	adds	r3, #40	@ 0x28
 80090c6:	2100      	movs	r1, #0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fbcb 	bl	8009864 <RCCEx_PLL3_Config>
 80090ce:	4603      	mov	r3, r0
 80090d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80090d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d003      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80090e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	2100      	movs	r1, #0
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	f003 0310 	and.w	r3, r3, #16
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090fa:	460b      	mov	r3, r1
 80090fc:	4313      	orrs	r3, r2
 80090fe:	d011      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009104:	3328      	adds	r3, #40	@ 0x28
 8009106:	2101      	movs	r1, #1
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fbab 	bl	8009864 <RCCEx_PLL3_Config>
 800910e:	4603      	mov	r3, r0
 8009110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009114:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009120:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009124:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	2100      	movs	r1, #0
 800912e:	6039      	str	r1, [r7, #0]
 8009130:	f003 0320 	and.w	r3, r3, #32
 8009134:	607b      	str	r3, [r7, #4]
 8009136:	e9d7 1200 	ldrd	r1, r2, [r7]
 800913a:	460b      	mov	r3, r1
 800913c:	4313      	orrs	r3, r2
 800913e:	d011      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009144:	3328      	adds	r3, #40	@ 0x28
 8009146:	2102      	movs	r1, #2
 8009148:	4618      	mov	r0, r3
 800914a:	f000 fb8b 	bl	8009864 <RCCEx_PLL3_Config>
 800914e:	4603      	mov	r3, r0
 8009150:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009154:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009160:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009164:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	e000      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
}
 8009172:	4618      	mov	r0, r3
 8009174:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009178:	46bd      	mov	sp, r7
 800917a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800917e:	bf00      	nop
 8009180:	58024400 	.word	0x58024400

08009184 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009188:	f7fe fde2 	bl	8007d50 <HAL_RCC_GetHCLKFreq>
 800918c:	4602      	mov	r2, r0
 800918e:	4b06      	ldr	r3, [pc, #24]	@ (80091a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	091b      	lsrs	r3, r3, #4
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	4904      	ldr	r1, [pc, #16]	@ (80091ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800919a:	5ccb      	ldrb	r3, [r1, r3]
 800919c:	f003 031f 	and.w	r3, r3, #31
 80091a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	58024400 	.word	0x58024400
 80091ac:	08012068 	.word	0x08012068

080091b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b089      	sub	sp, #36	@ 0x24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091b8:	4ba1      	ldr	r3, [pc, #644]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80091c2:	4b9f      	ldr	r3, [pc, #636]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c6:	0b1b      	lsrs	r3, r3, #12
 80091c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80091ce:	4b9c      	ldr	r3, [pc, #624]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d2:	091b      	lsrs	r3, r3, #4
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80091da:	4b99      	ldr	r3, [pc, #612]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091de:	08db      	lsrs	r3, r3, #3
 80091e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	fb02 f303 	mul.w	r3, r2, r3
 80091ea:	ee07 3a90 	vmov	s15, r3
 80091ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 8111 	beq.w	8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b02      	cmp	r3, #2
 8009202:	f000 8083 	beq.w	800930c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b02      	cmp	r3, #2
 800920a:	f200 80a1 	bhi.w	8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d056      	beq.n	80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800921a:	e099      	b.n	8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800921c:	4b88      	ldr	r3, [pc, #544]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0320 	and.w	r3, r3, #32
 8009224:	2b00      	cmp	r3, #0
 8009226:	d02d      	beq.n	8009284 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009228:	4b85      	ldr	r3, [pc, #532]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	08db      	lsrs	r3, r3, #3
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	4a84      	ldr	r2, [pc, #528]	@ (8009444 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009234:	fa22 f303 	lsr.w	r3, r2, r3
 8009238:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	ee07 3a90 	vmov	s15, r3
 8009240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	ee07 3a90 	vmov	s15, r3
 800924a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009252:	4b7b      	ldr	r3, [pc, #492]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925a:	ee07 3a90 	vmov	s15, r3
 800925e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009262:	ed97 6a03 	vldr	s12, [r7, #12]
 8009266:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800926a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800926e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800927a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800927e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009282:	e087      	b.n	8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800944c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009296:	4b6a      	ldr	r3, [pc, #424]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929e:	ee07 3a90 	vmov	s15, r3
 80092a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092c6:	e065      	b.n	8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092da:	4b59      	ldr	r3, [pc, #356]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800930a:	e043      	b.n	8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009316:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009454 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800931a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931e:	4b48      	ldr	r3, [pc, #288]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009332:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800933a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800934e:	e021      	b.n	8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800935e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009362:	4b37      	ldr	r3, [pc, #220]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009372:	ed97 6a03 	vldr	s12, [r7, #12]
 8009376:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800937a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800937e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009392:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009394:	4b2a      	ldr	r3, [pc, #168]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009398:	0a5b      	lsrs	r3, r3, #9
 800939a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80093b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ba:	ee17 2a90 	vmov	r2, s15
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80093c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c6:	0c1b      	lsrs	r3, r3, #16
 80093c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093cc:	ee07 3a90 	vmov	s15, r3
 80093d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80093e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e8:	ee17 2a90 	vmov	r2, s15
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80093f0:	4b13      	ldr	r3, [pc, #76]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f4:	0e1b      	lsrs	r3, r3, #24
 80093f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800940a:	edd7 6a07 	vldr	s13, [r7, #28]
 800940e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009416:	ee17 2a90 	vmov	r2, s15
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800941e:	e008      	b.n	8009432 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	609a      	str	r2, [r3, #8]
}
 8009432:	bf00      	nop
 8009434:	3724      	adds	r7, #36	@ 0x24
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	58024400 	.word	0x58024400
 8009444:	03d09000 	.word	0x03d09000
 8009448:	46000000 	.word	0x46000000
 800944c:	4c742400 	.word	0x4c742400
 8009450:	4a742400 	.word	0x4a742400
 8009454:	4bb71b00 	.word	0x4bb71b00

08009458 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009458:	b480      	push	{r7}
 800945a:	b089      	sub	sp, #36	@ 0x24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009460:	4ba1      	ldr	r3, [pc, #644]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800946a:	4b9f      	ldr	r3, [pc, #636]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800946c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946e:	0d1b      	lsrs	r3, r3, #20
 8009470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009474:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009476:	4b9c      	ldr	r3, [pc, #624]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009482:	4b99      	ldr	r3, [pc, #612]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009486:	08db      	lsrs	r3, r3, #3
 8009488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	fb02 f303 	mul.w	r3, r2, r3
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 8111 	beq.w	80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	f000 8083 	beq.w	80095b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	f200 80a1 	bhi.w	80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d056      	beq.n	8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80094c2:	e099      	b.n	80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094c4:	4b88      	ldr	r3, [pc, #544]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0320 	and.w	r3, r3, #32
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d02d      	beq.n	800952c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094d0:	4b85      	ldr	r3, [pc, #532]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	08db      	lsrs	r3, r3, #3
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	4a84      	ldr	r2, [pc, #528]	@ (80096ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80094dc:	fa22 f303 	lsr.w	r3, r2, r3
 80094e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	ee07 3a90 	vmov	s15, r3
 80094e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094fa:	4b7b      	ldr	r3, [pc, #492]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009502:	ee07 3a90 	vmov	s15, r3
 8009506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800950a:	ed97 6a03 	vldr	s12, [r7, #12]
 800950e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800951a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800951e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009526:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800952a:	e087      	b.n	800963c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	ee07 3a90 	vmov	s15, r3
 8009532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009536:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80096f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800953a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800953e:	4b6a      	ldr	r3, [pc, #424]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009546:	ee07 3a90 	vmov	s15, r3
 800954a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800954e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009552:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800955a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800955e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800956a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800956e:	e065      	b.n	800963c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80096f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800957e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009582:	4b59      	ldr	r3, [pc, #356]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009592:	ed97 6a03 	vldr	s12, [r7, #12]
 8009596:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800959a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800959e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095b2:	e043      	b.n	800963c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80096fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80095c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095c6:	4b48      	ldr	r3, [pc, #288]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095f6:	e021      	b.n	800963c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80096f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960a:	4b37      	ldr	r3, [pc, #220]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800960c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961a:	ed97 6a03 	vldr	s12, [r7, #12]
 800961e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800962e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800963a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800963c:	4b2a      	ldr	r3, [pc, #168]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800963e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009640:	0a5b      	lsrs	r3, r3, #9
 8009642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009656:	edd7 6a07 	vldr	s13, [r7, #28]
 800965a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800965e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009662:	ee17 2a90 	vmov	r2, s15
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800966a:	4b1f      	ldr	r3, [pc, #124]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	0c1b      	lsrs	r3, r3, #16
 8009670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009680:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009684:	edd7 6a07 	vldr	s13, [r7, #28]
 8009688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800968c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009690:	ee17 2a90 	vmov	r2, s15
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009698:	4b13      	ldr	r3, [pc, #76]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800969a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969c:	0e1b      	lsrs	r3, r3, #24
 800969e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096be:	ee17 2a90 	vmov	r2, s15
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80096c6:	e008      	b.n	80096da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	609a      	str	r2, [r3, #8]
}
 80096da:	bf00      	nop
 80096dc:	3724      	adds	r7, #36	@ 0x24
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	58024400 	.word	0x58024400
 80096ec:	03d09000 	.word	0x03d09000
 80096f0:	46000000 	.word	0x46000000
 80096f4:	4c742400 	.word	0x4c742400
 80096f8:	4a742400 	.word	0x4a742400
 80096fc:	4bb71b00 	.word	0x4bb71b00

08009700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800970e:	4b53      	ldr	r3, [pc, #332]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009712:	f003 0303 	and.w	r3, r3, #3
 8009716:	2b03      	cmp	r3, #3
 8009718:	d101      	bne.n	800971e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e099      	b.n	8009852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800971e:	4b4f      	ldr	r3, [pc, #316]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a4e      	ldr	r2, [pc, #312]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009724:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800972a:	f7f9 fc7d 	bl	8003028 <HAL_GetTick>
 800972e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009730:	e008      	b.n	8009744 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009732:	f7f9 fc79 	bl	8003028 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	d901      	bls.n	8009744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e086      	b.n	8009852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009744:	4b45      	ldr	r3, [pc, #276]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1f0      	bne.n	8009732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009750:	4b42      	ldr	r3, [pc, #264]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009754:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	031b      	lsls	r3, r3, #12
 800975e:	493f      	ldr	r1, [pc, #252]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009760:	4313      	orrs	r3, r2
 8009762:	628b      	str	r3, [r1, #40]	@ 0x28
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	3b01      	subs	r3, #1
 800976a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	3b01      	subs	r3, #1
 8009774:	025b      	lsls	r3, r3, #9
 8009776:	b29b      	uxth	r3, r3
 8009778:	431a      	orrs	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	3b01      	subs	r3, #1
 8009780:	041b      	lsls	r3, r3, #16
 8009782:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	3b01      	subs	r3, #1
 800978e:	061b      	lsls	r3, r3, #24
 8009790:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009794:	4931      	ldr	r1, [pc, #196]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009796:	4313      	orrs	r3, r2
 8009798:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800979a:	4b30      	ldr	r3, [pc, #192]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 800979c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	492d      	ldr	r1, [pc, #180]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80097ac:	4b2b      	ldr	r3, [pc, #172]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	f023 0220 	bic.w	r2, r3, #32
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	4928      	ldr	r1, [pc, #160]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80097be:	4b27      	ldr	r3, [pc, #156]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c2:	4a26      	ldr	r2, [pc, #152]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097c4:	f023 0310 	bic.w	r3, r3, #16
 80097c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80097ca:	4b24      	ldr	r3, [pc, #144]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097ce:	4b24      	ldr	r3, [pc, #144]	@ (8009860 <RCCEx_PLL2_Config+0x160>)
 80097d0:	4013      	ands	r3, r2
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	69d2      	ldr	r2, [r2, #28]
 80097d6:	00d2      	lsls	r2, r2, #3
 80097d8:	4920      	ldr	r1, [pc, #128]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80097de:	4b1f      	ldr	r3, [pc, #124]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e2:	4a1e      	ldr	r2, [pc, #120]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097e4:	f043 0310 	orr.w	r3, r3, #16
 80097e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d106      	bne.n	80097fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80097f0:	4b1a      	ldr	r3, [pc, #104]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f4:	4a19      	ldr	r2, [pc, #100]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097fc:	e00f      	b.n	800981e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d106      	bne.n	8009812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009804:	4b15      	ldr	r3, [pc, #84]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009808:	4a14      	ldr	r2, [pc, #80]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 800980a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800980e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009810:	e005      	b.n	800981e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009812:	4b12      	ldr	r3, [pc, #72]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009816:	4a11      	ldr	r2, [pc, #68]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800981c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800981e:	4b0f      	ldr	r3, [pc, #60]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a0e      	ldr	r2, [pc, #56]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009824:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800982a:	f7f9 fbfd 	bl	8003028 <HAL_GetTick>
 800982e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009830:	e008      	b.n	8009844 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009832:	f7f9 fbf9 	bl	8003028 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d901      	bls.n	8009844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e006      	b.n	8009852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009844:	4b05      	ldr	r3, [pc, #20]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0f0      	beq.n	8009832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	58024400 	.word	0x58024400
 8009860:	ffff0007 	.word	0xffff0007

08009864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009872:	4b53      	ldr	r3, [pc, #332]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009876:	f003 0303 	and.w	r3, r3, #3
 800987a:	2b03      	cmp	r3, #3
 800987c:	d101      	bne.n	8009882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e099      	b.n	80099b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009882:	4b4f      	ldr	r3, [pc, #316]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a4e      	ldr	r2, [pc, #312]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800988c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800988e:	f7f9 fbcb 	bl	8003028 <HAL_GetTick>
 8009892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009894:	e008      	b.n	80098a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009896:	f7f9 fbc7 	bl	8003028 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d901      	bls.n	80098a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e086      	b.n	80099b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098a8:	4b45      	ldr	r3, [pc, #276]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1f0      	bne.n	8009896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80098b4:	4b42      	ldr	r3, [pc, #264]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	051b      	lsls	r3, r3, #20
 80098c2:	493f      	ldr	r1, [pc, #252]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80098c4:	4313      	orrs	r3, r2
 80098c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	025b      	lsls	r3, r3, #9
 80098da:	b29b      	uxth	r3, r3
 80098dc:	431a      	orrs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	041b      	lsls	r3, r3, #16
 80098e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	061b      	lsls	r3, r3, #24
 80098f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098f8:	4931      	ldr	r1, [pc, #196]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80098fe:	4b30      	ldr	r3, [pc, #192]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009902:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	492d      	ldr	r1, [pc, #180]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800990c:	4313      	orrs	r3, r2
 800990e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009910:	4b2b      	ldr	r3, [pc, #172]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	4928      	ldr	r1, [pc, #160]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800991e:	4313      	orrs	r3, r2
 8009920:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009922:	4b27      	ldr	r3, [pc, #156]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009926:	4a26      	ldr	r2, [pc, #152]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800992c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800992e:	4b24      	ldr	r3, [pc, #144]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009932:	4b24      	ldr	r3, [pc, #144]	@ (80099c4 <RCCEx_PLL3_Config+0x160>)
 8009934:	4013      	ands	r3, r2
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	69d2      	ldr	r2, [r2, #28]
 800993a:	00d2      	lsls	r2, r2, #3
 800993c:	4920      	ldr	r1, [pc, #128]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800993e:	4313      	orrs	r3, r2
 8009940:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009942:	4b1f      	ldr	r3, [pc, #124]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	4a1e      	ldr	r2, [pc, #120]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800994c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d106      	bne.n	8009962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009954:	4b1a      	ldr	r3, [pc, #104]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009958:	4a19      	ldr	r2, [pc, #100]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800995a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800995e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009960:	e00f      	b.n	8009982 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d106      	bne.n	8009976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009968:	4b15      	ldr	r3, [pc, #84]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800996a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996c:	4a14      	ldr	r2, [pc, #80]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800996e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009974:	e005      	b.n	8009982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009976:	4b12      	ldr	r3, [pc, #72]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997a:	4a11      	ldr	r2, [pc, #68]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800997c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009980:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009982:	4b0f      	ldr	r3, [pc, #60]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a0e      	ldr	r2, [pc, #56]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800998c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800998e:	f7f9 fb4b 	bl	8003028 <HAL_GetTick>
 8009992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009994:	e008      	b.n	80099a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009996:	f7f9 fb47 	bl	8003028 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d901      	bls.n	80099a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e006      	b.n	80099b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099a8:	4b05      	ldr	r3, [pc, #20]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d0f0      	beq.n	8009996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	58024400 	.word	0x58024400
 80099c4:	ffff0007 	.word	0xffff0007

080099c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e10f      	b.n	8009bfa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a87      	ldr	r2, [pc, #540]	@ (8009c04 <HAL_SPI_Init+0x23c>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d00f      	beq.n	8009a0a <HAL_SPI_Init+0x42>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a86      	ldr	r2, [pc, #536]	@ (8009c08 <HAL_SPI_Init+0x240>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00a      	beq.n	8009a0a <HAL_SPI_Init+0x42>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a84      	ldr	r2, [pc, #528]	@ (8009c0c <HAL_SPI_Init+0x244>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d005      	beq.n	8009a0a <HAL_SPI_Init+0x42>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	2b0f      	cmp	r3, #15
 8009a04:	d901      	bls.n	8009a0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e0f7      	b.n	8009bfa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 f968 	bl	800ace0 <SPI_GetPacketSize>
 8009a10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a7b      	ldr	r2, [pc, #492]	@ (8009c04 <HAL_SPI_Init+0x23c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00c      	beq.n	8009a36 <HAL_SPI_Init+0x6e>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a79      	ldr	r2, [pc, #484]	@ (8009c08 <HAL_SPI_Init+0x240>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d007      	beq.n	8009a36 <HAL_SPI_Init+0x6e>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a78      	ldr	r2, [pc, #480]	@ (8009c0c <HAL_SPI_Init+0x244>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d002      	beq.n	8009a36 <HAL_SPI_Init+0x6e>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b08      	cmp	r3, #8
 8009a34:	d811      	bhi.n	8009a5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a3a:	4a72      	ldr	r2, [pc, #456]	@ (8009c04 <HAL_SPI_Init+0x23c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d009      	beq.n	8009a54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a70      	ldr	r2, [pc, #448]	@ (8009c08 <HAL_SPI_Init+0x240>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d004      	beq.n	8009a54 <HAL_SPI_Init+0x8c>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a6f      	ldr	r2, [pc, #444]	@ (8009c0c <HAL_SPI_Init+0x244>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d104      	bne.n	8009a5e <HAL_SPI_Init+0x96>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b10      	cmp	r3, #16
 8009a58:	d901      	bls.n	8009a5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e0cd      	b.n	8009bfa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d106      	bne.n	8009a78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7f8 fb6a 	bl	800214c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 0201 	bic.w	r2, r2, #1
 8009a8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009a9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009aa4:	d119      	bne.n	8009ada <HAL_SPI_Init+0x112>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009aae:	d103      	bne.n	8009ab8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d008      	beq.n	8009aca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10c      	bne.n	8009ada <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ac8:	d107      	bne.n	8009ada <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009ad8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00f      	beq.n	8009b06 <HAL_SPI_Init+0x13e>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	2b06      	cmp	r3, #6
 8009aec:	d90b      	bls.n	8009b06 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	e007      	b.n	8009b16 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	69da      	ldr	r2, [r3, #28]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b28:	ea42 0103 	orr.w	r1, r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68da      	ldr	r2, [r3, #12]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b46:	431a      	orrs	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	431a      	orrs	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	431a      	orrs	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	431a      	orrs	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	431a      	orrs	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b76:	ea42 0103 	orr.w	r1, r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d113      	bne.n	8009bb6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ba0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009bb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0201 	bic.w	r2, r2, #1
 8009bc4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	40013000 	.word	0x40013000
 8009c08:	40003800 	.word	0x40003800
 8009c0c:	40003c00 	.word	0x40003c00

08009c10 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3320      	adds	r3, #32
 8009c26:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c28:	f7f9 f9fe 	bl	8003028 <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d001      	beq.n	8009c3e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e1d1      	b.n	8009fe2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <HAL_SPI_Transmit+0x3a>
 8009c44:	88fb      	ldrh	r3, [r7, #6]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e1c9      	b.n	8009fe2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_SPI_Transmit+0x4c>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e1c2      	b.n	8009fe2 <HAL_SPI_Transmit+0x3d2>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2203      	movs	r2, #3
 8009c68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	88fa      	ldrh	r2, [r7, #6]
 8009c7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	88fa      	ldrh	r2, [r7, #6]
 8009c86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009cb4:	d108      	bne.n	8009cc8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	e009      	b.n	8009cdc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009cda:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	4b96      	ldr	r3, [pc, #600]	@ (8009f3c <HAL_SPI_Transmit+0x32c>)
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	88f9      	ldrh	r1, [r7, #6]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	6812      	ldr	r2, [r2, #0]
 8009cec:	430b      	orrs	r3, r1
 8009cee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0201 	orr.w	r2, r2, #1
 8009cfe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d08:	d107      	bne.n	8009d1a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	2b0f      	cmp	r3, #15
 8009d20:	d947      	bls.n	8009db2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009d22:	e03f      	b.n	8009da4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d114      	bne.n	8009d5c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d42:	1d1a      	adds	r2, r3, #4
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009d5a:	e023      	b.n	8009da4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d5c:	f7f9 f964 	bl	8003028 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d803      	bhi.n	8009d74 <HAL_SPI_Transmit+0x164>
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d72:	d102      	bne.n	8009d7a <HAL_SPI_Transmit+0x16a>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d114      	bne.n	8009da4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 fee2 	bl	800ab44 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e11e      	b.n	8009fe2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1b9      	bne.n	8009d24 <HAL_SPI_Transmit+0x114>
 8009db0:	e0f1      	b.n	8009f96 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	2b07      	cmp	r3, #7
 8009db8:	f240 80e6 	bls.w	8009f88 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009dbc:	e05d      	b.n	8009e7a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	f003 0302 	and.w	r3, r3, #2
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d132      	bne.n	8009e32 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d918      	bls.n	8009e0a <HAL_SPI_Transmit+0x1fa>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d014      	beq.n	8009e0a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6812      	ldr	r2, [r2, #0]
 8009dea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009df0:	1d1a      	adds	r2, r3, #4
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	3b02      	subs	r3, #2
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e08:	e037      	b.n	8009e7a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e0e:	881a      	ldrh	r2, [r3, #0]
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e18:	1c9a      	adds	r2, r3, #2
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	3b01      	subs	r3, #1
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e30:	e023      	b.n	8009e7a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e32:	f7f9 f8f9 	bl	8003028 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d803      	bhi.n	8009e4a <HAL_SPI_Transmit+0x23a>
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e48:	d102      	bne.n	8009e50 <HAL_SPI_Transmit+0x240>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d114      	bne.n	8009e7a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 fe77 	bl	800ab44 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e0b3      	b.n	8009fe2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d19b      	bne.n	8009dbe <HAL_SPI_Transmit+0x1ae>
 8009e86:	e086      	b.n	8009f96 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	f003 0302 	and.w	r3, r3, #2
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d154      	bne.n	8009f40 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	d918      	bls.n	8009ed4 <HAL_SPI_Transmit+0x2c4>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea6:	2b40      	cmp	r3, #64	@ 0x40
 8009ea8:	d914      	bls.n	8009ed4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eba:	1d1a      	adds	r2, r3, #4
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ed2:	e059      	b.n	8009f88 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d917      	bls.n	8009f10 <HAL_SPI_Transmit+0x300>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d013      	beq.n	8009f10 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eec:	881a      	ldrh	r2, [r3, #0]
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ef6:	1c9a      	adds	r2, r3, #2
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	3b02      	subs	r3, #2
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f0e:	e03b      	b.n	8009f88 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3320      	adds	r3, #32
 8009f1a:	7812      	ldrb	r2, [r2, #0]
 8009f1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	3b01      	subs	r3, #1
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f3a:	e025      	b.n	8009f88 <HAL_SPI_Transmit+0x378>
 8009f3c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f40:	f7f9 f872 	bl	8003028 <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d803      	bhi.n	8009f58 <HAL_SPI_Transmit+0x348>
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f56:	d102      	bne.n	8009f5e <HAL_SPI_Transmit+0x34e>
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d114      	bne.n	8009f88 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 fdf0 	bl	800ab44 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e02c      	b.n	8009fe2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f47f af79 	bne.w	8009e88 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2108      	movs	r1, #8
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 fe6f 	bl	800ac84 <SPI_WaitOnFlagUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d007      	beq.n	8009fbc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fb2:	f043 0220 	orr.w	r2, r3, #32
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 fdc1 	bl	800ab44 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e000      	b.n	8009fe2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
  }
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop

08009fec <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b088      	sub	sp, #32
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a000:	095b      	lsrs	r3, r3, #5
 800a002:	b29b      	uxth	r3, r3
 800a004:	3301      	adds	r3, #1
 800a006:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3330      	adds	r3, #48	@ 0x30
 800a00e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a010:	f7f9 f80a 	bl	8003028 <HAL_GetTick>
 800a014:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d001      	beq.n	800a026 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a022:	2302      	movs	r3, #2
 800a024:	e250      	b.n	800a4c8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <HAL_SPI_Receive+0x46>
 800a02c:	88fb      	ldrh	r3, [r7, #6]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e248      	b.n	800a4c8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d101      	bne.n	800a044 <HAL_SPI_Receive+0x58>
 800a040:	2302      	movs	r3, #2
 800a042:	e241      	b.n	800a4c8 <HAL_SPI_Receive+0x4dc>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2204      	movs	r2, #4
 800a050:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	88fa      	ldrh	r2, [r7, #6]
 800a066:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	88fa      	ldrh	r2, [r7, #6]
 800a06e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a09c:	d108      	bne.n	800a0b0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	e009      	b.n	800a0c4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a0c2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	4b95      	ldr	r3, [pc, #596]	@ (800a320 <HAL_SPI_Receive+0x334>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	88f9      	ldrh	r1, [r7, #6]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f042 0201 	orr.w	r2, r2, #1
 800a0e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0f0:	d107      	bne.n	800a102 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a100:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b0f      	cmp	r3, #15
 800a108:	d96c      	bls.n	800a1e4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a10a:	e064      	b.n	800a1d6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d114      	bne.n	800a14c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a12a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a12c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a132:	1d1a      	adds	r2, r3, #4
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a13e:	b29b      	uxth	r3, r3
 800a140:	3b01      	subs	r3, #1
 800a142:	b29a      	uxth	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a14a:	e044      	b.n	800a1d6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a152:	b29b      	uxth	r3, r3
 800a154:	8bfa      	ldrh	r2, [r7, #30]
 800a156:	429a      	cmp	r2, r3
 800a158:	d919      	bls.n	800a18e <HAL_SPI_Receive+0x1a2>
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d014      	beq.n	800a18e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a16c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a16e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a174:	1d1a      	adds	r2, r3, #4
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a180:	b29b      	uxth	r3, r3
 800a182:	3b01      	subs	r3, #1
 800a184:	b29a      	uxth	r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a18c:	e023      	b.n	800a1d6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a18e:	f7f8 ff4b 	bl	8003028 <HAL_GetTick>
 800a192:	4602      	mov	r2, r0
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d803      	bhi.n	800a1a6 <HAL_SPI_Receive+0x1ba>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a4:	d102      	bne.n	800a1ac <HAL_SPI_Receive+0x1c0>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d114      	bne.n	800a1d6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 fcc9 	bl	800ab44 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e178      	b.n	800a4c8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d194      	bne.n	800a10c <HAL_SPI_Receive+0x120>
 800a1e2:	e15e      	b.n	800a4a2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	2b07      	cmp	r3, #7
 800a1ea:	f240 8153 	bls.w	800a494 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a1ee:	e08f      	b.n	800a310 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b01      	cmp	r3, #1
 800a204:	d114      	bne.n	800a230 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	8812      	ldrh	r2, [r2, #0]
 800a20e:	b292      	uxth	r2, r2
 800a210:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a216:	1c9a      	adds	r2, r3, #2
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a222:	b29b      	uxth	r3, r3
 800a224:	3b01      	subs	r3, #1
 800a226:	b29a      	uxth	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a22e:	e06f      	b.n	800a310 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a236:	b29b      	uxth	r3, r3
 800a238:	8bfa      	ldrh	r2, [r7, #30]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d924      	bls.n	800a288 <HAL_SPI_Receive+0x29c>
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01f      	beq.n	800a288 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a24c:	69ba      	ldr	r2, [r7, #24]
 800a24e:	8812      	ldrh	r2, [r2, #0]
 800a250:	b292      	uxth	r2, r2
 800a252:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a258:	1c9a      	adds	r2, r3, #2
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a262:	69ba      	ldr	r2, [r7, #24]
 800a264:	8812      	ldrh	r2, [r2, #0]
 800a266:	b292      	uxth	r2, r2
 800a268:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a26e:	1c9a      	adds	r2, r3, #2
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	3b02      	subs	r3, #2
 800a27e:	b29a      	uxth	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a286:	e043      	b.n	800a310 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a28e:	b29b      	uxth	r3, r3
 800a290:	2b01      	cmp	r3, #1
 800a292:	d119      	bne.n	800a2c8 <HAL_SPI_Receive+0x2dc>
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d014      	beq.n	800a2c8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a2:	69ba      	ldr	r2, [r7, #24]
 800a2a4:	8812      	ldrh	r2, [r2, #0]
 800a2a6:	b292      	uxth	r2, r2
 800a2a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2ae:	1c9a      	adds	r2, r3, #2
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a2c6:	e023      	b.n	800a310 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2c8:	f7f8 feae 	bl	8003028 <HAL_GetTick>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d803      	bhi.n	800a2e0 <HAL_SPI_Receive+0x2f4>
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2de:	d102      	bne.n	800a2e6 <HAL_SPI_Receive+0x2fa>
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d114      	bne.n	800a310 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 fc2c 	bl	800ab44 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e0db      	b.n	800a4c8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a316:	b29b      	uxth	r3, r3
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f47f af69 	bne.w	800a1f0 <HAL_SPI_Receive+0x204>
 800a31e:	e0c0      	b.n	800a4a2 <HAL_SPI_Receive+0x4b6>
 800a320:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b01      	cmp	r3, #1
 800a338:	d117      	bne.n	800a36a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a346:	7812      	ldrb	r2, [r2, #0]
 800a348:	b2d2      	uxtb	r2, r2
 800a34a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a350:	1c5a      	adds	r2, r3, #1
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	3b01      	subs	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a368:	e094      	b.n	800a494 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a370:	b29b      	uxth	r3, r3
 800a372:	8bfa      	ldrh	r2, [r7, #30]
 800a374:	429a      	cmp	r2, r3
 800a376:	d946      	bls.n	800a406 <HAL_SPI_Receive+0x41a>
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d041      	beq.n	800a406 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a38e:	7812      	ldrb	r2, [r2, #0]
 800a390:	b2d2      	uxtb	r2, r2
 800a392:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3aa:	7812      	ldrb	r2, [r2, #0]
 800a3ac:	b2d2      	uxtb	r2, r2
 800a3ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b4:	1c5a      	adds	r2, r3, #1
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3c6:	7812      	ldrb	r2, [r2, #0]
 800a3c8:	b2d2      	uxtb	r2, r2
 800a3ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3e2:	7812      	ldrb	r2, [r2, #0]
 800a3e4:	b2d2      	uxtb	r2, r2
 800a3e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ec:	1c5a      	adds	r2, r3, #1
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	3b04      	subs	r3, #4
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a404:	e046      	b.n	800a494 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	2b03      	cmp	r3, #3
 800a410:	d81c      	bhi.n	800a44c <HAL_SPI_Receive+0x460>
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d017      	beq.n	800a44c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a428:	7812      	ldrb	r2, [r2, #0]
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a43e:	b29b      	uxth	r3, r3
 800a440:	3b01      	subs	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a44a:	e023      	b.n	800a494 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a44c:	f7f8 fdec 	bl	8003028 <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d803      	bhi.n	800a464 <HAL_SPI_Receive+0x478>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a462:	d102      	bne.n	800a46a <HAL_SPI_Receive+0x47e>
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d114      	bne.n	800a494 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f000 fb6a 	bl	800ab44 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a476:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a490:	2303      	movs	r3, #3
 800a492:	e019      	b.n	800a4c8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f47f af41 	bne.w	800a324 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 fb4e 	bl	800ab44 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
  }
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3720      	adds	r7, #32
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08e      	sub	sp, #56	@ 0x38
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3320      	adds	r3, #32
 800a4e4:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3330      	adds	r3, #48	@ 0x30
 800a4ec:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4f2:	095b      	lsrs	r3, r3, #5
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a4fa:	f7f8 fd95 	bl	8003028 <HAL_GetTick>
 800a4fe:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a500:	887b      	ldrh	r3, [r7, #2]
 800a502:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a504:	887b      	ldrh	r3, [r7, #2]
 800a506:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b01      	cmp	r3, #1
 800a512:	d001      	beq.n	800a518 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800a514:	2302      	movs	r3, #2
 800a516:	e310      	b.n	800ab3a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d005      	beq.n	800a52a <HAL_SPI_TransmitReceive+0x5a>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <HAL_SPI_TransmitReceive+0x5a>
 800a524:	887b      	ldrh	r3, [r7, #2]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e305      	b.n	800ab3a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a534:	2b01      	cmp	r3, #1
 800a536:	d101      	bne.n	800a53c <HAL_SPI_TransmitReceive+0x6c>
 800a538:	2302      	movs	r3, #2
 800a53a:	e2fe      	b.n	800ab3a <HAL_SPI_TransmitReceive+0x66a>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2205      	movs	r2, #5
 800a548:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	887a      	ldrh	r2, [r7, #2]
 800a55e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	887a      	ldrh	r2, [r7, #2]
 800a566:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	887a      	ldrh	r2, [r7, #2]
 800a574:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	887a      	ldrh	r2, [r7, #2]
 800a57c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a59a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a70      	ldr	r2, [pc, #448]	@ (800a764 <HAL_SPI_TransmitReceive+0x294>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d009      	beq.n	800a5ba <HAL_SPI_TransmitReceive+0xea>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a6f      	ldr	r2, [pc, #444]	@ (800a768 <HAL_SPI_TransmitReceive+0x298>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d004      	beq.n	800a5ba <HAL_SPI_TransmitReceive+0xea>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a6d      	ldr	r2, [pc, #436]	@ (800a76c <HAL_SPI_TransmitReceive+0x29c>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d102      	bne.n	800a5c0 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a5ba:	2310      	movs	r3, #16
 800a5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5be:	e001      	b.n	800a5c4 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a5c0:	2308      	movs	r3, #8
 800a5c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	4b69      	ldr	r3, [pc, #420]	@ (800a770 <HAL_SPI_TransmitReceive+0x2a0>)
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	8879      	ldrh	r1, [r7, #2]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0201 	orr.w	r2, r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5f0:	d107      	bne.n	800a602 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	2b0f      	cmp	r3, #15
 800a608:	f240 80a2 	bls.w	800a750 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60e:	089b      	lsrs	r3, r3, #2
 800a610:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a612:	e094      	b.n	800a73e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d120      	bne.n	800a664 <HAL_SPI_TransmitReceive+0x194>
 800a622:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a624:	2b00      	cmp	r3, #0
 800a626:	d01d      	beq.n	800a664 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a628:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a62a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a630:	429a      	cmp	r2, r3
 800a632:	d217      	bcs.n	800a664 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6812      	ldr	r2, [r2, #0]
 800a63e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a644:	1d1a      	adds	r2, r3, #4
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a650:	b29b      	uxth	r3, r3
 800a652:	3b01      	subs	r3, #1
 800a654:	b29a      	uxth	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a662:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a66c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d065      	beq.n	800a73e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	695b      	ldr	r3, [r3, #20]
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d118      	bne.n	800a6b2 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a688:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a68a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a690:	1d1a      	adds	r2, r3, #4
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a6b0:	e045      	b.n	800a73e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a6b2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a6b4:	8bfb      	ldrh	r3, [r7, #30]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d21d      	bcs.n	800a6f6 <HAL_SPI_TransmitReceive+0x226>
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d018      	beq.n	800a6f6 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a6ce:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6d4:	1d1a      	adds	r2, r3, #4
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a6f4:	e023      	b.n	800a73e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6f6:	f7f8 fc97 	bl	8003028 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a702:	429a      	cmp	r2, r3
 800a704:	d803      	bhi.n	800a70e <HAL_SPI_TransmitReceive+0x23e>
 800a706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70c:	d102      	bne.n	800a714 <HAL_SPI_TransmitReceive+0x244>
 800a70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a710:	2b00      	cmp	r3, #0
 800a712:	d114      	bne.n	800a73e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 fa15 	bl	800ab44 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a720:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e1fd      	b.n	800ab3a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a73e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a740:	2b00      	cmp	r3, #0
 800a742:	f47f af67 	bne.w	800a614 <HAL_SPI_TransmitReceive+0x144>
 800a746:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f47f af63 	bne.w	800a614 <HAL_SPI_TransmitReceive+0x144>
 800a74e:	e1ce      	b.n	800aaee <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	2b07      	cmp	r3, #7
 800a756:	f240 81c2 	bls.w	800aade <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75c:	085b      	lsrs	r3, r3, #1
 800a75e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a760:	e0c9      	b.n	800a8f6 <HAL_SPI_TransmitReceive+0x426>
 800a762:	bf00      	nop
 800a764:	40013000 	.word	0x40013000
 800a768:	40003800 	.word	0x40003800
 800a76c:	40003c00 	.word	0x40003c00
 800a770:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d11f      	bne.n	800a7c2 <HAL_SPI_TransmitReceive+0x2f2>
 800a782:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01c      	beq.n	800a7c2 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a788:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a78a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a790:	429a      	cmp	r2, r3
 800a792:	d216      	bcs.n	800a7c2 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a798:	881a      	ldrh	r2, [r3, #0]
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7a2:	1c9a      	adds	r2, r3, #2
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a7ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 8092 	beq.w	800a8f6 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d118      	bne.n	800a812 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7e4:	6a3a      	ldr	r2, [r7, #32]
 800a7e6:	8812      	ldrh	r2, [r2, #0]
 800a7e8:	b292      	uxth	r2, r2
 800a7ea:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7f0:	1c9a      	adds	r2, r3, #2
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	3b01      	subs	r3, #1
 800a800:	b29a      	uxth	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a80e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a810:	e071      	b.n	800a8f6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a812:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a814:	8bfb      	ldrh	r3, [r7, #30]
 800a816:	429a      	cmp	r2, r3
 800a818:	d228      	bcs.n	800a86c <HAL_SPI_TransmitReceive+0x39c>
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d023      	beq.n	800a86c <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a828:	6a3a      	ldr	r2, [r7, #32]
 800a82a:	8812      	ldrh	r2, [r2, #0]
 800a82c:	b292      	uxth	r2, r2
 800a82e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a834:	1c9a      	adds	r2, r3, #2
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a83e:	6a3a      	ldr	r2, [r7, #32]
 800a840:	8812      	ldrh	r2, [r2, #0]
 800a842:	b292      	uxth	r2, r2
 800a844:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a84a:	1c9a      	adds	r2, r3, #2
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a856:	b29b      	uxth	r3, r3
 800a858:	3b02      	subs	r3, #2
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a868:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a86a:	e044      	b.n	800a8f6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a86c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d11d      	bne.n	800a8ae <HAL_SPI_TransmitReceive+0x3de>
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d018      	beq.n	800a8ae <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a880:	6a3a      	ldr	r2, [r7, #32]
 800a882:	8812      	ldrh	r2, [r2, #0]
 800a884:	b292      	uxth	r2, r2
 800a886:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a88c:	1c9a      	adds	r2, r3, #2
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a898:	b29b      	uxth	r3, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a8ac:	e023      	b.n	800a8f6 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8ae:	f7f8 fbbb 	bl	8003028 <HAL_GetTick>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d803      	bhi.n	800a8c6 <HAL_SPI_TransmitReceive+0x3f6>
 800a8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c4:	d102      	bne.n	800a8cc <HAL_SPI_TransmitReceive+0x3fc>
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d114      	bne.n	800a8f6 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 f939 	bl	800ab44 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e121      	b.n	800ab3a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a8f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f47f af3b 	bne.w	800a774 <HAL_SPI_TransmitReceive+0x2a4>
 800a8fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a900:	2b00      	cmp	r3, #0
 800a902:	f47f af37 	bne.w	800a774 <HAL_SPI_TransmitReceive+0x2a4>
 800a906:	e0f2      	b.n	800aaee <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	2b02      	cmp	r3, #2
 800a914:	d121      	bne.n	800a95a <HAL_SPI_TransmitReceive+0x48a>
 800a916:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01e      	beq.n	800a95a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a91c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a91e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a922:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a924:	429a      	cmp	r2, r3
 800a926:	d218      	bcs.n	800a95a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3320      	adds	r3, #32
 800a932:	7812      	ldrb	r2, [r2, #0]
 800a934:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a946:	b29b      	uxth	r3, r3
 800a948:	3b01      	subs	r3, #1
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a958:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	695b      	ldr	r3, [r3, #20]
 800a960:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a962:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 80ba 	beq.w	800aade <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	2b01      	cmp	r3, #1
 800a976:	d11b      	bne.n	800a9b0 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a984:	7812      	ldrb	r2, [r2, #0]
 800a986:	b2d2      	uxtb	r2, r2
 800a988:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a98e:	1c5a      	adds	r2, r3, #1
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	3b01      	subs	r3, #1
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9ac:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a9ae:	e096      	b.n	800aade <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a9b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a9b2:	8bfb      	ldrh	r3, [r7, #30]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d24a      	bcs.n	800aa4e <HAL_SPI_TransmitReceive+0x57e>
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d045      	beq.n	800aa4e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9ce:	7812      	ldrb	r2, [r2, #0]
 800a9d0:	b2d2      	uxtb	r2, r2
 800a9d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9ea:	7812      	ldrb	r2, [r2, #0]
 800a9ec:	b2d2      	uxtb	r2, r2
 800a9ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa06:	7812      	ldrb	r2, [r2, #0]
 800aa08:	b2d2      	uxtb	r2, r2
 800aa0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	b2d2      	uxtb	r2, r2
 800aa26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa2c:	1c5a      	adds	r2, r3, #1
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	3b04      	subs	r3, #4
 800aa3c:	b29a      	uxth	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aa4c:	e047      	b.n	800aade <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800aa4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d820      	bhi.n	800aa96 <HAL_SPI_TransmitReceive+0x5c6>
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d01b      	beq.n	800aa96 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa6a:	7812      	ldrb	r2, [r2, #0]
 800aa6c:	b2d2      	uxtb	r2, r2
 800aa6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	3b01      	subs	r3, #1
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa92:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aa94:	e023      	b.n	800aade <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa96:	f7f8 fac7 	bl	8003028 <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d803      	bhi.n	800aaae <HAL_SPI_TransmitReceive+0x5de>
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaac:	d102      	bne.n	800aab4 <HAL_SPI_TransmitReceive+0x5e4>
 800aaae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d114      	bne.n	800aade <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 f845 	bl	800ab44 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aac0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e02d      	b.n	800ab3a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aade:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f47f af11 	bne.w	800a908 <HAL_SPI_TransmitReceive+0x438>
 800aae6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f47f af0d 	bne.w	800a908 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2108      	movs	r1, #8
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 f8c3 	bl	800ac84 <SPI_WaitOnFlagUntilTimeout>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d007      	beq.n	800ab14 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab0a:	f043 0220 	orr.w	r2, r3, #32
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f000 f815 	bl	800ab44 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e000      	b.n	800ab3a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800ab38:	2300      	movs	r3, #0
  }
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3730      	adds	r7, #48	@ 0x30
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop

0800ab44 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	699a      	ldr	r2, [r3, #24]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0208 	orr.w	r2, r2, #8
 800ab62:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	699a      	ldr	r2, [r3, #24]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f042 0210 	orr.w	r2, r2, #16
 800ab72:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f022 0201 	bic.w	r2, r2, #1
 800ab82:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6919      	ldr	r1, [r3, #16]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	4b3c      	ldr	r3, [pc, #240]	@ (800ac80 <SPI_CloseTransfer+0x13c>)
 800ab90:	400b      	ands	r3, r1
 800ab92:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	689a      	ldr	r2, [r3, #8]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aba2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	2b04      	cmp	r3, #4
 800abae:	d014      	beq.n	800abda <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f003 0320 	and.w	r3, r3, #32
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00f      	beq.n	800abda <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abc0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	699a      	ldr	r2, [r3, #24]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f042 0220 	orr.w	r2, r2, #32
 800abd8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d014      	beq.n	800ac10 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00f      	beq.n	800ac10 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abf6:	f043 0204 	orr.w	r2, r3, #4
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	699a      	ldr	r2, [r3, #24]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac0e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00f      	beq.n	800ac3a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac20:	f043 0201 	orr.w	r2, r3, #1
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	699a      	ldr	r2, [r3, #24]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac38:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00f      	beq.n	800ac64 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac4a:	f043 0208 	orr.w	r2, r3, #8
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	699a      	ldr	r2, [r3, #24]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac62:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800ac74:	bf00      	nop
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	fffffc90 	.word	0xfffffc90

0800ac84 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	4613      	mov	r3, r2
 800ac92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ac94:	e010      	b.n	800acb8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac96:	f7f8 f9c7 	bl	8003028 <HAL_GetTick>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d803      	bhi.n	800acae <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acac:	d102      	bne.n	800acb4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e00f      	b.n	800acd8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	695a      	ldr	r2, [r3, #20]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	4013      	ands	r3, r2
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	bf0c      	ite	eq
 800acc8:	2301      	moveq	r3, #1
 800acca:	2300      	movne	r3, #0
 800accc:	b2db      	uxtb	r3, r3
 800acce:	461a      	mov	r2, r3
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d0df      	beq.n	800ac96 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acec:	095b      	lsrs	r3, r3, #5
 800acee:	3301      	adds	r3, #1
 800acf0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	3301      	adds	r3, #1
 800acf8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	3307      	adds	r3, #7
 800acfe:	08db      	lsrs	r3, r3, #3
 800ad00:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	fb02 f303 	mul.w	r3, r2, r3
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3714      	adds	r7, #20
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b082      	sub	sp, #8
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e049      	b.n	800adbc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d106      	bne.n	800ad42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7f7 fdcd 	bl	80028dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2202      	movs	r2, #2
 800ad46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	3304      	adds	r3, #4
 800ad52:	4619      	mov	r1, r3
 800ad54:	4610      	mov	r0, r2
 800ad56:	f000 f9a1 	bl	800b09c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3708      	adds	r7, #8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e049      	b.n	800ae6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d106      	bne.n	800adf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7f7 fd28 	bl	8002840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f000 f94a 	bl	800b09c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
	...

0800ae74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d101      	bne.n	800ae92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e0ff      	b.n	800b092 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b14      	cmp	r3, #20
 800ae9e:	f200 80f0 	bhi.w	800b082 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aea2:	a201      	add	r2, pc, #4	@ (adr r2, 800aea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea8:	0800aefd 	.word	0x0800aefd
 800aeac:	0800b083 	.word	0x0800b083
 800aeb0:	0800b083 	.word	0x0800b083
 800aeb4:	0800b083 	.word	0x0800b083
 800aeb8:	0800af3d 	.word	0x0800af3d
 800aebc:	0800b083 	.word	0x0800b083
 800aec0:	0800b083 	.word	0x0800b083
 800aec4:	0800b083 	.word	0x0800b083
 800aec8:	0800af7f 	.word	0x0800af7f
 800aecc:	0800b083 	.word	0x0800b083
 800aed0:	0800b083 	.word	0x0800b083
 800aed4:	0800b083 	.word	0x0800b083
 800aed8:	0800afbf 	.word	0x0800afbf
 800aedc:	0800b083 	.word	0x0800b083
 800aee0:	0800b083 	.word	0x0800b083
 800aee4:	0800b083 	.word	0x0800b083
 800aee8:	0800b001 	.word	0x0800b001
 800aeec:	0800b083 	.word	0x0800b083
 800aef0:	0800b083 	.word	0x0800b083
 800aef4:	0800b083 	.word	0x0800b083
 800aef8:	0800b041 	.word	0x0800b041
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 f970 	bl	800b1e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f042 0208 	orr.w	r2, r2, #8
 800af16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	699a      	ldr	r2, [r3, #24]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 0204 	bic.w	r2, r2, #4
 800af26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	6999      	ldr	r1, [r3, #24]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	691a      	ldr	r2, [r3, #16]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	430a      	orrs	r2, r1
 800af38:	619a      	str	r2, [r3, #24]
      break;
 800af3a:	e0a5      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	4618      	mov	r0, r3
 800af44:	f000 f9e0 	bl	800b308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	699a      	ldr	r2, [r3, #24]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6999      	ldr	r1, [r3, #24]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	021a      	lsls	r2, r3, #8
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	619a      	str	r2, [r3, #24]
      break;
 800af7c:	e084      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68b9      	ldr	r1, [r7, #8]
 800af84:	4618      	mov	r0, r3
 800af86:	f000 fa49 	bl	800b41c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	69da      	ldr	r2, [r3, #28]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f042 0208 	orr.w	r2, r2, #8
 800af98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69da      	ldr	r2, [r3, #28]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f022 0204 	bic.w	r2, r2, #4
 800afa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69d9      	ldr	r1, [r3, #28]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	691a      	ldr	r2, [r3, #16]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	430a      	orrs	r2, r1
 800afba:	61da      	str	r2, [r3, #28]
      break;
 800afbc:	e064      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68b9      	ldr	r1, [r7, #8]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 fab1 	bl	800b52c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69d9      	ldr	r1, [r3, #28]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	021a      	lsls	r2, r3, #8
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	430a      	orrs	r2, r1
 800affc:	61da      	str	r2, [r3, #28]
      break;
 800affe:	e043      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68b9      	ldr	r1, [r7, #8]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fafa 	bl	800b600 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0208 	orr.w	r2, r2, #8
 800b01a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0204 	bic.w	r2, r2, #4
 800b02a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	691a      	ldr	r2, [r3, #16]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b03e:	e023      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fb3e 	bl	800b6c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b05a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b06a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	021a      	lsls	r2, r3, #8
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b080:	e002      	b.n	800b088 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	75fb      	strb	r3, [r7, #23]
      break;
 800b086:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b090:	7dfb      	ldrb	r3, [r7, #23]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop

0800b09c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a46      	ldr	r2, [pc, #280]	@ (800b1c8 <TIM_Base_SetConfig+0x12c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d013      	beq.n	800b0dc <TIM_Base_SetConfig+0x40>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ba:	d00f      	beq.n	800b0dc <TIM_Base_SetConfig+0x40>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a43      	ldr	r2, [pc, #268]	@ (800b1cc <TIM_Base_SetConfig+0x130>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d00b      	beq.n	800b0dc <TIM_Base_SetConfig+0x40>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a42      	ldr	r2, [pc, #264]	@ (800b1d0 <TIM_Base_SetConfig+0x134>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d007      	beq.n	800b0dc <TIM_Base_SetConfig+0x40>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a41      	ldr	r2, [pc, #260]	@ (800b1d4 <TIM_Base_SetConfig+0x138>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d003      	beq.n	800b0dc <TIM_Base_SetConfig+0x40>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a40      	ldr	r2, [pc, #256]	@ (800b1d8 <TIM_Base_SetConfig+0x13c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d108      	bne.n	800b0ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a35      	ldr	r2, [pc, #212]	@ (800b1c8 <TIM_Base_SetConfig+0x12c>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d01f      	beq.n	800b136 <TIM_Base_SetConfig+0x9a>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0fc:	d01b      	beq.n	800b136 <TIM_Base_SetConfig+0x9a>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a32      	ldr	r2, [pc, #200]	@ (800b1cc <TIM_Base_SetConfig+0x130>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d017      	beq.n	800b136 <TIM_Base_SetConfig+0x9a>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a31      	ldr	r2, [pc, #196]	@ (800b1d0 <TIM_Base_SetConfig+0x134>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d013      	beq.n	800b136 <TIM_Base_SetConfig+0x9a>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a30      	ldr	r2, [pc, #192]	@ (800b1d4 <TIM_Base_SetConfig+0x138>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d00f      	beq.n	800b136 <TIM_Base_SetConfig+0x9a>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a2f      	ldr	r2, [pc, #188]	@ (800b1d8 <TIM_Base_SetConfig+0x13c>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d00b      	beq.n	800b136 <TIM_Base_SetConfig+0x9a>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a2e      	ldr	r2, [pc, #184]	@ (800b1dc <TIM_Base_SetConfig+0x140>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d007      	beq.n	800b136 <TIM_Base_SetConfig+0x9a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a2d      	ldr	r2, [pc, #180]	@ (800b1e0 <TIM_Base_SetConfig+0x144>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d003      	beq.n	800b136 <TIM_Base_SetConfig+0x9a>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a2c      	ldr	r2, [pc, #176]	@ (800b1e4 <TIM_Base_SetConfig+0x148>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d108      	bne.n	800b148 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b13c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	689a      	ldr	r2, [r3, #8]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a16      	ldr	r2, [pc, #88]	@ (800b1c8 <TIM_Base_SetConfig+0x12c>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d00f      	beq.n	800b194 <TIM_Base_SetConfig+0xf8>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a18      	ldr	r2, [pc, #96]	@ (800b1d8 <TIM_Base_SetConfig+0x13c>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d00b      	beq.n	800b194 <TIM_Base_SetConfig+0xf8>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a17      	ldr	r2, [pc, #92]	@ (800b1dc <TIM_Base_SetConfig+0x140>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d007      	beq.n	800b194 <TIM_Base_SetConfig+0xf8>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a16      	ldr	r2, [pc, #88]	@ (800b1e0 <TIM_Base_SetConfig+0x144>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d003      	beq.n	800b194 <TIM_Base_SetConfig+0xf8>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a15      	ldr	r2, [pc, #84]	@ (800b1e4 <TIM_Base_SetConfig+0x148>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d103      	bne.n	800b19c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	691a      	ldr	r2, [r3, #16]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d105      	bne.n	800b1ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	f023 0201 	bic.w	r2, r3, #1
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	611a      	str	r2, [r3, #16]
  }
}
 800b1ba:	bf00      	nop
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40010000 	.word	0x40010000
 800b1cc:	40000400 	.word	0x40000400
 800b1d0:	40000800 	.word	0x40000800
 800b1d4:	40000c00 	.word	0x40000c00
 800b1d8:	40010400 	.word	0x40010400
 800b1dc:	40014000 	.word	0x40014000
 800b1e0:	40014400 	.word	0x40014400
 800b1e4:	40014800 	.word	0x40014800

0800b1e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b087      	sub	sp, #28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	f023 0201 	bic.w	r2, r3, #1
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	699b      	ldr	r3, [r3, #24]
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	4b37      	ldr	r3, [pc, #220]	@ (800b2f0 <TIM_OC1_SetConfig+0x108>)
 800b214:	4013      	ands	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 0303 	bic.w	r3, r3, #3
 800b21e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4313      	orrs	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f023 0302 	bic.w	r3, r3, #2
 800b230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	4313      	orrs	r3, r2
 800b23a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a2d      	ldr	r2, [pc, #180]	@ (800b2f4 <TIM_OC1_SetConfig+0x10c>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d00f      	beq.n	800b264 <TIM_OC1_SetConfig+0x7c>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a2c      	ldr	r2, [pc, #176]	@ (800b2f8 <TIM_OC1_SetConfig+0x110>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d00b      	beq.n	800b264 <TIM_OC1_SetConfig+0x7c>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a2b      	ldr	r2, [pc, #172]	@ (800b2fc <TIM_OC1_SetConfig+0x114>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d007      	beq.n	800b264 <TIM_OC1_SetConfig+0x7c>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a2a      	ldr	r2, [pc, #168]	@ (800b300 <TIM_OC1_SetConfig+0x118>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d003      	beq.n	800b264 <TIM_OC1_SetConfig+0x7c>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a29      	ldr	r2, [pc, #164]	@ (800b304 <TIM_OC1_SetConfig+0x11c>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d10c      	bne.n	800b27e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	f023 0308 	bic.w	r3, r3, #8
 800b26a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	697a      	ldr	r2, [r7, #20]
 800b272:	4313      	orrs	r3, r2
 800b274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f023 0304 	bic.w	r3, r3, #4
 800b27c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a1c      	ldr	r2, [pc, #112]	@ (800b2f4 <TIM_OC1_SetConfig+0x10c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d00f      	beq.n	800b2a6 <TIM_OC1_SetConfig+0xbe>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a1b      	ldr	r2, [pc, #108]	@ (800b2f8 <TIM_OC1_SetConfig+0x110>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d00b      	beq.n	800b2a6 <TIM_OC1_SetConfig+0xbe>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a1a      	ldr	r2, [pc, #104]	@ (800b2fc <TIM_OC1_SetConfig+0x114>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d007      	beq.n	800b2a6 <TIM_OC1_SetConfig+0xbe>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a19      	ldr	r2, [pc, #100]	@ (800b300 <TIM_OC1_SetConfig+0x118>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d003      	beq.n	800b2a6 <TIM_OC1_SetConfig+0xbe>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a18      	ldr	r2, [pc, #96]	@ (800b304 <TIM_OC1_SetConfig+0x11c>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d111      	bne.n	800b2ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b2b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	693a      	ldr	r2, [r7, #16]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	621a      	str	r2, [r3, #32]
}
 800b2e4:	bf00      	nop
 800b2e6:	371c      	adds	r7, #28
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	fffeff8f 	.word	0xfffeff8f
 800b2f4:	40010000 	.word	0x40010000
 800b2f8:	40010400 	.word	0x40010400
 800b2fc:	40014000 	.word	0x40014000
 800b300:	40014400 	.word	0x40014400
 800b304:	40014800 	.word	0x40014800

0800b308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b308:	b480      	push	{r7}
 800b30a:	b087      	sub	sp, #28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	f023 0210 	bic.w	r2, r3, #16
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	4b34      	ldr	r3, [pc, #208]	@ (800b404 <TIM_OC2_SetConfig+0xfc>)
 800b334:	4013      	ands	r3, r2
 800b336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	021b      	lsls	r3, r3, #8
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	4313      	orrs	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	f023 0320 	bic.w	r3, r3, #32
 800b352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	011b      	lsls	r3, r3, #4
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a29      	ldr	r2, [pc, #164]	@ (800b408 <TIM_OC2_SetConfig+0x100>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d003      	beq.n	800b370 <TIM_OC2_SetConfig+0x68>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a28      	ldr	r2, [pc, #160]	@ (800b40c <TIM_OC2_SetConfig+0x104>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d10d      	bne.n	800b38c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	011b      	lsls	r3, r3, #4
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	4313      	orrs	r3, r2
 800b382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b38a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a1e      	ldr	r2, [pc, #120]	@ (800b408 <TIM_OC2_SetConfig+0x100>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d00f      	beq.n	800b3b4 <TIM_OC2_SetConfig+0xac>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a1d      	ldr	r2, [pc, #116]	@ (800b40c <TIM_OC2_SetConfig+0x104>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d00b      	beq.n	800b3b4 <TIM_OC2_SetConfig+0xac>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a1c      	ldr	r2, [pc, #112]	@ (800b410 <TIM_OC2_SetConfig+0x108>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d007      	beq.n	800b3b4 <TIM_OC2_SetConfig+0xac>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a1b      	ldr	r2, [pc, #108]	@ (800b414 <TIM_OC2_SetConfig+0x10c>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d003      	beq.n	800b3b4 <TIM_OC2_SetConfig+0xac>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a1a      	ldr	r2, [pc, #104]	@ (800b418 <TIM_OC2_SetConfig+0x110>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d113      	bne.n	800b3dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b3ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b3c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	621a      	str	r2, [r3, #32]
}
 800b3f6:	bf00      	nop
 800b3f8:	371c      	adds	r7, #28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	feff8fff 	.word	0xfeff8fff
 800b408:	40010000 	.word	0x40010000
 800b40c:	40010400 	.word	0x40010400
 800b410:	40014000 	.word	0x40014000
 800b414:	40014400 	.word	0x40014400
 800b418:	40014800 	.word	0x40014800

0800b41c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	4b33      	ldr	r3, [pc, #204]	@ (800b514 <TIM_OC3_SetConfig+0xf8>)
 800b448:	4013      	ands	r3, r2
 800b44a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f023 0303 	bic.w	r3, r3, #3
 800b452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	021b      	lsls	r3, r3, #8
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	4313      	orrs	r3, r2
 800b470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a28      	ldr	r2, [pc, #160]	@ (800b518 <TIM_OC3_SetConfig+0xfc>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d003      	beq.n	800b482 <TIM_OC3_SetConfig+0x66>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a27      	ldr	r2, [pc, #156]	@ (800b51c <TIM_OC3_SetConfig+0x100>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d10d      	bne.n	800b49e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	021b      	lsls	r3, r3, #8
 800b490:	697a      	ldr	r2, [r7, #20]
 800b492:	4313      	orrs	r3, r2
 800b494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b49c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b518 <TIM_OC3_SetConfig+0xfc>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d00f      	beq.n	800b4c6 <TIM_OC3_SetConfig+0xaa>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a1c      	ldr	r2, [pc, #112]	@ (800b51c <TIM_OC3_SetConfig+0x100>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d00b      	beq.n	800b4c6 <TIM_OC3_SetConfig+0xaa>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a1b      	ldr	r2, [pc, #108]	@ (800b520 <TIM_OC3_SetConfig+0x104>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d007      	beq.n	800b4c6 <TIM_OC3_SetConfig+0xaa>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a1a      	ldr	r2, [pc, #104]	@ (800b524 <TIM_OC3_SetConfig+0x108>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d003      	beq.n	800b4c6 <TIM_OC3_SetConfig+0xaa>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a19      	ldr	r2, [pc, #100]	@ (800b528 <TIM_OC3_SetConfig+0x10c>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d113      	bne.n	800b4ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b4d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	011b      	lsls	r3, r3, #4
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	621a      	str	r2, [r3, #32]
}
 800b508:	bf00      	nop
 800b50a:	371c      	adds	r7, #28
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	fffeff8f 	.word	0xfffeff8f
 800b518:	40010000 	.word	0x40010000
 800b51c:	40010400 	.word	0x40010400
 800b520:	40014000 	.word	0x40014000
 800b524:	40014400 	.word	0x40014400
 800b528:	40014800 	.word	0x40014800

0800b52c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a1b      	ldr	r3, [r3, #32]
 800b540:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4b24      	ldr	r3, [pc, #144]	@ (800b5e8 <TIM_OC4_SetConfig+0xbc>)
 800b558:	4013      	ands	r3, r2
 800b55a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	021b      	lsls	r3, r3, #8
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	031b      	lsls	r3, r3, #12
 800b57e:	693a      	ldr	r2, [r7, #16]
 800b580:	4313      	orrs	r3, r2
 800b582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a19      	ldr	r2, [pc, #100]	@ (800b5ec <TIM_OC4_SetConfig+0xc0>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d00f      	beq.n	800b5ac <TIM_OC4_SetConfig+0x80>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a18      	ldr	r2, [pc, #96]	@ (800b5f0 <TIM_OC4_SetConfig+0xc4>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d00b      	beq.n	800b5ac <TIM_OC4_SetConfig+0x80>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a17      	ldr	r2, [pc, #92]	@ (800b5f4 <TIM_OC4_SetConfig+0xc8>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d007      	beq.n	800b5ac <TIM_OC4_SetConfig+0x80>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a16      	ldr	r2, [pc, #88]	@ (800b5f8 <TIM_OC4_SetConfig+0xcc>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d003      	beq.n	800b5ac <TIM_OC4_SetConfig+0x80>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	4a15      	ldr	r2, [pc, #84]	@ (800b5fc <TIM_OC4_SetConfig+0xd0>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d109      	bne.n	800b5c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	695b      	ldr	r3, [r3, #20]
 800b5b8:	019b      	lsls	r3, r3, #6
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	621a      	str	r2, [r3, #32]
}
 800b5da:	bf00      	nop
 800b5dc:	371c      	adds	r7, #28
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	feff8fff 	.word	0xfeff8fff
 800b5ec:	40010000 	.word	0x40010000
 800b5f0:	40010400 	.word	0x40010400
 800b5f4:	40014000 	.word	0x40014000
 800b5f8:	40014400 	.word	0x40014400
 800b5fc:	40014800 	.word	0x40014800

0800b600 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a1b      	ldr	r3, [r3, #32]
 800b614:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	4b21      	ldr	r3, [pc, #132]	@ (800b6b0 <TIM_OC5_SetConfig+0xb0>)
 800b62c:	4013      	ands	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	4313      	orrs	r3, r2
 800b638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b640:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	041b      	lsls	r3, r3, #16
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a18      	ldr	r2, [pc, #96]	@ (800b6b4 <TIM_OC5_SetConfig+0xb4>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d00f      	beq.n	800b676 <TIM_OC5_SetConfig+0x76>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a17      	ldr	r2, [pc, #92]	@ (800b6b8 <TIM_OC5_SetConfig+0xb8>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d00b      	beq.n	800b676 <TIM_OC5_SetConfig+0x76>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a16      	ldr	r2, [pc, #88]	@ (800b6bc <TIM_OC5_SetConfig+0xbc>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d007      	beq.n	800b676 <TIM_OC5_SetConfig+0x76>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a15      	ldr	r2, [pc, #84]	@ (800b6c0 <TIM_OC5_SetConfig+0xc0>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d003      	beq.n	800b676 <TIM_OC5_SetConfig+0x76>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a14      	ldr	r2, [pc, #80]	@ (800b6c4 <TIM_OC5_SetConfig+0xc4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d109      	bne.n	800b68a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b67c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	021b      	lsls	r3, r3, #8
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	4313      	orrs	r3, r2
 800b688:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	685a      	ldr	r2, [r3, #4]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	621a      	str	r2, [r3, #32]
}
 800b6a4:	bf00      	nop
 800b6a6:	371c      	adds	r7, #28
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	fffeff8f 	.word	0xfffeff8f
 800b6b4:	40010000 	.word	0x40010000
 800b6b8:	40010400 	.word	0x40010400
 800b6bc:	40014000 	.word	0x40014000
 800b6c0:	40014400 	.word	0x40014400
 800b6c4:	40014800 	.word	0x40014800

0800b6c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a1b      	ldr	r3, [r3, #32]
 800b6dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	4b22      	ldr	r3, [pc, #136]	@ (800b77c <TIM_OC6_SetConfig+0xb4>)
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	021b      	lsls	r3, r3, #8
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	4313      	orrs	r3, r2
 800b702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b70a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	051b      	lsls	r3, r3, #20
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	4313      	orrs	r3, r2
 800b716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a19      	ldr	r2, [pc, #100]	@ (800b780 <TIM_OC6_SetConfig+0xb8>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d00f      	beq.n	800b740 <TIM_OC6_SetConfig+0x78>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a18      	ldr	r2, [pc, #96]	@ (800b784 <TIM_OC6_SetConfig+0xbc>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d00b      	beq.n	800b740 <TIM_OC6_SetConfig+0x78>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a17      	ldr	r2, [pc, #92]	@ (800b788 <TIM_OC6_SetConfig+0xc0>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d007      	beq.n	800b740 <TIM_OC6_SetConfig+0x78>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a16      	ldr	r2, [pc, #88]	@ (800b78c <TIM_OC6_SetConfig+0xc4>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d003      	beq.n	800b740 <TIM_OC6_SetConfig+0x78>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a15      	ldr	r2, [pc, #84]	@ (800b790 <TIM_OC6_SetConfig+0xc8>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d109      	bne.n	800b754 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	029b      	lsls	r3, r3, #10
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	4313      	orrs	r3, r2
 800b752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	621a      	str	r2, [r3, #32]
}
 800b76e:	bf00      	nop
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	feff8fff 	.word	0xfeff8fff
 800b780:	40010000 	.word	0x40010000
 800b784:	40010400 	.word	0x40010400
 800b788:	40014000 	.word	0x40014000
 800b78c:	40014400 	.word	0x40014400
 800b790:	40014800 	.word	0x40014800

0800b794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d101      	bne.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	e06d      	b.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2202      	movs	r2, #2
 800b7b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a30      	ldr	r2, [pc, #192]	@ (800b894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d004      	beq.n	800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a2f      	ldr	r2, [pc, #188]	@ (800b898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d108      	bne.n	800b7f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b7e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a20      	ldr	r2, [pc, #128]	@ (800b894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d022      	beq.n	800b85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b81e:	d01d      	beq.n	800b85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a1d      	ldr	r2, [pc, #116]	@ (800b89c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d018      	beq.n	800b85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a1c      	ldr	r2, [pc, #112]	@ (800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d013      	beq.n	800b85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a1a      	ldr	r2, [pc, #104]	@ (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d00e      	beq.n	800b85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a15      	ldr	r2, [pc, #84]	@ (800b898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d009      	beq.n	800b85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a16      	ldr	r2, [pc, #88]	@ (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d004      	beq.n	800b85c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a15      	ldr	r2, [pc, #84]	@ (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d10c      	bne.n	800b876 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b862:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2201      	movs	r2, #1
 800b87a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	40010000 	.word	0x40010000
 800b898:	40010400 	.word	0x40010400
 800b89c:	40000400 	.word	0x40000400
 800b8a0:	40000800 	.word	0x40000800
 800b8a4:	40000c00 	.word	0x40000c00
 800b8a8:	40001800 	.word	0x40001800
 800b8ac:	40014000 	.word	0x40014000

0800b8b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d101      	bne.n	800b8c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e042      	b.n	800b948 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d106      	bne.n	800b8da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7f7 f9b5 	bl	8002c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2224      	movs	r2, #36	@ 0x24
 800b8de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f022 0201 	bic.w	r2, r2, #1
 800b8f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f001 fac4 	bl	800ce88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fc55 	bl	800c1b0 <UART_SetConfig>
 800b906:	4603      	mov	r3, r0
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d101      	bne.n	800b910 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e01b      	b.n	800b948 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b91e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b92e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f042 0201 	orr.w	r2, r2, #1
 800b93e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f001 fb43 	bl	800cfcc <UART_CheckIdleState>
 800b946:	4603      	mov	r3, r0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08a      	sub	sp, #40	@ 0x28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	4613      	mov	r3, r2
 800b95c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b964:	2b20      	cmp	r3, #32
 800b966:	d137      	bne.n	800b9d8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d002      	beq.n	800b974 <HAL_UART_Receive_DMA+0x24>
 800b96e:	88fb      	ldrh	r3, [r7, #6]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b974:	2301      	movs	r3, #1
 800b976:	e030      	b.n	800b9da <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a18      	ldr	r2, [pc, #96]	@ (800b9e4 <HAL_UART_Receive_DMA+0x94>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d01f      	beq.n	800b9c8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b992:	2b00      	cmp	r3, #0
 800b994:	d018      	beq.n	800b9c8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	e853 3f00 	ldrex	r3, [r3]
 800b9a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b4:	623b      	str	r3, [r7, #32]
 800b9b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b8:	69f9      	ldr	r1, [r7, #28]
 800b9ba:	6a3a      	ldr	r2, [r7, #32]
 800b9bc:	e841 2300 	strex	r3, r2, [r1]
 800b9c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e6      	bne.n	800b996 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b9c8:	88fb      	ldrh	r3, [r7, #6]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	68b9      	ldr	r1, [r7, #8]
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f001 fc14 	bl	800d1fc <UART_Start_Receive_DMA>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	e000      	b.n	800b9da <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b9d8:	2302      	movs	r3, #2
  }
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3728      	adds	r7, #40	@ 0x28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	58000c00 	.word	0x58000c00

0800b9e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b0ba      	sub	sp, #232	@ 0xe8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ba12:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ba16:	4013      	ands	r3, r2
 800ba18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ba1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d11b      	bne.n	800ba5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba28:	f003 0320 	and.w	r3, r3, #32
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d015      	beq.n	800ba5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba34:	f003 0320 	and.w	r3, r3, #32
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d105      	bne.n	800ba48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d009      	beq.n	800ba5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 8377 	beq.w	800c140 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	4798      	blx	r3
      }
      return;
 800ba5a:	e371      	b.n	800c140 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 8123 	beq.w	800bcac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ba6a:	4b8d      	ldr	r3, [pc, #564]	@ (800bca0 <HAL_UART_IRQHandler+0x2b8>)
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d106      	bne.n	800ba80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ba76:	4b8b      	ldr	r3, [pc, #556]	@ (800bca4 <HAL_UART_IRQHandler+0x2bc>)
 800ba78:	4013      	ands	r3, r2
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f000 8116 	beq.w	800bcac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d011      	beq.n	800bab0 <HAL_UART_IRQHandler+0xc8>
 800ba8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00b      	beq.n	800bab0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baa6:	f043 0201 	orr.w	r2, r3, #1
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bab4:	f003 0302 	and.w	r3, r3, #2
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d011      	beq.n	800bae0 <HAL_UART_IRQHandler+0xf8>
 800babc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00b      	beq.n	800bae0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2202      	movs	r2, #2
 800bace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bad6:	f043 0204 	orr.w	r2, r3, #4
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bae4:	f003 0304 	and.w	r3, r3, #4
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d011      	beq.n	800bb10 <HAL_UART_IRQHandler+0x128>
 800baec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00b      	beq.n	800bb10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2204      	movs	r2, #4
 800bafe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb06:	f043 0202 	orr.w	r2, r3, #2
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb14:	f003 0308 	and.w	r3, r3, #8
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d017      	beq.n	800bb4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb20:	f003 0320 	and.w	r3, r3, #32
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d105      	bne.n	800bb34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bb28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bb2c:	4b5c      	ldr	r3, [pc, #368]	@ (800bca0 <HAL_UART_IRQHandler+0x2b8>)
 800bb2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00b      	beq.n	800bb4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2208      	movs	r2, #8
 800bb3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb42:	f043 0208 	orr.w	r2, r3, #8
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d012      	beq.n	800bb7e <HAL_UART_IRQHandler+0x196>
 800bb58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00c      	beq.n	800bb7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb74:	f043 0220 	orr.w	r2, r3, #32
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 82dd 	beq.w	800c144 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb8e:	f003 0320 	and.w	r3, r3, #32
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d013      	beq.n	800bbbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb9a:	f003 0320 	and.w	r3, r3, #32
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d105      	bne.n	800bbae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d007      	beq.n	800bbbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d003      	beq.n	800bbbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd2:	2b40      	cmp	r3, #64	@ 0x40
 800bbd4:	d005      	beq.n	800bbe2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bbda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d054      	beq.n	800bc8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f001 fbf2 	bl	800d3cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbf2:	2b40      	cmp	r3, #64	@ 0x40
 800bbf4:	d146      	bne.n	800bc84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc04:	e853 3f00 	ldrex	r3, [r3]
 800bc08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bc0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bc22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc32:	e841 2300 	strex	r3, r2, [r1]
 800bc36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1d9      	bne.n	800bbf6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d017      	beq.n	800bc7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc52:	4a15      	ldr	r2, [pc, #84]	@ (800bca8 <HAL_UART_IRQHandler+0x2c0>)
 800bc54:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7f8 fcb1 	bl	80045c4 <HAL_DMA_Abort_IT>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d019      	beq.n	800bc9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800bc76:	4610      	mov	r0, r2
 800bc78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc7a:	e00f      	b.n	800bc9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fa81 	bl	800c184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc82:	e00b      	b.n	800bc9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 fa7d 	bl	800c184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc8a:	e007      	b.n	800bc9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fa79 	bl	800c184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bc9a:	e253      	b.n	800c144 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc9c:	bf00      	nop
    return;
 800bc9e:	e251      	b.n	800c144 <HAL_UART_IRQHandler+0x75c>
 800bca0:	10000001 	.word	0x10000001
 800bca4:	04000120 	.word	0x04000120
 800bca8:	0800d67f 	.word	0x0800d67f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	f040 81e7 	bne.w	800c084 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bcb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcba:	f003 0310 	and.w	r3, r3, #16
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 81e0 	beq.w	800c084 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bcc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcc8:	f003 0310 	and.w	r3, r3, #16
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f000 81d9 	beq.w	800c084 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2210      	movs	r2, #16
 800bcd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bce4:	2b40      	cmp	r3, #64	@ 0x40
 800bce6:	f040 8151 	bne.w	800bf8c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a96      	ldr	r2, [pc, #600]	@ (800bf4c <HAL_UART_IRQHandler+0x564>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d068      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a93      	ldr	r2, [pc, #588]	@ (800bf50 <HAL_UART_IRQHandler+0x568>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d061      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a91      	ldr	r2, [pc, #580]	@ (800bf54 <HAL_UART_IRQHandler+0x56c>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d05a      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a8e      	ldr	r2, [pc, #568]	@ (800bf58 <HAL_UART_IRQHandler+0x570>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d053      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a8c      	ldr	r2, [pc, #560]	@ (800bf5c <HAL_UART_IRQHandler+0x574>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d04c      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a89      	ldr	r2, [pc, #548]	@ (800bf60 <HAL_UART_IRQHandler+0x578>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d045      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a87      	ldr	r2, [pc, #540]	@ (800bf64 <HAL_UART_IRQHandler+0x57c>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d03e      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a84      	ldr	r2, [pc, #528]	@ (800bf68 <HAL_UART_IRQHandler+0x580>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d037      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a82      	ldr	r2, [pc, #520]	@ (800bf6c <HAL_UART_IRQHandler+0x584>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d030      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a7f      	ldr	r2, [pc, #508]	@ (800bf70 <HAL_UART_IRQHandler+0x588>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d029      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a7d      	ldr	r2, [pc, #500]	@ (800bf74 <HAL_UART_IRQHandler+0x58c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d022      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a7a      	ldr	r2, [pc, #488]	@ (800bf78 <HAL_UART_IRQHandler+0x590>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d01b      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a78      	ldr	r2, [pc, #480]	@ (800bf7c <HAL_UART_IRQHandler+0x594>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d014      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a75      	ldr	r2, [pc, #468]	@ (800bf80 <HAL_UART_IRQHandler+0x598>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d00d      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a73      	ldr	r2, [pc, #460]	@ (800bf84 <HAL_UART_IRQHandler+0x59c>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d006      	beq.n	800bdca <HAL_UART_IRQHandler+0x3e2>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a70      	ldr	r2, [pc, #448]	@ (800bf88 <HAL_UART_IRQHandler+0x5a0>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d106      	bne.n	800bdd8 <HAL_UART_IRQHandler+0x3f0>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	e005      	b.n	800bde4 <HAL_UART_IRQHandler+0x3fc>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bde8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 81ab 	beq.w	800c148 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	f080 81a3 	bcs.w	800c148 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be18:	f000 8087 	beq.w	800bf2a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be28:	e853 3f00 	ldrex	r3, [r3]
 800be2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800be30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800be4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800be52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800be56:	e841 2300 	strex	r3, r2, [r1]
 800be5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800be5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1da      	bne.n	800be1c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	3308      	adds	r3, #8
 800be6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be70:	e853 3f00 	ldrex	r3, [r3]
 800be74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800be76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be78:	f023 0301 	bic.w	r3, r3, #1
 800be7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3308      	adds	r3, #8
 800be86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800be8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800be8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800be92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800be96:	e841 2300 	strex	r3, r2, [r1]
 800be9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800be9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1e1      	bne.n	800be66 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	3308      	adds	r3, #8
 800bea8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800beac:	e853 3f00 	ldrex	r3, [r3]
 800beb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800beb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800beb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3308      	adds	r3, #8
 800bec2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bec6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bec8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800becc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bece:	e841 2300 	strex	r3, r2, [r1]
 800bed2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1e3      	bne.n	800bea2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2220      	movs	r2, #32
 800bede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bef0:	e853 3f00 	ldrex	r3, [r3]
 800bef4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bef8:	f023 0310 	bic.w	r3, r3, #16
 800befc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	461a      	mov	r2, r3
 800bf06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf12:	e841 2300 	strex	r3, r2, [r1]
 800bf16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1e4      	bne.n	800bee8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7f8 f82f 	bl	8003f88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4619      	mov	r1, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f927 	bl	800c198 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf4a:	e0fd      	b.n	800c148 <HAL_UART_IRQHandler+0x760>
 800bf4c:	40020010 	.word	0x40020010
 800bf50:	40020028 	.word	0x40020028
 800bf54:	40020040 	.word	0x40020040
 800bf58:	40020058 	.word	0x40020058
 800bf5c:	40020070 	.word	0x40020070
 800bf60:	40020088 	.word	0x40020088
 800bf64:	400200a0 	.word	0x400200a0
 800bf68:	400200b8 	.word	0x400200b8
 800bf6c:	40020410 	.word	0x40020410
 800bf70:	40020428 	.word	0x40020428
 800bf74:	40020440 	.word	0x40020440
 800bf78:	40020458 	.word	0x40020458
 800bf7c:	40020470 	.word	0x40020470
 800bf80:	40020488 	.word	0x40020488
 800bf84:	400204a0 	.word	0x400204a0
 800bf88:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 80cf 	beq.w	800c14c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bfae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 80ca 	beq.w	800c14c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc0:	e853 3f00 	ldrex	r3, [r3]
 800bfc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bfda:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfdc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfe2:	e841 2300 	strex	r3, r2, [r1]
 800bfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1e4      	bne.n	800bfb8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3308      	adds	r3, #8
 800bff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff8:	e853 3f00 	ldrex	r3, [r3]
 800bffc:	623b      	str	r3, [r7, #32]
   return(result);
 800bffe:	6a3a      	ldr	r2, [r7, #32]
 800c000:	4b55      	ldr	r3, [pc, #340]	@ (800c158 <HAL_UART_IRQHandler+0x770>)
 800c002:	4013      	ands	r3, r2
 800c004:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3308      	adds	r3, #8
 800c00e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c012:	633a      	str	r2, [r7, #48]	@ 0x30
 800c014:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c01a:	e841 2300 	strex	r3, r2, [r1]
 800c01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1e3      	bne.n	800bfee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2220      	movs	r2, #32
 800c02a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	e853 3f00 	ldrex	r3, [r3]
 800c046:	60fb      	str	r3, [r7, #12]
   return(result);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f023 0310 	bic.w	r3, r3, #16
 800c04e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	461a      	mov	r2, r3
 800c058:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c05c:	61fb      	str	r3, [r7, #28]
 800c05e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c060:	69b9      	ldr	r1, [r7, #24]
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	e841 2300 	strex	r3, r2, [r1]
 800c068:	617b      	str	r3, [r7, #20]
   return(result);
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1e4      	bne.n	800c03a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2202      	movs	r2, #2
 800c074:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f88b 	bl	800c198 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c082:	e063      	b.n	800c14c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00e      	beq.n	800c0ae <HAL_UART_IRQHandler+0x6c6>
 800c090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d008      	beq.n	800c0ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c0a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f001 fb2a 	bl	800d700 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0ac:	e051      	b.n	800c152 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d014      	beq.n	800c0e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d105      	bne.n	800c0d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c0c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d008      	beq.n	800c0e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d03a      	beq.n	800c150 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
    }
    return;
 800c0e2:	e035      	b.n	800c150 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d009      	beq.n	800c104 <HAL_UART_IRQHandler+0x71c>
 800c0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d003      	beq.n	800c104 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f001 fad4 	bl	800d6aa <UART_EndTransmit_IT>
    return;
 800c102:	e026      	b.n	800c152 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d009      	beq.n	800c124 <HAL_UART_IRQHandler+0x73c>
 800c110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c114:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f001 fb03 	bl	800d728 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c122:	e016      	b.n	800c152 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d010      	beq.n	800c152 <HAL_UART_IRQHandler+0x76a>
 800c130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c134:	2b00      	cmp	r3, #0
 800c136:	da0c      	bge.n	800c152 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 faeb 	bl	800d714 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c13e:	e008      	b.n	800c152 <HAL_UART_IRQHandler+0x76a>
      return;
 800c140:	bf00      	nop
 800c142:	e006      	b.n	800c152 <HAL_UART_IRQHandler+0x76a>
    return;
 800c144:	bf00      	nop
 800c146:	e004      	b.n	800c152 <HAL_UART_IRQHandler+0x76a>
      return;
 800c148:	bf00      	nop
 800c14a:	e002      	b.n	800c152 <HAL_UART_IRQHandler+0x76a>
      return;
 800c14c:	bf00      	nop
 800c14e:	e000      	b.n	800c152 <HAL_UART_IRQHandler+0x76a>
    return;
 800c150:	bf00      	nop
  }
}
 800c152:	37e8      	adds	r7, #232	@ 0xe8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	effffffe 	.word	0xeffffffe

0800c15c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1b4:	b092      	sub	sp, #72	@ 0x48
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	431a      	orrs	r2, r3
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	431a      	orrs	r2, r3
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	69db      	ldr	r3, [r3, #28]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	4bbe      	ldr	r3, [pc, #760]	@ (800c4d8 <UART_SetConfig+0x328>)
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	697a      	ldr	r2, [r7, #20]
 800c1e4:	6812      	ldr	r2, [r2, #0]
 800c1e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1e8:	430b      	orrs	r3, r1
 800c1ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	68da      	ldr	r2, [r3, #12]
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	430a      	orrs	r2, r1
 800c200:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4ab3      	ldr	r2, [pc, #716]	@ (800c4dc <UART_SetConfig+0x32c>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d004      	beq.n	800c21c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c218:	4313      	orrs	r3, r2
 800c21a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	689a      	ldr	r2, [r3, #8]
 800c222:	4baf      	ldr	r3, [pc, #700]	@ (800c4e0 <UART_SetConfig+0x330>)
 800c224:	4013      	ands	r3, r2
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	6812      	ldr	r2, [r2, #0]
 800c22a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c22c:	430b      	orrs	r3, r1
 800c22e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c236:	f023 010f 	bic.w	r1, r3, #15
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	430a      	orrs	r2, r1
 800c244:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4aa6      	ldr	r2, [pc, #664]	@ (800c4e4 <UART_SetConfig+0x334>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d177      	bne.n	800c340 <UART_SetConfig+0x190>
 800c250:	4ba5      	ldr	r3, [pc, #660]	@ (800c4e8 <UART_SetConfig+0x338>)
 800c252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c254:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c258:	2b28      	cmp	r3, #40	@ 0x28
 800c25a:	d86d      	bhi.n	800c338 <UART_SetConfig+0x188>
 800c25c:	a201      	add	r2, pc, #4	@ (adr r2, 800c264 <UART_SetConfig+0xb4>)
 800c25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c262:	bf00      	nop
 800c264:	0800c309 	.word	0x0800c309
 800c268:	0800c339 	.word	0x0800c339
 800c26c:	0800c339 	.word	0x0800c339
 800c270:	0800c339 	.word	0x0800c339
 800c274:	0800c339 	.word	0x0800c339
 800c278:	0800c339 	.word	0x0800c339
 800c27c:	0800c339 	.word	0x0800c339
 800c280:	0800c339 	.word	0x0800c339
 800c284:	0800c311 	.word	0x0800c311
 800c288:	0800c339 	.word	0x0800c339
 800c28c:	0800c339 	.word	0x0800c339
 800c290:	0800c339 	.word	0x0800c339
 800c294:	0800c339 	.word	0x0800c339
 800c298:	0800c339 	.word	0x0800c339
 800c29c:	0800c339 	.word	0x0800c339
 800c2a0:	0800c339 	.word	0x0800c339
 800c2a4:	0800c319 	.word	0x0800c319
 800c2a8:	0800c339 	.word	0x0800c339
 800c2ac:	0800c339 	.word	0x0800c339
 800c2b0:	0800c339 	.word	0x0800c339
 800c2b4:	0800c339 	.word	0x0800c339
 800c2b8:	0800c339 	.word	0x0800c339
 800c2bc:	0800c339 	.word	0x0800c339
 800c2c0:	0800c339 	.word	0x0800c339
 800c2c4:	0800c321 	.word	0x0800c321
 800c2c8:	0800c339 	.word	0x0800c339
 800c2cc:	0800c339 	.word	0x0800c339
 800c2d0:	0800c339 	.word	0x0800c339
 800c2d4:	0800c339 	.word	0x0800c339
 800c2d8:	0800c339 	.word	0x0800c339
 800c2dc:	0800c339 	.word	0x0800c339
 800c2e0:	0800c339 	.word	0x0800c339
 800c2e4:	0800c329 	.word	0x0800c329
 800c2e8:	0800c339 	.word	0x0800c339
 800c2ec:	0800c339 	.word	0x0800c339
 800c2f0:	0800c339 	.word	0x0800c339
 800c2f4:	0800c339 	.word	0x0800c339
 800c2f8:	0800c339 	.word	0x0800c339
 800c2fc:	0800c339 	.word	0x0800c339
 800c300:	0800c339 	.word	0x0800c339
 800c304:	0800c331 	.word	0x0800c331
 800c308:	2301      	movs	r3, #1
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c30e:	e326      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c310:	2304      	movs	r3, #4
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e322      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c318:	2308      	movs	r3, #8
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e31e      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c320:	2310      	movs	r3, #16
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e31a      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c328:	2320      	movs	r3, #32
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e316      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c330:	2340      	movs	r3, #64	@ 0x40
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e312      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c338:	2380      	movs	r3, #128	@ 0x80
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33e:	e30e      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a69      	ldr	r2, [pc, #420]	@ (800c4ec <UART_SetConfig+0x33c>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d130      	bne.n	800c3ac <UART_SetConfig+0x1fc>
 800c34a:	4b67      	ldr	r3, [pc, #412]	@ (800c4e8 <UART_SetConfig+0x338>)
 800c34c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c34e:	f003 0307 	and.w	r3, r3, #7
 800c352:	2b05      	cmp	r3, #5
 800c354:	d826      	bhi.n	800c3a4 <UART_SetConfig+0x1f4>
 800c356:	a201      	add	r2, pc, #4	@ (adr r2, 800c35c <UART_SetConfig+0x1ac>)
 800c358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35c:	0800c375 	.word	0x0800c375
 800c360:	0800c37d 	.word	0x0800c37d
 800c364:	0800c385 	.word	0x0800c385
 800c368:	0800c38d 	.word	0x0800c38d
 800c36c:	0800c395 	.word	0x0800c395
 800c370:	0800c39d 	.word	0x0800c39d
 800c374:	2300      	movs	r3, #0
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37a:	e2f0      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c37c:	2304      	movs	r3, #4
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e2ec      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c384:	2308      	movs	r3, #8
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38a:	e2e8      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c38c:	2310      	movs	r3, #16
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e2e4      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c394:	2320      	movs	r3, #32
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e2e0      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c39c:	2340      	movs	r3, #64	@ 0x40
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e2dc      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c3a4:	2380      	movs	r3, #128	@ 0x80
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e2d8      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a4f      	ldr	r2, [pc, #316]	@ (800c4f0 <UART_SetConfig+0x340>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d130      	bne.n	800c418 <UART_SetConfig+0x268>
 800c3b6:	4b4c      	ldr	r3, [pc, #304]	@ (800c4e8 <UART_SetConfig+0x338>)
 800c3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ba:	f003 0307 	and.w	r3, r3, #7
 800c3be:	2b05      	cmp	r3, #5
 800c3c0:	d826      	bhi.n	800c410 <UART_SetConfig+0x260>
 800c3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c8 <UART_SetConfig+0x218>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c3e9 	.word	0x0800c3e9
 800c3d0:	0800c3f1 	.word	0x0800c3f1
 800c3d4:	0800c3f9 	.word	0x0800c3f9
 800c3d8:	0800c401 	.word	0x0800c401
 800c3dc:	0800c409 	.word	0x0800c409
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e6:	e2ba      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c3e8:	2304      	movs	r3, #4
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ee:	e2b6      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c3f0:	2308      	movs	r3, #8
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e2b2      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c3f8:	2310      	movs	r3, #16
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e2ae      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c400:	2320      	movs	r3, #32
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e2aa      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c408:	2340      	movs	r3, #64	@ 0x40
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e2a6      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c410:	2380      	movs	r3, #128	@ 0x80
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c416:	e2a2      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a35      	ldr	r2, [pc, #212]	@ (800c4f4 <UART_SetConfig+0x344>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d130      	bne.n	800c484 <UART_SetConfig+0x2d4>
 800c422:	4b31      	ldr	r3, [pc, #196]	@ (800c4e8 <UART_SetConfig+0x338>)
 800c424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b05      	cmp	r3, #5
 800c42c:	d826      	bhi.n	800c47c <UART_SetConfig+0x2cc>
 800c42e:	a201      	add	r2, pc, #4	@ (adr r2, 800c434 <UART_SetConfig+0x284>)
 800c430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c434:	0800c44d 	.word	0x0800c44d
 800c438:	0800c455 	.word	0x0800c455
 800c43c:	0800c45d 	.word	0x0800c45d
 800c440:	0800c465 	.word	0x0800c465
 800c444:	0800c46d 	.word	0x0800c46d
 800c448:	0800c475 	.word	0x0800c475
 800c44c:	2300      	movs	r3, #0
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c452:	e284      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c454:	2304      	movs	r3, #4
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45a:	e280      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c45c:	2308      	movs	r3, #8
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e27c      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c464:	2310      	movs	r3, #16
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e278      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c46c:	2320      	movs	r3, #32
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c472:	e274      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c474:	2340      	movs	r3, #64	@ 0x40
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47a:	e270      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c47c:	2380      	movs	r3, #128	@ 0x80
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c482:	e26c      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a1b      	ldr	r2, [pc, #108]	@ (800c4f8 <UART_SetConfig+0x348>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d142      	bne.n	800c514 <UART_SetConfig+0x364>
 800c48e:	4b16      	ldr	r3, [pc, #88]	@ (800c4e8 <UART_SetConfig+0x338>)
 800c490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c492:	f003 0307 	and.w	r3, r3, #7
 800c496:	2b05      	cmp	r3, #5
 800c498:	d838      	bhi.n	800c50c <UART_SetConfig+0x35c>
 800c49a:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a0 <UART_SetConfig+0x2f0>)
 800c49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a0:	0800c4b9 	.word	0x0800c4b9
 800c4a4:	0800c4c1 	.word	0x0800c4c1
 800c4a8:	0800c4c9 	.word	0x0800c4c9
 800c4ac:	0800c4d1 	.word	0x0800c4d1
 800c4b0:	0800c4fd 	.word	0x0800c4fd
 800c4b4:	0800c505 	.word	0x0800c505
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4be:	e24e      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c4c0:	2304      	movs	r3, #4
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c6:	e24a      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c4c8:	2308      	movs	r3, #8
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ce:	e246      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c4d0:	2310      	movs	r3, #16
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d6:	e242      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c4d8:	cfff69f3 	.word	0xcfff69f3
 800c4dc:	58000c00 	.word	0x58000c00
 800c4e0:	11fff4ff 	.word	0x11fff4ff
 800c4e4:	40011000 	.word	0x40011000
 800c4e8:	58024400 	.word	0x58024400
 800c4ec:	40004400 	.word	0x40004400
 800c4f0:	40004800 	.word	0x40004800
 800c4f4:	40004c00 	.word	0x40004c00
 800c4f8:	40005000 	.word	0x40005000
 800c4fc:	2320      	movs	r3, #32
 800c4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c502:	e22c      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c504:	2340      	movs	r3, #64	@ 0x40
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c50a:	e228      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c50c:	2380      	movs	r3, #128	@ 0x80
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c512:	e224      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4ab1      	ldr	r2, [pc, #708]	@ (800c7e0 <UART_SetConfig+0x630>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d176      	bne.n	800c60c <UART_SetConfig+0x45c>
 800c51e:	4bb1      	ldr	r3, [pc, #708]	@ (800c7e4 <UART_SetConfig+0x634>)
 800c520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c526:	2b28      	cmp	r3, #40	@ 0x28
 800c528:	d86c      	bhi.n	800c604 <UART_SetConfig+0x454>
 800c52a:	a201      	add	r2, pc, #4	@ (adr r2, 800c530 <UART_SetConfig+0x380>)
 800c52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c530:	0800c5d5 	.word	0x0800c5d5
 800c534:	0800c605 	.word	0x0800c605
 800c538:	0800c605 	.word	0x0800c605
 800c53c:	0800c605 	.word	0x0800c605
 800c540:	0800c605 	.word	0x0800c605
 800c544:	0800c605 	.word	0x0800c605
 800c548:	0800c605 	.word	0x0800c605
 800c54c:	0800c605 	.word	0x0800c605
 800c550:	0800c5dd 	.word	0x0800c5dd
 800c554:	0800c605 	.word	0x0800c605
 800c558:	0800c605 	.word	0x0800c605
 800c55c:	0800c605 	.word	0x0800c605
 800c560:	0800c605 	.word	0x0800c605
 800c564:	0800c605 	.word	0x0800c605
 800c568:	0800c605 	.word	0x0800c605
 800c56c:	0800c605 	.word	0x0800c605
 800c570:	0800c5e5 	.word	0x0800c5e5
 800c574:	0800c605 	.word	0x0800c605
 800c578:	0800c605 	.word	0x0800c605
 800c57c:	0800c605 	.word	0x0800c605
 800c580:	0800c605 	.word	0x0800c605
 800c584:	0800c605 	.word	0x0800c605
 800c588:	0800c605 	.word	0x0800c605
 800c58c:	0800c605 	.word	0x0800c605
 800c590:	0800c5ed 	.word	0x0800c5ed
 800c594:	0800c605 	.word	0x0800c605
 800c598:	0800c605 	.word	0x0800c605
 800c59c:	0800c605 	.word	0x0800c605
 800c5a0:	0800c605 	.word	0x0800c605
 800c5a4:	0800c605 	.word	0x0800c605
 800c5a8:	0800c605 	.word	0x0800c605
 800c5ac:	0800c605 	.word	0x0800c605
 800c5b0:	0800c5f5 	.word	0x0800c5f5
 800c5b4:	0800c605 	.word	0x0800c605
 800c5b8:	0800c605 	.word	0x0800c605
 800c5bc:	0800c605 	.word	0x0800c605
 800c5c0:	0800c605 	.word	0x0800c605
 800c5c4:	0800c605 	.word	0x0800c605
 800c5c8:	0800c605 	.word	0x0800c605
 800c5cc:	0800c605 	.word	0x0800c605
 800c5d0:	0800c5fd 	.word	0x0800c5fd
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5da:	e1c0      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c5dc:	2304      	movs	r3, #4
 800c5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5e2:	e1bc      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c5e4:	2308      	movs	r3, #8
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ea:	e1b8      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c5ec:	2310      	movs	r3, #16
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f2:	e1b4      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c5f4:	2320      	movs	r3, #32
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fa:	e1b0      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c5fc:	2340      	movs	r3, #64	@ 0x40
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c602:	e1ac      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c604:	2380      	movs	r3, #128	@ 0x80
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60a:	e1a8      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a75      	ldr	r2, [pc, #468]	@ (800c7e8 <UART_SetConfig+0x638>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d130      	bne.n	800c678 <UART_SetConfig+0x4c8>
 800c616:	4b73      	ldr	r3, [pc, #460]	@ (800c7e4 <UART_SetConfig+0x634>)
 800c618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c61a:	f003 0307 	and.w	r3, r3, #7
 800c61e:	2b05      	cmp	r3, #5
 800c620:	d826      	bhi.n	800c670 <UART_SetConfig+0x4c0>
 800c622:	a201      	add	r2, pc, #4	@ (adr r2, 800c628 <UART_SetConfig+0x478>)
 800c624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c628:	0800c641 	.word	0x0800c641
 800c62c:	0800c649 	.word	0x0800c649
 800c630:	0800c651 	.word	0x0800c651
 800c634:	0800c659 	.word	0x0800c659
 800c638:	0800c661 	.word	0x0800c661
 800c63c:	0800c669 	.word	0x0800c669
 800c640:	2300      	movs	r3, #0
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c646:	e18a      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c648:	2304      	movs	r3, #4
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64e:	e186      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c650:	2308      	movs	r3, #8
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c656:	e182      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c658:	2310      	movs	r3, #16
 800c65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c65e:	e17e      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c660:	2320      	movs	r3, #32
 800c662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c666:	e17a      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c668:	2340      	movs	r3, #64	@ 0x40
 800c66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c66e:	e176      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c670:	2380      	movs	r3, #128	@ 0x80
 800c672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c676:	e172      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a5b      	ldr	r2, [pc, #364]	@ (800c7ec <UART_SetConfig+0x63c>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d130      	bne.n	800c6e4 <UART_SetConfig+0x534>
 800c682:	4b58      	ldr	r3, [pc, #352]	@ (800c7e4 <UART_SetConfig+0x634>)
 800c684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	2b05      	cmp	r3, #5
 800c68c:	d826      	bhi.n	800c6dc <UART_SetConfig+0x52c>
 800c68e:	a201      	add	r2, pc, #4	@ (adr r2, 800c694 <UART_SetConfig+0x4e4>)
 800c690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c694:	0800c6ad 	.word	0x0800c6ad
 800c698:	0800c6b5 	.word	0x0800c6b5
 800c69c:	0800c6bd 	.word	0x0800c6bd
 800c6a0:	0800c6c5 	.word	0x0800c6c5
 800c6a4:	0800c6cd 	.word	0x0800c6cd
 800c6a8:	0800c6d5 	.word	0x0800c6d5
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6b2:	e154      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c6b4:	2304      	movs	r3, #4
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ba:	e150      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c6bc:	2308      	movs	r3, #8
 800c6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6c2:	e14c      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c6c4:	2310      	movs	r3, #16
 800c6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ca:	e148      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c6cc:	2320      	movs	r3, #32
 800c6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6d2:	e144      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c6d4:	2340      	movs	r3, #64	@ 0x40
 800c6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6da:	e140      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c6dc:	2380      	movs	r3, #128	@ 0x80
 800c6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6e2:	e13c      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a41      	ldr	r2, [pc, #260]	@ (800c7f0 <UART_SetConfig+0x640>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	f040 8082 	bne.w	800c7f4 <UART_SetConfig+0x644>
 800c6f0:	4b3c      	ldr	r3, [pc, #240]	@ (800c7e4 <UART_SetConfig+0x634>)
 800c6f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c6f8:	2b28      	cmp	r3, #40	@ 0x28
 800c6fa:	d86d      	bhi.n	800c7d8 <UART_SetConfig+0x628>
 800c6fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c704 <UART_SetConfig+0x554>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c7a9 	.word	0x0800c7a9
 800c708:	0800c7d9 	.word	0x0800c7d9
 800c70c:	0800c7d9 	.word	0x0800c7d9
 800c710:	0800c7d9 	.word	0x0800c7d9
 800c714:	0800c7d9 	.word	0x0800c7d9
 800c718:	0800c7d9 	.word	0x0800c7d9
 800c71c:	0800c7d9 	.word	0x0800c7d9
 800c720:	0800c7d9 	.word	0x0800c7d9
 800c724:	0800c7b1 	.word	0x0800c7b1
 800c728:	0800c7d9 	.word	0x0800c7d9
 800c72c:	0800c7d9 	.word	0x0800c7d9
 800c730:	0800c7d9 	.word	0x0800c7d9
 800c734:	0800c7d9 	.word	0x0800c7d9
 800c738:	0800c7d9 	.word	0x0800c7d9
 800c73c:	0800c7d9 	.word	0x0800c7d9
 800c740:	0800c7d9 	.word	0x0800c7d9
 800c744:	0800c7b9 	.word	0x0800c7b9
 800c748:	0800c7d9 	.word	0x0800c7d9
 800c74c:	0800c7d9 	.word	0x0800c7d9
 800c750:	0800c7d9 	.word	0x0800c7d9
 800c754:	0800c7d9 	.word	0x0800c7d9
 800c758:	0800c7d9 	.word	0x0800c7d9
 800c75c:	0800c7d9 	.word	0x0800c7d9
 800c760:	0800c7d9 	.word	0x0800c7d9
 800c764:	0800c7c1 	.word	0x0800c7c1
 800c768:	0800c7d9 	.word	0x0800c7d9
 800c76c:	0800c7d9 	.word	0x0800c7d9
 800c770:	0800c7d9 	.word	0x0800c7d9
 800c774:	0800c7d9 	.word	0x0800c7d9
 800c778:	0800c7d9 	.word	0x0800c7d9
 800c77c:	0800c7d9 	.word	0x0800c7d9
 800c780:	0800c7d9 	.word	0x0800c7d9
 800c784:	0800c7c9 	.word	0x0800c7c9
 800c788:	0800c7d9 	.word	0x0800c7d9
 800c78c:	0800c7d9 	.word	0x0800c7d9
 800c790:	0800c7d9 	.word	0x0800c7d9
 800c794:	0800c7d9 	.word	0x0800c7d9
 800c798:	0800c7d9 	.word	0x0800c7d9
 800c79c:	0800c7d9 	.word	0x0800c7d9
 800c7a0:	0800c7d9 	.word	0x0800c7d9
 800c7a4:	0800c7d1 	.word	0x0800c7d1
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ae:	e0d6      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c7b0:	2304      	movs	r3, #4
 800c7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7b6:	e0d2      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c7b8:	2308      	movs	r3, #8
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7be:	e0ce      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c7c0:	2310      	movs	r3, #16
 800c7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7c6:	e0ca      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c7c8:	2320      	movs	r3, #32
 800c7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ce:	e0c6      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c7d0:	2340      	movs	r3, #64	@ 0x40
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7d6:	e0c2      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c7d8:	2380      	movs	r3, #128	@ 0x80
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7de:	e0be      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c7e0:	40011400 	.word	0x40011400
 800c7e4:	58024400 	.word	0x58024400
 800c7e8:	40007800 	.word	0x40007800
 800c7ec:	40007c00 	.word	0x40007c00
 800c7f0:	40011800 	.word	0x40011800
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4aad      	ldr	r2, [pc, #692]	@ (800cab0 <UART_SetConfig+0x900>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d176      	bne.n	800c8ec <UART_SetConfig+0x73c>
 800c7fe:	4bad      	ldr	r3, [pc, #692]	@ (800cab4 <UART_SetConfig+0x904>)
 800c800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c802:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c806:	2b28      	cmp	r3, #40	@ 0x28
 800c808:	d86c      	bhi.n	800c8e4 <UART_SetConfig+0x734>
 800c80a:	a201      	add	r2, pc, #4	@ (adr r2, 800c810 <UART_SetConfig+0x660>)
 800c80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c810:	0800c8b5 	.word	0x0800c8b5
 800c814:	0800c8e5 	.word	0x0800c8e5
 800c818:	0800c8e5 	.word	0x0800c8e5
 800c81c:	0800c8e5 	.word	0x0800c8e5
 800c820:	0800c8e5 	.word	0x0800c8e5
 800c824:	0800c8e5 	.word	0x0800c8e5
 800c828:	0800c8e5 	.word	0x0800c8e5
 800c82c:	0800c8e5 	.word	0x0800c8e5
 800c830:	0800c8bd 	.word	0x0800c8bd
 800c834:	0800c8e5 	.word	0x0800c8e5
 800c838:	0800c8e5 	.word	0x0800c8e5
 800c83c:	0800c8e5 	.word	0x0800c8e5
 800c840:	0800c8e5 	.word	0x0800c8e5
 800c844:	0800c8e5 	.word	0x0800c8e5
 800c848:	0800c8e5 	.word	0x0800c8e5
 800c84c:	0800c8e5 	.word	0x0800c8e5
 800c850:	0800c8c5 	.word	0x0800c8c5
 800c854:	0800c8e5 	.word	0x0800c8e5
 800c858:	0800c8e5 	.word	0x0800c8e5
 800c85c:	0800c8e5 	.word	0x0800c8e5
 800c860:	0800c8e5 	.word	0x0800c8e5
 800c864:	0800c8e5 	.word	0x0800c8e5
 800c868:	0800c8e5 	.word	0x0800c8e5
 800c86c:	0800c8e5 	.word	0x0800c8e5
 800c870:	0800c8cd 	.word	0x0800c8cd
 800c874:	0800c8e5 	.word	0x0800c8e5
 800c878:	0800c8e5 	.word	0x0800c8e5
 800c87c:	0800c8e5 	.word	0x0800c8e5
 800c880:	0800c8e5 	.word	0x0800c8e5
 800c884:	0800c8e5 	.word	0x0800c8e5
 800c888:	0800c8e5 	.word	0x0800c8e5
 800c88c:	0800c8e5 	.word	0x0800c8e5
 800c890:	0800c8d5 	.word	0x0800c8d5
 800c894:	0800c8e5 	.word	0x0800c8e5
 800c898:	0800c8e5 	.word	0x0800c8e5
 800c89c:	0800c8e5 	.word	0x0800c8e5
 800c8a0:	0800c8e5 	.word	0x0800c8e5
 800c8a4:	0800c8e5 	.word	0x0800c8e5
 800c8a8:	0800c8e5 	.word	0x0800c8e5
 800c8ac:	0800c8e5 	.word	0x0800c8e5
 800c8b0:	0800c8dd 	.word	0x0800c8dd
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ba:	e050      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c8bc:	2304      	movs	r3, #4
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8c2:	e04c      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c8c4:	2308      	movs	r3, #8
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ca:	e048      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c8cc:	2310      	movs	r3, #16
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d2:	e044      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c8d4:	2320      	movs	r3, #32
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8da:	e040      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c8dc:	2340      	movs	r3, #64	@ 0x40
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8e2:	e03c      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c8e4:	2380      	movs	r3, #128	@ 0x80
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ea:	e038      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a71      	ldr	r2, [pc, #452]	@ (800cab8 <UART_SetConfig+0x908>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d130      	bne.n	800c958 <UART_SetConfig+0x7a8>
 800c8f6:	4b6f      	ldr	r3, [pc, #444]	@ (800cab4 <UART_SetConfig+0x904>)
 800c8f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8fa:	f003 0307 	and.w	r3, r3, #7
 800c8fe:	2b05      	cmp	r3, #5
 800c900:	d826      	bhi.n	800c950 <UART_SetConfig+0x7a0>
 800c902:	a201      	add	r2, pc, #4	@ (adr r2, 800c908 <UART_SetConfig+0x758>)
 800c904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c908:	0800c921 	.word	0x0800c921
 800c90c:	0800c929 	.word	0x0800c929
 800c910:	0800c931 	.word	0x0800c931
 800c914:	0800c939 	.word	0x0800c939
 800c918:	0800c941 	.word	0x0800c941
 800c91c:	0800c949 	.word	0x0800c949
 800c920:	2302      	movs	r3, #2
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c926:	e01a      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c928:	2304      	movs	r3, #4
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c92e:	e016      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c930:	2308      	movs	r3, #8
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c936:	e012      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c938:	2310      	movs	r3, #16
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93e:	e00e      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c940:	2320      	movs	r3, #32
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c946:	e00a      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c948:	2340      	movs	r3, #64	@ 0x40
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94e:	e006      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c950:	2380      	movs	r3, #128	@ 0x80
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c956:	e002      	b.n	800c95e <UART_SetConfig+0x7ae>
 800c958:	2380      	movs	r3, #128	@ 0x80
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a55      	ldr	r2, [pc, #340]	@ (800cab8 <UART_SetConfig+0x908>)
 800c964:	4293      	cmp	r3, r2
 800c966:	f040 80f8 	bne.w	800cb5a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c96a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c96e:	2b20      	cmp	r3, #32
 800c970:	dc46      	bgt.n	800ca00 <UART_SetConfig+0x850>
 800c972:	2b02      	cmp	r3, #2
 800c974:	db75      	blt.n	800ca62 <UART_SetConfig+0x8b2>
 800c976:	3b02      	subs	r3, #2
 800c978:	2b1e      	cmp	r3, #30
 800c97a:	d872      	bhi.n	800ca62 <UART_SetConfig+0x8b2>
 800c97c:	a201      	add	r2, pc, #4	@ (adr r2, 800c984 <UART_SetConfig+0x7d4>)
 800c97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c982:	bf00      	nop
 800c984:	0800ca07 	.word	0x0800ca07
 800c988:	0800ca63 	.word	0x0800ca63
 800c98c:	0800ca0f 	.word	0x0800ca0f
 800c990:	0800ca63 	.word	0x0800ca63
 800c994:	0800ca63 	.word	0x0800ca63
 800c998:	0800ca63 	.word	0x0800ca63
 800c99c:	0800ca1f 	.word	0x0800ca1f
 800c9a0:	0800ca63 	.word	0x0800ca63
 800c9a4:	0800ca63 	.word	0x0800ca63
 800c9a8:	0800ca63 	.word	0x0800ca63
 800c9ac:	0800ca63 	.word	0x0800ca63
 800c9b0:	0800ca63 	.word	0x0800ca63
 800c9b4:	0800ca63 	.word	0x0800ca63
 800c9b8:	0800ca63 	.word	0x0800ca63
 800c9bc:	0800ca2f 	.word	0x0800ca2f
 800c9c0:	0800ca63 	.word	0x0800ca63
 800c9c4:	0800ca63 	.word	0x0800ca63
 800c9c8:	0800ca63 	.word	0x0800ca63
 800c9cc:	0800ca63 	.word	0x0800ca63
 800c9d0:	0800ca63 	.word	0x0800ca63
 800c9d4:	0800ca63 	.word	0x0800ca63
 800c9d8:	0800ca63 	.word	0x0800ca63
 800c9dc:	0800ca63 	.word	0x0800ca63
 800c9e0:	0800ca63 	.word	0x0800ca63
 800c9e4:	0800ca63 	.word	0x0800ca63
 800c9e8:	0800ca63 	.word	0x0800ca63
 800c9ec:	0800ca63 	.word	0x0800ca63
 800c9f0:	0800ca63 	.word	0x0800ca63
 800c9f4:	0800ca63 	.word	0x0800ca63
 800c9f8:	0800ca63 	.word	0x0800ca63
 800c9fc:	0800ca55 	.word	0x0800ca55
 800ca00:	2b40      	cmp	r3, #64	@ 0x40
 800ca02:	d02a      	beq.n	800ca5a <UART_SetConfig+0x8aa>
 800ca04:	e02d      	b.n	800ca62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ca06:	f7fc fbbd 	bl	8009184 <HAL_RCCEx_GetD3PCLK1Freq>
 800ca0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca0c:	e02f      	b.n	800ca6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fc fbcc 	bl	80091b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca1c:	e027      	b.n	800ca6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca1e:	f107 0318 	add.w	r3, r7, #24
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fc fd18 	bl	8009458 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca2c:	e01f      	b.n	800ca6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca2e:	4b21      	ldr	r3, [pc, #132]	@ (800cab4 <UART_SetConfig+0x904>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 0320 	and.w	r3, r3, #32
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d009      	beq.n	800ca4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca3a:	4b1e      	ldr	r3, [pc, #120]	@ (800cab4 <UART_SetConfig+0x904>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	08db      	lsrs	r3, r3, #3
 800ca40:	f003 0303 	and.w	r3, r3, #3
 800ca44:	4a1d      	ldr	r2, [pc, #116]	@ (800cabc <UART_SetConfig+0x90c>)
 800ca46:	fa22 f303 	lsr.w	r3, r2, r3
 800ca4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca4c:	e00f      	b.n	800ca6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ca4e:	4b1b      	ldr	r3, [pc, #108]	@ (800cabc <UART_SetConfig+0x90c>)
 800ca50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca52:	e00c      	b.n	800ca6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca54:	4b1a      	ldr	r3, [pc, #104]	@ (800cac0 <UART_SetConfig+0x910>)
 800ca56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca58:	e009      	b.n	800ca6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca60:	e005      	b.n	800ca6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ca62:	2300      	movs	r3, #0
 800ca64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 81ee 	beq.w	800ce52 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca7a:	4a12      	ldr	r2, [pc, #72]	@ (800cac4 <UART_SetConfig+0x914>)
 800ca7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca80:	461a      	mov	r2, r3
 800ca82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca84:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca88:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	685a      	ldr	r2, [r3, #4]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	4413      	add	r3, r2
 800ca94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d305      	bcc.n	800caa6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800caa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d910      	bls.n	800cac8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800caac:	e1d1      	b.n	800ce52 <UART_SetConfig+0xca2>
 800caae:	bf00      	nop
 800cab0:	40011c00 	.word	0x40011c00
 800cab4:	58024400 	.word	0x58024400
 800cab8:	58000c00 	.word	0x58000c00
 800cabc:	03d09000 	.word	0x03d09000
 800cac0:	003d0900 	.word	0x003d0900
 800cac4:	08012080 	.word	0x08012080
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caca:	2200      	movs	r2, #0
 800cacc:	60bb      	str	r3, [r7, #8]
 800cace:	60fa      	str	r2, [r7, #12]
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad4:	4ac0      	ldr	r2, [pc, #768]	@ (800cdd8 <UART_SetConfig+0xc28>)
 800cad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cada:	b29b      	uxth	r3, r3
 800cadc:	2200      	movs	r2, #0
 800cade:	603b      	str	r3, [r7, #0]
 800cae0:	607a      	str	r2, [r7, #4]
 800cae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cae6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800caea:	f7f3 fc51 	bl	8000390 <__aeabi_uldivmod>
 800caee:	4602      	mov	r2, r0
 800caf0:	460b      	mov	r3, r1
 800caf2:	4610      	mov	r0, r2
 800caf4:	4619      	mov	r1, r3
 800caf6:	f04f 0200 	mov.w	r2, #0
 800cafa:	f04f 0300 	mov.w	r3, #0
 800cafe:	020b      	lsls	r3, r1, #8
 800cb00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cb04:	0202      	lsls	r2, r0, #8
 800cb06:	6979      	ldr	r1, [r7, #20]
 800cb08:	6849      	ldr	r1, [r1, #4]
 800cb0a:	0849      	lsrs	r1, r1, #1
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	460c      	mov	r4, r1
 800cb10:	4605      	mov	r5, r0
 800cb12:	eb12 0804 	adds.w	r8, r2, r4
 800cb16:	eb43 0905 	adc.w	r9, r3, r5
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	469a      	mov	sl, r3
 800cb22:	4693      	mov	fp, r2
 800cb24:	4652      	mov	r2, sl
 800cb26:	465b      	mov	r3, fp
 800cb28:	4640      	mov	r0, r8
 800cb2a:	4649      	mov	r1, r9
 800cb2c:	f7f3 fc30 	bl	8000390 <__aeabi_uldivmod>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	4613      	mov	r3, r2
 800cb36:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb3e:	d308      	bcc.n	800cb52 <UART_SetConfig+0x9a2>
 800cb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb46:	d204      	bcs.n	800cb52 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb4e:	60da      	str	r2, [r3, #12]
 800cb50:	e17f      	b.n	800ce52 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cb58:	e17b      	b.n	800ce52 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb62:	f040 80bd 	bne.w	800cce0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cb66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb6a:	2b20      	cmp	r3, #32
 800cb6c:	dc48      	bgt.n	800cc00 <UART_SetConfig+0xa50>
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	db7b      	blt.n	800cc6a <UART_SetConfig+0xaba>
 800cb72:	2b20      	cmp	r3, #32
 800cb74:	d879      	bhi.n	800cc6a <UART_SetConfig+0xaba>
 800cb76:	a201      	add	r2, pc, #4	@ (adr r2, 800cb7c <UART_SetConfig+0x9cc>)
 800cb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7c:	0800cc07 	.word	0x0800cc07
 800cb80:	0800cc0f 	.word	0x0800cc0f
 800cb84:	0800cc6b 	.word	0x0800cc6b
 800cb88:	0800cc6b 	.word	0x0800cc6b
 800cb8c:	0800cc17 	.word	0x0800cc17
 800cb90:	0800cc6b 	.word	0x0800cc6b
 800cb94:	0800cc6b 	.word	0x0800cc6b
 800cb98:	0800cc6b 	.word	0x0800cc6b
 800cb9c:	0800cc27 	.word	0x0800cc27
 800cba0:	0800cc6b 	.word	0x0800cc6b
 800cba4:	0800cc6b 	.word	0x0800cc6b
 800cba8:	0800cc6b 	.word	0x0800cc6b
 800cbac:	0800cc6b 	.word	0x0800cc6b
 800cbb0:	0800cc6b 	.word	0x0800cc6b
 800cbb4:	0800cc6b 	.word	0x0800cc6b
 800cbb8:	0800cc6b 	.word	0x0800cc6b
 800cbbc:	0800cc37 	.word	0x0800cc37
 800cbc0:	0800cc6b 	.word	0x0800cc6b
 800cbc4:	0800cc6b 	.word	0x0800cc6b
 800cbc8:	0800cc6b 	.word	0x0800cc6b
 800cbcc:	0800cc6b 	.word	0x0800cc6b
 800cbd0:	0800cc6b 	.word	0x0800cc6b
 800cbd4:	0800cc6b 	.word	0x0800cc6b
 800cbd8:	0800cc6b 	.word	0x0800cc6b
 800cbdc:	0800cc6b 	.word	0x0800cc6b
 800cbe0:	0800cc6b 	.word	0x0800cc6b
 800cbe4:	0800cc6b 	.word	0x0800cc6b
 800cbe8:	0800cc6b 	.word	0x0800cc6b
 800cbec:	0800cc6b 	.word	0x0800cc6b
 800cbf0:	0800cc6b 	.word	0x0800cc6b
 800cbf4:	0800cc6b 	.word	0x0800cc6b
 800cbf8:	0800cc6b 	.word	0x0800cc6b
 800cbfc:	0800cc5d 	.word	0x0800cc5d
 800cc00:	2b40      	cmp	r3, #64	@ 0x40
 800cc02:	d02e      	beq.n	800cc62 <UART_SetConfig+0xab2>
 800cc04:	e031      	b.n	800cc6a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc06:	f7fb f8d3 	bl	8007db0 <HAL_RCC_GetPCLK1Freq>
 800cc0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc0c:	e033      	b.n	800cc76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc0e:	f7fb f8e5 	bl	8007ddc <HAL_RCC_GetPCLK2Freq>
 800cc12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc14:	e02f      	b.n	800cc76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fc fac8 	bl	80091b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc24:	e027      	b.n	800cc76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc26:	f107 0318 	add.w	r3, r7, #24
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fc fc14 	bl	8009458 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc34:	e01f      	b.n	800cc76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc36:	4b69      	ldr	r3, [pc, #420]	@ (800cddc <UART_SetConfig+0xc2c>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f003 0320 	and.w	r3, r3, #32
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d009      	beq.n	800cc56 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc42:	4b66      	ldr	r3, [pc, #408]	@ (800cddc <UART_SetConfig+0xc2c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	08db      	lsrs	r3, r3, #3
 800cc48:	f003 0303 	and.w	r3, r3, #3
 800cc4c:	4a64      	ldr	r2, [pc, #400]	@ (800cde0 <UART_SetConfig+0xc30>)
 800cc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc54:	e00f      	b.n	800cc76 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cc56:	4b62      	ldr	r3, [pc, #392]	@ (800cde0 <UART_SetConfig+0xc30>)
 800cc58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc5a:	e00c      	b.n	800cc76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc5c:	4b61      	ldr	r3, [pc, #388]	@ (800cde4 <UART_SetConfig+0xc34>)
 800cc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc60:	e009      	b.n	800cc76 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc68:	e005      	b.n	800cc76 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cc74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f000 80ea 	beq.w	800ce52 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc82:	4a55      	ldr	r2, [pc, #340]	@ (800cdd8 <UART_SetConfig+0xc28>)
 800cc84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc90:	005a      	lsls	r2, r3, #1
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	085b      	lsrs	r3, r3, #1
 800cc98:	441a      	add	r2, r3
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cca2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca6:	2b0f      	cmp	r3, #15
 800cca8:	d916      	bls.n	800ccd8 <UART_SetConfig+0xb28>
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccb0:	d212      	bcs.n	800ccd8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	f023 030f 	bic.w	r3, r3, #15
 800ccba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbe:	085b      	lsrs	r3, r3, #1
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	f003 0307 	and.w	r3, r3, #7
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ccca:	4313      	orrs	r3, r2
 800cccc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ccd4:	60da      	str	r2, [r3, #12]
 800ccd6:	e0bc      	b.n	800ce52 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ccde:	e0b8      	b.n	800ce52 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cce0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cce4:	2b20      	cmp	r3, #32
 800cce6:	dc4b      	bgt.n	800cd80 <UART_SetConfig+0xbd0>
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f2c0 8087 	blt.w	800cdfc <UART_SetConfig+0xc4c>
 800ccee:	2b20      	cmp	r3, #32
 800ccf0:	f200 8084 	bhi.w	800cdfc <UART_SetConfig+0xc4c>
 800ccf4:	a201      	add	r2, pc, #4	@ (adr r2, 800ccfc <UART_SetConfig+0xb4c>)
 800ccf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfa:	bf00      	nop
 800ccfc:	0800cd87 	.word	0x0800cd87
 800cd00:	0800cd8f 	.word	0x0800cd8f
 800cd04:	0800cdfd 	.word	0x0800cdfd
 800cd08:	0800cdfd 	.word	0x0800cdfd
 800cd0c:	0800cd97 	.word	0x0800cd97
 800cd10:	0800cdfd 	.word	0x0800cdfd
 800cd14:	0800cdfd 	.word	0x0800cdfd
 800cd18:	0800cdfd 	.word	0x0800cdfd
 800cd1c:	0800cda7 	.word	0x0800cda7
 800cd20:	0800cdfd 	.word	0x0800cdfd
 800cd24:	0800cdfd 	.word	0x0800cdfd
 800cd28:	0800cdfd 	.word	0x0800cdfd
 800cd2c:	0800cdfd 	.word	0x0800cdfd
 800cd30:	0800cdfd 	.word	0x0800cdfd
 800cd34:	0800cdfd 	.word	0x0800cdfd
 800cd38:	0800cdfd 	.word	0x0800cdfd
 800cd3c:	0800cdb7 	.word	0x0800cdb7
 800cd40:	0800cdfd 	.word	0x0800cdfd
 800cd44:	0800cdfd 	.word	0x0800cdfd
 800cd48:	0800cdfd 	.word	0x0800cdfd
 800cd4c:	0800cdfd 	.word	0x0800cdfd
 800cd50:	0800cdfd 	.word	0x0800cdfd
 800cd54:	0800cdfd 	.word	0x0800cdfd
 800cd58:	0800cdfd 	.word	0x0800cdfd
 800cd5c:	0800cdfd 	.word	0x0800cdfd
 800cd60:	0800cdfd 	.word	0x0800cdfd
 800cd64:	0800cdfd 	.word	0x0800cdfd
 800cd68:	0800cdfd 	.word	0x0800cdfd
 800cd6c:	0800cdfd 	.word	0x0800cdfd
 800cd70:	0800cdfd 	.word	0x0800cdfd
 800cd74:	0800cdfd 	.word	0x0800cdfd
 800cd78:	0800cdfd 	.word	0x0800cdfd
 800cd7c:	0800cdef 	.word	0x0800cdef
 800cd80:	2b40      	cmp	r3, #64	@ 0x40
 800cd82:	d037      	beq.n	800cdf4 <UART_SetConfig+0xc44>
 800cd84:	e03a      	b.n	800cdfc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd86:	f7fb f813 	bl	8007db0 <HAL_RCC_GetPCLK1Freq>
 800cd8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd8c:	e03c      	b.n	800ce08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd8e:	f7fb f825 	bl	8007ddc <HAL_RCC_GetPCLK2Freq>
 800cd92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd94:	e038      	b.n	800ce08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fc fa08 	bl	80091b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cda4:	e030      	b.n	800ce08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cda6:	f107 0318 	add.w	r3, r7, #24
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fc fb54 	bl	8009458 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdb4:	e028      	b.n	800ce08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdb6:	4b09      	ldr	r3, [pc, #36]	@ (800cddc <UART_SetConfig+0xc2c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f003 0320 	and.w	r3, r3, #32
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d012      	beq.n	800cde8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdc2:	4b06      	ldr	r3, [pc, #24]	@ (800cddc <UART_SetConfig+0xc2c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	08db      	lsrs	r3, r3, #3
 800cdc8:	f003 0303 	and.w	r3, r3, #3
 800cdcc:	4a04      	ldr	r2, [pc, #16]	@ (800cde0 <UART_SetConfig+0xc30>)
 800cdce:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cdd4:	e018      	b.n	800ce08 <UART_SetConfig+0xc58>
 800cdd6:	bf00      	nop
 800cdd8:	08012080 	.word	0x08012080
 800cddc:	58024400 	.word	0x58024400
 800cde0:	03d09000 	.word	0x03d09000
 800cde4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cde8:	4b24      	ldr	r3, [pc, #144]	@ (800ce7c <UART_SetConfig+0xccc>)
 800cdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdec:	e00c      	b.n	800ce08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdee:	4b24      	ldr	r3, [pc, #144]	@ (800ce80 <UART_SetConfig+0xcd0>)
 800cdf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdf2:	e009      	b.n	800ce08 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdfa:	e005      	b.n	800ce08 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ce06:	bf00      	nop
    }

    if (pclk != 0U)
 800ce08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d021      	beq.n	800ce52 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce12:	4a1c      	ldr	r2, [pc, #112]	@ (800ce84 <UART_SetConfig+0xcd4>)
 800ce14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce1c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	085b      	lsrs	r3, r3, #1
 800ce26:	441a      	add	r2, r3
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce30:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce34:	2b0f      	cmp	r3, #15
 800ce36:	d909      	bls.n	800ce4c <UART_SetConfig+0xc9c>
 800ce38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce3e:	d205      	bcs.n	800ce4c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ce40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	60da      	str	r2, [r3, #12]
 800ce4a:	e002      	b.n	800ce52 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	2200      	movs	r2, #0
 800ce66:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ce6e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3748      	adds	r7, #72	@ 0x48
 800ce76:	46bd      	mov	sp, r7
 800ce78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce7c:	03d09000 	.word	0x03d09000
 800ce80:	003d0900 	.word	0x003d0900
 800ce84:	08012080 	.word	0x08012080

0800ce88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce94:	f003 0308 	and.w	r3, r3, #8
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00a      	beq.n	800ceb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	430a      	orrs	r2, r1
 800ceb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceb6:	f003 0301 	and.w	r3, r3, #1
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00a      	beq.n	800ced4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ced8:	f003 0302 	and.w	r3, r3, #2
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00a      	beq.n	800cef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	430a      	orrs	r2, r1
 800cef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cefa:	f003 0304 	and.w	r3, r3, #4
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00a      	beq.n	800cf18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	430a      	orrs	r2, r1
 800cf16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf1c:	f003 0310 	and.w	r3, r3, #16
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00a      	beq.n	800cf3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	430a      	orrs	r2, r1
 800cf38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00a      	beq.n	800cf5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	430a      	orrs	r2, r1
 800cf5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d01a      	beq.n	800cf9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf86:	d10a      	bne.n	800cf9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	430a      	orrs	r2, r1
 800cf9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00a      	beq.n	800cfc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	430a      	orrs	r2, r1
 800cfbe:	605a      	str	r2, [r3, #4]
  }
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b098      	sub	sp, #96	@ 0x60
 800cfd0:	af02      	add	r7, sp, #8
 800cfd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cfdc:	f7f6 f824 	bl	8003028 <HAL_GetTick>
 800cfe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f003 0308 	and.w	r3, r3, #8
 800cfec:	2b08      	cmp	r3, #8
 800cfee:	d12f      	bne.n	800d050 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cff8:	2200      	movs	r2, #0
 800cffa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f88e 	bl	800d120 <UART_WaitOnFlagUntilTimeout>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d022      	beq.n	800d050 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d012:	e853 3f00 	ldrex	r3, [r3]
 800d016:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d01a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d01e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	461a      	mov	r2, r3
 800d026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d028:	647b      	str	r3, [r7, #68]	@ 0x44
 800d02a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d02e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d030:	e841 2300 	strex	r3, r2, [r1]
 800d034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1e6      	bne.n	800d00a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2220      	movs	r2, #32
 800d040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e063      	b.n	800d118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f003 0304 	and.w	r3, r3, #4
 800d05a:	2b04      	cmp	r3, #4
 800d05c:	d149      	bne.n	800d0f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d05e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d066:	2200      	movs	r2, #0
 800d068:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f857 	bl	800d120 <UART_WaitOnFlagUntilTimeout>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d03c      	beq.n	800d0f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d080:	e853 3f00 	ldrex	r3, [r3]
 800d084:	623b      	str	r3, [r7, #32]
   return(result);
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d08c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d096:	633b      	str	r3, [r7, #48]	@ 0x30
 800d098:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d09c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d09e:	e841 2300 	strex	r3, r2, [r1]
 800d0a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d1e6      	bne.n	800d078 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	3308      	adds	r3, #8
 800d0b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	e853 3f00 	ldrex	r3, [r3]
 800d0b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f023 0301 	bic.w	r3, r3, #1
 800d0c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	3308      	adds	r3, #8
 800d0c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0ca:	61fa      	str	r2, [r7, #28]
 800d0cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ce:	69b9      	ldr	r1, [r7, #24]
 800d0d0:	69fa      	ldr	r2, [r7, #28]
 800d0d2:	e841 2300 	strex	r3, r2, [r1]
 800d0d6:	617b      	str	r3, [r7, #20]
   return(result);
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1e5      	bne.n	800d0aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2220      	movs	r2, #32
 800d0e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	e012      	b.n	800d118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2220      	movs	r2, #32
 800d0f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2220      	movs	r2, #32
 800d0fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3758      	adds	r7, #88	@ 0x58
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	603b      	str	r3, [r7, #0]
 800d12c:	4613      	mov	r3, r2
 800d12e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d130:	e04f      	b.n	800d1d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d138:	d04b      	beq.n	800d1d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d13a:	f7f5 ff75 	bl	8003028 <HAL_GetTick>
 800d13e:	4602      	mov	r2, r0
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	69ba      	ldr	r2, [r7, #24]
 800d146:	429a      	cmp	r2, r3
 800d148:	d302      	bcc.n	800d150 <UART_WaitOnFlagUntilTimeout+0x30>
 800d14a:	69bb      	ldr	r3, [r7, #24]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e04e      	b.n	800d1f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f003 0304 	and.w	r3, r3, #4
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d037      	beq.n	800d1d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	2b80      	cmp	r3, #128	@ 0x80
 800d166:	d034      	beq.n	800d1d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	2b40      	cmp	r3, #64	@ 0x40
 800d16c:	d031      	beq.n	800d1d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	69db      	ldr	r3, [r3, #28]
 800d174:	f003 0308 	and.w	r3, r3, #8
 800d178:	2b08      	cmp	r3, #8
 800d17a:	d110      	bne.n	800d19e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2208      	movs	r2, #8
 800d182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f000 f921 	bl	800d3cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2208      	movs	r2, #8
 800d18e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e029      	b.n	800d1f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	69db      	ldr	r3, [r3, #28]
 800d1a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1ac:	d111      	bne.n	800d1d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f000 f907 	bl	800d3cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2220      	movs	r2, #32
 800d1c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	e00f      	b.n	800d1f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	69da      	ldr	r2, [r3, #28]
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	4013      	ands	r3, r2
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	bf0c      	ite	eq
 800d1e2:	2301      	moveq	r3, #1
 800d1e4:	2300      	movne	r3, #0
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d0a0      	beq.n	800d132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
	...

0800d1fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b096      	sub	sp, #88	@ 0x58
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	4613      	mov	r3, r2
 800d208:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	88fa      	ldrh	r2, [r7, #6]
 800d214:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2200      	movs	r2, #0
 800d21c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2222      	movs	r2, #34	@ 0x22
 800d224:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d02d      	beq.n	800d28e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d238:	4a40      	ldr	r2, [pc, #256]	@ (800d33c <UART_Start_Receive_DMA+0x140>)
 800d23a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d242:	4a3f      	ldr	r2, [pc, #252]	@ (800d340 <UART_Start_Receive_DMA+0x144>)
 800d244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d24c:	4a3d      	ldr	r2, [pc, #244]	@ (800d344 <UART_Start_Receive_DMA+0x148>)
 800d24e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d256:	2200      	movs	r2, #0
 800d258:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3324      	adds	r3, #36	@ 0x24
 800d266:	4619      	mov	r1, r3
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d26c:	461a      	mov	r2, r3
 800d26e:	88fb      	ldrh	r3, [r7, #6]
 800d270:	f7f6 fc20 	bl	8003ab4 <HAL_DMA_Start_IT>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d009      	beq.n	800d28e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2210      	movs	r2, #16
 800d27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2220      	movs	r2, #32
 800d286:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e051      	b.n	800d332 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d018      	beq.n	800d2c8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d29e:	e853 3f00 	ldrex	r3, [r3]
 800d2a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d2ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2bc:	e841 2300 	strex	r3, r2, [r1]
 800d2c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d2c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1e6      	bne.n	800d296 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	3308      	adds	r3, #8
 800d2ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d2:	e853 3f00 	ldrex	r3, [r3]
 800d2d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2da:	f043 0301 	orr.w	r3, r3, #1
 800d2de:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3308      	adds	r3, #8
 800d2e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d2e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800d2ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d2ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2f0:	e841 2300 	strex	r3, r2, [r1]
 800d2f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1e5      	bne.n	800d2c8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3308      	adds	r3, #8
 800d302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	e853 3f00 	ldrex	r3, [r3]
 800d30a:	613b      	str	r3, [r7, #16]
   return(result);
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3308      	adds	r3, #8
 800d31a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d31c:	623a      	str	r2, [r7, #32]
 800d31e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d320:	69f9      	ldr	r1, [r7, #28]
 800d322:	6a3a      	ldr	r2, [r7, #32]
 800d324:	e841 2300 	strex	r3, r2, [r1]
 800d328:	61bb      	str	r3, [r7, #24]
   return(result);
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1e5      	bne.n	800d2fc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3758      	adds	r7, #88	@ 0x58
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	0800d499 	.word	0x0800d499
 800d340:	0800d5c1 	.word	0x0800d5c1
 800d344:	0800d5ff 	.word	0x0800d5ff

0800d348 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d348:	b480      	push	{r7}
 800d34a:	b08f      	sub	sp, #60	@ 0x3c
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d356:	6a3b      	ldr	r3, [r7, #32]
 800d358:	e853 3f00 	ldrex	r3, [r3]
 800d35c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d364:	637b      	str	r3, [r7, #52]	@ 0x34
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d370:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d376:	e841 2300 	strex	r3, r2, [r1]
 800d37a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1e6      	bne.n	800d350 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	3308      	adds	r3, #8
 800d388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	e853 3f00 	ldrex	r3, [r3]
 800d390:	60bb      	str	r3, [r7, #8]
   return(result);
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d398:	633b      	str	r3, [r7, #48]	@ 0x30
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3308      	adds	r3, #8
 800d3a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3a2:	61ba      	str	r2, [r7, #24]
 800d3a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a6:	6979      	ldr	r1, [r7, #20]
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	e841 2300 	strex	r3, r2, [r1]
 800d3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e5      	bne.n	800d382 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2220      	movs	r2, #32
 800d3ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d3be:	bf00      	nop
 800d3c0:	373c      	adds	r7, #60	@ 0x3c
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
	...

0800d3cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b095      	sub	sp, #84	@ 0x54
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3dc:	e853 3f00 	ldrex	r3, [r3]
 800d3e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d3e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d3f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d3fa:	e841 2300 	strex	r3, r2, [r1]
 800d3fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1e6      	bne.n	800d3d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	3308      	adds	r3, #8
 800d40c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40e:	6a3b      	ldr	r3, [r7, #32]
 800d410:	e853 3f00 	ldrex	r3, [r3]
 800d414:	61fb      	str	r3, [r7, #28]
   return(result);
 800d416:	69fa      	ldr	r2, [r7, #28]
 800d418:	4b1e      	ldr	r3, [pc, #120]	@ (800d494 <UART_EndRxTransfer+0xc8>)
 800d41a:	4013      	ands	r3, r2
 800d41c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	3308      	adds	r3, #8
 800d424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d428:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d42c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d42e:	e841 2300 	strex	r3, r2, [r1]
 800d432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d436:	2b00      	cmp	r3, #0
 800d438:	d1e5      	bne.n	800d406 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d118      	bne.n	800d474 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	e853 3f00 	ldrex	r3, [r3]
 800d44e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	f023 0310 	bic.w	r3, r3, #16
 800d456:	647b      	str	r3, [r7, #68]	@ 0x44
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	461a      	mov	r2, r3
 800d45e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d460:	61bb      	str	r3, [r7, #24]
 800d462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d464:	6979      	ldr	r1, [r7, #20]
 800d466:	69ba      	ldr	r2, [r7, #24]
 800d468:	e841 2300 	strex	r3, r2, [r1]
 800d46c:	613b      	str	r3, [r7, #16]
   return(result);
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1e6      	bne.n	800d442 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2220      	movs	r2, #32
 800d478:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d488:	bf00      	nop
 800d48a:	3754      	adds	r7, #84	@ 0x54
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr
 800d494:	effffffe 	.word	0xeffffffe

0800d498 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b09c      	sub	sp, #112	@ 0x70
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4ae:	d071      	beq.n	800d594 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4c0:	e853 3f00 	ldrex	r3, [r3]
 800d4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d4c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4de:	e841 2300 	strex	r3, r2, [r1]
 800d4e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1e6      	bne.n	800d4b8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	3308      	adds	r3, #8
 800d4f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f4:	e853 3f00 	ldrex	r3, [r3]
 800d4f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d4fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4fc:	f023 0301 	bic.w	r3, r3, #1
 800d500:	667b      	str	r3, [r7, #100]	@ 0x64
 800d502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	3308      	adds	r3, #8
 800d508:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d50a:	647a      	str	r2, [r7, #68]	@ 0x44
 800d50c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d512:	e841 2300 	strex	r3, r2, [r1]
 800d516:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d1e5      	bne.n	800d4ea <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d51e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3308      	adds	r3, #8
 800d524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	e853 3f00 	ldrex	r3, [r3]
 800d52c:	623b      	str	r3, [r7, #32]
   return(result);
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d534:	663b      	str	r3, [r7, #96]	@ 0x60
 800d536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3308      	adds	r3, #8
 800d53c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d53e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d546:	e841 2300 	strex	r3, r2, [r1]
 800d54a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1e5      	bne.n	800d51e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d554:	2220      	movs	r2, #32
 800d556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d55a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d55c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d118      	bne.n	800d594 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	e853 3f00 	ldrex	r3, [r3]
 800d56e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f023 0310 	bic.w	r3, r3, #16
 800d576:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	461a      	mov	r2, r3
 800d57e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d580:	61fb      	str	r3, [r7, #28]
 800d582:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d584:	69b9      	ldr	r1, [r7, #24]
 800d586:	69fa      	ldr	r2, [r7, #28]
 800d588:	e841 2300 	strex	r3, r2, [r1]
 800d58c:	617b      	str	r3, [r7, #20]
   return(result);
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1e6      	bne.n	800d562 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d596:	2200      	movs	r2, #0
 800d598:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d59a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d59c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d107      	bne.n	800d5b2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d5ac:	f7fe fdf4 	bl	800c198 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5b0:	e002      	b.n	800d5b8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d5b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d5b4:	f7f4 fc76 	bl	8001ea4 <HAL_UART_RxCpltCallback>
}
 800d5b8:	bf00      	nop
 800d5ba:	3770      	adds	r7, #112	@ 0x70
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d109      	bne.n	800d5f0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d5e2:	085b      	lsrs	r3, r3, #1
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f7fe fdd5 	bl	800c198 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5ee:	e002      	b.n	800d5f6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f7fe fdbd 	bl	800c170 <HAL_UART_RxHalfCpltCallback>
}
 800d5f6:	bf00      	nop
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b086      	sub	sp, #24
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d60a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d612:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d61a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d626:	2b80      	cmp	r3, #128	@ 0x80
 800d628:	d109      	bne.n	800d63e <UART_DMAError+0x40>
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	2b21      	cmp	r3, #33	@ 0x21
 800d62e:	d106      	bne.n	800d63e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2200      	movs	r2, #0
 800d634:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d638:	6978      	ldr	r0, [r7, #20]
 800d63a:	f7ff fe85 	bl	800d348 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d648:	2b40      	cmp	r3, #64	@ 0x40
 800d64a:	d109      	bne.n	800d660 <UART_DMAError+0x62>
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2b22      	cmp	r3, #34	@ 0x22
 800d650:	d106      	bne.n	800d660 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	2200      	movs	r2, #0
 800d656:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d65a:	6978      	ldr	r0, [r7, #20]
 800d65c:	f7ff feb6 	bl	800d3cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d666:	f043 0210 	orr.w	r2, r3, #16
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d670:	6978      	ldr	r0, [r7, #20]
 800d672:	f7fe fd87 	bl	800c184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d676:	bf00      	nop
 800d678:	3718      	adds	r7, #24
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b084      	sub	sp, #16
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d68a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2200      	movs	r2, #0
 800d690:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f7fe fd71 	bl	800c184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6a2:	bf00      	nop
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b088      	sub	sp, #32
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	e853 3f00 	ldrex	r3, [r3]
 800d6be:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6c6:	61fb      	str	r3, [r7, #28]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	61bb      	str	r3, [r7, #24]
 800d6d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d4:	6979      	ldr	r1, [r7, #20]
 800d6d6:	69ba      	ldr	r2, [r7, #24]
 800d6d8:	e841 2300 	strex	r3, r2, [r1]
 800d6dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1e6      	bne.n	800d6b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2220      	movs	r2, #32
 800d6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7fe fd32 	bl	800c15c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6f8:	bf00      	nop
 800d6fa:	3720      	adds	r7, #32
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d708:	bf00      	nop
 800d70a:	370c      	adds	r7, #12
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d71c:	bf00      	nop
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d730:	bf00      	nop
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d101      	bne.n	800d752 <HAL_UARTEx_DisableFifoMode+0x16>
 800d74e:	2302      	movs	r3, #2
 800d750:	e027      	b.n	800d7a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2224      	movs	r2, #36	@ 0x24
 800d75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f022 0201 	bic.w	r2, r2, #1
 800d778:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d780:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2220      	movs	r2, #32
 800d794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3714      	adds	r7, #20
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b084      	sub	sp, #16
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d101      	bne.n	800d7c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	e02d      	b.n	800d822 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2224      	movs	r2, #36	@ 0x24
 800d7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f022 0201 	bic.w	r2, r2, #1
 800d7ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	683a      	ldr	r2, [r7, #0]
 800d7fe:	430a      	orrs	r2, r1
 800d800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f850 	bl	800d8a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2220      	movs	r2, #32
 800d814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d101      	bne.n	800d842 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d83e:	2302      	movs	r3, #2
 800d840:	e02d      	b.n	800d89e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2201      	movs	r2, #1
 800d846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2224      	movs	r2, #36	@ 0x24
 800d84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f022 0201 	bic.w	r2, r2, #1
 800d868:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	430a      	orrs	r2, r1
 800d87c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 f812 	bl	800d8a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2220      	movs	r2, #32
 800d890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
	...

0800d8a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d108      	bne.n	800d8ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8c8:	e031      	b.n	800d92e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8ca:	2310      	movs	r3, #16
 800d8cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8ce:	2310      	movs	r3, #16
 800d8d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	0e5b      	lsrs	r3, r3, #25
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	f003 0307 	and.w	r3, r3, #7
 800d8e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	0f5b      	lsrs	r3, r3, #29
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f003 0307 	and.w	r3, r3, #7
 800d8f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8f2:	7bbb      	ldrb	r3, [r7, #14]
 800d8f4:	7b3a      	ldrb	r2, [r7, #12]
 800d8f6:	4911      	ldr	r1, [pc, #68]	@ (800d93c <UARTEx_SetNbDataToProcess+0x94>)
 800d8f8:	5c8a      	ldrb	r2, [r1, r2]
 800d8fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d8fe:	7b3a      	ldrb	r2, [r7, #12]
 800d900:	490f      	ldr	r1, [pc, #60]	@ (800d940 <UARTEx_SetNbDataToProcess+0x98>)
 800d902:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d904:	fb93 f3f2 	sdiv	r3, r3, r2
 800d908:	b29a      	uxth	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d910:	7bfb      	ldrb	r3, [r7, #15]
 800d912:	7b7a      	ldrb	r2, [r7, #13]
 800d914:	4909      	ldr	r1, [pc, #36]	@ (800d93c <UARTEx_SetNbDataToProcess+0x94>)
 800d916:	5c8a      	ldrb	r2, [r1, r2]
 800d918:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d91c:	7b7a      	ldrb	r2, [r7, #13]
 800d91e:	4908      	ldr	r1, [pc, #32]	@ (800d940 <UARTEx_SetNbDataToProcess+0x98>)
 800d920:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d922:	fb93 f3f2 	sdiv	r3, r3, r2
 800d926:	b29a      	uxth	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d92e:	bf00      	nop
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	08012098 	.word	0x08012098
 800d940:	080120a0 	.word	0x080120a0

0800d944 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d948:	4904      	ldr	r1, [pc, #16]	@ (800d95c <MX_FATFS_Init+0x18>)
 800d94a:	4805      	ldr	r0, [pc, #20]	@ (800d960 <MX_FATFS_Init+0x1c>)
 800d94c:	f004 f8c6 	bl	8011adc <FATFS_LinkDriver>
 800d950:	4603      	mov	r3, r0
 800d952:	461a      	mov	r2, r3
 800d954:	4b03      	ldr	r3, [pc, #12]	@ (800d964 <MX_FATFS_Init+0x20>)
 800d956:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d958:	bf00      	nop
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	24002780 	.word	0x24002780
 800d960:	24000040 	.word	0x24000040
 800d964:	2400277c 	.word	0x2400277c

0800d968 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d968:	b480      	push	{r7}
 800d96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d96c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d96e:	4618      	mov	r0, r3
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	4603      	mov	r3, r0
 800d980:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800d982:	79fb      	ldrb	r3, [r7, #7]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 f9fd 	bl	800dd84 <SD_disk_initialize>
 800d98a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	4603      	mov	r3, r0
 800d99c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800d99e:	79fb      	ldrb	r3, [r7, #7]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f000 fad5 	bl	800df50 <SD_disk_status>
 800d9a6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60b9      	str	r1, [r7, #8]
 800d9b8:	607a      	str	r2, [r7, #4]
 800d9ba:	603b      	str	r3, [r7, #0]
 800d9bc:	4603      	mov	r3, r0
 800d9be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800d9c0:	7bf8      	ldrb	r0, [r7, #15]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	68b9      	ldr	r1, [r7, #8]
 800d9c8:	f000 fad8 	bl	800df7c <SD_disk_read>
 800d9cc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b084      	sub	sp, #16
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
 800d9e0:	603b      	str	r3, [r7, #0]
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800d9e6:	7bf8      	ldrb	r0, [r7, #15]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	68b9      	ldr	r1, [r7, #8]
 800d9ee:	f000 fb2f 	bl	800e050 <SD_disk_write>
 800d9f2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	4603      	mov	r3, r0
 800da04:	603a      	str	r2, [r7, #0]
 800da06:	71fb      	strb	r3, [r7, #7]
 800da08:	460b      	mov	r3, r1
 800da0a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800da0c:	79b9      	ldrb	r1, [r7, #6]
 800da0e:	79fb      	ldrb	r3, [r7, #7]
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 fba0 	bl	800e158 <SD_disk_ioctl>
 800da18:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800da28:	2200      	movs	r2, #0
 800da2a:	2110      	movs	r1, #16
 800da2c:	4802      	ldr	r0, [pc, #8]	@ (800da38 <SELECT+0x14>)
 800da2e:	f7f9 f8a5 	bl	8006b7c <HAL_GPIO_WritePin>
}
 800da32:	bf00      	nop
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	58020000 	.word	0x58020000

0800da3c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800da40:	2201      	movs	r2, #1
 800da42:	2110      	movs	r1, #16
 800da44:	4802      	ldr	r0, [pc, #8]	@ (800da50 <DESELECT+0x14>)
 800da46:	f7f9 f899 	bl	8006b7c <HAL_GPIO_WritePin>
}
 800da4a:	bf00      	nop
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	58020000 	.word	0x58020000

0800da54 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	4603      	mov	r3, r0
 800da5c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800da5e:	bf00      	nop
 800da60:	4b08      	ldr	r3, [pc, #32]	@ (800da84 <SPI_TxByte+0x30>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	f003 0302 	and.w	r3, r3, #2
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d1f8      	bne.n	800da60 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800da6e:	1df9      	adds	r1, r7, #7
 800da70:	2364      	movs	r3, #100	@ 0x64
 800da72:	2201      	movs	r2, #1
 800da74:	4803      	ldr	r0, [pc, #12]	@ (800da84 <SPI_TxByte+0x30>)
 800da76:	f7fc f8cb 	bl	8009c10 <HAL_SPI_Transmit>
}
 800da7a:	bf00      	nop
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	2400227c 	.word	0x2400227c

0800da88 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800da94:	bf00      	nop
 800da96:	4b08      	ldr	r3, [pc, #32]	@ (800dab8 <SPI_TxBuffer+0x30>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	695b      	ldr	r3, [r3, #20]
 800da9c:	f003 0302 	and.w	r3, r3, #2
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d1f8      	bne.n	800da96 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800daa4:	887a      	ldrh	r2, [r7, #2]
 800daa6:	2364      	movs	r3, #100	@ 0x64
 800daa8:	6879      	ldr	r1, [r7, #4]
 800daaa:	4803      	ldr	r0, [pc, #12]	@ (800dab8 <SPI_TxBuffer+0x30>)
 800daac:	f7fc f8b0 	bl	8009c10 <HAL_SPI_Transmit>
}
 800dab0:	bf00      	nop
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	2400227c 	.word	0x2400227c

0800dabc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800dac2:	23ff      	movs	r3, #255	@ 0xff
 800dac4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800dac6:	bf00      	nop
 800dac8:	4b09      	ldr	r3, [pc, #36]	@ (800daf0 <SPI_RxByte+0x34>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	f003 0302 	and.w	r3, r3, #2
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d1f8      	bne.n	800dac8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800dad6:	1dba      	adds	r2, r7, #6
 800dad8:	1df9      	adds	r1, r7, #7
 800dada:	2364      	movs	r3, #100	@ 0x64
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	2301      	movs	r3, #1
 800dae0:	4803      	ldr	r0, [pc, #12]	@ (800daf0 <SPI_RxByte+0x34>)
 800dae2:	f7fc fcf5 	bl	800a4d0 <HAL_SPI_TransmitReceive>
  return data;
 800dae6:	79bb      	ldrb	r3, [r7, #6]
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	2400227c 	.word	0x2400227c

0800daf4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800dafc:	f7ff ffde 	bl	800dabc <SPI_RxByte>
 800db00:	4603      	mov	r3, r0
 800db02:	461a      	mov	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	701a      	strb	r2, [r3, #0]
}
 800db08:	bf00      	nop
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800db16:	4b0a      	ldr	r3, [pc, #40]	@ (800db40 <SD_ReadyWait+0x30>)
 800db18:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800db1c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800db1e:	f7ff ffcd 	bl	800dabc <SPI_RxByte>
 800db22:	4603      	mov	r3, r0
 800db24:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800db26:	79fb      	ldrb	r3, [r7, #7]
 800db28:	2bff      	cmp	r3, #255	@ 0xff
 800db2a:	d003      	beq.n	800db34 <SD_ReadyWait+0x24>
 800db2c:	4b04      	ldr	r3, [pc, #16]	@ (800db40 <SD_ReadyWait+0x30>)
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1f4      	bne.n	800db1e <SD_ReadyWait+0xe>
  return res;
 800db34:	79fb      	ldrb	r3, [r7, #7]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	24002786 	.word	0x24002786

0800db44 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800db4a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800db4e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800db50:	f7ff ff74 	bl	800da3c <DESELECT>
  for(int i = 0; i < 10; i++)
 800db54:	2300      	movs	r3, #0
 800db56:	60bb      	str	r3, [r7, #8]
 800db58:	e005      	b.n	800db66 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800db5a:	20ff      	movs	r0, #255	@ 0xff
 800db5c:	f7ff ff7a 	bl	800da54 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	3301      	adds	r3, #1
 800db64:	60bb      	str	r3, [r7, #8]
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	2b09      	cmp	r3, #9
 800db6a:	ddf6      	ble.n	800db5a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800db6c:	f7ff ff5a 	bl	800da24 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800db70:	2340      	movs	r3, #64	@ 0x40
 800db72:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800db74:	2300      	movs	r3, #0
 800db76:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800db78:	2300      	movs	r3, #0
 800db7a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800db7c:	2300      	movs	r3, #0
 800db7e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800db84:	2395      	movs	r3, #149	@ 0x95
 800db86:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800db88:	463b      	mov	r3, r7
 800db8a:	2106      	movs	r1, #6
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7ff ff7b 	bl	800da88 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800db92:	e002      	b.n	800db9a <SD_PowerOn+0x56>
  {
    cnt--;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	3b01      	subs	r3, #1
 800db98:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800db9a:	f7ff ff8f 	bl	800dabc <SPI_RxByte>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d002      	beq.n	800dbaa <SD_PowerOn+0x66>
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1f4      	bne.n	800db94 <SD_PowerOn+0x50>
  }
  DESELECT();
 800dbaa:	f7ff ff47 	bl	800da3c <DESELECT>
  SPI_TxByte(0XFF);
 800dbae:	20ff      	movs	r0, #255	@ 0xff
 800dbb0:	f7ff ff50 	bl	800da54 <SPI_TxByte>
  PowerFlag = 1;
 800dbb4:	4b03      	ldr	r3, [pc, #12]	@ (800dbc4 <SD_PowerOn+0x80>)
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	701a      	strb	r2, [r3, #0]
}
 800dbba:	bf00      	nop
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	24002789 	.word	0x24002789

0800dbc8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800dbcc:	4b03      	ldr	r3, [pc, #12]	@ (800dbdc <SD_PowerOff+0x14>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	701a      	strb	r2, [r3, #0]
}
 800dbd2:	bf00      	nop
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	24002789 	.word	0x24002789

0800dbe0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	af00      	add	r7, sp, #0
  return PowerFlag;
 800dbe4:	4b03      	ldr	r3, [pc, #12]	@ (800dbf4 <SD_CheckPower+0x14>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	24002789 	.word	0x24002789

0800dbf8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800dc02:	4b13      	ldr	r3, [pc, #76]	@ (800dc50 <SD_RxDataBlock+0x58>)
 800dc04:	22c8      	movs	r2, #200	@ 0xc8
 800dc06:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800dc08:	f7ff ff58 	bl	800dabc <SPI_RxByte>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	2bff      	cmp	r3, #255	@ 0xff
 800dc14:	d103      	bne.n	800dc1e <SD_RxDataBlock+0x26>
 800dc16:	4b0e      	ldr	r3, [pc, #56]	@ (800dc50 <SD_RxDataBlock+0x58>)
 800dc18:	881b      	ldrh	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1f4      	bne.n	800dc08 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800dc1e:	7bfb      	ldrb	r3, [r7, #15]
 800dc20:	2bfe      	cmp	r3, #254	@ 0xfe
 800dc22:	d001      	beq.n	800dc28 <SD_RxDataBlock+0x30>
 800dc24:	2300      	movs	r3, #0
 800dc26:	e00f      	b.n	800dc48 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	1c5a      	adds	r2, r3, #1
 800dc2c:	607a      	str	r2, [r7, #4]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff ff60 	bl	800daf4 <SPI_RxBytePtr>
  } while(len--);
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	1e5a      	subs	r2, r3, #1
 800dc38:	603a      	str	r2, [r7, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1f4      	bne.n	800dc28 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800dc3e:	f7ff ff3d 	bl	800dabc <SPI_RxByte>
  SPI_RxByte();
 800dc42:	f7ff ff3b 	bl	800dabc <SPI_RxByte>
  return TRUE;
 800dc46:	2301      	movs	r3, #1
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	24002784 	.word	0x24002784

0800dc54 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800dc60:	2300      	movs	r3, #0
 800dc62:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800dc64:	f7ff ff54 	bl	800db10 <SD_ReadyWait>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2bff      	cmp	r3, #255	@ 0xff
 800dc6c:	d001      	beq.n	800dc72 <SD_TxDataBlock+0x1e>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	e02f      	b.n	800dcd2 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800dc72:	78fb      	ldrb	r3, [r7, #3]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff feed 	bl	800da54 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800dc7a:	78fb      	ldrb	r3, [r7, #3]
 800dc7c:	2bfd      	cmp	r3, #253	@ 0xfd
 800dc7e:	d020      	beq.n	800dcc2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800dc80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7ff feff 	bl	800da88 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800dc8a:	f7ff ff17 	bl	800dabc <SPI_RxByte>
    SPI_RxByte();
 800dc8e:	f7ff ff15 	bl	800dabc <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800dc92:	e00b      	b.n	800dcac <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800dc94:	f7ff ff12 	bl	800dabc <SPI_RxByte>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
 800dc9e:	f003 031f 	and.w	r3, r3, #31
 800dca2:	2b05      	cmp	r3, #5
 800dca4:	d006      	beq.n	800dcb4 <SD_TxDataBlock+0x60>
      i++;
 800dca6:	7bbb      	ldrb	r3, [r7, #14]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800dcac:	7bbb      	ldrb	r3, [r7, #14]
 800dcae:	2b40      	cmp	r3, #64	@ 0x40
 800dcb0:	d9f0      	bls.n	800dc94 <SD_TxDataBlock+0x40>
 800dcb2:	e000      	b.n	800dcb6 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800dcb4:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800dcb6:	bf00      	nop
 800dcb8:	f7ff ff00 	bl	800dabc <SPI_RxByte>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d0fa      	beq.n	800dcb8 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	f003 031f 	and.w	r3, r3, #31
 800dcc8:	2b05      	cmp	r3, #5
 800dcca:	d101      	bne.n	800dcd0 <SD_TxDataBlock+0x7c>
 800dccc:	2301      	movs	r3, #1
 800dcce:	e000      	b.n	800dcd2 <SD_TxDataBlock+0x7e>

  return FALSE;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	4603      	mov	r3, r0
 800dce2:	6039      	str	r1, [r7, #0]
 800dce4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800dce6:	f7ff ff13 	bl	800db10 <SD_ReadyWait>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2bff      	cmp	r3, #255	@ 0xff
 800dcee:	d001      	beq.n	800dcf4 <SD_SendCmd+0x1a>
 800dcf0:	23ff      	movs	r3, #255	@ 0xff
 800dcf2:	e042      	b.n	800dd7a <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800dcf4:	79fb      	ldrb	r3, [r7, #7]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7ff feac 	bl	800da54 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	0e1b      	lsrs	r3, r3, #24
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7ff fea6 	bl	800da54 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	0c1b      	lsrs	r3, r3, #16
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7ff fea0 	bl	800da54 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	0a1b      	lsrs	r3, r3, #8
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7ff fe9a 	bl	800da54 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7ff fe95 	bl	800da54 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800dd2a:	79fb      	ldrb	r3, [r7, #7]
 800dd2c:	2b40      	cmp	r3, #64	@ 0x40
 800dd2e:	d102      	bne.n	800dd36 <SD_SendCmd+0x5c>
 800dd30:	2395      	movs	r3, #149	@ 0x95
 800dd32:	73fb      	strb	r3, [r7, #15]
 800dd34:	e007      	b.n	800dd46 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	2b48      	cmp	r3, #72	@ 0x48
 800dd3a:	d102      	bne.n	800dd42 <SD_SendCmd+0x68>
 800dd3c:	2387      	movs	r3, #135	@ 0x87
 800dd3e:	73fb      	strb	r3, [r7, #15]
 800dd40:	e001      	b.n	800dd46 <SD_SendCmd+0x6c>
  else crc = 1;
 800dd42:	2301      	movs	r3, #1
 800dd44:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800dd46:	7bfb      	ldrb	r3, [r7, #15]
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7ff fe83 	bl	800da54 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800dd4e:	79fb      	ldrb	r3, [r7, #7]
 800dd50:	2b4c      	cmp	r3, #76	@ 0x4c
 800dd52:	d101      	bne.n	800dd58 <SD_SendCmd+0x7e>
 800dd54:	f7ff feb2 	bl	800dabc <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800dd58:	230a      	movs	r3, #10
 800dd5a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800dd5c:	f7ff feae 	bl	800dabc <SPI_RxByte>
 800dd60:	4603      	mov	r3, r0
 800dd62:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800dd64:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	da05      	bge.n	800dd78 <SD_SendCmd+0x9e>
 800dd6c:	7bbb      	ldrb	r3, [r7, #14]
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	73bb      	strb	r3, [r7, #14]
 800dd72:	7bbb      	ldrb	r3, [r7, #14]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1f1      	bne.n	800dd5c <SD_SendCmd+0x82>

  return res;
 800dd78:	7b7b      	ldrb	r3, [r7, #13]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
	...

0800dd84 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800dd84:	b590      	push	{r4, r7, lr}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800dd8e:	79fb      	ldrb	r3, [r7, #7]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d001      	beq.n	800dd98 <SD_disk_initialize+0x14>
 800dd94:	2301      	movs	r3, #1
 800dd96:	e0d1      	b.n	800df3c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800dd98:	4b6a      	ldr	r3, [pc, #424]	@ (800df44 <SD_disk_initialize+0x1c0>)
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	f003 0302 	and.w	r3, r3, #2
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d003      	beq.n	800ddae <SD_disk_initialize+0x2a>
 800dda6:	4b67      	ldr	r3, [pc, #412]	@ (800df44 <SD_disk_initialize+0x1c0>)
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	e0c6      	b.n	800df3c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800ddae:	f7ff fec9 	bl	800db44 <SD_PowerOn>
  /* slave select */
  SELECT();
 800ddb2:	f7ff fe37 	bl	800da24 <SELECT>
  /* check disk type */
  type = 0;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800ddba:	2100      	movs	r1, #0
 800ddbc:	2040      	movs	r0, #64	@ 0x40
 800ddbe:	f7ff ff8c 	bl	800dcda <SD_SendCmd>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	f040 80a1 	bne.w	800df0c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800ddca:	4b5f      	ldr	r3, [pc, #380]	@ (800df48 <SD_disk_initialize+0x1c4>)
 800ddcc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ddd0:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800ddd2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800ddd6:	2048      	movs	r0, #72	@ 0x48
 800ddd8:	f7ff ff7f 	bl	800dcda <SD_SendCmd>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d155      	bne.n	800de8e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800dde2:	2300      	movs	r3, #0
 800dde4:	73fb      	strb	r3, [r7, #15]
 800dde6:	e00c      	b.n	800de02 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800dde8:	7bfc      	ldrb	r4, [r7, #15]
 800ddea:	f7ff fe67 	bl	800dabc <SPI_RxByte>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	f104 0310 	add.w	r3, r4, #16
 800ddf6:	443b      	add	r3, r7
 800ddf8:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	3301      	adds	r3, #1
 800de00:	73fb      	strb	r3, [r7, #15]
 800de02:	7bfb      	ldrb	r3, [r7, #15]
 800de04:	2b03      	cmp	r3, #3
 800de06:	d9ef      	bls.n	800dde8 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800de08:	7abb      	ldrb	r3, [r7, #10]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d17e      	bne.n	800df0c <SD_disk_initialize+0x188>
 800de0e:	7afb      	ldrb	r3, [r7, #11]
 800de10:	2baa      	cmp	r3, #170	@ 0xaa
 800de12:	d17b      	bne.n	800df0c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800de14:	2100      	movs	r1, #0
 800de16:	2077      	movs	r0, #119	@ 0x77
 800de18:	f7ff ff5f 	bl	800dcda <SD_SendCmd>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d807      	bhi.n	800de32 <SD_disk_initialize+0xae>
 800de22:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800de26:	2069      	movs	r0, #105	@ 0x69
 800de28:	f7ff ff57 	bl	800dcda <SD_SendCmd>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d004      	beq.n	800de3c <SD_disk_initialize+0xb8>
        } while (Timer1);
 800de32:	4b45      	ldr	r3, [pc, #276]	@ (800df48 <SD_disk_initialize+0x1c4>)
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1ec      	bne.n	800de14 <SD_disk_initialize+0x90>
 800de3a:	e000      	b.n	800de3e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800de3c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800de3e:	4b42      	ldr	r3, [pc, #264]	@ (800df48 <SD_disk_initialize+0x1c4>)
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d062      	beq.n	800df0c <SD_disk_initialize+0x188>
 800de46:	2100      	movs	r1, #0
 800de48:	207a      	movs	r0, #122	@ 0x7a
 800de4a:	f7ff ff46 	bl	800dcda <SD_SendCmd>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d15b      	bne.n	800df0c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800de54:	2300      	movs	r3, #0
 800de56:	73fb      	strb	r3, [r7, #15]
 800de58:	e00c      	b.n	800de74 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800de5a:	7bfc      	ldrb	r4, [r7, #15]
 800de5c:	f7ff fe2e 	bl	800dabc <SPI_RxByte>
 800de60:	4603      	mov	r3, r0
 800de62:	461a      	mov	r2, r3
 800de64:	f104 0310 	add.w	r3, r4, #16
 800de68:	443b      	add	r3, r7
 800de6a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800de6e:	7bfb      	ldrb	r3, [r7, #15]
 800de70:	3301      	adds	r3, #1
 800de72:	73fb      	strb	r3, [r7, #15]
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	2b03      	cmp	r3, #3
 800de78:	d9ef      	bls.n	800de5a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800de7a:	7a3b      	ldrb	r3, [r7, #8]
 800de7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de80:	2b00      	cmp	r3, #0
 800de82:	d001      	beq.n	800de88 <SD_disk_initialize+0x104>
 800de84:	230c      	movs	r3, #12
 800de86:	e000      	b.n	800de8a <SD_disk_initialize+0x106>
 800de88:	2304      	movs	r3, #4
 800de8a:	73bb      	strb	r3, [r7, #14]
 800de8c:	e03e      	b.n	800df0c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800de8e:	2100      	movs	r1, #0
 800de90:	2077      	movs	r0, #119	@ 0x77
 800de92:	f7ff ff22 	bl	800dcda <SD_SendCmd>
 800de96:	4603      	mov	r3, r0
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d808      	bhi.n	800deae <SD_disk_initialize+0x12a>
 800de9c:	2100      	movs	r1, #0
 800de9e:	2069      	movs	r0, #105	@ 0x69
 800dea0:	f7ff ff1b 	bl	800dcda <SD_SendCmd>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d801      	bhi.n	800deae <SD_disk_initialize+0x12a>
 800deaa:	2302      	movs	r3, #2
 800deac:	e000      	b.n	800deb0 <SD_disk_initialize+0x12c>
 800deae:	2301      	movs	r3, #1
 800deb0:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800deb2:	7bbb      	ldrb	r3, [r7, #14]
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d10e      	bne.n	800ded6 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800deb8:	2100      	movs	r1, #0
 800deba:	2077      	movs	r0, #119	@ 0x77
 800debc:	f7ff ff0d 	bl	800dcda <SD_SendCmd>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d80e      	bhi.n	800dee4 <SD_disk_initialize+0x160>
 800dec6:	2100      	movs	r1, #0
 800dec8:	2069      	movs	r0, #105	@ 0x69
 800deca:	f7ff ff06 	bl	800dcda <SD_SendCmd>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d107      	bne.n	800dee4 <SD_disk_initialize+0x160>
 800ded4:	e00c      	b.n	800def0 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800ded6:	2100      	movs	r1, #0
 800ded8:	2041      	movs	r0, #65	@ 0x41
 800deda:	f7ff fefe 	bl	800dcda <SD_SendCmd>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d004      	beq.n	800deee <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800dee4:	4b18      	ldr	r3, [pc, #96]	@ (800df48 <SD_disk_initialize+0x1c4>)
 800dee6:	881b      	ldrh	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d1e2      	bne.n	800deb2 <SD_disk_initialize+0x12e>
 800deec:	e000      	b.n	800def0 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800deee:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800def0:	4b15      	ldr	r3, [pc, #84]	@ (800df48 <SD_disk_initialize+0x1c4>)
 800def2:	881b      	ldrh	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d007      	beq.n	800df08 <SD_disk_initialize+0x184>
 800def8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800defc:	2050      	movs	r0, #80	@ 0x50
 800defe:	f7ff feec 	bl	800dcda <SD_SendCmd>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <SD_disk_initialize+0x188>
 800df08:	2300      	movs	r3, #0
 800df0a:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800df0c:	4a0f      	ldr	r2, [pc, #60]	@ (800df4c <SD_disk_initialize+0x1c8>)
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800df12:	f7ff fd93 	bl	800da3c <DESELECT>
  SPI_RxByte();
 800df16:	f7ff fdd1 	bl	800dabc <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800df1a:	7bbb      	ldrb	r3, [r7, #14]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d008      	beq.n	800df32 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800df20:	4b08      	ldr	r3, [pc, #32]	@ (800df44 <SD_disk_initialize+0x1c0>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	b2db      	uxtb	r3, r3
 800df26:	f023 0301 	bic.w	r3, r3, #1
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	4b05      	ldr	r3, [pc, #20]	@ (800df44 <SD_disk_initialize+0x1c0>)
 800df2e:	701a      	strb	r2, [r3, #0]
 800df30:	e001      	b.n	800df36 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800df32:	f7ff fe49 	bl	800dbc8 <SD_PowerOff>
  }
  return Stat;
 800df36:	4b03      	ldr	r3, [pc, #12]	@ (800df44 <SD_disk_initialize+0x1c0>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	b2db      	uxtb	r3, r3
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3714      	adds	r7, #20
 800df40:	46bd      	mov	sp, r7
 800df42:	bd90      	pop	{r4, r7, pc}
 800df44:	24000054 	.word	0x24000054
 800df48:	24002784 	.word	0x24002784
 800df4c:	24002788 	.word	0x24002788

0800df50 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	4603      	mov	r3, r0
 800df58:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800df5a:	79fb      	ldrb	r3, [r7, #7]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d001      	beq.n	800df64 <SD_disk_status+0x14>
 800df60:	2301      	movs	r3, #1
 800df62:	e002      	b.n	800df6a <SD_disk_status+0x1a>
  return Stat;
 800df64:	4b04      	ldr	r3, [pc, #16]	@ (800df78 <SD_disk_status+0x28>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	b2db      	uxtb	r3, r3
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	24000054 	.word	0x24000054

0800df7c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	60b9      	str	r1, [r7, #8]
 800df84:	607a      	str	r2, [r7, #4]
 800df86:	603b      	str	r3, [r7, #0]
 800df88:	4603      	mov	r3, r0
 800df8a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d102      	bne.n	800df98 <SD_disk_read+0x1c>
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d101      	bne.n	800df9c <SD_disk_read+0x20>
 800df98:	2304      	movs	r3, #4
 800df9a:	e051      	b.n	800e040 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800df9c:	4b2a      	ldr	r3, [pc, #168]	@ (800e048 <SD_disk_read+0xcc>)
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	f003 0301 	and.w	r3, r3, #1
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <SD_disk_read+0x32>
 800dfaa:	2303      	movs	r3, #3
 800dfac:	e048      	b.n	800e040 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800dfae:	4b27      	ldr	r3, [pc, #156]	@ (800e04c <SD_disk_read+0xd0>)
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	f003 0304 	and.w	r3, r3, #4
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d102      	bne.n	800dfc0 <SD_disk_read+0x44>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	025b      	lsls	r3, r3, #9
 800dfbe:	607b      	str	r3, [r7, #4]

  SELECT();
 800dfc0:	f7ff fd30 	bl	800da24 <SELECT>

  if (count == 1)
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d111      	bne.n	800dfee <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800dfca:	6879      	ldr	r1, [r7, #4]
 800dfcc:	2051      	movs	r0, #81	@ 0x51
 800dfce:	f7ff fe84 	bl	800dcda <SD_SendCmd>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d129      	bne.n	800e02c <SD_disk_read+0xb0>
 800dfd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800dfdc:	68b8      	ldr	r0, [r7, #8]
 800dfde:	f7ff fe0b 	bl	800dbf8 <SD_RxDataBlock>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d021      	beq.n	800e02c <SD_disk_read+0xb0>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	603b      	str	r3, [r7, #0]
 800dfec:	e01e      	b.n	800e02c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800dfee:	6879      	ldr	r1, [r7, #4]
 800dff0:	2052      	movs	r0, #82	@ 0x52
 800dff2:	f7ff fe72 	bl	800dcda <SD_SendCmd>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d117      	bne.n	800e02c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800dffc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e000:	68b8      	ldr	r0, [r7, #8]
 800e002:	f7ff fdf9 	bl	800dbf8 <SD_RxDataBlock>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00a      	beq.n	800e022 <SD_disk_read+0xa6>
        buff += 512;
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e012:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	3b01      	subs	r3, #1
 800e018:	603b      	str	r3, [r7, #0]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1ed      	bne.n	800dffc <SD_disk_read+0x80>
 800e020:	e000      	b.n	800e024 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800e022:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800e024:	2100      	movs	r1, #0
 800e026:	204c      	movs	r0, #76	@ 0x4c
 800e028:	f7ff fe57 	bl	800dcda <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800e02c:	f7ff fd06 	bl	800da3c <DESELECT>
  SPI_RxByte();
 800e030:	f7ff fd44 	bl	800dabc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	bf14      	ite	ne
 800e03a:	2301      	movne	r3, #1
 800e03c:	2300      	moveq	r3, #0
 800e03e:	b2db      	uxtb	r3, r3
}
 800e040:	4618      	mov	r0, r3
 800e042:	3710      	adds	r7, #16
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	24000054 	.word	0x24000054
 800e04c:	24002788 	.word	0x24002788

0800e050 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	60b9      	str	r1, [r7, #8]
 800e058:	607a      	str	r2, [r7, #4]
 800e05a:	603b      	str	r3, [r7, #0]
 800e05c:	4603      	mov	r3, r0
 800e05e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800e060:	7bfb      	ldrb	r3, [r7, #15]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d102      	bne.n	800e06c <SD_disk_write+0x1c>
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <SD_disk_write+0x20>
 800e06c:	2304      	movs	r3, #4
 800e06e:	e06b      	b.n	800e148 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e070:	4b37      	ldr	r3, [pc, #220]	@ (800e150 <SD_disk_write+0x100>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	b2db      	uxtb	r3, r3
 800e076:	f003 0301 	and.w	r3, r3, #1
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d001      	beq.n	800e082 <SD_disk_write+0x32>
 800e07e:	2303      	movs	r3, #3
 800e080:	e062      	b.n	800e148 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800e082:	4b33      	ldr	r3, [pc, #204]	@ (800e150 <SD_disk_write+0x100>)
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	b2db      	uxtb	r3, r3
 800e088:	f003 0304 	and.w	r3, r3, #4
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <SD_disk_write+0x44>
 800e090:	2302      	movs	r3, #2
 800e092:	e059      	b.n	800e148 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800e094:	4b2f      	ldr	r3, [pc, #188]	@ (800e154 <SD_disk_write+0x104>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	f003 0304 	and.w	r3, r3, #4
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d102      	bne.n	800e0a6 <SD_disk_write+0x56>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	025b      	lsls	r3, r3, #9
 800e0a4:	607b      	str	r3, [r7, #4]

  SELECT();
 800e0a6:	f7ff fcbd 	bl	800da24 <SELECT>

  if (count == 1)
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d110      	bne.n	800e0d2 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800e0b0:	6879      	ldr	r1, [r7, #4]
 800e0b2:	2058      	movs	r0, #88	@ 0x58
 800e0b4:	f7ff fe11 	bl	800dcda <SD_SendCmd>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d13a      	bne.n	800e134 <SD_disk_write+0xe4>
 800e0be:	21fe      	movs	r1, #254	@ 0xfe
 800e0c0:	68b8      	ldr	r0, [r7, #8]
 800e0c2:	f7ff fdc7 	bl	800dc54 <SD_TxDataBlock>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d033      	beq.n	800e134 <SD_disk_write+0xe4>
      count = 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	603b      	str	r3, [r7, #0]
 800e0d0:	e030      	b.n	800e134 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800e0d2:	4b20      	ldr	r3, [pc, #128]	@ (800e154 <SD_disk_write+0x104>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	f003 0302 	and.w	r3, r3, #2
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d007      	beq.n	800e0ee <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800e0de:	2100      	movs	r1, #0
 800e0e0:	2077      	movs	r0, #119	@ 0x77
 800e0e2:	f7ff fdfa 	bl	800dcda <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800e0e6:	6839      	ldr	r1, [r7, #0]
 800e0e8:	2057      	movs	r0, #87	@ 0x57
 800e0ea:	f7ff fdf6 	bl	800dcda <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800e0ee:	6879      	ldr	r1, [r7, #4]
 800e0f0:	2059      	movs	r0, #89	@ 0x59
 800e0f2:	f7ff fdf2 	bl	800dcda <SD_SendCmd>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d11b      	bne.n	800e134 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800e0fc:	21fc      	movs	r1, #252	@ 0xfc
 800e0fe:	68b8      	ldr	r0, [r7, #8]
 800e100:	f7ff fda8 	bl	800dc54 <SD_TxDataBlock>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d00a      	beq.n	800e120 <SD_disk_write+0xd0>
        buff += 512;
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e110:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	3b01      	subs	r3, #1
 800e116:	603b      	str	r3, [r7, #0]
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1ee      	bne.n	800e0fc <SD_disk_write+0xac>
 800e11e:	e000      	b.n	800e122 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800e120:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800e122:	21fd      	movs	r1, #253	@ 0xfd
 800e124:	2000      	movs	r0, #0
 800e126:	f7ff fd95 	bl	800dc54 <SD_TxDataBlock>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <SD_disk_write+0xe4>
      {
        count = 1;
 800e130:	2301      	movs	r3, #1
 800e132:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800e134:	f7ff fc82 	bl	800da3c <DESELECT>
  SPI_RxByte();
 800e138:	f7ff fcc0 	bl	800dabc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	bf14      	ite	ne
 800e142:	2301      	movne	r3, #1
 800e144:	2300      	moveq	r3, #0
 800e146:	b2db      	uxtb	r3, r3
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	24000054 	.word	0x24000054
 800e154:	24002788 	.word	0x24002788

0800e158 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800e158:	b590      	push	{r4, r7, lr}
 800e15a:	b08b      	sub	sp, #44	@ 0x2c
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	4603      	mov	r3, r0
 800e160:	603a      	str	r2, [r7, #0]
 800e162:	71fb      	strb	r3, [r7, #7]
 800e164:	460b      	mov	r3, r1
 800e166:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800e16c:	79fb      	ldrb	r3, [r7, #7]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <SD_disk_ioctl+0x1e>
 800e172:	2304      	movs	r3, #4
 800e174:	e113      	b.n	800e39e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800e176:	2301      	movs	r3, #1
 800e178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800e17c:	79bb      	ldrb	r3, [r7, #6]
 800e17e:	2b05      	cmp	r3, #5
 800e180:	d124      	bne.n	800e1cc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800e182:	6a3b      	ldr	r3, [r7, #32]
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	2b02      	cmp	r3, #2
 800e188:	d012      	beq.n	800e1b0 <SD_disk_ioctl+0x58>
 800e18a:	2b02      	cmp	r3, #2
 800e18c:	dc1a      	bgt.n	800e1c4 <SD_disk_ioctl+0x6c>
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d002      	beq.n	800e198 <SD_disk_ioctl+0x40>
 800e192:	2b01      	cmp	r3, #1
 800e194:	d006      	beq.n	800e1a4 <SD_disk_ioctl+0x4c>
 800e196:	e015      	b.n	800e1c4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800e198:	f7ff fd16 	bl	800dbc8 <SD_PowerOff>
      res = RES_OK;
 800e19c:	2300      	movs	r3, #0
 800e19e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e1a2:	e0fa      	b.n	800e39a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800e1a4:	f7ff fcce 	bl	800db44 <SD_PowerOn>
      res = RES_OK;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e1ae:	e0f4      	b.n	800e39a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	1c5c      	adds	r4, r3, #1
 800e1b4:	f7ff fd14 	bl	800dbe0 <SD_CheckPower>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800e1bc:	2300      	movs	r3, #0
 800e1be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e1c2:	e0ea      	b.n	800e39a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800e1c4:	2304      	movs	r3, #4
 800e1c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e1ca:	e0e6      	b.n	800e39a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800e1cc:	4b76      	ldr	r3, [pc, #472]	@ (800e3a8 <SD_disk_ioctl+0x250>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	f003 0301 	and.w	r3, r3, #1
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d001      	beq.n	800e1de <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800e1da:	2303      	movs	r3, #3
 800e1dc:	e0df      	b.n	800e39e <SD_disk_ioctl+0x246>
    }
    SELECT();
 800e1de:	f7ff fc21 	bl	800da24 <SELECT>
    switch (ctrl)
 800e1e2:	79bb      	ldrb	r3, [r7, #6]
 800e1e4:	2b0d      	cmp	r3, #13
 800e1e6:	f200 80c9 	bhi.w	800e37c <SD_disk_ioctl+0x224>
 800e1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f0 <SD_disk_ioctl+0x98>)
 800e1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f0:	0800e2e7 	.word	0x0800e2e7
 800e1f4:	0800e229 	.word	0x0800e229
 800e1f8:	0800e2d7 	.word	0x0800e2d7
 800e1fc:	0800e37d 	.word	0x0800e37d
 800e200:	0800e37d 	.word	0x0800e37d
 800e204:	0800e37d 	.word	0x0800e37d
 800e208:	0800e37d 	.word	0x0800e37d
 800e20c:	0800e37d 	.word	0x0800e37d
 800e210:	0800e37d 	.word	0x0800e37d
 800e214:	0800e37d 	.word	0x0800e37d
 800e218:	0800e37d 	.word	0x0800e37d
 800e21c:	0800e2f9 	.word	0x0800e2f9
 800e220:	0800e31d 	.word	0x0800e31d
 800e224:	0800e341 	.word	0x0800e341
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800e228:	2100      	movs	r1, #0
 800e22a:	2049      	movs	r0, #73	@ 0x49
 800e22c:	f7ff fd55 	bl	800dcda <SD_SendCmd>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	f040 80a6 	bne.w	800e384 <SD_disk_ioctl+0x22c>
 800e238:	f107 030c 	add.w	r3, r7, #12
 800e23c:	2110      	movs	r1, #16
 800e23e:	4618      	mov	r0, r3
 800e240:	f7ff fcda 	bl	800dbf8 <SD_RxDataBlock>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	f000 809c 	beq.w	800e384 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800e24c:	7b3b      	ldrb	r3, [r7, #12]
 800e24e:	099b      	lsrs	r3, r3, #6
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b01      	cmp	r3, #1
 800e254:	d10d      	bne.n	800e272 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800e256:	7d7b      	ldrb	r3, [r7, #21]
 800e258:	461a      	mov	r2, r3
 800e25a:	7d3b      	ldrb	r3, [r7, #20]
 800e25c:	021b      	lsls	r3, r3, #8
 800e25e:	b29b      	uxth	r3, r3
 800e260:	4413      	add	r3, r2
 800e262:	b29b      	uxth	r3, r3
 800e264:	3301      	adds	r3, #1
 800e266:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800e268:	8bfb      	ldrh	r3, [r7, #30]
 800e26a:	029a      	lsls	r2, r3, #10
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	601a      	str	r2, [r3, #0]
 800e270:	e02d      	b.n	800e2ce <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e272:	7c7b      	ldrb	r3, [r7, #17]
 800e274:	f003 030f 	and.w	r3, r3, #15
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	7dbb      	ldrb	r3, [r7, #22]
 800e27c:	09db      	lsrs	r3, r3, #7
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	4413      	add	r3, r2
 800e282:	b2da      	uxtb	r2, r3
 800e284:	7d7b      	ldrb	r3, [r7, #21]
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	f003 0306 	and.w	r3, r3, #6
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	4413      	add	r3, r2
 800e292:	b2db      	uxtb	r3, r3
 800e294:	3302      	adds	r3, #2
 800e296:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800e29a:	7d3b      	ldrb	r3, [r7, #20]
 800e29c:	099b      	lsrs	r3, r3, #6
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	7cfb      	ldrb	r3, [r7, #19]
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	4413      	add	r3, r2
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	7cbb      	ldrb	r3, [r7, #18]
 800e2ae:	029b      	lsls	r3, r3, #10
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	4413      	add	r3, r2
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	3301      	adds	r3, #1
 800e2be:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800e2c0:	8bfa      	ldrh	r2, [r7, #30]
 800e2c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2c6:	3b09      	subs	r3, #9
 800e2c8:	409a      	lsls	r2, r3
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800e2d4:	e056      	b.n	800e384 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2dc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e2e4:	e055      	b.n	800e392 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800e2e6:	f7ff fc13 	bl	800db10 <SD_ReadyWait>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2bff      	cmp	r3, #255	@ 0xff
 800e2ee:	d14b      	bne.n	800e388 <SD_disk_ioctl+0x230>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e2f6:	e047      	b.n	800e388 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	2049      	movs	r0, #73	@ 0x49
 800e2fc:	f7ff fced 	bl	800dcda <SD_SendCmd>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d142      	bne.n	800e38c <SD_disk_ioctl+0x234>
 800e306:	2110      	movs	r1, #16
 800e308:	6a38      	ldr	r0, [r7, #32]
 800e30a:	f7ff fc75 	bl	800dbf8 <SD_RxDataBlock>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d03b      	beq.n	800e38c <SD_disk_ioctl+0x234>
 800e314:	2300      	movs	r3, #0
 800e316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e31a:	e037      	b.n	800e38c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800e31c:	2100      	movs	r1, #0
 800e31e:	204a      	movs	r0, #74	@ 0x4a
 800e320:	f7ff fcdb 	bl	800dcda <SD_SendCmd>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d132      	bne.n	800e390 <SD_disk_ioctl+0x238>
 800e32a:	2110      	movs	r1, #16
 800e32c:	6a38      	ldr	r0, [r7, #32]
 800e32e:	f7ff fc63 	bl	800dbf8 <SD_RxDataBlock>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d02b      	beq.n	800e390 <SD_disk_ioctl+0x238>
 800e338:	2300      	movs	r3, #0
 800e33a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800e33e:	e027      	b.n	800e390 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800e340:	2100      	movs	r1, #0
 800e342:	207a      	movs	r0, #122	@ 0x7a
 800e344:	f7ff fcc9 	bl	800dcda <SD_SendCmd>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d116      	bne.n	800e37c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800e34e:	2300      	movs	r3, #0
 800e350:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e354:	e00b      	b.n	800e36e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800e356:	6a3c      	ldr	r4, [r7, #32]
 800e358:	1c63      	adds	r3, r4, #1
 800e35a:	623b      	str	r3, [r7, #32]
 800e35c:	f7ff fbae 	bl	800dabc <SPI_RxByte>
 800e360:	4603      	mov	r3, r0
 800e362:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800e364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e368:	3301      	adds	r3, #1
 800e36a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e36e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e372:	2b03      	cmp	r3, #3
 800e374:	d9ef      	bls.n	800e356 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800e376:	2300      	movs	r3, #0
 800e378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800e37c:	2304      	movs	r3, #4
 800e37e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e382:	e006      	b.n	800e392 <SD_disk_ioctl+0x23a>
      break;
 800e384:	bf00      	nop
 800e386:	e004      	b.n	800e392 <SD_disk_ioctl+0x23a>
      break;
 800e388:	bf00      	nop
 800e38a:	e002      	b.n	800e392 <SD_disk_ioctl+0x23a>
      break;
 800e38c:	bf00      	nop
 800e38e:	e000      	b.n	800e392 <SD_disk_ioctl+0x23a>
      break;
 800e390:	bf00      	nop
    }
    DESELECT();
 800e392:	f7ff fb53 	bl	800da3c <DESELECT>
    SPI_RxByte();
 800e396:	f7ff fb91 	bl	800dabc <SPI_RxByte>
  }
  return res;
 800e39a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	372c      	adds	r7, #44	@ 0x2c
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd90      	pop	{r4, r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	24000054 	.word	0x24000054

0800e3ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e3b6:	79fb      	ldrb	r3, [r7, #7]
 800e3b8:	4a08      	ldr	r2, [pc, #32]	@ (800e3dc <disk_status+0x30>)
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4413      	add	r3, r2
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	79fa      	ldrb	r2, [r7, #7]
 800e3c4:	4905      	ldr	r1, [pc, #20]	@ (800e3dc <disk_status+0x30>)
 800e3c6:	440a      	add	r2, r1
 800e3c8:	7a12      	ldrb	r2, [r2, #8]
 800e3ca:	4610      	mov	r0, r2
 800e3cc:	4798      	blx	r3
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	240029b4 	.word	0x240029b4

0800e3e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e3ee:	79fb      	ldrb	r3, [r7, #7]
 800e3f0:	4a0e      	ldr	r2, [pc, #56]	@ (800e42c <disk_initialize+0x4c>)
 800e3f2:	5cd3      	ldrb	r3, [r2, r3]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d114      	bne.n	800e422 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e3f8:	79fb      	ldrb	r3, [r7, #7]
 800e3fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e42c <disk_initialize+0x4c>)
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	79fa      	ldrb	r2, [r7, #7]
 800e406:	4909      	ldr	r1, [pc, #36]	@ (800e42c <disk_initialize+0x4c>)
 800e408:	440a      	add	r2, r1
 800e40a:	7a12      	ldrb	r2, [r2, #8]
 800e40c:	4610      	mov	r0, r2
 800e40e:	4798      	blx	r3
 800e410:	4603      	mov	r3, r0
 800e412:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e414:	7bfb      	ldrb	r3, [r7, #15]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d103      	bne.n	800e422 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	4a03      	ldr	r2, [pc, #12]	@ (800e42c <disk_initialize+0x4c>)
 800e41e:	2101      	movs	r1, #1
 800e420:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e422:	7bfb      	ldrb	r3, [r7, #15]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3710      	adds	r7, #16
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	240029b4 	.word	0x240029b4

0800e430 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e430:	b590      	push	{r4, r7, lr}
 800e432:	b087      	sub	sp, #28
 800e434:	af00      	add	r7, sp, #0
 800e436:	60b9      	str	r1, [r7, #8]
 800e438:	607a      	str	r2, [r7, #4]
 800e43a:	603b      	str	r3, [r7, #0]
 800e43c:	4603      	mov	r3, r0
 800e43e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	4a0a      	ldr	r2, [pc, #40]	@ (800e46c <disk_read+0x3c>)
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	689c      	ldr	r4, [r3, #8]
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
 800e44e:	4a07      	ldr	r2, [pc, #28]	@ (800e46c <disk_read+0x3c>)
 800e450:	4413      	add	r3, r2
 800e452:	7a18      	ldrb	r0, [r3, #8]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	47a0      	blx	r4
 800e45c:	4603      	mov	r3, r0
 800e45e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e460:	7dfb      	ldrb	r3, [r7, #23]
}
 800e462:	4618      	mov	r0, r3
 800e464:	371c      	adds	r7, #28
 800e466:	46bd      	mov	sp, r7
 800e468:	bd90      	pop	{r4, r7, pc}
 800e46a:	bf00      	nop
 800e46c:	240029b4 	.word	0x240029b4

0800e470 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e470:	b590      	push	{r4, r7, lr}
 800e472:	b087      	sub	sp, #28
 800e474:	af00      	add	r7, sp, #0
 800e476:	60b9      	str	r1, [r7, #8]
 800e478:	607a      	str	r2, [r7, #4]
 800e47a:	603b      	str	r3, [r7, #0]
 800e47c:	4603      	mov	r3, r0
 800e47e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e480:	7bfb      	ldrb	r3, [r7, #15]
 800e482:	4a0a      	ldr	r2, [pc, #40]	@ (800e4ac <disk_write+0x3c>)
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	68dc      	ldr	r4, [r3, #12]
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
 800e48e:	4a07      	ldr	r2, [pc, #28]	@ (800e4ac <disk_write+0x3c>)
 800e490:	4413      	add	r3, r2
 800e492:	7a18      	ldrb	r0, [r3, #8]
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	68b9      	ldr	r1, [r7, #8]
 800e49a:	47a0      	blx	r4
 800e49c:	4603      	mov	r3, r0
 800e49e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	371c      	adds	r7, #28
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd90      	pop	{r4, r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	240029b4 	.word	0x240029b4

0800e4b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	603a      	str	r2, [r7, #0]
 800e4ba:	71fb      	strb	r3, [r7, #7]
 800e4bc:	460b      	mov	r3, r1
 800e4be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e4c0:	79fb      	ldrb	r3, [r7, #7]
 800e4c2:	4a09      	ldr	r2, [pc, #36]	@ (800e4e8 <disk_ioctl+0x38>)
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	691b      	ldr	r3, [r3, #16]
 800e4cc:	79fa      	ldrb	r2, [r7, #7]
 800e4ce:	4906      	ldr	r1, [pc, #24]	@ (800e4e8 <disk_ioctl+0x38>)
 800e4d0:	440a      	add	r2, r1
 800e4d2:	7a10      	ldrb	r0, [r2, #8]
 800e4d4:	79b9      	ldrb	r1, [r7, #6]
 800e4d6:	683a      	ldr	r2, [r7, #0]
 800e4d8:	4798      	blx	r3
 800e4da:	4603      	mov	r3, r0
 800e4dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	240029b4 	.word	0x240029b4

0800e4ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e4fc:	89fb      	ldrh	r3, [r7, #14]
 800e4fe:	021b      	lsls	r3, r3, #8
 800e500:	b21a      	sxth	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	b21b      	sxth	r3, r3
 800e508:	4313      	orrs	r3, r2
 800e50a:	b21b      	sxth	r3, r3
 800e50c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e50e:	89fb      	ldrh	r3, [r7, #14]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	3303      	adds	r3, #3
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	021b      	lsls	r3, r3, #8
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	3202      	adds	r2, #2
 800e534:	7812      	ldrb	r2, [r2, #0]
 800e536:	4313      	orrs	r3, r2
 800e538:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	021b      	lsls	r3, r3, #8
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	3201      	adds	r2, #1
 800e542:	7812      	ldrb	r2, [r2, #0]
 800e544:	4313      	orrs	r3, r2
 800e546:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	021b      	lsls	r3, r3, #8
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	7812      	ldrb	r2, [r2, #0]
 800e550:	4313      	orrs	r3, r2
 800e552:	60fb      	str	r3, [r7, #12]
	return rv;
 800e554:	68fb      	ldr	r3, [r7, #12]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3714      	adds	r7, #20
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e562:	b480      	push	{r7}
 800e564:	b083      	sub	sp, #12
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
 800e56a:	460b      	mov	r3, r1
 800e56c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	1c5a      	adds	r2, r3, #1
 800e572:	607a      	str	r2, [r7, #4]
 800e574:	887a      	ldrh	r2, [r7, #2]
 800e576:	b2d2      	uxtb	r2, r2
 800e578:	701a      	strb	r2, [r3, #0]
 800e57a:	887b      	ldrh	r3, [r7, #2]
 800e57c:	0a1b      	lsrs	r3, r3, #8
 800e57e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	1c5a      	adds	r2, r3, #1
 800e584:	607a      	str	r2, [r7, #4]
 800e586:	887a      	ldrh	r2, [r7, #2]
 800e588:	b2d2      	uxtb	r2, r2
 800e58a:	701a      	strb	r2, [r3, #0]
}
 800e58c:	bf00      	nop
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	1c5a      	adds	r2, r3, #1
 800e5a6:	607a      	str	r2, [r7, #4]
 800e5a8:	683a      	ldr	r2, [r7, #0]
 800e5aa:	b2d2      	uxtb	r2, r2
 800e5ac:	701a      	strb	r2, [r3, #0]
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	0a1b      	lsrs	r3, r3, #8
 800e5b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	607a      	str	r2, [r7, #4]
 800e5ba:	683a      	ldr	r2, [r7, #0]
 800e5bc:	b2d2      	uxtb	r2, r2
 800e5be:	701a      	strb	r2, [r3, #0]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	0a1b      	lsrs	r3, r3, #8
 800e5c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	1c5a      	adds	r2, r3, #1
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	683a      	ldr	r2, [r7, #0]
 800e5ce:	b2d2      	uxtb	r2, r2
 800e5d0:	701a      	strb	r2, [r3, #0]
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	0a1b      	lsrs	r3, r3, #8
 800e5d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	1c5a      	adds	r2, r3, #1
 800e5dc:	607a      	str	r2, [r7, #4]
 800e5de:	683a      	ldr	r2, [r7, #0]
 800e5e0:	b2d2      	uxtb	r2, r2
 800e5e2:	701a      	strb	r2, [r3, #0]
}
 800e5e4:	bf00      	nop
 800e5e6:	370c      	adds	r7, #12
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e5f0:	b480      	push	{r7}
 800e5f2:	b087      	sub	sp, #28
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00d      	beq.n	800e626 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e60a:	693a      	ldr	r2, [r7, #16]
 800e60c:	1c53      	adds	r3, r2, #1
 800e60e:	613b      	str	r3, [r7, #16]
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	1c59      	adds	r1, r3, #1
 800e614:	6179      	str	r1, [r7, #20]
 800e616:	7812      	ldrb	r2, [r2, #0]
 800e618:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	3b01      	subs	r3, #1
 800e61e:	607b      	str	r3, [r7, #4]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1f1      	bne.n	800e60a <mem_cpy+0x1a>
	}
}
 800e626:	bf00      	nop
 800e628:	371c      	adds	r7, #28
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr

0800e632 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e632:	b480      	push	{r7}
 800e634:	b087      	sub	sp, #28
 800e636:	af00      	add	r7, sp, #0
 800e638:	60f8      	str	r0, [r7, #12]
 800e63a:	60b9      	str	r1, [r7, #8]
 800e63c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	1c5a      	adds	r2, r3, #1
 800e646:	617a      	str	r2, [r7, #20]
 800e648:	68ba      	ldr	r2, [r7, #8]
 800e64a:	b2d2      	uxtb	r2, r2
 800e64c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	3b01      	subs	r3, #1
 800e652:	607b      	str	r3, [r7, #4]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1f3      	bne.n	800e642 <mem_set+0x10>
}
 800e65a:	bf00      	nop
 800e65c:	bf00      	nop
 800e65e:	371c      	adds	r7, #28
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e668:	b480      	push	{r7}
 800e66a:	b089      	sub	sp, #36	@ 0x24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	61fb      	str	r3, [r7, #28]
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	61fa      	str	r2, [r7, #28]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	4619      	mov	r1, r3
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	1c5a      	adds	r2, r3, #1
 800e68e:	61ba      	str	r2, [r7, #24]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	1acb      	subs	r3, r1, r3
 800e694:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	3b01      	subs	r3, #1
 800e69a:	607b      	str	r3, [r7, #4]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d002      	beq.n	800e6a8 <mem_cmp+0x40>
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d0eb      	beq.n	800e680 <mem_cmp+0x18>

	return r;
 800e6a8:	697b      	ldr	r3, [r7, #20]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3724      	adds	r7, #36	@ 0x24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e6b6:	b480      	push	{r7}
 800e6b8:	b083      	sub	sp, #12
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
 800e6be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e6c0:	e002      	b.n	800e6c8 <chk_chr+0x12>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	607b      	str	r3, [r7, #4]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d005      	beq.n	800e6dc <chk_chr+0x26>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d1f2      	bne.n	800e6c2 <chk_chr+0xc>
	return *str;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	781b      	ldrb	r3, [r3, #0]
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	60bb      	str	r3, [r7, #8]
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	e029      	b.n	800e754 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e700:	4a27      	ldr	r2, [pc, #156]	@ (800e7a0 <chk_lock+0xb4>)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	011b      	lsls	r3, r3, #4
 800e706:	4413      	add	r3, r2
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d01d      	beq.n	800e74a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e70e:	4a24      	ldr	r2, [pc, #144]	@ (800e7a0 <chk_lock+0xb4>)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	011b      	lsls	r3, r3, #4
 800e714:	4413      	add	r3, r2
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d116      	bne.n	800e74e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e720:	4a1f      	ldr	r2, [pc, #124]	@ (800e7a0 <chk_lock+0xb4>)
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	011b      	lsls	r3, r3, #4
 800e726:	4413      	add	r3, r2
 800e728:	3304      	adds	r3, #4
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e730:	429a      	cmp	r2, r3
 800e732:	d10c      	bne.n	800e74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e734:	4a1a      	ldr	r2, [pc, #104]	@ (800e7a0 <chk_lock+0xb4>)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	011b      	lsls	r3, r3, #4
 800e73a:	4413      	add	r3, r2
 800e73c:	3308      	adds	r3, #8
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e744:	429a      	cmp	r2, r3
 800e746:	d102      	bne.n	800e74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e748:	e007      	b.n	800e75a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e74a:	2301      	movs	r3, #1
 800e74c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	3301      	adds	r3, #1
 800e752:	60fb      	str	r3, [r7, #12]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d9d2      	bls.n	800e700 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	d109      	bne.n	800e774 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d102      	bne.n	800e76c <chk_lock+0x80>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	2b02      	cmp	r3, #2
 800e76a:	d101      	bne.n	800e770 <chk_lock+0x84>
 800e76c:	2300      	movs	r3, #0
 800e76e:	e010      	b.n	800e792 <chk_lock+0xa6>
 800e770:	2312      	movs	r3, #18
 800e772:	e00e      	b.n	800e792 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d108      	bne.n	800e78c <chk_lock+0xa0>
 800e77a:	4a09      	ldr	r2, [pc, #36]	@ (800e7a0 <chk_lock+0xb4>)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	011b      	lsls	r3, r3, #4
 800e780:	4413      	add	r3, r2
 800e782:	330c      	adds	r3, #12
 800e784:	881b      	ldrh	r3, [r3, #0]
 800e786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e78a:	d101      	bne.n	800e790 <chk_lock+0xa4>
 800e78c:	2310      	movs	r3, #16
 800e78e:	e000      	b.n	800e792 <chk_lock+0xa6>
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	24002794 	.word	0x24002794

0800e7a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	607b      	str	r3, [r7, #4]
 800e7ae:	e002      	b.n	800e7b6 <enq_lock+0x12>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	607b      	str	r3, [r7, #4]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d806      	bhi.n	800e7ca <enq_lock+0x26>
 800e7bc:	4a09      	ldr	r2, [pc, #36]	@ (800e7e4 <enq_lock+0x40>)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	011b      	lsls	r3, r3, #4
 800e7c2:	4413      	add	r3, r2
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1f2      	bne.n	800e7b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b02      	cmp	r3, #2
 800e7ce:	bf14      	ite	ne
 800e7d0:	2301      	movne	r3, #1
 800e7d2:	2300      	moveq	r3, #0
 800e7d4:	b2db      	uxtb	r3, r3
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	24002794 	.word	0x24002794

0800e7e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	60fb      	str	r3, [r7, #12]
 800e7f6:	e01f      	b.n	800e838 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e7f8:	4a41      	ldr	r2, [pc, #260]	@ (800e900 <inc_lock+0x118>)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	011b      	lsls	r3, r3, #4
 800e7fe:	4413      	add	r3, r2
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	429a      	cmp	r2, r3
 800e808:	d113      	bne.n	800e832 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e80a:	4a3d      	ldr	r2, [pc, #244]	@ (800e900 <inc_lock+0x118>)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	011b      	lsls	r3, r3, #4
 800e810:	4413      	add	r3, r2
 800e812:	3304      	adds	r3, #4
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d109      	bne.n	800e832 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e81e:	4a38      	ldr	r2, [pc, #224]	@ (800e900 <inc_lock+0x118>)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	011b      	lsls	r3, r3, #4
 800e824:	4413      	add	r3, r2
 800e826:	3308      	adds	r3, #8
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e82e:	429a      	cmp	r2, r3
 800e830:	d006      	beq.n	800e840 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	3301      	adds	r3, #1
 800e836:	60fb      	str	r3, [r7, #12]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d9dc      	bls.n	800e7f8 <inc_lock+0x10>
 800e83e:	e000      	b.n	800e842 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e840:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b02      	cmp	r3, #2
 800e846:	d132      	bne.n	800e8ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e848:	2300      	movs	r3, #0
 800e84a:	60fb      	str	r3, [r7, #12]
 800e84c:	e002      	b.n	800e854 <inc_lock+0x6c>
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	3301      	adds	r3, #1
 800e852:	60fb      	str	r3, [r7, #12]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b01      	cmp	r3, #1
 800e858:	d806      	bhi.n	800e868 <inc_lock+0x80>
 800e85a:	4a29      	ldr	r2, [pc, #164]	@ (800e900 <inc_lock+0x118>)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	011b      	lsls	r3, r3, #4
 800e860:	4413      	add	r3, r2
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1f2      	bne.n	800e84e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	d101      	bne.n	800e872 <inc_lock+0x8a>
 800e86e:	2300      	movs	r3, #0
 800e870:	e040      	b.n	800e8f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	4922      	ldr	r1, [pc, #136]	@ (800e900 <inc_lock+0x118>)
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	011b      	lsls	r3, r3, #4
 800e87c:	440b      	add	r3, r1
 800e87e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	689a      	ldr	r2, [r3, #8]
 800e884:	491e      	ldr	r1, [pc, #120]	@ (800e900 <inc_lock+0x118>)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	011b      	lsls	r3, r3, #4
 800e88a:	440b      	add	r3, r1
 800e88c:	3304      	adds	r3, #4
 800e88e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	695a      	ldr	r2, [r3, #20]
 800e894:	491a      	ldr	r1, [pc, #104]	@ (800e900 <inc_lock+0x118>)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	011b      	lsls	r3, r3, #4
 800e89a:	440b      	add	r3, r1
 800e89c:	3308      	adds	r3, #8
 800e89e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e8a0:	4a17      	ldr	r2, [pc, #92]	@ (800e900 <inc_lock+0x118>)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	011b      	lsls	r3, r3, #4
 800e8a6:	4413      	add	r3, r2
 800e8a8:	330c      	adds	r3, #12
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d009      	beq.n	800e8c8 <inc_lock+0xe0>
 800e8b4:	4a12      	ldr	r2, [pc, #72]	@ (800e900 <inc_lock+0x118>)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	011b      	lsls	r3, r3, #4
 800e8ba:	4413      	add	r3, r2
 800e8bc:	330c      	adds	r3, #12
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d001      	beq.n	800e8c8 <inc_lock+0xe0>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	e015      	b.n	800e8f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d108      	bne.n	800e8e0 <inc_lock+0xf8>
 800e8ce:	4a0c      	ldr	r2, [pc, #48]	@ (800e900 <inc_lock+0x118>)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	011b      	lsls	r3, r3, #4
 800e8d4:	4413      	add	r3, r2
 800e8d6:	330c      	adds	r3, #12
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	e001      	b.n	800e8e4 <inc_lock+0xfc>
 800e8e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e8e4:	4906      	ldr	r1, [pc, #24]	@ (800e900 <inc_lock+0x118>)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	011b      	lsls	r3, r3, #4
 800e8ea:	440b      	add	r3, r1
 800e8ec:	330c      	adds	r3, #12
 800e8ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	3301      	adds	r3, #1
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	24002794 	.word	0x24002794

0800e904 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	3b01      	subs	r3, #1
 800e910:	607b      	str	r3, [r7, #4]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b01      	cmp	r3, #1
 800e916:	d825      	bhi.n	800e964 <dec_lock+0x60>
		n = Files[i].ctr;
 800e918:	4a17      	ldr	r2, [pc, #92]	@ (800e978 <dec_lock+0x74>)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	011b      	lsls	r3, r3, #4
 800e91e:	4413      	add	r3, r2
 800e920:	330c      	adds	r3, #12
 800e922:	881b      	ldrh	r3, [r3, #0]
 800e924:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e926:	89fb      	ldrh	r3, [r7, #14]
 800e928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e92c:	d101      	bne.n	800e932 <dec_lock+0x2e>
 800e92e:	2300      	movs	r3, #0
 800e930:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e932:	89fb      	ldrh	r3, [r7, #14]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d002      	beq.n	800e93e <dec_lock+0x3a>
 800e938:	89fb      	ldrh	r3, [r7, #14]
 800e93a:	3b01      	subs	r3, #1
 800e93c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e93e:	4a0e      	ldr	r2, [pc, #56]	@ (800e978 <dec_lock+0x74>)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	011b      	lsls	r3, r3, #4
 800e944:	4413      	add	r3, r2
 800e946:	330c      	adds	r3, #12
 800e948:	89fa      	ldrh	r2, [r7, #14]
 800e94a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e94c:	89fb      	ldrh	r3, [r7, #14]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d105      	bne.n	800e95e <dec_lock+0x5a>
 800e952:	4a09      	ldr	r2, [pc, #36]	@ (800e978 <dec_lock+0x74>)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	011b      	lsls	r3, r3, #4
 800e958:	4413      	add	r3, r2
 800e95a:	2200      	movs	r2, #0
 800e95c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e95e:	2300      	movs	r3, #0
 800e960:	737b      	strb	r3, [r7, #13]
 800e962:	e001      	b.n	800e968 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e964:	2302      	movs	r3, #2
 800e966:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e968:	7b7b      	ldrb	r3, [r7, #13]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop
 800e978:	24002794 	.word	0x24002794

0800e97c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e984:	2300      	movs	r3, #0
 800e986:	60fb      	str	r3, [r7, #12]
 800e988:	e010      	b.n	800e9ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e98a:	4a0d      	ldr	r2, [pc, #52]	@ (800e9c0 <clear_lock+0x44>)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	011b      	lsls	r3, r3, #4
 800e990:	4413      	add	r3, r2
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	429a      	cmp	r2, r3
 800e998:	d105      	bne.n	800e9a6 <clear_lock+0x2a>
 800e99a:	4a09      	ldr	r2, [pc, #36]	@ (800e9c0 <clear_lock+0x44>)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	011b      	lsls	r3, r3, #4
 800e9a0:	4413      	add	r3, r2
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	60fb      	str	r3, [r7, #12]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d9eb      	bls.n	800e98a <clear_lock+0xe>
	}
}
 800e9b2:	bf00      	nop
 800e9b4:	bf00      	nop
 800e9b6:	3714      	adds	r7, #20
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr
 800e9c0:	24002794 	.word	0x24002794

0800e9c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	78db      	ldrb	r3, [r3, #3]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d034      	beq.n	800ea42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	7858      	ldrb	r0, [r3, #1]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	697a      	ldr	r2, [r7, #20]
 800e9ec:	f7ff fd40 	bl	800e470 <disk_write>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d002      	beq.n	800e9fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	73fb      	strb	r3, [r7, #15]
 800e9fa:	e022      	b.n	800ea42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea06:	697a      	ldr	r2, [r7, #20]
 800ea08:	1ad2      	subs	r2, r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d217      	bcs.n	800ea42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	789b      	ldrb	r3, [r3, #2]
 800ea16:	613b      	str	r3, [r7, #16]
 800ea18:	e010      	b.n	800ea3c <sync_window+0x78>
					wsect += fs->fsize;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	4413      	add	r3, r2
 800ea22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	7858      	ldrb	r0, [r3, #1]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ea2e:	2301      	movs	r3, #1
 800ea30:	697a      	ldr	r2, [r7, #20]
 800ea32:	f7ff fd1d 	bl	800e470 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	613b      	str	r3, [r7, #16]
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d8eb      	bhi.n	800ea1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3718      	adds	r7, #24
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ea56:	2300      	movs	r3, #0
 800ea58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea5e:	683a      	ldr	r2, [r7, #0]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d01b      	beq.n	800ea9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f7ff ffad 	bl	800e9c4 <sync_window>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ea6e:	7bfb      	ldrb	r3, [r7, #15]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d113      	bne.n	800ea9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	7858      	ldrb	r0, [r3, #1]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ea7e:	2301      	movs	r3, #1
 800ea80:	683a      	ldr	r2, [r7, #0]
 800ea82:	f7ff fcd5 	bl	800e430 <disk_read>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d004      	beq.n	800ea96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ea8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800ea9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
	...

0800eaa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7ff ff87 	bl	800e9c4 <sync_window>
 800eab6:	4603      	mov	r3, r0
 800eab8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eaba:	7bfb      	ldrb	r3, [r7, #15]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d159      	bne.n	800eb74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d149      	bne.n	800eb5c <sync_fs+0xb4>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	791b      	ldrb	r3, [r3, #4]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d145      	bne.n	800eb5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	899b      	ldrh	r3, [r3, #12]
 800eada:	461a      	mov	r2, r3
 800eadc:	2100      	movs	r1, #0
 800eade:	f7ff fda8 	bl	800e632 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	333c      	adds	r3, #60	@ 0x3c
 800eae6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800eaea:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7ff fd37 	bl	800e562 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	333c      	adds	r3, #60	@ 0x3c
 800eaf8:	4921      	ldr	r1, [pc, #132]	@ (800eb80 <sync_fs+0xd8>)
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fd4c 	bl	800e598 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	333c      	adds	r3, #60	@ 0x3c
 800eb04:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800eb08:	491e      	ldr	r1, [pc, #120]	@ (800eb84 <sync_fs+0xdc>)
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7ff fd44 	bl	800e598 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	333c      	adds	r3, #60	@ 0x3c
 800eb14:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	699b      	ldr	r3, [r3, #24]
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4610      	mov	r0, r2
 800eb20:	f7ff fd3a 	bl	800e598 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	333c      	adds	r3, #60	@ 0x3c
 800eb28:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	695b      	ldr	r3, [r3, #20]
 800eb30:	4619      	mov	r1, r3
 800eb32:	4610      	mov	r0, r2
 800eb34:	f7ff fd30 	bl	800e598 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb3c:	1c5a      	adds	r2, r3, #1
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	7858      	ldrb	r0, [r3, #1]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb50:	2301      	movs	r3, #1
 800eb52:	f7ff fc8d 	bl	800e470 <disk_write>
			fs->fsi_flag = 0;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	785b      	ldrb	r3, [r3, #1]
 800eb60:	2200      	movs	r2, #0
 800eb62:	2100      	movs	r1, #0
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7ff fca3 	bl	800e4b0 <disk_ioctl>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d001      	beq.n	800eb74 <sync_fs+0xcc>
 800eb70:	2301      	movs	r3, #1
 800eb72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	41615252 	.word	0x41615252
 800eb84:	61417272 	.word	0x61417272

0800eb88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	3b02      	subs	r3, #2
 800eb96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	3b02      	subs	r3, #2
 800eb9e:	683a      	ldr	r2, [r7, #0]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d301      	bcc.n	800eba8 <clust2sect+0x20>
 800eba4:	2300      	movs	r3, #0
 800eba6:	e008      	b.n	800ebba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	895b      	ldrh	r3, [r3, #10]
 800ebac:	461a      	mov	r2, r3
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	fb03 f202 	mul.w	r2, r3, r2
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebb8:	4413      	add	r3, r2
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	370c      	adds	r7, #12
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr

0800ebc6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b086      	sub	sp, #24
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d904      	bls.n	800ebe6 <get_fat+0x20>
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	6a1b      	ldr	r3, [r3, #32]
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d302      	bcc.n	800ebec <get_fat+0x26>
		val = 1;	/* Internal error */
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	617b      	str	r3, [r7, #20]
 800ebea:	e0ba      	b.n	800ed62 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ebec:	f04f 33ff 	mov.w	r3, #4294967295
 800ebf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	2b03      	cmp	r3, #3
 800ebf8:	f000 8082 	beq.w	800ed00 <get_fat+0x13a>
 800ebfc:	2b03      	cmp	r3, #3
 800ebfe:	f300 80a6 	bgt.w	800ed4e <get_fat+0x188>
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d002      	beq.n	800ec0c <get_fat+0x46>
 800ec06:	2b02      	cmp	r3, #2
 800ec08:	d055      	beq.n	800ecb6 <get_fat+0xf0>
 800ec0a:	e0a0      	b.n	800ed4e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	60fb      	str	r3, [r7, #12]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	085b      	lsrs	r3, r3, #1
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	4413      	add	r3, r2
 800ec18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	899b      	ldrh	r3, [r3, #12]
 800ec22:	4619      	mov	r1, r3
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec2a:	4413      	add	r3, r2
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	6938      	ldr	r0, [r7, #16]
 800ec30:	f7ff ff0c 	bl	800ea4c <move_window>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f040 808c 	bne.w	800ed54 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	60fa      	str	r2, [r7, #12]
 800ec42:	693a      	ldr	r2, [r7, #16]
 800ec44:	8992      	ldrh	r2, [r2, #12]
 800ec46:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec4a:	fb01 f202 	mul.w	r2, r1, r2
 800ec4e:	1a9b      	subs	r3, r3, r2
 800ec50:	693a      	ldr	r2, [r7, #16]
 800ec52:	4413      	add	r3, r2
 800ec54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ec58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	899b      	ldrh	r3, [r3, #12]
 800ec62:	4619      	mov	r1, r3
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec6a:	4413      	add	r3, r2
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	6938      	ldr	r0, [r7, #16]
 800ec70:	f7ff feec 	bl	800ea4c <move_window>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d16e      	bne.n	800ed58 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	899b      	ldrh	r3, [r3, #12]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec86:	fb01 f202 	mul.w	r2, r1, r2
 800ec8a:	1a9b      	subs	r3, r3, r2
 800ec8c:	693a      	ldr	r2, [r7, #16]
 800ec8e:	4413      	add	r3, r2
 800ec90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ec94:	021b      	lsls	r3, r3, #8
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d002      	beq.n	800ecac <get_fat+0xe6>
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	091b      	lsrs	r3, r3, #4
 800ecaa:	e002      	b.n	800ecb2 <get_fat+0xec>
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecb2:	617b      	str	r3, [r7, #20]
			break;
 800ecb4:	e055      	b.n	800ed62 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	899b      	ldrh	r3, [r3, #12]
 800ecbe:	085b      	lsrs	r3, r3, #1
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecca:	4413      	add	r3, r2
 800eccc:	4619      	mov	r1, r3
 800ecce:	6938      	ldr	r0, [r7, #16]
 800ecd0:	f7ff febc 	bl	800ea4c <move_window>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d140      	bne.n	800ed5c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	005b      	lsls	r3, r3, #1
 800ece4:	693a      	ldr	r2, [r7, #16]
 800ece6:	8992      	ldrh	r2, [r2, #12]
 800ece8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecec:	fb00 f202 	mul.w	r2, r0, r2
 800ecf0:	1a9b      	subs	r3, r3, r2
 800ecf2:	440b      	add	r3, r1
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff fbf9 	bl	800e4ec <ld_word>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	617b      	str	r3, [r7, #20]
			break;
 800ecfe:	e030      	b.n	800ed62 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	899b      	ldrh	r3, [r3, #12]
 800ed08:	089b      	lsrs	r3, r3, #2
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed14:	4413      	add	r3, r2
 800ed16:	4619      	mov	r1, r3
 800ed18:	6938      	ldr	r0, [r7, #16]
 800ed1a:	f7ff fe97 	bl	800ea4c <move_window>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d11d      	bne.n	800ed60 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	693a      	ldr	r2, [r7, #16]
 800ed30:	8992      	ldrh	r2, [r2, #12]
 800ed32:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed36:	fb00 f202 	mul.w	r2, r0, r2
 800ed3a:	1a9b      	subs	r3, r3, r2
 800ed3c:	440b      	add	r3, r1
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7ff fbec 	bl	800e51c <ld_dword>
 800ed44:	4603      	mov	r3, r0
 800ed46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ed4a:	617b      	str	r3, [r7, #20]
			break;
 800ed4c:	e009      	b.n	800ed62 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ed4e:	2301      	movs	r3, #1
 800ed50:	617b      	str	r3, [r7, #20]
 800ed52:	e006      	b.n	800ed62 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed54:	bf00      	nop
 800ed56:	e004      	b.n	800ed62 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed58:	bf00      	nop
 800ed5a:	e002      	b.n	800ed62 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed5c:	bf00      	nop
 800ed5e:	e000      	b.n	800ed62 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed60:	bf00      	nop
		}
	}

	return val;
 800ed62:	697b      	ldr	r3, [r7, #20]
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3718      	adds	r7, #24
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ed6c:	b590      	push	{r4, r7, lr}
 800ed6e:	b089      	sub	sp, #36	@ 0x24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ed78:	2302      	movs	r3, #2
 800ed7a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	f240 8109 	bls.w	800ef96 <put_fat+0x22a>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6a1b      	ldr	r3, [r3, #32]
 800ed88:	68ba      	ldr	r2, [r7, #8]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	f080 8103 	bcs.w	800ef96 <put_fat+0x22a>
		switch (fs->fs_type) {
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	2b03      	cmp	r3, #3
 800ed96:	f000 80b6 	beq.w	800ef06 <put_fat+0x19a>
 800ed9a:	2b03      	cmp	r3, #3
 800ed9c:	f300 80fb 	bgt.w	800ef96 <put_fat+0x22a>
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d003      	beq.n	800edac <put_fat+0x40>
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	f000 8083 	beq.w	800eeb0 <put_fat+0x144>
 800edaa:	e0f4      	b.n	800ef96 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	61bb      	str	r3, [r7, #24]
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	085b      	lsrs	r3, r3, #1
 800edb4:	69ba      	ldr	r2, [r7, #24]
 800edb6:	4413      	add	r3, r2
 800edb8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	899b      	ldrh	r3, [r3, #12]
 800edc2:	4619      	mov	r1, r3
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800edca:	4413      	add	r3, r2
 800edcc:	4619      	mov	r1, r3
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f7ff fe3c 	bl	800ea4c <move_window>
 800edd4:	4603      	mov	r3, r0
 800edd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edd8:	7ffb      	ldrb	r3, [r7, #31]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	f040 80d4 	bne.w	800ef88 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	61ba      	str	r2, [r7, #24]
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	8992      	ldrh	r2, [r2, #12]
 800edf0:	fbb3 f0f2 	udiv	r0, r3, r2
 800edf4:	fb00 f202 	mul.w	r2, r0, r2
 800edf8:	1a9b      	subs	r3, r3, r2
 800edfa:	440b      	add	r3, r1
 800edfc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	f003 0301 	and.w	r3, r3, #1
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d00d      	beq.n	800ee24 <put_fat+0xb8>
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	b25b      	sxtb	r3, r3
 800ee0e:	f003 030f 	and.w	r3, r3, #15
 800ee12:	b25a      	sxtb	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	011b      	lsls	r3, r3, #4
 800ee1a:	b25b      	sxtb	r3, r3
 800ee1c:	4313      	orrs	r3, r2
 800ee1e:	b25b      	sxtb	r3, r3
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	e001      	b.n	800ee28 <put_fat+0xbc>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	899b      	ldrh	r3, [r3, #12]
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee42:	4413      	add	r3, r2
 800ee44:	4619      	mov	r1, r3
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f7ff fe00 	bl	800ea4c <move_window>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee50:	7ffb      	ldrb	r3, [r7, #31]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f040 809a 	bne.w	800ef8c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	899b      	ldrh	r3, [r3, #12]
 800ee62:	461a      	mov	r2, r3
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee6a:	fb00 f202 	mul.w	r2, r0, r2
 800ee6e:	1a9b      	subs	r3, r3, r2
 800ee70:	440b      	add	r3, r1
 800ee72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	f003 0301 	and.w	r3, r3, #1
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d003      	beq.n	800ee86 <put_fat+0x11a>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	091b      	lsrs	r3, r3, #4
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	e00e      	b.n	800eea4 <put_fat+0x138>
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	b25b      	sxtb	r3, r3
 800ee8c:	f023 030f 	bic.w	r3, r3, #15
 800ee90:	b25a      	sxtb	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	0a1b      	lsrs	r3, r3, #8
 800ee96:	b25b      	sxtb	r3, r3
 800ee98:	f003 030f 	and.w	r3, r3, #15
 800ee9c:	b25b      	sxtb	r3, r3
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	b25b      	sxtb	r3, r3
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	70da      	strb	r2, [r3, #3]
			break;
 800eeae:	e072      	b.n	800ef96 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	899b      	ldrh	r3, [r3, #12]
 800eeb8:	085b      	lsrs	r3, r3, #1
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	4619      	mov	r1, r3
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	fbb3 f3f1 	udiv	r3, r3, r1
 800eec4:	4413      	add	r3, r2
 800eec6:	4619      	mov	r1, r3
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f7ff fdbf 	bl	800ea4c <move_window>
 800eece:	4603      	mov	r3, r0
 800eed0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eed2:	7ffb      	ldrb	r3, [r7, #31]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d15b      	bne.n	800ef90 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	005b      	lsls	r3, r3, #1
 800eee2:	68fa      	ldr	r2, [r7, #12]
 800eee4:	8992      	ldrh	r2, [r2, #12]
 800eee6:	fbb3 f0f2 	udiv	r0, r3, r2
 800eeea:	fb00 f202 	mul.w	r2, r0, r2
 800eeee:	1a9b      	subs	r3, r3, r2
 800eef0:	440b      	add	r3, r1
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	b292      	uxth	r2, r2
 800eef6:	4611      	mov	r1, r2
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff fb32 	bl	800e562 <st_word>
			fs->wflag = 1;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2201      	movs	r2, #1
 800ef02:	70da      	strb	r2, [r3, #3]
			break;
 800ef04:	e047      	b.n	800ef96 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	899b      	ldrh	r3, [r3, #12]
 800ef0e:	089b      	lsrs	r3, r3, #2
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	4619      	mov	r1, r3
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef1a:	4413      	add	r3, r2
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f7ff fd94 	bl	800ea4c <move_window>
 800ef24:	4603      	mov	r3, r0
 800ef26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef28:	7ffb      	ldrb	r3, [r7, #31]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d132      	bne.n	800ef94 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	68fa      	ldr	r2, [r7, #12]
 800ef40:	8992      	ldrh	r2, [r2, #12]
 800ef42:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef46:	fb00 f202 	mul.w	r2, r0, r2
 800ef4a:	1a9b      	subs	r3, r3, r2
 800ef4c:	440b      	add	r3, r1
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7ff fae4 	bl	800e51c <ld_dword>
 800ef54:	4603      	mov	r3, r0
 800ef56:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ef5a:	4323      	orrs	r3, r4
 800ef5c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	8992      	ldrh	r2, [r2, #12]
 800ef6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef70:	fb00 f202 	mul.w	r2, r0, r2
 800ef74:	1a9b      	subs	r3, r3, r2
 800ef76:	440b      	add	r3, r1
 800ef78:	6879      	ldr	r1, [r7, #4]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7ff fb0c 	bl	800e598 <st_dword>
			fs->wflag = 1;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2201      	movs	r2, #1
 800ef84:	70da      	strb	r2, [r3, #3]
			break;
 800ef86:	e006      	b.n	800ef96 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ef88:	bf00      	nop
 800ef8a:	e004      	b.n	800ef96 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ef8c:	bf00      	nop
 800ef8e:	e002      	b.n	800ef96 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ef90:	bf00      	nop
 800ef92:	e000      	b.n	800ef96 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ef94:	bf00      	nop
		}
	}
	return res;
 800ef96:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3724      	adds	r7, #36	@ 0x24
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd90      	pop	{r4, r7, pc}

0800efa0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b088      	sub	sp, #32
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800efac:	2300      	movs	r3, #0
 800efae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d904      	bls.n	800efc6 <remove_chain+0x26>
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	6a1b      	ldr	r3, [r3, #32]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d301      	bcc.n	800efca <remove_chain+0x2a>
 800efc6:	2302      	movs	r3, #2
 800efc8:	e04b      	b.n	800f062 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00c      	beq.n	800efea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800efd0:	f04f 32ff 	mov.w	r2, #4294967295
 800efd4:	6879      	ldr	r1, [r7, #4]
 800efd6:	69b8      	ldr	r0, [r7, #24]
 800efd8:	f7ff fec8 	bl	800ed6c <put_fat>
 800efdc:	4603      	mov	r3, r0
 800efde:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800efe0:	7ffb      	ldrb	r3, [r7, #31]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d001      	beq.n	800efea <remove_chain+0x4a>
 800efe6:	7ffb      	ldrb	r3, [r7, #31]
 800efe8:	e03b      	b.n	800f062 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800efea:	68b9      	ldr	r1, [r7, #8]
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f7ff fdea 	bl	800ebc6 <get_fat>
 800eff2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d031      	beq.n	800f05e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	2b01      	cmp	r3, #1
 800effe:	d101      	bne.n	800f004 <remove_chain+0x64>
 800f000:	2302      	movs	r3, #2
 800f002:	e02e      	b.n	800f062 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00a:	d101      	bne.n	800f010 <remove_chain+0x70>
 800f00c:	2301      	movs	r3, #1
 800f00e:	e028      	b.n	800f062 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f010:	2200      	movs	r2, #0
 800f012:	68b9      	ldr	r1, [r7, #8]
 800f014:	69b8      	ldr	r0, [r7, #24]
 800f016:	f7ff fea9 	bl	800ed6c <put_fat>
 800f01a:	4603      	mov	r3, r0
 800f01c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f01e:	7ffb      	ldrb	r3, [r7, #31]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d001      	beq.n	800f028 <remove_chain+0x88>
 800f024:	7ffb      	ldrb	r3, [r7, #31]
 800f026:	e01c      	b.n	800f062 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	699a      	ldr	r2, [r3, #24]
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	6a1b      	ldr	r3, [r3, #32]
 800f030:	3b02      	subs	r3, #2
 800f032:	429a      	cmp	r2, r3
 800f034:	d20b      	bcs.n	800f04e <remove_chain+0xae>
			fs->free_clst++;
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	1c5a      	adds	r2, r3, #1
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	791b      	ldrb	r3, [r3, #4]
 800f044:	f043 0301 	orr.w	r3, r3, #1
 800f048:	b2da      	uxtb	r2, r3
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	6a1b      	ldr	r3, [r3, #32]
 800f056:	68ba      	ldr	r2, [r7, #8]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d3c6      	bcc.n	800efea <remove_chain+0x4a>
 800f05c:	e000      	b.n	800f060 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f05e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3720      	adds	r7, #32
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b088      	sub	sp, #32
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d10d      	bne.n	800f09c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	695b      	ldr	r3, [r3, #20]
 800f084:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d004      	beq.n	800f096 <create_chain+0x2c>
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	6a1b      	ldr	r3, [r3, #32]
 800f090:	69ba      	ldr	r2, [r7, #24]
 800f092:	429a      	cmp	r2, r3
 800f094:	d31b      	bcc.n	800f0ce <create_chain+0x64>
 800f096:	2301      	movs	r3, #1
 800f098:	61bb      	str	r3, [r7, #24]
 800f09a:	e018      	b.n	800f0ce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f09c:	6839      	ldr	r1, [r7, #0]
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7ff fd91 	bl	800ebc6 <get_fat>
 800f0a4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d801      	bhi.n	800f0b0 <create_chain+0x46>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e070      	b.n	800f192 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b6:	d101      	bne.n	800f0bc <create_chain+0x52>
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	e06a      	b.n	800f192 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	6a1b      	ldr	r3, [r3, #32]
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d201      	bcs.n	800f0ca <create_chain+0x60>
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	e063      	b.n	800f192 <create_chain+0x128>
		scl = clst;
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	6a1b      	ldr	r3, [r3, #32]
 800f0dc:	69fa      	ldr	r2, [r7, #28]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d307      	bcc.n	800f0f2 <create_chain+0x88>
				ncl = 2;
 800f0e2:	2302      	movs	r3, #2
 800f0e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f0e6:	69fa      	ldr	r2, [r7, #28]
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d901      	bls.n	800f0f2 <create_chain+0x88>
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	e04f      	b.n	800f192 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f0f2:	69f9      	ldr	r1, [r7, #28]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7ff fd66 	bl	800ebc6 <get_fat>
 800f0fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00e      	beq.n	800f120 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2b01      	cmp	r3, #1
 800f106:	d003      	beq.n	800f110 <create_chain+0xa6>
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f10e:	d101      	bne.n	800f114 <create_chain+0xaa>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	e03e      	b.n	800f192 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f114:	69fa      	ldr	r2, [r7, #28]
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d1da      	bne.n	800f0d2 <create_chain+0x68>
 800f11c:	2300      	movs	r3, #0
 800f11e:	e038      	b.n	800f192 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f120:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f122:	f04f 32ff 	mov.w	r2, #4294967295
 800f126:	69f9      	ldr	r1, [r7, #28]
 800f128:	6938      	ldr	r0, [r7, #16]
 800f12a:	f7ff fe1f 	bl	800ed6c <put_fat>
 800f12e:	4603      	mov	r3, r0
 800f130:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f132:	7dfb      	ldrb	r3, [r7, #23]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d109      	bne.n	800f14c <create_chain+0xe2>
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d006      	beq.n	800f14c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f13e:	69fa      	ldr	r2, [r7, #28]
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6938      	ldr	r0, [r7, #16]
 800f144:	f7ff fe12 	bl	800ed6c <put_fat>
 800f148:	4603      	mov	r3, r0
 800f14a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f14c:	7dfb      	ldrb	r3, [r7, #23]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d116      	bne.n	800f180 <create_chain+0x116>
		fs->last_clst = ncl;
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	69fa      	ldr	r2, [r7, #28]
 800f156:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	699a      	ldr	r2, [r3, #24]
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	6a1b      	ldr	r3, [r3, #32]
 800f160:	3b02      	subs	r3, #2
 800f162:	429a      	cmp	r2, r3
 800f164:	d804      	bhi.n	800f170 <create_chain+0x106>
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	699b      	ldr	r3, [r3, #24]
 800f16a:	1e5a      	subs	r2, r3, #1
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	791b      	ldrb	r3, [r3, #4]
 800f174:	f043 0301 	orr.w	r3, r3, #1
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	711a      	strb	r2, [r3, #4]
 800f17e:	e007      	b.n	800f190 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f180:	7dfb      	ldrb	r3, [r7, #23]
 800f182:	2b01      	cmp	r3, #1
 800f184:	d102      	bne.n	800f18c <create_chain+0x122>
 800f186:	f04f 33ff 	mov.w	r3, #4294967295
 800f18a:	e000      	b.n	800f18e <create_chain+0x124>
 800f18c:	2301      	movs	r3, #1
 800f18e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f190:	69fb      	ldr	r3, [r7, #28]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3720      	adds	r7, #32
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}

0800f19a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b087      	sub	sp, #28
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ae:	3304      	adds	r3, #4
 800f1b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	899b      	ldrh	r3, [r3, #12]
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1be:	68fa      	ldr	r2, [r7, #12]
 800f1c0:	8952      	ldrh	r2, [r2, #10]
 800f1c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1c6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	1d1a      	adds	r2, r3, #4
 800f1cc:	613a      	str	r2, [r7, #16]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d101      	bne.n	800f1dc <clmt_clust+0x42>
 800f1d8:	2300      	movs	r3, #0
 800f1da:	e010      	b.n	800f1fe <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f1dc:	697a      	ldr	r2, [r7, #20]
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d307      	bcc.n	800f1f4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f1e4:	697a      	ldr	r2, [r7, #20]
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	1ad3      	subs	r3, r2, r3
 800f1ea:	617b      	str	r3, [r7, #20]
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	3304      	adds	r3, #4
 800f1f0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f1f2:	e7e9      	b.n	800f1c8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f1f4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	4413      	add	r3, r2
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	371c      	adds	r7, #28
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr

0800f20a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b086      	sub	sp, #24
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
 800f212:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f220:	d204      	bcs.n	800f22c <dir_sdi+0x22>
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	f003 031f 	and.w	r3, r3, #31
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d001      	beq.n	800f230 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f22c:	2302      	movs	r3, #2
 800f22e:	e071      	b.n	800f314 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d106      	bne.n	800f250 <dir_sdi+0x46>
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	2b02      	cmp	r3, #2
 800f248:	d902      	bls.n	800f250 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f24e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d10c      	bne.n	800f270 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	095b      	lsrs	r3, r3, #5
 800f25a:	693a      	ldr	r2, [r7, #16]
 800f25c:	8912      	ldrh	r2, [r2, #8]
 800f25e:	4293      	cmp	r3, r2
 800f260:	d301      	bcc.n	800f266 <dir_sdi+0x5c>
 800f262:	2302      	movs	r3, #2
 800f264:	e056      	b.n	800f314 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	61da      	str	r2, [r3, #28]
 800f26e:	e02d      	b.n	800f2cc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	895b      	ldrh	r3, [r3, #10]
 800f274:	461a      	mov	r2, r3
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	899b      	ldrh	r3, [r3, #12]
 800f27a:	fb02 f303 	mul.w	r3, r2, r3
 800f27e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f280:	e019      	b.n	800f2b6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6979      	ldr	r1, [r7, #20]
 800f286:	4618      	mov	r0, r3
 800f288:	f7ff fc9d 	bl	800ebc6 <get_fat>
 800f28c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f294:	d101      	bne.n	800f29a <dir_sdi+0x90>
 800f296:	2301      	movs	r3, #1
 800f298:	e03c      	b.n	800f314 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d904      	bls.n	800f2aa <dir_sdi+0xa0>
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	6a1b      	ldr	r3, [r3, #32]
 800f2a4:	697a      	ldr	r2, [r7, #20]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d301      	bcc.n	800f2ae <dir_sdi+0xa4>
 800f2aa:	2302      	movs	r3, #2
 800f2ac:	e032      	b.n	800f314 <dir_sdi+0x10a>
			ofs -= csz;
 800f2ae:	683a      	ldr	r2, [r7, #0]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f2b6:	683a      	ldr	r2, [r7, #0]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d2e1      	bcs.n	800f282 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f2be:	6979      	ldr	r1, [r7, #20]
 800f2c0:	6938      	ldr	r0, [r7, #16]
 800f2c2:	f7ff fc61 	bl	800eb88 <clust2sect>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	697a      	ldr	r2, [r7, #20]
 800f2d0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	69db      	ldr	r3, [r3, #28]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <dir_sdi+0xd4>
 800f2da:	2302      	movs	r3, #2
 800f2dc:	e01a      	b.n	800f314 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	69da      	ldr	r2, [r3, #28]
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	899b      	ldrh	r3, [r3, #12]
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2ee:	441a      	add	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	899b      	ldrh	r3, [r3, #12]
 800f2fe:	461a      	mov	r2, r3
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	fbb3 f0f2 	udiv	r0, r3, r2
 800f306:	fb00 f202 	mul.w	r2, r0, r2
 800f30a:	1a9b      	subs	r3, r3, r2
 800f30c:	18ca      	adds	r2, r1, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3718      	adds	r7, #24
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b086      	sub	sp, #24
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	695b      	ldr	r3, [r3, #20]
 800f330:	3320      	adds	r3, #32
 800f332:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	69db      	ldr	r3, [r3, #28]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d003      	beq.n	800f344 <dir_next+0x28>
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f342:	d301      	bcc.n	800f348 <dir_next+0x2c>
 800f344:	2304      	movs	r3, #4
 800f346:	e0bb      	b.n	800f4c0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	899b      	ldrh	r3, [r3, #12]
 800f34c:	461a      	mov	r2, r3
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	fbb3 f1f2 	udiv	r1, r3, r2
 800f354:	fb01 f202 	mul.w	r2, r1, r2
 800f358:	1a9b      	subs	r3, r3, r2
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f040 809d 	bne.w	800f49a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	69db      	ldr	r3, [r3, #28]
 800f364:	1c5a      	adds	r2, r3, #1
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	699b      	ldr	r3, [r3, #24]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d10b      	bne.n	800f38a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	095b      	lsrs	r3, r3, #5
 800f376:	68fa      	ldr	r2, [r7, #12]
 800f378:	8912      	ldrh	r2, [r2, #8]
 800f37a:	4293      	cmp	r3, r2
 800f37c:	f0c0 808d 	bcc.w	800f49a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	61da      	str	r2, [r3, #28]
 800f386:	2304      	movs	r3, #4
 800f388:	e09a      	b.n	800f4c0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	899b      	ldrh	r3, [r3, #12]
 800f38e:	461a      	mov	r2, r3
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	fbb3 f3f2 	udiv	r3, r3, r2
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	8952      	ldrh	r2, [r2, #10]
 800f39a:	3a01      	subs	r2, #1
 800f39c:	4013      	ands	r3, r2
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d17b      	bne.n	800f49a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	699b      	ldr	r3, [r3, #24]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	4610      	mov	r0, r2
 800f3ac:	f7ff fc0b 	bl	800ebc6 <get_fat>
 800f3b0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d801      	bhi.n	800f3bc <dir_next+0xa0>
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	e081      	b.n	800f4c0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3c2:	d101      	bne.n	800f3c8 <dir_next+0xac>
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	e07b      	b.n	800f4c0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6a1b      	ldr	r3, [r3, #32]
 800f3cc:	697a      	ldr	r2, [r7, #20]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d359      	bcc.n	800f486 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d104      	bne.n	800f3e2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	61da      	str	r2, [r3, #28]
 800f3de:	2304      	movs	r3, #4
 800f3e0:	e06e      	b.n	800f4c0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	699b      	ldr	r3, [r3, #24]
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	4610      	mov	r0, r2
 800f3ec:	f7ff fe3d 	bl	800f06a <create_chain>
 800f3f0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d101      	bne.n	800f3fc <dir_next+0xe0>
 800f3f8:	2307      	movs	r3, #7
 800f3fa:	e061      	b.n	800f4c0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d101      	bne.n	800f406 <dir_next+0xea>
 800f402:	2302      	movs	r3, #2
 800f404:	e05c      	b.n	800f4c0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f40c:	d101      	bne.n	800f412 <dir_next+0xf6>
 800f40e:	2301      	movs	r3, #1
 800f410:	e056      	b.n	800f4c0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f412:	68f8      	ldr	r0, [r7, #12]
 800f414:	f7ff fad6 	bl	800e9c4 <sync_window>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d001      	beq.n	800f422 <dir_next+0x106>
 800f41e:	2301      	movs	r3, #1
 800f420:	e04e      	b.n	800f4c0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	899b      	ldrh	r3, [r3, #12]
 800f42c:	461a      	mov	r2, r3
 800f42e:	2100      	movs	r1, #0
 800f430:	f7ff f8ff 	bl	800e632 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f434:	2300      	movs	r3, #0
 800f436:	613b      	str	r3, [r7, #16]
 800f438:	6979      	ldr	r1, [r7, #20]
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f7ff fba4 	bl	800eb88 <clust2sect>
 800f440:	4602      	mov	r2, r0
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	639a      	str	r2, [r3, #56]	@ 0x38
 800f446:	e012      	b.n	800f46e <dir_next+0x152>
						fs->wflag = 1;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2201      	movs	r2, #1
 800f44c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f7ff fab8 	bl	800e9c4 <sync_window>
 800f454:	4603      	mov	r3, r0
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <dir_next+0x142>
 800f45a:	2301      	movs	r3, #1
 800f45c:	e030      	b.n	800f4c0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	3301      	adds	r3, #1
 800f462:	613b      	str	r3, [r7, #16]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	639a      	str	r2, [r3, #56]	@ 0x38
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	895b      	ldrh	r3, [r3, #10]
 800f472:	461a      	mov	r2, r3
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	4293      	cmp	r3, r2
 800f478:	d3e6      	bcc.n	800f448 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	1ad2      	subs	r2, r2, r3
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	697a      	ldr	r2, [r7, #20]
 800f48a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f48c:	6979      	ldr	r1, [r7, #20]
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	f7ff fb7a 	bl	800eb88 <clust2sect>
 800f494:	4602      	mov	r2, r0
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	68ba      	ldr	r2, [r7, #8]
 800f49e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	899b      	ldrh	r3, [r3, #12]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800f4b2:	fb00 f202 	mul.w	r2, r0, r2
 800f4b6:	1a9b      	subs	r3, r3, r2
 800f4b8:	18ca      	adds	r2, r1, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3718      	adds	r7, #24
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f4d8:	2100      	movs	r1, #0
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7ff fe95 	bl	800f20a <dir_sdi>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f4e4:	7dfb      	ldrb	r3, [r7, #23]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d12b      	bne.n	800f542 <dir_alloc+0x7a>
		n = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	69db      	ldr	r3, [r3, #28]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f7ff faa9 	bl	800ea4c <move_window>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f4fe:	7dfb      	ldrb	r3, [r7, #23]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d11d      	bne.n	800f540 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6a1b      	ldr	r3, [r3, #32]
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	2be5      	cmp	r3, #229	@ 0xe5
 800f50c:	d004      	beq.n	800f518 <dir_alloc+0x50>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6a1b      	ldr	r3, [r3, #32]
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d107      	bne.n	800f528 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	3301      	adds	r3, #1
 800f51c:	613b      	str	r3, [r7, #16]
 800f51e:	693a      	ldr	r2, [r7, #16]
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	429a      	cmp	r2, r3
 800f524:	d102      	bne.n	800f52c <dir_alloc+0x64>
 800f526:	e00c      	b.n	800f542 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f528:	2300      	movs	r3, #0
 800f52a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f52c:	2101      	movs	r1, #1
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7ff fef4 	bl	800f31c <dir_next>
 800f534:	4603      	mov	r3, r0
 800f536:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f538:	7dfb      	ldrb	r3, [r7, #23]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d0d7      	beq.n	800f4ee <dir_alloc+0x26>
 800f53e:	e000      	b.n	800f542 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f540:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f542:	7dfb      	ldrb	r3, [r7, #23]
 800f544:	2b04      	cmp	r3, #4
 800f546:	d101      	bne.n	800f54c <dir_alloc+0x84>
 800f548:	2307      	movs	r3, #7
 800f54a:	75fb      	strb	r3, [r7, #23]
	return res;
 800f54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3718      	adds	r7, #24
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b084      	sub	sp, #16
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
 800f55e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	331a      	adds	r3, #26
 800f564:	4618      	mov	r0, r3
 800f566:	f7fe ffc1 	bl	800e4ec <ld_word>
 800f56a:	4603      	mov	r3, r0
 800f56c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	2b03      	cmp	r3, #3
 800f574:	d109      	bne.n	800f58a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	3314      	adds	r3, #20
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fe ffb6 	bl	800e4ec <ld_word>
 800f580:	4603      	mov	r3, r0
 800f582:	041b      	lsls	r3, r3, #16
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	4313      	orrs	r3, r2
 800f588:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f58a:	68fb      	ldr	r3, [r7, #12]
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	331a      	adds	r3, #26
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	b292      	uxth	r2, r2
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fe ffd9 	bl	800e562 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	2b03      	cmp	r3, #3
 800f5b6:	d109      	bne.n	800f5cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	f103 0214 	add.w	r2, r3, #20
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	0c1b      	lsrs	r3, r3, #16
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	4610      	mov	r0, r2
 800f5c8:	f7fe ffcb 	bl	800e562 <st_word>
	}
}
 800f5cc:	bf00      	nop
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f5d4:	b590      	push	{r4, r7, lr}
 800f5d6:	b087      	sub	sp, #28
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	331a      	adds	r3, #26
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fe ff82 	bl	800e4ec <ld_word>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d001      	beq.n	800f5f2 <cmp_lfn+0x1e>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e059      	b.n	800f6a6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5fa:	1e5a      	subs	r2, r3, #1
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	005b      	lsls	r3, r3, #1
 800f600:	4413      	add	r3, r2
 800f602:	009b      	lsls	r3, r3, #2
 800f604:	4413      	add	r3, r2
 800f606:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f608:	2301      	movs	r3, #1
 800f60a:	81fb      	strh	r3, [r7, #14]
 800f60c:	2300      	movs	r3, #0
 800f60e:	613b      	str	r3, [r7, #16]
 800f610:	e033      	b.n	800f67a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f612:	4a27      	ldr	r2, [pc, #156]	@ (800f6b0 <cmp_lfn+0xdc>)
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	4413      	add	r3, r2
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	461a      	mov	r2, r3
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	4413      	add	r3, r2
 800f620:	4618      	mov	r0, r3
 800f622:	f7fe ff63 	bl	800e4ec <ld_word>
 800f626:	4603      	mov	r3, r0
 800f628:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f62a:	89fb      	ldrh	r3, [r7, #14]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d01a      	beq.n	800f666 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	2bfe      	cmp	r3, #254	@ 0xfe
 800f634:	d812      	bhi.n	800f65c <cmp_lfn+0x88>
 800f636:	89bb      	ldrh	r3, [r7, #12]
 800f638:	4618      	mov	r0, r3
 800f63a:	f002 fa9b 	bl	8011b74 <ff_wtoupper>
 800f63e:	4603      	mov	r3, r0
 800f640:	461c      	mov	r4, r3
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	1c5a      	adds	r2, r3, #1
 800f646:	617a      	str	r2, [r7, #20]
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	4413      	add	r3, r2
 800f64e:	881b      	ldrh	r3, [r3, #0]
 800f650:	4618      	mov	r0, r3
 800f652:	f002 fa8f 	bl	8011b74 <ff_wtoupper>
 800f656:	4603      	mov	r3, r0
 800f658:	429c      	cmp	r4, r3
 800f65a:	d001      	beq.n	800f660 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f65c:	2300      	movs	r3, #0
 800f65e:	e022      	b.n	800f6a6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800f660:	89bb      	ldrh	r3, [r7, #12]
 800f662:	81fb      	strh	r3, [r7, #14]
 800f664:	e006      	b.n	800f674 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f666:	89bb      	ldrh	r3, [r7, #12]
 800f668:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d001      	beq.n	800f674 <cmp_lfn+0xa0>
 800f670:	2300      	movs	r3, #0
 800f672:	e018      	b.n	800f6a6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	3301      	adds	r3, #1
 800f678:	613b      	str	r3, [r7, #16]
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	2b0c      	cmp	r3, #12
 800f67e:	d9c8      	bls.n	800f612 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d00b      	beq.n	800f6a4 <cmp_lfn+0xd0>
 800f68c:	89fb      	ldrh	r3, [r7, #14]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d008      	beq.n	800f6a4 <cmp_lfn+0xd0>
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	4413      	add	r3, r2
 800f69a:	881b      	ldrh	r3, [r3, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <cmp_lfn+0xd0>
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	e000      	b.n	800f6a6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f6a4:	2301      	movs	r3, #1
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	371c      	adds	r7, #28
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd90      	pop	{r4, r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	08012128 	.word	0x08012128

0800f6b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b088      	sub	sp, #32
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	4611      	mov	r1, r2
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	71fb      	strb	r3, [r7, #7]
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	330d      	adds	r3, #13
 800f6ce:	79ba      	ldrb	r2, [r7, #6]
 800f6d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	330b      	adds	r3, #11
 800f6d6:	220f      	movs	r2, #15
 800f6d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	330c      	adds	r3, #12
 800f6de:	2200      	movs	r2, #0
 800f6e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	331a      	adds	r3, #26
 800f6e6:	2100      	movs	r1, #0
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fe ff3a 	bl	800e562 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f6ee:	79fb      	ldrb	r3, [r7, #7]
 800f6f0:	1e5a      	subs	r2, r3, #1
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	4413      	add	r3, r2
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	4413      	add	r3, r2
 800f6fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f6fe:	2300      	movs	r3, #0
 800f700:	82fb      	strh	r3, [r7, #22]
 800f702:	2300      	movs	r3, #0
 800f704:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f706:	8afb      	ldrh	r3, [r7, #22]
 800f708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d007      	beq.n	800f720 <put_lfn+0x6c>
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	61fa      	str	r2, [r7, #28]
 800f716:	005b      	lsls	r3, r3, #1
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	4413      	add	r3, r2
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f720:	4a17      	ldr	r2, [pc, #92]	@ (800f780 <put_lfn+0xcc>)
 800f722:	69bb      	ldr	r3, [r7, #24]
 800f724:	4413      	add	r3, r2
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	461a      	mov	r2, r3
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	4413      	add	r3, r2
 800f72e:	8afa      	ldrh	r2, [r7, #22]
 800f730:	4611      	mov	r1, r2
 800f732:	4618      	mov	r0, r3
 800f734:	f7fe ff15 	bl	800e562 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f738:	8afb      	ldrh	r3, [r7, #22]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d102      	bne.n	800f744 <put_lfn+0x90>
 800f73e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f742:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	3301      	adds	r3, #1
 800f748:	61bb      	str	r3, [r7, #24]
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	2b0c      	cmp	r3, #12
 800f74e:	d9da      	bls.n	800f706 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f750:	8afb      	ldrh	r3, [r7, #22]
 800f752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f756:	4293      	cmp	r3, r2
 800f758:	d006      	beq.n	800f768 <put_lfn+0xb4>
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	005b      	lsls	r3, r3, #1
 800f75e:	68fa      	ldr	r2, [r7, #12]
 800f760:	4413      	add	r3, r2
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d103      	bne.n	800f770 <put_lfn+0xbc>
 800f768:	79fb      	ldrb	r3, [r7, #7]
 800f76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f76e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	79fa      	ldrb	r2, [r7, #7]
 800f774:	701a      	strb	r2, [r3, #0]
}
 800f776:	bf00      	nop
 800f778:	3720      	adds	r7, #32
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	08012128 	.word	0x08012128

0800f784 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b08c      	sub	sp, #48	@ 0x30
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
 800f790:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f792:	220b      	movs	r2, #11
 800f794:	68b9      	ldr	r1, [r7, #8]
 800f796:	68f8      	ldr	r0, [r7, #12]
 800f798:	f7fe ff2a 	bl	800e5f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	2b05      	cmp	r3, #5
 800f7a0:	d929      	bls.n	800f7f6 <gen_numname+0x72>
		sr = seq;
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f7a6:	e020      	b.n	800f7ea <gen_numname+0x66>
			wc = *lfn++;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	1c9a      	adds	r2, r3, #2
 800f7ac:	607a      	str	r2, [r7, #4]
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7b6:	e015      	b.n	800f7e4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	005a      	lsls	r2, r3, #1
 800f7bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f7be:	f003 0301 	and.w	r3, r3, #1
 800f7c2:	4413      	add	r3, r2
 800f7c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f7c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f7c8:	085b      	lsrs	r3, r3, #1
 800f7ca:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d003      	beq.n	800f7de <gen_numname+0x5a>
 800f7d6:	69fa      	ldr	r2, [r7, #28]
 800f7d8:	4b30      	ldr	r3, [pc, #192]	@ (800f89c <gen_numname+0x118>)
 800f7da:	4053      	eors	r3, r2
 800f7dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7e6:	2b0f      	cmp	r3, #15
 800f7e8:	d9e6      	bls.n	800f7b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	881b      	ldrh	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1da      	bne.n	800f7a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f7f6:	2307      	movs	r3, #7
 800f7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	f003 030f 	and.w	r3, r3, #15
 800f802:	b2db      	uxtb	r3, r3
 800f804:	3330      	adds	r3, #48	@ 0x30
 800f806:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800f80a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f80e:	2b39      	cmp	r3, #57	@ 0x39
 800f810:	d904      	bls.n	800f81c <gen_numname+0x98>
 800f812:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f816:	3307      	adds	r3, #7
 800f818:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800f81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81e:	1e5a      	subs	r2, r3, #1
 800f820:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f822:	3330      	adds	r3, #48	@ 0x30
 800f824:	443b      	add	r3, r7
 800f826:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f82a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	091b      	lsrs	r3, r3, #4
 800f832:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d1df      	bne.n	800f7fa <gen_numname+0x76>
	ns[i] = '~';
 800f83a:	f107 0214 	add.w	r2, r7, #20
 800f83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f840:	4413      	add	r3, r2
 800f842:	227e      	movs	r2, #126	@ 0x7e
 800f844:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f846:	2300      	movs	r3, #0
 800f848:	627b      	str	r3, [r7, #36]	@ 0x24
 800f84a:	e002      	b.n	800f852 <gen_numname+0xce>
 800f84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84e:	3301      	adds	r3, #1
 800f850:	627b      	str	r3, [r7, #36]	@ 0x24
 800f852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f856:	429a      	cmp	r2, r3
 800f858:	d205      	bcs.n	800f866 <gen_numname+0xe2>
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85e:	4413      	add	r3, r2
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	2b20      	cmp	r3, #32
 800f864:	d1f2      	bne.n	800f84c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f868:	2b07      	cmp	r3, #7
 800f86a:	d807      	bhi.n	800f87c <gen_numname+0xf8>
 800f86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f86e:	1c5a      	adds	r2, r3, #1
 800f870:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f872:	3330      	adds	r3, #48	@ 0x30
 800f874:	443b      	add	r3, r7
 800f876:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f87a:	e000      	b.n	800f87e <gen_numname+0xfa>
 800f87c:	2120      	movs	r1, #32
 800f87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	627a      	str	r2, [r7, #36]	@ 0x24
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	4413      	add	r3, r2
 800f888:	460a      	mov	r2, r1
 800f88a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f88e:	2b07      	cmp	r3, #7
 800f890:	d9e9      	bls.n	800f866 <gen_numname+0xe2>
}
 800f892:	bf00      	nop
 800f894:	bf00      	nop
 800f896:	3730      	adds	r7, #48	@ 0x30
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	00011021 	.word	0x00011021

0800f8a0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f8ac:	230b      	movs	r3, #11
 800f8ae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f8b0:	7bfb      	ldrb	r3, [r7, #15]
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	0852      	lsrs	r2, r2, #1
 800f8b6:	01db      	lsls	r3, r3, #7
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	b2da      	uxtb	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	1c59      	adds	r1, r3, #1
 800f8c0:	6079      	str	r1, [r7, #4]
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	3b01      	subs	r3, #1
 800f8cc:	60bb      	str	r3, [r7, #8]
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d1ed      	bne.n	800f8b0 <sum_sfn+0x10>
	return sum;
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3714      	adds	r7, #20
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e0:	4770      	bx	lr

0800f8e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b086      	sub	sp, #24
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7ff fc89 	bl	800f20a <dir_sdi>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f8fc:	7dfb      	ldrb	r3, [r7, #23]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <dir_find+0x24>
 800f902:	7dfb      	ldrb	r3, [r7, #23]
 800f904:	e0a9      	b.n	800fa5a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f906:	23ff      	movs	r3, #255	@ 0xff
 800f908:	753b      	strb	r3, [r7, #20]
 800f90a:	7d3b      	ldrb	r3, [r7, #20]
 800f90c:	757b      	strb	r3, [r7, #21]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f04f 32ff 	mov.w	r2, #4294967295
 800f914:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	69db      	ldr	r3, [r3, #28]
 800f91a:	4619      	mov	r1, r3
 800f91c:	6938      	ldr	r0, [r7, #16]
 800f91e:	f7ff f895 	bl	800ea4c <move_window>
 800f922:	4603      	mov	r3, r0
 800f924:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f926:	7dfb      	ldrb	r3, [r7, #23]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	f040 8090 	bne.w	800fa4e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f936:	7dbb      	ldrb	r3, [r7, #22]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d102      	bne.n	800f942 <dir_find+0x60>
 800f93c:	2304      	movs	r3, #4
 800f93e:	75fb      	strb	r3, [r7, #23]
 800f940:	e08a      	b.n	800fa58 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6a1b      	ldr	r3, [r3, #32]
 800f946:	330b      	adds	r3, #11
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f94e:	73fb      	strb	r3, [r7, #15]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	7bfa      	ldrb	r2, [r7, #15]
 800f954:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f956:	7dbb      	ldrb	r3, [r7, #22]
 800f958:	2be5      	cmp	r3, #229	@ 0xe5
 800f95a:	d007      	beq.n	800f96c <dir_find+0x8a>
 800f95c:	7bfb      	ldrb	r3, [r7, #15]
 800f95e:	f003 0308 	and.w	r3, r3, #8
 800f962:	2b00      	cmp	r3, #0
 800f964:	d009      	beq.n	800f97a <dir_find+0x98>
 800f966:	7bfb      	ldrb	r3, [r7, #15]
 800f968:	2b0f      	cmp	r3, #15
 800f96a:	d006      	beq.n	800f97a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f96c:	23ff      	movs	r3, #255	@ 0xff
 800f96e:	757b      	strb	r3, [r7, #21]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f04f 32ff 	mov.w	r2, #4294967295
 800f976:	631a      	str	r2, [r3, #48]	@ 0x30
 800f978:	e05e      	b.n	800fa38 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
 800f97c:	2b0f      	cmp	r3, #15
 800f97e:	d136      	bne.n	800f9ee <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d154      	bne.n	800fa38 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f98e:	7dbb      	ldrb	r3, [r7, #22]
 800f990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00d      	beq.n	800f9b4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6a1b      	ldr	r3, [r3, #32]
 800f99c:	7b5b      	ldrb	r3, [r3, #13]
 800f99e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f9a0:	7dbb      	ldrb	r3, [r7, #22]
 800f9a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9a6:	75bb      	strb	r3, [r7, #22]
 800f9a8:	7dbb      	ldrb	r3, [r7, #22]
 800f9aa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	695a      	ldr	r2, [r3, #20]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f9b4:	7dba      	ldrb	r2, [r7, #22]
 800f9b6:	7d7b      	ldrb	r3, [r7, #21]
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d115      	bne.n	800f9e8 <dir_find+0x106>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6a1b      	ldr	r3, [r3, #32]
 800f9c0:	330d      	adds	r3, #13
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	7d3a      	ldrb	r2, [r7, #20]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d10e      	bne.n	800f9e8 <dir_find+0x106>
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	691a      	ldr	r2, [r3, #16]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a1b      	ldr	r3, [r3, #32]
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	4610      	mov	r0, r2
 800f9d6:	f7ff fdfd 	bl	800f5d4 <cmp_lfn>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d003      	beq.n	800f9e8 <dir_find+0x106>
 800f9e0:	7d7b      	ldrb	r3, [r7, #21]
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	e000      	b.n	800f9ea <dir_find+0x108>
 800f9e8:	23ff      	movs	r3, #255	@ 0xff
 800f9ea:	757b      	strb	r3, [r7, #21]
 800f9ec:	e024      	b.n	800fa38 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f9ee:	7d7b      	ldrb	r3, [r7, #21]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d109      	bne.n	800fa08 <dir_find+0x126>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6a1b      	ldr	r3, [r3, #32]
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7ff ff51 	bl	800f8a0 <sum_sfn>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	461a      	mov	r2, r3
 800fa02:	7d3b      	ldrb	r3, [r7, #20]
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d024      	beq.n	800fa52 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fa0e:	f003 0301 	and.w	r3, r3, #1
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d10a      	bne.n	800fa2c <dir_find+0x14a>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a18      	ldr	r0, [r3, #32]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	3324      	adds	r3, #36	@ 0x24
 800fa1e:	220b      	movs	r2, #11
 800fa20:	4619      	mov	r1, r3
 800fa22:	f7fe fe21 	bl	800e668 <mem_cmp>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d014      	beq.n	800fa56 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fa2c:	23ff      	movs	r3, #255	@ 0xff
 800fa2e:	757b      	strb	r3, [r7, #21]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f04f 32ff 	mov.w	r2, #4294967295
 800fa36:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fa38:	2100      	movs	r1, #0
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7ff fc6e 	bl	800f31c <dir_next>
 800fa40:	4603      	mov	r3, r0
 800fa42:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fa44:	7dfb      	ldrb	r3, [r7, #23]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	f43f af65 	beq.w	800f916 <dir_find+0x34>
 800fa4c:	e004      	b.n	800fa58 <dir_find+0x176>
		if (res != FR_OK) break;
 800fa4e:	bf00      	nop
 800fa50:	e002      	b.n	800fa58 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fa52:	bf00      	nop
 800fa54:	e000      	b.n	800fa58 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fa56:	bf00      	nop

	return res;
 800fa58:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3718      	adds	r7, #24
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
	...

0800fa64 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b08c      	sub	sp, #48	@ 0x30
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fa78:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d001      	beq.n	800fa84 <dir_register+0x20>
 800fa80:	2306      	movs	r3, #6
 800fa82:	e0e0      	b.n	800fc46 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800fa84:	2300      	movs	r3, #0
 800fa86:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa88:	e002      	b.n	800fa90 <dir_register+0x2c>
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	691a      	ldr	r2, [r3, #16]
 800fa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa96:	005b      	lsls	r3, r3, #1
 800fa98:	4413      	add	r3, r2
 800fa9a:	881b      	ldrh	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1f4      	bne.n	800fa8a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800faa6:	f107 030c 	add.w	r3, r7, #12
 800faaa:	220c      	movs	r2, #12
 800faac:	4618      	mov	r0, r3
 800faae:	f7fe fd9f 	bl	800e5f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fab2:	7dfb      	ldrb	r3, [r7, #23]
 800fab4:	f003 0301 	and.w	r3, r3, #1
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d032      	beq.n	800fb22 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2240      	movs	r2, #64	@ 0x40
 800fac0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800fac4:	2301      	movs	r3, #1
 800fac6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fac8:	e016      	b.n	800faf8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	691a      	ldr	r2, [r3, #16]
 800fad4:	f107 010c 	add.w	r1, r7, #12
 800fad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fada:	f7ff fe53 	bl	800f784 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff feff 	bl	800f8e2 <dir_find>
 800fae4:	4603      	mov	r3, r0
 800fae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800faea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d106      	bne.n	800fb00 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800faf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faf4:	3301      	adds	r3, #1
 800faf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800faf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fafa:	2b63      	cmp	r3, #99	@ 0x63
 800fafc:	d9e5      	bls.n	800faca <dir_register+0x66>
 800fafe:	e000      	b.n	800fb02 <dir_register+0x9e>
			if (res != FR_OK) break;
 800fb00:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fb02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb04:	2b64      	cmp	r3, #100	@ 0x64
 800fb06:	d101      	bne.n	800fb0c <dir_register+0xa8>
 800fb08:	2307      	movs	r3, #7
 800fb0a:	e09c      	b.n	800fc46 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fb0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb10:	2b04      	cmp	r3, #4
 800fb12:	d002      	beq.n	800fb1a <dir_register+0xb6>
 800fb14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb18:	e095      	b.n	800fc46 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800fb1a:	7dfa      	ldrb	r2, [r7, #23]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
 800fb24:	f003 0302 	and.w	r3, r3, #2
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d007      	beq.n	800fb3c <dir_register+0xd8>
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb2e:	330c      	adds	r3, #12
 800fb30:	4a47      	ldr	r2, [pc, #284]	@ (800fc50 <dir_register+0x1ec>)
 800fb32:	fba2 2303 	umull	r2, r3, r2, r3
 800fb36:	089b      	lsrs	r3, r3, #2
 800fb38:	3301      	adds	r3, #1
 800fb3a:	e000      	b.n	800fb3e <dir_register+0xda>
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fb40:	6a39      	ldr	r1, [r7, #32]
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7ff fcc0 	bl	800f4c8 <dir_alloc>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fb4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d148      	bne.n	800fbe8 <dir_register+0x184>
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	623b      	str	r3, [r7, #32]
 800fb5c:	6a3b      	ldr	r3, [r7, #32]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d042      	beq.n	800fbe8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	695a      	ldr	r2, [r3, #20]
 800fb66:	6a3b      	ldr	r3, [r7, #32]
 800fb68:	015b      	lsls	r3, r3, #5
 800fb6a:	1ad3      	subs	r3, r2, r3
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f7ff fb4b 	bl	800f20a <dir_sdi>
 800fb74:	4603      	mov	r3, r0
 800fb76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800fb7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d132      	bne.n	800fbe8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	3324      	adds	r3, #36	@ 0x24
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff fe8a 	bl	800f8a0 <sum_sfn>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	69db      	ldr	r3, [r3, #28]
 800fb94:	4619      	mov	r1, r3
 800fb96:	69f8      	ldr	r0, [r7, #28]
 800fb98:	f7fe ff58 	bl	800ea4c <move_window>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800fba2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d11d      	bne.n	800fbe6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	6918      	ldr	r0, [r3, #16]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a19      	ldr	r1, [r3, #32]
 800fbb2:	6a3b      	ldr	r3, [r7, #32]
 800fbb4:	b2da      	uxtb	r2, r3
 800fbb6:	7efb      	ldrb	r3, [r7, #27]
 800fbb8:	f7ff fd7c 	bl	800f6b4 <put_lfn>
				fs->wflag = 1;
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f7ff fba9 	bl	800f31c <dir_next>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800fbd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d107      	bne.n	800fbe8 <dir_register+0x184>
 800fbd8:	6a3b      	ldr	r3, [r7, #32]
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	623b      	str	r3, [r7, #32]
 800fbde:	6a3b      	ldr	r3, [r7, #32]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d1d5      	bne.n	800fb90 <dir_register+0x12c>
 800fbe4:	e000      	b.n	800fbe8 <dir_register+0x184>
				if (res != FR_OK) break;
 800fbe6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fbe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d128      	bne.n	800fc42 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	69db      	ldr	r3, [r3, #28]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	69f8      	ldr	r0, [r7, #28]
 800fbf8:	f7fe ff28 	bl	800ea4c <move_window>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800fc02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d11b      	bne.n	800fc42 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6a1b      	ldr	r3, [r3, #32]
 800fc0e:	2220      	movs	r2, #32
 800fc10:	2100      	movs	r1, #0
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fe fd0d 	bl	800e632 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6a18      	ldr	r0, [r3, #32]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	3324      	adds	r3, #36	@ 0x24
 800fc20:	220b      	movs	r2, #11
 800fc22:	4619      	mov	r1, r3
 800fc24:	f7fe fce4 	bl	800e5f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6a1b      	ldr	r3, [r3, #32]
 800fc32:	330c      	adds	r3, #12
 800fc34:	f002 0218 	and.w	r2, r2, #24
 800fc38:	b2d2      	uxtb	r2, r2
 800fc3a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fc42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3730      	adds	r7, #48	@ 0x30
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
 800fc4e:	bf00      	nop
 800fc50:	4ec4ec4f 	.word	0x4ec4ec4f

0800fc54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b08a      	sub	sp, #40	@ 0x28
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	613b      	str	r3, [r7, #16]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	691b      	ldr	r3, [r3, #16]
 800fc6a:	60fb      	str	r3, [r7, #12]
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	617b      	str	r3, [r7, #20]
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	1c5a      	adds	r2, r3, #1
 800fc78:	61ba      	str	r2, [r7, #24]
 800fc7a:	693a      	ldr	r2, [r7, #16]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fc82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc84:	2b1f      	cmp	r3, #31
 800fc86:	d940      	bls.n	800fd0a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fc88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc8a:	2b2f      	cmp	r3, #47	@ 0x2f
 800fc8c:	d006      	beq.n	800fc9c <create_name+0x48>
 800fc8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fc90:	2b5c      	cmp	r3, #92	@ 0x5c
 800fc92:	d110      	bne.n	800fcb6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fc94:	e002      	b.n	800fc9c <create_name+0x48>
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	61bb      	str	r3, [r7, #24]
 800fc9c:	693a      	ldr	r2, [r7, #16]
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	4413      	add	r3, r2
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	2b2f      	cmp	r3, #47	@ 0x2f
 800fca6:	d0f6      	beq.n	800fc96 <create_name+0x42>
 800fca8:	693a      	ldr	r2, [r7, #16]
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	4413      	add	r3, r2
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	2b5c      	cmp	r3, #92	@ 0x5c
 800fcb2:	d0f0      	beq.n	800fc96 <create_name+0x42>
			break;
 800fcb4:	e02a      	b.n	800fd0c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	2bfe      	cmp	r3, #254	@ 0xfe
 800fcba:	d901      	bls.n	800fcc0 <create_name+0x6c>
 800fcbc:	2306      	movs	r3, #6
 800fcbe:	e1ca      	b.n	8010056 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fcc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fcc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fcc8:	2101      	movs	r1, #1
 800fcca:	4618      	mov	r0, r3
 800fccc:	f001 ff16 	bl	8011afc <ff_convert>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fcd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <create_name+0x8a>
 800fcda:	2306      	movs	r3, #6
 800fcdc:	e1bb      	b.n	8010056 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fcde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fce0:	2b7f      	cmp	r3, #127	@ 0x7f
 800fce2:	d809      	bhi.n	800fcf8 <create_name+0xa4>
 800fce4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fce6:	4619      	mov	r1, r3
 800fce8:	489e      	ldr	r0, [pc, #632]	@ (800ff64 <create_name+0x310>)
 800fcea:	f7fe fce4 	bl	800e6b6 <chk_chr>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <create_name+0xa4>
 800fcf4:	2306      	movs	r3, #6
 800fcf6:	e1ae      	b.n	8010056 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	1c5a      	adds	r2, r3, #1
 800fcfc:	617a      	str	r2, [r7, #20]
 800fcfe:	005b      	lsls	r3, r3, #1
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	4413      	add	r3, r2
 800fd04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fd06:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fd08:	e7b4      	b.n	800fc74 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fd0a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fd0c:	693a      	ldr	r2, [r7, #16]
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	441a      	add	r2, r3
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fd16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fd18:	2b1f      	cmp	r3, #31
 800fd1a:	d801      	bhi.n	800fd20 <create_name+0xcc>
 800fd1c:	2304      	movs	r3, #4
 800fd1e:	e000      	b.n	800fd22 <create_name+0xce>
 800fd20:	2300      	movs	r3, #0
 800fd22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d109      	bne.n	800fd40 <create_name+0xec>
 800fd2c:	697a      	ldr	r2, [r7, #20]
 800fd2e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fd32:	4413      	add	r3, r2
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	4413      	add	r3, r2
 800fd3a:	881b      	ldrh	r3, [r3, #0]
 800fd3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd3e:	d015      	beq.n	800fd6c <create_name+0x118>
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d14d      	bne.n	800fde2 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800fd46:	697a      	ldr	r2, [r7, #20]
 800fd48:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fd4c:	4413      	add	r3, r2
 800fd4e:	005b      	lsls	r3, r3, #1
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	4413      	add	r3, r2
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd58:	d143      	bne.n	800fde2 <create_name+0x18e>
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	4b82      	ldr	r3, [pc, #520]	@ (800ff68 <create_name+0x314>)
 800fd5e:	4413      	add	r3, r2
 800fd60:	005b      	lsls	r3, r3, #1
 800fd62:	68fa      	ldr	r2, [r7, #12]
 800fd64:	4413      	add	r3, r2
 800fd66:	881b      	ldrh	r3, [r3, #0]
 800fd68:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd6a:	d13a      	bne.n	800fde2 <create_name+0x18e>
		lfn[di] = 0;
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	005b      	lsls	r3, r3, #1
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	4413      	add	r3, r2
 800fd74:	2200      	movs	r2, #0
 800fd76:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800fd78:	2300      	movs	r3, #0
 800fd7a:	623b      	str	r3, [r7, #32]
 800fd7c:	e00f      	b.n	800fd9e <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800fd7e:	6a3a      	ldr	r2, [r7, #32]
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d201      	bcs.n	800fd8a <create_name+0x136>
 800fd86:	212e      	movs	r1, #46	@ 0x2e
 800fd88:	e000      	b.n	800fd8c <create_name+0x138>
 800fd8a:	2120      	movs	r1, #32
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	6a3b      	ldr	r3, [r7, #32]
 800fd90:	4413      	add	r3, r2
 800fd92:	3324      	adds	r3, #36	@ 0x24
 800fd94:	460a      	mov	r2, r1
 800fd96:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800fd98:	6a3b      	ldr	r3, [r7, #32]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	623b      	str	r3, [r7, #32]
 800fd9e:	6a3b      	ldr	r3, [r7, #32]
 800fda0:	2b0a      	cmp	r3, #10
 800fda2:	d9ec      	bls.n	800fd7e <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800fda4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fda8:	f043 0320 	orr.w	r3, r3, #32
 800fdac:	b2d9      	uxtb	r1, r3
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	6a3b      	ldr	r3, [r7, #32]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	3324      	adds	r3, #36	@ 0x24
 800fdb6:	460a      	mov	r2, r1
 800fdb8:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	e14b      	b.n	8010056 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800fdbe:	697a      	ldr	r2, [r7, #20]
 800fdc0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fdc4:	4413      	add	r3, r2
 800fdc6:	005b      	lsls	r3, r3, #1
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	4413      	add	r3, r2
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800fdd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fdd2:	2b20      	cmp	r3, #32
 800fdd4:	d002      	beq.n	800fddc <create_name+0x188>
 800fdd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fdd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdda:	d106      	bne.n	800fdea <create_name+0x196>
		di--;
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	3b01      	subs	r3, #1
 800fde0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1ea      	bne.n	800fdbe <create_name+0x16a>
 800fde8:	e000      	b.n	800fdec <create_name+0x198>
		if (w != ' ' && w != '.') break;
 800fdea:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	005b      	lsls	r3, r3, #1
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d101      	bne.n	800fe02 <create_name+0x1ae>
 800fdfe:	2306      	movs	r3, #6
 800fe00:	e129      	b.n	8010056 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	3324      	adds	r3, #36	@ 0x24
 800fe06:	220b      	movs	r2, #11
 800fe08:	2120      	movs	r1, #32
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fe fc11 	bl	800e632 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fe10:	2300      	movs	r3, #0
 800fe12:	61bb      	str	r3, [r7, #24]
 800fe14:	e002      	b.n	800fe1c <create_name+0x1c8>
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	61bb      	str	r3, [r7, #24]
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	4413      	add	r3, r2
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	2b20      	cmp	r3, #32
 800fe28:	d0f5      	beq.n	800fe16 <create_name+0x1c2>
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	005b      	lsls	r3, r3, #1
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	4413      	add	r3, r2
 800fe32:	881b      	ldrh	r3, [r3, #0]
 800fe34:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe36:	d0ee      	beq.n	800fe16 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fe38:	69bb      	ldr	r3, [r7, #24]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d009      	beq.n	800fe52 <create_name+0x1fe>
 800fe3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe42:	f043 0303 	orr.w	r3, r3, #3
 800fe46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fe4a:	e002      	b.n	800fe52 <create_name+0x1fe>
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	617b      	str	r3, [r7, #20]
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d009      	beq.n	800fe6c <create_name+0x218>
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fe5e:	4413      	add	r3, r2
 800fe60:	005b      	lsls	r3, r3, #1
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	4413      	add	r3, r2
 800fe66:	881b      	ldrh	r3, [r3, #0]
 800fe68:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe6a:	d1ef      	bne.n	800fe4c <create_name+0x1f8>

	i = b = 0; ni = 8;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fe72:	2300      	movs	r3, #0
 800fe74:	623b      	str	r3, [r7, #32]
 800fe76:	2308      	movs	r3, #8
 800fe78:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	1c5a      	adds	r2, r3, #1
 800fe7e:	61ba      	str	r2, [r7, #24]
 800fe80:	005b      	lsls	r3, r3, #1
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	4413      	add	r3, r2
 800fe86:	881b      	ldrh	r3, [r3, #0]
 800fe88:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fe8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f000 8098 	beq.w	800ffc2 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fe92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fe94:	2b20      	cmp	r3, #32
 800fe96:	d006      	beq.n	800fea6 <create_name+0x252>
 800fe98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fe9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe9c:	d10a      	bne.n	800feb4 <create_name+0x260>
 800fe9e:	69ba      	ldr	r2, [r7, #24]
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d006      	beq.n	800feb4 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 800fea6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800feaa:	f043 0303 	orr.w	r3, r3, #3
 800feae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800feb2:	e085      	b.n	800ffc0 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800feb4:	6a3a      	ldr	r2, [r7, #32]
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d203      	bcs.n	800fec4 <create_name+0x270>
 800febc:	69ba      	ldr	r2, [r7, #24]
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d123      	bne.n	800ff0c <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	2b0b      	cmp	r3, #11
 800fec8:	d106      	bne.n	800fed8 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 800feca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fece:	f043 0303 	orr.w	r3, r3, #3
 800fed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fed6:	e077      	b.n	800ffc8 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fed8:	69ba      	ldr	r2, [r7, #24]
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d005      	beq.n	800feec <create_name+0x298>
 800fee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fee4:	f043 0303 	orr.w	r3, r3, #3
 800fee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800feec:	69ba      	ldr	r2, [r7, #24]
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d868      	bhi.n	800ffc6 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	61bb      	str	r3, [r7, #24]
 800fef8:	2308      	movs	r3, #8
 800fefa:	623b      	str	r3, [r7, #32]
 800fefc:	230b      	movs	r3, #11
 800fefe:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ff00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ff0a:	e059      	b.n	800ffc0 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ff0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff0e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff10:	d914      	bls.n	800ff3c <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ff12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff14:	2100      	movs	r1, #0
 800ff16:	4618      	mov	r0, r3
 800ff18:	f001 fdf0 	bl	8011afc <ff_convert>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ff20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d004      	beq.n	800ff30 <create_name+0x2dc>
 800ff26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff28:	3b80      	subs	r3, #128	@ 0x80
 800ff2a:	4a10      	ldr	r2, [pc, #64]	@ (800ff6c <create_name+0x318>)
 800ff2c:	5cd3      	ldrb	r3, [r2, r3]
 800ff2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ff30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff34:	f043 0302 	orr.w	r3, r3, #2
 800ff38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ff3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d007      	beq.n	800ff52 <create_name+0x2fe>
 800ff42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff44:	4619      	mov	r1, r3
 800ff46:	480a      	ldr	r0, [pc, #40]	@ (800ff70 <create_name+0x31c>)
 800ff48:	f7fe fbb5 	bl	800e6b6 <chk_chr>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d010      	beq.n	800ff74 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ff52:	235f      	movs	r3, #95	@ 0x5f
 800ff54:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ff56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff5a:	f043 0303 	orr.w	r3, r3, #3
 800ff5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ff62:	e023      	b.n	800ffac <create_name+0x358>
 800ff64:	08012020 	.word	0x08012020
 800ff68:	7ffffffe 	.word	0x7ffffffe
 800ff6c:	080120a8 	.word	0x080120a8
 800ff70:	0801202c 	.word	0x0801202c
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ff74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff76:	2b40      	cmp	r3, #64	@ 0x40
 800ff78:	d909      	bls.n	800ff8e <create_name+0x33a>
 800ff7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff7c:	2b5a      	cmp	r3, #90	@ 0x5a
 800ff7e:	d806      	bhi.n	800ff8e <create_name+0x33a>
					b |= 2;
 800ff80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ff84:	f043 0302 	orr.w	r3, r3, #2
 800ff88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ff8c:	e00e      	b.n	800ffac <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ff8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff90:	2b60      	cmp	r3, #96	@ 0x60
 800ff92:	d90b      	bls.n	800ffac <create_name+0x358>
 800ff94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff96:	2b7a      	cmp	r3, #122	@ 0x7a
 800ff98:	d808      	bhi.n	800ffac <create_name+0x358>
						b |= 1; w -= 0x20;
 800ff9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ff9e:	f043 0301 	orr.w	r3, r3, #1
 800ffa2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ffa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ffa8:	3b20      	subs	r3, #32
 800ffaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ffac:	6a3b      	ldr	r3, [r7, #32]
 800ffae:	1c5a      	adds	r2, r3, #1
 800ffb0:	623a      	str	r2, [r7, #32]
 800ffb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ffb4:	b2d1      	uxtb	r1, r2
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4413      	add	r3, r2
 800ffba:	460a      	mov	r2, r1
 800ffbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ffc0:	e75b      	b.n	800fe7a <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 800ffc2:	bf00      	nop
 800ffc4:	e000      	b.n	800ffc8 <create_name+0x374>
			if (si > di) break;			/* No extension */
 800ffc6:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ffce:	2be5      	cmp	r3, #229	@ 0xe5
 800ffd0:	d103      	bne.n	800ffda <create_name+0x386>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2205      	movs	r2, #5
 800ffd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	2b08      	cmp	r3, #8
 800ffde:	d104      	bne.n	800ffea <create_name+0x396>
 800ffe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ffea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ffee:	f003 030c 	and.w	r3, r3, #12
 800fff2:	2b0c      	cmp	r3, #12
 800fff4:	d005      	beq.n	8010002 <create_name+0x3ae>
 800fff6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fffa:	f003 0303 	and.w	r3, r3, #3
 800fffe:	2b03      	cmp	r3, #3
 8010000:	d105      	bne.n	801000e <create_name+0x3ba>
 8010002:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010006:	f043 0302 	orr.w	r3, r3, #2
 801000a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801000e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010012:	f003 0302 	and.w	r3, r3, #2
 8010016:	2b00      	cmp	r3, #0
 8010018:	d117      	bne.n	801004a <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801001a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801001e:	f003 0303 	and.w	r3, r3, #3
 8010022:	2b01      	cmp	r3, #1
 8010024:	d105      	bne.n	8010032 <create_name+0x3de>
 8010026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801002a:	f043 0310 	orr.w	r3, r3, #16
 801002e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010032:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010036:	f003 030c 	and.w	r3, r3, #12
 801003a:	2b04      	cmp	r3, #4
 801003c:	d105      	bne.n	801004a <create_name+0x3f6>
 801003e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010042:	f043 0308 	orr.w	r3, r3, #8
 8010046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010050:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8010054:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010056:	4618      	mov	r0, r3
 8010058:	3728      	adds	r7, #40	@ 0x28
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop

08010060 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b086      	sub	sp, #24
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	2b2f      	cmp	r3, #47	@ 0x2f
 801007a:	d00b      	beq.n	8010094 <follow_path+0x34>
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	2b5c      	cmp	r3, #92	@ 0x5c
 8010082:	d007      	beq.n	8010094 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	69da      	ldr	r2, [r3, #28]
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	609a      	str	r2, [r3, #8]
 801008c:	e00d      	b.n	80100aa <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	3301      	adds	r3, #1
 8010092:	603b      	str	r3, [r7, #0]
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	2b2f      	cmp	r3, #47	@ 0x2f
 801009a:	d0f8      	beq.n	801008e <follow_path+0x2e>
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80100a2:	d0f4      	beq.n	801008e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	2200      	movs	r2, #0
 80100a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	2b1f      	cmp	r3, #31
 80100b0:	d80a      	bhi.n	80100c8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2280      	movs	r2, #128	@ 0x80
 80100b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80100ba:	2100      	movs	r1, #0
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f7ff f8a4 	bl	800f20a <dir_sdi>
 80100c2:	4603      	mov	r3, r0
 80100c4:	75fb      	strb	r3, [r7, #23]
 80100c6:	e05b      	b.n	8010180 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80100c8:	463b      	mov	r3, r7
 80100ca:	4619      	mov	r1, r3
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7ff fdc1 	bl	800fc54 <create_name>
 80100d2:	4603      	mov	r3, r0
 80100d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80100d6:	7dfb      	ldrb	r3, [r7, #23]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d14c      	bne.n	8010176 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f7ff fc00 	bl	800f8e2 <dir_find>
 80100e2:	4603      	mov	r3, r0
 80100e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80100ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80100ee:	7dfb      	ldrb	r3, [r7, #23]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d01b      	beq.n	801012c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80100f4:	7dfb      	ldrb	r3, [r7, #23]
 80100f6:	2b04      	cmp	r3, #4
 80100f8:	d13f      	bne.n	801017a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80100fa:	7afb      	ldrb	r3, [r7, #11]
 80100fc:	f003 0320 	and.w	r3, r3, #32
 8010100:	2b00      	cmp	r3, #0
 8010102:	d00b      	beq.n	801011c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010104:	7afb      	ldrb	r3, [r7, #11]
 8010106:	f003 0304 	and.w	r3, r3, #4
 801010a:	2b00      	cmp	r3, #0
 801010c:	d031      	beq.n	8010172 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2280      	movs	r2, #128	@ 0x80
 8010112:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801011a:	e02e      	b.n	801017a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801011c:	7afb      	ldrb	r3, [r7, #11]
 801011e:	f003 0304 	and.w	r3, r3, #4
 8010122:	2b00      	cmp	r3, #0
 8010124:	d129      	bne.n	801017a <follow_path+0x11a>
 8010126:	2305      	movs	r3, #5
 8010128:	75fb      	strb	r3, [r7, #23]
				break;
 801012a:	e026      	b.n	801017a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801012c:	7afb      	ldrb	r3, [r7, #11]
 801012e:	f003 0304 	and.w	r3, r3, #4
 8010132:	2b00      	cmp	r3, #0
 8010134:	d123      	bne.n	801017e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	799b      	ldrb	r3, [r3, #6]
 801013a:	f003 0310 	and.w	r3, r3, #16
 801013e:	2b00      	cmp	r3, #0
 8010140:	d102      	bne.n	8010148 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010142:	2305      	movs	r3, #5
 8010144:	75fb      	strb	r3, [r7, #23]
 8010146:	e01b      	b.n	8010180 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	695b      	ldr	r3, [r3, #20]
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	8992      	ldrh	r2, [r2, #12]
 8010156:	fbb3 f0f2 	udiv	r0, r3, r2
 801015a:	fb00 f202 	mul.w	r2, r0, r2
 801015e:	1a9b      	subs	r3, r3, r2
 8010160:	440b      	add	r3, r1
 8010162:	4619      	mov	r1, r3
 8010164:	68f8      	ldr	r0, [r7, #12]
 8010166:	f7ff f9f6 	bl	800f556 <ld_clust>
 801016a:	4602      	mov	r2, r0
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	609a      	str	r2, [r3, #8]
 8010170:	e7aa      	b.n	80100c8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010172:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010174:	e7a8      	b.n	80100c8 <follow_path+0x68>
			if (res != FR_OK) break;
 8010176:	bf00      	nop
 8010178:	e002      	b.n	8010180 <follow_path+0x120>
				break;
 801017a:	bf00      	nop
 801017c:	e000      	b.n	8010180 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801017e:	bf00      	nop
			}
		}
	}

	return res;
 8010180:	7dfb      	ldrb	r3, [r7, #23]
}
 8010182:	4618      	mov	r0, r3
 8010184:	3718      	adds	r7, #24
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801018a:	b480      	push	{r7}
 801018c:	b087      	sub	sp, #28
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010192:	f04f 33ff 	mov.w	r3, #4294967295
 8010196:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d031      	beq.n	8010204 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	617b      	str	r3, [r7, #20]
 80101a6:	e002      	b.n	80101ae <get_ldnumber+0x24>
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	3301      	adds	r3, #1
 80101ac:	617b      	str	r3, [r7, #20]
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	2b1f      	cmp	r3, #31
 80101b4:	d903      	bls.n	80101be <get_ldnumber+0x34>
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80101bc:	d1f4      	bne.n	80101a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	2b3a      	cmp	r3, #58	@ 0x3a
 80101c4:	d11c      	bne.n	8010200 <get_ldnumber+0x76>
			tp = *path;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	1c5a      	adds	r2, r3, #1
 80101d0:	60fa      	str	r2, [r7, #12]
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	3b30      	subs	r3, #48	@ 0x30
 80101d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	2b09      	cmp	r3, #9
 80101dc:	d80e      	bhi.n	80101fc <get_ldnumber+0x72>
 80101de:	68fa      	ldr	r2, [r7, #12]
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d10a      	bne.n	80101fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d107      	bne.n	80101fc <get_ldnumber+0x72>
					vol = (int)i;
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	3301      	adds	r3, #1
 80101f4:	617b      	str	r3, [r7, #20]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	697a      	ldr	r2, [r7, #20]
 80101fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	e002      	b.n	8010206 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010200:	2300      	movs	r3, #0
 8010202:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010204:	693b      	ldr	r3, [r7, #16]
}
 8010206:	4618      	mov	r0, r3
 8010208:	371c      	adds	r7, #28
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
	...

08010214 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	70da      	strb	r2, [r3, #3]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f04f 32ff 	mov.w	r2, #4294967295
 801022a:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801022c:	6839      	ldr	r1, [r7, #0]
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f7fe fc0c 	bl	800ea4c <move_window>
 8010234:	4603      	mov	r3, r0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d001      	beq.n	801023e <check_fs+0x2a>
 801023a:	2304      	movs	r3, #4
 801023c:	e038      	b.n	80102b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	333c      	adds	r3, #60	@ 0x3c
 8010242:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010246:	4618      	mov	r0, r3
 8010248:	f7fe f950 	bl	800e4ec <ld_word>
 801024c:	4603      	mov	r3, r0
 801024e:	461a      	mov	r2, r3
 8010250:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010254:	429a      	cmp	r2, r3
 8010256:	d001      	beq.n	801025c <check_fs+0x48>
 8010258:	2303      	movs	r3, #3
 801025a:	e029      	b.n	80102b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010262:	2be9      	cmp	r3, #233	@ 0xe9
 8010264:	d009      	beq.n	801027a <check_fs+0x66>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801026c:	2beb      	cmp	r3, #235	@ 0xeb
 801026e:	d11e      	bne.n	80102ae <check_fs+0x9a>
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010276:	2b90      	cmp	r3, #144	@ 0x90
 8010278:	d119      	bne.n	80102ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	333c      	adds	r3, #60	@ 0x3c
 801027e:	3336      	adds	r3, #54	@ 0x36
 8010280:	4618      	mov	r0, r3
 8010282:	f7fe f94b 	bl	800e51c <ld_dword>
 8010286:	4603      	mov	r3, r0
 8010288:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801028c:	4a0a      	ldr	r2, [pc, #40]	@ (80102b8 <check_fs+0xa4>)
 801028e:	4293      	cmp	r3, r2
 8010290:	d101      	bne.n	8010296 <check_fs+0x82>
 8010292:	2300      	movs	r3, #0
 8010294:	e00c      	b.n	80102b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	333c      	adds	r3, #60	@ 0x3c
 801029a:	3352      	adds	r3, #82	@ 0x52
 801029c:	4618      	mov	r0, r3
 801029e:	f7fe f93d 	bl	800e51c <ld_dword>
 80102a2:	4603      	mov	r3, r0
 80102a4:	4a05      	ldr	r2, [pc, #20]	@ (80102bc <check_fs+0xa8>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d101      	bne.n	80102ae <check_fs+0x9a>
 80102aa:	2300      	movs	r3, #0
 80102ac:	e000      	b.n	80102b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80102ae:	2302      	movs	r3, #2
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	00544146 	.word	0x00544146
 80102bc:	33544146 	.word	0x33544146

080102c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b096      	sub	sp, #88	@ 0x58
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	4613      	mov	r3, r2
 80102cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	2200      	movs	r2, #0
 80102d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f7ff ff58 	bl	801018a <get_ldnumber>
 80102da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80102dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102de:	2b00      	cmp	r3, #0
 80102e0:	da01      	bge.n	80102e6 <find_volume+0x26>
 80102e2:	230b      	movs	r3, #11
 80102e4:	e268      	b.n	80107b8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80102e6:	4a9f      	ldr	r2, [pc, #636]	@ (8010564 <find_volume+0x2a4>)
 80102e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80102f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d101      	bne.n	80102fa <find_volume+0x3a>
 80102f6:	230c      	movs	r3, #12
 80102f8:	e25e      	b.n	80107b8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80102fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010300:	79fb      	ldrb	r3, [r7, #7]
 8010302:	f023 0301 	bic.w	r3, r3, #1
 8010306:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d01a      	beq.n	8010346 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010312:	785b      	ldrb	r3, [r3, #1]
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe f849 	bl	800e3ac <disk_status>
 801031a:	4603      	mov	r3, r0
 801031c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010320:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010324:	f003 0301 	and.w	r3, r3, #1
 8010328:	2b00      	cmp	r3, #0
 801032a:	d10c      	bne.n	8010346 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801032c:	79fb      	ldrb	r3, [r7, #7]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d007      	beq.n	8010342 <find_volume+0x82>
 8010332:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010336:	f003 0304 	and.w	r3, r3, #4
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801033e:	230a      	movs	r3, #10
 8010340:	e23a      	b.n	80107b8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010342:	2300      	movs	r3, #0
 8010344:	e238      	b.n	80107b8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010348:	2200      	movs	r2, #0
 801034a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801034c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801034e:	b2da      	uxtb	r2, r3
 8010350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010352:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010356:	785b      	ldrb	r3, [r3, #1]
 8010358:	4618      	mov	r0, r3
 801035a:	f7fe f841 	bl	800e3e0 <disk_initialize>
 801035e:	4603      	mov	r3, r0
 8010360:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010364:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010368:	f003 0301 	and.w	r3, r3, #1
 801036c:	2b00      	cmp	r3, #0
 801036e:	d001      	beq.n	8010374 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010370:	2303      	movs	r3, #3
 8010372:	e221      	b.n	80107b8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010374:	79fb      	ldrb	r3, [r7, #7]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d007      	beq.n	801038a <find_volume+0xca>
 801037a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801037e:	f003 0304 	and.w	r3, r3, #4
 8010382:	2b00      	cmp	r3, #0
 8010384:	d001      	beq.n	801038a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010386:	230a      	movs	r3, #10
 8010388:	e216      	b.n	80107b8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801038a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801038c:	7858      	ldrb	r0, [r3, #1]
 801038e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010390:	330c      	adds	r3, #12
 8010392:	461a      	mov	r2, r3
 8010394:	2102      	movs	r1, #2
 8010396:	f7fe f88b 	bl	800e4b0 <disk_ioctl>
 801039a:	4603      	mov	r3, r0
 801039c:	2b00      	cmp	r3, #0
 801039e:	d001      	beq.n	80103a4 <find_volume+0xe4>
 80103a0:	2301      	movs	r3, #1
 80103a2:	e209      	b.n	80107b8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80103a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a6:	899b      	ldrh	r3, [r3, #12]
 80103a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80103ac:	d80d      	bhi.n	80103ca <find_volume+0x10a>
 80103ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b0:	899b      	ldrh	r3, [r3, #12]
 80103b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80103b6:	d308      	bcc.n	80103ca <find_volume+0x10a>
 80103b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ba:	899b      	ldrh	r3, [r3, #12]
 80103bc:	461a      	mov	r2, r3
 80103be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c0:	899b      	ldrh	r3, [r3, #12]
 80103c2:	3b01      	subs	r3, #1
 80103c4:	4013      	ands	r3, r2
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d001      	beq.n	80103ce <find_volume+0x10e>
 80103ca:	2301      	movs	r3, #1
 80103cc:	e1f4      	b.n	80107b8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80103d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80103d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80103d6:	f7ff ff1d 	bl	8010214 <check_fs>
 80103da:	4603      	mov	r3, r0
 80103dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80103e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80103e4:	2b02      	cmp	r3, #2
 80103e6:	d149      	bne.n	801047c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80103e8:	2300      	movs	r3, #0
 80103ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80103ec:	e01e      	b.n	801042c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80103ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f0:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80103f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103f6:	011b      	lsls	r3, r3, #4
 80103f8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80103fc:	4413      	add	r3, r2
 80103fe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010402:	3304      	adds	r3, #4
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d006      	beq.n	8010418 <find_volume+0x158>
 801040a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801040c:	3308      	adds	r3, #8
 801040e:	4618      	mov	r0, r3
 8010410:	f7fe f884 	bl	800e51c <ld_dword>
 8010414:	4602      	mov	r2, r0
 8010416:	e000      	b.n	801041a <find_volume+0x15a>
 8010418:	2200      	movs	r2, #0
 801041a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801041c:	009b      	lsls	r3, r3, #2
 801041e:	3358      	adds	r3, #88	@ 0x58
 8010420:	443b      	add	r3, r7
 8010422:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010428:	3301      	adds	r3, #1
 801042a:	643b      	str	r3, [r7, #64]	@ 0x40
 801042c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801042e:	2b03      	cmp	r3, #3
 8010430:	d9dd      	bls.n	80103ee <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010432:	2300      	movs	r3, #0
 8010434:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010438:	2b00      	cmp	r3, #0
 801043a:	d002      	beq.n	8010442 <find_volume+0x182>
 801043c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801043e:	3b01      	subs	r3, #1
 8010440:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	3358      	adds	r3, #88	@ 0x58
 8010448:	443b      	add	r3, r7
 801044a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801044e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010452:	2b00      	cmp	r3, #0
 8010454:	d005      	beq.n	8010462 <find_volume+0x1a2>
 8010456:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010458:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801045a:	f7ff fedb 	bl	8010214 <check_fs>
 801045e:	4603      	mov	r3, r0
 8010460:	e000      	b.n	8010464 <find_volume+0x1a4>
 8010462:	2303      	movs	r3, #3
 8010464:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010468:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801046c:	2b01      	cmp	r3, #1
 801046e:	d905      	bls.n	801047c <find_volume+0x1bc>
 8010470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010472:	3301      	adds	r3, #1
 8010474:	643b      	str	r3, [r7, #64]	@ 0x40
 8010476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010478:	2b03      	cmp	r3, #3
 801047a:	d9e2      	bls.n	8010442 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801047c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010480:	2b04      	cmp	r3, #4
 8010482:	d101      	bne.n	8010488 <find_volume+0x1c8>
 8010484:	2301      	movs	r3, #1
 8010486:	e197      	b.n	80107b8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010488:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801048c:	2b01      	cmp	r3, #1
 801048e:	d901      	bls.n	8010494 <find_volume+0x1d4>
 8010490:	230d      	movs	r3, #13
 8010492:	e191      	b.n	80107b8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010496:	333c      	adds	r3, #60	@ 0x3c
 8010498:	330b      	adds	r3, #11
 801049a:	4618      	mov	r0, r3
 801049c:	f7fe f826 	bl	800e4ec <ld_word>
 80104a0:	4603      	mov	r3, r0
 80104a2:	461a      	mov	r2, r3
 80104a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104a6:	899b      	ldrh	r3, [r3, #12]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d001      	beq.n	80104b0 <find_volume+0x1f0>
 80104ac:	230d      	movs	r3, #13
 80104ae:	e183      	b.n	80107b8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80104b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104b2:	333c      	adds	r3, #60	@ 0x3c
 80104b4:	3316      	adds	r3, #22
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7fe f818 	bl	800e4ec <ld_word>
 80104bc:	4603      	mov	r3, r0
 80104be:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80104c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d106      	bne.n	80104d4 <find_volume+0x214>
 80104c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104c8:	333c      	adds	r3, #60	@ 0x3c
 80104ca:	3324      	adds	r3, #36	@ 0x24
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7fe f825 	bl	800e51c <ld_dword>
 80104d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80104d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80104d8:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80104da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104dc:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 80104e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80104e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e6:	789b      	ldrb	r3, [r3, #2]
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d005      	beq.n	80104f8 <find_volume+0x238>
 80104ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ee:	789b      	ldrb	r3, [r3, #2]
 80104f0:	2b02      	cmp	r3, #2
 80104f2:	d001      	beq.n	80104f8 <find_volume+0x238>
 80104f4:	230d      	movs	r3, #13
 80104f6:	e15f      	b.n	80107b8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80104f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104fa:	789b      	ldrb	r3, [r3, #2]
 80104fc:	461a      	mov	r2, r3
 80104fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010500:	fb02 f303 	mul.w	r3, r2, r3
 8010504:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010508:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 801050c:	461a      	mov	r2, r3
 801050e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010510:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010514:	895b      	ldrh	r3, [r3, #10]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d008      	beq.n	801052c <find_volume+0x26c>
 801051a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051c:	895b      	ldrh	r3, [r3, #10]
 801051e:	461a      	mov	r2, r3
 8010520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010522:	895b      	ldrh	r3, [r3, #10]
 8010524:	3b01      	subs	r3, #1
 8010526:	4013      	ands	r3, r2
 8010528:	2b00      	cmp	r3, #0
 801052a:	d001      	beq.n	8010530 <find_volume+0x270>
 801052c:	230d      	movs	r3, #13
 801052e:	e143      	b.n	80107b8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010532:	333c      	adds	r3, #60	@ 0x3c
 8010534:	3311      	adds	r3, #17
 8010536:	4618      	mov	r0, r3
 8010538:	f7fd ffd8 	bl	800e4ec <ld_word>
 801053c:	4603      	mov	r3, r0
 801053e:	461a      	mov	r2, r3
 8010540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010542:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010546:	891b      	ldrh	r3, [r3, #8]
 8010548:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801054a:	8992      	ldrh	r2, [r2, #12]
 801054c:	0952      	lsrs	r2, r2, #5
 801054e:	b292      	uxth	r2, r2
 8010550:	fbb3 f1f2 	udiv	r1, r3, r2
 8010554:	fb01 f202 	mul.w	r2, r1, r2
 8010558:	1a9b      	subs	r3, r3, r2
 801055a:	b29b      	uxth	r3, r3
 801055c:	2b00      	cmp	r3, #0
 801055e:	d003      	beq.n	8010568 <find_volume+0x2a8>
 8010560:	230d      	movs	r3, #13
 8010562:	e129      	b.n	80107b8 <find_volume+0x4f8>
 8010564:	2400278c 	.word	0x2400278c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801056a:	333c      	adds	r3, #60	@ 0x3c
 801056c:	3313      	adds	r3, #19
 801056e:	4618      	mov	r0, r3
 8010570:	f7fd ffbc 	bl	800e4ec <ld_word>
 8010574:	4603      	mov	r3, r0
 8010576:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801057a:	2b00      	cmp	r3, #0
 801057c:	d106      	bne.n	801058c <find_volume+0x2cc>
 801057e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010580:	333c      	adds	r3, #60	@ 0x3c
 8010582:	3320      	adds	r3, #32
 8010584:	4618      	mov	r0, r3
 8010586:	f7fd ffc9 	bl	800e51c <ld_dword>
 801058a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801058c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801058e:	333c      	adds	r3, #60	@ 0x3c
 8010590:	330e      	adds	r3, #14
 8010592:	4618      	mov	r0, r3
 8010594:	f7fd ffaa 	bl	800e4ec <ld_word>
 8010598:	4603      	mov	r3, r0
 801059a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801059c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d101      	bne.n	80105a6 <find_volume+0x2e6>
 80105a2:	230d      	movs	r3, #13
 80105a4:	e108      	b.n	80107b8 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80105a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80105a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105aa:	4413      	add	r3, r2
 80105ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80105ae:	8911      	ldrh	r1, [r2, #8]
 80105b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80105b2:	8992      	ldrh	r2, [r2, #12]
 80105b4:	0952      	lsrs	r2, r2, #5
 80105b6:	b292      	uxth	r2, r2
 80105b8:	fbb1 f2f2 	udiv	r2, r1, r2
 80105bc:	b292      	uxth	r2, r2
 80105be:	4413      	add	r3, r2
 80105c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80105c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d201      	bcs.n	80105ce <find_volume+0x30e>
 80105ca:	230d      	movs	r3, #13
 80105cc:	e0f4      	b.n	80107b8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80105ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d2:	1ad3      	subs	r3, r2, r3
 80105d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80105d6:	8952      	ldrh	r2, [r2, #10]
 80105d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80105dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80105de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d101      	bne.n	80105e8 <find_volume+0x328>
 80105e4:	230d      	movs	r3, #13
 80105e6:	e0e7      	b.n	80107b8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80105e8:	2303      	movs	r3, #3
 80105ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80105ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d802      	bhi.n	80105fe <find_volume+0x33e>
 80105f8:	2302      	movs	r3, #2
 80105fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80105fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010600:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010604:	4293      	cmp	r3, r2
 8010606:	d802      	bhi.n	801060e <find_volume+0x34e>
 8010608:	2301      	movs	r3, #1
 801060a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801060e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010610:	1c9a      	adds	r2, r3, #2
 8010612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010614:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8010616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010618:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801061a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801061c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801061e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010620:	441a      	add	r2, r3
 8010622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010624:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8010626:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062a:	441a      	add	r2, r3
 801062c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801062e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8010630:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010634:	2b03      	cmp	r3, #3
 8010636:	d11e      	bne.n	8010676 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801063a:	333c      	adds	r3, #60	@ 0x3c
 801063c:	332a      	adds	r3, #42	@ 0x2a
 801063e:	4618      	mov	r0, r3
 8010640:	f7fd ff54 	bl	800e4ec <ld_word>
 8010644:	4603      	mov	r3, r0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <find_volume+0x38e>
 801064a:	230d      	movs	r3, #13
 801064c:	e0b4      	b.n	80107b8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801064e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010650:	891b      	ldrh	r3, [r3, #8]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <find_volume+0x39a>
 8010656:	230d      	movs	r3, #13
 8010658:	e0ae      	b.n	80107b8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801065a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801065c:	333c      	adds	r3, #60	@ 0x3c
 801065e:	332c      	adds	r3, #44	@ 0x2c
 8010660:	4618      	mov	r0, r3
 8010662:	f7fd ff5b 	bl	800e51c <ld_dword>
 8010666:	4602      	mov	r2, r0
 8010668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801066a:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801066c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801066e:	6a1b      	ldr	r3, [r3, #32]
 8010670:	009b      	lsls	r3, r3, #2
 8010672:	647b      	str	r3, [r7, #68]	@ 0x44
 8010674:	e01f      	b.n	80106b6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010678:	891b      	ldrh	r3, [r3, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d101      	bne.n	8010682 <find_volume+0x3c2>
 801067e:	230d      	movs	r3, #13
 8010680:	e09a      	b.n	80107b8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010688:	441a      	add	r2, r3
 801068a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801068c:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801068e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010692:	2b02      	cmp	r3, #2
 8010694:	d103      	bne.n	801069e <find_volume+0x3de>
 8010696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010698:	6a1b      	ldr	r3, [r3, #32]
 801069a:	005b      	lsls	r3, r3, #1
 801069c:	e00a      	b.n	80106b4 <find_volume+0x3f4>
 801069e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106a0:	6a1a      	ldr	r2, [r3, #32]
 80106a2:	4613      	mov	r3, r2
 80106a4:	005b      	lsls	r3, r3, #1
 80106a6:	4413      	add	r3, r2
 80106a8:	085a      	lsrs	r2, r3, #1
 80106aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ac:	6a1b      	ldr	r3, [r3, #32]
 80106ae:	f003 0301 	and.w	r3, r3, #1
 80106b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80106b4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80106b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106bc:	899b      	ldrh	r3, [r3, #12]
 80106be:	4619      	mov	r1, r3
 80106c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106c2:	440b      	add	r3, r1
 80106c4:	3b01      	subs	r3, #1
 80106c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80106c8:	8989      	ldrh	r1, [r1, #12]
 80106ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d201      	bcs.n	80106d6 <find_volume+0x416>
 80106d2:	230d      	movs	r3, #13
 80106d4:	e070      	b.n	80107b8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80106d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106d8:	f04f 32ff 	mov.w	r2, #4294967295
 80106dc:	619a      	str	r2, [r3, #24]
 80106de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e0:	699a      	ldr	r2, [r3, #24]
 80106e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80106e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e8:	2280      	movs	r2, #128	@ 0x80
 80106ea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80106ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80106f0:	2b03      	cmp	r3, #3
 80106f2:	d149      	bne.n	8010788 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80106f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106f6:	333c      	adds	r3, #60	@ 0x3c
 80106f8:	3330      	adds	r3, #48	@ 0x30
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7fd fef6 	bl	800e4ec <ld_word>
 8010700:	4603      	mov	r3, r0
 8010702:	2b01      	cmp	r3, #1
 8010704:	d140      	bne.n	8010788 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010708:	3301      	adds	r3, #1
 801070a:	4619      	mov	r1, r3
 801070c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801070e:	f7fe f99d 	bl	800ea4c <move_window>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d137      	bne.n	8010788 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8010718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801071a:	2200      	movs	r2, #0
 801071c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801071e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010720:	333c      	adds	r3, #60	@ 0x3c
 8010722:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010726:	4618      	mov	r0, r3
 8010728:	f7fd fee0 	bl	800e4ec <ld_word>
 801072c:	4603      	mov	r3, r0
 801072e:	461a      	mov	r2, r3
 8010730:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010734:	429a      	cmp	r2, r3
 8010736:	d127      	bne.n	8010788 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801073a:	333c      	adds	r3, #60	@ 0x3c
 801073c:	4618      	mov	r0, r3
 801073e:	f7fd feed 	bl	800e51c <ld_dword>
 8010742:	4603      	mov	r3, r0
 8010744:	4a1e      	ldr	r2, [pc, #120]	@ (80107c0 <find_volume+0x500>)
 8010746:	4293      	cmp	r3, r2
 8010748:	d11e      	bne.n	8010788 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801074a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801074c:	333c      	adds	r3, #60	@ 0x3c
 801074e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010752:	4618      	mov	r0, r3
 8010754:	f7fd fee2 	bl	800e51c <ld_dword>
 8010758:	4603      	mov	r3, r0
 801075a:	4a1a      	ldr	r2, [pc, #104]	@ (80107c4 <find_volume+0x504>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d113      	bne.n	8010788 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010762:	333c      	adds	r3, #60	@ 0x3c
 8010764:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010768:	4618      	mov	r0, r3
 801076a:	f7fd fed7 	bl	800e51c <ld_dword>
 801076e:	4602      	mov	r2, r0
 8010770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010772:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010776:	333c      	adds	r3, #60	@ 0x3c
 8010778:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801077c:	4618      	mov	r0, r3
 801077e:	f7fd fecd 	bl	800e51c <ld_dword>
 8010782:	4602      	mov	r2, r0
 8010784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010786:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801078a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801078e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010790:	4b0d      	ldr	r3, [pc, #52]	@ (80107c8 <find_volume+0x508>)
 8010792:	881b      	ldrh	r3, [r3, #0]
 8010794:	3301      	adds	r3, #1
 8010796:	b29a      	uxth	r2, r3
 8010798:	4b0b      	ldr	r3, [pc, #44]	@ (80107c8 <find_volume+0x508>)
 801079a:	801a      	strh	r2, [r3, #0]
 801079c:	4b0a      	ldr	r3, [pc, #40]	@ (80107c8 <find_volume+0x508>)
 801079e:	881a      	ldrh	r2, [r3, #0]
 80107a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80107a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a6:	4a09      	ldr	r2, [pc, #36]	@ (80107cc <find_volume+0x50c>)
 80107a8:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80107aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ac:	2200      	movs	r2, #0
 80107ae:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80107b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80107b2:	f7fe f8e3 	bl	800e97c <clear_lock>
#endif
	return FR_OK;
 80107b6:	2300      	movs	r3, #0
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3758      	adds	r7, #88	@ 0x58
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	41615252 	.word	0x41615252
 80107c4:	61417272 	.word	0x61417272
 80107c8:	24002790 	.word	0x24002790
 80107cc:	240027b4 	.word	0x240027b4

080107d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80107da:	2309      	movs	r3, #9
 80107dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d01c      	beq.n	801081e <validate+0x4e>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d018      	beq.n	801081e <validate+0x4e>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d013      	beq.n	801081e <validate+0x4e>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	889a      	ldrh	r2, [r3, #4]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	88db      	ldrh	r3, [r3, #6]
 8010800:	429a      	cmp	r2, r3
 8010802:	d10c      	bne.n	801081e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	785b      	ldrb	r3, [r3, #1]
 801080a:	4618      	mov	r0, r3
 801080c:	f7fd fdce 	bl	800e3ac <disk_status>
 8010810:	4603      	mov	r3, r0
 8010812:	f003 0301 	and.w	r3, r3, #1
 8010816:	2b00      	cmp	r3, #0
 8010818:	d101      	bne.n	801081e <validate+0x4e>
			res = FR_OK;
 801081a:	2300      	movs	r3, #0
 801081c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801081e:	7bfb      	ldrb	r3, [r7, #15]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d102      	bne.n	801082a <validate+0x5a>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	e000      	b.n	801082c <validate+0x5c>
 801082a:	2300      	movs	r3, #0
 801082c:	683a      	ldr	r2, [r7, #0]
 801082e:	6013      	str	r3, [r2, #0]
	return res;
 8010830:	7bfb      	ldrb	r3, [r7, #15]
}
 8010832:	4618      	mov	r0, r3
 8010834:	3710      	adds	r7, #16
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
	...

0801083c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b088      	sub	sp, #32
 8010840:	af00      	add	r7, sp, #0
 8010842:	60f8      	str	r0, [r7, #12]
 8010844:	60b9      	str	r1, [r7, #8]
 8010846:	4613      	mov	r3, r2
 8010848:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801084e:	f107 0310 	add.w	r3, r7, #16
 8010852:	4618      	mov	r0, r3
 8010854:	f7ff fc99 	bl	801018a <get_ldnumber>
 8010858:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801085a:	69fb      	ldr	r3, [r7, #28]
 801085c:	2b00      	cmp	r3, #0
 801085e:	da01      	bge.n	8010864 <f_mount+0x28>
 8010860:	230b      	movs	r3, #11
 8010862:	e02b      	b.n	80108bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010864:	4a17      	ldr	r2, [pc, #92]	@ (80108c4 <f_mount+0x88>)
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801086c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d005      	beq.n	8010880 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010874:	69b8      	ldr	r0, [r7, #24]
 8010876:	f7fe f881 	bl	800e97c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801087a:	69bb      	ldr	r3, [r7, #24]
 801087c:	2200      	movs	r2, #0
 801087e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d002      	beq.n	801088c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2200      	movs	r2, #0
 801088a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801088c:	68fa      	ldr	r2, [r7, #12]
 801088e:	490d      	ldr	r1, [pc, #52]	@ (80108c4 <f_mount+0x88>)
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d002      	beq.n	80108a2 <f_mount+0x66>
 801089c:	79fb      	ldrb	r3, [r7, #7]
 801089e:	2b01      	cmp	r3, #1
 80108a0:	d001      	beq.n	80108a6 <f_mount+0x6a>
 80108a2:	2300      	movs	r3, #0
 80108a4:	e00a      	b.n	80108bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80108a6:	f107 010c 	add.w	r1, r7, #12
 80108aa:	f107 0308 	add.w	r3, r7, #8
 80108ae:	2200      	movs	r2, #0
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7ff fd05 	bl	80102c0 <find_volume>
 80108b6:	4603      	mov	r3, r0
 80108b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80108ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3720      	adds	r7, #32
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	2400278c 	.word	0x2400278c

080108c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b09a      	sub	sp, #104	@ 0x68
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	4613      	mov	r3, r2
 80108d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d101      	bne.n	80108e0 <f_open+0x18>
 80108dc:	2309      	movs	r3, #9
 80108de:	e1b7      	b.n	8010c50 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80108e0:	79fb      	ldrb	r3, [r7, #7]
 80108e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80108e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80108e8:	79fa      	ldrb	r2, [r7, #7]
 80108ea:	f107 0114 	add.w	r1, r7, #20
 80108ee:	f107 0308 	add.w	r3, r7, #8
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7ff fce4 	bl	80102c0 <find_volume>
 80108f8:	4603      	mov	r3, r0
 80108fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80108fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010902:	2b00      	cmp	r3, #0
 8010904:	f040 819b 	bne.w	8010c3e <f_open+0x376>
		dj.obj.fs = fs;
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801090c:	68ba      	ldr	r2, [r7, #8]
 801090e:	f107 0318 	add.w	r3, r7, #24
 8010912:	4611      	mov	r1, r2
 8010914:	4618      	mov	r0, r3
 8010916:	f7ff fba3 	bl	8010060 <follow_path>
 801091a:	4603      	mov	r3, r0
 801091c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010920:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010924:	2b00      	cmp	r3, #0
 8010926:	d118      	bne.n	801095a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010928:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801092c:	b25b      	sxtb	r3, r3
 801092e:	2b00      	cmp	r3, #0
 8010930:	da03      	bge.n	801093a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010932:	2306      	movs	r3, #6
 8010934:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010938:	e00f      	b.n	801095a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801093a:	79fb      	ldrb	r3, [r7, #7]
 801093c:	2b01      	cmp	r3, #1
 801093e:	bf8c      	ite	hi
 8010940:	2301      	movhi	r3, #1
 8010942:	2300      	movls	r3, #0
 8010944:	b2db      	uxtb	r3, r3
 8010946:	461a      	mov	r2, r3
 8010948:	f107 0318 	add.w	r3, r7, #24
 801094c:	4611      	mov	r1, r2
 801094e:	4618      	mov	r0, r3
 8010950:	f7fd fecc 	bl	800e6ec <chk_lock>
 8010954:	4603      	mov	r3, r0
 8010956:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801095a:	79fb      	ldrb	r3, [r7, #7]
 801095c:	f003 031c 	and.w	r3, r3, #28
 8010960:	2b00      	cmp	r3, #0
 8010962:	d07f      	beq.n	8010a64 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010964:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010968:	2b00      	cmp	r3, #0
 801096a:	d017      	beq.n	801099c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801096c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010970:	2b04      	cmp	r3, #4
 8010972:	d10e      	bne.n	8010992 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010974:	f7fd ff16 	bl	800e7a4 <enq_lock>
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	d006      	beq.n	801098c <f_open+0xc4>
 801097e:	f107 0318 	add.w	r3, r7, #24
 8010982:	4618      	mov	r0, r3
 8010984:	f7ff f86e 	bl	800fa64 <dir_register>
 8010988:	4603      	mov	r3, r0
 801098a:	e000      	b.n	801098e <f_open+0xc6>
 801098c:	2312      	movs	r3, #18
 801098e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010992:	79fb      	ldrb	r3, [r7, #7]
 8010994:	f043 0308 	orr.w	r3, r3, #8
 8010998:	71fb      	strb	r3, [r7, #7]
 801099a:	e010      	b.n	80109be <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801099c:	7fbb      	ldrb	r3, [r7, #30]
 801099e:	f003 0311 	and.w	r3, r3, #17
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d003      	beq.n	80109ae <f_open+0xe6>
					res = FR_DENIED;
 80109a6:	2307      	movs	r3, #7
 80109a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80109ac:	e007      	b.n	80109be <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80109ae:	79fb      	ldrb	r3, [r7, #7]
 80109b0:	f003 0304 	and.w	r3, r3, #4
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d002      	beq.n	80109be <f_open+0xf6>
 80109b8:	2308      	movs	r3, #8
 80109ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80109be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d168      	bne.n	8010a98 <f_open+0x1d0>
 80109c6:	79fb      	ldrb	r3, [r7, #7]
 80109c8:	f003 0308 	and.w	r3, r3, #8
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d063      	beq.n	8010a98 <f_open+0x1d0>
				dw = GET_FATTIME();
 80109d0:	f7fc ffca 	bl	800d968 <get_fattime>
 80109d4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80109d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d8:	330e      	adds	r3, #14
 80109da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fd fddb 	bl	800e598 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80109e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e4:	3316      	adds	r3, #22
 80109e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fd fdd5 	bl	800e598 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80109ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f0:	330b      	adds	r3, #11
 80109f2:	2220      	movs	r2, #32
 80109f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109fa:	4611      	mov	r1, r2
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fe fdaa 	bl	800f556 <ld_clust>
 8010a02:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010a08:	2200      	movs	r2, #0
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7fe fdc2 	bl	800f594 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a12:	331c      	adds	r3, #28
 8010a14:	2100      	movs	r1, #0
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fd fdbe 	bl	800e598 <st_dword>
					fs->wflag = 1;
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	2201      	movs	r2, #1
 8010a20:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d037      	beq.n	8010a98 <f_open+0x1d0>
						dw = fs->winsect;
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010a2e:	f107 0318 	add.w	r3, r7, #24
 8010a32:	2200      	movs	r2, #0
 8010a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fe fab2 	bl	800efa0 <remove_chain>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8010a42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d126      	bne.n	8010a98 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fd fffc 	bl	800ea4c <move_window>
 8010a54:	4603      	mov	r3, r0
 8010a56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010a5e:	3a01      	subs	r2, #1
 8010a60:	615a      	str	r2, [r3, #20]
 8010a62:	e019      	b.n	8010a98 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010a64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d115      	bne.n	8010a98 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010a6c:	7fbb      	ldrb	r3, [r7, #30]
 8010a6e:	f003 0310 	and.w	r3, r3, #16
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d003      	beq.n	8010a7e <f_open+0x1b6>
					res = FR_NO_FILE;
 8010a76:	2304      	movs	r3, #4
 8010a78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010a7c:	e00c      	b.n	8010a98 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010a7e:	79fb      	ldrb	r3, [r7, #7]
 8010a80:	f003 0302 	and.w	r3, r3, #2
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d007      	beq.n	8010a98 <f_open+0x1d0>
 8010a88:	7fbb      	ldrb	r3, [r7, #30]
 8010a8a:	f003 0301 	and.w	r3, r3, #1
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d002      	beq.n	8010a98 <f_open+0x1d0>
						res = FR_DENIED;
 8010a92:	2307      	movs	r3, #7
 8010a94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010a98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d126      	bne.n	8010aee <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010aa0:	79fb      	ldrb	r3, [r7, #7]
 8010aa2:	f003 0308 	and.w	r3, r3, #8
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d003      	beq.n	8010ab2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010aaa:	79fb      	ldrb	r3, [r7, #7]
 8010aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ab0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010aba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010ac0:	79fb      	ldrb	r3, [r7, #7]
 8010ac2:	2b01      	cmp	r3, #1
 8010ac4:	bf8c      	ite	hi
 8010ac6:	2301      	movhi	r3, #1
 8010ac8:	2300      	movls	r3, #0
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	461a      	mov	r2, r3
 8010ace:	f107 0318 	add.w	r3, r7, #24
 8010ad2:	4611      	mov	r1, r2
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fd fe87 	bl	800e7e8 <inc_lock>
 8010ada:	4602      	mov	r2, r0
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	691b      	ldr	r3, [r3, #16]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d102      	bne.n	8010aee <f_open+0x226>
 8010ae8:	2302      	movs	r3, #2
 8010aea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010aee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f040 80a3 	bne.w	8010c3e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010afc:	4611      	mov	r1, r2
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fe fd29 	bl	800f556 <ld_clust>
 8010b04:	4602      	mov	r2, r0
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0c:	331c      	adds	r3, #28
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7fd fd04 	bl	800e51c <ld_dword>
 8010b14:	4602      	mov	r2, r0
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010b20:	697a      	ldr	r2, [r7, #20]
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	88da      	ldrh	r2, [r3, #6]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	79fa      	ldrb	r2, [r7, #7]
 8010b32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2200      	movs	r2, #0
 8010b38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2200      	movs	r2, #0
 8010b44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	3330      	adds	r3, #48	@ 0x30
 8010b4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010b4e:	2100      	movs	r1, #0
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7fd fd6e 	bl	800e632 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010b56:	79fb      	ldrb	r3, [r7, #7]
 8010b58:	f003 0320 	and.w	r3, r3, #32
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d06e      	beq.n	8010c3e <f_open+0x376>
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d06a      	beq.n	8010c3e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	68da      	ldr	r2, [r3, #12]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	895b      	ldrh	r3, [r3, #10]
 8010b74:	461a      	mov	r2, r3
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	899b      	ldrh	r3, [r3, #12]
 8010b7a:	fb02 f303 	mul.w	r3, r2, r3
 8010b7e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	689b      	ldr	r3, [r3, #8]
 8010b84:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	68db      	ldr	r3, [r3, #12]
 8010b8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010b8c:	e016      	b.n	8010bbc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fe f817 	bl	800ebc6 <get_fat>
 8010b98:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d802      	bhi.n	8010ba6 <f_open+0x2de>
 8010ba0:	2302      	movs	r3, #2
 8010ba2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010ba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bac:	d102      	bne.n	8010bb4 <f_open+0x2ec>
 8010bae:	2301      	movs	r3, #1
 8010bb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010bb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bb8:	1ad3      	subs	r3, r2, r3
 8010bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010bbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d103      	bne.n	8010bcc <f_open+0x304>
 8010bc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d8e0      	bhi.n	8010b8e <f_open+0x2c6>
				}
				fp->clust = clst;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010bd0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010bd2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d131      	bne.n	8010c3e <f_open+0x376>
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	899b      	ldrh	r3, [r3, #12]
 8010bde:	461a      	mov	r2, r3
 8010be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010be6:	fb01 f202 	mul.w	r2, r1, r2
 8010bea:	1a9b      	subs	r3, r3, r2
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d026      	beq.n	8010c3e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7fd ffc7 	bl	800eb88 <clust2sect>
 8010bfa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d103      	bne.n	8010c0a <f_open+0x342>
						res = FR_INT_ERR;
 8010c02:	2302      	movs	r3, #2
 8010c04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010c08:	e019      	b.n	8010c3e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	899b      	ldrh	r3, [r3, #12]
 8010c0e:	461a      	mov	r2, r3
 8010c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010c12:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c18:	441a      	add	r2, r3
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	7858      	ldrb	r0, [r3, #1]
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	6a1a      	ldr	r2, [r3, #32]
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	f7fd fbff 	bl	800e430 <disk_read>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <f_open+0x376>
 8010c38:	2301      	movs	r3, #1
 8010c3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010c3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d002      	beq.n	8010c4c <f_open+0x384>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3768      	adds	r7, #104	@ 0x68
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08c      	sub	sp, #48	@ 0x30
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	60b9      	str	r1, [r7, #8]
 8010c62:	607a      	str	r2, [r7, #4]
 8010c64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	f107 0210 	add.w	r2, r7, #16
 8010c76:	4611      	mov	r1, r2
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7ff fda9 	bl	80107d0 <validate>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d107      	bne.n	8010c9c <f_write+0x44>
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	7d5b      	ldrb	r3, [r3, #21]
 8010c90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010c94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d002      	beq.n	8010ca2 <f_write+0x4a>
 8010c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010ca0:	e16a      	b.n	8010f78 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	7d1b      	ldrb	r3, [r3, #20]
 8010ca6:	f003 0302 	and.w	r3, r3, #2
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d101      	bne.n	8010cb2 <f_write+0x5a>
 8010cae:	2307      	movs	r3, #7
 8010cb0:	e162      	b.n	8010f78 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	699a      	ldr	r2, [r3, #24]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	441a      	add	r2, r3
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	699b      	ldr	r3, [r3, #24]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	f080 814c 	bcs.w	8010f5c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	699b      	ldr	r3, [r3, #24]
 8010cc8:	43db      	mvns	r3, r3
 8010cca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010ccc:	e146      	b.n	8010f5c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	699b      	ldr	r3, [r3, #24]
 8010cd2:	693a      	ldr	r2, [r7, #16]
 8010cd4:	8992      	ldrh	r2, [r2, #12]
 8010cd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cda:	fb01 f202 	mul.w	r2, r1, r2
 8010cde:	1a9b      	subs	r3, r3, r2
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f040 80f1 	bne.w	8010ec8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	699b      	ldr	r3, [r3, #24]
 8010cea:	693a      	ldr	r2, [r7, #16]
 8010cec:	8992      	ldrh	r2, [r2, #12]
 8010cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cf2:	693a      	ldr	r2, [r7, #16]
 8010cf4:	8952      	ldrh	r2, [r2, #10]
 8010cf6:	3a01      	subs	r2, #1
 8010cf8:	4013      	ands	r3, r2
 8010cfa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d143      	bne.n	8010d8a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	699b      	ldr	r3, [r3, #24]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d10c      	bne.n	8010d24 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	689b      	ldr	r3, [r3, #8]
 8010d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d11a      	bne.n	8010d4c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2100      	movs	r1, #0
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fe f9a5 	bl	800f06a <create_chain>
 8010d20:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010d22:	e013      	b.n	8010d4c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d007      	beq.n	8010d3c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	699b      	ldr	r3, [r3, #24]
 8010d30:	4619      	mov	r1, r3
 8010d32:	68f8      	ldr	r0, [r7, #12]
 8010d34:	f7fe fa31 	bl	800f19a <clmt_clust>
 8010d38:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010d3a:	e007      	b.n	8010d4c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010d3c:	68fa      	ldr	r2, [r7, #12]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	69db      	ldr	r3, [r3, #28]
 8010d42:	4619      	mov	r1, r3
 8010d44:	4610      	mov	r0, r2
 8010d46:	f7fe f990 	bl	800f06a <create_chain>
 8010d4a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	f000 8109 	beq.w	8010f66 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d56:	2b01      	cmp	r3, #1
 8010d58:	d104      	bne.n	8010d64 <f_write+0x10c>
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2202      	movs	r2, #2
 8010d5e:	755a      	strb	r2, [r3, #21]
 8010d60:	2302      	movs	r3, #2
 8010d62:	e109      	b.n	8010f78 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d6a:	d104      	bne.n	8010d76 <f_write+0x11e>
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2201      	movs	r2, #1
 8010d70:	755a      	strb	r2, [r3, #21]
 8010d72:	2301      	movs	r3, #1
 8010d74:	e100      	b.n	8010f78 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d7a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d102      	bne.n	8010d8a <f_write+0x132>
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d88:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	7d1b      	ldrb	r3, [r3, #20]
 8010d8e:	b25b      	sxtb	r3, r3
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	da18      	bge.n	8010dc6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	7858      	ldrb	r0, [r3, #1]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6a1a      	ldr	r2, [r3, #32]
 8010da2:	2301      	movs	r3, #1
 8010da4:	f7fd fb64 	bl	800e470 <disk_write>
 8010da8:	4603      	mov	r3, r0
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d004      	beq.n	8010db8 <f_write+0x160>
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2201      	movs	r2, #1
 8010db2:	755a      	strb	r2, [r3, #21]
 8010db4:	2301      	movs	r3, #1
 8010db6:	e0df      	b.n	8010f78 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	7d1b      	ldrb	r3, [r3, #20]
 8010dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010dc6:	693a      	ldr	r2, [r7, #16]
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	69db      	ldr	r3, [r3, #28]
 8010dcc:	4619      	mov	r1, r3
 8010dce:	4610      	mov	r0, r2
 8010dd0:	f7fd feda 	bl	800eb88 <clust2sect>
 8010dd4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d104      	bne.n	8010de6 <f_write+0x18e>
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2202      	movs	r2, #2
 8010de0:	755a      	strb	r2, [r3, #21]
 8010de2:	2302      	movs	r3, #2
 8010de4:	e0c8      	b.n	8010f78 <f_write+0x320>
			sect += csect;
 8010de6:	697a      	ldr	r2, [r7, #20]
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	4413      	add	r3, r2
 8010dec:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	899b      	ldrh	r3, [r3, #12]
 8010df2:	461a      	mov	r2, r3
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010dfa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010dfc:	6a3b      	ldr	r3, [r7, #32]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d043      	beq.n	8010e8a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010e02:	69ba      	ldr	r2, [r7, #24]
 8010e04:	6a3b      	ldr	r3, [r7, #32]
 8010e06:	4413      	add	r3, r2
 8010e08:	693a      	ldr	r2, [r7, #16]
 8010e0a:	8952      	ldrh	r2, [r2, #10]
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d905      	bls.n	8010e1c <f_write+0x1c4>
					cc = fs->csize - csect;
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	895b      	ldrh	r3, [r3, #10]
 8010e14:	461a      	mov	r2, r3
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	1ad3      	subs	r3, r2, r3
 8010e1a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	7858      	ldrb	r0, [r3, #1]
 8010e20:	6a3b      	ldr	r3, [r7, #32]
 8010e22:	697a      	ldr	r2, [r7, #20]
 8010e24:	69f9      	ldr	r1, [r7, #28]
 8010e26:	f7fd fb23 	bl	800e470 <disk_write>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d004      	beq.n	8010e3a <f_write+0x1e2>
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2201      	movs	r2, #1
 8010e34:	755a      	strb	r2, [r3, #21]
 8010e36:	2301      	movs	r3, #1
 8010e38:	e09e      	b.n	8010f78 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	6a1a      	ldr	r2, [r3, #32]
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	1ad3      	subs	r3, r2, r3
 8010e42:	6a3a      	ldr	r2, [r7, #32]
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d918      	bls.n	8010e7a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6a1a      	ldr	r2, [r3, #32]
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	693a      	ldr	r2, [r7, #16]
 8010e58:	8992      	ldrh	r2, [r2, #12]
 8010e5a:	fb02 f303 	mul.w	r3, r2, r3
 8010e5e:	69fa      	ldr	r2, [r7, #28]
 8010e60:	18d1      	adds	r1, r2, r3
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	899b      	ldrh	r3, [r3, #12]
 8010e66:	461a      	mov	r2, r3
 8010e68:	f7fd fbc2 	bl	800e5f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	7d1b      	ldrb	r3, [r3, #20]
 8010e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e74:	b2da      	uxtb	r2, r3
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	899b      	ldrh	r3, [r3, #12]
 8010e7e:	461a      	mov	r2, r3
 8010e80:	6a3b      	ldr	r3, [r7, #32]
 8010e82:	fb02 f303 	mul.w	r3, r2, r3
 8010e86:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8010e88:	e04b      	b.n	8010f22 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	6a1b      	ldr	r3, [r3, #32]
 8010e8e:	697a      	ldr	r2, [r7, #20]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d016      	beq.n	8010ec2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	699a      	ldr	r2, [r3, #24]
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d210      	bcs.n	8010ec2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	7858      	ldrb	r0, [r3, #1]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010eaa:	2301      	movs	r3, #1
 8010eac:	697a      	ldr	r2, [r7, #20]
 8010eae:	f7fd fabf 	bl	800e430 <disk_read>
 8010eb2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d004      	beq.n	8010ec2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2201      	movs	r2, #1
 8010ebc:	755a      	strb	r2, [r3, #21]
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e05a      	b.n	8010f78 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	697a      	ldr	r2, [r7, #20]
 8010ec6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	899b      	ldrh	r3, [r3, #12]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	699b      	ldr	r3, [r3, #24]
 8010ed2:	693a      	ldr	r2, [r7, #16]
 8010ed4:	8992      	ldrh	r2, [r2, #12]
 8010ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8010eda:	fb01 f202 	mul.w	r2, r1, r2
 8010ede:	1a9b      	subs	r3, r3, r2
 8010ee0:	1ac3      	subs	r3, r0, r3
 8010ee2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d901      	bls.n	8010ef0 <f_write+0x298>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	699b      	ldr	r3, [r3, #24]
 8010efa:	693a      	ldr	r2, [r7, #16]
 8010efc:	8992      	ldrh	r2, [r2, #12]
 8010efe:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f02:	fb00 f202 	mul.w	r2, r0, r2
 8010f06:	1a9b      	subs	r3, r3, r2
 8010f08:	440b      	add	r3, r1
 8010f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f0c:	69f9      	ldr	r1, [r7, #28]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fd fb6e 	bl	800e5f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	7d1b      	ldrb	r3, [r3, #20]
 8010f18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010f1c:	b2da      	uxtb	r2, r3
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010f22:	69fa      	ldr	r2, [r7, #28]
 8010f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f26:	4413      	add	r3, r2
 8010f28:	61fb      	str	r3, [r7, #28]
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	699a      	ldr	r2, [r3, #24]
 8010f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f30:	441a      	add	r2, r3
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	619a      	str	r2, [r3, #24]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	68da      	ldr	r2, [r3, #12]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	699b      	ldr	r3, [r3, #24]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	bf38      	it	cc
 8010f42:	461a      	movcc	r2, r3
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	60da      	str	r2, [r3, #12]
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f4e:	441a      	add	r2, r3
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	601a      	str	r2, [r3, #0]
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	f47f aeb5 	bne.w	8010cce <f_write+0x76>
 8010f64:	e000      	b.n	8010f68 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010f66:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	7d1b      	ldrb	r3, [r3, #20]
 8010f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010f76:	2300      	movs	r3, #0
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3730      	adds	r7, #48	@ 0x30
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b086      	sub	sp, #24
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f107 0208 	add.w	r2, r7, #8
 8010f8e:	4611      	mov	r1, r2
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7ff fc1d 	bl	80107d0 <validate>
 8010f96:	4603      	mov	r3, r0
 8010f98:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010f9a:	7dfb      	ldrb	r3, [r7, #23]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d168      	bne.n	8011072 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	7d1b      	ldrb	r3, [r3, #20]
 8010fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d062      	beq.n	8011072 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	7d1b      	ldrb	r3, [r3, #20]
 8010fb0:	b25b      	sxtb	r3, r3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	da15      	bge.n	8010fe2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	7858      	ldrb	r0, [r3, #1]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a1a      	ldr	r2, [r3, #32]
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	f7fd fa53 	bl	800e470 <disk_write>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d001      	beq.n	8010fd4 <f_sync+0x54>
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	e04f      	b.n	8011074 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	7d1b      	ldrb	r3, [r3, #20]
 8010fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fdc:	b2da      	uxtb	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010fe2:	f7fc fcc1 	bl	800d968 <get_fattime>
 8010fe6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010fe8:	68ba      	ldr	r2, [r7, #8]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fee:	4619      	mov	r1, r3
 8010ff0:	4610      	mov	r0, r2
 8010ff2:	f7fd fd2b 	bl	800ea4c <move_window>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010ffa:	7dfb      	ldrb	r3, [r7, #23]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d138      	bne.n	8011072 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011004:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	330b      	adds	r3, #11
 801100a:	781a      	ldrb	r2, [r3, #0]
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	330b      	adds	r3, #11
 8011010:	f042 0220 	orr.w	r2, r2, #32
 8011014:	b2d2      	uxtb	r2, r2
 8011016:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6818      	ldr	r0, [r3, #0]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	689b      	ldr	r3, [r3, #8]
 8011020:	461a      	mov	r2, r3
 8011022:	68f9      	ldr	r1, [r7, #12]
 8011024:	f7fe fab6 	bl	800f594 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f103 021c 	add.w	r2, r3, #28
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	4619      	mov	r1, r3
 8011034:	4610      	mov	r0, r2
 8011036:	f7fd faaf 	bl	800e598 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	3316      	adds	r3, #22
 801103e:	6939      	ldr	r1, [r7, #16]
 8011040:	4618      	mov	r0, r3
 8011042:	f7fd faa9 	bl	800e598 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	3312      	adds	r3, #18
 801104a:	2100      	movs	r1, #0
 801104c:	4618      	mov	r0, r3
 801104e:	f7fd fa88 	bl	800e562 <st_word>
					fs->wflag = 1;
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	2201      	movs	r2, #1
 8011056:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	4618      	mov	r0, r3
 801105c:	f7fd fd24 	bl	800eaa8 <sync_fs>
 8011060:	4603      	mov	r3, r0
 8011062:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	7d1b      	ldrb	r3, [r3, #20]
 8011068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801106c:	b2da      	uxtb	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011072:	7dfb      	ldrb	r3, [r7, #23]
}
 8011074:	4618      	mov	r0, r3
 8011076:	3718      	adds	r7, #24
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}

0801107c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7ff ff7b 	bl	8010f80 <f_sync>
 801108a:	4603      	mov	r3, r0
 801108c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801108e:	7bfb      	ldrb	r3, [r7, #15]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d118      	bne.n	80110c6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f107 0208 	add.w	r2, r7, #8
 801109a:	4611      	mov	r1, r2
 801109c:	4618      	mov	r0, r3
 801109e:	f7ff fb97 	bl	80107d0 <validate>
 80110a2:	4603      	mov	r3, r0
 80110a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80110a6:	7bfb      	ldrb	r3, [r7, #15]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d10c      	bne.n	80110c6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	691b      	ldr	r3, [r3, #16]
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7fd fc27 	bl	800e904 <dec_lock>
 80110b6:	4603      	mov	r3, r0
 80110b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80110ba:	7bfb      	ldrb	r3, [r7, #15]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d102      	bne.n	80110c6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80110c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3710      	adds	r7, #16
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b090      	sub	sp, #64	@ 0x40
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f107 0208 	add.w	r2, r7, #8
 80110e0:	4611      	mov	r1, r2
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7ff fb74 	bl	80107d0 <validate>
 80110e8:	4603      	mov	r3, r0
 80110ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80110ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d103      	bne.n	80110fe <f_lseek+0x2e>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	7d5b      	ldrb	r3, [r3, #21]
 80110fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80110fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011102:	2b00      	cmp	r3, #0
 8011104:	d002      	beq.n	801110c <f_lseek+0x3c>
 8011106:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801110a:	e201      	b.n	8011510 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011110:	2b00      	cmp	r3, #0
 8011112:	f000 80d9 	beq.w	80112c8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801111c:	d15a      	bne.n	80111d4 <f_lseek+0x104>
			tbl = fp->cltbl;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011122:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011126:	1d1a      	adds	r2, r3, #4
 8011128:	627a      	str	r2, [r7, #36]	@ 0x24
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	617b      	str	r3, [r7, #20]
 801112e:	2302      	movs	r3, #2
 8011130:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801113a:	2b00      	cmp	r3, #0
 801113c:	d03a      	beq.n	80111b4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801113e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011140:	613b      	str	r3, [r7, #16]
 8011142:	2300      	movs	r3, #0
 8011144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011148:	3302      	adds	r3, #2
 801114a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801114c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801114e:	60fb      	str	r3, [r7, #12]
 8011150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011152:	3301      	adds	r3, #1
 8011154:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801115a:	4618      	mov	r0, r3
 801115c:	f7fd fd33 	bl	800ebc6 <get_fat>
 8011160:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011164:	2b01      	cmp	r3, #1
 8011166:	d804      	bhi.n	8011172 <f_lseek+0xa2>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2202      	movs	r2, #2
 801116c:	755a      	strb	r2, [r3, #21]
 801116e:	2302      	movs	r3, #2
 8011170:	e1ce      	b.n	8011510 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011178:	d104      	bne.n	8011184 <f_lseek+0xb4>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2201      	movs	r2, #1
 801117e:	755a      	strb	r2, [r3, #21]
 8011180:	2301      	movs	r3, #1
 8011182:	e1c5      	b.n	8011510 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	3301      	adds	r3, #1
 8011188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801118a:	429a      	cmp	r2, r3
 801118c:	d0de      	beq.n	801114c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801118e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	429a      	cmp	r2, r3
 8011194:	d809      	bhi.n	80111aa <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011198:	1d1a      	adds	r2, r3, #4
 801119a:	627a      	str	r2, [r7, #36]	@ 0x24
 801119c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801119e:	601a      	str	r2, [r3, #0]
 80111a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a2:	1d1a      	adds	r2, r3, #4
 80111a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80111a6:	693a      	ldr	r2, [r7, #16]
 80111a8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	6a1b      	ldr	r3, [r3, #32]
 80111ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d3c4      	bcc.n	801113e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80111ba:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80111bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d803      	bhi.n	80111cc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80111c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c6:	2200      	movs	r2, #0
 80111c8:	601a      	str	r2, [r3, #0]
 80111ca:	e19f      	b.n	801150c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80111cc:	2311      	movs	r3, #17
 80111ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80111d2:	e19b      	b.n	801150c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	683a      	ldr	r2, [r7, #0]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d902      	bls.n	80111e4 <f_lseek+0x114>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	683a      	ldr	r2, [r7, #0]
 80111e8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f000 818d 	beq.w	801150c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	3b01      	subs	r3, #1
 80111f6:	4619      	mov	r1, r3
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f7fd ffce 	bl	800f19a <clmt_clust>
 80111fe:	4602      	mov	r2, r0
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011204:	68ba      	ldr	r2, [r7, #8]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	69db      	ldr	r3, [r3, #28]
 801120a:	4619      	mov	r1, r3
 801120c:	4610      	mov	r0, r2
 801120e:	f7fd fcbb 	bl	800eb88 <clust2sect>
 8011212:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011214:	69bb      	ldr	r3, [r7, #24]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d104      	bne.n	8011224 <f_lseek+0x154>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2202      	movs	r2, #2
 801121e:	755a      	strb	r2, [r3, #21]
 8011220:	2302      	movs	r3, #2
 8011222:	e175      	b.n	8011510 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	3b01      	subs	r3, #1
 8011228:	68ba      	ldr	r2, [r7, #8]
 801122a:	8992      	ldrh	r2, [r2, #12]
 801122c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011230:	68ba      	ldr	r2, [r7, #8]
 8011232:	8952      	ldrh	r2, [r2, #10]
 8011234:	3a01      	subs	r2, #1
 8011236:	4013      	ands	r3, r2
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	4413      	add	r3, r2
 801123c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	699b      	ldr	r3, [r3, #24]
 8011242:	68ba      	ldr	r2, [r7, #8]
 8011244:	8992      	ldrh	r2, [r2, #12]
 8011246:	fbb3 f1f2 	udiv	r1, r3, r2
 801124a:	fb01 f202 	mul.w	r2, r1, r2
 801124e:	1a9b      	subs	r3, r3, r2
 8011250:	2b00      	cmp	r3, #0
 8011252:	f000 815b 	beq.w	801150c <f_lseek+0x43c>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6a1b      	ldr	r3, [r3, #32]
 801125a:	69ba      	ldr	r2, [r7, #24]
 801125c:	429a      	cmp	r2, r3
 801125e:	f000 8155 	beq.w	801150c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	7d1b      	ldrb	r3, [r3, #20]
 8011266:	b25b      	sxtb	r3, r3
 8011268:	2b00      	cmp	r3, #0
 801126a:	da18      	bge.n	801129e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	7858      	ldrb	r0, [r3, #1]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6a1a      	ldr	r2, [r3, #32]
 801127a:	2301      	movs	r3, #1
 801127c:	f7fd f8f8 	bl	800e470 <disk_write>
 8011280:	4603      	mov	r3, r0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d004      	beq.n	8011290 <f_lseek+0x1c0>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2201      	movs	r2, #1
 801128a:	755a      	strb	r2, [r3, #21]
 801128c:	2301      	movs	r3, #1
 801128e:	e13f      	b.n	8011510 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	7d1b      	ldrb	r3, [r3, #20]
 8011294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011298:	b2da      	uxtb	r2, r3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	7858      	ldrb	r0, [r3, #1]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80112a8:	2301      	movs	r3, #1
 80112aa:	69ba      	ldr	r2, [r7, #24]
 80112ac:	f7fd f8c0 	bl	800e430 <disk_read>
 80112b0:	4603      	mov	r3, r0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d004      	beq.n	80112c0 <f_lseek+0x1f0>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2201      	movs	r2, #1
 80112ba:	755a      	strb	r2, [r3, #21]
 80112bc:	2301      	movs	r3, #1
 80112be:	e127      	b.n	8011510 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	69ba      	ldr	r2, [r7, #24]
 80112c4:	621a      	str	r2, [r3, #32]
 80112c6:	e121      	b.n	801150c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	683a      	ldr	r2, [r7, #0]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d908      	bls.n	80112e4 <f_lseek+0x214>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	7d1b      	ldrb	r3, [r3, #20]
 80112d6:	f003 0302 	and.w	r3, r3, #2
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d102      	bne.n	80112e4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	699b      	ldr	r3, [r3, #24]
 80112e8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80112ea:	2300      	movs	r3, #0
 80112ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80112f2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f000 80b5 	beq.w	8011466 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	895b      	ldrh	r3, [r3, #10]
 8011300:	461a      	mov	r2, r3
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	899b      	ldrh	r3, [r3, #12]
 8011306:	fb02 f303 	mul.w	r3, r2, r3
 801130a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801130c:	6a3b      	ldr	r3, [r7, #32]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d01b      	beq.n	801134a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	1e5a      	subs	r2, r3, #1
 8011316:	69fb      	ldr	r3, [r7, #28]
 8011318:	fbb2 f2f3 	udiv	r2, r2, r3
 801131c:	6a3b      	ldr	r3, [r7, #32]
 801131e:	1e59      	subs	r1, r3, #1
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011326:	429a      	cmp	r2, r3
 8011328:	d30f      	bcc.n	801134a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801132a:	6a3b      	ldr	r3, [r7, #32]
 801132c:	1e5a      	subs	r2, r3, #1
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	425b      	negs	r3, r3
 8011332:	401a      	ands	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	699b      	ldr	r3, [r3, #24]
 801133c:	683a      	ldr	r2, [r7, #0]
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	69db      	ldr	r3, [r3, #28]
 8011346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011348:	e022      	b.n	8011390 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	689b      	ldr	r3, [r3, #8]
 801134e:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011352:	2b00      	cmp	r3, #0
 8011354:	d119      	bne.n	801138a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2100      	movs	r1, #0
 801135a:	4618      	mov	r0, r3
 801135c:	f7fd fe85 	bl	800f06a <create_chain>
 8011360:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011364:	2b01      	cmp	r3, #1
 8011366:	d104      	bne.n	8011372 <f_lseek+0x2a2>
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2202      	movs	r2, #2
 801136c:	755a      	strb	r2, [r3, #21]
 801136e:	2302      	movs	r3, #2
 8011370:	e0ce      	b.n	8011510 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011378:	d104      	bne.n	8011384 <f_lseek+0x2b4>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2201      	movs	r2, #1
 801137e:	755a      	strb	r2, [r3, #21]
 8011380:	2301      	movs	r3, #1
 8011382:	e0c5      	b.n	8011510 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011388:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801138e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011392:	2b00      	cmp	r3, #0
 8011394:	d067      	beq.n	8011466 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011396:	e03a      	b.n	801140e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011398:	683a      	ldr	r2, [r7, #0]
 801139a:	69fb      	ldr	r3, [r7, #28]
 801139c:	1ad3      	subs	r3, r2, r3
 801139e:	603b      	str	r3, [r7, #0]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	699a      	ldr	r2, [r3, #24]
 80113a4:	69fb      	ldr	r3, [r7, #28]
 80113a6:	441a      	add	r2, r3
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	7d1b      	ldrb	r3, [r3, #20]
 80113b0:	f003 0302 	and.w	r3, r3, #2
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d00b      	beq.n	80113d0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80113bc:	4618      	mov	r0, r3
 80113be:	f7fd fe54 	bl	800f06a <create_chain>
 80113c2:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80113c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d108      	bne.n	80113dc <f_lseek+0x30c>
							ofs = 0; break;
 80113ca:	2300      	movs	r3, #0
 80113cc:	603b      	str	r3, [r7, #0]
 80113ce:	e022      	b.n	8011416 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fd fbf6 	bl	800ebc6 <get_fat>
 80113da:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80113dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e2:	d104      	bne.n	80113ee <f_lseek+0x31e>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2201      	movs	r2, #1
 80113e8:	755a      	strb	r2, [r3, #21]
 80113ea:	2301      	movs	r3, #1
 80113ec:	e090      	b.n	8011510 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80113ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d904      	bls.n	80113fe <f_lseek+0x32e>
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	6a1b      	ldr	r3, [r3, #32]
 80113f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d304      	bcc.n	8011408 <f_lseek+0x338>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2202      	movs	r2, #2
 8011402:	755a      	strb	r2, [r3, #21]
 8011404:	2302      	movs	r3, #2
 8011406:	e083      	b.n	8011510 <f_lseek+0x440>
					fp->clust = clst;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801140c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801140e:	683a      	ldr	r2, [r7, #0]
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	429a      	cmp	r2, r3
 8011414:	d8c0      	bhi.n	8011398 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	699a      	ldr	r2, [r3, #24]
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	441a      	add	r2, r3
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	899b      	ldrh	r3, [r3, #12]
 8011426:	461a      	mov	r2, r3
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	fbb3 f1f2 	udiv	r1, r3, r2
 801142e:	fb01 f202 	mul.w	r2, r1, r2
 8011432:	1a9b      	subs	r3, r3, r2
 8011434:	2b00      	cmp	r3, #0
 8011436:	d016      	beq.n	8011466 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801143c:	4618      	mov	r0, r3
 801143e:	f7fd fba3 	bl	800eb88 <clust2sect>
 8011442:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011446:	2b00      	cmp	r3, #0
 8011448:	d104      	bne.n	8011454 <f_lseek+0x384>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2202      	movs	r2, #2
 801144e:	755a      	strb	r2, [r3, #21]
 8011450:	2302      	movs	r3, #2
 8011452:	e05d      	b.n	8011510 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	899b      	ldrh	r3, [r3, #12]
 8011458:	461a      	mov	r2, r3
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011462:	4413      	add	r3, r2
 8011464:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	699a      	ldr	r2, [r3, #24]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	429a      	cmp	r2, r3
 8011470:	d90a      	bls.n	8011488 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	699a      	ldr	r2, [r3, #24]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	7d1b      	ldrb	r3, [r3, #20]
 801147e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011482:	b2da      	uxtb	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	699b      	ldr	r3, [r3, #24]
 801148c:	68ba      	ldr	r2, [r7, #8]
 801148e:	8992      	ldrh	r2, [r2, #12]
 8011490:	fbb3 f1f2 	udiv	r1, r3, r2
 8011494:	fb01 f202 	mul.w	r2, r1, r2
 8011498:	1a9b      	subs	r3, r3, r2
 801149a:	2b00      	cmp	r3, #0
 801149c:	d036      	beq.n	801150c <f_lseek+0x43c>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6a1b      	ldr	r3, [r3, #32]
 80114a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d031      	beq.n	801150c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	7d1b      	ldrb	r3, [r3, #20]
 80114ac:	b25b      	sxtb	r3, r3
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	da18      	bge.n	80114e4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	7858      	ldrb	r0, [r3, #1]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6a1a      	ldr	r2, [r3, #32]
 80114c0:	2301      	movs	r3, #1
 80114c2:	f7fc ffd5 	bl	800e470 <disk_write>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d004      	beq.n	80114d6 <f_lseek+0x406>
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2201      	movs	r2, #1
 80114d0:	755a      	strb	r2, [r3, #21]
 80114d2:	2301      	movs	r3, #1
 80114d4:	e01c      	b.n	8011510 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	7d1b      	ldrb	r3, [r3, #20]
 80114da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80114de:	b2da      	uxtb	r2, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	7858      	ldrb	r0, [r3, #1]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114ee:	2301      	movs	r3, #1
 80114f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80114f2:	f7fc ff9d 	bl	800e430 <disk_read>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d004      	beq.n	8011506 <f_lseek+0x436>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2201      	movs	r2, #1
 8011500:	755a      	strb	r2, [r3, #21]
 8011502:	2301      	movs	r3, #1
 8011504:	e004      	b.n	8011510 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801150a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801150c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011510:	4618      	mov	r0, r3
 8011512:	3740      	adds	r7, #64	@ 0x40
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	460b      	mov	r3, r1
 8011522:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011524:	78fb      	ldrb	r3, [r7, #3]
 8011526:	2b0a      	cmp	r3, #10
 8011528:	d103      	bne.n	8011532 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801152a:	210d      	movs	r1, #13
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7ff fff3 	bl	8011518 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	db25      	blt.n	801158a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	1c5a      	adds	r2, r3, #1
 8011542:	60fa      	str	r2, [r7, #12]
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	4413      	add	r3, r2
 8011548:	78fa      	ldrb	r2, [r7, #3]
 801154a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2b3c      	cmp	r3, #60	@ 0x3c
 8011550:	dd12      	ble.n	8011578 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6818      	ldr	r0, [r3, #0]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f103 010c 	add.w	r1, r3, #12
 801155c:	68fa      	ldr	r2, [r7, #12]
 801155e:	f107 0308 	add.w	r3, r7, #8
 8011562:	f7ff fb79 	bl	8010c58 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011566:	68ba      	ldr	r2, [r7, #8]
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	429a      	cmp	r2, r3
 801156c:	d101      	bne.n	8011572 <putc_bfd+0x5a>
 801156e:	2300      	movs	r3, #0
 8011570:	e001      	b.n	8011576 <putc_bfd+0x5e>
 8011572:	f04f 33ff 	mov.w	r3, #4294967295
 8011576:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	1c5a      	adds	r2, r3, #1
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	609a      	str	r2, [r3, #8]
 8011588:	e000      	b.n	801158c <putc_bfd+0x74>
	if (i < 0) return;
 801158a:	bf00      	nop
}
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}

08011592 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011592:	b580      	push	{r7, lr}
 8011594:	b084      	sub	sp, #16
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	db16      	blt.n	80115d0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6818      	ldr	r0, [r3, #0]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f103 010c 	add.w	r1, r3, #12
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	461a      	mov	r2, r3
 80115b2:	f107 030c 	add.w	r3, r7, #12
 80115b6:	f7ff fb4f 	bl	8010c58 <f_write>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d107      	bne.n	80115d0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	68fa      	ldr	r2, [r7, #12]
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d102      	bne.n	80115d0 <putc_flush+0x3e>
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	689b      	ldr	r3, [r3, #8]
 80115ce:	e001      	b.n	80115d4 <putc_flush+0x42>
	return EOF;
 80115d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3710      	adds	r7, #16
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80115dc:	b480      	push	{r7}
 80115de:	b083      	sub	sp, #12
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	683a      	ldr	r2, [r7, #0]
 80115ea:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2200      	movs	r2, #0
 80115f0:	605a      	str	r2, [r3, #4]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	685a      	ldr	r2, [r3, #4]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	609a      	str	r2, [r3, #8]
}
 80115fa:	bf00      	nop
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
	...

08011608 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8011608:	b40e      	push	{r1, r2, r3}
 801160a:	b580      	push	{r7, lr}
 801160c:	b0a7      	sub	sp, #156	@ 0x9c
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8011612:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011616:	6879      	ldr	r1, [r7, #4]
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff ffdf 	bl	80115dc <putc_init>

	va_start(arp, fmt);
 801161e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011622:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8011624:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011628:	1c5a      	adds	r2, r3, #1
 801162a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8011634:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011638:	2b00      	cmp	r3, #0
 801163a:	f000 81f2 	beq.w	8011a22 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801163e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011642:	2b25      	cmp	r3, #37	@ 0x25
 8011644:	d008      	beq.n	8011658 <f_printf+0x50>
			putc_bfd(&pb, c);
 8011646:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 801164a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801164e:	4611      	mov	r1, r2
 8011650:	4618      	mov	r0, r3
 8011652:	f7ff ff61 	bl	8011518 <putc_bfd>
			continue;
 8011656:	e1e3      	b.n	8011a20 <f_printf+0x418>
		}
		w = f = 0;
 8011658:	2300      	movs	r3, #0
 801165a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801165e:	2300      	movs	r3, #0
 8011660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8011664:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011668:	1c5a      	adds	r2, r3, #1
 801166a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8011674:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011678:	2b30      	cmp	r3, #48	@ 0x30
 801167a:	d10b      	bne.n	8011694 <f_printf+0x8c>
			f = 1; c = *fmt++;
 801167c:	2301      	movs	r3, #1
 801167e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011686:	1c5a      	adds	r2, r3, #1
 8011688:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8011692:	e024      	b.n	80116de <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8011694:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011698:	2b2d      	cmp	r3, #45	@ 0x2d
 801169a:	d120      	bne.n	80116de <f_printf+0xd6>
				f = 2; c = *fmt++;
 801169c:	2302      	movs	r3, #2
 801169e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80116a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80116a6:	1c5a      	adds	r2, r3, #1
 80116a8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80116b2:	e014      	b.n	80116de <f_printf+0xd6>
			w = w * 10 + c - '0';
 80116b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80116b8:	4613      	mov	r3, r2
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	4413      	add	r3, r2
 80116be:	005b      	lsls	r3, r3, #1
 80116c0:	461a      	mov	r2, r3
 80116c2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80116c6:	4413      	add	r3, r2
 80116c8:	3b30      	subs	r3, #48	@ 0x30
 80116ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 80116ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80116d2:	1c5a      	adds	r2, r3, #1
 80116d4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 80116de:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80116e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80116e4:	d903      	bls.n	80116ee <f_printf+0xe6>
 80116e6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80116ea:	2b39      	cmp	r3, #57	@ 0x39
 80116ec:	d9e2      	bls.n	80116b4 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80116ee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80116f2:	2b6c      	cmp	r3, #108	@ 0x6c
 80116f4:	d003      	beq.n	80116fe <f_printf+0xf6>
 80116f6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80116fa:	2b4c      	cmp	r3, #76	@ 0x4c
 80116fc:	d10d      	bne.n	801171a <f_printf+0x112>
			f |= 4; c = *fmt++;
 80116fe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011702:	f043 0304 	orr.w	r3, r3, #4
 8011706:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801170a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 801171a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801171e:	2b00      	cmp	r3, #0
 8011720:	f000 8181 	beq.w	8011a26 <f_printf+0x41e>
		d = c;
 8011724:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011728:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 801172c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011730:	2b60      	cmp	r3, #96	@ 0x60
 8011732:	d908      	bls.n	8011746 <f_printf+0x13e>
 8011734:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011738:	2b7a      	cmp	r3, #122	@ 0x7a
 801173a:	d804      	bhi.n	8011746 <f_printf+0x13e>
 801173c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011740:	3b20      	subs	r3, #32
 8011742:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8011746:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801174a:	3b42      	subs	r3, #66	@ 0x42
 801174c:	2b16      	cmp	r3, #22
 801174e:	f200 8098 	bhi.w	8011882 <f_printf+0x27a>
 8011752:	a201      	add	r2, pc, #4	@ (adr r2, 8011758 <f_printf+0x150>)
 8011754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011758:	08011863 	.word	0x08011863
 801175c:	0801184b 	.word	0x0801184b
 8011760:	08011873 	.word	0x08011873
 8011764:	08011883 	.word	0x08011883
 8011768:	08011883 	.word	0x08011883
 801176c:	08011883 	.word	0x08011883
 8011770:	08011883 	.word	0x08011883
 8011774:	08011883 	.word	0x08011883
 8011778:	08011883 	.word	0x08011883
 801177c:	08011883 	.word	0x08011883
 8011780:	08011883 	.word	0x08011883
 8011784:	08011883 	.word	0x08011883
 8011788:	08011883 	.word	0x08011883
 801178c:	0801186b 	.word	0x0801186b
 8011790:	08011883 	.word	0x08011883
 8011794:	08011883 	.word	0x08011883
 8011798:	08011883 	.word	0x08011883
 801179c:	080117b5 	.word	0x080117b5
 80117a0:	08011883 	.word	0x08011883
 80117a4:	08011873 	.word	0x08011873
 80117a8:	08011883 	.word	0x08011883
 80117ac:	08011883 	.word	0x08011883
 80117b0:	0801187b 	.word	0x0801187b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80117b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80117b6:	1d1a      	adds	r2, r3, #4
 80117b8:	67ba      	str	r2, [r7, #120]	@ 0x78
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 80117be:	2300      	movs	r3, #0
 80117c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80117c4:	e004      	b.n	80117d0 <f_printf+0x1c8>
 80117c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117ca:	3301      	adds	r3, #1
 80117cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80117d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80117d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117d6:	4413      	add	r3, r2
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d1f3      	bne.n	80117c6 <f_printf+0x1be>
			if (!(f & 2)) {
 80117de:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80117e2:	f003 0302 	and.w	r3, r3, #2
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d11a      	bne.n	8011820 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80117ea:	e005      	b.n	80117f8 <f_printf+0x1f0>
 80117ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80117f0:	2120      	movs	r1, #32
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7ff fe90 	bl	8011518 <putc_bfd>
 80117f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117fc:	1c5a      	adds	r2, r3, #1
 80117fe:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011802:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011806:	429a      	cmp	r2, r3
 8011808:	d8f0      	bhi.n	80117ec <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801180a:	e009      	b.n	8011820 <f_printf+0x218>
 801180c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801180e:	1c5a      	adds	r2, r3, #1
 8011810:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011812:	781a      	ldrb	r2, [r3, #0]
 8011814:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011818:	4611      	mov	r1, r2
 801181a:	4618      	mov	r0, r3
 801181c:	f7ff fe7c 	bl	8011518 <putc_bfd>
 8011820:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d1f1      	bne.n	801180c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8011828:	e005      	b.n	8011836 <f_printf+0x22e>
 801182a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801182e:	2120      	movs	r1, #32
 8011830:	4618      	mov	r0, r3
 8011832:	f7ff fe71 	bl	8011518 <putc_bfd>
 8011836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801183a:	1c5a      	adds	r2, r3, #1
 801183c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011840:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011844:	429a      	cmp	r2, r3
 8011846:	d8f0      	bhi.n	801182a <f_printf+0x222>
			continue;
 8011848:	e0ea      	b.n	8011a20 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801184a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801184c:	1d1a      	adds	r2, r3, #4
 801184e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	b2da      	uxtb	r2, r3
 8011854:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011858:	4611      	mov	r1, r2
 801185a:	4618      	mov	r0, r3
 801185c:	f7ff fe5c 	bl	8011518 <putc_bfd>
 8011860:	e0de      	b.n	8011a20 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8011862:	2302      	movs	r3, #2
 8011864:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011868:	e014      	b.n	8011894 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801186a:	2308      	movs	r3, #8
 801186c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011870:	e010      	b.n	8011894 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8011872:	230a      	movs	r3, #10
 8011874:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011878:	e00c      	b.n	8011894 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801187a:	2310      	movs	r3, #16
 801187c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011880:	e008      	b.n	8011894 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8011882:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011886:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801188a:	4611      	mov	r1, r2
 801188c:	4618      	mov	r0, r3
 801188e:	f7ff fe43 	bl	8011518 <putc_bfd>
 8011892:	e0c5      	b.n	8011a20 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8011894:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011898:	f003 0304 	and.w	r3, r3, #4
 801189c:	2b00      	cmp	r3, #0
 801189e:	d004      	beq.n	80118aa <f_printf+0x2a2>
 80118a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118a2:	1d1a      	adds	r2, r3, #4
 80118a4:	67ba      	str	r2, [r7, #120]	@ 0x78
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	e00c      	b.n	80118c4 <f_printf+0x2bc>
 80118aa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80118ae:	2b44      	cmp	r3, #68	@ 0x44
 80118b0:	d104      	bne.n	80118bc <f_printf+0x2b4>
 80118b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118b4:	1d1a      	adds	r2, r3, #4
 80118b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	e003      	b.n	80118c4 <f_printf+0x2bc>
 80118bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80118be:	1d1a      	adds	r2, r3, #4
 80118c0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80118c8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80118cc:	2b44      	cmp	r3, #68	@ 0x44
 80118ce:	d10e      	bne.n	80118ee <f_printf+0x2e6>
 80118d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	da0a      	bge.n	80118ee <f_printf+0x2e6>
			v = 0 - v;
 80118d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80118dc:	425b      	negs	r3, r3
 80118de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 80118e2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80118e6:	f043 0308 	orr.w	r3, r3, #8
 80118ea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 80118ee:	2300      	movs	r3, #0
 80118f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80118f4:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80118f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80118fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011900:	fb01 f202 	mul.w	r2, r1, r2
 8011904:	1a9b      	subs	r3, r3, r2
 8011906:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 801190a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 801190e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011912:	fbb2 f3f3 	udiv	r3, r2, r3
 8011916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801191a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801191e:	2b09      	cmp	r3, #9
 8011920:	d90b      	bls.n	801193a <f_printf+0x332>
 8011922:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011926:	2b78      	cmp	r3, #120	@ 0x78
 8011928:	d101      	bne.n	801192e <f_printf+0x326>
 801192a:	2227      	movs	r2, #39	@ 0x27
 801192c:	e000      	b.n	8011930 <f_printf+0x328>
 801192e:	2207      	movs	r2, #7
 8011930:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011934:	4413      	add	r3, r2
 8011936:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 801193a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801193e:	1c5a      	adds	r2, r3, #1
 8011940:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011944:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011948:	3230      	adds	r2, #48	@ 0x30
 801194a:	b2d2      	uxtb	r2, r2
 801194c:	3398      	adds	r3, #152	@ 0x98
 801194e:	443b      	add	r3, r7
 8011950:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8011954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011958:	2b00      	cmp	r3, #0
 801195a:	d003      	beq.n	8011964 <f_printf+0x35c>
 801195c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011960:	2b1f      	cmp	r3, #31
 8011962:	d9c7      	bls.n	80118f4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8011964:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011968:	f003 0308 	and.w	r3, r3, #8
 801196c:	2b00      	cmp	r3, #0
 801196e:	d009      	beq.n	8011984 <f_printf+0x37c>
 8011970:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011974:	1c5a      	adds	r2, r3, #1
 8011976:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801197a:	3398      	adds	r3, #152	@ 0x98
 801197c:	443b      	add	r3, r7
 801197e:	222d      	movs	r2, #45	@ 0x2d
 8011980:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8011984:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801198c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011990:	f003 0301 	and.w	r3, r3, #1
 8011994:	2b00      	cmp	r3, #0
 8011996:	d001      	beq.n	801199c <f_printf+0x394>
 8011998:	2330      	movs	r3, #48	@ 0x30
 801199a:	e000      	b.n	801199e <f_printf+0x396>
 801199c:	2320      	movs	r3, #32
 801199e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80119a2:	e007      	b.n	80119b4 <f_printf+0x3ac>
 80119a4:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80119a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80119ac:	4611      	mov	r1, r2
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7ff fdb2 	bl	8011518 <putc_bfd>
 80119b4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80119b8:	f003 0302 	and.w	r3, r3, #2
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d108      	bne.n	80119d2 <f_printf+0x3ca>
 80119c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80119c4:	1c5a      	adds	r2, r3, #1
 80119c6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80119ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d8e8      	bhi.n	80119a4 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80119d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80119d6:	3b01      	subs	r3, #1
 80119d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80119dc:	f107 020c 	add.w	r2, r7, #12
 80119e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80119e4:	4413      	add	r3, r2
 80119e6:	781a      	ldrb	r2, [r3, #0]
 80119e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80119ec:	4611      	mov	r1, r2
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7ff fd92 	bl	8011518 <putc_bfd>
		} while (i);
 80119f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d1ea      	bne.n	80119d2 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80119fc:	e007      	b.n	8011a0e <f_printf+0x406>
 80119fe:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011a06:	4611      	mov	r1, r2
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7ff fd85 	bl	8011518 <putc_bfd>
 8011a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a12:	1c5a      	adds	r2, r3, #1
 8011a14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011a18:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d8ee      	bhi.n	80119fe <f_printf+0x3f6>
		c = *fmt++;
 8011a20:	e600      	b.n	8011624 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8011a22:	bf00      	nop
 8011a24:	e000      	b.n	8011a28 <f_printf+0x420>
		if (!c) break;
 8011a26:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8011a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7ff fdb0 	bl	8011592 <putc_flush>
 8011a32:	4603      	mov	r3, r0
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	379c      	adds	r7, #156	@ 0x9c
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a3e:	b003      	add	sp, #12
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop

08011a44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b087      	sub	sp, #28
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	60f8      	str	r0, [r7, #12]
 8011a4c:	60b9      	str	r1, [r7, #8]
 8011a4e:	4613      	mov	r3, r2
 8011a50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011a52:	2301      	movs	r3, #1
 8011a54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011a56:	2300      	movs	r3, #0
 8011a58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8011ad8 <FATFS_LinkDriverEx+0x94>)
 8011a5c:	7a5b      	ldrb	r3, [r3, #9]
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d131      	bne.n	8011ac8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011a64:	4b1c      	ldr	r3, [pc, #112]	@ (8011ad8 <FATFS_LinkDriverEx+0x94>)
 8011a66:	7a5b      	ldrb	r3, [r3, #9]
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8011ad8 <FATFS_LinkDriverEx+0x94>)
 8011a6e:	2100      	movs	r1, #0
 8011a70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a72:	4b19      	ldr	r3, [pc, #100]	@ (8011ad8 <FATFS_LinkDriverEx+0x94>)
 8011a74:	7a5b      	ldrb	r3, [r3, #9]
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	4a17      	ldr	r2, [pc, #92]	@ (8011ad8 <FATFS_LinkDriverEx+0x94>)
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	4413      	add	r3, r2
 8011a7e:	68fa      	ldr	r2, [r7, #12]
 8011a80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a82:	4b15      	ldr	r3, [pc, #84]	@ (8011ad8 <FATFS_LinkDriverEx+0x94>)
 8011a84:	7a5b      	ldrb	r3, [r3, #9]
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	461a      	mov	r2, r3
 8011a8a:	4b13      	ldr	r3, [pc, #76]	@ (8011ad8 <FATFS_LinkDriverEx+0x94>)
 8011a8c:	4413      	add	r3, r2
 8011a8e:	79fa      	ldrb	r2, [r7, #7]
 8011a90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011a92:	4b11      	ldr	r3, [pc, #68]	@ (8011ad8 <FATFS_LinkDriverEx+0x94>)
 8011a94:	7a5b      	ldrb	r3, [r3, #9]
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	1c5a      	adds	r2, r3, #1
 8011a9a:	b2d1      	uxtb	r1, r2
 8011a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8011ad8 <FATFS_LinkDriverEx+0x94>)
 8011a9e:	7251      	strb	r1, [r2, #9]
 8011aa0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011aa2:	7dbb      	ldrb	r3, [r7, #22]
 8011aa4:	3330      	adds	r3, #48	@ 0x30
 8011aa6:	b2da      	uxtb	r2, r3
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	223a      	movs	r2, #58	@ 0x3a
 8011ab2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	3302      	adds	r3, #2
 8011ab8:	222f      	movs	r2, #47	@ 0x2f
 8011aba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	3303      	adds	r3, #3
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	371c      	adds	r7, #28
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop
 8011ad8:	240029b4 	.word	0x240029b4

08011adc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	6839      	ldr	r1, [r7, #0]
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f7ff ffaa 	bl	8011a44 <FATFS_LinkDriverEx>
 8011af0:	4603      	mov	r3, r0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3708      	adds	r7, #8
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
	...

08011afc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011afc:	b480      	push	{r7}
 8011afe:	b085      	sub	sp, #20
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	4603      	mov	r3, r0
 8011b04:	6039      	str	r1, [r7, #0]
 8011b06:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011b08:	88fb      	ldrh	r3, [r7, #6]
 8011b0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011b0c:	d802      	bhi.n	8011b14 <ff_convert+0x18>
		c = chr;
 8011b0e:	88fb      	ldrh	r3, [r7, #6]
 8011b10:	81fb      	strh	r3, [r7, #14]
 8011b12:	e025      	b.n	8011b60 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d00b      	beq.n	8011b32 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011b1a:	88fb      	ldrh	r3, [r7, #6]
 8011b1c:	2bff      	cmp	r3, #255	@ 0xff
 8011b1e:	d805      	bhi.n	8011b2c <ff_convert+0x30>
 8011b20:	88fb      	ldrh	r3, [r7, #6]
 8011b22:	3b80      	subs	r3, #128	@ 0x80
 8011b24:	4a12      	ldr	r2, [pc, #72]	@ (8011b70 <ff_convert+0x74>)
 8011b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b2a:	e000      	b.n	8011b2e <ff_convert+0x32>
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	81fb      	strh	r3, [r7, #14]
 8011b30:	e016      	b.n	8011b60 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011b32:	2300      	movs	r3, #0
 8011b34:	81fb      	strh	r3, [r7, #14]
 8011b36:	e009      	b.n	8011b4c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011b38:	89fb      	ldrh	r3, [r7, #14]
 8011b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8011b70 <ff_convert+0x74>)
 8011b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b40:	88fa      	ldrh	r2, [r7, #6]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d006      	beq.n	8011b54 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011b46:	89fb      	ldrh	r3, [r7, #14]
 8011b48:	3301      	adds	r3, #1
 8011b4a:	81fb      	strh	r3, [r7, #14]
 8011b4c:	89fb      	ldrh	r3, [r7, #14]
 8011b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8011b50:	d9f2      	bls.n	8011b38 <ff_convert+0x3c>
 8011b52:	e000      	b.n	8011b56 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011b54:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011b56:	89fb      	ldrh	r3, [r7, #14]
 8011b58:	3380      	adds	r3, #128	@ 0x80
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011b60:	89fb      	ldrh	r3, [r7, #14]
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3714      	adds	r7, #20
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop
 8011b70:	08012138 	.word	0x08012138

08011b74 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b087      	sub	sp, #28
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011b7e:	88fb      	ldrh	r3, [r7, #6]
 8011b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011b84:	d201      	bcs.n	8011b8a <ff_wtoupper+0x16>
 8011b86:	4b3e      	ldr	r3, [pc, #248]	@ (8011c80 <ff_wtoupper+0x10c>)
 8011b88:	e000      	b.n	8011b8c <ff_wtoupper+0x18>
 8011b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8011c84 <ff_wtoupper+0x110>)
 8011b8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	1c9a      	adds	r2, r3, #2
 8011b92:	617a      	str	r2, [r7, #20]
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011b98:	8a7b      	ldrh	r3, [r7, #18]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d068      	beq.n	8011c70 <ff_wtoupper+0xfc>
 8011b9e:	88fa      	ldrh	r2, [r7, #6]
 8011ba0:	8a7b      	ldrh	r3, [r7, #18]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d364      	bcc.n	8011c70 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	1c9a      	adds	r2, r3, #2
 8011baa:	617a      	str	r2, [r7, #20]
 8011bac:	881b      	ldrh	r3, [r3, #0]
 8011bae:	823b      	strh	r3, [r7, #16]
 8011bb0:	8a3b      	ldrh	r3, [r7, #16]
 8011bb2:	0a1b      	lsrs	r3, r3, #8
 8011bb4:	81fb      	strh	r3, [r7, #14]
 8011bb6:	8a3b      	ldrh	r3, [r7, #16]
 8011bb8:	b2db      	uxtb	r3, r3
 8011bba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011bbc:	88fa      	ldrh	r2, [r7, #6]
 8011bbe:	8a79      	ldrh	r1, [r7, #18]
 8011bc0:	8a3b      	ldrh	r3, [r7, #16]
 8011bc2:	440b      	add	r3, r1
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	da49      	bge.n	8011c5c <ff_wtoupper+0xe8>
			switch (cmd) {
 8011bc8:	89fb      	ldrh	r3, [r7, #14]
 8011bca:	2b08      	cmp	r3, #8
 8011bcc:	d84f      	bhi.n	8011c6e <ff_wtoupper+0xfa>
 8011bce:	a201      	add	r2, pc, #4	@ (adr r2, 8011bd4 <ff_wtoupper+0x60>)
 8011bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bd4:	08011bf9 	.word	0x08011bf9
 8011bd8:	08011c0b 	.word	0x08011c0b
 8011bdc:	08011c21 	.word	0x08011c21
 8011be0:	08011c29 	.word	0x08011c29
 8011be4:	08011c31 	.word	0x08011c31
 8011be8:	08011c39 	.word	0x08011c39
 8011bec:	08011c41 	.word	0x08011c41
 8011bf0:	08011c49 	.word	0x08011c49
 8011bf4:	08011c51 	.word	0x08011c51
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011bf8:	88fa      	ldrh	r2, [r7, #6]
 8011bfa:	8a7b      	ldrh	r3, [r7, #18]
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	005b      	lsls	r3, r3, #1
 8011c00:	697a      	ldr	r2, [r7, #20]
 8011c02:	4413      	add	r3, r2
 8011c04:	881b      	ldrh	r3, [r3, #0]
 8011c06:	80fb      	strh	r3, [r7, #6]
 8011c08:	e027      	b.n	8011c5a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011c0a:	88fa      	ldrh	r2, [r7, #6]
 8011c0c:	8a7b      	ldrh	r3, [r7, #18]
 8011c0e:	1ad3      	subs	r3, r2, r3
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	f003 0301 	and.w	r3, r3, #1
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	88fa      	ldrh	r2, [r7, #6]
 8011c1a:	1ad3      	subs	r3, r2, r3
 8011c1c:	80fb      	strh	r3, [r7, #6]
 8011c1e:	e01c      	b.n	8011c5a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011c20:	88fb      	ldrh	r3, [r7, #6]
 8011c22:	3b10      	subs	r3, #16
 8011c24:	80fb      	strh	r3, [r7, #6]
 8011c26:	e018      	b.n	8011c5a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011c28:	88fb      	ldrh	r3, [r7, #6]
 8011c2a:	3b20      	subs	r3, #32
 8011c2c:	80fb      	strh	r3, [r7, #6]
 8011c2e:	e014      	b.n	8011c5a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011c30:	88fb      	ldrh	r3, [r7, #6]
 8011c32:	3b30      	subs	r3, #48	@ 0x30
 8011c34:	80fb      	strh	r3, [r7, #6]
 8011c36:	e010      	b.n	8011c5a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011c38:	88fb      	ldrh	r3, [r7, #6]
 8011c3a:	3b1a      	subs	r3, #26
 8011c3c:	80fb      	strh	r3, [r7, #6]
 8011c3e:	e00c      	b.n	8011c5a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011c40:	88fb      	ldrh	r3, [r7, #6]
 8011c42:	3308      	adds	r3, #8
 8011c44:	80fb      	strh	r3, [r7, #6]
 8011c46:	e008      	b.n	8011c5a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011c48:	88fb      	ldrh	r3, [r7, #6]
 8011c4a:	3b50      	subs	r3, #80	@ 0x50
 8011c4c:	80fb      	strh	r3, [r7, #6]
 8011c4e:	e004      	b.n	8011c5a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011c50:	88fb      	ldrh	r3, [r7, #6]
 8011c52:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8011c56:	80fb      	strh	r3, [r7, #6]
 8011c58:	bf00      	nop
			}
			break;
 8011c5a:	e008      	b.n	8011c6e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011c5c:	89fb      	ldrh	r3, [r7, #14]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d195      	bne.n	8011b8e <ff_wtoupper+0x1a>
 8011c62:	8a3b      	ldrh	r3, [r7, #16]
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	697a      	ldr	r2, [r7, #20]
 8011c68:	4413      	add	r3, r2
 8011c6a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011c6c:	e78f      	b.n	8011b8e <ff_wtoupper+0x1a>
			break;
 8011c6e:	bf00      	nop
	}

	return chr;
 8011c70:	88fb      	ldrh	r3, [r7, #6]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	371c      	adds	r7, #28
 8011c76:	46bd      	mov	sp, r7
 8011c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7c:	4770      	bx	lr
 8011c7e:	bf00      	nop
 8011c80:	08012238 	.word	0x08012238
 8011c84:	0801242c 	.word	0x0801242c

08011c88 <memset>:
 8011c88:	4402      	add	r2, r0
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d100      	bne.n	8011c92 <memset+0xa>
 8011c90:	4770      	bx	lr
 8011c92:	f803 1b01 	strb.w	r1, [r3], #1
 8011c96:	e7f9      	b.n	8011c8c <memset+0x4>

08011c98 <__errno>:
 8011c98:	4b01      	ldr	r3, [pc, #4]	@ (8011ca0 <__errno+0x8>)
 8011c9a:	6818      	ldr	r0, [r3, #0]
 8011c9c:	4770      	bx	lr
 8011c9e:	bf00      	nop
 8011ca0:	24000058 	.word	0x24000058

08011ca4 <__libc_init_array>:
 8011ca4:	b570      	push	{r4, r5, r6, lr}
 8011ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8011cdc <__libc_init_array+0x38>)
 8011ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8011ce0 <__libc_init_array+0x3c>)
 8011caa:	1b64      	subs	r4, r4, r5
 8011cac:	10a4      	asrs	r4, r4, #2
 8011cae:	2600      	movs	r6, #0
 8011cb0:	42a6      	cmp	r6, r4
 8011cb2:	d109      	bne.n	8011cc8 <__libc_init_array+0x24>
 8011cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8011ce4 <__libc_init_array+0x40>)
 8011cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8011ce8 <__libc_init_array+0x44>)
 8011cb8:	f000 f952 	bl	8011f60 <_init>
 8011cbc:	1b64      	subs	r4, r4, r5
 8011cbe:	10a4      	asrs	r4, r4, #2
 8011cc0:	2600      	movs	r6, #0
 8011cc2:	42a6      	cmp	r6, r4
 8011cc4:	d105      	bne.n	8011cd2 <__libc_init_array+0x2e>
 8011cc6:	bd70      	pop	{r4, r5, r6, pc}
 8011cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ccc:	4798      	blx	r3
 8011cce:	3601      	adds	r6, #1
 8011cd0:	e7ee      	b.n	8011cb0 <__libc_init_array+0xc>
 8011cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cd6:	4798      	blx	r3
 8011cd8:	3601      	adds	r6, #1
 8011cda:	e7f2      	b.n	8011cc2 <__libc_init_array+0x1e>
 8011cdc:	08012d80 	.word	0x08012d80
 8011ce0:	08012d80 	.word	0x08012d80
 8011ce4:	08012d80 	.word	0x08012d80
 8011ce8:	08012d84 	.word	0x08012d84

08011cec <memcpy>:
 8011cec:	440a      	add	r2, r1
 8011cee:	4291      	cmp	r1, r2
 8011cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011cf4:	d100      	bne.n	8011cf8 <memcpy+0xc>
 8011cf6:	4770      	bx	lr
 8011cf8:	b510      	push	{r4, lr}
 8011cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d02:	4291      	cmp	r1, r2
 8011d04:	d1f9      	bne.n	8011cfa <memcpy+0xe>
 8011d06:	bd10      	pop	{r4, pc}

08011d08 <log>:
 8011d08:	b4f0      	push	{r4, r5, r6, r7}
 8011d0a:	ee10 0a90 	vmov	r0, s1
 8011d0e:	ee10 3a10 	vmov	r3, s0
 8011d12:	f04f 34ff 	mov.w	r4, #4294967295
 8011d16:	429c      	cmp	r4, r3
 8011d18:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8011d1c:	4c70      	ldr	r4, [pc, #448]	@ (8011ee0 <log+0x1d8>)
 8011d1e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8011d22:	418c      	sbcs	r4, r1
 8011d24:	ed2d 8b02 	vpush	{d8}
 8011d28:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8011d2c:	d35a      	bcc.n	8011de4 <log+0xdc>
 8011d2e:	4a6d      	ldr	r2, [pc, #436]	@ (8011ee4 <log+0x1dc>)
 8011d30:	4290      	cmp	r0, r2
 8011d32:	bf08      	it	eq
 8011d34:	2b00      	cmpeq	r3, #0
 8011d36:	f000 80c4 	beq.w	8011ec2 <log+0x1ba>
 8011d3a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8011d3e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011d42:	4b69      	ldr	r3, [pc, #420]	@ (8011ee8 <log+0x1e0>)
 8011d44:	ee20 2b00 	vmul.f64	d2, d0, d0
 8011d48:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8011d4c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8011d50:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8011d54:	eea6 7b00 	vfma.f64	d7, d6, d0
 8011d58:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8011d5c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8011d60:	eea6 7b02 	vfma.f64	d7, d6, d2
 8011d64:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8011d68:	eea5 6b00 	vfma.f64	d6, d5, d0
 8011d6c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8011d70:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8011d74:	eea5 6b02 	vfma.f64	d6, d5, d2
 8011d78:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8011d7c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8011d80:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8011d84:	eea3 5b02 	vfma.f64	d5, d3, d2
 8011d88:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8011d8c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8011d90:	eea5 6b04 	vfma.f64	d6, d5, d4
 8011d94:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8011d98:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011d9c:	eeb0 2b47 	vmov.f64	d2, d7
 8011da0:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8011ec8 <log+0x1c0>
 8011da4:	eeb0 6b40 	vmov.f64	d6, d0
 8011da8:	eeb0 3b40 	vmov.f64	d3, d0
 8011dac:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011db0:	eea0 6b47 	vfms.f64	d6, d0, d7
 8011db4:	ee30 8b46 	vsub.f64	d8, d0, d6
 8011db8:	ee26 1b06 	vmul.f64	d1, d6, d6
 8011dbc:	eea1 3b05 	vfma.f64	d3, d1, d5
 8011dc0:	ee30 7b43 	vsub.f64	d7, d0, d3
 8011dc4:	ee30 0b06 	vadd.f64	d0, d0, d6
 8011dc8:	eea1 7b05 	vfma.f64	d7, d1, d5
 8011dcc:	ee25 5b08 	vmul.f64	d5, d5, d8
 8011dd0:	eea5 7b00 	vfma.f64	d7, d5, d0
 8011dd4:	eea2 7b04 	vfma.f64	d7, d2, d4
 8011dd8:	ee33 0b07 	vadd.f64	d0, d3, d7
 8011ddc:	ecbd 8b02 	vpop	{d8}
 8011de0:	bcf0      	pop	{r4, r5, r6, r7}
 8011de2:	4770      	bx	lr
 8011de4:	f1a2 0410 	sub.w	r4, r2, #16
 8011de8:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8011dec:	428c      	cmp	r4, r1
 8011dee:	d923      	bls.n	8011e38 <log+0x130>
 8011df0:	18d9      	adds	r1, r3, r3
 8011df2:	eb40 0400 	adc.w	r4, r0, r0
 8011df6:	4321      	orrs	r1, r4
 8011df8:	d105      	bne.n	8011e06 <log+0xfe>
 8011dfa:	ecbd 8b02 	vpop	{d8}
 8011dfe:	2001      	movs	r0, #1
 8011e00:	bcf0      	pop	{r4, r5, r6, r7}
 8011e02:	f000 b885 	b.w	8011f10 <__math_divzero>
 8011e06:	4939      	ldr	r1, [pc, #228]	@ (8011eec <log+0x1e4>)
 8011e08:	4288      	cmp	r0, r1
 8011e0a:	bf08      	it	eq
 8011e0c:	2b00      	cmpeq	r3, #0
 8011e0e:	d0e5      	beq.n	8011ddc <log+0xd4>
 8011e10:	0413      	lsls	r3, r2, #16
 8011e12:	d403      	bmi.n	8011e1c <log+0x114>
 8011e14:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8011e18:	4393      	bics	r3, r2
 8011e1a:	d104      	bne.n	8011e26 <log+0x11e>
 8011e1c:	ecbd 8b02 	vpop	{d8}
 8011e20:	bcf0      	pop	{r4, r5, r6, r7}
 8011e22:	f000 b88d 	b.w	8011f40 <__math_invalid>
 8011e26:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011ed0 <log+0x1c8>
 8011e2a:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011e2e:	ec53 2b17 	vmov	r2, r3, d7
 8011e32:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8011e36:	4613      	mov	r3, r2
 8011e38:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8011e3c:	492a      	ldr	r1, [pc, #168]	@ (8011ee8 <log+0x1e0>)
 8011e3e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8011e42:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8011e46:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8011e4a:	0d15      	lsrs	r5, r2, #20
 8011e4c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8011e50:	052d      	lsls	r5, r5, #20
 8011e52:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8011e56:	1e1e      	subs	r6, r3, #0
 8011e58:	1b47      	subs	r7, r0, r5
 8011e5a:	ec47 6b16 	vmov	d6, r6, r7
 8011e5e:	1512      	asrs	r2, r2, #20
 8011e60:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011e64:	ee07 2a90 	vmov	s15, r2
 8011e68:	ee25 2b05 	vmul.f64	d2, d5, d5
 8011e6c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8011e70:	ed91 4b00 	vldr	d4, [r1]
 8011e74:	ee25 1b02 	vmul.f64	d1, d5, d2
 8011e78:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8011e7c:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011e80:	ee35 4b07 	vadd.f64	d4, d5, d7
 8011e84:	ee37 0b44 	vsub.f64	d0, d7, d4
 8011e88:	ed91 7b02 	vldr	d7, [r1, #8]
 8011e8c:	ee30 0b05 	vadd.f64	d0, d0, d5
 8011e90:	eea7 0b06 	vfma.f64	d0, d7, d6
 8011e94:	ed91 7b04 	vldr	d7, [r1, #16]
 8011e98:	ed91 6b08 	vldr	d6, [r1, #32]
 8011e9c:	eea7 0b02 	vfma.f64	d0, d7, d2
 8011ea0:	ed91 7b06 	vldr	d7, [r1, #24]
 8011ea4:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8011ea8:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011eac:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8011eb0:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011eb4:	eea6 7b02 	vfma.f64	d7, d6, d2
 8011eb8:	eea1 0b07 	vfma.f64	d0, d1, d7
 8011ebc:	ee30 0b04 	vadd.f64	d0, d0, d4
 8011ec0:	e78c      	b.n	8011ddc <log+0xd4>
 8011ec2:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8011ed8 <log+0x1d0>
 8011ec6:	e789      	b.n	8011ddc <log+0xd4>
 8011ec8:	00000000 	.word	0x00000000
 8011ecc:	41a00000 	.word	0x41a00000
 8011ed0:	00000000 	.word	0x00000000
 8011ed4:	43300000 	.word	0x43300000
	...
 8011ee0:	000308ff 	.word	0x000308ff
 8011ee4:	3ff00000 	.word	0x3ff00000
 8011ee8:	080124e8 	.word	0x080124e8
 8011eec:	7ff00000 	.word	0x7ff00000

08011ef0 <with_errno>:
 8011ef0:	b510      	push	{r4, lr}
 8011ef2:	ed2d 8b02 	vpush	{d8}
 8011ef6:	eeb0 8b40 	vmov.f64	d8, d0
 8011efa:	4604      	mov	r4, r0
 8011efc:	f7ff fecc 	bl	8011c98 <__errno>
 8011f00:	eeb0 0b48 	vmov.f64	d0, d8
 8011f04:	ecbd 8b02 	vpop	{d8}
 8011f08:	6004      	str	r4, [r0, #0]
 8011f0a:	bd10      	pop	{r4, pc}
 8011f0c:	0000      	movs	r0, r0
	...

08011f10 <__math_divzero>:
 8011f10:	b082      	sub	sp, #8
 8011f12:	2800      	cmp	r0, #0
 8011f14:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8011f18:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8011f1c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8011f20:	ed8d 7b00 	vstr	d7, [sp]
 8011f24:	ed9d 0b00 	vldr	d0, [sp]
 8011f28:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8011f38 <__math_divzero+0x28>
 8011f2c:	2022      	movs	r0, #34	@ 0x22
 8011f2e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011f32:	b002      	add	sp, #8
 8011f34:	f7ff bfdc 	b.w	8011ef0 <with_errno>
	...

08011f40 <__math_invalid>:
 8011f40:	eeb0 7b40 	vmov.f64	d7, d0
 8011f44:	eeb4 7b47 	vcmp.f64	d7, d7
 8011f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011f50:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011f54:	d602      	bvs.n	8011f5c <__math_invalid+0x1c>
 8011f56:	2021      	movs	r0, #33	@ 0x21
 8011f58:	f7ff bfca 	b.w	8011ef0 <with_errno>
 8011f5c:	4770      	bx	lr
	...

08011f60 <_init>:
 8011f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f62:	bf00      	nop
 8011f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f66:	bc08      	pop	{r3}
 8011f68:	469e      	mov	lr, r3
 8011f6a:	4770      	bx	lr

08011f6c <_fini>:
 8011f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f6e:	bf00      	nop
 8011f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f72:	bc08      	pop	{r3}
 8011f74:	469e      	mov	lr, r3
 8011f76:	4770      	bx	lr
