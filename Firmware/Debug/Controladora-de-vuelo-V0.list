
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012de8  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08013098  08013098  00014098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013e88  08013e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013e90  08013e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013e94  08013e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000110  24000000  08013e98  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002c4c  24000110  08013fa8  00015110  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002d5c  08013fa8  00015d5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015110  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002960a  00000000  00000000  0001513e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000053e4  00000000  00000000  0003e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f48  00000000  00000000  00043b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001855  00000000  00000000  00045a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037eb2  00000000  00000000  000472cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031a2b  00000000  00000000  0007f17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015531c  00000000  00000000  000b0baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00205ec6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000867c  00000000  00000000  00205f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0020e588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08013080 	.word	0x08013080

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08013080 	.word	0x08013080

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f006 ff76 	bl	8007588 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f009 ffb5 	bl	800a61c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f009 ffaf 	bl	800a61c <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f006 ff5f 	bl	8007588 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002498 	.word	0x24002498

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f006 ff46 	bl	8007588 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f009 ff89 	bl	800a61c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f00a f970 	bl	800a9f8 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f006 ff32 	bl	8007588 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002498 	.word	0x24002498

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f006 ff07 	bl	8007588 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f009 ff4a 	bl	800a61c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f00a f932 	bl	800a9f8 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f006 fef4 	bl	8007588 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002498 	.word	0x24002498
 800088c:	24000140 	.word	0x24000140
 8000890:	24000144 	.word	0x24000144
 8000894:	24000146 	.word	0x24000146
 8000898:	24000142 	.word	0x24000142
 800089c:	24000148 	.word	0x24000148
 80008a0:	2400014a 	.word	0x2400014a
 80008a4:	2400014c 	.word	0x2400014c
 80008a8:	2400014e 	.word	0x2400014e
 80008ac:	24000150 	.word	0x24000150
 80008b0:	24000152 	.word	0x24000152
 80008b4:	24000154 	.word	0x24000154
 80008b8:	24000156 	.word	0x24000156

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 fe57 	bl	8007588 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 fe9b 	bl	800a61c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f00a f883 	bl	800a9f8 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 fe45 	bl	8007588 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002498 	.word	0x24002498
 800093c:	2400015c 	.word	0x2400015c
 8000940:	24000158 	.word	0x24000158

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000158 	.word	0x24000158
 80009bc:	24000140 	.word	0x24000140
 80009c0:	24000144 	.word	0x24000144
 80009c4:	24000146 	.word	0x24000146
 80009c8:	24000160 	.word	0x24000160

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	24000160 	.word	0x24000160
 8000c9c:	24000150 	.word	0x24000150
 8000ca0:	2400014e 	.word	0x2400014e
 8000ca4:	2400014c 	.word	0x2400014c
 8000ca8:	2400014a 	.word	0x2400014a
 8000cac:	24000148 	.word	0x24000148
 8000cb0:	24000142 	.word	0x24000142
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000156 	.word	0x24000156
 8000f50:	24000154 	.word	0x24000154
 8000f54:	24000152 	.word	0x24000152

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f011 ff51 	bl	8012e28 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f006 fab4 	bl	8007588 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	2400012c 	.word	0x2400012c
 8001058:	24000158 	.word	0x24000158

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400012c 	.word	0x2400012c
 80010c8:	24000158 	.word	0x24000158
 80010cc:	2400015c 	.word	0x2400015c

080010d0 <BNO_Page0Adress>:
BNO_bufffer_Status_e BNO_bufferStatus;

IMU_t IMU;


void BNO_Page0Adress(void){
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 80010d4:	4b3b      	ldr	r3, [pc, #236]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b3d      	cmp	r3, #61	@ 0x3d
 80010da:	dc6d      	bgt.n	80011b8 <BNO_Page0Adress+0xe8>
 80010dc:	2b35      	cmp	r3, #53	@ 0x35
 80010de:	da04      	bge.n	80010ea <BNO_Page0Adress+0x1a>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d01b      	beq.n	800111c <BNO_Page0Adress+0x4c>
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	d030      	beq.n	800114a <BNO_Page0Adress+0x7a>
			IMU.SysCalibration = BNO_RxBuffer[1];
			BNO_bufferStatus = Awaiting;
			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 80010e8:	e066      	b.n	80011b8 <BNO_Page0Adress+0xe8>
	switch (BNO_RxBuffer[0]) {
 80010ea:	3b35      	subs	r3, #53	@ 0x35
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d863      	bhi.n	80011b8 <BNO_Page0Adress+0xe8>
 80010f0:	a201      	add	r2, pc, #4	@ (adr r2, 80010f8 <BNO_Page0Adress+0x28>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	080011a3 	.word	0x080011a3
 80010fc:	080011b9 	.word	0x080011b9
 8001100:	080011b9 	.word	0x080011b9
 8001104:	080011b9 	.word	0x080011b9
 8001108:	08001177 	.word	0x08001177
 800110c:	080011b9 	.word	0x080011b9
 8001110:	08001161 	.word	0x08001161
 8001114:	080011b9 	.word	0x080011b9
 8001118:	0800118d 	.word	0x0800118d
			IMU.ID = BNO_RxBuffer[1];
 800111c:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 800111e:	785a      	ldrb	r2, [r3, #1]
 8001120:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <BNO_Page0Adress+0xf8>)
 8001122:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 8001124:	4b27      	ldr	r3, [pc, #156]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 8001126:	789a      	ldrb	r2, [r3, #2]
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <BNO_Page0Adress+0xf8>)
 800112a:	705a      	strb	r2, [r3, #1]
			IMU.MAG.ID = BNO_RxBuffer[3];
 800112c:	4b25      	ldr	r3, [pc, #148]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 800112e:	78da      	ldrb	r2, [r3, #3]
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <BNO_Page0Adress+0xf8>)
 8001132:	709a      	strb	r2, [r3, #2]
			IMU.GYR.ID = BNO_RxBuffer[4];
 8001134:	4b23      	ldr	r3, [pc, #140]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 8001136:	791a      	ldrb	r2, [r3, #4]
 8001138:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <BNO_Page0Adress+0xf8>)
 800113a:	70da      	strb	r2, [r3, #3]
			BNO_bufferStatus = Awaiting;
 800113c:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <BNO_Page0Adress+0xfc>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 8001142:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <BNO_Page0Adress+0x100>)
 8001144:	220b      	movs	r2, #11
 8001146:	701a      	strb	r2, [r3, #0]
			break;
 8001148:	e037      	b.n	80011ba <BNO_Page0Adress+0xea>
			IMU.Page = BNO_RxBuffer[1];
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 800114c:	785a      	ldrb	r2, [r3, #1]
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <BNO_Page0Adress+0xf8>)
 8001150:	711a      	strb	r2, [r3, #4]
			BNO_bufferStatus = Awaiting;
 8001152:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <BNO_Page0Adress+0xfc>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 8001158:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <BNO_Page0Adress+0x100>)
 800115a:	220b      	movs	r2, #11
 800115c:	701a      	strb	r2, [r3, #0]
			break;
 800115e:	e02c      	b.n	80011ba <BNO_Page0Adress+0xea>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 8001162:	785a      	ldrb	r2, [r3, #1]
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <BNO_Page0Adress+0xf8>)
 8001166:	715a      	strb	r2, [r3, #5]
			BNO_bufferStatus = Awaiting;
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <BNO_Page0Adress+0xfc>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 800116e:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <BNO_Page0Adress+0x100>)
 8001170:	220b      	movs	r2, #11
 8001172:	701a      	strb	r2, [r3, #0]
			break;
 8001174:	e021      	b.n	80011ba <BNO_Page0Adress+0xea>
			IMU.System_Status = BNO_RxBuffer[1];
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 8001178:	785a      	ldrb	r2, [r3, #1]
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <BNO_Page0Adress+0xf8>)
 800117c:	719a      	strb	r2, [r3, #6]
			BNO_bufferStatus = Awaiting;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <BNO_Page0Adress+0xfc>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <BNO_Page0Adress+0x100>)
 8001186:	220b      	movs	r2, #11
 8001188:	701a      	strb	r2, [r3, #0]
			break;
 800118a:	e016      	b.n	80011ba <BNO_Page0Adress+0xea>
			IMU.Op_Mode = BNO_RxBuffer[1];
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 800118e:	785a      	ldrb	r2, [r3, #1]
 8001190:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <BNO_Page0Adress+0xf8>)
 8001192:	71da      	strb	r2, [r3, #7]
			BNO_bufferStatus = Awaiting;
 8001194:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <BNO_Page0Adress+0xfc>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <BNO_Page0Adress+0x100>)
 800119c:	220b      	movs	r2, #11
 800119e:	701a      	strb	r2, [r3, #0]
			break;
 80011a0:	e00b      	b.n	80011ba <BNO_Page0Adress+0xea>
			IMU.SysCalibration = BNO_RxBuffer[1];
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <BNO_Page0Adress+0xf4>)
 80011a4:	785a      	ldrb	r2, [r3, #1]
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <BNO_Page0Adress+0xf8>)
 80011a8:	721a      	strb	r2, [r3, #8]
			BNO_bufferStatus = Awaiting;
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <BNO_Page0Adress+0xfc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <BNO_Page0Adress+0x100>)
 80011b2:	220b      	movs	r2, #11
 80011b4:	701a      	strb	r2, [r3, #0]
			break;
 80011b6:	e000      	b.n	80011ba <BNO_Page0Adress+0xea>
			break;
 80011b8:	bf00      	nop
	}
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	24000164 	.word	0x24000164
 80011c8:	24000268 	.word	0x24000268
 80011cc:	24000266 	.word	0x24000266
 80011d0:	24000265 	.word	0x24000265

080011d4 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <BNO_Page1Adress+0x30>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b07      	cmp	r3, #7
 80011de:	d10a      	bne.n	80011f6 <BNO_Page1Adress+0x22>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <BNO_Page1Adress+0x30>)
 80011e2:	785a      	ldrb	r2, [r3, #1]
 80011e4:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <BNO_Page1Adress+0x34>)
 80011e6:	711a      	strb	r2, [r3, #4]
			BNO_bufferStatus = Awaiting;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <BNO_Page1Adress+0x38>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <BNO_Page1Adress+0x3c>)
 80011f0:	220b      	movs	r2, #11
 80011f2:	701a      	strb	r2, [r3, #0]
			break;
 80011f4:	e000      	b.n	80011f8 <BNO_Page1Adress+0x24>

		default:
			break;
 80011f6:	bf00      	nop
	}
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	24000164 	.word	0x24000164
 8001208:	24000268 	.word	0x24000268
 800120c:	24000266 	.word	0x24000266
 8001210:	24000265 	.word	0x24000265

08001214 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	af00      	add	r7, sp, #0
	static uint64_t BusyTime;
	static uint8_t BusyFlag = 0;

	if(BNO_bufferStatus == Ready){
 8001218:	4b20      	ldr	r3, [pc, #128]	@ (800129c <BNO_EmptyingBuffer+0x88>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d114      	bne.n	800124a <BNO_EmptyingBuffer+0x36>
		switch (IMU.Page) {
 8001220:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <BNO_EmptyingBuffer+0x8c>)
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <BNO_EmptyingBuffer+0x1a>
 8001228:	2b01      	cmp	r3, #1
 800122a:	d003      	beq.n	8001234 <BNO_EmptyingBuffer+0x20>
				break;
			case 1:
				BNO_Page1Adress();
				break;
			default:
				break;
 800122c:	e005      	b.n	800123a <BNO_EmptyingBuffer+0x26>
				BNO_Page0Adress();
 800122e:	f7ff ff4f 	bl	80010d0 <BNO_Page0Adress>
				break;
 8001232:	e002      	b.n	800123a <BNO_EmptyingBuffer+0x26>
				BNO_Page1Adress();
 8001234:	f7ff ffce 	bl	80011d4 <BNO_Page1Adress>
				break;
 8001238:	bf00      	nop
		}
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 800123a:	22ff      	movs	r2, #255	@ 0xff
 800123c:	2100      	movs	r1, #0
 800123e:	4819      	ldr	r0, [pc, #100]	@ (80012a4 <BNO_EmptyingBuffer+0x90>)
 8001240:	f011 fdb0 	bl	8012da4 <memset>
		BusyFlag = 0;
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <BNO_EmptyingBuffer+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
	}

	if(BNO_bufferStatus ==  Busy && !BusyFlag){
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <BNO_EmptyingBuffer+0x88>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10c      	bne.n	800126c <BNO_EmptyingBuffer+0x58>
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <BNO_EmptyingBuffer+0x94>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d108      	bne.n	800126c <BNO_EmptyingBuffer+0x58>
		BusyFlag = 1;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <BNO_EmptyingBuffer+0x94>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
		BusyTime = TimeOn_Counter;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <BNO_EmptyingBuffer+0x98>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	4912      	ldr	r1, [pc, #72]	@ (80012b0 <BNO_EmptyingBuffer+0x9c>)
 8001268:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if((TimeOn_Counter - BusyTime)>100){
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <BNO_EmptyingBuffer+0x98>)
 800126e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <BNO_EmptyingBuffer+0x9c>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	1a84      	subs	r4, r0, r2
 800127a:	eb61 0503 	sbc.w	r5, r1, r3
 800127e:	2c65      	cmp	r4, #101	@ 0x65
 8001280:	f175 0300 	sbcs.w	r3, r5, #0
 8001284:	d308      	bcc.n	8001298 <BNO_EmptyingBuffer+0x84>
		BNO_bufferStatus = Awaiting;
 8001286:	4b05      	ldr	r3, [pc, #20]	@ (800129c <BNO_EmptyingBuffer+0x88>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
		BNO_ErrorHandler = READ_FAIL;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <BNO_EmptyingBuffer+0xa0>)
 800128e:	2202      	movs	r2, #2
 8001290:	701a      	strb	r2, [r3, #0]
		BusyFlag = 0;
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <BNO_EmptyingBuffer+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
	}
}
 8001298:	bf00      	nop
 800129a:	bdb0      	pop	{r4, r5, r7, pc}
 800129c:	24000266 	.word	0x24000266
 80012a0:	24000268 	.word	0x24000268
 80012a4:	24000164 	.word	0x24000164
 80012a8:	24000271 	.word	0x24000271
 80012ac:	24002408 	.word	0x24002408
 80012b0:	24000278 	.word	0x24000278
 80012b4:	24000265 	.word	0x24000265

080012b8 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 80012c8:	23aa      	movs	r3, #170	@ 0xaa
 80012ca:	723b      	strb	r3, [r7, #8]
 80012cc:	2301      	movs	r3, #1
 80012ce:	727b      	strb	r3, [r7, #9]
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	72bb      	strb	r3, [r7, #10]
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	while(BNO_bufferStatus != Awaiting){
 80012d8:	e001      	b.n	80012de <BNO_Read+0x26>
		BNO_EmptyingBuffer();
 80012da:	f7ff ff9b 	bl	8001214 <BNO_EmptyingBuffer>
	while(BNO_bufferStatus != Awaiting){
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <BNO_Read+0x68>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f9      	bne.n	80012da <BNO_Read+0x22>
	}
	if(BNO_bufferStatus == Awaiting){
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <BNO_Read+0x68>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d110      	bne.n	8001310 <BNO_Read+0x58>
		BNO_RxBuffer[0] = Address;
 80012ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <BNO_Read+0x6c>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	7013      	strb	r3, [r2, #0]
		BNO_bufferStatus = Busy;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <BNO_Read+0x68>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
	}
	else return uartError = HAL_BUSY;

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 80012fa:	f107 0108 	add.w	r1, r7, #8
 80012fe:	2364      	movs	r3, #100	@ 0x64
 8001300:	2204      	movs	r2, #4
 8001302:	4809      	ldr	r0, [pc, #36]	@ (8001328 <BNO_Read+0x70>)
 8001304:	f00b fb24 	bl	800c950 <HAL_UART_Transmit>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]
	return uartError;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	e002      	b.n	8001316 <BNO_Read+0x5e>
	else return uartError = HAL_BUSY;
 8001310:	2302      	movs	r3, #2
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	24000266 	.word	0x24000266
 8001324:	24000164 	.word	0x24000164
 8001328:	240027c4 	.word	0x240027c4

0800132c <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Size, uint8_t *pData){
 800132c:	b580      	push	{r7, lr}
 800132e:	b0c4      	sub	sp, #272	@ 0x110
 8001330:	af00      	add	r7, sp, #0
 8001332:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001336:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001340:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001344:	4602      	mov	r2, r0
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800134c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001350:	460a      	mov	r2, r1
 8001352:	701a      	strb	r2, [r3, #0]
	uint8_t WriteCommand[255];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8001354:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001358:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800135c:	22aa      	movs	r2, #170	@ 0xaa
 800135e:	701a      	strb	r2, [r3, #0]
	WriteCommand[1] = 0x00;
 8001360:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001368:	2200      	movs	r2, #0
 800136a:	705a      	strb	r2, [r3, #1]
	WriteCommand[2] = Address;
 800136c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001374:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001378:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 800137c:	7812      	ldrb	r2, [r2, #0]
 800137e:	709a      	strb	r2, [r3, #2]
	WriteCommand[3] = Size;
 8001380:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001388:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800138c:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	70da      	strb	r2, [r3, #3]

	for (uint8_t n = 0; n < Size; ++n) {
 8001394:	2300      	movs	r3, #0
 8001396:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800139a:	e015      	b.n	80013c8 <BNO_Write+0x9c>
		WriteCommand[n + 4] = pData[n];
 800139c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013a0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013a4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	441a      	add	r2, r3
 80013ac:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013b0:	3304      	adds	r3, #4
 80013b2:	7811      	ldrb	r1, [r2, #0]
 80013b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013b8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80013bc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t n = 0; n < Size; ++n) {
 80013be:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013c2:	3301      	adds	r3, #1
 80013c4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80013c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013cc:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80013d0:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3e0      	bcc.n	800139c <BNO_Write+0x70>
	}

	uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 80013da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013de:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3304      	adds	r3, #4
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f107 010c 	add.w	r1, r7, #12
 80013ee:	2364      	movs	r3, #100	@ 0x64
 80013f0:	4806      	ldr	r0, [pc, #24]	@ (800140c <BNO_Write+0xe0>)
 80013f2:	f00b faad 	bl	800c950 <HAL_UART_Transmit>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
	return uartError;
 80013fc:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8001400:	4618      	mov	r0, r3
 8001402:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	240027c4 	.word	0x240027c4

08001410 <BNO_Reset>:
void BNO_SelectPage(uint8_t Page){
	BNO_Write(BNO055_PAGE_ID, 1, &Page);
	BNO_Read(BNO055_PAGE_ID, 1);
}

void BNO_Reset(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2104      	movs	r1, #4
 8001418:	4808      	ldr	r0, [pc, #32]	@ (800143c <BNO_Reset+0x2c>)
 800141a:	f006 f8b5 	bl	8007588 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800141e:	200a      	movs	r0, #10
 8001420:	f002 fb14 	bl	8003a4c <HAL_Delay>
	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2104      	movs	r1, #4
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <BNO_Reset+0x2c>)
 800142a:	f006 f8ad 	bl	8007588 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 800142e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001432:	f002 fb0b 	bl	8003a4c <HAL_Delay>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	58020c00 	.word	0x58020c00

08001440 <BNO_Init>:

void BNO_Init(void){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001446:	2201      	movs	r2, #1
 8001448:	4917      	ldr	r1, [pc, #92]	@ (80014a8 <BNO_Init+0x68>)
 800144a:	4818      	ldr	r0, [pc, #96]	@ (80014ac <BNO_Init+0x6c>)
 800144c:	f00b fb0e 	bl	800ca6c <HAL_UART_Receive_DMA>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001456:	4816      	ldr	r0, [pc, #88]	@ (80014b0 <BNO_Init+0x70>)
 8001458:	f006 f896 	bl	8007588 <HAL_GPIO_WritePin>
	BNO_Reset();
 800145c:	f7ff ffd8 	bl	8001410 <BNO_Reset>
	uint8_t Buffer = 0x0C;
 8001460:	230c      	movs	r3, #12
 8001462:	71fb      	strb	r3, [r7, #7]



	BNO_Write(BNO055_OPR_MODE, 1, &Buffer);
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	461a      	mov	r2, r3
 8001468:	2101      	movs	r1, #1
 800146a:	203d      	movs	r0, #61	@ 0x3d
 800146c:	f7ff ff5e 	bl	800132c <BNO_Write>
	BNO_Read(BNO055_OPR_MODE, 1);
 8001470:	2101      	movs	r1, #1
 8001472:	203d      	movs	r0, #61	@ 0x3d
 8001474:	f7ff ff20 	bl	80012b8 <BNO_Read>
	HAL_Delay(10);
 8001478:	200a      	movs	r0, #10
 800147a:	f002 fae7 	bl	8003a4c <HAL_Delay>
	BNO_Read(BNO055_CHIP_ID,4);
 800147e:	2104      	movs	r1, #4
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff ff19 	bl	80012b8 <BNO_Read>
	BNO_Read(BNO055_UNIT_SEL, 1);
 8001486:	2101      	movs	r1, #1
 8001488:	203b      	movs	r0, #59	@ 0x3b
 800148a:	f7ff ff15 	bl	80012b8 <BNO_Read>
	BNO_Read(BNO055_SYS_STATUS, 1);
 800148e:	2101      	movs	r1, #1
 8001490:	2039      	movs	r0, #57	@ 0x39
 8001492:	f7ff ff11 	bl	80012b8 <BNO_Read>
	BNO_Read(BNO055_CALIB_STAT,1);
 8001496:	2101      	movs	r1, #1
 8001498:	2035      	movs	r0, #53	@ 0x35
 800149a:	f7ff ff0d 	bl	80012b8 <BNO_Read>

}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24000263 	.word	0x24000263
 80014ac:	240027c4 	.word	0x240027c4
 80014b0:	58020400 	.word	0x58020400

080014b4 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	if(IMU.SysCalibration != 0xFF){
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <BNO_CalibrationStatus+0x38>)
 80014ba:	7a1b      	ldrb	r3, [r3, #8]
 80014bc:	2bff      	cmp	r3, #255	@ 0xff
 80014be:	d010      	beq.n	80014e2 <BNO_CalibrationStatus+0x2e>
		LED_Info.B_LED1.LED_status = SET;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <BNO_CalibrationStatus+0x3c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	759a      	strb	r2, [r3, #22]
		LED_Info.B_LED1.Sequence = Blink;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <BNO_CalibrationStatus+0x3c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	75da      	strb	r2, [r3, #23]
		LED_Info.B_LED1.Time_On = 200;
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <BNO_CalibrationStatus+0x3c>)
 80014ce:	22c8      	movs	r2, #200	@ 0xc8
 80014d0:	831a      	strh	r2, [r3, #24]
		LED_Info.B_LED1.Time_Off = 200;
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <BNO_CalibrationStatus+0x3c>)
 80014d4:	22c8      	movs	r2, #200	@ 0xc8
 80014d6:	835a      	strh	r2, [r3, #26]

		BNO_Read(BNO055_CALIB_STAT,1);
 80014d8:	2101      	movs	r1, #1
 80014da:	2035      	movs	r0, #53	@ 0x35
 80014dc:	f7ff feec 	bl	80012b8 <BNO_Read>
	}
	else{
		LED_Info.B_LED1.LED_status = RESET;
	}
}
 80014e0:	e002      	b.n	80014e8 <BNO_CalibrationStatus+0x34>
		LED_Info.B_LED1.LED_status = RESET;
 80014e2:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <BNO_CalibrationStatus+0x3c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	759a      	strb	r2, [r3, #22]
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	24000268 	.word	0x24000268
 80014f0:	24000000 	.word	0x24000000

080014f4 <BNO_Receive>:
		default:
			break;
	}
}

void BNO_Receive(uint8_t Buffer){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	switch (BNO_Rx_Status) {
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <BNO_Receive+0xb4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2bff      	cmp	r3, #255	@ 0xff
 8001504:	d022      	beq.n	800154c <BNO_Receive+0x58>
 8001506:	2bff      	cmp	r3, #255	@ 0xff
 8001508:	dc42      	bgt.n	8001590 <BNO_Receive+0x9c>
 800150a:	2bee      	cmp	r3, #238	@ 0xee
 800150c:	d017      	beq.n	800153e <BNO_Receive+0x4a>
 800150e:	2bee      	cmp	r3, #238	@ 0xee
 8001510:	dc3e      	bgt.n	8001590 <BNO_Receive+0x9c>
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <BNO_Receive+0x28>
 8001516:	2bbb      	cmp	r3, #187	@ 0xbb
 8001518:	d00a      	beq.n	8001530 <BNO_Receive+0x3c>
				BNO_ErrorHandler = ReadSucces;
			}

			break;
		default:
			break;
 800151a:	e039      	b.n	8001590 <BNO_Receive+0x9c>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001520:	d002      	beq.n	8001528 <BNO_Receive+0x34>
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2bee      	cmp	r3, #238	@ 0xee
 8001526:	d135      	bne.n	8001594 <BNO_Receive+0xa0>
 8001528:	4a1f      	ldr	r2, [pc, #124]	@ (80015a8 <BNO_Receive+0xb4>)
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	7013      	strb	r3, [r2, #0]
			break;
 800152e:	e031      	b.n	8001594 <BNO_Receive+0xa0>
			MsgSize = Buffer;
 8001530:	4a1e      	ldr	r2, [pc, #120]	@ (80015ac <BNO_Receive+0xb8>)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <BNO_Receive+0xb4>)
 8001538:	22ff      	movs	r2, #255	@ 0xff
 800153a:	701a      	strb	r2, [r3, #0]
			break;
 800153c:	e02d      	b.n	800159a <BNO_Receive+0xa6>
			BNO_ErrorHandler = Buffer;
 800153e:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <BNO_Receive+0xbc>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001544:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <BNO_Receive+0xb4>)
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
			break;
 800154a:	e026      	b.n	800159a <BNO_Receive+0xa6>
			BNO_RxBuffer[Counter + 1] = Buffer;
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <BNO_Receive+0xc0>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4919      	ldr	r1, [pc, #100]	@ (80015b8 <BNO_Receive+0xc4>)
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <BNO_Receive+0xc0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <BNO_Receive+0xc0>)
 8001562:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <BNO_Receive+0xc0>)
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <BNO_Receive+0xb8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d113      	bne.n	8001598 <BNO_Receive+0xa4>
				Counter = 0;
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <BNO_Receive+0xc0>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <BNO_Receive+0xb8>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
				BNO_bufferStatus = Ready;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <BNO_Receive+0xc8>)
 800157e:	2202      	movs	r2, #2
 8001580:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <BNO_Receive+0xb4>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <BNO_Receive+0xbc>)
 800158a:	220b      	movs	r2, #11
 800158c:	701a      	strb	r2, [r3, #0]
			break;
 800158e:	e003      	b.n	8001598 <BNO_Receive+0xa4>
			break;
 8001590:	bf00      	nop
 8001592:	e002      	b.n	800159a <BNO_Receive+0xa6>
			break;
 8001594:	bf00      	nop
 8001596:	e000      	b.n	800159a <BNO_Receive+0xa6>
			break;
 8001598:	bf00      	nop
	}
	BNO_EmptyingBuffer();
 800159a:	f7ff fe3b 	bl	8001214 <BNO_EmptyingBuffer>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	24000264 	.word	0x24000264
 80015ac:	24000280 	.word	0x24000280
 80015b0:	24000265 	.word	0x24000265
 80015b4:	24000281 	.word	0x24000281
 80015b8:	24000164 	.word	0x24000164
 80015bc:	24000266 	.word	0x24000266

080015c0 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80015c0:	b084      	sub	sp, #16
 80015c2:	b590      	push	{r4, r7, lr}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	f107 001c 	add.w	r0, r7, #28
 80015ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80015d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <LED_blink+0x20>
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d010      	beq.n	8001600 <LED_blink+0x40>
 80015de:	e01f      	b.n	8001620 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80015e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80015e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d31f      	bcc.n	8001628 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	8c39      	ldrh	r1, [r7, #32]
 80015ec:	2201      	movs	r2, #1
 80015ee:	4618      	mov	r0, r3
 80015f0:	f005 ffca 	bl	8007588 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80015fe:	e013      	b.n	8001628 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8001600:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001602:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001604:	429a      	cmp	r2, r3
 8001606:	d311      	bcc.n	800162c <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	8c39      	ldrh	r1, [r7, #32]
 800160c:	2200      	movs	r2, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f005 ffba 	bl	8007588 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800161e:	e005      	b.n	800162c <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8001626:	e002      	b.n	800162e <LED_blink+0x6e>
				break;
 8001628:	bf00      	nop
 800162a:	e000      	b.n	800162e <LED_blink+0x6e>
				break;
 800162c:	bf00      	nop
		}

	LED.count++;
 800162e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001630:	3301      	adds	r3, #1
 8001632:	b29b      	uxth	r3, r3
 8001634:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	461c      	mov	r4, r3
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800164e:	b004      	add	sp, #16
 8001650:	4770      	bx	lr

08001652 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8001652:	b084      	sub	sp, #16
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	f107 001c 	add.w	r0, r7, #28
 8001660:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8001664:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001668:	2b01      	cmp	r3, #1
 800166a:	d117      	bne.n	800169c <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 800166c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <LED_Rutine+0x28>
 8001674:	2b01      	cmp	r3, #1
 8001676:	d007      	beq.n	8001688 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8001678:	e018      	b.n	80016ac <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	8c39      	ldrh	r1, [r7, #32]
 800167e:	2201      	movs	r2, #1
 8001680:	4618      	mov	r0, r3
 8001682:	f005 ff81 	bl	8007588 <HAL_GPIO_WritePin>
				break;
 8001686:	e011      	b.n	80016ac <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8001688:	f107 001c 	add.w	r0, r7, #28
 800168c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001696:	f7ff ff93 	bl	80015c0 <LED_blink>
				break;
 800169a:	e007      	b.n	80016ac <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	8c39      	ldrh	r1, [r7, #32]
 80016a0:	2200      	movs	r2, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 ff70 	bl	8007588 <HAL_GPIO_WritePin>
		LED.count = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	461c      	mov	r4, r3
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016c4:	b004      	add	sp, #16
 80016c6:	4770      	bx	lr

080016c8 <LED_Tasks>:

void LED_Tasks (void){
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80016ce:	4c24      	ldr	r4, [pc, #144]	@ (8001760 <LED_Tasks+0x98>)
 80016d0:	4638      	mov	r0, r7
 80016d2:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <LED_Tasks+0x98>)
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	9200      	str	r2, [sp, #0]
 80016d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016da:	f7ff ffba 	bl	8001652 <LED_Rutine>
 80016de:	463b      	mov	r3, r7
 80016e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 80016e6:	4c1e      	ldr	r4, [pc, #120]	@ (8001760 <LED_Tasks+0x98>)
 80016e8:	4638      	mov	r0, r7
 80016ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <LED_Tasks+0x98>)
 80016ec:	69da      	ldr	r2, [r3, #28]
 80016ee:	9200      	str	r2, [sp, #0]
 80016f0:	3310      	adds	r3, #16
 80016f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f4:	f7ff ffad 	bl	8001652 <LED_Rutine>
 80016f8:	3410      	adds	r4, #16
 80016fa:	463b      	mov	r3, r7
 80016fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8001702:	4c17      	ldr	r4, [pc, #92]	@ (8001760 <LED_Tasks+0x98>)
 8001704:	4638      	mov	r0, r7
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <LED_Tasks+0x98>)
 8001708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800170a:	9200      	str	r2, [sp, #0]
 800170c:	3320      	adds	r3, #32
 800170e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001710:	f7ff ff9f 	bl	8001652 <LED_Rutine>
 8001714:	3420      	adds	r4, #32
 8001716:	463b      	mov	r3, r7
 8001718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 800171e:	4c10      	ldr	r4, [pc, #64]	@ (8001760 <LED_Tasks+0x98>)
 8001720:	4638      	mov	r0, r7
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <LED_Tasks+0x98>)
 8001724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	3330      	adds	r3, #48	@ 0x30
 800172a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172c:	f7ff ff91 	bl	8001652 <LED_Rutine>
 8001730:	3430      	adds	r4, #48	@ 0x30
 8001732:	463b      	mov	r3, r7
 8001734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 800173a:	4c09      	ldr	r4, [pc, #36]	@ (8001760 <LED_Tasks+0x98>)
 800173c:	4638      	mov	r0, r7
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <LED_Tasks+0x98>)
 8001740:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001742:	9200      	str	r2, [sp, #0]
 8001744:	3340      	adds	r3, #64	@ 0x40
 8001746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001748:	f7ff ff83 	bl	8001652 <LED_Rutine>
 800174c:	3440      	adds	r4, #64	@ 0x40
 800174e:	463b      	mov	r3, r7
 8001750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001752:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bd90      	pop	{r4, r7, pc}
 800175e:	bf00      	nop
 8001760:	24000000 	.word	0x24000000

08001764 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8001768:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <PWM_Assing+0xb0>)
 800176a:	881a      	ldrh	r2, [r3, #0]
 800176c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001770:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 8001772:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <PWM_Assing+0xb0>)
 8001774:	885a      	ldrh	r2, [r3, #2]
 8001776:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800177a:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 800177c:	4b25      	ldr	r3, [pc, #148]	@ (8001814 <PWM_Assing+0xb0>)
 800177e:	889a      	ldrh	r2, [r3, #4]
 8001780:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <PWM_Assing+0xb4>)
 8001782:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <PWM_Assing+0xb0>)
 8001786:	88da      	ldrh	r2, [r3, #6]
 8001788:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <PWM_Assing+0xb4>)
 800178a:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 800178c:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <PWM_Assing+0xb0>)
 800178e:	891a      	ldrh	r2, [r3, #8]
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <PWM_Assing+0xb8>)
 8001792:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 8001794:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <PWM_Assing+0xb0>)
 8001796:	895a      	ldrh	r2, [r3, #10]
 8001798:	4b20      	ldr	r3, [pc, #128]	@ (800181c <PWM_Assing+0xb8>)
 800179a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 800179c:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <PWM_Assing+0xb0>)
 800179e:	899a      	ldrh	r2, [r3, #12]
 80017a0:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <PWM_Assing+0xb8>)
 80017a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <PWM_Assing+0xb0>)
 80017a6:	89da      	ldrh	r2, [r3, #14]
 80017a8:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <PWM_Assing+0xb8>)
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <PWM_Assing+0xb0>)
 80017ae:	8a1a      	ldrh	r2, [r3, #16]
 80017b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017b4:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <PWM_Assing+0xb0>)
 80017b8:	8a5a      	ldrh	r2, [r3, #18]
 80017ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017be:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017c0:	2100      	movs	r1, #0
 80017c2:	4817      	ldr	r0, [pc, #92]	@ (8001820 <PWM_Assing+0xbc>)
 80017c4:	f00a f8d4 	bl	800b970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017c8:	2104      	movs	r1, #4
 80017ca:	4815      	ldr	r0, [pc, #84]	@ (8001820 <PWM_Assing+0xbc>)
 80017cc:	f00a f8d0 	bl	800b970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80017d0:	2108      	movs	r1, #8
 80017d2:	4813      	ldr	r0, [pc, #76]	@ (8001820 <PWM_Assing+0xbc>)
 80017d4:	f00a f8cc 	bl	800b970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80017d8:	210c      	movs	r1, #12
 80017da:	4811      	ldr	r0, [pc, #68]	@ (8001820 <PWM_Assing+0xbc>)
 80017dc:	f00a f8c8 	bl	800b970 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017e0:	2100      	movs	r1, #0
 80017e2:	4810      	ldr	r0, [pc, #64]	@ (8001824 <PWM_Assing+0xc0>)
 80017e4:	f00a f8c4 	bl	800b970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017e8:	2104      	movs	r1, #4
 80017ea:	480e      	ldr	r0, [pc, #56]	@ (8001824 <PWM_Assing+0xc0>)
 80017ec:	f00a f8c0 	bl	800b970 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017f0:	2100      	movs	r1, #0
 80017f2:	480d      	ldr	r0, [pc, #52]	@ (8001828 <PWM_Assing+0xc4>)
 80017f4:	f00a f8bc 	bl	800b970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80017f8:	2104      	movs	r1, #4
 80017fa:	480b      	ldr	r0, [pc, #44]	@ (8001828 <PWM_Assing+0xc4>)
 80017fc:	f00a f8b8 	bl	800b970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001800:	2108      	movs	r1, #8
 8001802:	4809      	ldr	r0, [pc, #36]	@ (8001828 <PWM_Assing+0xc4>)
 8001804:	f00a f8b4 	bl	800b970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001808:	210c      	movs	r1, #12
 800180a:	4807      	ldr	r0, [pc, #28]	@ (8001828 <PWM_Assing+0xc4>)
 800180c:	f00a f8b0 	bl	800b970 <HAL_TIM_PWM_Start>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	24000050 	.word	0x24000050
 8001818:	40000400 	.word	0x40000400
 800181c:	40000800 	.word	0x40000800
 8001820:	24002520 	.word	0x24002520
 8001824:	2400256c 	.word	0x2400256c
 8001828:	240025b8 	.word	0x240025b8

0800182c <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8001830:	2201      	movs	r2, #1
 8001832:	4903      	ldr	r1, [pc, #12]	@ (8001840 <SBUS_init+0x14>)
 8001834:	4803      	ldr	r0, [pc, #12]	@ (8001844 <SBUS_init+0x18>)
 8001836:	f00b f919 	bl	800ca6c <HAL_UART_Receive_DMA>

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2400029d 	.word	0x2400029d
 8001844:	24002730 	.word	0x24002730

08001848 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <SBUS_Receive+0x8c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <SBUS_Receive+0x18>
 800185a:	2b01      	cmp	r3, #1
 800185c:	d017      	beq.n	800188e <SBUS_Receive+0x46>
 800185e:	e02f      	b.n	80018c0 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	d10f      	bne.n	8001886 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <SBUS_Receive+0x90>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	4a1b      	ldr	r2, [pc, #108]	@ (80018dc <SBUS_Receive+0x94>)
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <SBUS_Receive+0x8c>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8001878:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <SBUS_Receive+0x90>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <SBUS_Receive+0x90>)
 8001882:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001884:	e021      	b.n	80018ca <SBUS_Receive+0x82>
				RxCount = 0;
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <SBUS_Receive+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
			break;
 800188c:	e01d      	b.n	80018ca <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <SBUS_Receive+0x90>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	4a11      	ldr	r2, [pc, #68]	@ (80018dc <SBUS_Receive+0x94>)
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	5453      	strb	r3, [r2, r1]
			RxCount++;
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <SBUS_Receive+0x90>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <SBUS_Receive+0x90>)
 80018a4:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <SBUS_Receive+0x90>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b18      	cmp	r3, #24
 80018ac:	d10c      	bne.n	80018c8 <SBUS_Receive+0x80>
				RxCount = 0;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <SBUS_Receive+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 80018b4:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <SBUS_Receive+0x8c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 80018ba:	f000 f843 	bl	8001944 <SBUS_getData>
			}
			break;
 80018be:	e003      	b.n	80018c8 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <SBUS_Receive+0x8c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
			break;
 80018c6:	e000      	b.n	80018ca <SBUS_Receive+0x82>
			break;
 80018c8:	bf00      	nop
	}
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2400029e 	.word	0x2400029e
 80018d8:	2400029f 	.word	0x2400029f
 80018dc:	24000284 	.word	0x24000284

080018e0 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <Temp_BypassFunct+0x5c>)
 80018e6:	881a      	ldrh	r2, [r3, #0]
 80018e8:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <Temp_BypassFunct+0x60>)
 80018ea:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <Temp_BypassFunct+0x5c>)
 80018ee:	885a      	ldrh	r2, [r3, #2]
 80018f0:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <Temp_BypassFunct+0x60>)
 80018f2:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <Temp_BypassFunct+0x5c>)
 80018f6:	889a      	ldrh	r2, [r3, #4]
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <Temp_BypassFunct+0x60>)
 80018fa:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <Temp_BypassFunct+0x5c>)
 80018fe:	88da      	ldrh	r2, [r3, #6]
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <Temp_BypassFunct+0x60>)
 8001902:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <Temp_BypassFunct+0x5c>)
 8001906:	891a      	ldrh	r2, [r3, #8]
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <Temp_BypassFunct+0x60>)
 800190a:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <Temp_BypassFunct+0x5c>)
 800190e:	895a      	ldrh	r2, [r3, #10]
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <Temp_BypassFunct+0x60>)
 8001912:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <Temp_BypassFunct+0x5c>)
 8001916:	899a      	ldrh	r2, [r3, #12]
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <Temp_BypassFunct+0x60>)
 800191a:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <Temp_BypassFunct+0x5c>)
 800191e:	89da      	ldrh	r2, [r3, #14]
 8001920:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <Temp_BypassFunct+0x60>)
 8001922:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <Temp_BypassFunct+0x5c>)
 8001926:	8a1a      	ldrh	r2, [r3, #16]
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <Temp_BypassFunct+0x60>)
 800192a:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <Temp_BypassFunct+0x5c>)
 800192e:	8a5a      	ldrh	r2, [r3, #18]
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <Temp_BypassFunct+0x60>)
 8001932:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 8001934:	f7ff ff16 	bl	8001764 <PWM_Assing>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	24000064 	.word	0x24000064
 8001940:	24000050 	.word	0x24000050

08001944 <SBUS_getData>:

void SBUS_getData(void){
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001948:	4b95      	ldr	r3, [pc, #596]	@ (8001ba0 <SBUS_getData+0x25c>)
 800194a:	785b      	ldrb	r3, [r3, #1]
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b94      	ldr	r3, [pc, #592]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001950:	789b      	ldrb	r3, [r3, #2]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b21b      	sxth	r3, r3
 8001956:	4313      	orrs	r3, r2
 8001958:	b21b      	sxth	r3, r3
 800195a:	b29b      	uxth	r3, r3
 800195c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b90      	ldr	r3, [pc, #576]	@ (8001ba4 <SBUS_getData+0x260>)
 8001964:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8001966:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001968:	789b      	ldrb	r3, [r3, #2]
 800196a:	08db      	lsrs	r3, r3, #3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	b21a      	sxth	r2, r3
 8001970:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001972:	78db      	ldrb	r3, [r3, #3]
 8001974:	015b      	lsls	r3, r3, #5
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b21b      	sxth	r3, r3
 800197c:	b29b      	uxth	r3, r3
 800197e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b87      	ldr	r3, [pc, #540]	@ (8001ba4 <SBUS_getData+0x260>)
 8001986:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8001988:	4b85      	ldr	r3, [pc, #532]	@ (8001ba0 <SBUS_getData+0x25c>)
 800198a:	78db      	ldrb	r3, [r3, #3]
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	b2db      	uxtb	r3, r3
 8001990:	b21a      	sxth	r2, r3
 8001992:	4b83      	ldr	r3, [pc, #524]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001994:	791b      	ldrb	r3, [r3, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	b21b      	sxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b21a      	sxth	r2, r3
 800199e:	4b80      	ldr	r3, [pc, #512]	@ (8001ba0 <SBUS_getData+0x25c>)
 80019a0:	795b      	ldrb	r3, [r3, #5]
 80019a2:	029b      	lsls	r3, r3, #10
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba4 <SBUS_getData+0x260>)
 80019b4:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80019b6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ba0 <SBUS_getData+0x25c>)
 80019b8:	795b      	ldrb	r3, [r3, #5]
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	b21a      	sxth	r2, r3
 80019c0:	4b77      	ldr	r3, [pc, #476]	@ (8001ba0 <SBUS_getData+0x25c>)
 80019c2:	799b      	ldrb	r3, [r3, #6]
 80019c4:	01db      	lsls	r3, r3, #7
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b73      	ldr	r3, [pc, #460]	@ (8001ba4 <SBUS_getData+0x260>)
 80019d6:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 80019d8:	4b71      	ldr	r3, [pc, #452]	@ (8001ba0 <SBUS_getData+0x25c>)
 80019da:	799b      	ldrb	r3, [r3, #6]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba0 <SBUS_getData+0x25c>)
 80019e4:	79db      	ldrb	r3, [r3, #7]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba4 <SBUS_getData+0x260>)
 80019f8:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 80019fa:	4b69      	ldr	r3, [pc, #420]	@ (8001ba0 <SBUS_getData+0x25c>)
 80019fc:	79db      	ldrb	r3, [r3, #7]
 80019fe:	09db      	lsrs	r3, r3, #7
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	4b66      	ldr	r3, [pc, #408]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a06:	7a1b      	ldrb	r3, [r3, #8]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	4b63      	ldr	r3, [pc, #396]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a12:	7a5b      	ldrb	r3, [r3, #9]
 8001a14:	025b      	lsls	r3, r3, #9
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba4 <SBUS_getData+0x260>)
 8001a26:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001a28:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a2a:	7a5b      	ldrb	r3, [r3, #9]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a34:	7a9b      	ldrb	r3, [r3, #10]
 8001a36:	019b      	lsls	r3, r3, #6
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b57      	ldr	r3, [pc, #348]	@ (8001ba4 <SBUS_getData+0x260>)
 8001a48:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8001a4a:	4b55      	ldr	r3, [pc, #340]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a4c:	7a9b      	ldrb	r3, [r3, #10]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	4b52      	ldr	r3, [pc, #328]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a56:	7adb      	ldrb	r3, [r3, #11]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba4 <SBUS_getData+0x260>)
 8001a6a:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a6e:	7b1b      	ldrb	r3, [r3, #12]
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a74:	7b5b      	ldrb	r3, [r3, #13]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b47      	ldr	r3, [pc, #284]	@ (8001ba4 <SBUS_getData+0x260>)
 8001a88:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8001a8a:	4b45      	ldr	r3, [pc, #276]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a8c:	7b5b      	ldrb	r3, [r3, #13]
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	4b42      	ldr	r3, [pc, #264]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001a96:	7b9b      	ldrb	r3, [r3, #14]
 8001a98:	015b      	lsls	r3, r3, #5
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba4 <SBUS_getData+0x260>)
 8001aaa:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8001aac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001aae:	7b9b      	ldrb	r3, [r3, #14]
 8001ab0:	099b      	lsrs	r3, r3, #6
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001ab8:	7bdb      	ldrb	r3, [r3, #15]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	4b37      	ldr	r3, [pc, #220]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001ac4:	7c1b      	ldrb	r3, [r3, #16]
 8001ac6:	029b      	lsls	r3, r3, #10
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b33      	ldr	r3, [pc, #204]	@ (8001ba4 <SBUS_getData+0x260>)
 8001ad8:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8001ada:	4b31      	ldr	r3, [pc, #196]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001adc:	7c1b      	ldrb	r3, [r3, #16]
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001ae6:	7c5b      	ldrb	r3, [r3, #17]
 8001ae8:	01db      	lsls	r3, r3, #7
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <SBUS_getData+0x260>)
 8001afa:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8001afc:	4b28      	ldr	r3, [pc, #160]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001afe:	7c5b      	ldrb	r3, [r3, #17]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	4b26      	ldr	r3, [pc, #152]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001b08:	7c9b      	ldrb	r3, [r3, #18]
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <SBUS_getData+0x260>)
 8001b1c:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001b20:	7c9b      	ldrb	r3, [r3, #18]
 8001b22:	09db      	lsrs	r3, r3, #7
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001b2a:	7cdb      	ldrb	r3, [r3, #19]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001b36:	7d1b      	ldrb	r3, [r3, #20]
 8001b38:	025b      	lsls	r3, r3, #9
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <SBUS_getData+0x260>)
 8001b4a:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8001b4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001b4e:	7d1b      	ldrb	r3, [r3, #20]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001b58:	7d5b      	ldrb	r3, [r3, #21]
 8001b5a:	019b      	lsls	r3, r3, #6
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <SBUS_getData+0x260>)
 8001b6c:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001b70:	7d5b      	ldrb	r3, [r3, #21]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <SBUS_getData+0x25c>)
 8001b7a:	7d9b      	ldrb	r3, [r3, #22]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <SBUS_getData+0x260>)
 8001b8e:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8001b90:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <SBUS_getData+0x260>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9c:	e00a      	b.n	8001bb4 <SBUS_getData+0x270>
 8001b9e:	bf00      	nop
 8001ba0:	24000284 	.word	0x24000284
 8001ba4:	24000064 	.word	0x24000064
 8001ba8:	43b00000 	.word	0x43b00000
 8001bac:	44a80000 	.word	0x44a80000
 8001bb0:	447a0000 	.word	0x447a0000
 8001bb4:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8001ba8 <SBUS_getData+0x264>
 8001bb8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bbc:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8001bac <SBUS_getData+0x268>
 8001bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc4:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8001bb0 <SBUS_getData+0x26c>
 8001bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd0:	ee17 3a90 	vmov	r3, s15
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4bd1      	ldr	r3, [pc, #836]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001bde:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8001be0:	4bd0      	ldr	r3, [pc, #832]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001be2:	885b      	ldrh	r3, [r3, #2]
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bec:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8001f28 <SBUS_getData+0x5e4>
 8001bf0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bf4:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8001f2c <SBUS_getData+0x5e8>
 8001bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bfc:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001f30 <SBUS_getData+0x5ec>
 8001c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c08:	ee17 3a90 	vmov	r3, s15
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4bc3      	ldr	r3, [pc, #780]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001c16:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001c18:	4bc2      	ldr	r3, [pc, #776]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001c1a:	889b      	ldrh	r3, [r3, #4]
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c24:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8001f28 <SBUS_getData+0x5e4>
 8001c28:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c2c:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001f2c <SBUS_getData+0x5e8>
 8001c30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c34:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001f30 <SBUS_getData+0x5ec>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c40:	ee17 3a90 	vmov	r3, s15
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4bb5      	ldr	r3, [pc, #724]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001c4e:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8001c50:	4bb4      	ldr	r3, [pc, #720]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001c52:	88db      	ldrh	r3, [r3, #6]
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5c:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001f28 <SBUS_getData+0x5e4>
 8001c60:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c64:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001f2c <SBUS_getData+0x5e8>
 8001c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6c:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001f30 <SBUS_getData+0x5ec>
 8001c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c78:	ee17 3a90 	vmov	r3, s15
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4ba7      	ldr	r3, [pc, #668]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001c86:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8001c88:	4ba6      	ldr	r3, [pc, #664]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001c8a:	891b      	ldrh	r3, [r3, #8]
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c94:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001f28 <SBUS_getData+0x5e4>
 8001c98:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c9c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001f2c <SBUS_getData+0x5e8>
 8001ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca4:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001f30 <SBUS_getData+0x5ec>
 8001ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb0:	ee17 3a90 	vmov	r3, s15
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b99      	ldr	r3, [pc, #612]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001cbe:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8001cc0:	4b98      	ldr	r3, [pc, #608]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001cc2:	895b      	ldrh	r3, [r3, #10]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ccc:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001f28 <SBUS_getData+0x5e4>
 8001cd0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cd4:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8001f2c <SBUS_getData+0x5e8>
 8001cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cdc:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001f30 <SBUS_getData+0x5ec>
 8001ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce8:	ee17 3a90 	vmov	r3, s15
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b8b      	ldr	r3, [pc, #556]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001cf6:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001cf8:	4b8a      	ldr	r3, [pc, #552]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001cfa:	899b      	ldrh	r3, [r3, #12]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d04:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001f28 <SBUS_getData+0x5e4>
 8001d08:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d0c:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001f2c <SBUS_getData+0x5e8>
 8001d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d14:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001f30 <SBUS_getData+0x5ec>
 8001d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d20:	ee17 3a90 	vmov	r3, s15
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b7d      	ldr	r3, [pc, #500]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001d2e:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8001d30:	4b7c      	ldr	r3, [pc, #496]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001d32:	89db      	ldrh	r3, [r3, #14]
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3c:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001f28 <SBUS_getData+0x5e4>
 8001d40:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d44:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001f2c <SBUS_getData+0x5e8>
 8001d48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4c:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001f30 <SBUS_getData+0x5ec>
 8001d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d58:	ee17 3a90 	vmov	r3, s15
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b6f      	ldr	r3, [pc, #444]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001d66:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8001d68:	4b6e      	ldr	r3, [pc, #440]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001d6a:	8a1b      	ldrh	r3, [r3, #16]
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d74:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001f28 <SBUS_getData+0x5e4>
 8001d78:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d7c:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001f2c <SBUS_getData+0x5e8>
 8001d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d84:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001f30 <SBUS_getData+0x5ec>
 8001d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d90:	ee17 3a90 	vmov	r3, s15
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b61      	ldr	r3, [pc, #388]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001d9e:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8001da0:	4b60      	ldr	r3, [pc, #384]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001da2:	8a5b      	ldrh	r3, [r3, #18]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dac:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001f28 <SBUS_getData+0x5e4>
 8001db0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001db4:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001f2c <SBUS_getData+0x5e8>
 8001db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dbc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001f30 <SBUS_getData+0x5ec>
 8001dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc8:	ee17 3a90 	vmov	r3, s15
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b53      	ldr	r3, [pc, #332]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001dd6:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8001dd8:	4b52      	ldr	r3, [pc, #328]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001dda:	8a9b      	ldrh	r3, [r3, #20]
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de4:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001f28 <SBUS_getData+0x5e4>
 8001de8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001dec:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001f2c <SBUS_getData+0x5e8>
 8001df0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df4:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001f30 <SBUS_getData+0x5ec>
 8001df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e00:	ee17 3a90 	vmov	r3, s15
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b45      	ldr	r3, [pc, #276]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001e0e:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8001e10:	4b44      	ldr	r3, [pc, #272]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001e12:	8adb      	ldrh	r3, [r3, #22]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001f28 <SBUS_getData+0x5e4>
 8001e20:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e24:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001f2c <SBUS_getData+0x5e8>
 8001e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e2c:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001f30 <SBUS_getData+0x5ec>
 8001e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e38:	ee17 3a90 	vmov	r3, s15
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b37      	ldr	r3, [pc, #220]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001e46:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8001e48:	4b36      	ldr	r3, [pc, #216]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001e4a:	8b1b      	ldrh	r3, [r3, #24]
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e54:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001f28 <SBUS_getData+0x5e4>
 8001e58:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e5c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001f2c <SBUS_getData+0x5e8>
 8001e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e64:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001f30 <SBUS_getData+0x5ec>
 8001e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e70:	ee17 3a90 	vmov	r3, s15
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001e7e:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8001e80:	4b28      	ldr	r3, [pc, #160]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001e82:	8b5b      	ldrh	r3, [r3, #26]
 8001e84:	ee07 3a90 	vmov	s15, r3
 8001e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001f28 <SBUS_getData+0x5e4>
 8001e90:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e94:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001f2c <SBUS_getData+0x5e8>
 8001e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001f30 <SBUS_getData+0x5ec>
 8001ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea8:	ee17 3a90 	vmov	r3, s15
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001eb6:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001eba:	8b9b      	ldrh	r3, [r3, #28]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001f28 <SBUS_getData+0x5e4>
 8001ec8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ecc:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001f2c <SBUS_getData+0x5e8>
 8001ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001f30 <SBUS_getData+0x5ec>
 8001ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee0:	ee17 3a90 	vmov	r3, s15
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001eee:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <SBUS_getData+0x5e0>)
 8001ef2:	8bdb      	ldrh	r3, [r3, #30]
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001f28 <SBUS_getData+0x5e4>
 8001f00:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f04:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001f2c <SBUS_getData+0x5e8>
 8001f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f0c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001f30 <SBUS_getData+0x5ec>
 8001f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f18:	ee17 3a90 	vmov	r3, s15
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f22:	e007      	b.n	8001f34 <SBUS_getData+0x5f0>
 8001f24:	24000064 	.word	0x24000064
 8001f28:	43b00000 	.word	0x43b00000
 8001f2c:	44a80000 	.word	0x44a80000
 8001f30:	447a0000 	.word	0x447a0000
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <SBUS_getData+0x694>)
 8001f38:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 8001f3a:	4b28      	ldr	r3, [pc, #160]	@ (8001fdc <SBUS_getData+0x698>)
 8001f3c:	7ddb      	ldrb	r3, [r3, #23]
 8001f3e:	2b07      	cmp	r3, #7
 8001f40:	d90a      	bls.n	8001f58 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 8001f42:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <SBUS_getData+0x698>)
 8001f44:	7ddb      	ldrb	r3, [r3, #23]
 8001f46:	3b08      	subs	r3, #8
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <SBUS_getData+0x698>)
 8001f4c:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8001f4e:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <SBUS_getData+0x694>)
 8001f50:	2235      	movs	r2, #53	@ 0x35
 8001f52:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001f56:	e003      	b.n	8001f60 <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= Ok;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <SBUS_getData+0x694>)
 8001f5a:	22aa      	movs	r2, #170	@ 0xaa
 8001f5c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 8001f60:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <SBUS_getData+0x698>)
 8001f62:	7ddb      	ldrb	r3, [r3, #23]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d90a      	bls.n	8001f7e <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <SBUS_getData+0x698>)
 8001f6a:	7ddb      	ldrb	r3, [r3, #23]
 8001f6c:	3b04      	subs	r3, #4
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <SBUS_getData+0x698>)
 8001f72:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8001f74:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <SBUS_getData+0x694>)
 8001f76:	2210      	movs	r2, #16
 8001f78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001f7c:	e003      	b.n	8001f86 <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=Ok;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <SBUS_getData+0x694>)
 8001f80:	22aa      	movs	r2, #170	@ 0xaa
 8001f82:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <SBUS_getData+0x698>)
 8001f88:	7ddb      	ldrb	r3, [r3, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d90a      	bls.n	8001fa4 <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <SBUS_getData+0x698>)
 8001f90:	7ddb      	ldrb	r3, [r3, #23]
 8001f92:	3b02      	subs	r3, #2
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <SBUS_getData+0x698>)
 8001f98:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <SBUS_getData+0x694>)
 8001f9c:	22ff      	movs	r2, #255	@ 0xff
 8001f9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001fa2:	e003      	b.n	8001fac <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=OFF;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <SBUS_getData+0x694>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	if(SBUS_UART_Rx[23]){
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <SBUS_getData+0x698>)
 8001fae:	7ddb      	ldrb	r3, [r3, #23]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <SBUS_getData+0x67a>
		Radio_input.Interruptor_1=ON;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <SBUS_getData+0x694>)
 8001fb6:	22ff      	movs	r2, #255	@ 0xff
 8001fb8:	f883 2020 	strb.w	r2, [r3, #32]
 8001fbc:	e003      	b.n	8001fc6 <SBUS_getData+0x682>
	}else Radio_input.Interruptor_1=OFF;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <SBUS_getData+0x694>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2020 	strb.w	r2, [r3, #32]


	Radio_input.Uart_Counter = 0;
 8001fc6:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <SBUS_getData+0x694>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Temp_BypassFunct();
 8001fce:	f7ff fc87 	bl	80018e0 <Temp_BypassFunct>

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	24000064 	.word	0x24000064
 8001fdc:	24000284 	.word	0x24000284

08001fe0 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <SBUS_IntegrityVerification+0x44>)
 8001fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fea:	2bff      	cmp	r3, #255	@ 0xff
 8001fec:	d00c      	beq.n	8002008 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <SBUS_IntegrityVerification+0x44>)
 8001ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <SBUS_IntegrityVerification+0x44>)
 8001ffa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		Radio_input.uart_error = Ok;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <SBUS_IntegrityVerification+0x44>)
 8002000:	22aa      	movs	r2, #170	@ 0xaa
 8002002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8002006:	e007      	b.n	8002018 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <SBUS_IntegrityVerification+0x44>)
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		Radio_input.fail_safe = FailSafe;
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <SBUS_IntegrityVerification+0x44>)
 8002012:	2235      	movs	r2, #53	@ 0x35
 8002014:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	24000064 	.word	0x24000064

08002028 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 800202c:	2201      	movs	r2, #1
 800202e:	4910      	ldr	r1, [pc, #64]	@ (8002070 <SD_init+0x48>)
 8002030:	4810      	ldr	r0, [pc, #64]	@ (8002074 <SD_init+0x4c>)
 8002032:	f00f fc91 	bl	8011958 <f_mount>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <SD_init+0x50>)
 800203c:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800203e:	2213      	movs	r2, #19
 8002040:	490e      	ldr	r1, [pc, #56]	@ (800207c <SD_init+0x54>)
 8002042:	480f      	ldr	r0, [pc, #60]	@ (8002080 <SD_init+0x58>)
 8002044:	f00f fcce 	bl	80119e4 <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <SD_init+0x58>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4619      	mov	r1, r3
 800204e:	480c      	ldr	r0, [pc, #48]	@ (8002080 <SD_init+0x58>)
 8002050:	f010 f8cc 	bl	80121ec <f_lseek>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <SD_init+0x50>)
 800205a:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,Pitch,Roll,Yaw,Alt,Pressure,Temp\n");
 800205c:	4909      	ldr	r1, [pc, #36]	@ (8002084 <SD_init+0x5c>)
 800205e:	4808      	ldr	r0, [pc, #32]	@ (8002080 <SD_init+0x58>)
 8002060:	f010 fb60 	bl	8012724 <f_printf>
	  f_close(&fil);
 8002064:	4806      	ldr	r0, [pc, #24]	@ (8002080 <SD_init+0x58>)
 8002066:	f010 f897 	bl	8012198 <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	08013098 	.word	0x08013098
 8002074:	240002a0 	.word	0x240002a0
 8002078:	2400230c 	.word	0x2400230c
 800207c:	2400008c 	.word	0x2400008c
 8002080:	240012dc 	.word	0x240012dc
 8002084:	0801309c 	.word	0x0801309c

08002088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <MX_DMA_Init+0x4c>)
 8002090:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002094:	4a0f      	ldr	r2, [pc, #60]	@ (80020d4 <MX_DMA_Init+0x4c>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <MX_DMA_Init+0x4c>)
 80020a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	200b      	movs	r0, #11
 80020b2:	f001 fdca 	bl	8003c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020b6:	200b      	movs	r0, #11
 80020b8:	f001 fde1 	bl	8003c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	200c      	movs	r0, #12
 80020c2:	f001 fdc2 	bl	8003c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020c6:	200c      	movs	r0, #12
 80020c8:	f001 fdd9 	bl	8003c7e <HAL_NVIC_EnableIRQ>

}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	58024400 	.word	0x58024400

080020d8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80020dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 80020de:	4a2f      	ldr	r2, [pc, #188]	@ (800219c <MX_FDCAN1_Init+0xc4>)
 80020e0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80020e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80020e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80020ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80020f4:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80020fa:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002102:	2210      	movs	r2, #16
 8002104:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002106:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002108:	2201      	movs	r2, #1
 800210a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 800210e:	2202      	movs	r2, #2
 8002110:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002114:	2202      	movs	r2, #2
 8002116:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002118:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 800211a:	2201      	movs	r2, #1
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800211e:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002120:	2201      	movs	r2, #1
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002124:	4b1c      	ldr	r3, [pc, #112]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002126:	2201      	movs	r2, #1
 8002128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 800212c:	2201      	movs	r2, #1
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002132:	2200      	movs	r2, #0
 8002134:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8002136:	4b18      	ldr	r3, [pc, #96]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002138:	2200      	movs	r2, #0
 800213a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800213c:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 800213e:	2200      	movs	r2, #0
 8002140:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002144:	2200      	movs	r2, #0
 8002146:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 800214a:	2204      	movs	r2, #4
 800214c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002150:	2200      	movs	r2, #0
 8002152:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002154:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002156:	2204      	movs	r2, #4
 8002158:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 800215c:	2200      	movs	r2, #0
 800215e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002160:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002162:	2204      	movs	r2, #4
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002168:	2200      	movs	r2, #0
 800216a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800216c:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 800216e:	2200      	movs	r2, #0
 8002170:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002174:	2200      	movs	r2, #0
 8002176:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 800217a:	2200      	movs	r2, #0
 800217c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002180:	2204      	movs	r2, #4
 8002182:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	@ (8002198 <MX_FDCAN1_Init+0xc0>)
 8002186:	f004 fceb 	bl	8006b60 <HAL_FDCAN_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8002190:	f000 fb30 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	24002310 	.word	0x24002310
 800219c:	4000a000 	.word	0x4000a000

080021a0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0ba      	sub	sp, #232	@ 0xe8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	22c0      	movs	r2, #192	@ 0xc0
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f010 fdef 	bl	8012da4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002288 <HAL_FDCAN_MspInit+0xe8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d157      	bne.n	8002280 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80021dc:	2304      	movs	r3, #4
 80021de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80021e0:	2308      	movs	r3, #8
 80021e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80021e4:	2302      	movs	r3, #2
 80021e6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80021f0:	23c0      	movs	r3, #192	@ 0xc0
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80021fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4618      	mov	r0, r3
 800220a:	f006 fb03 	bl	8008814 <HAL_RCCEx_PeriphCLKConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8002214:	f000 faee 	bl	80027f4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002218:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <HAL_FDCAN_MspInit+0xec>)
 800221a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800221e:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <HAL_FDCAN_MspInit+0xec>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002224:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8002228:	4b18      	ldr	r3, [pc, #96]	@ (800228c <HAL_FDCAN_MspInit+0xec>)
 800222a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <HAL_FDCAN_MspInit+0xec>)
 8002238:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800223c:	4a13      	ldr	r2, [pc, #76]	@ (800228c <HAL_FDCAN_MspInit+0xec>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_FDCAN_MspInit+0xec>)
 8002248:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002254:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002258:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800226e:	2309      	movs	r3, #9
 8002270:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002274:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002278:	4619      	mov	r1, r3
 800227a:	4805      	ldr	r0, [pc, #20]	@ (8002290 <HAL_FDCAN_MspInit+0xf0>)
 800227c:	f004 ffd4 	bl	8007228 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002280:	bf00      	nop
 8002282:	37e8      	adds	r7, #232	@ 0xe8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	4000a000 	.word	0x4000a000
 800228c:	58024400 	.word	0x58024400
 8002290:	58020000 	.word	0x58020000

08002294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	4b4e      	ldr	r3, [pc, #312]	@ (80023e4 <MX_GPIO_Init+0x150>)
 80022ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022b0:	4a4c      	ldr	r2, [pc, #304]	@ (80023e4 <MX_GPIO_Init+0x150>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80022ba:	4b4a      	ldr	r3, [pc, #296]	@ (80023e4 <MX_GPIO_Init+0x150>)
 80022bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4b46      	ldr	r3, [pc, #280]	@ (80023e4 <MX_GPIO_Init+0x150>)
 80022ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022ce:	4a45      	ldr	r2, [pc, #276]	@ (80023e4 <MX_GPIO_Init+0x150>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80022d8:	4b42      	ldr	r3, [pc, #264]	@ (80023e4 <MX_GPIO_Init+0x150>)
 80022da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	4b3f      	ldr	r3, [pc, #252]	@ (80023e4 <MX_GPIO_Init+0x150>)
 80022e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022ec:	4a3d      	ldr	r2, [pc, #244]	@ (80023e4 <MX_GPIO_Init+0x150>)
 80022ee:	f043 0302 	orr.w	r3, r3, #2
 80022f2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80022f6:	4b3b      	ldr	r3, [pc, #236]	@ (80023e4 <MX_GPIO_Init+0x150>)
 80022f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002304:	4b37      	ldr	r3, [pc, #220]	@ (80023e4 <MX_GPIO_Init+0x150>)
 8002306:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800230a:	4a36      	ldr	r2, [pc, #216]	@ (80023e4 <MX_GPIO_Init+0x150>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002314:	4b33      	ldr	r3, [pc, #204]	@ (80023e4 <MX_GPIO_Init+0x150>)
 8002316:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002322:	2200      	movs	r2, #0
 8002324:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002328:	482f      	ldr	r0, [pc, #188]	@ (80023e8 <MX_GPIO_Init+0x154>)
 800232a:	f005 f92d 	bl	8007588 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	2110      	movs	r1, #16
 8002332:	482e      	ldr	r0, [pc, #184]	@ (80023ec <MX_GPIO_Init+0x158>)
 8002334:	f005 f928 	bl	8007588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8002338:	2200      	movs	r2, #0
 800233a:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800233e:	482c      	ldr	r0, [pc, #176]	@ (80023f0 <MX_GPIO_Init+0x15c>)
 8002340:	f005 f922 	bl	8007588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	2104      	movs	r1, #4
 8002348:	482a      	ldr	r0, [pc, #168]	@ (80023f4 <MX_GPIO_Init+0x160>)
 800234a:	f005 f91d 	bl	8007588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800234e:	f242 030f 	movw	r3, #8207	@ 0x200f
 8002352:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	4820      	ldr	r0, [pc, #128]	@ (80023e8 <MX_GPIO_Init+0x154>)
 8002368:	f004 ff5e 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 800236c:	2310      	movs	r3, #16
 800236e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002370:	2301      	movs	r3, #1
 8002372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4619      	mov	r1, r3
 8002382:	481a      	ldr	r0, [pc, #104]	@ (80023ec <MX_GPIO_Init+0x158>)
 8002384:	f004 ff50 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002388:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800238c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	2301      	movs	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4813      	ldr	r0, [pc, #76]	@ (80023f0 <MX_GPIO_Init+0x15c>)
 80023a2:	f004 ff41 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80023a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	480b      	ldr	r0, [pc, #44]	@ (80023e8 <MX_GPIO_Init+0x154>)
 80023bc:	f004 ff34 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 80023c0:	2304      	movs	r3, #4
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	4807      	ldr	r0, [pc, #28]	@ (80023f4 <MX_GPIO_Init+0x160>)
 80023d8:	f004 ff26 	bl	8007228 <HAL_GPIO_Init>

}
 80023dc:	bf00      	nop
 80023de:	3728      	adds	r7, #40	@ 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	58024400 	.word	0x58024400
 80023e8:	58020800 	.word	0x58020800
 80023ec:	58020000 	.word	0x58020000
 80023f0:	58020400 	.word	0x58020400
 80023f4:	58020c00 	.word	0x58020c00

080023f8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <MX_I2C3_Init+0x74>)
 80023fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <MX_I2C3_Init+0x78>)
 8002400:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8002402:	4b1a      	ldr	r3, [pc, #104]	@ (800246c <MX_I2C3_Init+0x74>)
 8002404:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <MX_I2C3_Init+0x7c>)
 8002406:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002408:	4b18      	ldr	r3, [pc, #96]	@ (800246c <MX_I2C3_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800240e:	4b17      	ldr	r3, [pc, #92]	@ (800246c <MX_I2C3_Init+0x74>)
 8002410:	2201      	movs	r2, #1
 8002412:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002414:	4b15      	ldr	r3, [pc, #84]	@ (800246c <MX_I2C3_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800241a:	4b14      	ldr	r3, [pc, #80]	@ (800246c <MX_I2C3_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <MX_I2C3_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <MX_I2C3_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242c:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <MX_I2C3_Init+0x74>)
 800242e:	2200      	movs	r2, #0
 8002430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002432:	480e      	ldr	r0, [pc, #56]	@ (800246c <MX_I2C3_Init+0x74>)
 8002434:	f005 f8c2 	bl	80075bc <HAL_I2C_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800243e:	f000 f9d9 	bl	80027f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002442:	2100      	movs	r1, #0
 8002444:	4809      	ldr	r0, [pc, #36]	@ (800246c <MX_I2C3_Init+0x74>)
 8002446:	f005 f955 	bl	80076f4 <HAL_I2CEx_ConfigAnalogFilter>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002450:	f000 f9d0 	bl	80027f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002454:	2100      	movs	r1, #0
 8002456:	4805      	ldr	r0, [pc, #20]	@ (800246c <MX_I2C3_Init+0x74>)
 8002458:	f005 f997 	bl	800778a <HAL_I2CEx_ConfigDigitalFilter>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002462:	f000 f9c7 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	240023b0 	.word	0x240023b0
 8002470:	40005c00 	.word	0x40005c00
 8002474:	20b0ccff 	.word	0x20b0ccff

08002478 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0bc      	sub	sp, #240	@ 0xf0
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	22c0      	movs	r2, #192	@ 0xc0
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f010 fc83 	bl	8012da4 <memset>
  if(i2cHandle->Instance==I2C3)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a39      	ldr	r2, [pc, #228]	@ (8002588 <HAL_I2C_MspInit+0x110>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d16b      	bne.n	8002580 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80024a8:	f04f 0208 	mov.w	r2, #8
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ba:	f107 0318 	add.w	r3, r7, #24
 80024be:	4618      	mov	r0, r3
 80024c0:	f006 f9a8 	bl	8008814 <HAL_RCCEx_PeriphCLKConfig>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80024ca:	f000 f993 	bl	80027f4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ce:	4b2f      	ldr	r3, [pc, #188]	@ (800258c <HAL_I2C_MspInit+0x114>)
 80024d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024d4:	4a2d      	ldr	r2, [pc, #180]	@ (800258c <HAL_I2C_MspInit+0x114>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024de:	4b2b      	ldr	r3, [pc, #172]	@ (800258c <HAL_I2C_MspInit+0x114>)
 80024e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	4b27      	ldr	r3, [pc, #156]	@ (800258c <HAL_I2C_MspInit+0x114>)
 80024ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024f2:	4a26      	ldr	r2, [pc, #152]	@ (800258c <HAL_I2C_MspInit+0x114>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024fc:	4b23      	ldr	r3, [pc, #140]	@ (800258c <HAL_I2C_MspInit+0x114>)
 80024fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800250a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800250e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002512:	2312      	movs	r3, #18
 8002514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002524:	2304      	movs	r3, #4
 8002526:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800252e:	4619      	mov	r1, r3
 8002530:	4817      	ldr	r0, [pc, #92]	@ (8002590 <HAL_I2C_MspInit+0x118>)
 8002532:	f004 fe79 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002536:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800253a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253e:	2312      	movs	r3, #18
 8002540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002550:	2304      	movs	r3, #4
 8002552:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800255a:	4619      	mov	r1, r3
 800255c:	480d      	ldr	r0, [pc, #52]	@ (8002594 <HAL_I2C_MspInit+0x11c>)
 800255e:	f004 fe63 	bl	8007228 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_I2C_MspInit+0x114>)
 8002564:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002568:	4a08      	ldr	r2, [pc, #32]	@ (800258c <HAL_I2C_MspInit+0x114>)
 800256a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800256e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_I2C_MspInit+0x114>)
 8002574:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002578:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002580:	bf00      	nop
 8002582:	37f0      	adds	r7, #240	@ 0xf0
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40005c00 	.word	0x40005c00
 800258c:	58024400 	.word	0x58024400
 8002590:	58020800 	.word	0x58020800
 8002594:	58020000 	.word	0x58020000

08002598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800259c:	f000 f8fe 	bl	800279c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a0:	f001 f9c2 	bl	8003928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025a4:	f000 f832 	bl	800260c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025a8:	f7ff fe74 	bl	8002294 <MX_GPIO_Init>
  MX_DMA_Init();
 80025ac:	f7ff fd6c 	bl	8002088 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80025b0:	f7ff fd92 	bl	80020d8 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 80025b4:	f7ff ff20 	bl	80023f8 <MX_I2C3_Init>
  MX_SPI1_Init();
 80025b8:	f000 f922 	bl	8002800 <MX_SPI1_Init>
  MX_SPI2_Init();
 80025bc:	f000 f976 	bl	80028ac <MX_SPI2_Init>
  MX_TIM2_Init();
 80025c0:	f000 fb8e 	bl	8002ce0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80025c4:	f000 fc08 	bl	8002dd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80025c8:	f000 fc6c 	bl	8002ea4 <MX_TIM4_Init>
  MX_UART4_Init();
 80025cc:	f000 fe7c 	bl	80032c8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80025d0:	f000 fec6 	bl	8003360 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80025d4:	f000 ff60 	bl	8003498 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 80025d8:	f000 fd1a 	bl	8003010 <MX_TIM13_Init>
  MX_FATFS_Init();
 80025dc:	f00c fa40 	bl	800ea60 <MX_FATFS_Init>
  MX_TIM6_Init();
 80025e0:	f000 fcdc 	bl	8002f9c <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80025e4:	f000 ff0c 	bl	8003400 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 80025e8:	f7fe fd12 	bl	8001010 <BMP280_init>
  SD_init();
 80025ec:	f7ff fd1c 	bl	8002028 <SD_init>
  SBUS_init();
 80025f0:	f7ff f91c 	bl	800182c <SBUS_init>
  BNO_Init();
 80025f4:	f7fe ff24 	bl	8001440 <BNO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 80025f8:	f7fe fd30 	bl	800105c <BMP280_calculate>
	  BNO_CalibrationStatus();
 80025fc:	f7fe ff5a 	bl	80014b4 <BNO_CalibrationStatus>
	  HAL_Delay(500);
 8002600:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002604:	f001 fa22 	bl	8003a4c <HAL_Delay>
	  BMP280_calculate();
 8002608:	bf00      	nop
 800260a:	e7f5      	b.n	80025f8 <main+0x60>

0800260c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b09c      	sub	sp, #112	@ 0x70
 8002610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002616:	224c      	movs	r2, #76	@ 0x4c
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f010 fbc2 	bl	8012da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	2220      	movs	r2, #32
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f010 fbbc 	bl	8012da4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800262c:	4b30      	ldr	r3, [pc, #192]	@ (80026f0 <SystemClock_Config+0xe4>)
 800262e:	f04f 32ff 	mov.w	r2, #4294967295
 8002632:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002636:	2002      	movs	r0, #2
 8002638:	f005 f8f4 	bl	8007824 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800263c:	2300      	movs	r3, #0
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4b2c      	ldr	r3, [pc, #176]	@ (80026f4 <SystemClock_Config+0xe8>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a2b      	ldr	r2, [pc, #172]	@ (80026f4 <SystemClock_Config+0xe8>)
 8002646:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <SystemClock_Config+0xe8>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002658:	bf00      	nop
 800265a:	4b26      	ldr	r3, [pc, #152]	@ (80026f4 <SystemClock_Config+0xe8>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002666:	d1f8      	bne.n	800265a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002668:	2302      	movs	r3, #2
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800266c:	2301      	movs	r3, #1
 800266e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002670:	2340      	movs	r3, #64	@ 0x40
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002674:	2302      	movs	r3, #2
 8002676:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002678:	2300      	movs	r3, #0
 800267a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800267c:	2304      	movs	r3, #4
 800267e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002680:	2323      	movs	r3, #35	@ 0x23
 8002682:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002684:	2302      	movs	r3, #2
 8002686:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002688:	2302      	movs	r3, #2
 800268a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800268c:	2302      	movs	r3, #2
 800268e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002690:	230c      	movs	r3, #12
 8002692:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002694:	2300      	movs	r3, #0
 8002696:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800269c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f005 f8f9 	bl	8007898 <HAL_RCC_OscConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80026ac:	f000 f8a2 	bl	80027f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b0:	233f      	movs	r3, #63	@ 0x3f
 80026b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026b4:	2303      	movs	r3, #3
 80026b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80026c0:	2340      	movs	r3, #64	@ 0x40
 80026c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80026c4:	2340      	movs	r3, #64	@ 0x40
 80026c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80026c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80026ce:	2340      	movs	r3, #64	@ 0x40
 80026d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2106      	movs	r1, #6
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 fd10 	bl	80080fc <HAL_RCC_ClockConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80026e2:	f000 f887 	bl	80027f4 <Error_Handler>
  }
}
 80026e6:	bf00      	nop
 80026e8:	3770      	adds	r7, #112	@ 0x70
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	58024400 	.word	0x58024400
 80026f4:	58024800 	.word	0x58024800

080026f8 <HAL_UART_RxCpltCallback>:

uint64_t TimeOn_Counter = 0x00;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a10      	ldr	r2, [pc, #64]	@ (8002748 <HAL_UART_RxCpltCallback+0x50>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d10a      	bne.n	8002720 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_UART_RxCpltCallback+0x54>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f89a 	bl	8001848 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8002714:	2201      	movs	r2, #1
 8002716:	490d      	ldr	r1, [pc, #52]	@ (800274c <HAL_UART_RxCpltCallback+0x54>)
 8002718:	480d      	ldr	r0, [pc, #52]	@ (8002750 <HAL_UART_RxCpltCallback+0x58>)
 800271a:	f00a f9a7 	bl	800ca6c <HAL_UART_Receive_DMA>
	}
    else if (huart -> Instance == USART3){
        BNO_Receive(BNO_BufferByte);
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
    }
}
 800271e:	e00e      	b.n	800273e <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0b      	ldr	r2, [pc, #44]	@ (8002754 <HAL_UART_RxCpltCallback+0x5c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d109      	bne.n	800273e <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_UART_RxCpltCallback+0x60>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fee0 	bl	80014f4 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002734:	2201      	movs	r2, #1
 8002736:	4908      	ldr	r1, [pc, #32]	@ (8002758 <HAL_UART_RxCpltCallback+0x60>)
 8002738:	4808      	ldr	r0, [pc, #32]	@ (800275c <HAL_UART_RxCpltCallback+0x64>)
 800273a:	f00a f997 	bl	800ca6c <HAL_UART_Receive_DMA>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40011000 	.word	0x40011000
 800274c:	2400029d 	.word	0x2400029d
 8002750:	24002730 	.word	0x24002730
 8002754:	40004800 	.word	0x40004800
 8002758:	24000263 	.word	0x24000263
 800275c:	240027c4 	.word	0x240027c4

08002760 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002760:	b5b0      	push	{r4, r5, r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a09      	ldr	r2, [pc, #36]	@ (8002794 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d10c      	bne.n	800278c <HAL_TIM_PeriodElapsedCallback+0x2c>
		TimeOn_Counter++;
 8002772:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	1c54      	adds	r4, r2, #1
 800277a:	f143 0500 	adc.w	r5, r3, #0
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002780:	e9c3 4500 	strd	r4, r5, [r3]
		LED_Tasks();
 8002784:	f7fe ffa0 	bl	80016c8 <LED_Tasks>
		SBUS_IntegrityVerification();
 8002788:	f7ff fc2a 	bl	8001fe0 <SBUS_IntegrityVerification>
	}

}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bdb0      	pop	{r4, r5, r7, pc}
 8002794:	40001000 	.word	0x40001000
 8002798:	24002408 	.word	0x24002408

0800279c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80027a2:	463b      	mov	r3, r7
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80027ae:	f001 fa81 	bl	8003cb4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80027be:	231f      	movs	r3, #31
 80027c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80027c2:	2387      	movs	r3, #135	@ 0x87
 80027c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80027ca:	2300      	movs	r3, #0
 80027cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80027d2:	2301      	movs	r3, #1
 80027d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027de:	463b      	mov	r3, r7
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 fa9f 	bl	8003d24 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80027e6:	2004      	movs	r0, #4
 80027e8:	f001 fa7c 	bl	8003ce4 <HAL_MPU_Enable>

}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f8:	b672      	cpsid	i
}
 80027fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <Error_Handler+0x8>

08002800 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002804:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002806:	4a28      	ldr	r2, [pc, #160]	@ (80028a8 <MX_SPI1_Init+0xa8>)
 8002808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800280a:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 800280c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002812:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002818:	4b22      	ldr	r3, [pc, #136]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 800281a:	2207      	movs	r2, #7
 800281c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800281e:	4b21      	ldr	r3, [pc, #132]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002824:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002826:	2200      	movs	r2, #0
 8002828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800282a:	4b1e      	ldr	r3, [pc, #120]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 800282c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002834:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8002838:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800283a:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002840:	4b18      	ldr	r3, [pc, #96]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002842:	2200      	movs	r2, #0
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002846:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002848:	2200      	movs	r2, #0
 800284a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 800284e:	2200      	movs	r2, #0
 8002850:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002854:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002858:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 800285c:	2200      	movs	r2, #0
 800285e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002860:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002862:	2200      	movs	r2, #0
 8002864:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002868:	2200      	movs	r2, #0
 800286a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800286c:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002872:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002874:	2200      	movs	r2, #0
 8002876:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 800287a:	2200      	movs	r2, #0
 800287c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002880:	2200      	movs	r2, #0
 8002882:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002884:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002886:	2200      	movs	r2, #0
 8002888:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 800288c:	2200      	movs	r2, #0
 800288e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002890:	4804      	ldr	r0, [pc, #16]	@ (80028a4 <MX_SPI1_Init+0xa4>)
 8002892:	f007 fd9f 	bl	800a3d4 <HAL_SPI_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800289c:	f7ff ffaa 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	24002410 	.word	0x24002410
 80028a8:	40013000 	.word	0x40013000

080028ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028b0:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028b2:	4a28      	ldr	r2, [pc, #160]	@ (8002954 <MX_SPI2_Init+0xa8>)
 80028b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028b6:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80028bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028be:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c4:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028c6:	2207      	movs	r2, #7
 80028c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ca:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028e0:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80028e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ec:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f2:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80028f8:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <MX_SPI2_Init+0xa4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028fe:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <MX_SPI2_Init+0xa4>)
 8002900:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002904:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002906:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <MX_SPI2_Init+0xa4>)
 8002908:	2200      	movs	r2, #0
 800290a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800290c:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <MX_SPI2_Init+0xa4>)
 800290e:	2200      	movs	r2, #0
 8002910:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002912:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <MX_SPI2_Init+0xa4>)
 8002914:	2200      	movs	r2, #0
 8002916:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <MX_SPI2_Init+0xa4>)
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <MX_SPI2_Init+0xa4>)
 8002920:	2200      	movs	r2, #0
 8002922:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <MX_SPI2_Init+0xa4>)
 8002926:	2200      	movs	r2, #0
 8002928:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <MX_SPI2_Init+0xa4>)
 800292c:	2200      	movs	r2, #0
 800292e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002930:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <MX_SPI2_Init+0xa4>)
 8002932:	2200      	movs	r2, #0
 8002934:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <MX_SPI2_Init+0xa4>)
 8002938:	2200      	movs	r2, #0
 800293a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800293c:	4804      	ldr	r0, [pc, #16]	@ (8002950 <MX_SPI2_Init+0xa4>)
 800293e:	f007 fd49 	bl	800a3d4 <HAL_SPI_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002948:	f7ff ff54 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	24002498 	.word	0x24002498
 8002954:	40003800 	.word	0x40003800

08002958 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0bc      	sub	sp, #240	@ 0xf0
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002970:	f107 0318 	add.w	r3, r7, #24
 8002974:	22c0      	movs	r2, #192	@ 0xc0
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f010 fa13 	bl	8012da4 <memset>
  if(spiHandle->Instance==SPI1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a4c      	ldr	r2, [pc, #304]	@ (8002ab4 <HAL_SPI_MspInit+0x15c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d145      	bne.n	8002a14 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002988:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002994:	2300      	movs	r3, #0
 8002996:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002998:	f107 0318 	add.w	r3, r7, #24
 800299c:	4618      	mov	r0, r3
 800299e:	f005 ff39 	bl	8008814 <HAL_RCCEx_PeriphCLKConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80029a8:	f7ff ff24 	bl	80027f4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ac:	4b42      	ldr	r3, [pc, #264]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 80029ae:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80029b2:	4a41      	ldr	r2, [pc, #260]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 80029b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029b8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80029bc:	4b3e      	ldr	r3, [pc, #248]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 80029be:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80029c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 80029cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029d0:	4a39      	ldr	r2, [pc, #228]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80029da:	4b37      	ldr	r3, [pc, #220]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 80029dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80029e8:	23e0      	movs	r3, #224	@ 0xe0
 80029ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a00:	2305      	movs	r3, #5
 8002a02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	482b      	ldr	r0, [pc, #172]	@ (8002abc <HAL_SPI_MspInit+0x164>)
 8002a0e:	f004 fc0b 	bl	8007228 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002a12:	e04a      	b.n	8002aaa <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a29      	ldr	r2, [pc, #164]	@ (8002ac0 <HAL_SPI_MspInit+0x168>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d145      	bne.n	8002aaa <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002a1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a2e:	f107 0318 	add.w	r3, r7, #24
 8002a32:	4618      	mov	r0, r3
 8002a34:	f005 feee 	bl	8008814 <HAL_RCCEx_PeriphCLKConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002a3e:	f7ff fed9 	bl	80027f4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a42:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 8002a44:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002a48:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 8002a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a4e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002a52:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 8002a54:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a60:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 8002a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a66:	4a14      	ldr	r2, [pc, #80]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <HAL_SPI_MspInit+0x160>)
 8002a72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8002a7e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a98:	2305      	movs	r3, #5
 8002a9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4807      	ldr	r0, [pc, #28]	@ (8002ac4 <HAL_SPI_MspInit+0x16c>)
 8002aa6:	f004 fbbf 	bl	8007228 <HAL_GPIO_Init>
}
 8002aaa:	bf00      	nop
 8002aac:	37f0      	adds	r7, #240	@ 0xf0
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40013000 	.word	0x40013000
 8002ab8:	58024400 	.word	0x58024400
 8002abc:	58020000 	.word	0x58020000
 8002ac0:	40003800 	.word	0x40003800
 8002ac4:	58020400 	.word	0x58020400

08002ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_MspInit+0x30>)
 8002ad0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002ad4:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <HAL_MspInit+0x30>)
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_MspInit+0x30>)
 8002ae0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	58024400 	.word	0x58024400

08002afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b00:	bf00      	nop
 8002b02:	e7fd      	b.n	8002b00 <NMI_Handler+0x4>

08002b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <HardFault_Handler+0x4>

08002b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <MemManage_Handler+0x4>

08002b14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <BusFault_Handler+0x4>

08002b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <UsageFault_Handler+0x4>

08002b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <SysTick_Handler+0x34>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <SysTick_Handler+0x18>
	    Timer1--;
 8002b5c:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <SysTick_Handler+0x34>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <SysTick_Handler+0x34>)
 8002b66:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8002b68:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <SysTick_Handler+0x38>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <SysTick_Handler+0x2c>
	    Timer2--;
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <SysTick_Handler+0x38>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	4b03      	ldr	r3, [pc, #12]	@ (8002b88 <SysTick_Handler+0x38>)
 8002b7a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7c:	f000 ff46 	bl	8003a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	240029e8 	.word	0x240029e8
 8002b88:	240029ea 	.word	0x240029ea

08002b8c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b90:	4802      	ldr	r0, [pc, #8]	@ (8002b9c <DMA1_Stream0_IRQHandler+0x10>)
 8002b92:	f002 fc63 	bl	800545c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	240028ec 	.word	0x240028ec

08002ba0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002ba4:	4802      	ldr	r0, [pc, #8]	@ (8002bb0 <DMA1_Stream1_IRQHandler+0x10>)
 8002ba6:	f002 fc59 	bl	800545c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	24002964 	.word	0x24002964

08002bb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bb8:	4802      	ldr	r0, [pc, #8]	@ (8002bc4 <USART1_IRQHandler+0x10>)
 8002bba:	f009 ffa3 	bl	800cb04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	24002730 	.word	0x24002730

08002bc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bcc:	4802      	ldr	r0, [pc, #8]	@ (8002bd8 <USART3_IRQHandler+0x10>)
 8002bce:	f009 ff99 	bl	800cb04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	240027c4 	.word	0x240027c4

08002bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002be0:	4802      	ldr	r0, [pc, #8]	@ (8002bec <TIM6_DAC_IRQHandler+0x10>)
 8002be2:	f008 ffd3 	bl	800bb8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	24002604 	.word	0x24002604

08002bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bf4:	4b32      	ldr	r3, [pc, #200]	@ (8002cc0 <SystemInit+0xd0>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfa:	4a31      	ldr	r2, [pc, #196]	@ (8002cc0 <SystemInit+0xd0>)
 8002bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c04:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc4 <SystemInit+0xd4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d807      	bhi.n	8002c20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c10:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc4 <SystemInit+0xd4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 030f 	bic.w	r3, r3, #15
 8002c18:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc4 <SystemInit+0xd4>)
 8002c1a:	f043 0303 	orr.w	r3, r3, #3
 8002c1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c20:	4b29      	ldr	r3, [pc, #164]	@ (8002cc8 <SystemInit+0xd8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a28      	ldr	r2, [pc, #160]	@ (8002cc8 <SystemInit+0xd8>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c2c:	4b26      	ldr	r3, [pc, #152]	@ (8002cc8 <SystemInit+0xd8>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c32:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <SystemInit+0xd8>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4924      	ldr	r1, [pc, #144]	@ (8002cc8 <SystemInit+0xd8>)
 8002c38:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <SystemInit+0xdc>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c3e:	4b21      	ldr	r3, [pc, #132]	@ (8002cc4 <SystemInit+0xd4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <SystemInit+0xd4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 030f 	bic.w	r3, r3, #15
 8002c52:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc4 <SystemInit+0xd4>)
 8002c54:	f043 0303 	orr.w	r3, r3, #3
 8002c58:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <SystemInit+0xd8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002c60:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <SystemInit+0xd8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002c66:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <SystemInit+0xd8>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <SystemInit+0xd8>)
 8002c6e:	4a18      	ldr	r2, [pc, #96]	@ (8002cd0 <SystemInit+0xe0>)
 8002c70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <SystemInit+0xd8>)
 8002c74:	4a17      	ldr	r2, [pc, #92]	@ (8002cd4 <SystemInit+0xe4>)
 8002c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c78:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <SystemInit+0xd8>)
 8002c7a:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <SystemInit+0xe8>)
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c7e:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <SystemInit+0xd8>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c84:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <SystemInit+0xd8>)
 8002c86:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <SystemInit+0xe8>)
 8002c88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <SystemInit+0xd8>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c90:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <SystemInit+0xd8>)
 8002c92:	4a11      	ldr	r2, [pc, #68]	@ (8002cd8 <SystemInit+0xe8>)
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c96:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <SystemInit+0xd8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <SystemInit+0xd8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a09      	ldr	r2, [pc, #36]	@ (8002cc8 <SystemInit+0xd8>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <SystemInit+0xd8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <SystemInit+0xec>)
 8002cb0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002cb4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00
 8002cc4:	52002000 	.word	0x52002000
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002cd0:	02020200 	.word	0x02020200
 8002cd4:	01ff0000 	.word	0x01ff0000
 8002cd8:	01010280 	.word	0x01010280
 8002cdc:	52004000 	.word	0x52004000

08002ce0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	@ 0x28
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce6:	f107 031c 	add.w	r3, r7, #28
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cf2:	463b      	mov	r3, r7
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
 8002d00:	615a      	str	r2, [r3, #20]
 8002d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d04:	4b33      	ldr	r3, [pc, #204]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002d0c:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d0e:	f240 1217 	movw	r2, #279	@ 0x117
 8002d12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d14:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d1c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002d20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d22:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d28:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d2a:	2280      	movs	r2, #128	@ 0x80
 8002d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d2e:	4829      	ldr	r0, [pc, #164]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d30:	f008 fdc6 	bl	800b8c0 <HAL_TIM_PWM_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002d3a:	f7ff fd5b 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4821      	ldr	r0, [pc, #132]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d4e:	f009 fd03 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002d58:	f7ff fd4c 	bl	80027f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d5c:	2360      	movs	r3, #96	@ 0x60
 8002d5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4619      	mov	r1, r3
 8002d72:	4818      	ldr	r0, [pc, #96]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d74:	f009 f812 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002d7e:	f7ff fd39 	bl	80027f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	2204      	movs	r2, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4812      	ldr	r0, [pc, #72]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002d8a:	f009 f807 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002d94:	f7ff fd2e 	bl	80027f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d98:	463b      	mov	r3, r7
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	480d      	ldr	r0, [pc, #52]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002da0:	f008 fffc 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002daa:	f7ff fd23 	bl	80027f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002dae:	463b      	mov	r3, r7
 8002db0:	220c      	movs	r2, #12
 8002db2:	4619      	mov	r1, r3
 8002db4:	4807      	ldr	r0, [pc, #28]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002db6:	f008 fff1 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002dc0:	f7ff fd18 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002dc4:	4803      	ldr	r0, [pc, #12]	@ (8002dd4 <MX_TIM2_Init+0xf4>)
 8002dc6:	f000 f9d5 	bl	8003174 <HAL_TIM_MspPostInit>

}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	@ 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	24002520 	.word	0x24002520

08002dd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	@ 0x28
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dde:	f107 031c 	add.w	r3, r7, #28
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dea:	463b      	mov	r3, r7
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
 8002df8:	615a      	str	r2, [r3, #20]
 8002dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dfc:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002dfe:	4a28      	ldr	r2, [pc, #160]	@ (8002ea0 <MX_TIM3_Init+0xc8>)
 8002e00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8002e02:	4b26      	ldr	r3, [pc, #152]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e04:	f240 1217 	movw	r2, #279	@ 0x117
 8002e08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0a:	4b24      	ldr	r3, [pc, #144]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002e10:	4b22      	ldr	r3, [pc, #136]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e12:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002e16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e18:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e20:	2280      	movs	r2, #128	@ 0x80
 8002e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e24:	481d      	ldr	r0, [pc, #116]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e26:	f008 fd4b 	bl	800b8c0 <HAL_TIM_PWM_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002e30:	f7ff fce0 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	4619      	mov	r1, r3
 8002e42:	4816      	ldr	r0, [pc, #88]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e44:	f009 fc88 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002e4e:	f7ff fcd1 	bl	80027f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e52:	2360      	movs	r3, #96	@ 0x60
 8002e54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e62:	463b      	mov	r3, r7
 8002e64:	2200      	movs	r2, #0
 8002e66:	4619      	mov	r1, r3
 8002e68:	480c      	ldr	r0, [pc, #48]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e6a:	f008 ff97 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002e74:	f7ff fcbe 	bl	80027f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e78:	463b      	mov	r3, r7
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4807      	ldr	r0, [pc, #28]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e80:	f008 ff8c 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002e8a:	f7ff fcb3 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e8e:	4803      	ldr	r0, [pc, #12]	@ (8002e9c <MX_TIM3_Init+0xc4>)
 8002e90:	f000 f970 	bl	8003174 <HAL_TIM_MspPostInit>

}
 8002e94:	bf00      	nop
 8002e96:	3728      	adds	r7, #40	@ 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	2400256c 	.word	0x2400256c
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	@ 0x28
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eaa:	f107 031c 	add.w	r3, r7, #28
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
 8002ec4:	615a      	str	r2, [r3, #20]
 8002ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ec8:	4b32      	ldr	r3, [pc, #200]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002eca:	4a33      	ldr	r2, [pc, #204]	@ (8002f98 <MX_TIM4_Init+0xf4>)
 8002ecc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002ece:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002ed0:	f240 1217 	movw	r2, #279	@ 0x117
 8002ed4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002edc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002ede:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002ee2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002eea:	4b2a      	ldr	r3, [pc, #168]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002eec:	2280      	movs	r2, #128	@ 0x80
 8002eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ef0:	4828      	ldr	r0, [pc, #160]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002ef2:	f008 fce5 	bl	800b8c0 <HAL_TIM_PWM_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002efc:	f7ff fc7a 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4821      	ldr	r0, [pc, #132]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002f10:	f009 fc22 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002f1a:	f7ff fc6b 	bl	80027f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f1e:	2360      	movs	r3, #96	@ 0x60
 8002f20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f2e:	463b      	mov	r3, r7
 8002f30:	2200      	movs	r2, #0
 8002f32:	4619      	mov	r1, r3
 8002f34:	4817      	ldr	r0, [pc, #92]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002f36:	f008 ff31 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002f40:	f7ff fc58 	bl	80027f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f44:	463b      	mov	r3, r7
 8002f46:	2204      	movs	r2, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4812      	ldr	r0, [pc, #72]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002f4c:	f008 ff26 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002f56:	f7ff fc4d 	bl	80027f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480c      	ldr	r0, [pc, #48]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002f62:	f008 ff1b 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002f6c:	f7ff fc42 	bl	80027f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f70:	463b      	mov	r3, r7
 8002f72:	220c      	movs	r2, #12
 8002f74:	4619      	mov	r1, r3
 8002f76:	4807      	ldr	r0, [pc, #28]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002f78:	f008 ff10 	bl	800bd9c <HAL_TIM_PWM_ConfigChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002f82:	f7ff fc37 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f86:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <MX_TIM4_Init+0xf0>)
 8002f88:	f000 f8f4 	bl	8003174 <HAL_TIM_MspPostInit>

}
 8002f8c:	bf00      	nop
 8002f8e:	3728      	adds	r7, #40	@ 0x28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	240025b8 	.word	0x240025b8
 8002f98:	40000800 	.word	0x40000800

08002f9c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fac:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <MX_TIM6_Init+0x6c>)
 8002fae:	4a17      	ldr	r2, [pc, #92]	@ (800300c <MX_TIM6_Init+0x70>)
 8002fb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8002fb2:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <MX_TIM6_Init+0x6c>)
 8002fb4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002fb8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fba:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <MX_TIM6_Init+0x6c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <MX_TIM6_Init+0x6c>)
 8002fc2:	f240 1217 	movw	r2, #279	@ 0x117
 8002fc6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <MX_TIM6_Init+0x6c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fce:	480e      	ldr	r0, [pc, #56]	@ (8003008 <MX_TIM6_Init+0x6c>)
 8002fd0:	f008 fba7 	bl	800b722 <HAL_TIM_Base_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002fda:	f7ff fc0b 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4807      	ldr	r0, [pc, #28]	@ (8003008 <MX_TIM6_Init+0x6c>)
 8002fec:	f009 fbb4 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002ff6:	f7ff fbfd 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002ffa:	4803      	ldr	r0, [pc, #12]	@ (8003008 <MX_TIM6_Init+0x6c>)
 8002ffc:	f008 fbe8 	bl	800b7d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	24002604 	.word	0x24002604
 800300c:	40001000 	.word	0x40001000

08003010 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003014:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <MX_TIM13_Init+0x40>)
 8003016:	4a0f      	ldr	r2, [pc, #60]	@ (8003054 <MX_TIM13_Init+0x44>)
 8003018:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <MX_TIM13_Init+0x40>)
 800301c:	f240 1217 	movw	r2, #279	@ 0x117
 8003020:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003022:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <MX_TIM13_Init+0x40>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003028:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <MX_TIM13_Init+0x40>)
 800302a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800302e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003030:	4b07      	ldr	r3, [pc, #28]	@ (8003050 <MX_TIM13_Init+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <MX_TIM13_Init+0x40>)
 8003038:	2280      	movs	r2, #128	@ 0x80
 800303a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800303c:	4804      	ldr	r0, [pc, #16]	@ (8003050 <MX_TIM13_Init+0x40>)
 800303e:	f008 fb70 	bl	800b722 <HAL_TIM_Base_Init>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003048:	f7ff fbd4 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}
 8003050:	24002650 	.word	0x24002650
 8003054:	40001c00 	.word	0x40001c00

08003058 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003068:	d10f      	bne.n	800308a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800306a:	4b1f      	ldr	r3, [pc, #124]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x90>)
 800306c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003070:	4a1d      	ldr	r2, [pc, #116]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x90>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800307a:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x90>)
 800307c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003088:	e028      	b.n	80030dc <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <HAL_TIM_PWM_MspInit+0x94>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10f      	bne.n	80030b4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003094:	4b14      	ldr	r3, [pc, #80]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x90>)
 8003096:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800309a:	4a13      	ldr	r2, [pc, #76]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x90>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80030a4:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x90>)
 80030a6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]
}
 80030b2:	e013      	b.n	80030dc <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	@ (80030f0 <HAL_TIM_PWM_MspInit+0x98>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10e      	bne.n	80030dc <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030be:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x90>)
 80030c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030c4:	4a08      	ldr	r2, [pc, #32]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x90>)
 80030c6:	f043 0304 	orr.w	r3, r3, #4
 80030ca:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80030ce:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <HAL_TIM_PWM_MspInit+0x90>)
 80030d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	58024400 	.word	0x58024400
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800

080030f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_TIM_Base_MspInit+0x74>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d117      	bne.n	8003136 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003106:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_TIM_Base_MspInit+0x78>)
 8003108:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800310c:	4a17      	ldr	r2, [pc, #92]	@ (800316c <HAL_TIM_Base_MspInit+0x78>)
 800310e:	f043 0310 	orr.w	r3, r3, #16
 8003112:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003116:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_TIM_Base_MspInit+0x78>)
 8003118:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003124:	2200      	movs	r2, #0
 8003126:	2100      	movs	r1, #0
 8003128:	2036      	movs	r0, #54	@ 0x36
 800312a:	f000 fd8e 	bl	8003c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800312e:	2036      	movs	r0, #54	@ 0x36
 8003130:	f000 fda5 	bl	8003c7e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003134:	e013      	b.n	800315e <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM13)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a0d      	ldr	r2, [pc, #52]	@ (8003170 <HAL_TIM_Base_MspInit+0x7c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d10e      	bne.n	800315e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003140:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <HAL_TIM_Base_MspInit+0x78>)
 8003142:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003146:	4a09      	ldr	r2, [pc, #36]	@ (800316c <HAL_TIM_Base_MspInit+0x78>)
 8003148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800314c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_TIM_Base_MspInit+0x78>)
 8003152:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40001000 	.word	0x40001000
 800316c:	58024400 	.word	0x58024400
 8003170:	40001c00 	.word	0x40001c00

08003174 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	@ 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	f107 031c 	add.w	r3, r7, #28
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003194:	d13f      	bne.n	8003216 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	4b47      	ldr	r3, [pc, #284]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 8003198:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800319c:	4a45      	ldr	r2, [pc, #276]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80031a6:	4b43      	ldr	r3, [pc, #268]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 80031a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b4:	4b3f      	ldr	r3, [pc, #252]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 80031b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031ba:	4a3e      	ldr	r2, [pc, #248]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80031c4:	4b3b      	ldr	r3, [pc, #236]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 80031c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80031d2:	f248 030c 	movw	r3, #32780	@ 0x800c
 80031d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	2300      	movs	r3, #0
 80031e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031e4:	2301      	movs	r3, #1
 80031e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	4619      	mov	r1, r3
 80031ee:	4832      	ldr	r0, [pc, #200]	@ (80032b8 <HAL_TIM_MspPostInit+0x144>)
 80031f0:	f004 f81a 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031f4:	2308      	movs	r3, #8
 80031f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	2300      	movs	r3, #0
 8003202:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003204:	2301      	movs	r3, #1
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	4619      	mov	r1, r3
 800320e:	482b      	ldr	r0, [pc, #172]	@ (80032bc <HAL_TIM_MspPostInit+0x148>)
 8003210:	f004 f80a 	bl	8007228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003214:	e049      	b.n	80032aa <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a29      	ldr	r2, [pc, #164]	@ (80032c0 <HAL_TIM_MspPostInit+0x14c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d11f      	bne.n	8003260 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003220:	4b24      	ldr	r3, [pc, #144]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 8003222:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003226:	4a23      	ldr	r2, [pc, #140]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003230:	4b20      	ldr	r3, [pc, #128]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 8003232:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800323e:	2330      	movs	r3, #48	@ 0x30
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800324e:	2302      	movs	r3, #2
 8003250:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	4619      	mov	r1, r3
 8003258:	4818      	ldr	r0, [pc, #96]	@ (80032bc <HAL_TIM_MspPostInit+0x148>)
 800325a:	f003 ffe5 	bl	8007228 <HAL_GPIO_Init>
}
 800325e:	e024      	b.n	80032aa <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a17      	ldr	r2, [pc, #92]	@ (80032c4 <HAL_TIM_MspPostInit+0x150>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d11f      	bne.n	80032aa <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326a:	4b12      	ldr	r3, [pc, #72]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 800326c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003270:	4a10      	ldr	r2, [pc, #64]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800327a:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <HAL_TIM_MspPostInit+0x140>)
 800327c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003288:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800328c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800329a:	2302      	movs	r3, #2
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329e:	f107 031c 	add.w	r3, r7, #28
 80032a2:	4619      	mov	r1, r3
 80032a4:	4805      	ldr	r0, [pc, #20]	@ (80032bc <HAL_TIM_MspPostInit+0x148>)
 80032a6:	f003 ffbf 	bl	8007228 <HAL_GPIO_Init>
}
 80032aa:	bf00      	nop
 80032ac:	3730      	adds	r7, #48	@ 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	58024400 	.word	0x58024400
 80032b8:	58020000 	.word	0x58020000
 80032bc:	58020400 	.word	0x58020400
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800

080032c8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80032cc:	4b22      	ldr	r3, [pc, #136]	@ (8003358 <MX_UART4_Init+0x90>)
 80032ce:	4a23      	ldr	r2, [pc, #140]	@ (800335c <MX_UART4_Init+0x94>)
 80032d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80032d2:	4b21      	ldr	r3, [pc, #132]	@ (8003358 <MX_UART4_Init+0x90>)
 80032d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80032da:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <MX_UART4_Init+0x90>)
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <MX_UART4_Init+0x90>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003358 <MX_UART4_Init+0x90>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80032ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <MX_UART4_Init+0x90>)
 80032ee:	220c      	movs	r2, #12
 80032f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032f2:	4b19      	ldr	r3, [pc, #100]	@ (8003358 <MX_UART4_Init+0x90>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80032f8:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <MX_UART4_Init+0x90>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032fe:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <MX_UART4_Init+0x90>)
 8003300:	2200      	movs	r2, #0
 8003302:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003304:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <MX_UART4_Init+0x90>)
 8003306:	2200      	movs	r2, #0
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800330a:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <MX_UART4_Init+0x90>)
 800330c:	2200      	movs	r2, #0
 800330e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003310:	4811      	ldr	r0, [pc, #68]	@ (8003358 <MX_UART4_Init+0x90>)
 8003312:	f009 facd 	bl	800c8b0 <HAL_UART_Init>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800331c:	f7ff fa6a 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003320:	2100      	movs	r1, #0
 8003322:	480d      	ldr	r0, [pc, #52]	@ (8003358 <MX_UART4_Init+0x90>)
 8003324:	f00b fad1 	bl	800e8ca <HAL_UARTEx_SetTxFifoThreshold>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800332e:	f7ff fa61 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003332:	2100      	movs	r1, #0
 8003334:	4808      	ldr	r0, [pc, #32]	@ (8003358 <MX_UART4_Init+0x90>)
 8003336:	f00b fb06 	bl	800e946 <HAL_UARTEx_SetRxFifoThreshold>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003340:	f7ff fa58 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003344:	4804      	ldr	r0, [pc, #16]	@ (8003358 <MX_UART4_Init+0x90>)
 8003346:	f00b fa87 	bl	800e858 <HAL_UARTEx_DisableFifoMode>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003350:	f7ff fa50 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}
 8003358:	2400269c 	.word	0x2400269c
 800335c:	40004c00 	.word	0x40004c00

08003360 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003364:	4b23      	ldr	r3, [pc, #140]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 8003366:	4a24      	ldr	r2, [pc, #144]	@ (80033f8 <MX_USART1_UART_Init+0x98>)
 8003368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800336a:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 800336c:	4a23      	ldr	r2, [pc, #140]	@ (80033fc <MX_USART1_UART_Init+0x9c>)
 800336e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003370:	4b20      	ldr	r3, [pc, #128]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 8003372:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003378:	4b1e      	ldr	r3, [pc, #120]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 800337a:	2200      	movs	r2, #0
 800337c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800337e:	4b1d      	ldr	r3, [pc, #116]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 8003380:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003384:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003386:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 8003388:	220c      	movs	r2, #12
 800338a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800338c:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003392:	4b18      	ldr	r3, [pc, #96]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 8003394:	2200      	movs	r2, #0
 8003396:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003398:	4b16      	ldr	r3, [pc, #88]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 800339a:	2200      	movs	r2, #0
 800339c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800339e:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033a4:	4b13      	ldr	r3, [pc, #76]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033aa:	4812      	ldr	r0, [pc, #72]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 80033ac:	f009 fa80 	bl	800c8b0 <HAL_UART_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80033b6:	f7ff fa1d 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033ba:	2100      	movs	r1, #0
 80033bc:	480d      	ldr	r0, [pc, #52]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 80033be:	f00b fa84 	bl	800e8ca <HAL_UARTEx_SetTxFifoThreshold>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80033c8:	f7ff fa14 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033cc:	2100      	movs	r1, #0
 80033ce:	4809      	ldr	r0, [pc, #36]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 80033d0:	f00b fab9 	bl	800e946 <HAL_UARTEx_SetRxFifoThreshold>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80033da:	f7ff fa0b 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80033de:	4805      	ldr	r0, [pc, #20]	@ (80033f4 <MX_USART1_UART_Init+0x94>)
 80033e0:	f00b fa3a 	bl	800e858 <HAL_UARTEx_DisableFifoMode>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80033ea:	f7ff fa03 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	24002730 	.word	0x24002730
 80033f8:	40011000 	.word	0x40011000
 80033fc:	000186a0 	.word	0x000186a0

08003400 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003404:	4b22      	ldr	r3, [pc, #136]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 8003406:	4a23      	ldr	r2, [pc, #140]	@ (8003494 <MX_USART3_UART_Init+0x94>)
 8003408:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800340a:	4b21      	ldr	r3, [pc, #132]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 800340c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003410:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003412:	4b1f      	ldr	r3, [pc, #124]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003418:	4b1d      	ldr	r3, [pc, #116]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800341e:	4b1c      	ldr	r3, [pc, #112]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 8003420:	2200      	movs	r2, #0
 8003422:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003424:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 8003426:	220c      	movs	r2, #12
 8003428:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342a:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003430:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003436:	4b16      	ldr	r3, [pc, #88]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 800343e:	2200      	movs	r2, #0
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003442:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 8003444:	2200      	movs	r2, #0
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003448:	4811      	ldr	r0, [pc, #68]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 800344a:	f009 fa31 	bl	800c8b0 <HAL_UART_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003454:	f7ff f9ce 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003458:	2100      	movs	r1, #0
 800345a:	480d      	ldr	r0, [pc, #52]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 800345c:	f00b fa35 	bl	800e8ca <HAL_UARTEx_SetTxFifoThreshold>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003466:	f7ff f9c5 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800346a:	2100      	movs	r1, #0
 800346c:	4808      	ldr	r0, [pc, #32]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 800346e:	f00b fa6a 	bl	800e946 <HAL_UARTEx_SetRxFifoThreshold>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003478:	f7ff f9bc 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800347c:	4804      	ldr	r0, [pc, #16]	@ (8003490 <MX_USART3_UART_Init+0x90>)
 800347e:	f00b f9eb 	bl	800e858 <HAL_UARTEx_DisableFifoMode>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003488:	f7ff f9b4 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	240027c4 	.word	0x240027c4
 8003494:	40004800 	.word	0x40004800

08003498 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800349c:	4b22      	ldr	r3, [pc, #136]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 800349e:	4a23      	ldr	r2, [pc, #140]	@ (800352c <MX_USART6_UART_Init+0x94>)
 80034a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80034a2:	4b21      	ldr	r3, [pc, #132]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80034b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034be:	220c      	movs	r2, #12
 80034c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034c2:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034c8:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ce:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034d4:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034da:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034dc:	2200      	movs	r2, #0
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034e0:	4811      	ldr	r0, [pc, #68]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034e2:	f009 f9e5 	bl	800c8b0 <HAL_UART_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80034ec:	f7ff f982 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034f0:	2100      	movs	r1, #0
 80034f2:	480d      	ldr	r0, [pc, #52]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 80034f4:	f00b f9e9 	bl	800e8ca <HAL_UARTEx_SetTxFifoThreshold>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80034fe:	f7ff f979 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003502:	2100      	movs	r1, #0
 8003504:	4808      	ldr	r0, [pc, #32]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 8003506:	f00b fa1e 	bl	800e946 <HAL_UARTEx_SetRxFifoThreshold>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003510:	f7ff f970 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003514:	4804      	ldr	r0, [pc, #16]	@ (8003528 <MX_USART6_UART_Init+0x90>)
 8003516:	f00b f99f 	bl	800e858 <HAL_UARTEx_DisableFifoMode>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003520:	f7ff f968 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}
 8003528:	24002858 	.word	0x24002858
 800352c:	40011400 	.word	0x40011400

08003530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b0c0      	sub	sp, #256	@ 0x100
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003538:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003548:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800354c:	22c0      	movs	r2, #192	@ 0xc0
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f00f fc27 	bl	8012da4 <memset>
  if(uartHandle->Instance==UART4)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4aa9      	ldr	r2, [pc, #676]	@ (8003800 <HAL_UART_MspInit+0x2d0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d146      	bne.n	80035ee <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003560:	f04f 0202 	mov.w	r2, #2
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003572:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003576:	4618      	mov	r0, r3
 8003578:	f005 f94c 	bl	8008814 <HAL_RCCEx_PeriphCLKConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003582:	f7ff f937 	bl	80027f4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003586:	4b9f      	ldr	r3, [pc, #636]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 8003588:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800358c:	4a9d      	ldr	r2, [pc, #628]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 800358e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003592:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003596:	4b9b      	ldr	r3, [pc, #620]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 8003598:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800359c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a4:	4b97      	ldr	r3, [pc, #604]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 80035a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80035aa:	4a96      	ldr	r2, [pc, #600]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80035b4:	4b93      	ldr	r3, [pc, #588]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 80035b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035c2:	2303      	movs	r3, #3
 80035c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	2302      	movs	r3, #2
 80035ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035da:	2308      	movs	r3, #8
 80035dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80035e4:	4619      	mov	r1, r3
 80035e6:	4888      	ldr	r0, [pc, #544]	@ (8003808 <HAL_UART_MspInit+0x2d8>)
 80035e8:	f003 fe1e 	bl	8007228 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80035ec:	e167      	b.n	80038be <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a86      	ldr	r2, [pc, #536]	@ (800380c <HAL_UART_MspInit+0x2dc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d17f      	bne.n	80036f8 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035f8:	f04f 0201 	mov.w	r2, #1
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800360a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800360e:	4618      	mov	r0, r3
 8003610:	f005 f900 	bl	8008814 <HAL_RCCEx_PeriphCLKConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_UART_MspInit+0xee>
      Error_Handler();
 800361a:	f7ff f8eb 	bl	80027f4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800361e:	4b79      	ldr	r3, [pc, #484]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 8003620:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003624:	4a77      	ldr	r2, [pc, #476]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 8003626:	f043 0310 	orr.w	r3, r3, #16
 800362a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800362e:	4b75      	ldr	r3, [pc, #468]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 8003630:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363c:	4b71      	ldr	r3, [pc, #452]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 800363e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003642:	4a70      	ldr	r2, [pc, #448]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800364c:	4b6d      	ldr	r3, [pc, #436]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 800364e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 800365a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800365e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003674:	2307      	movs	r3, #7
 8003676:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800367e:	4619      	mov	r1, r3
 8003680:	4861      	ldr	r0, [pc, #388]	@ (8003808 <HAL_UART_MspInit+0x2d8>)
 8003682:	f003 fdd1 	bl	8007228 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003686:	4b62      	ldr	r3, [pc, #392]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 8003688:	4a62      	ldr	r2, [pc, #392]	@ (8003814 <HAL_UART_MspInit+0x2e4>)
 800368a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800368c:	4b60      	ldr	r3, [pc, #384]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 800368e:	2229      	movs	r2, #41	@ 0x29
 8003690:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003692:	4b5f      	ldr	r3, [pc, #380]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003698:	4b5d      	ldr	r3, [pc, #372]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 800369a:	2200      	movs	r2, #0
 800369c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800369e:	4b5c      	ldr	r3, [pc, #368]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 80036a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036ac:	4b58      	ldr	r3, [pc, #352]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80036b2:	4b57      	ldr	r3, [pc, #348]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 80036b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036ba:	4b55      	ldr	r3, [pc, #340]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 80036bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80036c0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c2:	4b53      	ldr	r3, [pc, #332]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80036c8:	4851      	ldr	r0, [pc, #324]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 80036ca:	f000 fb6b 	bl	8003da4 <HAL_DMA_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80036d4:	f7ff f88e 	bl	80027f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a4d      	ldr	r2, [pc, #308]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80036e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003810 <HAL_UART_MspInit+0x2e0>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036e6:	2200      	movs	r2, #0
 80036e8:	2100      	movs	r1, #0
 80036ea:	2025      	movs	r0, #37	@ 0x25
 80036ec:	f000 faad 	bl	8003c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036f0:	2025      	movs	r0, #37	@ 0x25
 80036f2:	f000 fac4 	bl	8003c7e <HAL_NVIC_EnableIRQ>
}
 80036f6:	e0e2      	b.n	80038be <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a46      	ldr	r2, [pc, #280]	@ (8003818 <HAL_UART_MspInit+0x2e8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f040 8092 	bne.w	8003828 <HAL_UART_MspInit+0x2f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003704:	f04f 0202 	mov.w	r2, #2
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003710:	2300      	movs	r3, #0
 8003712:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003716:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800371a:	4618      	mov	r0, r3
 800371c:	f005 f87a 	bl	8008814 <HAL_RCCEx_PeriphCLKConfig>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8003726:	f7ff f865 	bl	80027f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800372a:	4b36      	ldr	r3, [pc, #216]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 800372c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003730:	4a34      	ldr	r2, [pc, #208]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 8003732:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003736:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800373a:	4b32      	ldr	r3, [pc, #200]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 800373c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003740:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003748:	4b2e      	ldr	r3, [pc, #184]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 800374a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800374e:	4a2d      	ldr	r2, [pc, #180]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003758:	4b2a      	ldr	r3, [pc, #168]	@ (8003804 <HAL_UART_MspInit+0x2d4>)
 800375a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003766:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800376a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003780:	2307      	movs	r3, #7
 8003782:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003786:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800378a:	4619      	mov	r1, r3
 800378c:	4823      	ldr	r0, [pc, #140]	@ (800381c <HAL_UART_MspInit+0x2ec>)
 800378e:	f003 fd4b 	bl	8007228 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003792:	4b23      	ldr	r3, [pc, #140]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 8003794:	4a23      	ldr	r2, [pc, #140]	@ (8003824 <HAL_UART_MspInit+0x2f4>)
 8003796:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003798:	4b21      	ldr	r3, [pc, #132]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 800379a:	222d      	movs	r2, #45	@ 0x2d
 800379c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800379e:	4b20      	ldr	r3, [pc, #128]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037b8:	4b19      	ldr	r3, [pc, #100]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80037be:	4b18      	ldr	r3, [pc, #96]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037c4:	4b16      	ldr	r3, [pc, #88]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ca:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80037d0:	4813      	ldr	r0, [pc, #76]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037d2:	f000 fae7 	bl	8003da4 <HAL_DMA_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 80037dc:	f7ff f80a 	bl	80027f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80037e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003820 <HAL_UART_MspInit+0x2f0>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	2027      	movs	r0, #39	@ 0x27
 80037f4:	f000 fa29 	bl	8003c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80037f8:	2027      	movs	r0, #39	@ 0x27
 80037fa:	f000 fa40 	bl	8003c7e <HAL_NVIC_EnableIRQ>
}
 80037fe:	e05e      	b.n	80038be <HAL_UART_MspInit+0x38e>
 8003800:	40004c00 	.word	0x40004c00
 8003804:	58024400 	.word	0x58024400
 8003808:	58020000 	.word	0x58020000
 800380c:	40011000 	.word	0x40011000
 8003810:	240028ec 	.word	0x240028ec
 8003814:	40020010 	.word	0x40020010
 8003818:	40004800 	.word	0x40004800
 800381c:	58020800 	.word	0x58020800
 8003820:	24002964 	.word	0x24002964
 8003824:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a26      	ldr	r2, [pc, #152]	@ (80038c8 <HAL_UART_MspInit+0x398>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d145      	bne.n	80038be <HAL_UART_MspInit+0x38e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003832:	f04f 0201 	mov.w	r2, #1
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003844:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003848:	4618      	mov	r0, r3
 800384a:	f004 ffe3 	bl	8008814 <HAL_RCCEx_PeriphCLKConfig>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_UART_MspInit+0x328>
      Error_Handler();
 8003854:	f7fe ffce 	bl	80027f4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003858:	4b1c      	ldr	r3, [pc, #112]	@ (80038cc <HAL_UART_MspInit+0x39c>)
 800385a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800385e:	4a1b      	ldr	r2, [pc, #108]	@ (80038cc <HAL_UART_MspInit+0x39c>)
 8003860:	f043 0320 	orr.w	r3, r3, #32
 8003864:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003868:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <HAL_UART_MspInit+0x39c>)
 800386a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <HAL_UART_MspInit+0x39c>)
 8003878:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800387c:	4a13      	ldr	r2, [pc, #76]	@ (80038cc <HAL_UART_MspInit+0x39c>)
 800387e:	f043 0304 	orr.w	r3, r3, #4
 8003882:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003886:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <HAL_UART_MspInit+0x39c>)
 8003888:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003894:	23c0      	movs	r3, #192	@ 0xc0
 8003896:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389a:	2302      	movs	r3, #2
 800389c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80038ac:	2307      	movs	r3, #7
 80038ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80038b6:	4619      	mov	r1, r3
 80038b8:	4805      	ldr	r0, [pc, #20]	@ (80038d0 <HAL_UART_MspInit+0x3a0>)
 80038ba:	f003 fcb5 	bl	8007228 <HAL_GPIO_Init>
}
 80038be:	bf00      	nop
 80038c0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40011400 	.word	0x40011400
 80038cc:	58024400 	.word	0x58024400
 80038d0:	58020800 	.word	0x58020800

080038d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800390c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80038d8:	f7ff f98a 	bl	8002bf0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038dc:	480c      	ldr	r0, [pc, #48]	@ (8003910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038de:	490d      	ldr	r1, [pc, #52]	@ (8003914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e4:	e002      	b.n	80038ec <LoopCopyDataInit>

080038e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ea:	3304      	adds	r3, #4

080038ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80038ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038f0:	d3f9      	bcc.n	80038e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038f2:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f8:	e001      	b.n	80038fe <LoopFillZerobss>

080038fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038fc:	3204      	adds	r2, #4

080038fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003900:	d3fb      	bcc.n	80038fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003902:	f00f fa5d 	bl	8012dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003906:	f7fe fe47 	bl	8002598 <main>
  bx  lr
 800390a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800390c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003910:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003914:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 8003918:	08013e98 	.word	0x08013e98
  ldr r2, =_sbss
 800391c:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8003920:	24002d5c 	.word	0x24002d5c

08003924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003924:	e7fe      	b.n	8003924 <ADC_IRQHandler>
	...

08003928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392e:	2003      	movs	r0, #3
 8003930:	f000 f980 	bl	8003c34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003934:	f004 fd98 	bl	8008468 <HAL_RCC_GetSysClockFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b15      	ldr	r3, [pc, #84]	@ (8003990 <HAL_Init+0x68>)
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	4913      	ldr	r1, [pc, #76]	@ (8003994 <HAL_Init+0x6c>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
 8003950:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003952:	4b0f      	ldr	r3, [pc, #60]	@ (8003990 <HAL_Init+0x68>)
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	4a0e      	ldr	r2, [pc, #56]	@ (8003994 <HAL_Init+0x6c>)
 800395c:	5cd3      	ldrb	r3, [r2, r3]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
 8003968:	4a0b      	ldr	r2, [pc, #44]	@ (8003998 <HAL_Init+0x70>)
 800396a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800396c:	4a0b      	ldr	r2, [pc, #44]	@ (800399c <HAL_Init+0x74>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003972:	200f      	movs	r0, #15
 8003974:	f000 f814 	bl	80039a0 <HAL_InitTick>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e002      	b.n	8003988 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003982:	f7ff f8a1 	bl	8002ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	58024400 	.word	0x58024400
 8003994:	08013178 	.word	0x08013178
 8003998:	2400009c 	.word	0x2400009c
 800399c:	24000098 	.word	0x24000098

080039a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039a8:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_InitTick+0x60>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e021      	b.n	80039f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80039b4:	4b13      	ldr	r3, [pc, #76]	@ (8003a04 <HAL_InitTick+0x64>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <HAL_InitTick+0x60>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	4619      	mov	r1, r3
 80039be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f965 	bl	8003c9a <HAL_SYSTICK_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00e      	b.n	80039f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b0f      	cmp	r3, #15
 80039de:	d80a      	bhi.n	80039f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e0:	2200      	movs	r2, #0
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	f000 f92f 	bl	8003c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039ec:	4a06      	ldr	r2, [pc, #24]	@ (8003a08 <HAL_InitTick+0x68>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	240000a4 	.word	0x240000a4
 8003a04:	24000098 	.word	0x24000098
 8003a08:	240000a0 	.word	0x240000a0

08003a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a10:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_IncTick+0x20>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_IncTick+0x24>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a04      	ldr	r2, [pc, #16]	@ (8003a30 <HAL_IncTick+0x24>)
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	240000a4 	.word	0x240000a4
 8003a30:	240029dc 	.word	0x240029dc

08003a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return uwTick;
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <HAL_GetTick+0x14>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	240029dc 	.word	0x240029dc

08003a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a54:	f7ff ffee 	bl	8003a34 <HAL_GetTick>
 8003a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d005      	beq.n	8003a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a66:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <HAL_Delay+0x44>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a72:	bf00      	nop
 8003a74:	f7ff ffde 	bl	8003a34 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d8f7      	bhi.n	8003a74 <HAL_Delay+0x28>
  {
  }
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	240000a4 	.word	0x240000a4

08003a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003abc:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac2:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	60d3      	str	r3, [r2, #12]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000ed00 	.word	0xe000ed00
 8003ad8:	05fa0000 	.word	0x05fa0000

08003adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae0:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 0307 	and.w	r3, r3, #7
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	db0b      	blt.n	8003b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4907      	ldr	r1, [pc, #28]	@ (8003b30 <__NVIC_EnableIRQ+0x38>)
 8003b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2001      	movs	r0, #1
 8003b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	db0a      	blt.n	8003b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	490c      	ldr	r1, [pc, #48]	@ (8003b80 <__NVIC_SetPriority+0x4c>)
 8003b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	440b      	add	r3, r1
 8003b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b5c:	e00a      	b.n	8003b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4908      	ldr	r1, [pc, #32]	@ (8003b84 <__NVIC_SetPriority+0x50>)
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3b04      	subs	r3, #4
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	440b      	add	r3, r1
 8003b72:	761a      	strb	r2, [r3, #24]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000e100 	.word	0xe000e100
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	@ 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	bf28      	it	cs
 8003ba6:	2304      	movcs	r3, #4
 8003ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d902      	bls.n	8003bb8 <NVIC_EncodePriority+0x30>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3b03      	subs	r3, #3
 8003bb6:	e000      	b.n	8003bba <NVIC_EncodePriority+0x32>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	401a      	ands	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	43d9      	mvns	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	4313      	orrs	r3, r2
         );
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	@ 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c00:	d301      	bcc.n	8003c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c02:	2301      	movs	r3, #1
 8003c04:	e00f      	b.n	8003c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c06:	4a0a      	ldr	r2, [pc, #40]	@ (8003c30 <SysTick_Config+0x40>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c0e:	210f      	movs	r1, #15
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	f7ff ff8e 	bl	8003b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <SysTick_Config+0x40>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c1e:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <SysTick_Config+0x40>)
 8003c20:	2207      	movs	r2, #7
 8003c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	e000e010 	.word	0xe000e010

08003c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff29 	bl	8003a94 <__NVIC_SetPriorityGrouping>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	4603      	mov	r3, r0
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c58:	f7ff ff40 	bl	8003adc <__NVIC_GetPriorityGrouping>
 8003c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7ff ff90 	bl	8003b88 <NVIC_EncodePriority>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff5f 	bl	8003b34 <__NVIC_SetPriority>
}
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff33 	bl	8003af8 <__NVIC_EnableIRQ>
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ffa4 	bl	8003bf0 <SysTick_Config>
 8003ca8:	4603      	mov	r3, r0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003cb8:	f3bf 8f5f 	dmb	sy
}
 8003cbc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003cbe:	4b07      	ldr	r3, [pc, #28]	@ (8003cdc <HAL_MPU_Disable+0x28>)
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	4a06      	ldr	r2, [pc, #24]	@ (8003cdc <HAL_MPU_Disable+0x28>)
 8003cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003cca:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_MPU_Disable+0x2c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	605a      	str	r2, [r3, #4]
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000ed00 	.word	0xe000ed00
 8003ce0:	e000ed90 	.word	0xe000ed90

08003ce4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003cec:	4a0b      	ldr	r2, [pc, #44]	@ (8003d1c <HAL_MPU_Enable+0x38>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <HAL_MPU_Enable+0x3c>)
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	4a09      	ldr	r2, [pc, #36]	@ (8003d20 <HAL_MPU_Enable+0x3c>)
 8003cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d00:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003d02:	f3bf 8f4f 	dsb	sy
}
 8003d06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d08:	f3bf 8f6f 	isb	sy
}
 8003d0c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000ed90 	.word	0xe000ed90
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	785a      	ldrb	r2, [r3, #1]
 8003d30:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <HAL_MPU_ConfigRegion+0x7c>)
 8003d32:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003d34:	4b1a      	ldr	r3, [pc, #104]	@ (8003da0 <HAL_MPU_ConfigRegion+0x7c>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4a19      	ldr	r2, [pc, #100]	@ (8003da0 <HAL_MPU_ConfigRegion+0x7c>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003d40:	4a17      	ldr	r2, [pc, #92]	@ (8003da0 <HAL_MPU_ConfigRegion+0x7c>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7b1b      	ldrb	r3, [r3, #12]
 8003d4c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7adb      	ldrb	r3, [r3, #11]
 8003d52:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	7a9b      	ldrb	r3, [r3, #10]
 8003d5a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7b5b      	ldrb	r3, [r3, #13]
 8003d62:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7b9b      	ldrb	r3, [r3, #14]
 8003d6a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7bdb      	ldrb	r3, [r3, #15]
 8003d72:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7a5b      	ldrb	r3, [r3, #9]
 8003d7a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7a1b      	ldrb	r3, [r3, #8]
 8003d82:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d84:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d8c:	4a04      	ldr	r2, [pc, #16]	@ (8003da0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d8e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d90:	6113      	str	r3, [r2, #16]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	e000ed90 	.word	0xe000ed90

08003da4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003dac:	f7ff fe42 	bl	8003a34 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e37d      	b.n	80044b8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a66      	ldr	r2, [pc, #408]	@ (8003f5c <HAL_DMA_Init+0x1b8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d04a      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a65      	ldr	r2, [pc, #404]	@ (8003f60 <HAL_DMA_Init+0x1bc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d045      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a63      	ldr	r2, [pc, #396]	@ (8003f64 <HAL_DMA_Init+0x1c0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d040      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a62      	ldr	r2, [pc, #392]	@ (8003f68 <HAL_DMA_Init+0x1c4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d03b      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a60      	ldr	r2, [pc, #384]	@ (8003f6c <HAL_DMA_Init+0x1c8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d036      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5f      	ldr	r2, [pc, #380]	@ (8003f70 <HAL_DMA_Init+0x1cc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d031      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f74 <HAL_DMA_Init+0x1d0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d02c      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a5c      	ldr	r2, [pc, #368]	@ (8003f78 <HAL_DMA_Init+0x1d4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d027      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a5a      	ldr	r2, [pc, #360]	@ (8003f7c <HAL_DMA_Init+0x1d8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d022      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a59      	ldr	r2, [pc, #356]	@ (8003f80 <HAL_DMA_Init+0x1dc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d01d      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a57      	ldr	r2, [pc, #348]	@ (8003f84 <HAL_DMA_Init+0x1e0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d018      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a56      	ldr	r2, [pc, #344]	@ (8003f88 <HAL_DMA_Init+0x1e4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a54      	ldr	r2, [pc, #336]	@ (8003f8c <HAL_DMA_Init+0x1e8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a53      	ldr	r2, [pc, #332]	@ (8003f90 <HAL_DMA_Init+0x1ec>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d009      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a51      	ldr	r2, [pc, #324]	@ (8003f94 <HAL_DMA_Init+0x1f0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_DMA_Init+0xb8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a50      	ldr	r2, [pc, #320]	@ (8003f98 <HAL_DMA_Init+0x1f4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d101      	bne.n	8003e60 <HAL_DMA_Init+0xbc>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_DMA_Init+0xbe>
 8003e60:	2300      	movs	r3, #0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 813c 	beq.w	80040e0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a37      	ldr	r2, [pc, #220]	@ (8003f5c <HAL_DMA_Init+0x1b8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d04a      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a36      	ldr	r2, [pc, #216]	@ (8003f60 <HAL_DMA_Init+0x1bc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d045      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a34      	ldr	r2, [pc, #208]	@ (8003f64 <HAL_DMA_Init+0x1c0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d040      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a33      	ldr	r2, [pc, #204]	@ (8003f68 <HAL_DMA_Init+0x1c4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d03b      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a31      	ldr	r2, [pc, #196]	@ (8003f6c <HAL_DMA_Init+0x1c8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d036      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a30      	ldr	r2, [pc, #192]	@ (8003f70 <HAL_DMA_Init+0x1cc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d031      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2e      	ldr	r2, [pc, #184]	@ (8003f74 <HAL_DMA_Init+0x1d0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02c      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8003f78 <HAL_DMA_Init+0x1d4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d027      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8003f7c <HAL_DMA_Init+0x1d8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d022      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8003f80 <HAL_DMA_Init+0x1dc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d01d      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a28      	ldr	r2, [pc, #160]	@ (8003f84 <HAL_DMA_Init+0x1e0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d018      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a27      	ldr	r2, [pc, #156]	@ (8003f88 <HAL_DMA_Init+0x1e4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a25      	ldr	r2, [pc, #148]	@ (8003f8c <HAL_DMA_Init+0x1e8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00e      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a24      	ldr	r2, [pc, #144]	@ (8003f90 <HAL_DMA_Init+0x1ec>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a22      	ldr	r2, [pc, #136]	@ (8003f94 <HAL_DMA_Init+0x1f0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_DMA_Init+0x174>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a21      	ldr	r2, [pc, #132]	@ (8003f98 <HAL_DMA_Init+0x1f4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d108      	bne.n	8003f2a <HAL_DMA_Init+0x186>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e007      	b.n	8003f3a <HAL_DMA_Init+0x196>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f3a:	e02f      	b.n	8003f9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f3c:	f7ff fd7a 	bl	8003a34 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d928      	bls.n	8003f9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2203      	movs	r2, #3
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e2ad      	b.n	80044b8 <HAL_DMA_Init+0x714>
 8003f5c:	40020010 	.word	0x40020010
 8003f60:	40020028 	.word	0x40020028
 8003f64:	40020040 	.word	0x40020040
 8003f68:	40020058 	.word	0x40020058
 8003f6c:	40020070 	.word	0x40020070
 8003f70:	40020088 	.word	0x40020088
 8003f74:	400200a0 	.word	0x400200a0
 8003f78:	400200b8 	.word	0x400200b8
 8003f7c:	40020410 	.word	0x40020410
 8003f80:	40020428 	.word	0x40020428
 8003f84:	40020440 	.word	0x40020440
 8003f88:	40020458 	.word	0x40020458
 8003f8c:	40020470 	.word	0x40020470
 8003f90:	40020488 	.word	0x40020488
 8003f94:	400204a0 	.word	0x400204a0
 8003f98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1c8      	bne.n	8003f3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4b73      	ldr	r3, [pc, #460]	@ (8004184 <HAL_DMA_Init+0x3e0>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003fc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d107      	bne.n	8004000 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b28      	cmp	r3, #40	@ 0x28
 8004006:	d903      	bls.n	8004010 <HAL_DMA_Init+0x26c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b2e      	cmp	r3, #46	@ 0x2e
 800400e:	d91f      	bls.n	8004050 <HAL_DMA_Init+0x2ac>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b3e      	cmp	r3, #62	@ 0x3e
 8004016:	d903      	bls.n	8004020 <HAL_DMA_Init+0x27c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b42      	cmp	r3, #66	@ 0x42
 800401e:	d917      	bls.n	8004050 <HAL_DMA_Init+0x2ac>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b46      	cmp	r3, #70	@ 0x46
 8004026:	d903      	bls.n	8004030 <HAL_DMA_Init+0x28c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b48      	cmp	r3, #72	@ 0x48
 800402e:	d90f      	bls.n	8004050 <HAL_DMA_Init+0x2ac>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b4e      	cmp	r3, #78	@ 0x4e
 8004036:	d903      	bls.n	8004040 <HAL_DMA_Init+0x29c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b52      	cmp	r3, #82	@ 0x52
 800403e:	d907      	bls.n	8004050 <HAL_DMA_Init+0x2ac>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b73      	cmp	r3, #115	@ 0x73
 8004046:	d905      	bls.n	8004054 <HAL_DMA_Init+0x2b0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b77      	cmp	r3, #119	@ 0x77
 800404e:	d801      	bhi.n	8004054 <HAL_DMA_Init+0x2b0>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_DMA_Init+0x2b2>
 8004054:	2300      	movs	r3, #0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004060:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0307 	bic.w	r3, r3, #7
 8004078:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	2b04      	cmp	r3, #4
 800408a:	d117      	bne.n	80040bc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f002 fbd4 	bl	800684c <DMA_CheckFifoParam>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2240      	movs	r2, #64	@ 0x40
 80040ae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e1fd      	b.n	80044b8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f002 fb0f 	bl	80066e8 <DMA_CalcBaseAndBitshift>
 80040ca:	4603      	mov	r3, r0
 80040cc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	223f      	movs	r2, #63	@ 0x3f
 80040d8:	409a      	lsls	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	e0fd      	b.n	80042dc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a28      	ldr	r2, [pc, #160]	@ (8004188 <HAL_DMA_Init+0x3e4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d04a      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a27      	ldr	r2, [pc, #156]	@ (800418c <HAL_DMA_Init+0x3e8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d045      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a25      	ldr	r2, [pc, #148]	@ (8004190 <HAL_DMA_Init+0x3ec>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d040      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a24      	ldr	r2, [pc, #144]	@ (8004194 <HAL_DMA_Init+0x3f0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d03b      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a22      	ldr	r2, [pc, #136]	@ (8004198 <HAL_DMA_Init+0x3f4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d036      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a21      	ldr	r2, [pc, #132]	@ (800419c <HAL_DMA_Init+0x3f8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d031      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1f      	ldr	r2, [pc, #124]	@ (80041a0 <HAL_DMA_Init+0x3fc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d02c      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1e      	ldr	r2, [pc, #120]	@ (80041a4 <HAL_DMA_Init+0x400>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d027      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1c      	ldr	r2, [pc, #112]	@ (80041a8 <HAL_DMA_Init+0x404>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <HAL_DMA_Init+0x408>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d01d      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a19      	ldr	r2, [pc, #100]	@ (80041b0 <HAL_DMA_Init+0x40c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a18      	ldr	r2, [pc, #96]	@ (80041b4 <HAL_DMA_Init+0x410>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <HAL_DMA_Init+0x414>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <HAL_DMA_Init+0x418>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a13      	ldr	r2, [pc, #76]	@ (80041c0 <HAL_DMA_Init+0x41c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_DMA_Init+0x3dc>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a12      	ldr	r2, [pc, #72]	@ (80041c4 <HAL_DMA_Init+0x420>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d123      	bne.n	80041c8 <HAL_DMA_Init+0x424>
 8004180:	2301      	movs	r3, #1
 8004182:	e022      	b.n	80041ca <HAL_DMA_Init+0x426>
 8004184:	fe10803f 	.word	0xfe10803f
 8004188:	48022c08 	.word	0x48022c08
 800418c:	48022c1c 	.word	0x48022c1c
 8004190:	48022c30 	.word	0x48022c30
 8004194:	48022c44 	.word	0x48022c44
 8004198:	48022c58 	.word	0x48022c58
 800419c:	48022c6c 	.word	0x48022c6c
 80041a0:	48022c80 	.word	0x48022c80
 80041a4:	48022c94 	.word	0x48022c94
 80041a8:	58025408 	.word	0x58025408
 80041ac:	5802541c 	.word	0x5802541c
 80041b0:	58025430 	.word	0x58025430
 80041b4:	58025444 	.word	0x58025444
 80041b8:	58025458 	.word	0x58025458
 80041bc:	5802546c 	.word	0x5802546c
 80041c0:	58025480 	.word	0x58025480
 80041c4:	58025494 	.word	0x58025494
 80041c8:	2300      	movs	r3, #0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d07d      	beq.n	80042ca <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a7f      	ldr	r2, [pc, #508]	@ (80043d0 <HAL_DMA_Init+0x62c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d021      	beq.n	800421c <HAL_DMA_Init+0x478>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a7d      	ldr	r2, [pc, #500]	@ (80043d4 <HAL_DMA_Init+0x630>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01c      	beq.n	800421c <HAL_DMA_Init+0x478>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a7c      	ldr	r2, [pc, #496]	@ (80043d8 <HAL_DMA_Init+0x634>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d017      	beq.n	800421c <HAL_DMA_Init+0x478>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a7a      	ldr	r2, [pc, #488]	@ (80043dc <HAL_DMA_Init+0x638>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d012      	beq.n	800421c <HAL_DMA_Init+0x478>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a79      	ldr	r2, [pc, #484]	@ (80043e0 <HAL_DMA_Init+0x63c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00d      	beq.n	800421c <HAL_DMA_Init+0x478>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a77      	ldr	r2, [pc, #476]	@ (80043e4 <HAL_DMA_Init+0x640>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d008      	beq.n	800421c <HAL_DMA_Init+0x478>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a76      	ldr	r2, [pc, #472]	@ (80043e8 <HAL_DMA_Init+0x644>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <HAL_DMA_Init+0x478>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a74      	ldr	r2, [pc, #464]	@ (80043ec <HAL_DMA_Init+0x648>)
 800421a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4b6e      	ldr	r3, [pc, #440]	@ (80043f0 <HAL_DMA_Init+0x64c>)
 8004238:	4013      	ands	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b40      	cmp	r3, #64	@ 0x40
 8004242:	d008      	beq.n	8004256 <HAL_DMA_Init+0x4b2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b80      	cmp	r3, #128	@ 0x80
 800424a:	d102      	bne.n	8004252 <HAL_DMA_Init+0x4ae>
 800424c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004250:	e002      	b.n	8004258 <HAL_DMA_Init+0x4b4>
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <HAL_DMA_Init+0x4b4>
 8004256:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68d2      	ldr	r2, [r2, #12]
 800425c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800425e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004266:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800426e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004276:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800427e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004286:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	4b55      	ldr	r3, [pc, #340]	@ (80043f4 <HAL_DMA_Init+0x650>)
 800429e:	4413      	add	r3, r2
 80042a0:	4a55      	ldr	r2, [pc, #340]	@ (80043f8 <HAL_DMA_Init+0x654>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	009a      	lsls	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f002 fa1a 	bl	80066e8 <DMA_CalcBaseAndBitshift>
 80042b4:	4603      	mov	r3, r0
 80042b6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2201      	movs	r2, #1
 80042c2:	409a      	lsls	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	e008      	b.n	80042dc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2240      	movs	r2, #64	@ 0x40
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2203      	movs	r2, #3
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0ed      	b.n	80044b8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a46      	ldr	r2, [pc, #280]	@ (80043fc <HAL_DMA_Init+0x658>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d072      	beq.n	80043cc <HAL_DMA_Init+0x628>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a45      	ldr	r2, [pc, #276]	@ (8004400 <HAL_DMA_Init+0x65c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d06d      	beq.n	80043cc <HAL_DMA_Init+0x628>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a43      	ldr	r2, [pc, #268]	@ (8004404 <HAL_DMA_Init+0x660>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d068      	beq.n	80043cc <HAL_DMA_Init+0x628>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a42      	ldr	r2, [pc, #264]	@ (8004408 <HAL_DMA_Init+0x664>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d063      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a40      	ldr	r2, [pc, #256]	@ (800440c <HAL_DMA_Init+0x668>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d05e      	beq.n	80043cc <HAL_DMA_Init+0x628>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a3f      	ldr	r2, [pc, #252]	@ (8004410 <HAL_DMA_Init+0x66c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d059      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a3d      	ldr	r2, [pc, #244]	@ (8004414 <HAL_DMA_Init+0x670>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d054      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a3c      	ldr	r2, [pc, #240]	@ (8004418 <HAL_DMA_Init+0x674>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d04f      	beq.n	80043cc <HAL_DMA_Init+0x628>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3a      	ldr	r2, [pc, #232]	@ (800441c <HAL_DMA_Init+0x678>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d04a      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a39      	ldr	r2, [pc, #228]	@ (8004420 <HAL_DMA_Init+0x67c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d045      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a37      	ldr	r2, [pc, #220]	@ (8004424 <HAL_DMA_Init+0x680>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d040      	beq.n	80043cc <HAL_DMA_Init+0x628>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a36      	ldr	r2, [pc, #216]	@ (8004428 <HAL_DMA_Init+0x684>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d03b      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a34      	ldr	r2, [pc, #208]	@ (800442c <HAL_DMA_Init+0x688>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d036      	beq.n	80043cc <HAL_DMA_Init+0x628>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a33      	ldr	r2, [pc, #204]	@ (8004430 <HAL_DMA_Init+0x68c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d031      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a31      	ldr	r2, [pc, #196]	@ (8004434 <HAL_DMA_Init+0x690>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d02c      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a30      	ldr	r2, [pc, #192]	@ (8004438 <HAL_DMA_Init+0x694>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d027      	beq.n	80043cc <HAL_DMA_Init+0x628>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a13      	ldr	r2, [pc, #76]	@ (80043d0 <HAL_DMA_Init+0x62c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d022      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a12      	ldr	r2, [pc, #72]	@ (80043d4 <HAL_DMA_Init+0x630>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d01d      	beq.n	80043cc <HAL_DMA_Init+0x628>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a10      	ldr	r2, [pc, #64]	@ (80043d8 <HAL_DMA_Init+0x634>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d018      	beq.n	80043cc <HAL_DMA_Init+0x628>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a0f      	ldr	r2, [pc, #60]	@ (80043dc <HAL_DMA_Init+0x638>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <HAL_DMA_Init+0x628>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0d      	ldr	r2, [pc, #52]	@ (80043e0 <HAL_DMA_Init+0x63c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00e      	beq.n	80043cc <HAL_DMA_Init+0x628>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	@ (80043e4 <HAL_DMA_Init+0x640>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_DMA_Init+0x628>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0a      	ldr	r2, [pc, #40]	@ (80043e8 <HAL_DMA_Init+0x644>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_DMA_Init+0x628>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a09      	ldr	r2, [pc, #36]	@ (80043ec <HAL_DMA_Init+0x648>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d137      	bne.n	800443c <HAL_DMA_Init+0x698>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e036      	b.n	800443e <HAL_DMA_Init+0x69a>
 80043d0:	58025408 	.word	0x58025408
 80043d4:	5802541c 	.word	0x5802541c
 80043d8:	58025430 	.word	0x58025430
 80043dc:	58025444 	.word	0x58025444
 80043e0:	58025458 	.word	0x58025458
 80043e4:	5802546c 	.word	0x5802546c
 80043e8:	58025480 	.word	0x58025480
 80043ec:	58025494 	.word	0x58025494
 80043f0:	fffe000f 	.word	0xfffe000f
 80043f4:	a7fdabf8 	.word	0xa7fdabf8
 80043f8:	cccccccd 	.word	0xcccccccd
 80043fc:	40020010 	.word	0x40020010
 8004400:	40020028 	.word	0x40020028
 8004404:	40020040 	.word	0x40020040
 8004408:	40020058 	.word	0x40020058
 800440c:	40020070 	.word	0x40020070
 8004410:	40020088 	.word	0x40020088
 8004414:	400200a0 	.word	0x400200a0
 8004418:	400200b8 	.word	0x400200b8
 800441c:	40020410 	.word	0x40020410
 8004420:	40020428 	.word	0x40020428
 8004424:	40020440 	.word	0x40020440
 8004428:	40020458 	.word	0x40020458
 800442c:	40020470 	.word	0x40020470
 8004430:	40020488 	.word	0x40020488
 8004434:	400204a0 	.word	0x400204a0
 8004438:	400204b8 	.word	0x400204b8
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d032      	beq.n	80044a8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f002 fa7e 	bl	8006944 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b80      	cmp	r3, #128	@ 0x80
 800444e:	d102      	bne.n	8004456 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800446a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <HAL_DMA_Init+0x6f2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d80c      	bhi.n	8004496 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f002 fafb 	bl	8006a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	e008      	b.n	80044a8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e226      	b.n	800492a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_DMA_Start_IT+0x2a>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e21f      	b.n	800492a <HAL_DMA_Start_IT+0x46a>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	f040 820a 	bne.w	8004914 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a68      	ldr	r2, [pc, #416]	@ (80046b4 <HAL_DMA_Start_IT+0x1f4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d04a      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a66      	ldr	r2, [pc, #408]	@ (80046b8 <HAL_DMA_Start_IT+0x1f8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d045      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a65      	ldr	r2, [pc, #404]	@ (80046bc <HAL_DMA_Start_IT+0x1fc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d040      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a63      	ldr	r2, [pc, #396]	@ (80046c0 <HAL_DMA_Start_IT+0x200>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d03b      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a62      	ldr	r2, [pc, #392]	@ (80046c4 <HAL_DMA_Start_IT+0x204>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d036      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a60      	ldr	r2, [pc, #384]	@ (80046c8 <HAL_DMA_Start_IT+0x208>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d031      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5f      	ldr	r2, [pc, #380]	@ (80046cc <HAL_DMA_Start_IT+0x20c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d02c      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5d      	ldr	r2, [pc, #372]	@ (80046d0 <HAL_DMA_Start_IT+0x210>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d027      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5c      	ldr	r2, [pc, #368]	@ (80046d4 <HAL_DMA_Start_IT+0x214>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d022      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a5a      	ldr	r2, [pc, #360]	@ (80046d8 <HAL_DMA_Start_IT+0x218>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01d      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a59      	ldr	r2, [pc, #356]	@ (80046dc <HAL_DMA_Start_IT+0x21c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d018      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a57      	ldr	r2, [pc, #348]	@ (80046e0 <HAL_DMA_Start_IT+0x220>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a56      	ldr	r2, [pc, #344]	@ (80046e4 <HAL_DMA_Start_IT+0x224>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a54      	ldr	r2, [pc, #336]	@ (80046e8 <HAL_DMA_Start_IT+0x228>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a53      	ldr	r2, [pc, #332]	@ (80046ec <HAL_DMA_Start_IT+0x22c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_DMA_Start_IT+0xee>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a51      	ldr	r2, [pc, #324]	@ (80046f0 <HAL_DMA_Start_IT+0x230>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <HAL_DMA_Start_IT+0x100>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e007      	b.n	80045d0 <HAL_DMA_Start_IT+0x110>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f001 fea2 	bl	8006320 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a34      	ldr	r2, [pc, #208]	@ (80046b4 <HAL_DMA_Start_IT+0x1f4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d04a      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a33      	ldr	r2, [pc, #204]	@ (80046b8 <HAL_DMA_Start_IT+0x1f8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d045      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a31      	ldr	r2, [pc, #196]	@ (80046bc <HAL_DMA_Start_IT+0x1fc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d040      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a30      	ldr	r2, [pc, #192]	@ (80046c0 <HAL_DMA_Start_IT+0x200>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d03b      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2e      	ldr	r2, [pc, #184]	@ (80046c4 <HAL_DMA_Start_IT+0x204>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d036      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a2d      	ldr	r2, [pc, #180]	@ (80046c8 <HAL_DMA_Start_IT+0x208>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d031      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a2b      	ldr	r2, [pc, #172]	@ (80046cc <HAL_DMA_Start_IT+0x20c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d02c      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2a      	ldr	r2, [pc, #168]	@ (80046d0 <HAL_DMA_Start_IT+0x210>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d027      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a28      	ldr	r2, [pc, #160]	@ (80046d4 <HAL_DMA_Start_IT+0x214>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d022      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a27      	ldr	r2, [pc, #156]	@ (80046d8 <HAL_DMA_Start_IT+0x218>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d01d      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a25      	ldr	r2, [pc, #148]	@ (80046dc <HAL_DMA_Start_IT+0x21c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d018      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a24      	ldr	r2, [pc, #144]	@ (80046e0 <HAL_DMA_Start_IT+0x220>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a22      	ldr	r2, [pc, #136]	@ (80046e4 <HAL_DMA_Start_IT+0x224>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00e      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a21      	ldr	r2, [pc, #132]	@ (80046e8 <HAL_DMA_Start_IT+0x228>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1f      	ldr	r2, [pc, #124]	@ (80046ec <HAL_DMA_Start_IT+0x22c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_DMA_Start_IT+0x1bc>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1e      	ldr	r2, [pc, #120]	@ (80046f0 <HAL_DMA_Start_IT+0x230>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <HAL_DMA_Start_IT+0x1c0>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_DMA_Start_IT+0x1c2>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d036      	beq.n	80046f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 021e 	bic.w	r2, r3, #30
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0216 	orr.w	r2, r2, #22
 8004698:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d03e      	beq.n	8004720 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0208 	orr.w	r2, r2, #8
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e035      	b.n	8004720 <HAL_DMA_Start_IT+0x260>
 80046b4:	40020010 	.word	0x40020010
 80046b8:	40020028 	.word	0x40020028
 80046bc:	40020040 	.word	0x40020040
 80046c0:	40020058 	.word	0x40020058
 80046c4:	40020070 	.word	0x40020070
 80046c8:	40020088 	.word	0x40020088
 80046cc:	400200a0 	.word	0x400200a0
 80046d0:	400200b8 	.word	0x400200b8
 80046d4:	40020410 	.word	0x40020410
 80046d8:	40020428 	.word	0x40020428
 80046dc:	40020440 	.word	0x40020440
 80046e0:	40020458 	.word	0x40020458
 80046e4:	40020470 	.word	0x40020470
 80046e8:	40020488 	.word	0x40020488
 80046ec:	400204a0 	.word	0x400204a0
 80046f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 020e 	bic.w	r2, r3, #14
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 020a 	orr.w	r2, r2, #10
 8004706:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0204 	orr.w	r2, r2, #4
 800471e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a83      	ldr	r2, [pc, #524]	@ (8004934 <HAL_DMA_Start_IT+0x474>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d072      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a82      	ldr	r2, [pc, #520]	@ (8004938 <HAL_DMA_Start_IT+0x478>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d06d      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a80      	ldr	r2, [pc, #512]	@ (800493c <HAL_DMA_Start_IT+0x47c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d068      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7f      	ldr	r2, [pc, #508]	@ (8004940 <HAL_DMA_Start_IT+0x480>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d063      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7d      	ldr	r2, [pc, #500]	@ (8004944 <HAL_DMA_Start_IT+0x484>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d05e      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7c      	ldr	r2, [pc, #496]	@ (8004948 <HAL_DMA_Start_IT+0x488>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d059      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7a      	ldr	r2, [pc, #488]	@ (800494c <HAL_DMA_Start_IT+0x48c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d054      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a79      	ldr	r2, [pc, #484]	@ (8004950 <HAL_DMA_Start_IT+0x490>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d04f      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a77      	ldr	r2, [pc, #476]	@ (8004954 <HAL_DMA_Start_IT+0x494>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d04a      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a76      	ldr	r2, [pc, #472]	@ (8004958 <HAL_DMA_Start_IT+0x498>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d045      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a74      	ldr	r2, [pc, #464]	@ (800495c <HAL_DMA_Start_IT+0x49c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d040      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a73      	ldr	r2, [pc, #460]	@ (8004960 <HAL_DMA_Start_IT+0x4a0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d03b      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a71      	ldr	r2, [pc, #452]	@ (8004964 <HAL_DMA_Start_IT+0x4a4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d036      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a70      	ldr	r2, [pc, #448]	@ (8004968 <HAL_DMA_Start_IT+0x4a8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d031      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6e      	ldr	r2, [pc, #440]	@ (800496c <HAL_DMA_Start_IT+0x4ac>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02c      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6d      	ldr	r2, [pc, #436]	@ (8004970 <HAL_DMA_Start_IT+0x4b0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d027      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a6b      	ldr	r2, [pc, #428]	@ (8004974 <HAL_DMA_Start_IT+0x4b4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a6a      	ldr	r2, [pc, #424]	@ (8004978 <HAL_DMA_Start_IT+0x4b8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01d      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a68      	ldr	r2, [pc, #416]	@ (800497c <HAL_DMA_Start_IT+0x4bc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a67      	ldr	r2, [pc, #412]	@ (8004980 <HAL_DMA_Start_IT+0x4c0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a65      	ldr	r2, [pc, #404]	@ (8004984 <HAL_DMA_Start_IT+0x4c4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a64      	ldr	r2, [pc, #400]	@ (8004988 <HAL_DMA_Start_IT+0x4c8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a62      	ldr	r2, [pc, #392]	@ (800498c <HAL_DMA_Start_IT+0x4cc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_DMA_Start_IT+0x350>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a61      	ldr	r2, [pc, #388]	@ (8004990 <HAL_DMA_Start_IT+0x4d0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <HAL_DMA_Start_IT+0x354>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_DMA_Start_IT+0x356>
 8004814:	2300      	movs	r3, #0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01a      	beq.n	8004850 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004832:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004836:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d007      	beq.n	8004850 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800484e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a37      	ldr	r2, [pc, #220]	@ (8004934 <HAL_DMA_Start_IT+0x474>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d04a      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a36      	ldr	r2, [pc, #216]	@ (8004938 <HAL_DMA_Start_IT+0x478>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d045      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a34      	ldr	r2, [pc, #208]	@ (800493c <HAL_DMA_Start_IT+0x47c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d040      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a33      	ldr	r2, [pc, #204]	@ (8004940 <HAL_DMA_Start_IT+0x480>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d03b      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a31      	ldr	r2, [pc, #196]	@ (8004944 <HAL_DMA_Start_IT+0x484>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d036      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a30      	ldr	r2, [pc, #192]	@ (8004948 <HAL_DMA_Start_IT+0x488>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d031      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2e      	ldr	r2, [pc, #184]	@ (800494c <HAL_DMA_Start_IT+0x48c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d02c      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2d      	ldr	r2, [pc, #180]	@ (8004950 <HAL_DMA_Start_IT+0x490>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d027      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004954 <HAL_DMA_Start_IT+0x494>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d022      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004958 <HAL_DMA_Start_IT+0x498>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d01d      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a28      	ldr	r2, [pc, #160]	@ (800495c <HAL_DMA_Start_IT+0x49c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d018      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a27      	ldr	r2, [pc, #156]	@ (8004960 <HAL_DMA_Start_IT+0x4a0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d013      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a25      	ldr	r2, [pc, #148]	@ (8004964 <HAL_DMA_Start_IT+0x4a4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00e      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a24      	ldr	r2, [pc, #144]	@ (8004968 <HAL_DMA_Start_IT+0x4a8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a22      	ldr	r2, [pc, #136]	@ (800496c <HAL_DMA_Start_IT+0x4ac>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_DMA_Start_IT+0x430>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a21      	ldr	r2, [pc, #132]	@ (8004970 <HAL_DMA_Start_IT+0x4b0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d108      	bne.n	8004902 <HAL_DMA_Start_IT+0x442>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e012      	b.n	8004928 <HAL_DMA_Start_IT+0x468>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e009      	b.n	8004928 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800491a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40020010 	.word	0x40020010
 8004938:	40020028 	.word	0x40020028
 800493c:	40020040 	.word	0x40020040
 8004940:	40020058 	.word	0x40020058
 8004944:	40020070 	.word	0x40020070
 8004948:	40020088 	.word	0x40020088
 800494c:	400200a0 	.word	0x400200a0
 8004950:	400200b8 	.word	0x400200b8
 8004954:	40020410 	.word	0x40020410
 8004958:	40020428 	.word	0x40020428
 800495c:	40020440 	.word	0x40020440
 8004960:	40020458 	.word	0x40020458
 8004964:	40020470 	.word	0x40020470
 8004968:	40020488 	.word	0x40020488
 800496c:	400204a0 	.word	0x400204a0
 8004970:	400204b8 	.word	0x400204b8
 8004974:	58025408 	.word	0x58025408
 8004978:	5802541c 	.word	0x5802541c
 800497c:	58025430 	.word	0x58025430
 8004980:	58025444 	.word	0x58025444
 8004984:	58025458 	.word	0x58025458
 8004988:	5802546c 	.word	0x5802546c
 800498c:	58025480 	.word	0x58025480
 8004990:	58025494 	.word	0x58025494

08004994 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800499c:	f7ff f84a 	bl	8003a34 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e2dc      	b.n	8004f66 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d008      	beq.n	80049ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2280      	movs	r2, #128	@ 0x80
 80049bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e2cd      	b.n	8004f66 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a76      	ldr	r2, [pc, #472]	@ (8004ba8 <HAL_DMA_Abort+0x214>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d04a      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a74      	ldr	r2, [pc, #464]	@ (8004bac <HAL_DMA_Abort+0x218>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d045      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a73      	ldr	r2, [pc, #460]	@ (8004bb0 <HAL_DMA_Abort+0x21c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d040      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a71      	ldr	r2, [pc, #452]	@ (8004bb4 <HAL_DMA_Abort+0x220>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d03b      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a70      	ldr	r2, [pc, #448]	@ (8004bb8 <HAL_DMA_Abort+0x224>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d036      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a6e      	ldr	r2, [pc, #440]	@ (8004bbc <HAL_DMA_Abort+0x228>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d031      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a6d      	ldr	r2, [pc, #436]	@ (8004bc0 <HAL_DMA_Abort+0x22c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d02c      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a6b      	ldr	r2, [pc, #428]	@ (8004bc4 <HAL_DMA_Abort+0x230>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d027      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a6a      	ldr	r2, [pc, #424]	@ (8004bc8 <HAL_DMA_Abort+0x234>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d022      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a68      	ldr	r2, [pc, #416]	@ (8004bcc <HAL_DMA_Abort+0x238>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01d      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a67      	ldr	r2, [pc, #412]	@ (8004bd0 <HAL_DMA_Abort+0x23c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d018      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a65      	ldr	r2, [pc, #404]	@ (8004bd4 <HAL_DMA_Abort+0x240>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a64      	ldr	r2, [pc, #400]	@ (8004bd8 <HAL_DMA_Abort+0x244>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a62      	ldr	r2, [pc, #392]	@ (8004bdc <HAL_DMA_Abort+0x248>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a61      	ldr	r2, [pc, #388]	@ (8004be0 <HAL_DMA_Abort+0x24c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_DMA_Abort+0xd6>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a5f      	ldr	r2, [pc, #380]	@ (8004be4 <HAL_DMA_Abort+0x250>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <HAL_DMA_Abort+0xda>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_DMA_Abort+0xdc>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d013      	beq.n	8004a9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 021e 	bic.w	r2, r2, #30
 8004a82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e00a      	b.n	8004ab2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 020e 	bic.w	r2, r2, #14
 8004aaa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba8 <HAL_DMA_Abort+0x214>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d072      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8004bac <HAL_DMA_Abort+0x218>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d06d      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a39      	ldr	r2, [pc, #228]	@ (8004bb0 <HAL_DMA_Abort+0x21c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d068      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a37      	ldr	r2, [pc, #220]	@ (8004bb4 <HAL_DMA_Abort+0x220>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d063      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a36      	ldr	r2, [pc, #216]	@ (8004bb8 <HAL_DMA_Abort+0x224>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d05e      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a34      	ldr	r2, [pc, #208]	@ (8004bbc <HAL_DMA_Abort+0x228>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d059      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a33      	ldr	r2, [pc, #204]	@ (8004bc0 <HAL_DMA_Abort+0x22c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d054      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a31      	ldr	r2, [pc, #196]	@ (8004bc4 <HAL_DMA_Abort+0x230>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d04f      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a30      	ldr	r2, [pc, #192]	@ (8004bc8 <HAL_DMA_Abort+0x234>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d04a      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2e      	ldr	r2, [pc, #184]	@ (8004bcc <HAL_DMA_Abort+0x238>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d045      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8004bd0 <HAL_DMA_Abort+0x23c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d040      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd4 <HAL_DMA_Abort+0x240>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d03b      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd8 <HAL_DMA_Abort+0x244>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d036      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a28      	ldr	r2, [pc, #160]	@ (8004bdc <HAL_DMA_Abort+0x248>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d031      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a27      	ldr	r2, [pc, #156]	@ (8004be0 <HAL_DMA_Abort+0x24c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d02c      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a25      	ldr	r2, [pc, #148]	@ (8004be4 <HAL_DMA_Abort+0x250>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d027      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a24      	ldr	r2, [pc, #144]	@ (8004be8 <HAL_DMA_Abort+0x254>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d022      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a22      	ldr	r2, [pc, #136]	@ (8004bec <HAL_DMA_Abort+0x258>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01d      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a21      	ldr	r2, [pc, #132]	@ (8004bf0 <HAL_DMA_Abort+0x25c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf4 <HAL_DMA_Abort+0x260>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf8 <HAL_DMA_Abort+0x264>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <HAL_DMA_Abort+0x268>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	@ (8004c00 <HAL_DMA_Abort+0x26c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_DMA_Abort+0x20e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <HAL_DMA_Abort+0x270>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d132      	bne.n	8004c08 <HAL_DMA_Abort+0x274>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e031      	b.n	8004c0a <HAL_DMA_Abort+0x276>
 8004ba6:	bf00      	nop
 8004ba8:	40020010 	.word	0x40020010
 8004bac:	40020028 	.word	0x40020028
 8004bb0:	40020040 	.word	0x40020040
 8004bb4:	40020058 	.word	0x40020058
 8004bb8:	40020070 	.word	0x40020070
 8004bbc:	40020088 	.word	0x40020088
 8004bc0:	400200a0 	.word	0x400200a0
 8004bc4:	400200b8 	.word	0x400200b8
 8004bc8:	40020410 	.word	0x40020410
 8004bcc:	40020428 	.word	0x40020428
 8004bd0:	40020440 	.word	0x40020440
 8004bd4:	40020458 	.word	0x40020458
 8004bd8:	40020470 	.word	0x40020470
 8004bdc:	40020488 	.word	0x40020488
 8004be0:	400204a0 	.word	0x400204a0
 8004be4:	400204b8 	.word	0x400204b8
 8004be8:	58025408 	.word	0x58025408
 8004bec:	5802541c 	.word	0x5802541c
 8004bf0:	58025430 	.word	0x58025430
 8004bf4:	58025444 	.word	0x58025444
 8004bf8:	58025458 	.word	0x58025458
 8004bfc:	5802546c 	.word	0x5802546c
 8004c00:	58025480 	.word	0x58025480
 8004c04:	58025494 	.word	0x58025494
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6d      	ldr	r2, [pc, #436]	@ (8004dd8 <HAL_DMA_Abort+0x444>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d04a      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ddc <HAL_DMA_Abort+0x448>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d045      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6a      	ldr	r2, [pc, #424]	@ (8004de0 <HAL_DMA_Abort+0x44c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d040      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a68      	ldr	r2, [pc, #416]	@ (8004de4 <HAL_DMA_Abort+0x450>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d03b      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a67      	ldr	r2, [pc, #412]	@ (8004de8 <HAL_DMA_Abort+0x454>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d036      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a65      	ldr	r2, [pc, #404]	@ (8004dec <HAL_DMA_Abort+0x458>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d031      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a64      	ldr	r2, [pc, #400]	@ (8004df0 <HAL_DMA_Abort+0x45c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d02c      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a62      	ldr	r2, [pc, #392]	@ (8004df4 <HAL_DMA_Abort+0x460>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d027      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a61      	ldr	r2, [pc, #388]	@ (8004df8 <HAL_DMA_Abort+0x464>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5f      	ldr	r2, [pc, #380]	@ (8004dfc <HAL_DMA_Abort+0x468>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5e      	ldr	r2, [pc, #376]	@ (8004e00 <HAL_DMA_Abort+0x46c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a5c      	ldr	r2, [pc, #368]	@ (8004e04 <HAL_DMA_Abort+0x470>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004e08 <HAL_DMA_Abort+0x474>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a59      	ldr	r2, [pc, #356]	@ (8004e0c <HAL_DMA_Abort+0x478>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a58      	ldr	r2, [pc, #352]	@ (8004e10 <HAL_DMA_Abort+0x47c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_DMA_Abort+0x32a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a56      	ldr	r2, [pc, #344]	@ (8004e14 <HAL_DMA_Abort+0x480>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <HAL_DMA_Abort+0x33c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e007      	b.n	8004ce0 <HAL_DMA_Abort+0x34c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ce0:	e013      	b.n	8004d0a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ce2:	f7fe fea7 	bl	8003a34 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d90c      	bls.n	8004d0a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e12d      	b.n	8004f66 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e5      	bne.n	8004ce2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd8 <HAL_DMA_Abort+0x444>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d04a      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2d      	ldr	r2, [pc, #180]	@ (8004ddc <HAL_DMA_Abort+0x448>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d045      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004de0 <HAL_DMA_Abort+0x44c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d040      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2a      	ldr	r2, [pc, #168]	@ (8004de4 <HAL_DMA_Abort+0x450>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d03b      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a29      	ldr	r2, [pc, #164]	@ (8004de8 <HAL_DMA_Abort+0x454>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d036      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a27      	ldr	r2, [pc, #156]	@ (8004dec <HAL_DMA_Abort+0x458>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d031      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a26      	ldr	r2, [pc, #152]	@ (8004df0 <HAL_DMA_Abort+0x45c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d02c      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a24      	ldr	r2, [pc, #144]	@ (8004df4 <HAL_DMA_Abort+0x460>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d027      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a23      	ldr	r2, [pc, #140]	@ (8004df8 <HAL_DMA_Abort+0x464>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d022      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a21      	ldr	r2, [pc, #132]	@ (8004dfc <HAL_DMA_Abort+0x468>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01d      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a20      	ldr	r2, [pc, #128]	@ (8004e00 <HAL_DMA_Abort+0x46c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d018      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1e      	ldr	r2, [pc, #120]	@ (8004e04 <HAL_DMA_Abort+0x470>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1d      	ldr	r2, [pc, #116]	@ (8004e08 <HAL_DMA_Abort+0x474>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00e      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e0c <HAL_DMA_Abort+0x478>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e10 <HAL_DMA_Abort+0x47c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_DMA_Abort+0x422>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a18      	ldr	r2, [pc, #96]	@ (8004e14 <HAL_DMA_Abort+0x480>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <HAL_DMA_Abort+0x426>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <HAL_DMA_Abort+0x428>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02b      	beq.n	8004e18 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	223f      	movs	r2, #63	@ 0x3f
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	e02a      	b.n	8004e2e <HAL_DMA_Abort+0x49a>
 8004dd8:	40020010 	.word	0x40020010
 8004ddc:	40020028 	.word	0x40020028
 8004de0:	40020040 	.word	0x40020040
 8004de4:	40020058 	.word	0x40020058
 8004de8:	40020070 	.word	0x40020070
 8004dec:	40020088 	.word	0x40020088
 8004df0:	400200a0 	.word	0x400200a0
 8004df4:	400200b8 	.word	0x400200b8
 8004df8:	40020410 	.word	0x40020410
 8004dfc:	40020428 	.word	0x40020428
 8004e00:	40020440 	.word	0x40020440
 8004e04:	40020458 	.word	0x40020458
 8004e08:	40020470 	.word	0x40020470
 8004e0c:	40020488 	.word	0x40020488
 8004e10:	400204a0 	.word	0x400204a0
 8004e14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2201      	movs	r2, #1
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a4f      	ldr	r2, [pc, #316]	@ (8004f70 <HAL_DMA_Abort+0x5dc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d072      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8004f74 <HAL_DMA_Abort+0x5e0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d06d      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a4c      	ldr	r2, [pc, #304]	@ (8004f78 <HAL_DMA_Abort+0x5e4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d068      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a4a      	ldr	r2, [pc, #296]	@ (8004f7c <HAL_DMA_Abort+0x5e8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d063      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a49      	ldr	r2, [pc, #292]	@ (8004f80 <HAL_DMA_Abort+0x5ec>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d05e      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a47      	ldr	r2, [pc, #284]	@ (8004f84 <HAL_DMA_Abort+0x5f0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d059      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a46      	ldr	r2, [pc, #280]	@ (8004f88 <HAL_DMA_Abort+0x5f4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d054      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a44      	ldr	r2, [pc, #272]	@ (8004f8c <HAL_DMA_Abort+0x5f8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d04f      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a43      	ldr	r2, [pc, #268]	@ (8004f90 <HAL_DMA_Abort+0x5fc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d04a      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a41      	ldr	r2, [pc, #260]	@ (8004f94 <HAL_DMA_Abort+0x600>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d045      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a40      	ldr	r2, [pc, #256]	@ (8004f98 <HAL_DMA_Abort+0x604>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d040      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8004f9c <HAL_DMA_Abort+0x608>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d03b      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8004fa0 <HAL_DMA_Abort+0x60c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d036      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a3b      	ldr	r2, [pc, #236]	@ (8004fa4 <HAL_DMA_Abort+0x610>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d031      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8004fa8 <HAL_DMA_Abort+0x614>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d02c      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a38      	ldr	r2, [pc, #224]	@ (8004fac <HAL_DMA_Abort+0x618>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d027      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a37      	ldr	r2, [pc, #220]	@ (8004fb0 <HAL_DMA_Abort+0x61c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d022      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a35      	ldr	r2, [pc, #212]	@ (8004fb4 <HAL_DMA_Abort+0x620>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a34      	ldr	r2, [pc, #208]	@ (8004fb8 <HAL_DMA_Abort+0x624>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d018      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a32      	ldr	r2, [pc, #200]	@ (8004fbc <HAL_DMA_Abort+0x628>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a31      	ldr	r2, [pc, #196]	@ (8004fc0 <HAL_DMA_Abort+0x62c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc4 <HAL_DMA_Abort+0x630>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc8 <HAL_DMA_Abort+0x634>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_DMA_Abort+0x58a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2c      	ldr	r2, [pc, #176]	@ (8004fcc <HAL_DMA_Abort+0x638>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_DMA_Abort+0x58e>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <HAL_DMA_Abort+0x590>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d015      	beq.n	8004f54 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004f30:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00c      	beq.n	8004f54 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f48:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f52:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40020010 	.word	0x40020010
 8004f74:	40020028 	.word	0x40020028
 8004f78:	40020040 	.word	0x40020040
 8004f7c:	40020058 	.word	0x40020058
 8004f80:	40020070 	.word	0x40020070
 8004f84:	40020088 	.word	0x40020088
 8004f88:	400200a0 	.word	0x400200a0
 8004f8c:	400200b8 	.word	0x400200b8
 8004f90:	40020410 	.word	0x40020410
 8004f94:	40020428 	.word	0x40020428
 8004f98:	40020440 	.word	0x40020440
 8004f9c:	40020458 	.word	0x40020458
 8004fa0:	40020470 	.word	0x40020470
 8004fa4:	40020488 	.word	0x40020488
 8004fa8:	400204a0 	.word	0x400204a0
 8004fac:	400204b8 	.word	0x400204b8
 8004fb0:	58025408 	.word	0x58025408
 8004fb4:	5802541c 	.word	0x5802541c
 8004fb8:	58025430 	.word	0x58025430
 8004fbc:	58025444 	.word	0x58025444
 8004fc0:	58025458 	.word	0x58025458
 8004fc4:	5802546c 	.word	0x5802546c
 8004fc8:	58025480 	.word	0x58025480
 8004fcc:	58025494 	.word	0x58025494

08004fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e237      	b.n	8005452 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d004      	beq.n	8004ff8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2280      	movs	r2, #128	@ 0x80
 8004ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e22c      	b.n	8005452 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a5c      	ldr	r2, [pc, #368]	@ (8005170 <HAL_DMA_Abort_IT+0x1a0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d04a      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a5b      	ldr	r2, [pc, #364]	@ (8005174 <HAL_DMA_Abort_IT+0x1a4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d045      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a59      	ldr	r2, [pc, #356]	@ (8005178 <HAL_DMA_Abort_IT+0x1a8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d040      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a58      	ldr	r2, [pc, #352]	@ (800517c <HAL_DMA_Abort_IT+0x1ac>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d03b      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a56      	ldr	r2, [pc, #344]	@ (8005180 <HAL_DMA_Abort_IT+0x1b0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d036      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a55      	ldr	r2, [pc, #340]	@ (8005184 <HAL_DMA_Abort_IT+0x1b4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d031      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a53      	ldr	r2, [pc, #332]	@ (8005188 <HAL_DMA_Abort_IT+0x1b8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02c      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a52      	ldr	r2, [pc, #328]	@ (800518c <HAL_DMA_Abort_IT+0x1bc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d027      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a50      	ldr	r2, [pc, #320]	@ (8005190 <HAL_DMA_Abort_IT+0x1c0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a4f      	ldr	r2, [pc, #316]	@ (8005194 <HAL_DMA_Abort_IT+0x1c4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01d      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a4d      	ldr	r2, [pc, #308]	@ (8005198 <HAL_DMA_Abort_IT+0x1c8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a4c      	ldr	r2, [pc, #304]	@ (800519c <HAL_DMA_Abort_IT+0x1cc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a4a      	ldr	r2, [pc, #296]	@ (80051a0 <HAL_DMA_Abort_IT+0x1d0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a49      	ldr	r2, [pc, #292]	@ (80051a4 <HAL_DMA_Abort_IT+0x1d4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a47      	ldr	r2, [pc, #284]	@ (80051a8 <HAL_DMA_Abort_IT+0x1d8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_DMA_Abort_IT+0xc8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a46      	ldr	r2, [pc, #280]	@ (80051ac <HAL_DMA_Abort_IT+0x1dc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d101      	bne.n	800509c <HAL_DMA_Abort_IT+0xcc>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_DMA_Abort_IT+0xce>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8086 	beq.w	80051b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2204      	movs	r2, #4
 80050a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005170 <HAL_DMA_Abort_IT+0x1a0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d04a      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005174 <HAL_DMA_Abort_IT+0x1a4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d045      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005178 <HAL_DMA_Abort_IT+0x1a8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d040      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2b      	ldr	r2, [pc, #172]	@ (800517c <HAL_DMA_Abort_IT+0x1ac>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d03b      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a29      	ldr	r2, [pc, #164]	@ (8005180 <HAL_DMA_Abort_IT+0x1b0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d036      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a28      	ldr	r2, [pc, #160]	@ (8005184 <HAL_DMA_Abort_IT+0x1b4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d031      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a26      	ldr	r2, [pc, #152]	@ (8005188 <HAL_DMA_Abort_IT+0x1b8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d02c      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a25      	ldr	r2, [pc, #148]	@ (800518c <HAL_DMA_Abort_IT+0x1bc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d027      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a23      	ldr	r2, [pc, #140]	@ (8005190 <HAL_DMA_Abort_IT+0x1c0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d022      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a22      	ldr	r2, [pc, #136]	@ (8005194 <HAL_DMA_Abort_IT+0x1c4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d01d      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a20      	ldr	r2, [pc, #128]	@ (8005198 <HAL_DMA_Abort_IT+0x1c8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d018      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <HAL_DMA_Abort_IT+0x1cc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1d      	ldr	r2, [pc, #116]	@ (80051a0 <HAL_DMA_Abort_IT+0x1d0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1c      	ldr	r2, [pc, #112]	@ (80051a4 <HAL_DMA_Abort_IT+0x1d4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1a      	ldr	r2, [pc, #104]	@ (80051a8 <HAL_DMA_Abort_IT+0x1d8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_DMA_Abort_IT+0x17c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a19      	ldr	r2, [pc, #100]	@ (80051ac <HAL_DMA_Abort_IT+0x1dc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <HAL_DMA_Abort_IT+0x18e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0201 	bic.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	e178      	b.n	8005450 <HAL_DMA_Abort_IT+0x480>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e16f      	b.n	8005450 <HAL_DMA_Abort_IT+0x480>
 8005170:	40020010 	.word	0x40020010
 8005174:	40020028 	.word	0x40020028
 8005178:	40020040 	.word	0x40020040
 800517c:	40020058 	.word	0x40020058
 8005180:	40020070 	.word	0x40020070
 8005184:	40020088 	.word	0x40020088
 8005188:	400200a0 	.word	0x400200a0
 800518c:	400200b8 	.word	0x400200b8
 8005190:	40020410 	.word	0x40020410
 8005194:	40020428 	.word	0x40020428
 8005198:	40020440 	.word	0x40020440
 800519c:	40020458 	.word	0x40020458
 80051a0:	40020470 	.word	0x40020470
 80051a4:	40020488 	.word	0x40020488
 80051a8:	400204a0 	.word	0x400204a0
 80051ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 020e 	bic.w	r2, r2, #14
 80051be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a6c      	ldr	r2, [pc, #432]	@ (8005378 <HAL_DMA_Abort_IT+0x3a8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d04a      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a6b      	ldr	r2, [pc, #428]	@ (800537c <HAL_DMA_Abort_IT+0x3ac>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d045      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a69      	ldr	r2, [pc, #420]	@ (8005380 <HAL_DMA_Abort_IT+0x3b0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d040      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a68      	ldr	r2, [pc, #416]	@ (8005384 <HAL_DMA_Abort_IT+0x3b4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d03b      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a66      	ldr	r2, [pc, #408]	@ (8005388 <HAL_DMA_Abort_IT+0x3b8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d036      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a65      	ldr	r2, [pc, #404]	@ (800538c <HAL_DMA_Abort_IT+0x3bc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d031      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a63      	ldr	r2, [pc, #396]	@ (8005390 <HAL_DMA_Abort_IT+0x3c0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02c      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a62      	ldr	r2, [pc, #392]	@ (8005394 <HAL_DMA_Abort_IT+0x3c4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d027      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a60      	ldr	r2, [pc, #384]	@ (8005398 <HAL_DMA_Abort_IT+0x3c8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d022      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a5f      	ldr	r2, [pc, #380]	@ (800539c <HAL_DMA_Abort_IT+0x3cc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d01d      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a5d      	ldr	r2, [pc, #372]	@ (80053a0 <HAL_DMA_Abort_IT+0x3d0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a5c      	ldr	r2, [pc, #368]	@ (80053a4 <HAL_DMA_Abort_IT+0x3d4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a5a      	ldr	r2, [pc, #360]	@ (80053a8 <HAL_DMA_Abort_IT+0x3d8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a59      	ldr	r2, [pc, #356]	@ (80053ac <HAL_DMA_Abort_IT+0x3dc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a57      	ldr	r2, [pc, #348]	@ (80053b0 <HAL_DMA_Abort_IT+0x3e0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_DMA_Abort_IT+0x290>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a56      	ldr	r2, [pc, #344]	@ (80053b4 <HAL_DMA_Abort_IT+0x3e4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d108      	bne.n	8005272 <HAL_DMA_Abort_IT+0x2a2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e007      	b.n	8005282 <HAL_DMA_Abort_IT+0x2b2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a3c      	ldr	r2, [pc, #240]	@ (8005378 <HAL_DMA_Abort_IT+0x3a8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d072      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a3a      	ldr	r2, [pc, #232]	@ (800537c <HAL_DMA_Abort_IT+0x3ac>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d06d      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a39      	ldr	r2, [pc, #228]	@ (8005380 <HAL_DMA_Abort_IT+0x3b0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d068      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a37      	ldr	r2, [pc, #220]	@ (8005384 <HAL_DMA_Abort_IT+0x3b4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d063      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a36      	ldr	r2, [pc, #216]	@ (8005388 <HAL_DMA_Abort_IT+0x3b8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d05e      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a34      	ldr	r2, [pc, #208]	@ (800538c <HAL_DMA_Abort_IT+0x3bc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d059      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a33      	ldr	r2, [pc, #204]	@ (8005390 <HAL_DMA_Abort_IT+0x3c0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d054      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a31      	ldr	r2, [pc, #196]	@ (8005394 <HAL_DMA_Abort_IT+0x3c4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d04f      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a30      	ldr	r2, [pc, #192]	@ (8005398 <HAL_DMA_Abort_IT+0x3c8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d04a      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2e      	ldr	r2, [pc, #184]	@ (800539c <HAL_DMA_Abort_IT+0x3cc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d045      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a2d      	ldr	r2, [pc, #180]	@ (80053a0 <HAL_DMA_Abort_IT+0x3d0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d040      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a2b      	ldr	r2, [pc, #172]	@ (80053a4 <HAL_DMA_Abort_IT+0x3d4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d03b      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2a      	ldr	r2, [pc, #168]	@ (80053a8 <HAL_DMA_Abort_IT+0x3d8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d036      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a28      	ldr	r2, [pc, #160]	@ (80053ac <HAL_DMA_Abort_IT+0x3dc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d031      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a27      	ldr	r2, [pc, #156]	@ (80053b0 <HAL_DMA_Abort_IT+0x3e0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d02c      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a25      	ldr	r2, [pc, #148]	@ (80053b4 <HAL_DMA_Abort_IT+0x3e4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d027      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a24      	ldr	r2, [pc, #144]	@ (80053b8 <HAL_DMA_Abort_IT+0x3e8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d022      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a22      	ldr	r2, [pc, #136]	@ (80053bc <HAL_DMA_Abort_IT+0x3ec>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01d      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a21      	ldr	r2, [pc, #132]	@ (80053c0 <HAL_DMA_Abort_IT+0x3f0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d018      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1f      	ldr	r2, [pc, #124]	@ (80053c4 <HAL_DMA_Abort_IT+0x3f4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1e      	ldr	r2, [pc, #120]	@ (80053c8 <HAL_DMA_Abort_IT+0x3f8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00e      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1c      	ldr	r2, [pc, #112]	@ (80053cc <HAL_DMA_Abort_IT+0x3fc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d009      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1b      	ldr	r2, [pc, #108]	@ (80053d0 <HAL_DMA_Abort_IT+0x400>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <HAL_DMA_Abort_IT+0x3a2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a19      	ldr	r2, [pc, #100]	@ (80053d4 <HAL_DMA_Abort_IT+0x404>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d132      	bne.n	80053d8 <HAL_DMA_Abort_IT+0x408>
 8005372:	2301      	movs	r3, #1
 8005374:	e031      	b.n	80053da <HAL_DMA_Abort_IT+0x40a>
 8005376:	bf00      	nop
 8005378:	40020010 	.word	0x40020010
 800537c:	40020028 	.word	0x40020028
 8005380:	40020040 	.word	0x40020040
 8005384:	40020058 	.word	0x40020058
 8005388:	40020070 	.word	0x40020070
 800538c:	40020088 	.word	0x40020088
 8005390:	400200a0 	.word	0x400200a0
 8005394:	400200b8 	.word	0x400200b8
 8005398:	40020410 	.word	0x40020410
 800539c:	40020428 	.word	0x40020428
 80053a0:	40020440 	.word	0x40020440
 80053a4:	40020458 	.word	0x40020458
 80053a8:	40020470 	.word	0x40020470
 80053ac:	40020488 	.word	0x40020488
 80053b0:	400204a0 	.word	0x400204a0
 80053b4:	400204b8 	.word	0x400204b8
 80053b8:	58025408 	.word	0x58025408
 80053bc:	5802541c 	.word	0x5802541c
 80053c0:	58025430 	.word	0x58025430
 80053c4:	58025444 	.word	0x58025444
 80053c8:	58025458 	.word	0x58025458
 80053cc:	5802546c 	.word	0x5802546c
 80053d0:	58025480 	.word	0x58025480
 80053d4:	58025494 	.word	0x58025494
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d028      	beq.n	8005430 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	2201      	movs	r2, #1
 80053fe:	409a      	lsls	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800540c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00c      	beq.n	8005430 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005424:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800542e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop

0800545c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	@ 0x28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005468:	4b67      	ldr	r3, [pc, #412]	@ (8005608 <HAL_DMA_IRQHandler+0x1ac>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a67      	ldr	r2, [pc, #412]	@ (800560c <HAL_DMA_IRQHandler+0x1b0>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	0a9b      	lsrs	r3, r3, #10
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005480:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a5f      	ldr	r2, [pc, #380]	@ (8005610 <HAL_DMA_IRQHandler+0x1b4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d04a      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5d      	ldr	r2, [pc, #372]	@ (8005614 <HAL_DMA_IRQHandler+0x1b8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d045      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a5c      	ldr	r2, [pc, #368]	@ (8005618 <HAL_DMA_IRQHandler+0x1bc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d040      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a5a      	ldr	r2, [pc, #360]	@ (800561c <HAL_DMA_IRQHandler+0x1c0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d03b      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a59      	ldr	r2, [pc, #356]	@ (8005620 <HAL_DMA_IRQHandler+0x1c4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d036      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a57      	ldr	r2, [pc, #348]	@ (8005624 <HAL_DMA_IRQHandler+0x1c8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d031      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a56      	ldr	r2, [pc, #344]	@ (8005628 <HAL_DMA_IRQHandler+0x1cc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d02c      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a54      	ldr	r2, [pc, #336]	@ (800562c <HAL_DMA_IRQHandler+0x1d0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d027      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a53      	ldr	r2, [pc, #332]	@ (8005630 <HAL_DMA_IRQHandler+0x1d4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a51      	ldr	r2, [pc, #324]	@ (8005634 <HAL_DMA_IRQHandler+0x1d8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01d      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a50      	ldr	r2, [pc, #320]	@ (8005638 <HAL_DMA_IRQHandler+0x1dc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a4e      	ldr	r2, [pc, #312]	@ (800563c <HAL_DMA_IRQHandler+0x1e0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a4d      	ldr	r2, [pc, #308]	@ (8005640 <HAL_DMA_IRQHandler+0x1e4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a4b      	ldr	r2, [pc, #300]	@ (8005644 <HAL_DMA_IRQHandler+0x1e8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a4a      	ldr	r2, [pc, #296]	@ (8005648 <HAL_DMA_IRQHandler+0x1ec>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_DMA_IRQHandler+0xd2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a48      	ldr	r2, [pc, #288]	@ (800564c <HAL_DMA_IRQHandler+0x1f0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d101      	bne.n	8005532 <HAL_DMA_IRQHandler+0xd6>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <HAL_DMA_IRQHandler+0xd8>
 8005532:	2300      	movs	r3, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 842b 	beq.w	8005d90 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	2208      	movs	r2, #8
 8005544:	409a      	lsls	r2, r3
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80a2 	beq.w	8005694 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2e      	ldr	r2, [pc, #184]	@ (8005610 <HAL_DMA_IRQHandler+0x1b4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d04a      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2d      	ldr	r2, [pc, #180]	@ (8005614 <HAL_DMA_IRQHandler+0x1b8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d045      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2b      	ldr	r2, [pc, #172]	@ (8005618 <HAL_DMA_IRQHandler+0x1bc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d040      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2a      	ldr	r2, [pc, #168]	@ (800561c <HAL_DMA_IRQHandler+0x1c0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d03b      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a28      	ldr	r2, [pc, #160]	@ (8005620 <HAL_DMA_IRQHandler+0x1c4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d036      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a27      	ldr	r2, [pc, #156]	@ (8005624 <HAL_DMA_IRQHandler+0x1c8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d031      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a25      	ldr	r2, [pc, #148]	@ (8005628 <HAL_DMA_IRQHandler+0x1cc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d02c      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a24      	ldr	r2, [pc, #144]	@ (800562c <HAL_DMA_IRQHandler+0x1d0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d027      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a22      	ldr	r2, [pc, #136]	@ (8005630 <HAL_DMA_IRQHandler+0x1d4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d022      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a21      	ldr	r2, [pc, #132]	@ (8005634 <HAL_DMA_IRQHandler+0x1d8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d01d      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005638 <HAL_DMA_IRQHandler+0x1dc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d018      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1e      	ldr	r2, [pc, #120]	@ (800563c <HAL_DMA_IRQHandler+0x1e0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <HAL_DMA_IRQHandler+0x1e4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00e      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005644 <HAL_DMA_IRQHandler+0x1e8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d009      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a19      	ldr	r2, [pc, #100]	@ (8005648 <HAL_DMA_IRQHandler+0x1ec>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <HAL_DMA_IRQHandler+0x194>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a18      	ldr	r2, [pc, #96]	@ (800564c <HAL_DMA_IRQHandler+0x1f0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d12f      	bne.n	8005650 <HAL_DMA_IRQHandler+0x1f4>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	e02e      	b.n	8005664 <HAL_DMA_IRQHandler+0x208>
 8005606:	bf00      	nop
 8005608:	24000098 	.word	0x24000098
 800560c:	1b4e81b5 	.word	0x1b4e81b5
 8005610:	40020010 	.word	0x40020010
 8005614:	40020028 	.word	0x40020028
 8005618:	40020040 	.word	0x40020040
 800561c:	40020058 	.word	0x40020058
 8005620:	40020070 	.word	0x40020070
 8005624:	40020088 	.word	0x40020088
 8005628:	400200a0 	.word	0x400200a0
 800562c:	400200b8 	.word	0x400200b8
 8005630:	40020410 	.word	0x40020410
 8005634:	40020428 	.word	0x40020428
 8005638:	40020440 	.word	0x40020440
 800563c:	40020458 	.word	0x40020458
 8005640:	40020470 	.word	0x40020470
 8005644:	40020488 	.word	0x40020488
 8005648:	400204a0 	.word	0x400204a0
 800564c:	400204b8 	.word	0x400204b8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d015      	beq.n	8005694 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0204 	bic.w	r2, r2, #4
 8005676:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	2208      	movs	r2, #8
 8005682:	409a      	lsls	r2, r3
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568c:	f043 0201 	orr.w	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	fa22 f303 	lsr.w	r3, r2, r3
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d06e      	beq.n	8005788 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a69      	ldr	r2, [pc, #420]	@ (8005854 <HAL_DMA_IRQHandler+0x3f8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d04a      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a67      	ldr	r2, [pc, #412]	@ (8005858 <HAL_DMA_IRQHandler+0x3fc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d045      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a66      	ldr	r2, [pc, #408]	@ (800585c <HAL_DMA_IRQHandler+0x400>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d040      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a64      	ldr	r2, [pc, #400]	@ (8005860 <HAL_DMA_IRQHandler+0x404>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d03b      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a63      	ldr	r2, [pc, #396]	@ (8005864 <HAL_DMA_IRQHandler+0x408>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d036      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a61      	ldr	r2, [pc, #388]	@ (8005868 <HAL_DMA_IRQHandler+0x40c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d031      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a60      	ldr	r2, [pc, #384]	@ (800586c <HAL_DMA_IRQHandler+0x410>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d02c      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005870 <HAL_DMA_IRQHandler+0x414>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d027      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005874 <HAL_DMA_IRQHandler+0x418>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d022      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a5b      	ldr	r2, [pc, #364]	@ (8005878 <HAL_DMA_IRQHandler+0x41c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01d      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a5a      	ldr	r2, [pc, #360]	@ (800587c <HAL_DMA_IRQHandler+0x420>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d018      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a58      	ldr	r2, [pc, #352]	@ (8005880 <HAL_DMA_IRQHandler+0x424>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a57      	ldr	r2, [pc, #348]	@ (8005884 <HAL_DMA_IRQHandler+0x428>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00e      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a55      	ldr	r2, [pc, #340]	@ (8005888 <HAL_DMA_IRQHandler+0x42c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a54      	ldr	r2, [pc, #336]	@ (800588c <HAL_DMA_IRQHandler+0x430>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_DMA_IRQHandler+0x2ee>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a52      	ldr	r2, [pc, #328]	@ (8005890 <HAL_DMA_IRQHandler+0x434>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d10a      	bne.n	8005760 <HAL_DMA_IRQHandler+0x304>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf14      	ite	ne
 8005758:	2301      	movne	r3, #1
 800575a:	2300      	moveq	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e003      	b.n	8005768 <HAL_DMA_IRQHandler+0x30c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00d      	beq.n	8005788 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	2201      	movs	r2, #1
 8005776:	409a      	lsls	r2, r3
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005780:	f043 0202 	orr.w	r2, r3, #2
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2204      	movs	r2, #4
 8005792:	409a      	lsls	r2, r3
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 808f 	beq.w	80058bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005854 <HAL_DMA_IRQHandler+0x3f8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d04a      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005858 <HAL_DMA_IRQHandler+0x3fc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d045      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a29      	ldr	r2, [pc, #164]	@ (800585c <HAL_DMA_IRQHandler+0x400>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d040      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a27      	ldr	r2, [pc, #156]	@ (8005860 <HAL_DMA_IRQHandler+0x404>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d03b      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a26      	ldr	r2, [pc, #152]	@ (8005864 <HAL_DMA_IRQHandler+0x408>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d036      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a24      	ldr	r2, [pc, #144]	@ (8005868 <HAL_DMA_IRQHandler+0x40c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d031      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a23      	ldr	r2, [pc, #140]	@ (800586c <HAL_DMA_IRQHandler+0x410>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d02c      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a21      	ldr	r2, [pc, #132]	@ (8005870 <HAL_DMA_IRQHandler+0x414>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d027      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a20      	ldr	r2, [pc, #128]	@ (8005874 <HAL_DMA_IRQHandler+0x418>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d022      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005878 <HAL_DMA_IRQHandler+0x41c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01d      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1d      	ldr	r2, [pc, #116]	@ (800587c <HAL_DMA_IRQHandler+0x420>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d018      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1b      	ldr	r2, [pc, #108]	@ (8005880 <HAL_DMA_IRQHandler+0x424>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d013      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1a      	ldr	r2, [pc, #104]	@ (8005884 <HAL_DMA_IRQHandler+0x428>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00e      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a18      	ldr	r2, [pc, #96]	@ (8005888 <HAL_DMA_IRQHandler+0x42c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d009      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a17      	ldr	r2, [pc, #92]	@ (800588c <HAL_DMA_IRQHandler+0x430>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d004      	beq.n	800583e <HAL_DMA_IRQHandler+0x3e2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a15      	ldr	r2, [pc, #84]	@ (8005890 <HAL_DMA_IRQHandler+0x434>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d12a      	bne.n	8005894 <HAL_DMA_IRQHandler+0x438>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	e023      	b.n	800589c <HAL_DMA_IRQHandler+0x440>
 8005854:	40020010 	.word	0x40020010
 8005858:	40020028 	.word	0x40020028
 800585c:	40020040 	.word	0x40020040
 8005860:	40020058 	.word	0x40020058
 8005864:	40020070 	.word	0x40020070
 8005868:	40020088 	.word	0x40020088
 800586c:	400200a0 	.word	0x400200a0
 8005870:	400200b8 	.word	0x400200b8
 8005874:	40020410 	.word	0x40020410
 8005878:	40020428 	.word	0x40020428
 800587c:	40020440 	.word	0x40020440
 8005880:	40020458 	.word	0x40020458
 8005884:	40020470 	.word	0x40020470
 8005888:	40020488 	.word	0x40020488
 800588c:	400204a0 	.word	0x400204a0
 8005890:	400204b8 	.word	0x400204b8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	2204      	movs	r2, #4
 80058aa:	409a      	lsls	r2, r3
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b4:	f043 0204 	orr.w	r2, r3, #4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2210      	movs	r2, #16
 80058c6:	409a      	lsls	r2, r3
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80a6 	beq.w	8005a1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a85      	ldr	r2, [pc, #532]	@ (8005aec <HAL_DMA_IRQHandler+0x690>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d04a      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a83      	ldr	r2, [pc, #524]	@ (8005af0 <HAL_DMA_IRQHandler+0x694>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d045      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a82      	ldr	r2, [pc, #520]	@ (8005af4 <HAL_DMA_IRQHandler+0x698>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d040      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a80      	ldr	r2, [pc, #512]	@ (8005af8 <HAL_DMA_IRQHandler+0x69c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d03b      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a7f      	ldr	r2, [pc, #508]	@ (8005afc <HAL_DMA_IRQHandler+0x6a0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d036      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a7d      	ldr	r2, [pc, #500]	@ (8005b00 <HAL_DMA_IRQHandler+0x6a4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d031      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a7c      	ldr	r2, [pc, #496]	@ (8005b04 <HAL_DMA_IRQHandler+0x6a8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d02c      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a7a      	ldr	r2, [pc, #488]	@ (8005b08 <HAL_DMA_IRQHandler+0x6ac>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d027      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a79      	ldr	r2, [pc, #484]	@ (8005b0c <HAL_DMA_IRQHandler+0x6b0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d022      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a77      	ldr	r2, [pc, #476]	@ (8005b10 <HAL_DMA_IRQHandler+0x6b4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01d      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a76      	ldr	r2, [pc, #472]	@ (8005b14 <HAL_DMA_IRQHandler+0x6b8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d018      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a74      	ldr	r2, [pc, #464]	@ (8005b18 <HAL_DMA_IRQHandler+0x6bc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d013      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a73      	ldr	r2, [pc, #460]	@ (8005b1c <HAL_DMA_IRQHandler+0x6c0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a71      	ldr	r2, [pc, #452]	@ (8005b20 <HAL_DMA_IRQHandler+0x6c4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a70      	ldr	r2, [pc, #448]	@ (8005b24 <HAL_DMA_IRQHandler+0x6c8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_DMA_IRQHandler+0x516>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a6e      	ldr	r2, [pc, #440]	@ (8005b28 <HAL_DMA_IRQHandler+0x6cc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10a      	bne.n	8005988 <HAL_DMA_IRQHandler+0x52c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	e009      	b.n	800599c <HAL_DMA_IRQHandler+0x540>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	bf14      	ite	ne
 8005996:	2301      	movne	r3, #1
 8005998:	2300      	moveq	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d03e      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2210      	movs	r2, #16
 80059aa:	409a      	lsls	r2, r3
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d018      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d108      	bne.n	80059de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d024      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	4798      	blx	r3
 80059dc:	e01f      	b.n	8005a1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01b      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	4798      	blx	r3
 80059ee:	e016      	b.n	8005a1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d107      	bne.n	8005a0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0208 	bic.w	r2, r2, #8
 8005a0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2220      	movs	r2, #32
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8110 	beq.w	8005c54 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2c      	ldr	r2, [pc, #176]	@ (8005aec <HAL_DMA_IRQHandler+0x690>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d04a      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2b      	ldr	r2, [pc, #172]	@ (8005af0 <HAL_DMA_IRQHandler+0x694>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d045      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a29      	ldr	r2, [pc, #164]	@ (8005af4 <HAL_DMA_IRQHandler+0x698>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d040      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a28      	ldr	r2, [pc, #160]	@ (8005af8 <HAL_DMA_IRQHandler+0x69c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d03b      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a26      	ldr	r2, [pc, #152]	@ (8005afc <HAL_DMA_IRQHandler+0x6a0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d036      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a25      	ldr	r2, [pc, #148]	@ (8005b00 <HAL_DMA_IRQHandler+0x6a4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d031      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a23      	ldr	r2, [pc, #140]	@ (8005b04 <HAL_DMA_IRQHandler+0x6a8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d02c      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a22      	ldr	r2, [pc, #136]	@ (8005b08 <HAL_DMA_IRQHandler+0x6ac>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d027      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a20      	ldr	r2, [pc, #128]	@ (8005b0c <HAL_DMA_IRQHandler+0x6b0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d022      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1f      	ldr	r2, [pc, #124]	@ (8005b10 <HAL_DMA_IRQHandler+0x6b4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d01d      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005b14 <HAL_DMA_IRQHandler+0x6b8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b18 <HAL_DMA_IRQHandler+0x6bc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8005b1c <HAL_DMA_IRQHandler+0x6c0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a19      	ldr	r2, [pc, #100]	@ (8005b20 <HAL_DMA_IRQHandler+0x6c4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a17      	ldr	r2, [pc, #92]	@ (8005b24 <HAL_DMA_IRQHandler+0x6c8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x678>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a16      	ldr	r2, [pc, #88]	@ (8005b28 <HAL_DMA_IRQHandler+0x6cc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d12b      	bne.n	8005b2c <HAL_DMA_IRQHandler+0x6d0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e02a      	b.n	8005b40 <HAL_DMA_IRQHandler+0x6e4>
 8005aea:	bf00      	nop
 8005aec:	40020010 	.word	0x40020010
 8005af0:	40020028 	.word	0x40020028
 8005af4:	40020040 	.word	0x40020040
 8005af8:	40020058 	.word	0x40020058
 8005afc:	40020070 	.word	0x40020070
 8005b00:	40020088 	.word	0x40020088
 8005b04:	400200a0 	.word	0x400200a0
 8005b08:	400200b8 	.word	0x400200b8
 8005b0c:	40020410 	.word	0x40020410
 8005b10:	40020428 	.word	0x40020428
 8005b14:	40020440 	.word	0x40020440
 8005b18:	40020458 	.word	0x40020458
 8005b1c:	40020470 	.word	0x40020470
 8005b20:	40020488 	.word	0x40020488
 8005b24:	400204a0 	.word	0x400204a0
 8005b28:	400204b8 	.word	0x400204b8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf14      	ite	ne
 8005b3a:	2301      	movne	r3, #1
 8005b3c:	2300      	moveq	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8087 	beq.w	8005c54 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2220      	movs	r2, #32
 8005b50:	409a      	lsls	r2, r3
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d139      	bne.n	8005bd6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0216 	bic.w	r2, r2, #22
 8005b70:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b80:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_DMA_IRQHandler+0x736>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0208 	bic.w	r2, r2, #8
 8005ba0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	223f      	movs	r2, #63	@ 0x3f
 8005bac:	409a      	lsls	r2, r3
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8382 	beq.w	80062d0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
          }
          return;
 8005bd4:	e37c      	b.n	80062d0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d018      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d108      	bne.n	8005c04 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d02c      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
 8005c02:	e027      	b.n	8005c54 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d023      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
 8005c14:	e01e      	b.n	8005c54 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10f      	bne.n	8005c44 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0210 	bic.w	r2, r2, #16
 8005c32:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 833e 	beq.w	80062da <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8088 	beq.w	8005d7c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a89      	ldr	r2, [pc, #548]	@ (8005ea0 <HAL_DMA_IRQHandler+0xa44>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d04a      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a88      	ldr	r2, [pc, #544]	@ (8005ea4 <HAL_DMA_IRQHandler+0xa48>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d045      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a86      	ldr	r2, [pc, #536]	@ (8005ea8 <HAL_DMA_IRQHandler+0xa4c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d040      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a85      	ldr	r2, [pc, #532]	@ (8005eac <HAL_DMA_IRQHandler+0xa50>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d03b      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a83      	ldr	r2, [pc, #524]	@ (8005eb0 <HAL_DMA_IRQHandler+0xa54>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d036      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a82      	ldr	r2, [pc, #520]	@ (8005eb4 <HAL_DMA_IRQHandler+0xa58>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d031      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a80      	ldr	r2, [pc, #512]	@ (8005eb8 <HAL_DMA_IRQHandler+0xa5c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d02c      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a7f      	ldr	r2, [pc, #508]	@ (8005ebc <HAL_DMA_IRQHandler+0xa60>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d027      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ec0 <HAL_DMA_IRQHandler+0xa64>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d022      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ec4 <HAL_DMA_IRQHandler+0xa68>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d01d      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a7a      	ldr	r2, [pc, #488]	@ (8005ec8 <HAL_DMA_IRQHandler+0xa6c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d018      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a79      	ldr	r2, [pc, #484]	@ (8005ecc <HAL_DMA_IRQHandler+0xa70>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a77      	ldr	r2, [pc, #476]	@ (8005ed0 <HAL_DMA_IRQHandler+0xa74>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a76      	ldr	r2, [pc, #472]	@ (8005ed4 <HAL_DMA_IRQHandler+0xa78>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d009      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a74      	ldr	r2, [pc, #464]	@ (8005ed8 <HAL_DMA_IRQHandler+0xa7c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x8b8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a73      	ldr	r2, [pc, #460]	@ (8005edc <HAL_DMA_IRQHandler+0xa80>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d108      	bne.n	8005d26 <HAL_DMA_IRQHandler+0x8ca>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e007      	b.n	8005d36 <HAL_DMA_IRQHandler+0x8da>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d307      	bcc.n	8005d52 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f2      	bne.n	8005d36 <HAL_DMA_IRQHandler+0x8da>
 8005d50:	e000      	b.n	8005d54 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d52:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2203      	movs	r2, #3
 8005d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005d6a:	e003      	b.n	8005d74 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 82aa 	beq.w	80062da <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
 8005d8e:	e2a4      	b.n	80062da <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a52      	ldr	r2, [pc, #328]	@ (8005ee0 <HAL_DMA_IRQHandler+0xa84>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d04a      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a51      	ldr	r2, [pc, #324]	@ (8005ee4 <HAL_DMA_IRQHandler+0xa88>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d045      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a4f      	ldr	r2, [pc, #316]	@ (8005ee8 <HAL_DMA_IRQHandler+0xa8c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d040      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a4e      	ldr	r2, [pc, #312]	@ (8005eec <HAL_DMA_IRQHandler+0xa90>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d03b      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8005ef0 <HAL_DMA_IRQHandler+0xa94>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d036      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a4b      	ldr	r2, [pc, #300]	@ (8005ef4 <HAL_DMA_IRQHandler+0xa98>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d031      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a49      	ldr	r2, [pc, #292]	@ (8005ef8 <HAL_DMA_IRQHandler+0xa9c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d02c      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a48      	ldr	r2, [pc, #288]	@ (8005efc <HAL_DMA_IRQHandler+0xaa0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d027      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a46      	ldr	r2, [pc, #280]	@ (8005f00 <HAL_DMA_IRQHandler+0xaa4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d022      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a45      	ldr	r2, [pc, #276]	@ (8005f04 <HAL_DMA_IRQHandler+0xaa8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d01d      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a43      	ldr	r2, [pc, #268]	@ (8005f08 <HAL_DMA_IRQHandler+0xaac>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d018      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a42      	ldr	r2, [pc, #264]	@ (8005f0c <HAL_DMA_IRQHandler+0xab0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a40      	ldr	r2, [pc, #256]	@ (8005f10 <HAL_DMA_IRQHandler+0xab4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00e      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a3f      	ldr	r2, [pc, #252]	@ (8005f14 <HAL_DMA_IRQHandler+0xab8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d009      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a3d      	ldr	r2, [pc, #244]	@ (8005f18 <HAL_DMA_IRQHandler+0xabc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x9d4>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a3c      	ldr	r2, [pc, #240]	@ (8005f1c <HAL_DMA_IRQHandler+0xac0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d101      	bne.n	8005e34 <HAL_DMA_IRQHandler+0x9d8>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <HAL_DMA_IRQHandler+0x9da>
 8005e34:	2300      	movs	r3, #0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 824f 	beq.w	80062da <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80dd 	beq.w	8006014 <HAL_DMA_IRQHandler+0xbb8>
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 80d7 	beq.w	8006014 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	2204      	movs	r2, #4
 8005e70:	409a      	lsls	r2, r3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d059      	beq.n	8005f34 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d14a      	bne.n	8005f20 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 8220 	beq.w	80062d4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e9c:	e21a      	b.n	80062d4 <HAL_DMA_IRQHandler+0xe78>
 8005e9e:	bf00      	nop
 8005ea0:	40020010 	.word	0x40020010
 8005ea4:	40020028 	.word	0x40020028
 8005ea8:	40020040 	.word	0x40020040
 8005eac:	40020058 	.word	0x40020058
 8005eb0:	40020070 	.word	0x40020070
 8005eb4:	40020088 	.word	0x40020088
 8005eb8:	400200a0 	.word	0x400200a0
 8005ebc:	400200b8 	.word	0x400200b8
 8005ec0:	40020410 	.word	0x40020410
 8005ec4:	40020428 	.word	0x40020428
 8005ec8:	40020440 	.word	0x40020440
 8005ecc:	40020458 	.word	0x40020458
 8005ed0:	40020470 	.word	0x40020470
 8005ed4:	40020488 	.word	0x40020488
 8005ed8:	400204a0 	.word	0x400204a0
 8005edc:	400204b8 	.word	0x400204b8
 8005ee0:	48022c08 	.word	0x48022c08
 8005ee4:	48022c1c 	.word	0x48022c1c
 8005ee8:	48022c30 	.word	0x48022c30
 8005eec:	48022c44 	.word	0x48022c44
 8005ef0:	48022c58 	.word	0x48022c58
 8005ef4:	48022c6c 	.word	0x48022c6c
 8005ef8:	48022c80 	.word	0x48022c80
 8005efc:	48022c94 	.word	0x48022c94
 8005f00:	58025408 	.word	0x58025408
 8005f04:	5802541c 	.word	0x5802541c
 8005f08:	58025430 	.word	0x58025430
 8005f0c:	58025444 	.word	0x58025444
 8005f10:	58025458 	.word	0x58025458
 8005f14:	5802546c 	.word	0x5802546c
 8005f18:	58025480 	.word	0x58025480
 8005f1c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 81d5 	beq.w	80062d4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f32:	e1cf      	b.n	80062d4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d160      	bne.n	8006000 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a7f      	ldr	r2, [pc, #508]	@ (8006140 <HAL_DMA_IRQHandler+0xce4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d04a      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a7d      	ldr	r2, [pc, #500]	@ (8006144 <HAL_DMA_IRQHandler+0xce8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d045      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a7c      	ldr	r2, [pc, #496]	@ (8006148 <HAL_DMA_IRQHandler+0xcec>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d040      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a7a      	ldr	r2, [pc, #488]	@ (800614c <HAL_DMA_IRQHandler+0xcf0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d03b      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a79      	ldr	r2, [pc, #484]	@ (8006150 <HAL_DMA_IRQHandler+0xcf4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d036      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a77      	ldr	r2, [pc, #476]	@ (8006154 <HAL_DMA_IRQHandler+0xcf8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a76      	ldr	r2, [pc, #472]	@ (8006158 <HAL_DMA_IRQHandler+0xcfc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d02c      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a74      	ldr	r2, [pc, #464]	@ (800615c <HAL_DMA_IRQHandler+0xd00>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d027      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a73      	ldr	r2, [pc, #460]	@ (8006160 <HAL_DMA_IRQHandler+0xd04>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d022      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a71      	ldr	r2, [pc, #452]	@ (8006164 <HAL_DMA_IRQHandler+0xd08>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a70      	ldr	r2, [pc, #448]	@ (8006168 <HAL_DMA_IRQHandler+0xd0c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d018      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a6e      	ldr	r2, [pc, #440]	@ (800616c <HAL_DMA_IRQHandler+0xd10>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a6d      	ldr	r2, [pc, #436]	@ (8006170 <HAL_DMA_IRQHandler+0xd14>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a6b      	ldr	r2, [pc, #428]	@ (8006174 <HAL_DMA_IRQHandler+0xd18>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a6a      	ldr	r2, [pc, #424]	@ (8006178 <HAL_DMA_IRQHandler+0xd1c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_DMA_IRQHandler+0xb82>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a68      	ldr	r2, [pc, #416]	@ (800617c <HAL_DMA_IRQHandler+0xd20>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <HAL_DMA_IRQHandler+0xb94>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0208 	bic.w	r2, r2, #8
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e007      	b.n	8006000 <HAL_DMA_IRQHandler+0xba4>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0204 	bic.w	r2, r2, #4
 8005ffe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8165 	beq.w	80062d4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006012:	e15f      	b.n	80062d4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	2202      	movs	r2, #2
 800601e:	409a      	lsls	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80c5 	beq.w	80061b4 <HAL_DMA_IRQHandler+0xd58>
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 80bf 	beq.w	80061b4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	2202      	movs	r2, #2
 8006040:	409a      	lsls	r2, r3
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d018      	beq.n	8006082 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 813a 	beq.w	80062d8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800606c:	e134      	b.n	80062d8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8130 	beq.w	80062d8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006080:	e12a      	b.n	80062d8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	f040 8089 	bne.w	80061a0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2b      	ldr	r2, [pc, #172]	@ (8006140 <HAL_DMA_IRQHandler+0xce4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a29      	ldr	r2, [pc, #164]	@ (8006144 <HAL_DMA_IRQHandler+0xce8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a28      	ldr	r2, [pc, #160]	@ (8006148 <HAL_DMA_IRQHandler+0xcec>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a26      	ldr	r2, [pc, #152]	@ (800614c <HAL_DMA_IRQHandler+0xcf0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a25      	ldr	r2, [pc, #148]	@ (8006150 <HAL_DMA_IRQHandler+0xcf4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a23      	ldr	r2, [pc, #140]	@ (8006154 <HAL_DMA_IRQHandler+0xcf8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a22      	ldr	r2, [pc, #136]	@ (8006158 <HAL_DMA_IRQHandler+0xcfc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a20      	ldr	r2, [pc, #128]	@ (800615c <HAL_DMA_IRQHandler+0xd00>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006160 <HAL_DMA_IRQHandler+0xd04>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006164 <HAL_DMA_IRQHandler+0xd08>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006168 <HAL_DMA_IRQHandler+0xd0c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1a      	ldr	r2, [pc, #104]	@ (800616c <HAL_DMA_IRQHandler+0xd10>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <HAL_DMA_IRQHandler+0xd14>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a17      	ldr	r2, [pc, #92]	@ (8006174 <HAL_DMA_IRQHandler+0xd18>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a16      	ldr	r2, [pc, #88]	@ (8006178 <HAL_DMA_IRQHandler+0xd1c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_IRQHandler+0xcd2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a14      	ldr	r2, [pc, #80]	@ (800617c <HAL_DMA_IRQHandler+0xd20>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d128      	bne.n	8006180 <HAL_DMA_IRQHandler+0xd24>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0214 	bic.w	r2, r2, #20
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e027      	b.n	8006190 <HAL_DMA_IRQHandler+0xd34>
 8006140:	40020010 	.word	0x40020010
 8006144:	40020028 	.word	0x40020028
 8006148:	40020040 	.word	0x40020040
 800614c:	40020058 	.word	0x40020058
 8006150:	40020070 	.word	0x40020070
 8006154:	40020088 	.word	0x40020088
 8006158:	400200a0 	.word	0x400200a0
 800615c:	400200b8 	.word	0x400200b8
 8006160:	40020410 	.word	0x40020410
 8006164:	40020428 	.word	0x40020428
 8006168:	40020440 	.word	0x40020440
 800616c:	40020458 	.word	0x40020458
 8006170:	40020470 	.word	0x40020470
 8006174:	40020488 	.word	0x40020488
 8006178:	400204a0 	.word	0x400204a0
 800617c:	400204b8 	.word	0x400204b8
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 020a 	bic.w	r2, r2, #10
 800618e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8097 	beq.w	80062d8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b2:	e091      	b.n	80062d8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2208      	movs	r2, #8
 80061be:	409a      	lsls	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	4013      	ands	r3, r2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8088 	beq.w	80062da <HAL_DMA_IRQHandler+0xe7e>
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8082 	beq.w	80062da <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a41      	ldr	r2, [pc, #260]	@ (80062e0 <HAL_DMA_IRQHandler+0xe84>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d04a      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a3f      	ldr	r2, [pc, #252]	@ (80062e4 <HAL_DMA_IRQHandler+0xe88>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d045      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a3e      	ldr	r2, [pc, #248]	@ (80062e8 <HAL_DMA_IRQHandler+0xe8c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d040      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a3c      	ldr	r2, [pc, #240]	@ (80062ec <HAL_DMA_IRQHandler+0xe90>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d03b      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a3b      	ldr	r2, [pc, #236]	@ (80062f0 <HAL_DMA_IRQHandler+0xe94>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d036      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a39      	ldr	r2, [pc, #228]	@ (80062f4 <HAL_DMA_IRQHandler+0xe98>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d031      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a38      	ldr	r2, [pc, #224]	@ (80062f8 <HAL_DMA_IRQHandler+0xe9c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d02c      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a36      	ldr	r2, [pc, #216]	@ (80062fc <HAL_DMA_IRQHandler+0xea0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d027      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a35      	ldr	r2, [pc, #212]	@ (8006300 <HAL_DMA_IRQHandler+0xea4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d022      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a33      	ldr	r2, [pc, #204]	@ (8006304 <HAL_DMA_IRQHandler+0xea8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01d      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a32      	ldr	r2, [pc, #200]	@ (8006308 <HAL_DMA_IRQHandler+0xeac>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d018      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a30      	ldr	r2, [pc, #192]	@ (800630c <HAL_DMA_IRQHandler+0xeb0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2f      	ldr	r2, [pc, #188]	@ (8006310 <HAL_DMA_IRQHandler+0xeb4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2d      	ldr	r2, [pc, #180]	@ (8006314 <HAL_DMA_IRQHandler+0xeb8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2c      	ldr	r2, [pc, #176]	@ (8006318 <HAL_DMA_IRQHandler+0xebc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_DMA_IRQHandler+0xe1a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2a      	ldr	r2, [pc, #168]	@ (800631c <HAL_DMA_IRQHandler+0xec0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d108      	bne.n	8006288 <HAL_DMA_IRQHandler+0xe2c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 021c 	bic.w	r2, r2, #28
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e007      	b.n	8006298 <HAL_DMA_IRQHandler+0xe3c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 020e 	bic.w	r2, r2, #14
 8006296:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2201      	movs	r2, #1
 80062a2:	409a      	lsls	r2, r3
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
 80062ce:	e004      	b.n	80062da <HAL_DMA_IRQHandler+0xe7e>
          return;
 80062d0:	bf00      	nop
 80062d2:	e002      	b.n	80062da <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062d4:	bf00      	nop
 80062d6:	e000      	b.n	80062da <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80062da:	3728      	adds	r7, #40	@ 0x28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40020010 	.word	0x40020010
 80062e4:	40020028 	.word	0x40020028
 80062e8:	40020040 	.word	0x40020040
 80062ec:	40020058 	.word	0x40020058
 80062f0:	40020070 	.word	0x40020070
 80062f4:	40020088 	.word	0x40020088
 80062f8:	400200a0 	.word	0x400200a0
 80062fc:	400200b8 	.word	0x400200b8
 8006300:	40020410 	.word	0x40020410
 8006304:	40020428 	.word	0x40020428
 8006308:	40020440 	.word	0x40020440
 800630c:	40020458 	.word	0x40020458
 8006310:	40020470 	.word	0x40020470
 8006314:	40020488 	.word	0x40020488
 8006318:	400204a0 	.word	0x400204a0
 800631c:	400204b8 	.word	0x400204b8

08006320 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006332:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006338:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7f      	ldr	r2, [pc, #508]	@ (800653c <DMA_SetConfig+0x21c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d072      	beq.n	800642a <DMA_SetConfig+0x10a>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a7d      	ldr	r2, [pc, #500]	@ (8006540 <DMA_SetConfig+0x220>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d06d      	beq.n	800642a <DMA_SetConfig+0x10a>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a7c      	ldr	r2, [pc, #496]	@ (8006544 <DMA_SetConfig+0x224>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d068      	beq.n	800642a <DMA_SetConfig+0x10a>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a7a      	ldr	r2, [pc, #488]	@ (8006548 <DMA_SetConfig+0x228>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d063      	beq.n	800642a <DMA_SetConfig+0x10a>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a79      	ldr	r2, [pc, #484]	@ (800654c <DMA_SetConfig+0x22c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d05e      	beq.n	800642a <DMA_SetConfig+0x10a>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a77      	ldr	r2, [pc, #476]	@ (8006550 <DMA_SetConfig+0x230>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d059      	beq.n	800642a <DMA_SetConfig+0x10a>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a76      	ldr	r2, [pc, #472]	@ (8006554 <DMA_SetConfig+0x234>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d054      	beq.n	800642a <DMA_SetConfig+0x10a>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a74      	ldr	r2, [pc, #464]	@ (8006558 <DMA_SetConfig+0x238>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d04f      	beq.n	800642a <DMA_SetConfig+0x10a>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a73      	ldr	r2, [pc, #460]	@ (800655c <DMA_SetConfig+0x23c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d04a      	beq.n	800642a <DMA_SetConfig+0x10a>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a71      	ldr	r2, [pc, #452]	@ (8006560 <DMA_SetConfig+0x240>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d045      	beq.n	800642a <DMA_SetConfig+0x10a>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a70      	ldr	r2, [pc, #448]	@ (8006564 <DMA_SetConfig+0x244>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d040      	beq.n	800642a <DMA_SetConfig+0x10a>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006568 <DMA_SetConfig+0x248>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d03b      	beq.n	800642a <DMA_SetConfig+0x10a>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a6d      	ldr	r2, [pc, #436]	@ (800656c <DMA_SetConfig+0x24c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d036      	beq.n	800642a <DMA_SetConfig+0x10a>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a6b      	ldr	r2, [pc, #428]	@ (8006570 <DMA_SetConfig+0x250>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d031      	beq.n	800642a <DMA_SetConfig+0x10a>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a6a      	ldr	r2, [pc, #424]	@ (8006574 <DMA_SetConfig+0x254>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d02c      	beq.n	800642a <DMA_SetConfig+0x10a>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a68      	ldr	r2, [pc, #416]	@ (8006578 <DMA_SetConfig+0x258>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d027      	beq.n	800642a <DMA_SetConfig+0x10a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a67      	ldr	r2, [pc, #412]	@ (800657c <DMA_SetConfig+0x25c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d022      	beq.n	800642a <DMA_SetConfig+0x10a>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a65      	ldr	r2, [pc, #404]	@ (8006580 <DMA_SetConfig+0x260>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01d      	beq.n	800642a <DMA_SetConfig+0x10a>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a64      	ldr	r2, [pc, #400]	@ (8006584 <DMA_SetConfig+0x264>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d018      	beq.n	800642a <DMA_SetConfig+0x10a>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a62      	ldr	r2, [pc, #392]	@ (8006588 <DMA_SetConfig+0x268>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <DMA_SetConfig+0x10a>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a61      	ldr	r2, [pc, #388]	@ (800658c <DMA_SetConfig+0x26c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <DMA_SetConfig+0x10a>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a5f      	ldr	r2, [pc, #380]	@ (8006590 <DMA_SetConfig+0x270>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <DMA_SetConfig+0x10a>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a5e      	ldr	r2, [pc, #376]	@ (8006594 <DMA_SetConfig+0x274>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <DMA_SetConfig+0x10a>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a5c      	ldr	r2, [pc, #368]	@ (8006598 <DMA_SetConfig+0x278>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d101      	bne.n	800642e <DMA_SetConfig+0x10e>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <DMA_SetConfig+0x110>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00d      	beq.n	8006450 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800643c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d004      	beq.n	8006450 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800644e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a39      	ldr	r2, [pc, #228]	@ (800653c <DMA_SetConfig+0x21c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d04a      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a38      	ldr	r2, [pc, #224]	@ (8006540 <DMA_SetConfig+0x220>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d045      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a36      	ldr	r2, [pc, #216]	@ (8006544 <DMA_SetConfig+0x224>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d040      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a35      	ldr	r2, [pc, #212]	@ (8006548 <DMA_SetConfig+0x228>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d03b      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a33      	ldr	r2, [pc, #204]	@ (800654c <DMA_SetConfig+0x22c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d036      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a32      	ldr	r2, [pc, #200]	@ (8006550 <DMA_SetConfig+0x230>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d031      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a30      	ldr	r2, [pc, #192]	@ (8006554 <DMA_SetConfig+0x234>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d02c      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2f      	ldr	r2, [pc, #188]	@ (8006558 <DMA_SetConfig+0x238>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d027      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2d      	ldr	r2, [pc, #180]	@ (800655c <DMA_SetConfig+0x23c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d022      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006560 <DMA_SetConfig+0x240>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d01d      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006564 <DMA_SetConfig+0x244>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d018      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a29      	ldr	r2, [pc, #164]	@ (8006568 <DMA_SetConfig+0x248>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d013      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a27      	ldr	r2, [pc, #156]	@ (800656c <DMA_SetConfig+0x24c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a26      	ldr	r2, [pc, #152]	@ (8006570 <DMA_SetConfig+0x250>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a24      	ldr	r2, [pc, #144]	@ (8006574 <DMA_SetConfig+0x254>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <DMA_SetConfig+0x1d0>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a23      	ldr	r2, [pc, #140]	@ (8006578 <DMA_SetConfig+0x258>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d101      	bne.n	80064f4 <DMA_SetConfig+0x1d4>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <DMA_SetConfig+0x1d6>
 80064f4:	2300      	movs	r3, #0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d059      	beq.n	80065ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	223f      	movs	r2, #63	@ 0x3f
 8006504:	409a      	lsls	r2, r3
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006518:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b40      	cmp	r3, #64	@ 0x40
 8006528:	d138      	bne.n	800659c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800653a:	e0ae      	b.n	800669a <DMA_SetConfig+0x37a>
 800653c:	40020010 	.word	0x40020010
 8006540:	40020028 	.word	0x40020028
 8006544:	40020040 	.word	0x40020040
 8006548:	40020058 	.word	0x40020058
 800654c:	40020070 	.word	0x40020070
 8006550:	40020088 	.word	0x40020088
 8006554:	400200a0 	.word	0x400200a0
 8006558:	400200b8 	.word	0x400200b8
 800655c:	40020410 	.word	0x40020410
 8006560:	40020428 	.word	0x40020428
 8006564:	40020440 	.word	0x40020440
 8006568:	40020458 	.word	0x40020458
 800656c:	40020470 	.word	0x40020470
 8006570:	40020488 	.word	0x40020488
 8006574:	400204a0 	.word	0x400204a0
 8006578:	400204b8 	.word	0x400204b8
 800657c:	58025408 	.word	0x58025408
 8006580:	5802541c 	.word	0x5802541c
 8006584:	58025430 	.word	0x58025430
 8006588:	58025444 	.word	0x58025444
 800658c:	58025458 	.word	0x58025458
 8006590:	5802546c 	.word	0x5802546c
 8006594:	58025480 	.word	0x58025480
 8006598:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	60da      	str	r2, [r3, #12]
}
 80065ac:	e075      	b.n	800669a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a3d      	ldr	r2, [pc, #244]	@ (80066a8 <DMA_SetConfig+0x388>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d04a      	beq.n	800664e <DMA_SetConfig+0x32e>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a3b      	ldr	r2, [pc, #236]	@ (80066ac <DMA_SetConfig+0x38c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d045      	beq.n	800664e <DMA_SetConfig+0x32e>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a3a      	ldr	r2, [pc, #232]	@ (80066b0 <DMA_SetConfig+0x390>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d040      	beq.n	800664e <DMA_SetConfig+0x32e>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a38      	ldr	r2, [pc, #224]	@ (80066b4 <DMA_SetConfig+0x394>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d03b      	beq.n	800664e <DMA_SetConfig+0x32e>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a37      	ldr	r2, [pc, #220]	@ (80066b8 <DMA_SetConfig+0x398>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d036      	beq.n	800664e <DMA_SetConfig+0x32e>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a35      	ldr	r2, [pc, #212]	@ (80066bc <DMA_SetConfig+0x39c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d031      	beq.n	800664e <DMA_SetConfig+0x32e>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a34      	ldr	r2, [pc, #208]	@ (80066c0 <DMA_SetConfig+0x3a0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d02c      	beq.n	800664e <DMA_SetConfig+0x32e>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a32      	ldr	r2, [pc, #200]	@ (80066c4 <DMA_SetConfig+0x3a4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d027      	beq.n	800664e <DMA_SetConfig+0x32e>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a31      	ldr	r2, [pc, #196]	@ (80066c8 <DMA_SetConfig+0x3a8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d022      	beq.n	800664e <DMA_SetConfig+0x32e>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a2f      	ldr	r2, [pc, #188]	@ (80066cc <DMA_SetConfig+0x3ac>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01d      	beq.n	800664e <DMA_SetConfig+0x32e>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a2e      	ldr	r2, [pc, #184]	@ (80066d0 <DMA_SetConfig+0x3b0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d018      	beq.n	800664e <DMA_SetConfig+0x32e>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a2c      	ldr	r2, [pc, #176]	@ (80066d4 <DMA_SetConfig+0x3b4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <DMA_SetConfig+0x32e>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a2b      	ldr	r2, [pc, #172]	@ (80066d8 <DMA_SetConfig+0x3b8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00e      	beq.n	800664e <DMA_SetConfig+0x32e>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a29      	ldr	r2, [pc, #164]	@ (80066dc <DMA_SetConfig+0x3bc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d009      	beq.n	800664e <DMA_SetConfig+0x32e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a28      	ldr	r2, [pc, #160]	@ (80066e0 <DMA_SetConfig+0x3c0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d004      	beq.n	800664e <DMA_SetConfig+0x32e>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a26      	ldr	r2, [pc, #152]	@ (80066e4 <DMA_SetConfig+0x3c4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d101      	bne.n	8006652 <DMA_SetConfig+0x332>
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <DMA_SetConfig+0x334>
 8006652:	2300      	movs	r3, #0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d020      	beq.n	800669a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2201      	movs	r2, #1
 8006662:	409a      	lsls	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b40      	cmp	r3, #64	@ 0x40
 8006676:	d108      	bne.n	800668a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	60da      	str	r2, [r3, #12]
}
 8006688:	e007      	b.n	800669a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	60da      	str	r2, [r3, #12]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	48022c08 	.word	0x48022c08
 80066ac:	48022c1c 	.word	0x48022c1c
 80066b0:	48022c30 	.word	0x48022c30
 80066b4:	48022c44 	.word	0x48022c44
 80066b8:	48022c58 	.word	0x48022c58
 80066bc:	48022c6c 	.word	0x48022c6c
 80066c0:	48022c80 	.word	0x48022c80
 80066c4:	48022c94 	.word	0x48022c94
 80066c8:	58025408 	.word	0x58025408
 80066cc:	5802541c 	.word	0x5802541c
 80066d0:	58025430 	.word	0x58025430
 80066d4:	58025444 	.word	0x58025444
 80066d8:	58025458 	.word	0x58025458
 80066dc:	5802546c 	.word	0x5802546c
 80066e0:	58025480 	.word	0x58025480
 80066e4:	58025494 	.word	0x58025494

080066e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a42      	ldr	r2, [pc, #264]	@ (8006800 <DMA_CalcBaseAndBitshift+0x118>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d04a      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a41      	ldr	r2, [pc, #260]	@ (8006804 <DMA_CalcBaseAndBitshift+0x11c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d045      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a3f      	ldr	r2, [pc, #252]	@ (8006808 <DMA_CalcBaseAndBitshift+0x120>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d040      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a3e      	ldr	r2, [pc, #248]	@ (800680c <DMA_CalcBaseAndBitshift+0x124>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d03b      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a3c      	ldr	r2, [pc, #240]	@ (8006810 <DMA_CalcBaseAndBitshift+0x128>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d036      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a3b      	ldr	r2, [pc, #236]	@ (8006814 <DMA_CalcBaseAndBitshift+0x12c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d031      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a39      	ldr	r2, [pc, #228]	@ (8006818 <DMA_CalcBaseAndBitshift+0x130>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d02c      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a38      	ldr	r2, [pc, #224]	@ (800681c <DMA_CalcBaseAndBitshift+0x134>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d027      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a36      	ldr	r2, [pc, #216]	@ (8006820 <DMA_CalcBaseAndBitshift+0x138>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d022      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a35      	ldr	r2, [pc, #212]	@ (8006824 <DMA_CalcBaseAndBitshift+0x13c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d01d      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a33      	ldr	r2, [pc, #204]	@ (8006828 <DMA_CalcBaseAndBitshift+0x140>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d018      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a32      	ldr	r2, [pc, #200]	@ (800682c <DMA_CalcBaseAndBitshift+0x144>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d013      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a30      	ldr	r2, [pc, #192]	@ (8006830 <DMA_CalcBaseAndBitshift+0x148>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00e      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a2f      	ldr	r2, [pc, #188]	@ (8006834 <DMA_CalcBaseAndBitshift+0x14c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d009      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a2d      	ldr	r2, [pc, #180]	@ (8006838 <DMA_CalcBaseAndBitshift+0x150>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d004      	beq.n	8006790 <DMA_CalcBaseAndBitshift+0xa8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a2c      	ldr	r2, [pc, #176]	@ (800683c <DMA_CalcBaseAndBitshift+0x154>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d101      	bne.n	8006794 <DMA_CalcBaseAndBitshift+0xac>
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <DMA_CalcBaseAndBitshift+0xae>
 8006794:	2300      	movs	r3, #0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d024      	beq.n	80067e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	3b10      	subs	r3, #16
 80067a2:	4a27      	ldr	r2, [pc, #156]	@ (8006840 <DMA_CalcBaseAndBitshift+0x158>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	4a24      	ldr	r2, [pc, #144]	@ (8006844 <DMA_CalcBaseAndBitshift+0x15c>)
 80067b4:	5cd3      	ldrb	r3, [r2, r3]
 80067b6:	461a      	mov	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d908      	bls.n	80067d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006848 <DMA_CalcBaseAndBitshift+0x160>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	1d1a      	adds	r2, r3, #4
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80067d2:	e00d      	b.n	80067f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	4b1b      	ldr	r3, [pc, #108]	@ (8006848 <DMA_CalcBaseAndBitshift+0x160>)
 80067dc:	4013      	ands	r3, r2
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e2:	e005      	b.n	80067f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	40020010 	.word	0x40020010
 8006804:	40020028 	.word	0x40020028
 8006808:	40020040 	.word	0x40020040
 800680c:	40020058 	.word	0x40020058
 8006810:	40020070 	.word	0x40020070
 8006814:	40020088 	.word	0x40020088
 8006818:	400200a0 	.word	0x400200a0
 800681c:	400200b8 	.word	0x400200b8
 8006820:	40020410 	.word	0x40020410
 8006824:	40020428 	.word	0x40020428
 8006828:	40020440 	.word	0x40020440
 800682c:	40020458 	.word	0x40020458
 8006830:	40020470 	.word	0x40020470
 8006834:	40020488 	.word	0x40020488
 8006838:	400204a0 	.word	0x400204a0
 800683c:	400204b8 	.word	0x400204b8
 8006840:	aaaaaaab 	.word	0xaaaaaaab
 8006844:	08013188 	.word	0x08013188
 8006848:	fffffc00 	.word	0xfffffc00

0800684c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d120      	bne.n	80068a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	2b03      	cmp	r3, #3
 8006866:	d858      	bhi.n	800691a <DMA_CheckFifoParam+0xce>
 8006868:	a201      	add	r2, pc, #4	@ (adr r2, 8006870 <DMA_CheckFifoParam+0x24>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	08006881 	.word	0x08006881
 8006874:	08006893 	.word	0x08006893
 8006878:	08006881 	.word	0x08006881
 800687c:	0800691b 	.word	0x0800691b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d048      	beq.n	800691e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006890:	e045      	b.n	800691e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800689a:	d142      	bne.n	8006922 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068a0:	e03f      	b.n	8006922 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068aa:	d123      	bne.n	80068f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d838      	bhi.n	8006926 <DMA_CheckFifoParam+0xda>
 80068b4:	a201      	add	r2, pc, #4	@ (adr r2, 80068bc <DMA_CheckFifoParam+0x70>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	080068cd 	.word	0x080068cd
 80068c0:	080068d3 	.word	0x080068d3
 80068c4:	080068cd 	.word	0x080068cd
 80068c8:	080068e5 	.word	0x080068e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	73fb      	strb	r3, [r7, #15]
        break;
 80068d0:	e030      	b.n	8006934 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d025      	beq.n	800692a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068e2:	e022      	b.n	800692a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80068ec:	d11f      	bne.n	800692e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068f2:	e01c      	b.n	800692e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d902      	bls.n	8006902 <DMA_CheckFifoParam+0xb6>
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d003      	beq.n	8006908 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006900:	e018      	b.n	8006934 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
        break;
 8006906:	e015      	b.n	8006934 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00e      	beq.n	8006932 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
    break;
 8006918:	e00b      	b.n	8006932 <DMA_CheckFifoParam+0xe6>
        break;
 800691a:	bf00      	nop
 800691c:	e00a      	b.n	8006934 <DMA_CheckFifoParam+0xe8>
        break;
 800691e:	bf00      	nop
 8006920:	e008      	b.n	8006934 <DMA_CheckFifoParam+0xe8>
        break;
 8006922:	bf00      	nop
 8006924:	e006      	b.n	8006934 <DMA_CheckFifoParam+0xe8>
        break;
 8006926:	bf00      	nop
 8006928:	e004      	b.n	8006934 <DMA_CheckFifoParam+0xe8>
        break;
 800692a:	bf00      	nop
 800692c:	e002      	b.n	8006934 <DMA_CheckFifoParam+0xe8>
        break;
 800692e:	bf00      	nop
 8006930:	e000      	b.n	8006934 <DMA_CheckFifoParam+0xe8>
    break;
 8006932:	bf00      	nop
    }
  }

  return status;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop

08006944 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a38      	ldr	r2, [pc, #224]	@ (8006a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d022      	beq.n	80069a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a36      	ldr	r2, [pc, #216]	@ (8006a3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01d      	beq.n	80069a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a35      	ldr	r2, [pc, #212]	@ (8006a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d018      	beq.n	80069a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a33      	ldr	r2, [pc, #204]	@ (8006a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d013      	beq.n	80069a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a32      	ldr	r2, [pc, #200]	@ (8006a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00e      	beq.n	80069a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a30      	ldr	r2, [pc, #192]	@ (8006a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d009      	beq.n	80069a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a2f      	ldr	r2, [pc, #188]	@ (8006a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d004      	beq.n	80069a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a2d      	ldr	r2, [pc, #180]	@ (8006a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d101      	bne.n	80069a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80069a6:	2300      	movs	r3, #0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01a      	beq.n	80069e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	3b08      	subs	r3, #8
 80069b4:	4a28      	ldr	r2, [pc, #160]	@ (8006a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80069b6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ba:	091b      	lsrs	r3, r3, #4
 80069bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4b26      	ldr	r3, [pc, #152]	@ (8006a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	461a      	mov	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a24      	ldr	r2, [pc, #144]	@ (8006a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80069d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	2201      	movs	r2, #1
 80069da:	409a      	lsls	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80069e0:	e024      	b.n	8006a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	3b10      	subs	r3, #16
 80069ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80069ec:	fba2 2303 	umull	r2, r3, r2, r3
 80069f0:	091b      	lsrs	r3, r3, #4
 80069f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d806      	bhi.n	8006a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4a1b      	ldr	r2, [pc, #108]	@ (8006a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d902      	bls.n	8006a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3308      	adds	r3, #8
 8006a08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4b18      	ldr	r3, [pc, #96]	@ (8006a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	461a      	mov	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a16      	ldr	r2, [pc, #88]	@ (8006a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006a1c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2201      	movs	r2, #1
 8006a26:	409a      	lsls	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	58025408 	.word	0x58025408
 8006a3c:	5802541c 	.word	0x5802541c
 8006a40:	58025430 	.word	0x58025430
 8006a44:	58025444 	.word	0x58025444
 8006a48:	58025458 	.word	0x58025458
 8006a4c:	5802546c 	.word	0x5802546c
 8006a50:	58025480 	.word	0x58025480
 8006a54:	58025494 	.word	0x58025494
 8006a58:	cccccccd 	.word	0xcccccccd
 8006a5c:	16009600 	.word	0x16009600
 8006a60:	58025880 	.word	0x58025880
 8006a64:	aaaaaaab 	.word	0xaaaaaaab
 8006a68:	400204b8 	.word	0x400204b8
 8006a6c:	4002040f 	.word	0x4002040f
 8006a70:	10008200 	.word	0x10008200
 8006a74:	40020880 	.word	0x40020880

08006a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d04a      	beq.n	8006b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d847      	bhi.n	8006b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a25      	ldr	r2, [pc, #148]	@ (8006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d022      	beq.n	8006ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a24      	ldr	r2, [pc, #144]	@ (8006b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d01d      	beq.n	8006ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a22      	ldr	r2, [pc, #136]	@ (8006b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d018      	beq.n	8006ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a21      	ldr	r2, [pc, #132]	@ (8006b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d013      	beq.n	8006ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8006b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1e      	ldr	r2, [pc, #120]	@ (8006b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1b      	ldr	r2, [pc, #108]	@ (8006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d101      	bne.n	8006ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4b17      	ldr	r3, [pc, #92]	@ (8006b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a15      	ldr	r2, [pc, #84]	@ (8006b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b00:	671a      	str	r2, [r3, #112]	@ 0x70
 8006b02:	e009      	b.n	8006b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4b14      	ldr	r3, [pc, #80]	@ (8006b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a11      	ldr	r2, [pc, #68]	@ (8006b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006b16:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	409a      	lsls	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	58025408 	.word	0x58025408
 8006b34:	5802541c 	.word	0x5802541c
 8006b38:	58025430 	.word	0x58025430
 8006b3c:	58025444 	.word	0x58025444
 8006b40:	58025458 	.word	0x58025458
 8006b44:	5802546c 	.word	0x5802546c
 8006b48:	58025480 	.word	0x58025480
 8006b4c:	58025494 	.word	0x58025494
 8006b50:	1600963f 	.word	0x1600963f
 8006b54:	58025940 	.word	0x58025940
 8006b58:	1000823f 	.word	0x1000823f
 8006b5c:	40020940 	.word	0x40020940

08006b60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b098      	sub	sp, #96	@ 0x60
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006b68:	4a84      	ldr	r2, [pc, #528]	@ (8006d7c <HAL_FDCAN_Init+0x21c>)
 8006b6a:	f107 030c 	add.w	r3, r7, #12
 8006b6e:	4611      	mov	r1, r2
 8006b70:	224c      	movs	r2, #76	@ 0x4c
 8006b72:	4618      	mov	r0, r3
 8006b74:	f00c f948 	bl	8012e08 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e1c6      	b.n	8006f10 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a7e      	ldr	r2, [pc, #504]	@ (8006d80 <HAL_FDCAN_Init+0x220>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d106      	bne.n	8006b9a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fb faf6 	bl	80021a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0210 	bic.w	r2, r2, #16
 8006bc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bc4:	f7fc ff36 	bl	8003a34 <HAL_GetTick>
 8006bc8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006bca:	e014      	b.n	8006bf6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006bcc:	f7fc ff32 	bl	8003a34 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b0a      	cmp	r3, #10
 8006bd8:	d90d      	bls.n	8006bf6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006be0:	f043 0201 	orr.w	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2203      	movs	r2, #3
 8006bee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e18c      	b.n	8006f10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d0e3      	beq.n	8006bcc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c14:	f7fc ff0e 	bl	8003a34 <HAL_GetTick>
 8006c18:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c1a:	e014      	b.n	8006c46 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c1c:	f7fc ff0a 	bl	8003a34 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b0a      	cmp	r3, #10
 8006c28:	d90d      	bls.n	8006c46 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c30:	f043 0201 	orr.w	r2, r3, #1
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e164      	b.n	8006f10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0e3      	beq.n	8006c1c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0202 	orr.w	r2, r2, #2
 8006c62:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	7c1b      	ldrb	r3, [r3, #16]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d108      	bne.n	8006c7e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c7a:	619a      	str	r2, [r3, #24]
 8006c7c:	e007      	b.n	8006c8e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	7c5b      	ldrb	r3, [r3, #17]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d108      	bne.n	8006ca8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699a      	ldr	r2, [r3, #24]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ca4:	619a      	str	r2, [r3, #24]
 8006ca6:	e007      	b.n	8006cb8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cb6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	7c9b      	ldrb	r3, [r3, #18]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d108      	bne.n	8006cd2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cce:	619a      	str	r2, [r3, #24]
 8006cd0:	e007      	b.n	8006ce2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ce0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006d06:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0210 	bic.w	r2, r2, #16
 8006d16:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d108      	bne.n	8006d32 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0204 	orr.w	r2, r2, #4
 8006d2e:	619a      	str	r2, [r3, #24]
 8006d30:	e030      	b.n	8006d94 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d02c      	beq.n	8006d94 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d020      	beq.n	8006d84 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d50:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0210 	orr.w	r2, r2, #16
 8006d60:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d114      	bne.n	8006d94 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699a      	ldr	r2, [r3, #24]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0220 	orr.w	r2, r2, #32
 8006d78:	619a      	str	r2, [r3, #24]
 8006d7a:	e00b      	b.n	8006d94 <HAL_FDCAN_Init+0x234>
 8006d7c:	080130e4 	.word	0x080130e4
 8006d80:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0220 	orr.w	r2, r2, #32
 8006d92:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006da4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006dac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006dbc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006dbe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc8:	d115      	bne.n	8006df6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006dd8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dde:	3b01      	subs	r3, #1
 8006de0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006de2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	3b01      	subs	r3, #1
 8006dec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006df2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006df4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e1c:	4413      	add	r3, r2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d011      	beq.n	8006e46 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006e2a:	f023 0107 	bic.w	r1, r3, #7
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	3360      	adds	r3, #96	@ 0x60
 8006e36:	443b      	add	r3, r7
 8006e38:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d011      	beq.n	8006e72 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e56:	f023 0107 	bic.w	r1, r3, #7
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	3360      	adds	r3, #96	@ 0x60
 8006e62:	443b      	add	r3, r7
 8006e64:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d012      	beq.n	8006ea0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e82:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	3360      	adds	r3, #96	@ 0x60
 8006e8e:	443b      	add	r3, r7
 8006e90:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006e94:	011a      	lsls	r2, r3, #4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d012      	beq.n	8006ece <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006eb0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	3360      	adds	r3, #96	@ 0x60
 8006ebc:	443b      	add	r3, r7
 8006ebe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a11      	ldr	r2, [pc, #68]	@ (8006f18 <HAL_FDCAN_Init+0x3b8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d107      	bne.n	8006ee8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f022 0203 	bic.w	r2, r2, #3
 8006ee6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f80b 	bl	8006f1c <FDCAN_CalcultateRamBlockAddresses>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006f0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3760      	adds	r7, #96	@ 0x60
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	4000a000 	.word	0x4000a000

08006f1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f28:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006f32:	4ba7      	ldr	r3, [pc, #668]	@ (80071d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	0091      	lsls	r1, r2, #2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f4c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f54:	041a      	lsls	r2, r3, #16
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	4413      	add	r3, r2
 8006f68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006f72:	4b97      	ldr	r3, [pc, #604]	@ (80071d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	0091      	lsls	r1, r2, #2
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f8c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f94:	041a      	lsls	r2, r3, #16
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006fb4:	4b86      	ldr	r3, [pc, #536]	@ (80071d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	0091      	lsls	r1, r2, #2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fce:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	041a      	lsls	r2, r3, #16
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006ffc:	4b74      	ldr	r3, [pc, #464]	@ (80071d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ffe:	4013      	ands	r3, r2
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	0091      	lsls	r1, r2, #2
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6812      	ldr	r2, [r2, #0]
 8007008:	430b      	orrs	r3, r1
 800700a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007016:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800701e:	041a      	lsls	r2, r3, #16
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	4413      	add	r3, r2
 800703a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007044:	4b62      	ldr	r3, [pc, #392]	@ (80071d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007046:	4013      	ands	r3, r2
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	0091      	lsls	r1, r2, #2
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	430b      	orrs	r3, r1
 8007052:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4413      	add	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007070:	4b57      	ldr	r3, [pc, #348]	@ (80071d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007072:	4013      	ands	r3, r2
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	0091      	lsls	r1, r2, #2
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6812      	ldr	r2, [r2, #0]
 800707c:	430b      	orrs	r3, r1
 800707e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800708a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007092:	041a      	lsls	r2, r3, #16
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	4413      	add	r3, r2
 80070a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80070b2:	4b47      	ldr	r3, [pc, #284]	@ (80071d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	0091      	lsls	r1, r2, #2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	430b      	orrs	r3, r1
 80070c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80070cc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d4:	041a      	lsls	r2, r3, #16
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80070e8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f0:	061a      	lsls	r2, r3, #24
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007100:	4b34      	ldr	r3, [pc, #208]	@ (80071d4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007102:	4413      	add	r3, r2
 8007104:	009a      	lsls	r2, r3, #2
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	441a      	add	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800713c:	441a      	add	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800716c:	441a      	add	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	441a      	add	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007196:	fb01 f303 	mul.w	r3, r1, r3
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	441a      	add	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80071b8:	441a      	add	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c6:	4a04      	ldr	r2, [pc, #16]	@ (80071d8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d915      	bls.n	80071f8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80071cc:	e006      	b.n	80071dc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80071ce:	bf00      	nop
 80071d0:	ffff0003 	.word	0xffff0003
 80071d4:	10002b00 	.word	0x10002b00
 80071d8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071e2:	f043 0220 	orr.w	r2, r3, #32
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2203      	movs	r2, #3
 80071f0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e010      	b.n	800721a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	e005      	b.n	800720c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3304      	adds	r3, #4
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	429a      	cmp	r2, r3
 8007216:	d3f3      	bcc.n	8007200 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop

08007228 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007228:	b480      	push	{r7}
 800722a:	b089      	sub	sp, #36	@ 0x24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007232:	2300      	movs	r3, #0
 8007234:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007236:	4b89      	ldr	r3, [pc, #548]	@ (800745c <HAL_GPIO_Init+0x234>)
 8007238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800723a:	e194      	b.n	8007566 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	2101      	movs	r1, #1
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	fa01 f303 	lsl.w	r3, r1, r3
 8007248:	4013      	ands	r3, r2
 800724a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 8186 	beq.w	8007560 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	2b01      	cmp	r3, #1
 800725e:	d005      	beq.n	800726c <HAL_GPIO_Init+0x44>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d130      	bne.n	80072ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	2203      	movs	r2, #3
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	43db      	mvns	r3, r3
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	4013      	ands	r3, r2
 8007282:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	fa02 f303 	lsl.w	r3, r2, r3
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	4313      	orrs	r3, r2
 8007294:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072a2:	2201      	movs	r2, #1
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	fa02 f303 	lsl.w	r3, r2, r3
 80072aa:	43db      	mvns	r3, r3
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	4013      	ands	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	091b      	lsrs	r3, r3, #4
 80072b8:	f003 0201 	and.w	r2, r3, #1
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d017      	beq.n	800730a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	2203      	movs	r2, #3
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	43db      	mvns	r3, r3
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	4013      	ands	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	4313      	orrs	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d123      	bne.n	800735e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	08da      	lsrs	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3208      	adds	r2, #8
 800731e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	220f      	movs	r2, #15
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43db      	mvns	r3, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	4013      	ands	r3, r2
 8007338:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	fa02 f303 	lsl.w	r3, r2, r3
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	4313      	orrs	r3, r2
 800734e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	08da      	lsrs	r2, r3, #3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3208      	adds	r2, #8
 8007358:	69b9      	ldr	r1, [r7, #24]
 800735a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	2203      	movs	r2, #3
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	43db      	mvns	r3, r3
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	4013      	ands	r3, r2
 8007374:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f003 0203 	and.w	r2, r3, #3
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	fa02 f303 	lsl.w	r3, r2, r3
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	4313      	orrs	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80e0 	beq.w	8007560 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007460 <HAL_GPIO_Init+0x238>)
 80073a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80073a6:	4a2e      	ldr	r2, [pc, #184]	@ (8007460 <HAL_GPIO_Init+0x238>)
 80073a8:	f043 0302 	orr.w	r3, r3, #2
 80073ac:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80073b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007460 <HAL_GPIO_Init+0x238>)
 80073b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073be:	4a29      	ldr	r2, [pc, #164]	@ (8007464 <HAL_GPIO_Init+0x23c>)
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	089b      	lsrs	r3, r3, #2
 80073c4:	3302      	adds	r3, #2
 80073c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	220f      	movs	r2, #15
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	43db      	mvns	r3, r3
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	4013      	ands	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a20      	ldr	r2, [pc, #128]	@ (8007468 <HAL_GPIO_Init+0x240>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d052      	beq.n	8007490 <HAL_GPIO_Init+0x268>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a1f      	ldr	r2, [pc, #124]	@ (800746c <HAL_GPIO_Init+0x244>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d031      	beq.n	8007456 <HAL_GPIO_Init+0x22e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007470 <HAL_GPIO_Init+0x248>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d02b      	beq.n	8007452 <HAL_GPIO_Init+0x22a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007474 <HAL_GPIO_Init+0x24c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d025      	beq.n	800744e <HAL_GPIO_Init+0x226>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a1c      	ldr	r2, [pc, #112]	@ (8007478 <HAL_GPIO_Init+0x250>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d01f      	beq.n	800744a <HAL_GPIO_Init+0x222>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1b      	ldr	r2, [pc, #108]	@ (800747c <HAL_GPIO_Init+0x254>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d019      	beq.n	8007446 <HAL_GPIO_Init+0x21e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1a      	ldr	r2, [pc, #104]	@ (8007480 <HAL_GPIO_Init+0x258>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <HAL_GPIO_Init+0x21a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a19      	ldr	r2, [pc, #100]	@ (8007484 <HAL_GPIO_Init+0x25c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00d      	beq.n	800743e <HAL_GPIO_Init+0x216>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a18      	ldr	r2, [pc, #96]	@ (8007488 <HAL_GPIO_Init+0x260>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <HAL_GPIO_Init+0x212>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a17      	ldr	r2, [pc, #92]	@ (800748c <HAL_GPIO_Init+0x264>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d101      	bne.n	8007436 <HAL_GPIO_Init+0x20e>
 8007432:	2309      	movs	r3, #9
 8007434:	e02d      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 8007436:	230a      	movs	r3, #10
 8007438:	e02b      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 800743a:	2308      	movs	r3, #8
 800743c:	e029      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 800743e:	2307      	movs	r3, #7
 8007440:	e027      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 8007442:	2306      	movs	r3, #6
 8007444:	e025      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 8007446:	2305      	movs	r3, #5
 8007448:	e023      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 800744a:	2304      	movs	r3, #4
 800744c:	e021      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 800744e:	2303      	movs	r3, #3
 8007450:	e01f      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 8007452:	2302      	movs	r3, #2
 8007454:	e01d      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 8007456:	2301      	movs	r3, #1
 8007458:	e01b      	b.n	8007492 <HAL_GPIO_Init+0x26a>
 800745a:	bf00      	nop
 800745c:	58000080 	.word	0x58000080
 8007460:	58024400 	.word	0x58024400
 8007464:	58000400 	.word	0x58000400
 8007468:	58020000 	.word	0x58020000
 800746c:	58020400 	.word	0x58020400
 8007470:	58020800 	.word	0x58020800
 8007474:	58020c00 	.word	0x58020c00
 8007478:	58021000 	.word	0x58021000
 800747c:	58021400 	.word	0x58021400
 8007480:	58021800 	.word	0x58021800
 8007484:	58021c00 	.word	0x58021c00
 8007488:	58022000 	.word	0x58022000
 800748c:	58022400 	.word	0x58022400
 8007490:	2300      	movs	r3, #0
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	f002 0203 	and.w	r2, r2, #3
 8007498:	0092      	lsls	r2, r2, #2
 800749a:	4093      	lsls	r3, r2
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	4313      	orrs	r3, r2
 80074a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074a2:	4938      	ldr	r1, [pc, #224]	@ (8007584 <HAL_GPIO_Init+0x35c>)
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	089b      	lsrs	r3, r3, #2
 80074a8:	3302      	adds	r3, #2
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	43db      	mvns	r3, r3
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	4013      	ands	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80074d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80074de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	43db      	mvns	r3, r3
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	4013      	ands	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007504:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	43db      	mvns	r3, r3
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	4013      	ands	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	43db      	mvns	r3, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	4013      	ands	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	4313      	orrs	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	3301      	adds	r3, #1
 8007564:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	fa22 f303 	lsr.w	r3, r2, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	f47f ae63 	bne.w	800723c <HAL_GPIO_Init+0x14>
  }
}
 8007576:	bf00      	nop
 8007578:	bf00      	nop
 800757a:	3724      	adds	r7, #36	@ 0x24
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	58000400 	.word	0x58000400

08007588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
 8007594:	4613      	mov	r3, r2
 8007596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007598:	787b      	ldrb	r3, [r7, #1]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800759e:	887a      	ldrh	r2, [r7, #2]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80075a4:	e003      	b.n	80075ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80075a6:	887b      	ldrh	r3, [r7, #2]
 80075a8:	041a      	lsls	r2, r3, #16
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	619a      	str	r2, [r3, #24]
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e08b      	b.n	80076e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fa ff48 	bl	8002478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2224      	movs	r2, #36	@ 0x24
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800760c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800761c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d107      	bne.n	8007636 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	e006      	b.n	8007644 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007642:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d108      	bne.n	800765e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800765a:	605a      	str	r2, [r3, #4]
 800765c:	e007      	b.n	800766e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800766c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6859      	ldr	r1, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	4b1d      	ldr	r3, [pc, #116]	@ (80076f0 <HAL_I2C_Init+0x134>)
 800767a:	430b      	orrs	r3, r1
 800767c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800768c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69d9      	ldr	r1, [r3, #28]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	02008000 	.word	0x02008000

080076f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b20      	cmp	r3, #32
 8007708:	d138      	bne.n	800777c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007714:	2302      	movs	r3, #2
 8007716:	e032      	b.n	800777e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2224      	movs	r2, #36	@ 0x24
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0201 	bic.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	e000      	b.n	800777e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800777c:	2302      	movs	r3, #2
  }
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b20      	cmp	r3, #32
 800779e:	d139      	bne.n	8007814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e033      	b.n	8007816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2224      	movs	r2, #36	@ 0x24
 80077ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0201 	bic.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80077dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	e000      	b.n	8007816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007814:	2302      	movs	r3, #2
  }
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
	...

08007824 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800782c:	4b19      	ldr	r3, [pc, #100]	@ (8007894 <HAL_PWREx_ConfigSupply+0x70>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b04      	cmp	r3, #4
 8007836:	d00a      	beq.n	800784e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007838:	4b16      	ldr	r3, [pc, #88]	@ (8007894 <HAL_PWREx_ConfigSupply+0x70>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	429a      	cmp	r2, r3
 8007844:	d001      	beq.n	800784a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e01f      	b.n	800788a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	e01d      	b.n	800788a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800784e:	4b11      	ldr	r3, [pc, #68]	@ (8007894 <HAL_PWREx_ConfigSupply+0x70>)
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f023 0207 	bic.w	r2, r3, #7
 8007856:	490f      	ldr	r1, [pc, #60]	@ (8007894 <HAL_PWREx_ConfigSupply+0x70>)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4313      	orrs	r3, r2
 800785c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800785e:	f7fc f8e9 	bl	8003a34 <HAL_GetTick>
 8007862:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007864:	e009      	b.n	800787a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007866:	f7fc f8e5 	bl	8003a34 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007874:	d901      	bls.n	800787a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e007      	b.n	800788a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800787a:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <HAL_PWREx_ConfigSupply+0x70>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007886:	d1ee      	bne.n	8007866 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	58024800 	.word	0x58024800

08007898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08c      	sub	sp, #48	@ 0x30
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f000 bc1f 	b.w	80080ea <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 80b3 	beq.w	8007a20 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078ba:	4b95      	ldr	r3, [pc, #596]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078c4:	4b92      	ldr	r3, [pc, #584]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80078ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d007      	beq.n	80078e0 <HAL_RCC_OscConfig+0x48>
 80078d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d2:	2b18      	cmp	r3, #24
 80078d4:	d112      	bne.n	80078fc <HAL_RCC_OscConfig+0x64>
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d10d      	bne.n	80078fc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078e0:	4b8b      	ldr	r3, [pc, #556]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 8098 	beq.w	8007a1e <HAL_RCC_OscConfig+0x186>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 8093 	bne.w	8007a1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e3f6      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007904:	d106      	bne.n	8007914 <HAL_RCC_OscConfig+0x7c>
 8007906:	4b82      	ldr	r3, [pc, #520]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a81      	ldr	r2, [pc, #516]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800790c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	e058      	b.n	80079c6 <HAL_RCC_OscConfig+0x12e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d112      	bne.n	8007942 <HAL_RCC_OscConfig+0xaa>
 800791c:	4b7c      	ldr	r3, [pc, #496]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a7b      	ldr	r2, [pc, #492]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	4b79      	ldr	r3, [pc, #484]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a78      	ldr	r2, [pc, #480]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800792e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	4b76      	ldr	r3, [pc, #472]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a75      	ldr	r2, [pc, #468]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800793a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	e041      	b.n	80079c6 <HAL_RCC_OscConfig+0x12e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800794a:	d112      	bne.n	8007972 <HAL_RCC_OscConfig+0xda>
 800794c:	4b70      	ldr	r3, [pc, #448]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a6f      	ldr	r2, [pc, #444]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007952:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	4b6d      	ldr	r3, [pc, #436]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a6c      	ldr	r2, [pc, #432]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800795e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	4b6a      	ldr	r3, [pc, #424]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a69      	ldr	r2, [pc, #420]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800796a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	e029      	b.n	80079c6 <HAL_RCC_OscConfig+0x12e>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800797a:	d112      	bne.n	80079a2 <HAL_RCC_OscConfig+0x10a>
 800797c:	4b64      	ldr	r3, [pc, #400]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a63      	ldr	r2, [pc, #396]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007982:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	4b61      	ldr	r3, [pc, #388]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a60      	ldr	r2, [pc, #384]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800798e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	4b5e      	ldr	r3, [pc, #376]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a5d      	ldr	r2, [pc, #372]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 800799a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	e011      	b.n	80079c6 <HAL_RCC_OscConfig+0x12e>
 80079a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a5a      	ldr	r2, [pc, #360]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80079a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	4b58      	ldr	r3, [pc, #352]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a57      	ldr	r2, [pc, #348]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80079b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	4b55      	ldr	r3, [pc, #340]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a54      	ldr	r2, [pc, #336]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80079c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d013      	beq.n	80079f6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ce:	f7fc f831 	bl	8003a34 <HAL_GetTick>
 80079d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d6:	f7fc f82d 	bl	8003a34 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b64      	cmp	r3, #100	@ 0x64
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e380      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079e8:	4b49      	ldr	r3, [pc, #292]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0f0      	beq.n	80079d6 <HAL_RCC_OscConfig+0x13e>
 80079f4:	e014      	b.n	8007a20 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f6:	f7fc f81d 	bl	8003a34 <HAL_GetTick>
 80079fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079fe:	f7fc f819 	bl	8003a34 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b64      	cmp	r3, #100	@ 0x64
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e36c      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a10:	4b3f      	ldr	r3, [pc, #252]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f0      	bne.n	80079fe <HAL_RCC_OscConfig+0x166>
 8007a1c:	e000      	b.n	8007a20 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 808c 	beq.w	8007b46 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a2e:	4b38      	ldr	r3, [pc, #224]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a36:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a38:	4b35      	ldr	r3, [pc, #212]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <HAL_RCC_OscConfig+0x1bc>
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	2b18      	cmp	r3, #24
 8007a48:	d137      	bne.n	8007aba <HAL_RCC_OscConfig+0x222>
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d132      	bne.n	8007aba <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a54:	4b2e      	ldr	r3, [pc, #184]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_OscConfig+0x1d4>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e33e      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a6c:	4b28      	ldr	r3, [pc, #160]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f023 0219 	bic.w	r2, r3, #25
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	4925      	ldr	r1, [pc, #148]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7e:	f7fb ffd9 	bl	8003a34 <HAL_GetTick>
 8007a82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a86:	f7fb ffd5 	bl	8003a34 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e328      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a98:	4b1d      	ldr	r3, [pc, #116]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0f0      	beq.n	8007a86 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	061b      	lsls	r3, r3, #24
 8007ab2:	4917      	ldr	r1, [pc, #92]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ab8:	e045      	b.n	8007b46 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d028      	beq.n	8007b14 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ac2:	4b13      	ldr	r3, [pc, #76]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f023 0219 	bic.w	r2, r3, #25
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	4910      	ldr	r1, [pc, #64]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad4:	f7fb ffae 	bl	8003a34 <HAL_GetTick>
 8007ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007adc:	f7fb ffaa 	bl	8003a34 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e2fd      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007aee:	4b08      	ldr	r3, [pc, #32]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0f0      	beq.n	8007adc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afa:	4b05      	ldr	r3, [pc, #20]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	061b      	lsls	r3, r3, #24
 8007b08:	4901      	ldr	r1, [pc, #4]	@ (8007b10 <HAL_RCC_OscConfig+0x278>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	604b      	str	r3, [r1, #4]
 8007b0e:	e01a      	b.n	8007b46 <HAL_RCC_OscConfig+0x2ae>
 8007b10:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b14:	4b97      	ldr	r3, [pc, #604]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a96      	ldr	r2, [pc, #600]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007b1a:	f023 0301 	bic.w	r3, r3, #1
 8007b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b20:	f7fb ff88 	bl	8003a34 <HAL_GetTick>
 8007b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b28:	f7fb ff84 	bl	8003a34 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e2d7      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b3a:	4b8e      	ldr	r3, [pc, #568]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f0      	bne.n	8007b28 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0310 	and.w	r3, r3, #16
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d06a      	beq.n	8007c28 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b52:	4b88      	ldr	r3, [pc, #544]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b5c:	4b85      	ldr	r3, [pc, #532]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d007      	beq.n	8007b78 <HAL_RCC_OscConfig+0x2e0>
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	2b18      	cmp	r3, #24
 8007b6c:	d11b      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x30e>
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d116      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b78:	4b7e      	ldr	r3, [pc, #504]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <HAL_RCC_OscConfig+0x2f8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2b80      	cmp	r3, #128	@ 0x80
 8007b8a:	d001      	beq.n	8007b90 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e2ac      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b90:	4b78      	ldr	r3, [pc, #480]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	061b      	lsls	r3, r3, #24
 8007b9e:	4975      	ldr	r1, [pc, #468]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ba4:	e040      	b.n	8007c28 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d023      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007bae:	4b71      	ldr	r3, [pc, #452]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a70      	ldr	r2, [pc, #448]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bba:	f7fb ff3b 	bl	8003a34 <HAL_GetTick>
 8007bbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bc0:	e008      	b.n	8007bd4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007bc2:	f7fb ff37 	bl	8003a34 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d901      	bls.n	8007bd4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e28a      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bd4:	4b67      	ldr	r3, [pc, #412]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0f0      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007be0:	4b64      	ldr	r3, [pc, #400]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	061b      	lsls	r3, r3, #24
 8007bee:	4961      	ldr	r1, [pc, #388]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60cb      	str	r3, [r1, #12]
 8007bf4:	e018      	b.n	8007c28 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a5e      	ldr	r2, [pc, #376]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c02:	f7fb ff17 	bl	8003a34 <HAL_GetTick>
 8007c06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c08:	e008      	b.n	8007c1c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c0a:	f7fb ff13 	bl	8003a34 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d901      	bls.n	8007c1c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e266      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c1c:	4b55      	ldr	r3, [pc, #340]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1f0      	bne.n	8007c0a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d036      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d019      	beq.n	8007c70 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c40:	4a4c      	ldr	r2, [pc, #304]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c48:	f7fb fef4 	bl	8003a34 <HAL_GetTick>
 8007c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c50:	f7fb fef0 	bl	8003a34 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e243      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c62:	4b44      	ldr	r3, [pc, #272]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f0      	beq.n	8007c50 <HAL_RCC_OscConfig+0x3b8>
 8007c6e:	e018      	b.n	8007ca2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c70:	4b40      	ldr	r3, [pc, #256]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c74:	4a3f      	ldr	r2, [pc, #252]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007c76:	f023 0301 	bic.w	r3, r3, #1
 8007c7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c7c:	f7fb feda 	bl	8003a34 <HAL_GetTick>
 8007c80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c82:	e008      	b.n	8007c96 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c84:	f7fb fed6 	bl	8003a34 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e229      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c96:	4b37      	ldr	r3, [pc, #220]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1f0      	bne.n	8007c84 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d036      	beq.n	8007d1c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d019      	beq.n	8007cea <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a2e      	ldr	r2, [pc, #184]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007cbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007cc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cc2:	f7fb feb7 	bl	8003a34 <HAL_GetTick>
 8007cc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cc8:	e008      	b.n	8007cdc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cca:	f7fb feb3 	bl	8003a34 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e206      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cdc:	4b25      	ldr	r3, [pc, #148]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0f0      	beq.n	8007cca <HAL_RCC_OscConfig+0x432>
 8007ce8:	e018      	b.n	8007d1c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cea:	4b22      	ldr	r3, [pc, #136]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a21      	ldr	r2, [pc, #132]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007cf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cf6:	f7fb fe9d 	bl	8003a34 <HAL_GetTick>
 8007cfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cfc:	e008      	b.n	8007d10 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cfe:	f7fb fe99 	bl	8003a34 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d901      	bls.n	8007d10 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e1ec      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d10:	4b18      	ldr	r3, [pc, #96]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f0      	bne.n	8007cfe <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80af 	beq.w	8007e88 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d2a:	4b13      	ldr	r3, [pc, #76]	@ (8007d78 <HAL_RCC_OscConfig+0x4e0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a12      	ldr	r2, [pc, #72]	@ (8007d78 <HAL_RCC_OscConfig+0x4e0>)
 8007d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d36:	f7fb fe7d 	bl	8003a34 <HAL_GetTick>
 8007d3a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d3c:	e008      	b.n	8007d50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d3e:	f7fb fe79 	bl	8003a34 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b64      	cmp	r3, #100	@ 0x64
 8007d4a:	d901      	bls.n	8007d50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e1cc      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d50:	4b09      	ldr	r3, [pc, #36]	@ (8007d78 <HAL_RCC_OscConfig+0x4e0>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0f0      	beq.n	8007d3e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d10b      	bne.n	8007d7c <HAL_RCC_OscConfig+0x4e4>
 8007d64:	4b03      	ldr	r3, [pc, #12]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d68:	4a02      	ldr	r2, [pc, #8]	@ (8007d74 <HAL_RCC_OscConfig+0x4dc>)
 8007d6a:	f043 0301 	orr.w	r3, r3, #1
 8007d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d70:	e05b      	b.n	8007e2a <HAL_RCC_OscConfig+0x592>
 8007d72:	bf00      	nop
 8007d74:	58024400 	.word	0x58024400
 8007d78:	58024800 	.word	0x58024800
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d112      	bne.n	8007daa <HAL_RCC_OscConfig+0x512>
 8007d84:	4b9d      	ldr	r3, [pc, #628]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d88:	4a9c      	ldr	r2, [pc, #624]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d90:	4b9a      	ldr	r3, [pc, #616]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d94:	4a99      	ldr	r2, [pc, #612]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d9c:	4b97      	ldr	r3, [pc, #604]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da0:	4a96      	ldr	r2, [pc, #600]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007da2:	f023 0304 	bic.w	r3, r3, #4
 8007da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007da8:	e03f      	b.n	8007e2a <HAL_RCC_OscConfig+0x592>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	2b05      	cmp	r3, #5
 8007db0:	d112      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x540>
 8007db2:	4b92      	ldr	r3, [pc, #584]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db6:	4a91      	ldr	r2, [pc, #580]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007db8:	f043 0304 	orr.w	r3, r3, #4
 8007dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dbe:	4b8f      	ldr	r3, [pc, #572]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dc2:	4a8e      	ldr	r2, [pc, #568]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007dc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dca:	4b8c      	ldr	r3, [pc, #560]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dce:	4a8b      	ldr	r2, [pc, #556]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dd6:	e028      	b.n	8007e2a <HAL_RCC_OscConfig+0x592>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b85      	cmp	r3, #133	@ 0x85
 8007dde:	d112      	bne.n	8007e06 <HAL_RCC_OscConfig+0x56e>
 8007de0:	4b86      	ldr	r3, [pc, #536]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007de4:	4a85      	ldr	r2, [pc, #532]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007de6:	f043 0304 	orr.w	r3, r3, #4
 8007dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dec:	4b83      	ldr	r3, [pc, #524]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007df0:	4a82      	ldr	r2, [pc, #520]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007df8:	4b80      	ldr	r3, [pc, #512]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dfc:	4a7f      	ldr	r2, [pc, #508]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e04:	e011      	b.n	8007e2a <HAL_RCC_OscConfig+0x592>
 8007e06:	4b7d      	ldr	r3, [pc, #500]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e12:	4b7a      	ldr	r3, [pc, #488]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e16:	4a79      	ldr	r2, [pc, #484]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007e18:	f023 0304 	bic.w	r3, r3, #4
 8007e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e1e:	4b77      	ldr	r3, [pc, #476]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e22:	4a76      	ldr	r2, [pc, #472]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007e24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e28:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d015      	beq.n	8007e5e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e32:	f7fb fdff 	bl	8003a34 <HAL_GetTick>
 8007e36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e38:	e00a      	b.n	8007e50 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e3a:	f7fb fdfb 	bl	8003a34 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d901      	bls.n	8007e50 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e14c      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e50:	4b6a      	ldr	r3, [pc, #424]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0ee      	beq.n	8007e3a <HAL_RCC_OscConfig+0x5a2>
 8007e5c:	e014      	b.n	8007e88 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e5e:	f7fb fde9 	bl	8003a34 <HAL_GetTick>
 8007e62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e64:	e00a      	b.n	8007e7c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e66:	f7fb fde5 	bl	8003a34 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d901      	bls.n	8007e7c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e136      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e7c:	4b5f      	ldr	r3, [pc, #380]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1ee      	bne.n	8007e66 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 812b 	beq.w	80080e8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e92:	4b5a      	ldr	r3, [pc, #360]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e9a:	2b18      	cmp	r3, #24
 8007e9c:	f000 80bb 	beq.w	8008016 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	f040 8095 	bne.w	8007fd4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eaa:	4b54      	ldr	r3, [pc, #336]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a53      	ldr	r2, [pc, #332]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007eb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb6:	f7fb fdbd 	bl	8003a34 <HAL_GetTick>
 8007eba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ebe:	f7fb fdb9 	bl	8003a34 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e10c      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f0      	bne.n	8007ebe <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007edc:	4b47      	ldr	r3, [pc, #284]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ee0:	4b47      	ldr	r3, [pc, #284]	@ (8008000 <HAL_RCC_OscConfig+0x768>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007eec:	0112      	lsls	r2, r2, #4
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	4942      	ldr	r1, [pc, #264]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007efa:	3b01      	subs	r3, #1
 8007efc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f04:	3b01      	subs	r3, #1
 8007f06:	025b      	lsls	r3, r3, #9
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f10:	3b01      	subs	r3, #1
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	061b      	lsls	r3, r3, #24
 8007f22:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f26:	4935      	ldr	r1, [pc, #212]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007f2c:	4b33      	ldr	r3, [pc, #204]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f30:	4a32      	ldr	r2, [pc, #200]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f32:	f023 0301 	bic.w	r3, r3, #1
 8007f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f38:	4b30      	ldr	r3, [pc, #192]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f3c:	4b31      	ldr	r3, [pc, #196]	@ (8008004 <HAL_RCC_OscConfig+0x76c>)
 8007f3e:	4013      	ands	r3, r2
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007f44:	00d2      	lsls	r2, r2, #3
 8007f46:	492d      	ldr	r1, [pc, #180]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	f023 020c 	bic.w	r2, r3, #12
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f58:	4928      	ldr	r1, [pc, #160]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007f5e:	4b27      	ldr	r3, [pc, #156]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f62:	f023 0202 	bic.w	r2, r3, #2
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6a:	4924      	ldr	r1, [pc, #144]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f70:	4b22      	ldr	r3, [pc, #136]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	4a21      	ldr	r2, [pc, #132]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f80:	4a1e      	ldr	r2, [pc, #120]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007f88:	4b1c      	ldr	r3, [pc, #112]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007f94:	4b19      	ldr	r3, [pc, #100]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	4a18      	ldr	r2, [pc, #96]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007f9a:	f043 0301 	orr.w	r3, r3, #1
 8007f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fa0:	4b16      	ldr	r3, [pc, #88]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a15      	ldr	r2, [pc, #84]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007fa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fac:	f7fb fd42 	bl	8003a34 <HAL_GetTick>
 8007fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fb4:	f7fb fd3e 	bl	8003a34 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e091      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x71c>
 8007fd2:	e089      	b.n	80080e8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fd4:	4b09      	ldr	r3, [pc, #36]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a08      	ldr	r2, [pc, #32]	@ (8007ffc <HAL_RCC_OscConfig+0x764>)
 8007fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe0:	f7fb fd28 	bl	8003a34 <HAL_GetTick>
 8007fe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fe6:	e00f      	b.n	8008008 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fe8:	f7fb fd24 	bl	8003a34 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d908      	bls.n	8008008 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e077      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
 8007ffa:	bf00      	nop
 8007ffc:	58024400 	.word	0x58024400
 8008000:	fffffc0c 	.word	0xfffffc0c
 8008004:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008008:	4b3a      	ldr	r3, [pc, #232]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e9      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x750>
 8008014:	e068      	b.n	80080e8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008016:	4b37      	ldr	r3, [pc, #220]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 8008018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800801c:	4b35      	ldr	r3, [pc, #212]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 800801e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008020:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008026:	2b01      	cmp	r3, #1
 8008028:	d031      	beq.n	800808e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f003 0203 	and.w	r2, r3, #3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008034:	429a      	cmp	r2, r3
 8008036:	d12a      	bne.n	800808e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	091b      	lsrs	r3, r3, #4
 800803c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008044:	429a      	cmp	r2, r3
 8008046:	d122      	bne.n	800808e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008052:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008054:	429a      	cmp	r2, r3
 8008056:	d11a      	bne.n	800808e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	0a5b      	lsrs	r3, r3, #9
 800805c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008064:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008066:	429a      	cmp	r2, r3
 8008068:	d111      	bne.n	800808e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	0c1b      	lsrs	r3, r3, #16
 800806e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008076:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008078:	429a      	cmp	r2, r3
 800807a:	d108      	bne.n	800808e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	0e1b      	lsrs	r3, r3, #24
 8008080:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008088:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800808a:	429a      	cmp	r2, r3
 800808c:	d001      	beq.n	8008092 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e02b      	b.n	80080ea <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008092:	4b18      	ldr	r3, [pc, #96]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 8008094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008096:	08db      	lsrs	r3, r3, #3
 8008098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800809c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d01f      	beq.n	80080e8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80080a8:	4b12      	ldr	r3, [pc, #72]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 80080aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ac:	4a11      	ldr	r2, [pc, #68]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 80080ae:	f023 0301 	bic.w	r3, r3, #1
 80080b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80080b4:	f7fb fcbe 	bl	8003a34 <HAL_GetTick>
 80080b8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80080ba:	bf00      	nop
 80080bc:	f7fb fcba 	bl	8003a34 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d0f9      	beq.n	80080bc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80080c8:	4b0a      	ldr	r3, [pc, #40]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 80080ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080cc:	4b0a      	ldr	r3, [pc, #40]	@ (80080f8 <HAL_RCC_OscConfig+0x860>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80080d4:	00d2      	lsls	r2, r2, #3
 80080d6:	4907      	ldr	r1, [pc, #28]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80080dc:	4b05      	ldr	r3, [pc, #20]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 80080de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e0:	4a04      	ldr	r2, [pc, #16]	@ (80080f4 <HAL_RCC_OscConfig+0x85c>)
 80080e2:	f043 0301 	orr.w	r3, r3, #1
 80080e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3730      	adds	r7, #48	@ 0x30
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	58024400 	.word	0x58024400
 80080f8:	ffff0007 	.word	0xffff0007

080080fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e19c      	b.n	800844a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008110:	4b8a      	ldr	r3, [pc, #552]	@ (800833c <HAL_RCC_ClockConfig+0x240>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d910      	bls.n	8008140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800811e:	4b87      	ldr	r3, [pc, #540]	@ (800833c <HAL_RCC_ClockConfig+0x240>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f023 020f 	bic.w	r2, r3, #15
 8008126:	4985      	ldr	r1, [pc, #532]	@ (800833c <HAL_RCC_ClockConfig+0x240>)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	4313      	orrs	r3, r2
 800812c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800812e:	4b83      	ldr	r3, [pc, #524]	@ (800833c <HAL_RCC_ClockConfig+0x240>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 030f 	and.w	r3, r3, #15
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d001      	beq.n	8008140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e184      	b.n	800844a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b00      	cmp	r3, #0
 800814a:	d010      	beq.n	800816e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	4b7b      	ldr	r3, [pc, #492]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008158:	429a      	cmp	r2, r3
 800815a:	d908      	bls.n	800816e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800815c:	4b78      	ldr	r3, [pc, #480]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	4975      	ldr	r1, [pc, #468]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 800816a:	4313      	orrs	r3, r2
 800816c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0308 	and.w	r3, r3, #8
 8008176:	2b00      	cmp	r3, #0
 8008178:	d010      	beq.n	800819c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695a      	ldr	r2, [r3, #20]
 800817e:	4b70      	ldr	r3, [pc, #448]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008186:	429a      	cmp	r2, r3
 8008188:	d908      	bls.n	800819c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800818a:	4b6d      	ldr	r3, [pc, #436]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	496a      	ldr	r1, [pc, #424]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 8008198:	4313      	orrs	r3, r2
 800819a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0310 	and.w	r3, r3, #16
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d010      	beq.n	80081ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699a      	ldr	r2, [r3, #24]
 80081ac:	4b64      	ldr	r3, [pc, #400]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d908      	bls.n	80081ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081b8:	4b61      	ldr	r3, [pc, #388]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	495e      	ldr	r1, [pc, #376]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d010      	beq.n	80081f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	69da      	ldr	r2, [r3, #28]
 80081da:	4b59      	ldr	r3, [pc, #356]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d908      	bls.n	80081f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80081e6:	4b56      	ldr	r3, [pc, #344]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	4953      	ldr	r1, [pc, #332]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d010      	beq.n	8008226 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	4b4d      	ldr	r3, [pc, #308]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	f003 030f 	and.w	r3, r3, #15
 8008210:	429a      	cmp	r2, r3
 8008212:	d908      	bls.n	8008226 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008214:	4b4a      	ldr	r3, [pc, #296]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f023 020f 	bic.w	r2, r3, #15
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	4947      	ldr	r1, [pc, #284]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 8008222:	4313      	orrs	r3, r2
 8008224:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d055      	beq.n	80082de <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008232:	4b43      	ldr	r3, [pc, #268]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	4940      	ldr	r1, [pc, #256]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 8008240:	4313      	orrs	r3, r2
 8008242:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d107      	bne.n	800825c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800824c:	4b3c      	ldr	r3, [pc, #240]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d121      	bne.n	800829c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e0f6      	b.n	800844a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d107      	bne.n	8008274 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008264:	4b36      	ldr	r3, [pc, #216]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d115      	bne.n	800829c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e0ea      	b.n	800844a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d107      	bne.n	800828c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800827c:	4b30      	ldr	r3, [pc, #192]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008284:	2b00      	cmp	r3, #0
 8008286:	d109      	bne.n	800829c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e0de      	b.n	800844a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800828c:	4b2c      	ldr	r3, [pc, #176]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e0d6      	b.n	800844a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800829c:	4b28      	ldr	r3, [pc, #160]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	f023 0207 	bic.w	r2, r3, #7
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	4925      	ldr	r1, [pc, #148]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ae:	f7fb fbc1 	bl	8003a34 <HAL_GetTick>
 80082b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082b4:	e00a      	b.n	80082cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082b6:	f7fb fbbd 	bl	8003a34 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e0be      	b.n	800844a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	429a      	cmp	r2, r3
 80082dc:	d1eb      	bne.n	80082b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d010      	beq.n	800830c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	4b14      	ldr	r3, [pc, #80]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	f003 030f 	and.w	r3, r3, #15
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d208      	bcs.n	800830c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082fa:	4b11      	ldr	r3, [pc, #68]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	f023 020f 	bic.w	r2, r3, #15
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	490e      	ldr	r1, [pc, #56]	@ (8008340 <HAL_RCC_ClockConfig+0x244>)
 8008308:	4313      	orrs	r3, r2
 800830a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800830c:	4b0b      	ldr	r3, [pc, #44]	@ (800833c <HAL_RCC_ClockConfig+0x240>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d214      	bcs.n	8008344 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800831a:	4b08      	ldr	r3, [pc, #32]	@ (800833c <HAL_RCC_ClockConfig+0x240>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f023 020f 	bic.w	r2, r3, #15
 8008322:	4906      	ldr	r1, [pc, #24]	@ (800833c <HAL_RCC_ClockConfig+0x240>)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	4313      	orrs	r3, r2
 8008328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800832a:	4b04      	ldr	r3, [pc, #16]	@ (800833c <HAL_RCC_ClockConfig+0x240>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 030f 	and.w	r3, r3, #15
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d005      	beq.n	8008344 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e086      	b.n	800844a <HAL_RCC_ClockConfig+0x34e>
 800833c:	52002000 	.word	0x52002000
 8008340:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d010      	beq.n	8008372 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691a      	ldr	r2, [r3, #16]
 8008354:	4b3f      	ldr	r3, [pc, #252]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800835c:	429a      	cmp	r2, r3
 800835e:	d208      	bcs.n	8008372 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008360:	4b3c      	ldr	r3, [pc, #240]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	4939      	ldr	r1, [pc, #228]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 800836e:	4313      	orrs	r3, r2
 8008370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695a      	ldr	r2, [r3, #20]
 8008382:	4b34      	ldr	r3, [pc, #208]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800838a:	429a      	cmp	r2, r3
 800838c:	d208      	bcs.n	80083a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800838e:	4b31      	ldr	r3, [pc, #196]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	492e      	ldr	r1, [pc, #184]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 800839c:	4313      	orrs	r3, r2
 800839e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d010      	beq.n	80083ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699a      	ldr	r2, [r3, #24]
 80083b0:	4b28      	ldr	r3, [pc, #160]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d208      	bcs.n	80083ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083bc:	4b25      	ldr	r3, [pc, #148]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	4922      	ldr	r1, [pc, #136]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d010      	beq.n	80083fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	69da      	ldr	r2, [r3, #28]
 80083de:	4b1d      	ldr	r3, [pc, #116]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d208      	bcs.n	80083fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80083ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	4917      	ldr	r1, [pc, #92]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80083fc:	f000 f834 	bl	8008468 <HAL_RCC_GetSysClockFreq>
 8008400:	4602      	mov	r2, r0
 8008402:	4b14      	ldr	r3, [pc, #80]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	0a1b      	lsrs	r3, r3, #8
 8008408:	f003 030f 	and.w	r3, r3, #15
 800840c:	4912      	ldr	r1, [pc, #72]	@ (8008458 <HAL_RCC_ClockConfig+0x35c>)
 800840e:	5ccb      	ldrb	r3, [r1, r3]
 8008410:	f003 031f 	and.w	r3, r3, #31
 8008414:	fa22 f303 	lsr.w	r3, r2, r3
 8008418:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800841a:	4b0e      	ldr	r3, [pc, #56]	@ (8008454 <HAL_RCC_ClockConfig+0x358>)
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	f003 030f 	and.w	r3, r3, #15
 8008422:	4a0d      	ldr	r2, [pc, #52]	@ (8008458 <HAL_RCC_ClockConfig+0x35c>)
 8008424:	5cd3      	ldrb	r3, [r2, r3]
 8008426:	f003 031f 	and.w	r3, r3, #31
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	fa22 f303 	lsr.w	r3, r2, r3
 8008430:	4a0a      	ldr	r2, [pc, #40]	@ (800845c <HAL_RCC_ClockConfig+0x360>)
 8008432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008434:	4a0a      	ldr	r2, [pc, #40]	@ (8008460 <HAL_RCC_ClockConfig+0x364>)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800843a:	4b0a      	ldr	r3, [pc, #40]	@ (8008464 <HAL_RCC_ClockConfig+0x368>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f7fb faae 	bl	80039a0 <HAL_InitTick>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	58024400 	.word	0x58024400
 8008458:	08013178 	.word	0x08013178
 800845c:	2400009c 	.word	0x2400009c
 8008460:	24000098 	.word	0x24000098
 8008464:	240000a0 	.word	0x240000a0

08008468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008468:	b480      	push	{r7}
 800846a:	b089      	sub	sp, #36	@ 0x24
 800846c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800846e:	4bb3      	ldr	r3, [pc, #716]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008476:	2b18      	cmp	r3, #24
 8008478:	f200 8155 	bhi.w	8008726 <HAL_RCC_GetSysClockFreq+0x2be>
 800847c:	a201      	add	r2, pc, #4	@ (adr r2, 8008484 <HAL_RCC_GetSysClockFreq+0x1c>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	080084e9 	.word	0x080084e9
 8008488:	08008727 	.word	0x08008727
 800848c:	08008727 	.word	0x08008727
 8008490:	08008727 	.word	0x08008727
 8008494:	08008727 	.word	0x08008727
 8008498:	08008727 	.word	0x08008727
 800849c:	08008727 	.word	0x08008727
 80084a0:	08008727 	.word	0x08008727
 80084a4:	0800850f 	.word	0x0800850f
 80084a8:	08008727 	.word	0x08008727
 80084ac:	08008727 	.word	0x08008727
 80084b0:	08008727 	.word	0x08008727
 80084b4:	08008727 	.word	0x08008727
 80084b8:	08008727 	.word	0x08008727
 80084bc:	08008727 	.word	0x08008727
 80084c0:	08008727 	.word	0x08008727
 80084c4:	08008515 	.word	0x08008515
 80084c8:	08008727 	.word	0x08008727
 80084cc:	08008727 	.word	0x08008727
 80084d0:	08008727 	.word	0x08008727
 80084d4:	08008727 	.word	0x08008727
 80084d8:	08008727 	.word	0x08008727
 80084dc:	08008727 	.word	0x08008727
 80084e0:	08008727 	.word	0x08008727
 80084e4:	0800851b 	.word	0x0800851b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e8:	4b94      	ldr	r3, [pc, #592]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084f4:	4b91      	ldr	r3, [pc, #580]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	08db      	lsrs	r3, r3, #3
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	4a90      	ldr	r2, [pc, #576]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008500:	fa22 f303 	lsr.w	r3, r2, r3
 8008504:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008506:	e111      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008508:	4b8d      	ldr	r3, [pc, #564]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800850a:	61bb      	str	r3, [r7, #24]
      break;
 800850c:	e10e      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800850e:	4b8d      	ldr	r3, [pc, #564]	@ (8008744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008510:	61bb      	str	r3, [r7, #24]
      break;
 8008512:	e10b      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008514:	4b8c      	ldr	r3, [pc, #560]	@ (8008748 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008516:	61bb      	str	r3, [r7, #24]
      break;
 8008518:	e108      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800851a:	4b88      	ldr	r3, [pc, #544]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800851c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008524:	4b85      	ldr	r3, [pc, #532]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	091b      	lsrs	r3, r3, #4
 800852a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800852e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008530:	4b82      	ldr	r3, [pc, #520]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800853a:	4b80      	ldr	r3, [pc, #512]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800853c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800853e:	08db      	lsrs	r3, r3, #3
 8008540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	fb02 f303 	mul.w	r3, r2, r3
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008552:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 80e1 	beq.w	8008720 <HAL_RCC_GetSysClockFreq+0x2b8>
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b02      	cmp	r3, #2
 8008562:	f000 8083 	beq.w	800866c <HAL_RCC_GetSysClockFreq+0x204>
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2b02      	cmp	r3, #2
 800856a:	f200 80a1 	bhi.w	80086b0 <HAL_RCC_GetSysClockFreq+0x248>
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <HAL_RCC_GetSysClockFreq+0x114>
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d056      	beq.n	8008628 <HAL_RCC_GetSysClockFreq+0x1c0>
 800857a:	e099      	b.n	80086b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800857c:	4b6f      	ldr	r3, [pc, #444]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0320 	and.w	r3, r3, #32
 8008584:	2b00      	cmp	r3, #0
 8008586:	d02d      	beq.n	80085e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008588:	4b6c      	ldr	r3, [pc, #432]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	08db      	lsrs	r3, r3, #3
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	4a6b      	ldr	r2, [pc, #428]	@ (8008740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
 8008598:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	ee07 3a90 	vmov	s15, r3
 80085a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b2:	4b62      	ldr	r3, [pc, #392]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800874c <HAL_RCC_GetSysClockFreq+0x2e4>
 80085ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80085e2:	e087      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008750 <HAL_RCC_GetSysClockFreq+0x2e8>
 80085f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f6:	4b51      	ldr	r3, [pc, #324]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008606:	ed97 6a02 	vldr	s12, [r7, #8]
 800860a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800874c <HAL_RCC_GetSysClockFreq+0x2e4>
 800860e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800861a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008626:	e065      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008632:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008754 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863a:	4b40      	ldr	r3, [pc, #256]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864a:	ed97 6a02 	vldr	s12, [r7, #8]
 800864e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800874c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800865e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008666:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800866a:	e043      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008676:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008758 <HAL_RCC_GetSysClockFreq+0x2f0>
 800867a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800867e:	4b2f      	ldr	r3, [pc, #188]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008692:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800874c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086ae:	e021      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008754 <HAL_RCC_GetSysClockFreq+0x2ec>
 80086be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c2:	4b1e      	ldr	r3, [pc, #120]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80086d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800874c <HAL_RCC_GetSysClockFreq+0x2e4>
 80086da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80086f4:	4b11      	ldr	r3, [pc, #68]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f8:	0a5b      	lsrs	r3, r3, #9
 80086fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086fe:	3301      	adds	r3, #1
 8008700:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	ee07 3a90 	vmov	s15, r3
 8008708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800870c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008718:	ee17 3a90 	vmov	r3, s15
 800871c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800871e:	e005      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	61bb      	str	r3, [r7, #24]
      break;
 8008724:	e002      	b.n	800872c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008726:	4b07      	ldr	r3, [pc, #28]	@ (8008744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008728:	61bb      	str	r3, [r7, #24]
      break;
 800872a:	bf00      	nop
  }

  return sysclockfreq;
 800872c:	69bb      	ldr	r3, [r7, #24]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3724      	adds	r7, #36	@ 0x24
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	58024400 	.word	0x58024400
 8008740:	03d09000 	.word	0x03d09000
 8008744:	003d0900 	.word	0x003d0900
 8008748:	016e3600 	.word	0x016e3600
 800874c:	46000000 	.word	0x46000000
 8008750:	4c742400 	.word	0x4c742400
 8008754:	4a742400 	.word	0x4a742400
 8008758:	4bb71b00 	.word	0x4bb71b00

0800875c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8008762:	f7ff fe81 	bl	8008468 <HAL_RCC_GetSysClockFreq>
 8008766:	4602      	mov	r2, r0
 8008768:	4b10      	ldr	r3, [pc, #64]	@ (80087ac <HAL_RCC_GetHCLKFreq+0x50>)
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	0a1b      	lsrs	r3, r3, #8
 800876e:	f003 030f 	and.w	r3, r3, #15
 8008772:	490f      	ldr	r1, [pc, #60]	@ (80087b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008774:	5ccb      	ldrb	r3, [r1, r3]
 8008776:	f003 031f 	and.w	r3, r3, #31
 800877a:	fa22 f303 	lsr.w	r3, r2, r3
 800877e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008780:	4b0a      	ldr	r3, [pc, #40]	@ (80087ac <HAL_RCC_GetHCLKFreq+0x50>)
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	f003 030f 	and.w	r3, r3, #15
 8008788:	4a09      	ldr	r2, [pc, #36]	@ (80087b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800878a:	5cd3      	ldrb	r3, [r2, r3]
 800878c:	f003 031f 	and.w	r3, r3, #31
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	fa22 f303 	lsr.w	r3, r2, r3
 8008796:	4a07      	ldr	r2, [pc, #28]	@ (80087b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008798:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800879a:	4a07      	ldr	r2, [pc, #28]	@ (80087b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80087a0:	4b04      	ldr	r3, [pc, #16]	@ (80087b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80087a2:	681b      	ldr	r3, [r3, #0]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	58024400 	.word	0x58024400
 80087b0:	08013178 	.word	0x08013178
 80087b4:	2400009c 	.word	0x2400009c
 80087b8:	24000098 	.word	0x24000098

080087bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80087c0:	f7ff ffcc 	bl	800875c <HAL_RCC_GetHCLKFreq>
 80087c4:	4602      	mov	r2, r0
 80087c6:	4b06      	ldr	r3, [pc, #24]	@ (80087e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	091b      	lsrs	r3, r3, #4
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	4904      	ldr	r1, [pc, #16]	@ (80087e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087d2:	5ccb      	ldrb	r3, [r1, r3]
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80087dc:	4618      	mov	r0, r3
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	58024400 	.word	0x58024400
 80087e4:	08013178 	.word	0x08013178

080087e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80087ec:	f7ff ffb6 	bl	800875c <HAL_RCC_GetHCLKFreq>
 80087f0:	4602      	mov	r2, r0
 80087f2:	4b06      	ldr	r3, [pc, #24]	@ (800880c <HAL_RCC_GetPCLK2Freq+0x24>)
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	0a1b      	lsrs	r3, r3, #8
 80087f8:	f003 0307 	and.w	r3, r3, #7
 80087fc:	4904      	ldr	r1, [pc, #16]	@ (8008810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80087fe:	5ccb      	ldrb	r3, [r1, r3]
 8008800:	f003 031f 	and.w	r3, r3, #31
 8008804:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008808:	4618      	mov	r0, r3
 800880a:	bd80      	pop	{r7, pc}
 800880c:	58024400 	.word	0x58024400
 8008810:	08013178 	.word	0x08013178

08008814 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008818:	b0c8      	sub	sp, #288	@ 0x120
 800881a:	af00      	add	r7, sp, #0
 800881c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008820:	2300      	movs	r3, #0
 8008822:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008826:	2300      	movs	r3, #0
 8008828:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800882c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008838:	2500      	movs	r5, #0
 800883a:	ea54 0305 	orrs.w	r3, r4, r5
 800883e:	d049      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008846:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800884a:	d02f      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800884c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008850:	d828      	bhi.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008856:	d01a      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008858:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800885c:	d822      	bhi.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008866:	d007      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008868:	e01c      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800886a:	4ba7      	ldr	r3, [pc, #668]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886e:	4aa6      	ldr	r2, [pc, #664]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008876:	e01a      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800887c:	3308      	adds	r3, #8
 800887e:	2102      	movs	r1, #2
 8008880:	4618      	mov	r0, r3
 8008882:	f001 fc43 	bl	800a10c <RCCEx_PLL2_Config>
 8008886:	4603      	mov	r3, r0
 8008888:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800888c:	e00f      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800888e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008892:	3328      	adds	r3, #40	@ 0x28
 8008894:	2102      	movs	r1, #2
 8008896:	4618      	mov	r0, r3
 8008898:	f001 fcea 	bl	800a270 <RCCEx_PLL3_Config>
 800889c:	4603      	mov	r3, r0
 800889e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80088a2:	e004      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088aa:	e000      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80088ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10a      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80088b6:	4b94      	ldr	r3, [pc, #592]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80088be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088c4:	4a90      	ldr	r2, [pc, #576]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088c6:	430b      	orrs	r3, r1
 80088c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80088ca:	e003      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80088e0:	f04f 0900 	mov.w	r9, #0
 80088e4:	ea58 0309 	orrs.w	r3, r8, r9
 80088e8:	d047      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80088ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d82a      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80088f4:	a201      	add	r2, pc, #4	@ (adr r2, 80088fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	08008911 	.word	0x08008911
 8008900:	0800891f 	.word	0x0800891f
 8008904:	08008935 	.word	0x08008935
 8008908:	08008953 	.word	0x08008953
 800890c:	08008953 	.word	0x08008953
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008910:	4b7d      	ldr	r3, [pc, #500]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008914:	4a7c      	ldr	r2, [pc, #496]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800891a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800891c:	e01a      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800891e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008922:	3308      	adds	r3, #8
 8008924:	2100      	movs	r1, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f001 fbf0 	bl	800a10c <RCCEx_PLL2_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008932:	e00f      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008938:	3328      	adds	r3, #40	@ 0x28
 800893a:	2100      	movs	r1, #0
 800893c:	4618      	mov	r0, r3
 800893e:	f001 fc97 	bl	800a270 <RCCEx_PLL3_Config>
 8008942:	4603      	mov	r3, r0
 8008944:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008948:	e004      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008950:	e000      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008954:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800895c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800895e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008960:	f023 0107 	bic.w	r1, r3, #7
 8008964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896a:	4a67      	ldr	r2, [pc, #412]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800896c:	430b      	orrs	r3, r1
 800896e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008970:	e003      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008972:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008976:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800897a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008986:	f04f 0b00 	mov.w	fp, #0
 800898a:	ea5a 030b 	orrs.w	r3, sl, fp
 800898e:	d054      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008996:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800899a:	d036      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800899c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80089a0:	d82f      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80089a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089a6:	d032      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80089a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ac:	d829      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80089ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80089b0:	d02f      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80089b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80089b4:	d825      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80089b6:	2b80      	cmp	r3, #128	@ 0x80
 80089b8:	d018      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80089ba:	2b80      	cmp	r3, #128	@ 0x80
 80089bc:	d821      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80089c2:	2b40      	cmp	r3, #64	@ 0x40
 80089c4:	d007      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80089c6:	e01c      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c8:	4b4f      	ldr	r3, [pc, #316]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089cc:	4a4e      	ldr	r2, [pc, #312]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80089d4:	e01e      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089da:	3308      	adds	r3, #8
 80089dc:	2100      	movs	r1, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f001 fb94 	bl	800a10c <RCCEx_PLL2_Config>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80089ea:	e013      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089f0:	3328      	adds	r3, #40	@ 0x28
 80089f2:	2100      	movs	r1, #0
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 fc3b 	bl	800a270 <RCCEx_PLL3_Config>
 80089fa:	4603      	mov	r3, r0
 80089fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008a00:	e008      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a08:	e004      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008a0a:	bf00      	nop
 8008a0c:	e002      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008a0e:	bf00      	nop
 8008a10:	e000      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a2a:	4a37      	ldr	r2, [pc, #220]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a2c:	430b      	orrs	r3, r1
 8008a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a30:	e003      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008a46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008a50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008a54:	460b      	mov	r3, r1
 8008a56:	4313      	orrs	r3, r2
 8008a58:	d05c      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a60:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008a64:	d03b      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008a66:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008a6a:	d834      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a70:	d037      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a76:	d82e      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008a78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a7c:	d033      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008a7e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a82:	d828      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a88:	d01a      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a8e:	d822      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a98:	d007      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008a9a:	e01c      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa0:	4a19      	ldr	r2, [pc, #100]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008aa8:	e01e      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aae:	3308      	adds	r3, #8
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f001 fb2a 	bl	800a10c <RCCEx_PLL2_Config>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008abe:	e013      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac4:	3328      	adds	r3, #40	@ 0x28
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f001 fbd1 	bl	800a270 <RCCEx_PLL3_Config>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008ad4:	e008      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008adc:	e004      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008ade:	bf00      	nop
 8008ae0:	e002      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008ae2:	bf00      	nop
 8008ae4:	e000      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10d      	bne.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008af0:	4b05      	ldr	r3, [pc, #20]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008afe:	4a02      	ldr	r2, [pc, #8]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b00:	430b      	orrs	r3, r1
 8008b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b04:	e006      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008b06:	bf00      	nop
 8008b08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008b20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b24:	2300      	movs	r3, #0
 8008b26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4313      	orrs	r3, r2
 8008b32:	d03a      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b3a:	2b30      	cmp	r3, #48	@ 0x30
 8008b3c:	d01f      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008b3e:	2b30      	cmp	r3, #48	@ 0x30
 8008b40:	d819      	bhi.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d00c      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d815      	bhi.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d019      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008b4e:	2b10      	cmp	r3, #16
 8008b50:	d111      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b52:	4bae      	ldr	r3, [pc, #696]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b56:	4aad      	ldr	r2, [pc, #692]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008b5e:	e011      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b64:	3308      	adds	r3, #8
 8008b66:	2102      	movs	r1, #2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 facf 	bl	800a10c <RCCEx_PLL2_Config>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008b74:	e006      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b7c:	e002      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008b7e:	bf00      	nop
 8008b80:	e000      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008b8c:	4b9f      	ldr	r3, [pc, #636]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b9a:	4a9c      	ldr	r2, [pc, #624]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ba0:	e003      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ba6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	d051      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bd4:	d035      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bda:	d82e      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008bdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008be0:	d031      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008be2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008be6:	d828      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bec:	d01a      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bf2:	d822      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bfc:	d007      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008bfe:	e01c      	b.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c00:	4b82      	ldr	r3, [pc, #520]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c04:	4a81      	ldr	r2, [pc, #516]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c0c:	e01c      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c12:	3308      	adds	r3, #8
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 fa78 	bl	800a10c <RCCEx_PLL2_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c22:	e011      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c28:	3328      	adds	r3, #40	@ 0x28
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f001 fb1f 	bl	800a270 <RCCEx_PLL3_Config>
 8008c32:	4603      	mov	r3, r0
 8008c34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c38:	e006      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c40:	e002      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008c42:	bf00      	nop
 8008c44:	e000      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008c50:	4b6e      	ldr	r3, [pc, #440]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c54:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c5e:	4a6b      	ldr	r2, [pc, #428]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c64:	e003      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008c84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	d053      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c98:	d033      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008c9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c9e:	d82c      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008ca0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ca4:	d02f      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008ca6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008caa:	d826      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008cac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008cb0:	d02b      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008cb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008cb6:	d820      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cbc:	d012      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cc2:	d81a      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d022      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ccc:	d115      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 fa18 	bl	800a10c <RCCEx_PLL2_Config>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ce2:	e015      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ce8:	3328      	adds	r3, #40	@ 0x28
 8008cea:	2101      	movs	r1, #1
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 fabf 	bl	800a270 <RCCEx_PLL3_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008cf8:	e00a      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d00:	e006      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008d02:	bf00      	nop
 8008d04:	e004      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008d06:	bf00      	nop
 8008d08:	e002      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d18:	4b3c      	ldr	r3, [pc, #240]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d1c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d26:	4a39      	ldr	r2, [pc, #228]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d2c:	e003      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008d42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d46:	2300      	movs	r3, #0
 8008d48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4313      	orrs	r3, r2
 8008d54:	d060      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d5e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008d62:	d039      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008d64:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008d68:	d832      	bhi.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d6e:	d035      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d74:	d82c      	bhi.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d7a:	d031      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d80:	d826      	bhi.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008d82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d86:	d02d      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008d88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d8c:	d820      	bhi.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d92:	d012      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d98:	d81a      	bhi.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d024      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008d9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008da2:	d115      	bne.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da8:	3308      	adds	r3, #8
 8008daa:	2101      	movs	r1, #1
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 f9ad 	bl	800a10c <RCCEx_PLL2_Config>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008db8:	e017      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dbe:	3328      	adds	r3, #40	@ 0x28
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 fa54 	bl	800a270 <RCCEx_PLL3_Config>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008dce:	e00c      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dd6:	e008      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008dd8:	bf00      	nop
 8008dda:	e006      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008ddc:	bf00      	nop
 8008dde:	e004      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008de0:	bf00      	nop
 8008de2:	e002      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008de4:	bf00      	nop
 8008de6:	e000      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10e      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008df2:	4b06      	ldr	r3, [pc, #24]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e02:	4a02      	ldr	r2, [pc, #8]	@ (8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e04:	430b      	orrs	r3, r1
 8008e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e08:	e006      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008e0a:	bf00      	nop
 8008e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e32:	460b      	mov	r3, r1
 8008e34:	4313      	orrs	r3, r2
 8008e36:	d037      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e42:	d00e      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e48:	d816      	bhi.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d018      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e52:	d111      	bne.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e54:	4bc4      	ldr	r3, [pc, #784]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e58:	4ac3      	ldr	r2, [pc, #780]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e60:	e00f      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e66:	3308      	adds	r3, #8
 8008e68:	2101      	movs	r1, #1
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 f94e 	bl	800a10c <RCCEx_PLL2_Config>
 8008e70:	4603      	mov	r3, r0
 8008e72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e76:	e004      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e7e:	e000      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10a      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e8a:	4bb7      	ldr	r3, [pc, #732]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e98:	4ab3      	ldr	r2, [pc, #716]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e9a:	430b      	orrs	r3, r1
 8008e9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e9e:	e003      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ea4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008ebe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	d039      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d81c      	bhi.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008f15 	.word	0x08008f15
 8008edc:	08008ee9 	.word	0x08008ee9
 8008ee0:	08008ef7 	.word	0x08008ef7
 8008ee4:	08008f15 	.word	0x08008f15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ee8:	4b9f      	ldr	r3, [pc, #636]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eec:	4a9e      	ldr	r2, [pc, #632]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ef4:	e00f      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008efa:	3308      	adds	r3, #8
 8008efc:	2102      	movs	r1, #2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 f904 	bl	800a10c <RCCEx_PLL2_Config>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f0a:	e004      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f12:	e000      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10a      	bne.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f1e:	4b92      	ldr	r3, [pc, #584]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f22:	f023 0103 	bic.w	r1, r3, #3
 8008f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f2c:	4a8e      	ldr	r2, [pc, #568]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f2e:	430b      	orrs	r3, r1
 8008f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f32:	e003      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008f48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008f56:	460b      	mov	r3, r1
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	f000 8099 	beq.w	8009090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f5e:	4b83      	ldr	r3, [pc, #524]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a82      	ldr	r2, [pc, #520]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f6a:	f7fa fd63 	bl	8003a34 <HAL_GetTick>
 8008f6e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f72:	e00b      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f74:	f7fa fd5e 	bl	8003a34 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	2b64      	cmp	r3, #100	@ 0x64
 8008f82:	d903      	bls.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f8a:	e005      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f8c:	4b77      	ldr	r3, [pc, #476]	@ (800916c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d0ed      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008f98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d173      	bne.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008fa0:	4b71      	ldr	r3, [pc, #452]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008fac:	4053      	eors	r3, r2
 8008fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d015      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fbe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fc2:	4b69      	ldr	r3, [pc, #420]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc6:	4a68      	ldr	r2, [pc, #416]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fcc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fce:	4b66      	ldr	r3, [pc, #408]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fd2:	4a65      	ldr	r2, [pc, #404]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fd8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008fda:	4a63      	ldr	r2, [pc, #396]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fee:	d118      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff0:	f7fa fd20 	bl	8003a34 <HAL_GetTick>
 8008ff4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ff8:	e00d      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ffa:	f7fa fd1b 	bl	8003a34 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009004:	1ad2      	subs	r2, r2, r3
 8009006:	f241 3388 	movw	r3, #5000	@ 0x1388
 800900a:	429a      	cmp	r2, r3
 800900c:	d903      	bls.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009014:	e005      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009016:	4b54      	ldr	r3, [pc, #336]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0eb      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009022:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009026:	2b00      	cmp	r3, #0
 8009028:	d129      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800902a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800902e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800903a:	d10e      	bne.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800903c:	4b4a      	ldr	r3, [pc, #296]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800904c:	091a      	lsrs	r2, r3, #4
 800904e:	4b48      	ldr	r3, [pc, #288]	@ (8009170 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009050:	4013      	ands	r3, r2
 8009052:	4a45      	ldr	r2, [pc, #276]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009054:	430b      	orrs	r3, r1
 8009056:	6113      	str	r3, [r2, #16]
 8009058:	e005      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800905a:	4b43      	ldr	r3, [pc, #268]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	4a42      	ldr	r2, [pc, #264]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009060:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009064:	6113      	str	r3, [r2, #16]
 8009066:	4b40      	ldr	r3, [pc, #256]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009068:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800906a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009076:	4a3c      	ldr	r2, [pc, #240]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009078:	430b      	orrs	r3, r1
 800907a:	6713      	str	r3, [r2, #112]	@ 0x70
 800907c:	e008      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800907e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009082:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009086:	e003      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009088:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800908c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f002 0301 	and.w	r3, r2, #1
 800909c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090a0:	2300      	movs	r3, #0
 80090a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f000 8090 	beq.w	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80090b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090ba:	2b28      	cmp	r3, #40	@ 0x28
 80090bc:	d870      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80090be:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80090c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c4:	080091a9 	.word	0x080091a9
 80090c8:	080091a1 	.word	0x080091a1
 80090cc:	080091a1 	.word	0x080091a1
 80090d0:	080091a1 	.word	0x080091a1
 80090d4:	080091a1 	.word	0x080091a1
 80090d8:	080091a1 	.word	0x080091a1
 80090dc:	080091a1 	.word	0x080091a1
 80090e0:	080091a1 	.word	0x080091a1
 80090e4:	08009175 	.word	0x08009175
 80090e8:	080091a1 	.word	0x080091a1
 80090ec:	080091a1 	.word	0x080091a1
 80090f0:	080091a1 	.word	0x080091a1
 80090f4:	080091a1 	.word	0x080091a1
 80090f8:	080091a1 	.word	0x080091a1
 80090fc:	080091a1 	.word	0x080091a1
 8009100:	080091a1 	.word	0x080091a1
 8009104:	0800918b 	.word	0x0800918b
 8009108:	080091a1 	.word	0x080091a1
 800910c:	080091a1 	.word	0x080091a1
 8009110:	080091a1 	.word	0x080091a1
 8009114:	080091a1 	.word	0x080091a1
 8009118:	080091a1 	.word	0x080091a1
 800911c:	080091a1 	.word	0x080091a1
 8009120:	080091a1 	.word	0x080091a1
 8009124:	080091a9 	.word	0x080091a9
 8009128:	080091a1 	.word	0x080091a1
 800912c:	080091a1 	.word	0x080091a1
 8009130:	080091a1 	.word	0x080091a1
 8009134:	080091a1 	.word	0x080091a1
 8009138:	080091a1 	.word	0x080091a1
 800913c:	080091a1 	.word	0x080091a1
 8009140:	080091a1 	.word	0x080091a1
 8009144:	080091a9 	.word	0x080091a9
 8009148:	080091a1 	.word	0x080091a1
 800914c:	080091a1 	.word	0x080091a1
 8009150:	080091a1 	.word	0x080091a1
 8009154:	080091a1 	.word	0x080091a1
 8009158:	080091a1 	.word	0x080091a1
 800915c:	080091a1 	.word	0x080091a1
 8009160:	080091a1 	.word	0x080091a1
 8009164:	080091a9 	.word	0x080091a9
 8009168:	58024400 	.word	0x58024400
 800916c:	58024800 	.word	0x58024800
 8009170:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009178:	3308      	adds	r3, #8
 800917a:	2101      	movs	r1, #1
 800917c:	4618      	mov	r0, r3
 800917e:	f000 ffc5 	bl	800a10c <RCCEx_PLL2_Config>
 8009182:	4603      	mov	r3, r0
 8009184:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009188:	e00f      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800918a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800918e:	3328      	adds	r3, #40	@ 0x28
 8009190:	2101      	movs	r1, #1
 8009192:	4618      	mov	r0, r3
 8009194:	f001 f86c 	bl	800a270 <RCCEx_PLL3_Config>
 8009198:	4603      	mov	r3, r0
 800919a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800919e:	e004      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80091a6:	e000      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80091a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10b      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80091b2:	4bc0      	ldr	r3, [pc, #768]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80091b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80091ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091c2:	4abc      	ldr	r2, [pc, #752]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80091c4:	430b      	orrs	r3, r1
 80091c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80091c8:	e003      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80091d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f002 0302 	and.w	r3, r2, #2
 80091de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091e2:	2300      	movs	r3, #0
 80091e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80091e8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80091ec:	460b      	mov	r3, r1
 80091ee:	4313      	orrs	r3, r2
 80091f0:	d043      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80091f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091fa:	2b05      	cmp	r3, #5
 80091fc:	d824      	bhi.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80091fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009204 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	08009251 	.word	0x08009251
 8009208:	0800921d 	.word	0x0800921d
 800920c:	08009233 	.word	0x08009233
 8009210:	08009251 	.word	0x08009251
 8009214:	08009251 	.word	0x08009251
 8009218:	08009251 	.word	0x08009251
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800921c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009220:	3308      	adds	r3, #8
 8009222:	2101      	movs	r1, #1
 8009224:	4618      	mov	r0, r3
 8009226:	f000 ff71 	bl	800a10c <RCCEx_PLL2_Config>
 800922a:	4603      	mov	r3, r0
 800922c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009230:	e00f      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009236:	3328      	adds	r3, #40	@ 0x28
 8009238:	2101      	movs	r1, #1
 800923a:	4618      	mov	r0, r3
 800923c:	f001 f818 	bl	800a270 <RCCEx_PLL3_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009246:	e004      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800924e:	e000      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009252:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800925a:	4b96      	ldr	r3, [pc, #600]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800925c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800925e:	f023 0107 	bic.w	r1, r3, #7
 8009262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926a:	4a92      	ldr	r2, [pc, #584]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800926c:	430b      	orrs	r3, r1
 800926e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009270:	e003      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009272:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009276:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800927a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f002 0304 	and.w	r3, r2, #4
 8009286:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800928a:	2300      	movs	r3, #0
 800928c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009290:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009294:	460b      	mov	r3, r1
 8009296:	4313      	orrs	r3, r2
 8009298:	d043      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800929a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800929e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092a2:	2b05      	cmp	r3, #5
 80092a4:	d824      	bhi.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80092a6:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	080092f9 	.word	0x080092f9
 80092b0:	080092c5 	.word	0x080092c5
 80092b4:	080092db 	.word	0x080092db
 80092b8:	080092f9 	.word	0x080092f9
 80092bc:	080092f9 	.word	0x080092f9
 80092c0:	080092f9 	.word	0x080092f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092c8:	3308      	adds	r3, #8
 80092ca:	2101      	movs	r1, #1
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 ff1d 	bl	800a10c <RCCEx_PLL2_Config>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80092d8:	e00f      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092de:	3328      	adds	r3, #40	@ 0x28
 80092e0:	2101      	movs	r1, #1
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 ffc4 	bl	800a270 <RCCEx_PLL3_Config>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80092ee:	e004      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092f6:	e000      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80092f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009302:	4b6c      	ldr	r3, [pc, #432]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009306:	f023 0107 	bic.w	r1, r3, #7
 800930a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800930e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009312:	4a68      	ldr	r2, [pc, #416]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009314:	430b      	orrs	r3, r1
 8009316:	6593      	str	r3, [r2, #88]	@ 0x58
 8009318:	e003      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800931a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800931e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f002 0320 	and.w	r3, r2, #32
 800932e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009332:	2300      	movs	r3, #0
 8009334:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009338:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800933c:	460b      	mov	r3, r1
 800933e:	4313      	orrs	r3, r2
 8009340:	d055      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009346:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800934a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800934e:	d033      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009350:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009354:	d82c      	bhi.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800935a:	d02f      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800935c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009360:	d826      	bhi.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009362:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009366:	d02b      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009368:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800936c:	d820      	bhi.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800936e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009372:	d012      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009378:	d81a      	bhi.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d022      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800937e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009382:	d115      	bne.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009388:	3308      	adds	r3, #8
 800938a:	2100      	movs	r1, #0
 800938c:	4618      	mov	r0, r3
 800938e:	f000 febd 	bl	800a10c <RCCEx_PLL2_Config>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009398:	e015      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800939a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800939e:	3328      	adds	r3, #40	@ 0x28
 80093a0:	2102      	movs	r1, #2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 ff64 	bl	800a270 <RCCEx_PLL3_Config>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80093ae:	e00a      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80093b6:	e006      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80093b8:	bf00      	nop
 80093ba:	e004      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80093bc:	bf00      	nop
 80093be:	e002      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80093c0:	bf00      	nop
 80093c2:	e000      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80093c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10b      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093ce:	4b39      	ldr	r3, [pc, #228]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80093d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80093d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093de:	4a35      	ldr	r2, [pc, #212]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80093e0:	430b      	orrs	r3, r1
 80093e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80093e4:	e003      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80093fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093fe:	2300      	movs	r3, #0
 8009400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009404:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009408:	460b      	mov	r3, r1
 800940a:	4313      	orrs	r3, r2
 800940c:	d058      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800940e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009412:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009416:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800941a:	d033      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800941c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009420:	d82c      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009426:	d02f      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800942c:	d826      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800942e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009432:	d02b      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009434:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009438:	d820      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800943a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800943e:	d012      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009444:	d81a      	bhi.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d022      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800944a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800944e:	d115      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009454:	3308      	adds	r3, #8
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fe57 	bl	800a10c <RCCEx_PLL2_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009464:	e015      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800946a:	3328      	adds	r3, #40	@ 0x28
 800946c:	2102      	movs	r1, #2
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fefe 	bl	800a270 <RCCEx_PLL3_Config>
 8009474:	4603      	mov	r3, r0
 8009476:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800947a:	e00a      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009482:	e006      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009484:	bf00      	nop
 8009486:	e004      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009488:	bf00      	nop
 800948a:	e002      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800948c:	bf00      	nop
 800948e:	e000      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009492:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10e      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800949a:	4b06      	ldr	r3, [pc, #24]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800949c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800949e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80094a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094aa:	4a02      	ldr	r2, [pc, #8]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80094ac:	430b      	orrs	r3, r1
 80094ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80094b0:	e006      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80094b2:	bf00      	nop
 80094b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80094cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094d0:	2300      	movs	r3, #0
 80094d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80094da:	460b      	mov	r3, r1
 80094dc:	4313      	orrs	r3, r2
 80094de:	d055      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80094e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80094e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80094ec:	d033      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80094ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80094f2:	d82c      	bhi.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80094f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094f8:	d02f      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80094fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094fe:	d826      	bhi.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009500:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009504:	d02b      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009506:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800950a:	d820      	bhi.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800950c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009510:	d012      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009516:	d81a      	bhi.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009518:	2b00      	cmp	r3, #0
 800951a:	d022      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800951c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009520:	d115      	bne.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009526:	3308      	adds	r3, #8
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fdee 	bl	800a10c <RCCEx_PLL2_Config>
 8009530:	4603      	mov	r3, r0
 8009532:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009536:	e015      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953c:	3328      	adds	r3, #40	@ 0x28
 800953e:	2102      	movs	r1, #2
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fe95 	bl	800a270 <RCCEx_PLL3_Config>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800954c:	e00a      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009554:	e006      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009556:	bf00      	nop
 8009558:	e004      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800955a:	bf00      	nop
 800955c:	e002      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800955e:	bf00      	nop
 8009560:	e000      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009564:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10b      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800956c:	4ba1      	ldr	r3, [pc, #644]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800956e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009570:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009578:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800957c:	4a9d      	ldr	r2, [pc, #628]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800957e:	430b      	orrs	r3, r1
 8009580:	6593      	str	r3, [r2, #88]	@ 0x58
 8009582:	e003      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009584:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009588:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800958c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f002 0308 	and.w	r3, r2, #8
 8009598:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800959c:	2300      	movs	r3, #0
 800959e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80095a6:	460b      	mov	r3, r1
 80095a8:	4313      	orrs	r3, r2
 80095aa:	d01e      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80095ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095b8:	d10c      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095be:	3328      	adds	r3, #40	@ 0x28
 80095c0:	2102      	movs	r1, #2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fe54 	bl	800a270 <RCCEx_PLL3_Config>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80095d4:	4b87      	ldr	r3, [pc, #540]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80095d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095e4:	4a83      	ldr	r2, [pc, #524]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80095e6:	430b      	orrs	r3, r1
 80095e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	f002 0310 	and.w	r3, r2, #16
 80095f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095fa:	2300      	movs	r3, #0
 80095fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009600:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009604:	460b      	mov	r3, r1
 8009606:	4313      	orrs	r3, r2
 8009608:	d01e      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800960a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800960e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009616:	d10c      	bne.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800961c:	3328      	adds	r3, #40	@ 0x28
 800961e:	2102      	movs	r1, #2
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fe25 	bl	800a270 <RCCEx_PLL3_Config>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009632:	4b70      	ldr	r3, [pc, #448]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009636:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800963a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800963e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009642:	4a6c      	ldr	r2, [pc, #432]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009644:	430b      	orrs	r3, r1
 8009646:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009654:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009658:	2300      	movs	r3, #0
 800965a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800965e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009662:	460b      	mov	r3, r1
 8009664:	4313      	orrs	r3, r2
 8009666:	d03e      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800966c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009674:	d022      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8009676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800967a:	d81b      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800967c:	2b00      	cmp	r3, #0
 800967e:	d003      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009684:	d00b      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8009686:	e015      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800968c:	3308      	adds	r3, #8
 800968e:	2100      	movs	r1, #0
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fd3b 	bl	800a10c <RCCEx_PLL2_Config>
 8009696:	4603      	mov	r3, r0
 8009698:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800969c:	e00f      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800969e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096a2:	3328      	adds	r3, #40	@ 0x28
 80096a4:	2102      	movs	r1, #2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 fde2 	bl	800a270 <RCCEx_PLL3_Config>
 80096ac:	4603      	mov	r3, r0
 80096ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80096b2:	e004      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80096ba:	e000      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80096bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10b      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096c6:	4b4b      	ldr	r3, [pc, #300]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80096c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80096ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096d6:	4a47      	ldr	r2, [pc, #284]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80096d8:	430b      	orrs	r3, r1
 80096da:	6593      	str	r3, [r2, #88]	@ 0x58
 80096dc:	e003      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80096e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80096f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096f4:	2300      	movs	r3, #0
 80096f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80096fc:	460b      	mov	r3, r1
 80096fe:	4313      	orrs	r3, r2
 8009700:	d03b      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800970a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800970e:	d01f      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8009710:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009714:	d818      	bhi.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800971a:	d003      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800971c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009720:	d007      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8009722:	e011      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009724:	4b33      	ldr	r3, [pc, #204]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009728:	4a32      	ldr	r2, [pc, #200]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800972a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800972e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009730:	e00f      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009736:	3328      	adds	r3, #40	@ 0x28
 8009738:	2101      	movs	r1, #1
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fd98 	bl	800a270 <RCCEx_PLL3_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8009746:	e004      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800974e:	e000      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8009750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009752:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10b      	bne.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800975a:	4b26      	ldr	r3, [pc, #152]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800975c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800975e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800976a:	4a22      	ldr	r2, [pc, #136]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800976c:	430b      	orrs	r3, r1
 800976e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009770:	e003      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009772:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009776:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800977a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009786:	673b      	str	r3, [r7, #112]	@ 0x70
 8009788:	2300      	movs	r3, #0
 800978a:	677b      	str	r3, [r7, #116]	@ 0x74
 800978c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009790:	460b      	mov	r3, r1
 8009792:	4313      	orrs	r3, r2
 8009794:	d034      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800979a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80097a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097a4:	d007      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80097a6:	e011      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a8:	4b12      	ldr	r3, [pc, #72]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80097aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ac:	4a11      	ldr	r2, [pc, #68]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80097ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80097b4:	e00e      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ba:	3308      	adds	r3, #8
 80097bc:	2102      	movs	r1, #2
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fca4 	bl	800a10c <RCCEx_PLL2_Config>
 80097c4:	4603      	mov	r3, r0
 80097c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80097ca:	e003      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10d      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80097dc:	4b05      	ldr	r3, [pc, #20]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80097de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ea:	4a02      	ldr	r2, [pc, #8]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80097ec:	430b      	orrs	r3, r1
 80097ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097f0:	e006      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80097f2:	bf00      	nop
 80097f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800980c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800980e:	2300      	movs	r3, #0
 8009810:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009812:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009816:	460b      	mov	r3, r1
 8009818:	4313      	orrs	r3, r2
 800981a:	d00c      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800981c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009820:	3328      	adds	r3, #40	@ 0x28
 8009822:	2102      	movs	r1, #2
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fd23 	bl	800a270 <RCCEx_PLL3_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009842:	663b      	str	r3, [r7, #96]	@ 0x60
 8009844:	2300      	movs	r3, #0
 8009846:	667b      	str	r3, [r7, #100]	@ 0x64
 8009848:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800984c:	460b      	mov	r3, r1
 800984e:	4313      	orrs	r3, r2
 8009850:	d038      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800985e:	d018      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8009860:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009864:	d811      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800986a:	d014      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800986c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009870:	d80b      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d011      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8009876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800987a:	d106      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987c:	4bc3      	ldr	r3, [pc, #780]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800987e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009880:	4ac2      	ldr	r2, [pc, #776]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009888:	e008      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009890:	e004      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009892:	bf00      	nop
 8009894:	e002      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009896:	bf00      	nop
 8009898:	e000      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800989a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800989c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10b      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80098a4:	4bb9      	ldr	r3, [pc, #740]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80098a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b4:	4ab5      	ldr	r2, [pc, #724]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80098b6:	430b      	orrs	r3, r1
 80098b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80098ba:	e003      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80098d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098d2:	2300      	movs	r3, #0
 80098d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80098da:	460b      	mov	r3, r1
 80098dc:	4313      	orrs	r3, r2
 80098de:	d009      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098e0:	4baa      	ldr	r3, [pc, #680]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80098e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80098e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098ee:	4aa7      	ldr	r2, [pc, #668]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80098f0:	430b      	orrs	r3, r1
 80098f2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009900:	653b      	str	r3, [r7, #80]	@ 0x50
 8009902:	2300      	movs	r3, #0
 8009904:	657b      	str	r3, [r7, #84]	@ 0x54
 8009906:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800990a:	460b      	mov	r3, r1
 800990c:	4313      	orrs	r3, r2
 800990e:	d009      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009910:	4b9e      	ldr	r3, [pc, #632]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009914:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800991c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800991e:	4a9b      	ldr	r2, [pc, #620]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009920:	430b      	orrs	r3, r1
 8009922:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009932:	2300      	movs	r3, #0
 8009934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009936:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800993a:	460b      	mov	r3, r1
 800993c:	4313      	orrs	r3, r2
 800993e:	d009      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009940:	4b92      	ldr	r3, [pc, #584]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009944:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800994c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800994e:	4a8f      	ldr	r2, [pc, #572]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009950:	430b      	orrs	r3, r1
 8009952:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009960:	643b      	str	r3, [r7, #64]	@ 0x40
 8009962:	2300      	movs	r3, #0
 8009964:	647b      	str	r3, [r7, #68]	@ 0x44
 8009966:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800996a:	460b      	mov	r3, r1
 800996c:	4313      	orrs	r3, r2
 800996e:	d00e      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009970:	4b86      	ldr	r3, [pc, #536]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	4a85      	ldr	r2, [pc, #532]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800997a:	6113      	str	r3, [r2, #16]
 800997c:	4b83      	ldr	r3, [pc, #524]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800997e:	6919      	ldr	r1, [r3, #16]
 8009980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009984:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009988:	4a80      	ldr	r2, [pc, #512]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800998a:	430b      	orrs	r3, r1
 800998c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800998e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800999a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800999c:	2300      	movs	r3, #0
 800999e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80099a4:	460b      	mov	r3, r1
 80099a6:	4313      	orrs	r3, r2
 80099a8:	d009      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80099aa:	4b78      	ldr	r3, [pc, #480]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80099ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80099b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b8:	4a74      	ldr	r2, [pc, #464]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80099ba:	430b      	orrs	r3, r1
 80099bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80099be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80099ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80099cc:	2300      	movs	r3, #0
 80099ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80099d4:	460b      	mov	r3, r1
 80099d6:	4313      	orrs	r3, r2
 80099d8:	d00a      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80099da:	4b6c      	ldr	r3, [pc, #432]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80099dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099de:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80099e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099ea:	4a68      	ldr	r2, [pc, #416]	@ (8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80099ec:	430b      	orrs	r3, r1
 80099ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80099f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	2100      	movs	r1, #0
 80099fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009a06:	460b      	mov	r3, r1
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	d011      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a10:	3308      	adds	r3, #8
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fb79 	bl	800a10c <RCCEx_PLL2_Config>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009a20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d003      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a38:	2100      	movs	r1, #0
 8009a3a:	6239      	str	r1, [r7, #32]
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009a46:	460b      	mov	r3, r1
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	d011      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a50:	3308      	adds	r3, #8
 8009a52:	2101      	movs	r1, #1
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 fb59 	bl	800a10c <RCCEx_PLL2_Config>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009a60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d003      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	2100      	movs	r1, #0
 8009a7a:	61b9      	str	r1, [r7, #24]
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009a86:	460b      	mov	r3, r1
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	d011      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a90:	3308      	adds	r3, #8
 8009a92:	2102      	movs	r1, #2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 fb39 	bl	800a10c <RCCEx_PLL2_Config>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d003      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009aac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	2100      	movs	r1, #0
 8009aba:	6139      	str	r1, [r7, #16]
 8009abc:	f003 0308 	and.w	r3, r3, #8
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	d011      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad0:	3328      	adds	r3, #40	@ 0x28
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fbcb 	bl	800a270 <RCCEx_PLL3_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009ae0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d003      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009aec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	2100      	movs	r1, #0
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	f003 0310 	and.w	r3, r3, #16
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009b06:	460b      	mov	r3, r1
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	d011      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b10:	3328      	adds	r3, #40	@ 0x28
 8009b12:	2101      	movs	r1, #1
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fbab 	bl	800a270 <RCCEx_PLL3_Config>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009b20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d003      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6039      	str	r1, [r7, #0]
 8009b3c:	f003 0320 	and.w	r3, r3, #32
 8009b40:	607b      	str	r3, [r7, #4]
 8009b42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009b46:	460b      	mov	r3, r1
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	d011      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b50:	3328      	adds	r3, #40	@ 0x28
 8009b52:	2102      	movs	r1, #2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 fb8b 	bl	800a270 <RCCEx_PLL3_Config>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009b60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d003      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009b70:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	e000      	b.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009b84:	46bd      	mov	sp, r7
 8009b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b8a:	bf00      	nop
 8009b8c:	58024400 	.word	0x58024400

08009b90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009b94:	f7fe fde2 	bl	800875c <HAL_RCC_GetHCLKFreq>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	4b06      	ldr	r3, [pc, #24]	@ (8009bb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	091b      	lsrs	r3, r3, #4
 8009ba0:	f003 0307 	and.w	r3, r3, #7
 8009ba4:	4904      	ldr	r1, [pc, #16]	@ (8009bb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009ba6:	5ccb      	ldrb	r3, [r1, r3]
 8009ba8:	f003 031f 	and.w	r3, r3, #31
 8009bac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	58024400 	.word	0x58024400
 8009bb8:	08013178 	.word	0x08013178

08009bbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b089      	sub	sp, #36	@ 0x24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bc4:	4ba1      	ldr	r3, [pc, #644]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009bce:	4b9f      	ldr	r3, [pc, #636]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd2:	0b1b      	lsrs	r3, r3, #12
 8009bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009bda:	4b9c      	ldr	r3, [pc, #624]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bde:	091b      	lsrs	r3, r3, #4
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009be6:	4b99      	ldr	r3, [pc, #612]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bea:	08db      	lsrs	r3, r3, #3
 8009bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	fb02 f303 	mul.w	r3, r2, r3
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 8111 	beq.w	8009e2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	f000 8083 	beq.w	8009d18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	f200 80a1 	bhi.w	8009d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d056      	beq.n	8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c26:	e099      	b.n	8009d5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c28:	4b88      	ldr	r3, [pc, #544]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0320 	and.w	r3, r3, #32
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d02d      	beq.n	8009c90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c34:	4b85      	ldr	r3, [pc, #532]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	08db      	lsrs	r3, r3, #3
 8009c3a:	f003 0303 	and.w	r3, r3, #3
 8009c3e:	4a84      	ldr	r2, [pc, #528]	@ (8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c40:	fa22 f303 	lsr.w	r3, r2, r3
 8009c44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	ee07 3a90 	vmov	s15, r3
 8009c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5e:	4b7b      	ldr	r3, [pc, #492]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c8e:	e087      	b.n	8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009e58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cd2:	e065      	b.n	8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ce6:	4b59      	ldr	r3, [pc, #356]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cfa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d16:	e043      	b.n	8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009e60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d2a:	4b48      	ldr	r3, [pc, #288]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d5a:	e021      	b.n	8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d6e:	4b37      	ldr	r3, [pc, #220]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009e54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009da0:	4b2a      	ldr	r3, [pc, #168]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da4:	0a5b      	lsrs	r3, r3, #9
 8009da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009daa:	ee07 3a90 	vmov	s15, r3
 8009dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dc6:	ee17 2a90 	vmov	r2, s15
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009dce:	4b1f      	ldr	r3, [pc, #124]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd2:	0c1b      	lsrs	r3, r3, #16
 8009dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dd8:	ee07 3a90 	vmov	s15, r3
 8009ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009de4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009df4:	ee17 2a90 	vmov	r2, s15
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009dfc:	4b13      	ldr	r3, [pc, #76]	@ (8009e4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e00:	0e1b      	lsrs	r3, r3, #24
 8009e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e22:	ee17 2a90 	vmov	r2, s15
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e2a:	e008      	b.n	8009e3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	609a      	str	r2, [r3, #8]
}
 8009e3e:	bf00      	nop
 8009e40:	3724      	adds	r7, #36	@ 0x24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	58024400 	.word	0x58024400
 8009e50:	03d09000 	.word	0x03d09000
 8009e54:	46000000 	.word	0x46000000
 8009e58:	4c742400 	.word	0x4c742400
 8009e5c:	4a742400 	.word	0x4a742400
 8009e60:	4bb71b00 	.word	0x4bb71b00

08009e64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b089      	sub	sp, #36	@ 0x24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e6c:	4ba1      	ldr	r3, [pc, #644]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009e76:	4b9f      	ldr	r3, [pc, #636]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7a:	0d1b      	lsrs	r3, r3, #20
 8009e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e82:	4b9c      	ldr	r3, [pc, #624]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009e8e:	4b99      	ldr	r3, [pc, #612]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e92:	08db      	lsrs	r3, r3, #3
 8009e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	fb02 f303 	mul.w	r3, r2, r3
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 8111 	beq.w	800a0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	f000 8083 	beq.w	8009fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	f200 80a1 	bhi.w	800a004 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d056      	beq.n	8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ece:	e099      	b.n	800a004 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ed0:	4b88      	ldr	r3, [pc, #544]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0320 	and.w	r3, r3, #32
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d02d      	beq.n	8009f38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009edc:	4b85      	ldr	r3, [pc, #532]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	08db      	lsrs	r3, r3, #3
 8009ee2:	f003 0303 	and.w	r3, r3, #3
 8009ee6:	4a84      	ldr	r2, [pc, #528]	@ (800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8009eec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	ee07 3a90 	vmov	s15, r3
 8009ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	ee07 3a90 	vmov	s15, r3
 8009efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f06:	4b7b      	ldr	r3, [pc, #492]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f36:	e087      	b.n	800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a100 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f4a:	4b6a      	ldr	r3, [pc, #424]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f7a:	e065      	b.n	800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f8e:	4b59      	ldr	r3, [pc, #356]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fa2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fbe:	e043      	b.n	800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd2:	4b48      	ldr	r3, [pc, #288]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fe6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a002:	e021      	b.n	800a048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a016:	4b37      	ldr	r3, [pc, #220]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a026:	ed97 6a03 	vldr	s12, [r7, #12]
 800a02a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a046:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a048:	4b2a      	ldr	r3, [pc, #168]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a04a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a04c:	0a5b      	lsrs	r3, r3, #9
 800a04e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a05e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a062:	edd7 6a07 	vldr	s13, [r7, #28]
 800a066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a06a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a06e:	ee17 2a90 	vmov	r2, s15
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a076:	4b1f      	ldr	r3, [pc, #124]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07a:	0c1b      	lsrs	r3, r3, #16
 800a07c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a080:	ee07 3a90 	vmov	s15, r3
 800a084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a08c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a090:	edd7 6a07 	vldr	s13, [r7, #28]
 800a094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a09c:	ee17 2a90 	vmov	r2, s15
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a0a4:	4b13      	ldr	r3, [pc, #76]	@ (800a0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0a8:	0e1b      	lsrs	r3, r3, #24
 800a0aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ca:	ee17 2a90 	vmov	r2, s15
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a0d2:	e008      	b.n	800a0e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	609a      	str	r2, [r3, #8]
}
 800a0e6:	bf00      	nop
 800a0e8:	3724      	adds	r7, #36	@ 0x24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	58024400 	.word	0x58024400
 800a0f8:	03d09000 	.word	0x03d09000
 800a0fc:	46000000 	.word	0x46000000
 800a100:	4c742400 	.word	0x4c742400
 800a104:	4a742400 	.word	0x4a742400
 800a108:	4bb71b00 	.word	0x4bb71b00

0800a10c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a11a:	4b53      	ldr	r3, [pc, #332]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11e:	f003 0303 	and.w	r3, r3, #3
 800a122:	2b03      	cmp	r3, #3
 800a124:	d101      	bne.n	800a12a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e099      	b.n	800a25e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a12a:	4b4f      	ldr	r3, [pc, #316]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a4e      	ldr	r2, [pc, #312]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a130:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a136:	f7f9 fc7d 	bl	8003a34 <HAL_GetTick>
 800a13a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a13c:	e008      	b.n	800a150 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a13e:	f7f9 fc79 	bl	8003a34 <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d901      	bls.n	800a150 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e086      	b.n	800a25e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a150:	4b45      	ldr	r3, [pc, #276]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1f0      	bne.n	800a13e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a15c:	4b42      	ldr	r3, [pc, #264]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a160:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	031b      	lsls	r3, r3, #12
 800a16a:	493f      	ldr	r1, [pc, #252]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	3b01      	subs	r3, #1
 800a176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	3b01      	subs	r3, #1
 800a180:	025b      	lsls	r3, r3, #9
 800a182:	b29b      	uxth	r3, r3
 800a184:	431a      	orrs	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	041b      	lsls	r3, r3, #16
 800a18e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a192:	431a      	orrs	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	3b01      	subs	r3, #1
 800a19a:	061b      	lsls	r3, r3, #24
 800a19c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a1a0:	4931      	ldr	r1, [pc, #196]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1a6:	4b30      	ldr	r3, [pc, #192]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	492d      	ldr	r1, [pc, #180]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a1b8:	4b2b      	ldr	r3, [pc, #172]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1bc:	f023 0220 	bic.w	r2, r3, #32
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	4928      	ldr	r1, [pc, #160]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a1ca:	4b27      	ldr	r3, [pc, #156]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ce:	4a26      	ldr	r2, [pc, #152]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1d0:	f023 0310 	bic.w	r3, r3, #16
 800a1d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a1d6:	4b24      	ldr	r3, [pc, #144]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1da:	4b24      	ldr	r3, [pc, #144]	@ (800a26c <RCCEx_PLL2_Config+0x160>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	69d2      	ldr	r2, [r2, #28]
 800a1e2:	00d2      	lsls	r2, r2, #3
 800a1e4:	4920      	ldr	r1, [pc, #128]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a1ea:	4b1f      	ldr	r3, [pc, #124]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ee:	4a1e      	ldr	r2, [pc, #120]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1f0:	f043 0310 	orr.w	r3, r3, #16
 800a1f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d106      	bne.n	800a20a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a1fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a200:	4a19      	ldr	r2, [pc, #100]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a202:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a206:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a208:	e00f      	b.n	800a22a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d106      	bne.n	800a21e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a210:	4b15      	ldr	r3, [pc, #84]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a214:	4a14      	ldr	r2, [pc, #80]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a21a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a21c:	e005      	b.n	800a22a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a21e:	4b12      	ldr	r3, [pc, #72]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a222:	4a11      	ldr	r2, [pc, #68]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a228:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a22a:	4b0f      	ldr	r3, [pc, #60]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a0e      	ldr	r2, [pc, #56]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a230:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a236:	f7f9 fbfd 	bl	8003a34 <HAL_GetTick>
 800a23a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a23c:	e008      	b.n	800a250 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a23e:	f7f9 fbf9 	bl	8003a34 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d901      	bls.n	800a250 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e006      	b.n	800a25e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a250:	4b05      	ldr	r3, [pc, #20]	@ (800a268 <RCCEx_PLL2_Config+0x15c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0f0      	beq.n	800a23e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	58024400 	.word	0x58024400
 800a26c:	ffff0007 	.word	0xffff0007

0800a270 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a27e:	4b53      	ldr	r3, [pc, #332]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	2b03      	cmp	r3, #3
 800a288:	d101      	bne.n	800a28e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e099      	b.n	800a3c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a28e:	4b4f      	ldr	r3, [pc, #316]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a4e      	ldr	r2, [pc, #312]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a29a:	f7f9 fbcb 	bl	8003a34 <HAL_GetTick>
 800a29e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2a0:	e008      	b.n	800a2b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2a2:	f7f9 fbc7 	bl	8003a34 <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d901      	bls.n	800a2b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e086      	b.n	800a3c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2b4:	4b45      	ldr	r3, [pc, #276]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1f0      	bne.n	800a2a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a2c0:	4b42      	ldr	r3, [pc, #264]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	051b      	lsls	r3, r3, #20
 800a2ce:	493f      	ldr	r1, [pc, #252]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	025b      	lsls	r3, r3, #9
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	431a      	orrs	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	041b      	lsls	r3, r3, #16
 800a2f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	061b      	lsls	r3, r3, #24
 800a300:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a304:	4931      	ldr	r1, [pc, #196]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a306:	4313      	orrs	r3, r2
 800a308:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a30a:	4b30      	ldr	r3, [pc, #192]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	492d      	ldr	r1, [pc, #180]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a31c:	4b2b      	ldr	r3, [pc, #172]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a320:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	4928      	ldr	r1, [pc, #160]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a32e:	4b27      	ldr	r3, [pc, #156]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a332:	4a26      	ldr	r2, [pc, #152]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a338:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a33a:	4b24      	ldr	r3, [pc, #144]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a33c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a33e:	4b24      	ldr	r3, [pc, #144]	@ (800a3d0 <RCCEx_PLL3_Config+0x160>)
 800a340:	4013      	ands	r3, r2
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	69d2      	ldr	r2, [r2, #28]
 800a346:	00d2      	lsls	r2, r2, #3
 800a348:	4920      	ldr	r1, [pc, #128]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a34e:	4b1f      	ldr	r3, [pc, #124]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a352:	4a1e      	ldr	r2, [pc, #120]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a358:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d106      	bne.n	800a36e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a360:	4b1a      	ldr	r3, [pc, #104]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a364:	4a19      	ldr	r2, [pc, #100]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a366:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a36a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a36c:	e00f      	b.n	800a38e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d106      	bne.n	800a382 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a374:	4b15      	ldr	r3, [pc, #84]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a378:	4a14      	ldr	r2, [pc, #80]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a37a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a37e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a380:	e005      	b.n	800a38e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a382:	4b12      	ldr	r3, [pc, #72]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a386:	4a11      	ldr	r2, [pc, #68]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a388:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a38c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a38e:	4b0f      	ldr	r3, [pc, #60]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a0e      	ldr	r2, [pc, #56]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a39a:	f7f9 fb4b 	bl	8003a34 <HAL_GetTick>
 800a39e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3a0:	e008      	b.n	800a3b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3a2:	f7f9 fb47 	bl	8003a34 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d901      	bls.n	800a3b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e006      	b.n	800a3c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3b4:	4b05      	ldr	r3, [pc, #20]	@ (800a3cc <RCCEx_PLL3_Config+0x15c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0f0      	beq.n	800a3a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	58024400 	.word	0x58024400
 800a3d0:	ffff0007 	.word	0xffff0007

0800a3d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e10f      	b.n	800a606 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a87      	ldr	r2, [pc, #540]	@ (800a610 <HAL_SPI_Init+0x23c>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00f      	beq.n	800a416 <HAL_SPI_Init+0x42>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a86      	ldr	r2, [pc, #536]	@ (800a614 <HAL_SPI_Init+0x240>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d00a      	beq.n	800a416 <HAL_SPI_Init+0x42>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a84      	ldr	r2, [pc, #528]	@ (800a618 <HAL_SPI_Init+0x244>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d005      	beq.n	800a416 <HAL_SPI_Init+0x42>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	2b0f      	cmp	r3, #15
 800a410:	d901      	bls.n	800a416 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e0f7      	b.n	800a606 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f001 f968 	bl	800b6ec <SPI_GetPacketSize>
 800a41c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a7b      	ldr	r2, [pc, #492]	@ (800a610 <HAL_SPI_Init+0x23c>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d00c      	beq.n	800a442 <HAL_SPI_Init+0x6e>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a79      	ldr	r2, [pc, #484]	@ (800a614 <HAL_SPI_Init+0x240>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d007      	beq.n	800a442 <HAL_SPI_Init+0x6e>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a78      	ldr	r2, [pc, #480]	@ (800a618 <HAL_SPI_Init+0x244>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d002      	beq.n	800a442 <HAL_SPI_Init+0x6e>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b08      	cmp	r3, #8
 800a440:	d811      	bhi.n	800a466 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a446:	4a72      	ldr	r2, [pc, #456]	@ (800a610 <HAL_SPI_Init+0x23c>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d009      	beq.n	800a460 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a70      	ldr	r2, [pc, #448]	@ (800a614 <HAL_SPI_Init+0x240>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d004      	beq.n	800a460 <HAL_SPI_Init+0x8c>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a6f      	ldr	r2, [pc, #444]	@ (800a618 <HAL_SPI_Init+0x244>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d104      	bne.n	800a46a <HAL_SPI_Init+0x96>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b10      	cmp	r3, #16
 800a464:	d901      	bls.n	800a46a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e0cd      	b.n	800a606 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d106      	bne.n	800a484 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7f8 fa6a 	bl	8002958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f022 0201 	bic.w	r2, r2, #1
 800a49a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a4a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4b0:	d119      	bne.n	800a4e6 <HAL_SPI_Init+0x112>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4ba:	d103      	bne.n	800a4c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d008      	beq.n	800a4d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10c      	bne.n	800a4e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a4d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4d4:	d107      	bne.n	800a4e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a4e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00f      	beq.n	800a512 <HAL_SPI_Init+0x13e>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	2b06      	cmp	r3, #6
 800a4f8:	d90b      	bls.n	800a512 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	e007      	b.n	800a522 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a520:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	69da      	ldr	r2, [r3, #28]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52a:	431a      	orrs	r2, r3
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	431a      	orrs	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a534:	ea42 0103 	orr.w	r1, r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68da      	ldr	r2, [r3, #12]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54c:	431a      	orrs	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a552:	431a      	orrs	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	431a      	orrs	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	431a      	orrs	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	695b      	ldr	r3, [r3, #20]
 800a564:	431a      	orrs	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	431a      	orrs	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a576:	431a      	orrs	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	431a      	orrs	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a582:	ea42 0103 	orr.w	r1, r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d113      	bne.n	800a5c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a5c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0201 	bic.w	r2, r2, #1
 800a5d0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00a      	beq.n	800a5f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	430a      	orrs	r2, r1
 800a5f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	40013000 	.word	0x40013000
 800a614:	40003800 	.word	0x40003800
 800a618:	40003c00 	.word	0x40003c00

0800a61c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af02      	add	r7, sp, #8
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	603b      	str	r3, [r7, #0]
 800a628:	4613      	mov	r3, r2
 800a62a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3320      	adds	r3, #32
 800a632:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a634:	f7f9 f9fe 	bl	8003a34 <HAL_GetTick>
 800a638:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b01      	cmp	r3, #1
 800a644:	d001      	beq.n	800a64a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a646:	2302      	movs	r3, #2
 800a648:	e1d1      	b.n	800a9ee <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <HAL_SPI_Transmit+0x3a>
 800a650:	88fb      	ldrh	r3, [r7, #6]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e1c9      	b.n	800a9ee <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_SPI_Transmit+0x4c>
 800a664:	2302      	movs	r3, #2
 800a666:	e1c2      	b.n	800a9ee <HAL_SPI_Transmit+0x3d2>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2203      	movs	r2, #3
 800a674:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	88fa      	ldrh	r2, [r7, #6]
 800a68a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	88fa      	ldrh	r2, [r7, #6]
 800a692:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a6c0:	d108      	bne.n	800a6d4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	e009      	b.n	800a6e8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a6e6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	4b96      	ldr	r3, [pc, #600]	@ (800a948 <HAL_SPI_Transmit+0x32c>)
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	88f9      	ldrh	r1, [r7, #6]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	6812      	ldr	r2, [r2, #0]
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f042 0201 	orr.w	r2, r2, #1
 800a70a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a714:	d107      	bne.n	800a726 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a724:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	2b0f      	cmp	r3, #15
 800a72c:	d947      	bls.n	800a7be <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a72e:	e03f      	b.n	800a7b0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	f003 0302 	and.w	r3, r3, #2
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d114      	bne.n	800a768 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6812      	ldr	r2, [r2, #0]
 800a748:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a74e:	1d1a      	adds	r2, r3, #4
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	3b01      	subs	r3, #1
 800a75e:	b29a      	uxth	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a766:	e023      	b.n	800a7b0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a768:	f7f9 f964 	bl	8003a34 <HAL_GetTick>
 800a76c:	4602      	mov	r2, r0
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	429a      	cmp	r2, r3
 800a776:	d803      	bhi.n	800a780 <HAL_SPI_Transmit+0x164>
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77e:	d102      	bne.n	800a786 <HAL_SPI_Transmit+0x16a>
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d114      	bne.n	800a7b0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 fee2 	bl	800b550 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a792:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e11e      	b.n	800a9ee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1b9      	bne.n	800a730 <HAL_SPI_Transmit+0x114>
 800a7bc:	e0f1      	b.n	800a9a2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	2b07      	cmp	r3, #7
 800a7c4:	f240 80e6 	bls.w	800a994 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a7c8:	e05d      	b.n	800a886 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d132      	bne.n	800a83e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d918      	bls.n	800a816 <HAL_SPI_Transmit+0x1fa>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d014      	beq.n	800a816 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6812      	ldr	r2, [r2, #0]
 800a7f6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7fc:	1d1a      	adds	r2, r3, #4
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a808:	b29b      	uxth	r3, r3
 800a80a:	3b02      	subs	r3, #2
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a814:	e037      	b.n	800a886 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a81a:	881a      	ldrh	r2, [r3, #0]
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a824:	1c9a      	adds	r2, r3, #2
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a830:	b29b      	uxth	r3, r3
 800a832:	3b01      	subs	r3, #1
 800a834:	b29a      	uxth	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a83c:	e023      	b.n	800a886 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a83e:	f7f9 f8f9 	bl	8003a34 <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d803      	bhi.n	800a856 <HAL_SPI_Transmit+0x23a>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a854:	d102      	bne.n	800a85c <HAL_SPI_Transmit+0x240>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d114      	bne.n	800a886 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 fe77 	bl	800b550 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a868:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e0b3      	b.n	800a9ee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d19b      	bne.n	800a7ca <HAL_SPI_Transmit+0x1ae>
 800a892:	e086      	b.n	800a9a2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d154      	bne.n	800a94c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d918      	bls.n	800a8e0 <HAL_SPI_Transmit+0x2c4>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b2:	2b40      	cmp	r3, #64	@ 0x40
 800a8b4:	d914      	bls.n	800a8e0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6812      	ldr	r2, [r2, #0]
 800a8c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8c6:	1d1a      	adds	r2, r3, #4
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	3b04      	subs	r3, #4
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a8de:	e059      	b.n	800a994 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d917      	bls.n	800a91c <HAL_SPI_Transmit+0x300>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d013      	beq.n	800a91c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8f8:	881a      	ldrh	r2, [r3, #0]
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a902:	1c9a      	adds	r2, r3, #2
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a90e:	b29b      	uxth	r3, r3
 800a910:	3b02      	subs	r3, #2
 800a912:	b29a      	uxth	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a91a:	e03b      	b.n	800a994 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3320      	adds	r3, #32
 800a926:	7812      	ldrb	r2, [r2, #0]
 800a928:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	3b01      	subs	r3, #1
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a946:	e025      	b.n	800a994 <HAL_SPI_Transmit+0x378>
 800a948:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a94c:	f7f9 f872 	bl	8003a34 <HAL_GetTick>
 800a950:	4602      	mov	r2, r0
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d803      	bhi.n	800a964 <HAL_SPI_Transmit+0x348>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a962:	d102      	bne.n	800a96a <HAL_SPI_Transmit+0x34e>
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d114      	bne.n	800a994 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f000 fdf0 	bl	800b550 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a976:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a990:	2303      	movs	r3, #3
 800a992:	e02c      	b.n	800a9ee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f47f af79 	bne.w	800a894 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	2108      	movs	r1, #8
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f000 fe6f 	bl	800b690 <SPI_WaitOnFlagUntilTimeout>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9be:	f043 0220 	orr.w	r2, r3, #32
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f000 fdc1 	bl	800b550 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e000      	b.n	800a9ee <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
  }
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop

0800a9f8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	603b      	str	r3, [r7, #0]
 800aa04:	4613      	mov	r3, r2
 800aa06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa0c:	095b      	lsrs	r3, r3, #5
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	3301      	adds	r3, #1
 800aa12:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3330      	adds	r3, #48	@ 0x30
 800aa1a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa1c:	f7f9 f80a 	bl	8003a34 <HAL_GetTick>
 800aa20:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d001      	beq.n	800aa32 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	e250      	b.n	800aed4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <HAL_SPI_Receive+0x46>
 800aa38:	88fb      	ldrh	r3, [r7, #6]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e248      	b.n	800aed4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <HAL_SPI_Receive+0x58>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e241      	b.n	800aed4 <HAL_SPI_Receive+0x4dc>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2204      	movs	r2, #4
 800aa5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	88fa      	ldrh	r2, [r7, #6]
 800aa72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	88fa      	ldrh	r2, [r7, #6]
 800aa7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800aaa8:	d108      	bne.n	800aabc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	e009      	b.n	800aad0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800aace:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	4b95      	ldr	r3, [pc, #596]	@ (800ad2c <HAL_SPI_Receive+0x334>)
 800aad8:	4013      	ands	r3, r2
 800aada:	88f9      	ldrh	r1, [r7, #6]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	6812      	ldr	r2, [r2, #0]
 800aae0:	430b      	orrs	r3, r1
 800aae2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0201 	orr.w	r2, r2, #1
 800aaf2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aafc:	d107      	bne.n	800ab0e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	2b0f      	cmp	r3, #15
 800ab14:	d96c      	bls.n	800abf0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ab16:	e064      	b.n	800abe2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d114      	bne.n	800ab58 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ab38:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab3e:	1d1a      	adds	r2, r3, #4
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ab56:	e044      	b.n	800abe2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	8bfa      	ldrh	r2, [r7, #30]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d919      	bls.n	800ab9a <HAL_SPI_Receive+0x1a2>
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d014      	beq.n	800ab9a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ab7a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab80:	1d1a      	adds	r2, r3, #4
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ab98:	e023      	b.n	800abe2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab9a:	f7f8 ff4b 	bl	8003a34 <HAL_GetTick>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d803      	bhi.n	800abb2 <HAL_SPI_Receive+0x1ba>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d102      	bne.n	800abb8 <HAL_SPI_Receive+0x1c0>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d114      	bne.n	800abe2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 fcc9 	bl	800b550 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800abde:	2303      	movs	r3, #3
 800abe0:	e178      	b.n	800aed4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abe8:	b29b      	uxth	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d194      	bne.n	800ab18 <HAL_SPI_Receive+0x120>
 800abee:	e15e      	b.n	800aeae <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	2b07      	cmp	r3, #7
 800abf6:	f240 8153 	bls.w	800aea0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800abfa:	e08f      	b.n	800ad1c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d114      	bne.n	800ac3c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac16:	69ba      	ldr	r2, [r7, #24]
 800ac18:	8812      	ldrh	r2, [r2, #0]
 800ac1a:	b292      	uxth	r2, r2
 800ac1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac22:	1c9a      	adds	r2, r3, #2
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	3b01      	subs	r3, #1
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ac3a:	e06f      	b.n	800ad1c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	8bfa      	ldrh	r2, [r7, #30]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d924      	bls.n	800ac94 <HAL_SPI_Receive+0x29c>
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d01f      	beq.n	800ac94 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac58:	69ba      	ldr	r2, [r7, #24]
 800ac5a:	8812      	ldrh	r2, [r2, #0]
 800ac5c:	b292      	uxth	r2, r2
 800ac5e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac64:	1c9a      	adds	r2, r3, #2
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac6e:	69ba      	ldr	r2, [r7, #24]
 800ac70:	8812      	ldrh	r2, [r2, #0]
 800ac72:	b292      	uxth	r2, r2
 800ac74:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac7a:	1c9a      	adds	r2, r3, #2
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	3b02      	subs	r3, #2
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ac92:	e043      	b.n	800ad1c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d119      	bne.n	800acd4 <HAL_SPI_Receive+0x2dc>
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d014      	beq.n	800acd4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acae:	69ba      	ldr	r2, [r7, #24]
 800acb0:	8812      	ldrh	r2, [r2, #0]
 800acb2:	b292      	uxth	r2, r2
 800acb4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acba:	1c9a      	adds	r2, r3, #2
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	3b01      	subs	r3, #1
 800acca:	b29a      	uxth	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800acd2:	e023      	b.n	800ad1c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acd4:	f7f8 feae 	bl	8003a34 <HAL_GetTick>
 800acd8:	4602      	mov	r2, r0
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d803      	bhi.n	800acec <HAL_SPI_Receive+0x2f4>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acea:	d102      	bne.n	800acf2 <HAL_SPI_Receive+0x2fa>
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d114      	bne.n	800ad1c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 fc2c 	bl	800b550 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acfe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e0db      	b.n	800aed4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f47f af69 	bne.w	800abfc <HAL_SPI_Receive+0x204>
 800ad2a:	e0c0      	b.n	800aeae <HAL_SPI_Receive+0x4b6>
 800ad2c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d117      	bne.n	800ad76 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad52:	7812      	ldrb	r2, [r2, #0]
 800ad54:	b2d2      	uxtb	r2, r2
 800ad56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ad74:	e094      	b.n	800aea0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	8bfa      	ldrh	r2, [r7, #30]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d946      	bls.n	800ae12 <HAL_SPI_Receive+0x41a>
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d041      	beq.n	800ae12 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad9a:	7812      	ldrb	r2, [r2, #0]
 800ad9c:	b2d2      	uxtb	r2, r2
 800ad9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ada4:	1c5a      	adds	r2, r3, #1
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adb6:	7812      	ldrb	r2, [r2, #0]
 800adb8:	b2d2      	uxtb	r2, r2
 800adba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adc0:	1c5a      	adds	r2, r3, #1
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800add2:	7812      	ldrb	r2, [r2, #0]
 800add4:	b2d2      	uxtb	r2, r2
 800add6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adee:	7812      	ldrb	r2, [r2, #0]
 800adf0:	b2d2      	uxtb	r2, r2
 800adf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	3b04      	subs	r3, #4
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ae10:	e046      	b.n	800aea0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d81c      	bhi.n	800ae58 <HAL_SPI_Receive+0x460>
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d017      	beq.n	800ae58 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae34:	7812      	ldrb	r2, [r2, #0]
 800ae36:	b2d2      	uxtb	r2, r2
 800ae38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae3e:	1c5a      	adds	r2, r3, #1
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ae56:	e023      	b.n	800aea0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae58:	f7f8 fdec 	bl	8003a34 <HAL_GetTick>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d803      	bhi.n	800ae70 <HAL_SPI_Receive+0x478>
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae6e:	d102      	bne.n	800ae76 <HAL_SPI_Receive+0x47e>
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d114      	bne.n	800aea0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f000 fb6a 	bl	800b550 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e019      	b.n	800aed4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f47f af41 	bne.w	800ad30 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 fb4e 	bl	800b550 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e000      	b.n	800aed4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800aed2:	2300      	movs	r3, #0
  }
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3720      	adds	r7, #32
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08e      	sub	sp, #56	@ 0x38
 800aee0:	af02      	add	r7, sp, #8
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3320      	adds	r3, #32
 800aef0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3330      	adds	r3, #48	@ 0x30
 800aef8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aefe:	095b      	lsrs	r3, r3, #5
 800af00:	b29b      	uxth	r3, r3
 800af02:	3301      	adds	r3, #1
 800af04:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af06:	f7f8 fd95 	bl	8003a34 <HAL_GetTick>
 800af0a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800af0c:	887b      	ldrh	r3, [r7, #2]
 800af0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800af10:	887b      	ldrh	r3, [r7, #2]
 800af12:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d001      	beq.n	800af24 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800af20:	2302      	movs	r3, #2
 800af22:	e310      	b.n	800b546 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d005      	beq.n	800af36 <HAL_SPI_TransmitReceive+0x5a>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <HAL_SPI_TransmitReceive+0x5a>
 800af30:	887b      	ldrh	r3, [r7, #2]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d101      	bne.n	800af3a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e305      	b.n	800b546 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800af40:	2b01      	cmp	r3, #1
 800af42:	d101      	bne.n	800af48 <HAL_SPI_TransmitReceive+0x6c>
 800af44:	2302      	movs	r3, #2
 800af46:	e2fe      	b.n	800b546 <HAL_SPI_TransmitReceive+0x66a>
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2205      	movs	r2, #5
 800af54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	887a      	ldrh	r2, [r7, #2]
 800af6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	887a      	ldrh	r2, [r7, #2]
 800af72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	887a      	ldrh	r2, [r7, #2]
 800af80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	887a      	ldrh	r2, [r7, #2]
 800af88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68da      	ldr	r2, [r3, #12]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800afa6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a70      	ldr	r2, [pc, #448]	@ (800b170 <HAL_SPI_TransmitReceive+0x294>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d009      	beq.n	800afc6 <HAL_SPI_TransmitReceive+0xea>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a6f      	ldr	r2, [pc, #444]	@ (800b174 <HAL_SPI_TransmitReceive+0x298>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d004      	beq.n	800afc6 <HAL_SPI_TransmitReceive+0xea>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a6d      	ldr	r2, [pc, #436]	@ (800b178 <HAL_SPI_TransmitReceive+0x29c>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d102      	bne.n	800afcc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800afc6:	2310      	movs	r3, #16
 800afc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afca:	e001      	b.n	800afd0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800afcc:	2308      	movs	r3, #8
 800afce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	4b69      	ldr	r3, [pc, #420]	@ (800b17c <HAL_SPI_TransmitReceive+0x2a0>)
 800afd8:	4013      	ands	r3, r2
 800afda:	8879      	ldrh	r1, [r7, #2]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	6812      	ldr	r2, [r2, #0]
 800afe0:	430b      	orrs	r3, r1
 800afe2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f042 0201 	orr.w	r2, r2, #1
 800aff2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800affc:	d107      	bne.n	800b00e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b00c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	2b0f      	cmp	r3, #15
 800b014:	f240 80a2 	bls.w	800b15c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b01a:	089b      	lsrs	r3, r3, #2
 800b01c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b01e:	e094      	b.n	800b14a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	695b      	ldr	r3, [r3, #20]
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d120      	bne.n	800b070 <HAL_SPI_TransmitReceive+0x194>
 800b02e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b030:	2b00      	cmp	r3, #0
 800b032:	d01d      	beq.n	800b070 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b034:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b036:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d217      	bcs.n	800b070 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b050:	1d1a      	adds	r2, r3, #4
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	3b01      	subs	r3, #1
 800b060:	b29a      	uxth	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b06e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b078:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d065      	beq.n	800b14a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	f003 0301 	and.w	r3, r3, #1
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d118      	bne.n	800b0be <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b094:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b096:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b09c:	1d1a      	adds	r2, r3, #4
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b0bc:	e045      	b.n	800b14a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b0be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b0c0:	8bfb      	ldrh	r3, [r7, #30]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d21d      	bcs.n	800b102 <HAL_SPI_TransmitReceive+0x226>
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d018      	beq.n	800b102 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b0da:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0e0:	1d1a      	adds	r2, r3, #4
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b100:	e023      	b.n	800b14a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b102:	f7f8 fc97 	bl	8003a34 <HAL_GetTick>
 800b106:	4602      	mov	r2, r0
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b10e:	429a      	cmp	r2, r3
 800b110:	d803      	bhi.n	800b11a <HAL_SPI_TransmitReceive+0x23e>
 800b112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b118:	d102      	bne.n	800b120 <HAL_SPI_TransmitReceive+0x244>
 800b11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d114      	bne.n	800b14a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 fa15 	bl	800b550 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b12c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	e1fd      	b.n	800b546 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b14a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f47f af67 	bne.w	800b020 <HAL_SPI_TransmitReceive+0x144>
 800b152:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b154:	2b00      	cmp	r3, #0
 800b156:	f47f af63 	bne.w	800b020 <HAL_SPI_TransmitReceive+0x144>
 800b15a:	e1ce      	b.n	800b4fa <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	2b07      	cmp	r3, #7
 800b162:	f240 81c2 	bls.w	800b4ea <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b168:	085b      	lsrs	r3, r3, #1
 800b16a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b16c:	e0c9      	b.n	800b302 <HAL_SPI_TransmitReceive+0x426>
 800b16e:	bf00      	nop
 800b170:	40013000 	.word	0x40013000
 800b174:	40003800 	.word	0x40003800
 800b178:	40003c00 	.word	0x40003c00
 800b17c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	f003 0302 	and.w	r3, r3, #2
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d11f      	bne.n	800b1ce <HAL_SPI_TransmitReceive+0x2f2>
 800b18e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b190:	2b00      	cmp	r3, #0
 800b192:	d01c      	beq.n	800b1ce <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b194:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b196:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d216      	bcs.n	800b1ce <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1a4:	881a      	ldrh	r2, [r3, #0]
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1ae:	1c9a      	adds	r2, r3, #2
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b1cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b1d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f000 8092 	beq.w	800b302 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d118      	bne.n	800b21e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1f0:	6a3a      	ldr	r2, [r7, #32]
 800b1f2:	8812      	ldrh	r2, [r2, #0]
 800b1f4:	b292      	uxth	r2, r2
 800b1f6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1fc:	1c9a      	adds	r2, r3, #2
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b208:	b29b      	uxth	r3, r3
 800b20a:	3b01      	subs	r3, #1
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b21a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b21c:	e071      	b.n	800b302 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b21e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b220:	8bfb      	ldrh	r3, [r7, #30]
 800b222:	429a      	cmp	r2, r3
 800b224:	d228      	bcs.n	800b278 <HAL_SPI_TransmitReceive+0x39c>
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d023      	beq.n	800b278 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b234:	6a3a      	ldr	r2, [r7, #32]
 800b236:	8812      	ldrh	r2, [r2, #0]
 800b238:	b292      	uxth	r2, r2
 800b23a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b240:	1c9a      	adds	r2, r3, #2
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b24a:	6a3a      	ldr	r2, [r7, #32]
 800b24c:	8812      	ldrh	r2, [r2, #0]
 800b24e:	b292      	uxth	r2, r2
 800b250:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b256:	1c9a      	adds	r2, r3, #2
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b262:	b29b      	uxth	r3, r3
 800b264:	3b02      	subs	r3, #2
 800b266:	b29a      	uxth	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b274:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b276:	e044      	b.n	800b302 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b278:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d11d      	bne.n	800b2ba <HAL_SPI_TransmitReceive+0x3de>
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d018      	beq.n	800b2ba <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b28c:	6a3a      	ldr	r2, [r7, #32]
 800b28e:	8812      	ldrh	r2, [r2, #0]
 800b290:	b292      	uxth	r2, r2
 800b292:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b298:	1c9a      	adds	r2, r3, #2
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b2b8:	e023      	b.n	800b302 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2ba:	f7f8 fbbb 	bl	8003a34 <HAL_GetTick>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d803      	bhi.n	800b2d2 <HAL_SPI_TransmitReceive+0x3f6>
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d0:	d102      	bne.n	800b2d8 <HAL_SPI_TransmitReceive+0x3fc>
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d114      	bne.n	800b302 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f000 f939 	bl	800b550 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e121      	b.n	800b546 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b302:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b304:	2b00      	cmp	r3, #0
 800b306:	f47f af3b 	bne.w	800b180 <HAL_SPI_TransmitReceive+0x2a4>
 800b30a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f47f af37 	bne.w	800b180 <HAL_SPI_TransmitReceive+0x2a4>
 800b312:	e0f2      	b.n	800b4fa <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	f003 0302 	and.w	r3, r3, #2
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d121      	bne.n	800b366 <HAL_SPI_TransmitReceive+0x48a>
 800b322:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b324:	2b00      	cmp	r3, #0
 800b326:	d01e      	beq.n	800b366 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b328:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b32a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b330:	429a      	cmp	r2, r3
 800b332:	d218      	bcs.n	800b366 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3320      	adds	r3, #32
 800b33e:	7812      	ldrb	r2, [r2, #0]
 800b340:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b346:	1c5a      	adds	r2, r3, #1
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b352:	b29b      	uxth	r3, r3
 800b354:	3b01      	subs	r3, #1
 800b356:	b29a      	uxth	r2, r3
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b364:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	695b      	ldr	r3, [r3, #20]
 800b36c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b36e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 80ba 	beq.w	800b4ea <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	695b      	ldr	r3, [r3, #20]
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b01      	cmp	r3, #1
 800b382:	d11b      	bne.n	800b3bc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b390:	7812      	ldrb	r2, [r2, #0]
 800b392:	b2d2      	uxtb	r2, r2
 800b394:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3b8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b3ba:	e096      	b.n	800b4ea <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b3bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b3be:	8bfb      	ldrh	r3, [r7, #30]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d24a      	bcs.n	800b45a <HAL_SPI_TransmitReceive+0x57e>
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d045      	beq.n	800b45a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3da:	7812      	ldrb	r2, [r2, #0]
 800b3dc:	b2d2      	uxtb	r2, r2
 800b3de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3e4:	1c5a      	adds	r2, r3, #1
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3f6:	7812      	ldrb	r2, [r2, #0]
 800b3f8:	b2d2      	uxtb	r2, r2
 800b3fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b412:	7812      	ldrb	r2, [r2, #0]
 800b414:	b2d2      	uxtb	r2, r2
 800b416:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b42e:	7812      	ldrb	r2, [r2, #0]
 800b430:	b2d2      	uxtb	r2, r2
 800b432:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b444:	b29b      	uxth	r3, r3
 800b446:	3b04      	subs	r3, #4
 800b448:	b29a      	uxth	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b456:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b458:	e047      	b.n	800b4ea <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b45a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d820      	bhi.n	800b4a2 <HAL_SPI_TransmitReceive+0x5c6>
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d01b      	beq.n	800b4a2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b476:	7812      	ldrb	r2, [r2, #0]
 800b478:	b2d2      	uxtb	r2, r2
 800b47a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	3b01      	subs	r3, #1
 800b490:	b29a      	uxth	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b49e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b4a0:	e023      	b.n	800b4ea <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4a2:	f7f8 fac7 	bl	8003a34 <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d803      	bhi.n	800b4ba <HAL_SPI_TransmitReceive+0x5de>
 800b4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b8:	d102      	bne.n	800b4c0 <HAL_SPI_TransmitReceive+0x5e4>
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d114      	bne.n	800b4ea <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f000 f845 	bl	800b550 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e02d      	b.n	800b546 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b4ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f47f af11 	bne.w	800b314 <HAL_SPI_TransmitReceive+0x438>
 800b4f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f47f af0d 	bne.w	800b314 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b500:	2200      	movs	r2, #0
 800b502:	2108      	movs	r1, #8
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 f8c3 	bl	800b690 <SPI_WaitOnFlagUntilTimeout>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d007      	beq.n	800b520 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b516:	f043 0220 	orr.w	r2, r3, #32
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 f815 	bl	800b550 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e000      	b.n	800b546 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b544:	2300      	movs	r3, #0
  }
}
 800b546:	4618      	mov	r0, r3
 800b548:	3730      	adds	r7, #48	@ 0x30
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop

0800b550 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	699a      	ldr	r2, [r3, #24]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f042 0208 	orr.w	r2, r2, #8
 800b56e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	699a      	ldr	r2, [r3, #24]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f042 0210 	orr.w	r2, r2, #16
 800b57e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 0201 	bic.w	r2, r2, #1
 800b58e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6919      	ldr	r1, [r3, #16]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	4b3c      	ldr	r3, [pc, #240]	@ (800b68c <SPI_CloseTransfer+0x13c>)
 800b59c:	400b      	ands	r3, r1
 800b59e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	689a      	ldr	r2, [r3, #8]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b5ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	d014      	beq.n	800b5e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f003 0320 	and.w	r3, r3, #32
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00f      	beq.n	800b5e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	699a      	ldr	r2, [r3, #24]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f042 0220 	orr.w	r2, r2, #32
 800b5e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d014      	beq.n	800b61c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00f      	beq.n	800b61c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b602:	f043 0204 	orr.w	r2, r3, #4
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	699a      	ldr	r2, [r3, #24]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b61a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b62c:	f043 0201 	orr.w	r2, r3, #1
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	699a      	ldr	r2, [r3, #24]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b644:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00f      	beq.n	800b670 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b656:	f043 0208 	orr.w	r2, r3, #8
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	699a      	ldr	r2, [r3, #24]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b66e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b680:	bf00      	nop
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	fffffc90 	.word	0xfffffc90

0800b690 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	603b      	str	r3, [r7, #0]
 800b69c:	4613      	mov	r3, r2
 800b69e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b6a0:	e010      	b.n	800b6c4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6a2:	f7f8 f9c7 	bl	8003a34 <HAL_GetTick>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d803      	bhi.n	800b6ba <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b8:	d102      	bne.n	800b6c0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e00f      	b.n	800b6e4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	695a      	ldr	r2, [r3, #20]
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	bf0c      	ite	eq
 800b6d4:	2301      	moveq	r3, #1
 800b6d6:	2300      	movne	r3, #0
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	79fb      	ldrb	r3, [r7, #7]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d0df      	beq.n	800b6a2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6f8:	095b      	lsrs	r3, r3, #5
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	3301      	adds	r3, #1
 800b704:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	3307      	adds	r3, #7
 800b70a:	08db      	lsrs	r3, r3, #3
 800b70c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	fb02 f303 	mul.w	r3, r2, r3
}
 800b716:	4618      	mov	r0, r3
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	e049      	b.n	800b7c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d106      	bne.n	800b74e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7f7 fcd3 	bl	80030f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2202      	movs	r2, #2
 800b752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f000 fc57 	bl	800c014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d001      	beq.n	800b7e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e054      	b.n	800b892 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68da      	ldr	r2, [r3, #12]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f042 0201 	orr.w	r2, r2, #1
 800b7fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a26      	ldr	r2, [pc, #152]	@ (800b8a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d022      	beq.n	800b850 <HAL_TIM_Base_Start_IT+0x80>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b812:	d01d      	beq.n	800b850 <HAL_TIM_Base_Start_IT+0x80>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a22      	ldr	r2, [pc, #136]	@ (800b8a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d018      	beq.n	800b850 <HAL_TIM_Base_Start_IT+0x80>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a21      	ldr	r2, [pc, #132]	@ (800b8a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d013      	beq.n	800b850 <HAL_TIM_Base_Start_IT+0x80>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a1f      	ldr	r2, [pc, #124]	@ (800b8ac <HAL_TIM_Base_Start_IT+0xdc>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d00e      	beq.n	800b850 <HAL_TIM_Base_Start_IT+0x80>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a1e      	ldr	r2, [pc, #120]	@ (800b8b0 <HAL_TIM_Base_Start_IT+0xe0>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d009      	beq.n	800b850 <HAL_TIM_Base_Start_IT+0x80>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a1c      	ldr	r2, [pc, #112]	@ (800b8b4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d004      	beq.n	800b850 <HAL_TIM_Base_Start_IT+0x80>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a1b      	ldr	r2, [pc, #108]	@ (800b8b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d115      	bne.n	800b87c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	689a      	ldr	r2, [r3, #8]
 800b856:	4b19      	ldr	r3, [pc, #100]	@ (800b8bc <HAL_TIM_Base_Start_IT+0xec>)
 800b858:	4013      	ands	r3, r2
 800b85a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b06      	cmp	r3, #6
 800b860:	d015      	beq.n	800b88e <HAL_TIM_Base_Start_IT+0xbe>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b868:	d011      	beq.n	800b88e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f042 0201 	orr.w	r2, r2, #1
 800b878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b87a:	e008      	b.n	800b88e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f042 0201 	orr.w	r2, r2, #1
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	e000      	b.n	800b890 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b88e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	40010000 	.word	0x40010000
 800b8a4:	40000400 	.word	0x40000400
 800b8a8:	40000800 	.word	0x40000800
 800b8ac:	40000c00 	.word	0x40000c00
 800b8b0:	40010400 	.word	0x40010400
 800b8b4:	40001800 	.word	0x40001800
 800b8b8:	40014000 	.word	0x40014000
 800b8bc:	00010007 	.word	0x00010007

0800b8c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e049      	b.n	800b966 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d106      	bne.n	800b8ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7f7 fbb6 	bl	8003058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4610      	mov	r0, r2
 800b900:	f000 fb88 	bl	800c014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2201      	movs	r2, #1
 800b958:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
	...

0800b970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d109      	bne.n	800b994 <HAL_TIM_PWM_Start+0x24>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b01      	cmp	r3, #1
 800b98a:	bf14      	ite	ne
 800b98c:	2301      	movne	r3, #1
 800b98e:	2300      	moveq	r3, #0
 800b990:	b2db      	uxtb	r3, r3
 800b992:	e03c      	b.n	800ba0e <HAL_TIM_PWM_Start+0x9e>
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b04      	cmp	r3, #4
 800b998:	d109      	bne.n	800b9ae <HAL_TIM_PWM_Start+0x3e>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	bf14      	ite	ne
 800b9a6:	2301      	movne	r3, #1
 800b9a8:	2300      	moveq	r3, #0
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	e02f      	b.n	800ba0e <HAL_TIM_PWM_Start+0x9e>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b08      	cmp	r3, #8
 800b9b2:	d109      	bne.n	800b9c8 <HAL_TIM_PWM_Start+0x58>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	bf14      	ite	ne
 800b9c0:	2301      	movne	r3, #1
 800b9c2:	2300      	moveq	r3, #0
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	e022      	b.n	800ba0e <HAL_TIM_PWM_Start+0x9e>
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2b0c      	cmp	r3, #12
 800b9cc:	d109      	bne.n	800b9e2 <HAL_TIM_PWM_Start+0x72>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	bf14      	ite	ne
 800b9da:	2301      	movne	r3, #1
 800b9dc:	2300      	moveq	r3, #0
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	e015      	b.n	800ba0e <HAL_TIM_PWM_Start+0x9e>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b10      	cmp	r3, #16
 800b9e6:	d109      	bne.n	800b9fc <HAL_TIM_PWM_Start+0x8c>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	bf14      	ite	ne
 800b9f4:	2301      	movne	r3, #1
 800b9f6:	2300      	moveq	r3, #0
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	e008      	b.n	800ba0e <HAL_TIM_PWM_Start+0x9e>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	bf14      	ite	ne
 800ba08:	2301      	movne	r3, #1
 800ba0a:	2300      	moveq	r3, #0
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e0a1      	b.n	800bb5a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d104      	bne.n	800ba26 <HAL_TIM_PWM_Start+0xb6>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba24:	e023      	b.n	800ba6e <HAL_TIM_PWM_Start+0xfe>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d104      	bne.n	800ba36 <HAL_TIM_PWM_Start+0xc6>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba34:	e01b      	b.n	800ba6e <HAL_TIM_PWM_Start+0xfe>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b08      	cmp	r3, #8
 800ba3a:	d104      	bne.n	800ba46 <HAL_TIM_PWM_Start+0xd6>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2202      	movs	r2, #2
 800ba40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba44:	e013      	b.n	800ba6e <HAL_TIM_PWM_Start+0xfe>
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b0c      	cmp	r3, #12
 800ba4a:	d104      	bne.n	800ba56 <HAL_TIM_PWM_Start+0xe6>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ba54:	e00b      	b.n	800ba6e <HAL_TIM_PWM_Start+0xfe>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b10      	cmp	r3, #16
 800ba5a:	d104      	bne.n	800ba66 <HAL_TIM_PWM_Start+0xf6>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba64:	e003      	b.n	800ba6e <HAL_TIM_PWM_Start+0xfe>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2202      	movs	r2, #2
 800ba6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2201      	movs	r2, #1
 800ba74:	6839      	ldr	r1, [r7, #0]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 fe48 	bl	800c70c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a38      	ldr	r2, [pc, #224]	@ (800bb64 <HAL_TIM_PWM_Start+0x1f4>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d013      	beq.n	800baae <HAL_TIM_PWM_Start+0x13e>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a37      	ldr	r2, [pc, #220]	@ (800bb68 <HAL_TIM_PWM_Start+0x1f8>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00e      	beq.n	800baae <HAL_TIM_PWM_Start+0x13e>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a35      	ldr	r2, [pc, #212]	@ (800bb6c <HAL_TIM_PWM_Start+0x1fc>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d009      	beq.n	800baae <HAL_TIM_PWM_Start+0x13e>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a34      	ldr	r2, [pc, #208]	@ (800bb70 <HAL_TIM_PWM_Start+0x200>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d004      	beq.n	800baae <HAL_TIM_PWM_Start+0x13e>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a32      	ldr	r2, [pc, #200]	@ (800bb74 <HAL_TIM_PWM_Start+0x204>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d101      	bne.n	800bab2 <HAL_TIM_PWM_Start+0x142>
 800baae:	2301      	movs	r3, #1
 800bab0:	e000      	b.n	800bab4 <HAL_TIM_PWM_Start+0x144>
 800bab2:	2300      	movs	r3, #0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d007      	beq.n	800bac8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bac6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a25      	ldr	r2, [pc, #148]	@ (800bb64 <HAL_TIM_PWM_Start+0x1f4>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d022      	beq.n	800bb18 <HAL_TIM_PWM_Start+0x1a8>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bada:	d01d      	beq.n	800bb18 <HAL_TIM_PWM_Start+0x1a8>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a25      	ldr	r2, [pc, #148]	@ (800bb78 <HAL_TIM_PWM_Start+0x208>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d018      	beq.n	800bb18 <HAL_TIM_PWM_Start+0x1a8>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a24      	ldr	r2, [pc, #144]	@ (800bb7c <HAL_TIM_PWM_Start+0x20c>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d013      	beq.n	800bb18 <HAL_TIM_PWM_Start+0x1a8>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a22      	ldr	r2, [pc, #136]	@ (800bb80 <HAL_TIM_PWM_Start+0x210>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00e      	beq.n	800bb18 <HAL_TIM_PWM_Start+0x1a8>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a1a      	ldr	r2, [pc, #104]	@ (800bb68 <HAL_TIM_PWM_Start+0x1f8>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d009      	beq.n	800bb18 <HAL_TIM_PWM_Start+0x1a8>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a1e      	ldr	r2, [pc, #120]	@ (800bb84 <HAL_TIM_PWM_Start+0x214>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d004      	beq.n	800bb18 <HAL_TIM_PWM_Start+0x1a8>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a16      	ldr	r2, [pc, #88]	@ (800bb6c <HAL_TIM_PWM_Start+0x1fc>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d115      	bne.n	800bb44 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	689a      	ldr	r2, [r3, #8]
 800bb1e:	4b1a      	ldr	r3, [pc, #104]	@ (800bb88 <HAL_TIM_PWM_Start+0x218>)
 800bb20:	4013      	ands	r3, r2
 800bb22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2b06      	cmp	r3, #6
 800bb28:	d015      	beq.n	800bb56 <HAL_TIM_PWM_Start+0x1e6>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb30:	d011      	beq.n	800bb56 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f042 0201 	orr.w	r2, r2, #1
 800bb40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb42:	e008      	b.n	800bb56 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f042 0201 	orr.w	r2, r2, #1
 800bb52:	601a      	str	r2, [r3, #0]
 800bb54:	e000      	b.n	800bb58 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	40010000 	.word	0x40010000
 800bb68:	40010400 	.word	0x40010400
 800bb6c:	40014000 	.word	0x40014000
 800bb70:	40014400 	.word	0x40014400
 800bb74:	40014800 	.word	0x40014800
 800bb78:	40000400 	.word	0x40000400
 800bb7c:	40000800 	.word	0x40000800
 800bb80:	40000c00 	.word	0x40000c00
 800bb84:	40001800 	.word	0x40001800
 800bb88:	00010007 	.word	0x00010007

0800bb8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f003 0302 	and.w	r3, r3, #2
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d020      	beq.n	800bbf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f003 0302 	and.w	r3, r3, #2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d01b      	beq.n	800bbf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f06f 0202 	mvn.w	r2, #2
 800bbc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	f003 0303 	and.w	r3, r3, #3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f9fe 	bl	800bfd8 <HAL_TIM_IC_CaptureCallback>
 800bbdc:	e005      	b.n	800bbea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f9f0 	bl	800bfc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fa01 	bl	800bfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	f003 0304 	and.w	r3, r3, #4
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d020      	beq.n	800bc3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f003 0304 	and.w	r3, r3, #4
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d01b      	beq.n	800bc3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f06f 0204 	mvn.w	r2, #4
 800bc0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2202      	movs	r2, #2
 800bc12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f9d8 	bl	800bfd8 <HAL_TIM_IC_CaptureCallback>
 800bc28:	e005      	b.n	800bc36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f9ca 	bl	800bfc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f9db 	bl	800bfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f003 0308 	and.w	r3, r3, #8
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d020      	beq.n	800bc88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f003 0308 	and.w	r3, r3, #8
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d01b      	beq.n	800bc88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f06f 0208 	mvn.w	r2, #8
 800bc58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2204      	movs	r2, #4
 800bc5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	f003 0303 	and.w	r3, r3, #3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d003      	beq.n	800bc76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f9b2 	bl	800bfd8 <HAL_TIM_IC_CaptureCallback>
 800bc74:	e005      	b.n	800bc82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f9a4 	bl	800bfc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f9b5 	bl	800bfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f003 0310 	and.w	r3, r3, #16
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d020      	beq.n	800bcd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f003 0310 	and.w	r3, r3, #16
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01b      	beq.n	800bcd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f06f 0210 	mvn.w	r2, #16
 800bca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2208      	movs	r2, #8
 800bcaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d003      	beq.n	800bcc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f98c 	bl	800bfd8 <HAL_TIM_IC_CaptureCallback>
 800bcc0:	e005      	b.n	800bcce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f97e 	bl	800bfc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f98f 	bl	800bfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00c      	beq.n	800bcf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f003 0301 	and.w	r3, r3, #1
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d007      	beq.n	800bcf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f06f 0201 	mvn.w	r2, #1
 800bcf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7f6 fd34 	bl	8002760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d104      	bne.n	800bd0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00c      	beq.n	800bd26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d007      	beq.n	800bd26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bd1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fdb1 	bl	800c888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00c      	beq.n	800bd4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d007      	beq.n	800bd4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bd42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fda9 	bl	800c89c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00c      	beq.n	800bd6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d007      	beq.n	800bd6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bd66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f949 	bl	800c000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	f003 0320 	and.w	r3, r3, #32
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00c      	beq.n	800bd92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f003 0320 	and.w	r3, r3, #32
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d007      	beq.n	800bd92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f06f 0220 	mvn.w	r2, #32
 800bd8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fd71 	bl	800c874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d101      	bne.n	800bdba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bdb6:	2302      	movs	r3, #2
 800bdb8:	e0ff      	b.n	800bfba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b14      	cmp	r3, #20
 800bdc6:	f200 80f0 	bhi.w	800bfaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bdca:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd0:	0800be25 	.word	0x0800be25
 800bdd4:	0800bfab 	.word	0x0800bfab
 800bdd8:	0800bfab 	.word	0x0800bfab
 800bddc:	0800bfab 	.word	0x0800bfab
 800bde0:	0800be65 	.word	0x0800be65
 800bde4:	0800bfab 	.word	0x0800bfab
 800bde8:	0800bfab 	.word	0x0800bfab
 800bdec:	0800bfab 	.word	0x0800bfab
 800bdf0:	0800bea7 	.word	0x0800bea7
 800bdf4:	0800bfab 	.word	0x0800bfab
 800bdf8:	0800bfab 	.word	0x0800bfab
 800bdfc:	0800bfab 	.word	0x0800bfab
 800be00:	0800bee7 	.word	0x0800bee7
 800be04:	0800bfab 	.word	0x0800bfab
 800be08:	0800bfab 	.word	0x0800bfab
 800be0c:	0800bfab 	.word	0x0800bfab
 800be10:	0800bf29 	.word	0x0800bf29
 800be14:	0800bfab 	.word	0x0800bfab
 800be18:	0800bfab 	.word	0x0800bfab
 800be1c:	0800bfab 	.word	0x0800bfab
 800be20:	0800bf69 	.word	0x0800bf69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68b9      	ldr	r1, [r7, #8]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 f998 	bl	800c160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	699a      	ldr	r2, [r3, #24]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f042 0208 	orr.w	r2, r2, #8
 800be3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	699a      	ldr	r2, [r3, #24]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f022 0204 	bic.w	r2, r2, #4
 800be4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6999      	ldr	r1, [r3, #24]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	691a      	ldr	r2, [r3, #16]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	430a      	orrs	r2, r1
 800be60:	619a      	str	r2, [r3, #24]
      break;
 800be62:	e0a5      	b.n	800bfb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68b9      	ldr	r1, [r7, #8]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fa08 	bl	800c280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	699a      	ldr	r2, [r3, #24]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	699a      	ldr	r2, [r3, #24]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6999      	ldr	r1, [r3, #24]
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	021a      	lsls	r2, r3, #8
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	619a      	str	r2, [r3, #24]
      break;
 800bea4:	e084      	b.n	800bfb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	4618      	mov	r0, r3
 800beae:	f000 fa71 	bl	800c394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	69da      	ldr	r2, [r3, #28]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f042 0208 	orr.w	r2, r2, #8
 800bec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	69da      	ldr	r2, [r3, #28]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f022 0204 	bic.w	r2, r2, #4
 800bed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69d9      	ldr	r1, [r3, #28]
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	691a      	ldr	r2, [r3, #16]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	430a      	orrs	r2, r1
 800bee2:	61da      	str	r2, [r3, #28]
      break;
 800bee4:	e064      	b.n	800bfb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68b9      	ldr	r1, [r7, #8]
 800beec:	4618      	mov	r0, r3
 800beee:	f000 fad9 	bl	800c4a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	69da      	ldr	r2, [r3, #28]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	69da      	ldr	r2, [r3, #28]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	69d9      	ldr	r1, [r3, #28]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	021a      	lsls	r2, r3, #8
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	430a      	orrs	r2, r1
 800bf24:	61da      	str	r2, [r3, #28]
      break;
 800bf26:	e043      	b.n	800bfb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68b9      	ldr	r1, [r7, #8]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 fb22 	bl	800c578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f042 0208 	orr.w	r2, r2, #8
 800bf42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f022 0204 	bic.w	r2, r2, #4
 800bf52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	691a      	ldr	r2, [r3, #16]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bf66:	e023      	b.n	800bfb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68b9      	ldr	r1, [r7, #8]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 fb66 	bl	800c640 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	021a      	lsls	r2, r3, #8
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bfa8:	e002      	b.n	800bfb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	75fb      	strb	r3, [r7, #23]
      break;
 800bfae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bfb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop

0800bfc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c014:	b480      	push	{r7}
 800c016:	b085      	sub	sp, #20
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a46      	ldr	r2, [pc, #280]	@ (800c140 <TIM_Base_SetConfig+0x12c>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d013      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c032:	d00f      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a43      	ldr	r2, [pc, #268]	@ (800c144 <TIM_Base_SetConfig+0x130>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d00b      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a42      	ldr	r2, [pc, #264]	@ (800c148 <TIM_Base_SetConfig+0x134>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d007      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a41      	ldr	r2, [pc, #260]	@ (800c14c <TIM_Base_SetConfig+0x138>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d003      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a40      	ldr	r2, [pc, #256]	@ (800c150 <TIM_Base_SetConfig+0x13c>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d108      	bne.n	800c066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c05a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	4313      	orrs	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a35      	ldr	r2, [pc, #212]	@ (800c140 <TIM_Base_SetConfig+0x12c>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d01f      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c074:	d01b      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a32      	ldr	r2, [pc, #200]	@ (800c144 <TIM_Base_SetConfig+0x130>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d017      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a31      	ldr	r2, [pc, #196]	@ (800c148 <TIM_Base_SetConfig+0x134>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d013      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a30      	ldr	r2, [pc, #192]	@ (800c14c <TIM_Base_SetConfig+0x138>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d00f      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a2f      	ldr	r2, [pc, #188]	@ (800c150 <TIM_Base_SetConfig+0x13c>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d00b      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a2e      	ldr	r2, [pc, #184]	@ (800c154 <TIM_Base_SetConfig+0x140>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d007      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c158 <TIM_Base_SetConfig+0x144>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d003      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a2c      	ldr	r2, [pc, #176]	@ (800c15c <TIM_Base_SetConfig+0x148>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d108      	bne.n	800c0c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	689a      	ldr	r2, [r3, #8]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a16      	ldr	r2, [pc, #88]	@ (800c140 <TIM_Base_SetConfig+0x12c>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d00f      	beq.n	800c10c <TIM_Base_SetConfig+0xf8>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a18      	ldr	r2, [pc, #96]	@ (800c150 <TIM_Base_SetConfig+0x13c>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d00b      	beq.n	800c10c <TIM_Base_SetConfig+0xf8>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a17      	ldr	r2, [pc, #92]	@ (800c154 <TIM_Base_SetConfig+0x140>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d007      	beq.n	800c10c <TIM_Base_SetConfig+0xf8>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a16      	ldr	r2, [pc, #88]	@ (800c158 <TIM_Base_SetConfig+0x144>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d003      	beq.n	800c10c <TIM_Base_SetConfig+0xf8>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a15      	ldr	r2, [pc, #84]	@ (800c15c <TIM_Base_SetConfig+0x148>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d103      	bne.n	800c114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	691a      	ldr	r2, [r3, #16]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	f003 0301 	and.w	r3, r3, #1
 800c122:	2b01      	cmp	r3, #1
 800c124:	d105      	bne.n	800c132 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	f023 0201 	bic.w	r2, r3, #1
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	611a      	str	r2, [r3, #16]
  }
}
 800c132:	bf00      	nop
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	40010000 	.word	0x40010000
 800c144:	40000400 	.word	0x40000400
 800c148:	40000800 	.word	0x40000800
 800c14c:	40000c00 	.word	0x40000c00
 800c150:	40010400 	.word	0x40010400
 800c154:	40014000 	.word	0x40014000
 800c158:	40014400 	.word	0x40014400
 800c15c:	40014800 	.word	0x40014800

0800c160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c160:	b480      	push	{r7}
 800c162:	b087      	sub	sp, #28
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a1b      	ldr	r3, [r3, #32]
 800c16e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6a1b      	ldr	r3, [r3, #32]
 800c174:	f023 0201 	bic.w	r2, r3, #1
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	4b37      	ldr	r3, [pc, #220]	@ (800c268 <TIM_OC1_SetConfig+0x108>)
 800c18c:	4013      	ands	r3, r2
 800c18e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f023 0303 	bic.w	r3, r3, #3
 800c196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f023 0302 	bic.w	r3, r3, #2
 800c1a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a2d      	ldr	r2, [pc, #180]	@ (800c26c <TIM_OC1_SetConfig+0x10c>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d00f      	beq.n	800c1dc <TIM_OC1_SetConfig+0x7c>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a2c      	ldr	r2, [pc, #176]	@ (800c270 <TIM_OC1_SetConfig+0x110>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00b      	beq.n	800c1dc <TIM_OC1_SetConfig+0x7c>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a2b      	ldr	r2, [pc, #172]	@ (800c274 <TIM_OC1_SetConfig+0x114>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d007      	beq.n	800c1dc <TIM_OC1_SetConfig+0x7c>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a2a      	ldr	r2, [pc, #168]	@ (800c278 <TIM_OC1_SetConfig+0x118>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d003      	beq.n	800c1dc <TIM_OC1_SetConfig+0x7c>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a29      	ldr	r2, [pc, #164]	@ (800c27c <TIM_OC1_SetConfig+0x11c>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d10c      	bne.n	800c1f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	f023 0308 	bic.w	r3, r3, #8
 800c1e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	697a      	ldr	r2, [r7, #20]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f023 0304 	bic.w	r3, r3, #4
 800c1f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a1c      	ldr	r2, [pc, #112]	@ (800c26c <TIM_OC1_SetConfig+0x10c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d00f      	beq.n	800c21e <TIM_OC1_SetConfig+0xbe>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a1b      	ldr	r2, [pc, #108]	@ (800c270 <TIM_OC1_SetConfig+0x110>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d00b      	beq.n	800c21e <TIM_OC1_SetConfig+0xbe>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a1a      	ldr	r2, [pc, #104]	@ (800c274 <TIM_OC1_SetConfig+0x114>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d007      	beq.n	800c21e <TIM_OC1_SetConfig+0xbe>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a19      	ldr	r2, [pc, #100]	@ (800c278 <TIM_OC1_SetConfig+0x118>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d003      	beq.n	800c21e <TIM_OC1_SetConfig+0xbe>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a18      	ldr	r2, [pc, #96]	@ (800c27c <TIM_OC1_SetConfig+0x11c>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d111      	bne.n	800c242 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c22c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	693a      	ldr	r2, [r7, #16]
 800c234:	4313      	orrs	r3, r2
 800c236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	693a      	ldr	r2, [r7, #16]
 800c23e:	4313      	orrs	r3, r2
 800c240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	685a      	ldr	r2, [r3, #4]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	621a      	str	r2, [r3, #32]
}
 800c25c:	bf00      	nop
 800c25e:	371c      	adds	r7, #28
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	fffeff8f 	.word	0xfffeff8f
 800c26c:	40010000 	.word	0x40010000
 800c270:	40010400 	.word	0x40010400
 800c274:	40014000 	.word	0x40014000
 800c278:	40014400 	.word	0x40014400
 800c27c:	40014800 	.word	0x40014800

0800c280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c280:	b480      	push	{r7}
 800c282:	b087      	sub	sp, #28
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a1b      	ldr	r3, [r3, #32]
 800c28e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a1b      	ldr	r3, [r3, #32]
 800c294:	f023 0210 	bic.w	r2, r3, #16
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	4b34      	ldr	r3, [pc, #208]	@ (800c37c <TIM_OC2_SetConfig+0xfc>)
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	021b      	lsls	r3, r3, #8
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	f023 0320 	bic.w	r3, r3, #32
 800c2ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	011b      	lsls	r3, r3, #4
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a29      	ldr	r2, [pc, #164]	@ (800c380 <TIM_OC2_SetConfig+0x100>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d003      	beq.n	800c2e8 <TIM_OC2_SetConfig+0x68>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a28      	ldr	r2, [pc, #160]	@ (800c384 <TIM_OC2_SetConfig+0x104>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d10d      	bne.n	800c304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	011b      	lsls	r3, r3, #4
 800c2f6:	697a      	ldr	r2, [r7, #20]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a1e      	ldr	r2, [pc, #120]	@ (800c380 <TIM_OC2_SetConfig+0x100>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d00f      	beq.n	800c32c <TIM_OC2_SetConfig+0xac>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a1d      	ldr	r2, [pc, #116]	@ (800c384 <TIM_OC2_SetConfig+0x104>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d00b      	beq.n	800c32c <TIM_OC2_SetConfig+0xac>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a1c      	ldr	r2, [pc, #112]	@ (800c388 <TIM_OC2_SetConfig+0x108>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d007      	beq.n	800c32c <TIM_OC2_SetConfig+0xac>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a1b      	ldr	r2, [pc, #108]	@ (800c38c <TIM_OC2_SetConfig+0x10c>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d003      	beq.n	800c32c <TIM_OC2_SetConfig+0xac>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a1a      	ldr	r2, [pc, #104]	@ (800c390 <TIM_OC2_SetConfig+0x110>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d113      	bne.n	800c354 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c33a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	4313      	orrs	r3, r2
 800c346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	4313      	orrs	r3, r2
 800c352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	693a      	ldr	r2, [r7, #16]
 800c358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	621a      	str	r2, [r3, #32]
}
 800c36e:	bf00      	nop
 800c370:	371c      	adds	r7, #28
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	feff8fff 	.word	0xfeff8fff
 800c380:	40010000 	.word	0x40010000
 800c384:	40010400 	.word	0x40010400
 800c388:	40014000 	.word	0x40014000
 800c38c:	40014400 	.word	0x40014400
 800c390:	40014800 	.word	0x40014800

0800c394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c394:	b480      	push	{r7}
 800c396:	b087      	sub	sp, #28
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6a1b      	ldr	r3, [r3, #32]
 800c3a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	69db      	ldr	r3, [r3, #28]
 800c3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	4b33      	ldr	r3, [pc, #204]	@ (800c48c <TIM_OC3_SetConfig+0xf8>)
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f023 0303 	bic.w	r3, r3, #3
 800c3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c3dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	021b      	lsls	r3, r3, #8
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4a28      	ldr	r2, [pc, #160]	@ (800c490 <TIM_OC3_SetConfig+0xfc>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d003      	beq.n	800c3fa <TIM_OC3_SetConfig+0x66>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a27      	ldr	r2, [pc, #156]	@ (800c494 <TIM_OC3_SetConfig+0x100>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d10d      	bne.n	800c416 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	021b      	lsls	r3, r3, #8
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a1d      	ldr	r2, [pc, #116]	@ (800c490 <TIM_OC3_SetConfig+0xfc>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d00f      	beq.n	800c43e <TIM_OC3_SetConfig+0xaa>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a1c      	ldr	r2, [pc, #112]	@ (800c494 <TIM_OC3_SetConfig+0x100>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d00b      	beq.n	800c43e <TIM_OC3_SetConfig+0xaa>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a1b      	ldr	r2, [pc, #108]	@ (800c498 <TIM_OC3_SetConfig+0x104>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d007      	beq.n	800c43e <TIM_OC3_SetConfig+0xaa>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a1a      	ldr	r2, [pc, #104]	@ (800c49c <TIM_OC3_SetConfig+0x108>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d003      	beq.n	800c43e <TIM_OC3_SetConfig+0xaa>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a19      	ldr	r2, [pc, #100]	@ (800c4a0 <TIM_OC3_SetConfig+0x10c>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d113      	bne.n	800c466 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c44c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	011b      	lsls	r3, r3, #4
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	4313      	orrs	r3, r2
 800c458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	011b      	lsls	r3, r3, #4
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	4313      	orrs	r3, r2
 800c464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	685a      	ldr	r2, [r3, #4]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	621a      	str	r2, [r3, #32]
}
 800c480:	bf00      	nop
 800c482:	371c      	adds	r7, #28
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	fffeff8f 	.word	0xfffeff8f
 800c490:	40010000 	.word	0x40010000
 800c494:	40010400 	.word	0x40010400
 800c498:	40014000 	.word	0x40014000
 800c49c:	40014400 	.word	0x40014400
 800c4a0:	40014800 	.word	0x40014800

0800c4a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b087      	sub	sp, #28
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a1b      	ldr	r3, [r3, #32]
 800c4b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4b24      	ldr	r3, [pc, #144]	@ (800c560 <TIM_OC4_SetConfig+0xbc>)
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	021b      	lsls	r3, r3, #8
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c4ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	031b      	lsls	r3, r3, #12
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4a19      	ldr	r2, [pc, #100]	@ (800c564 <TIM_OC4_SetConfig+0xc0>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d00f      	beq.n	800c524 <TIM_OC4_SetConfig+0x80>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a18      	ldr	r2, [pc, #96]	@ (800c568 <TIM_OC4_SetConfig+0xc4>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d00b      	beq.n	800c524 <TIM_OC4_SetConfig+0x80>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4a17      	ldr	r2, [pc, #92]	@ (800c56c <TIM_OC4_SetConfig+0xc8>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d007      	beq.n	800c524 <TIM_OC4_SetConfig+0x80>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a16      	ldr	r2, [pc, #88]	@ (800c570 <TIM_OC4_SetConfig+0xcc>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d003      	beq.n	800c524 <TIM_OC4_SetConfig+0x80>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4a15      	ldr	r2, [pc, #84]	@ (800c574 <TIM_OC4_SetConfig+0xd0>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d109      	bne.n	800c538 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c52a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	695b      	ldr	r3, [r3, #20]
 800c530:	019b      	lsls	r3, r3, #6
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	4313      	orrs	r3, r2
 800c536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	693a      	ldr	r2, [r7, #16]
 800c550:	621a      	str	r2, [r3, #32]
}
 800c552:	bf00      	nop
 800c554:	371c      	adds	r7, #28
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	feff8fff 	.word	0xfeff8fff
 800c564:	40010000 	.word	0x40010000
 800c568:	40010400 	.word	0x40010400
 800c56c:	40014000 	.word	0x40014000
 800c570:	40014400 	.word	0x40014400
 800c574:	40014800 	.word	0x40014800

0800c578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c578:	b480      	push	{r7}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a1b      	ldr	r3, [r3, #32]
 800c58c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4b21      	ldr	r3, [pc, #132]	@ (800c628 <TIM_OC5_SetConfig+0xb0>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c5b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	041b      	lsls	r3, r3, #16
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a18      	ldr	r2, [pc, #96]	@ (800c62c <TIM_OC5_SetConfig+0xb4>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d00f      	beq.n	800c5ee <TIM_OC5_SetConfig+0x76>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a17      	ldr	r2, [pc, #92]	@ (800c630 <TIM_OC5_SetConfig+0xb8>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d00b      	beq.n	800c5ee <TIM_OC5_SetConfig+0x76>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4a16      	ldr	r2, [pc, #88]	@ (800c634 <TIM_OC5_SetConfig+0xbc>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d007      	beq.n	800c5ee <TIM_OC5_SetConfig+0x76>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	4a15      	ldr	r2, [pc, #84]	@ (800c638 <TIM_OC5_SetConfig+0xc0>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d003      	beq.n	800c5ee <TIM_OC5_SetConfig+0x76>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a14      	ldr	r2, [pc, #80]	@ (800c63c <TIM_OC5_SetConfig+0xc4>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d109      	bne.n	800c602 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c5f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	021b      	lsls	r3, r3, #8
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	697a      	ldr	r2, [r7, #20]
 800c606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	685a      	ldr	r2, [r3, #4]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	621a      	str	r2, [r3, #32]
}
 800c61c:	bf00      	nop
 800c61e:	371c      	adds	r7, #28
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr
 800c628:	fffeff8f 	.word	0xfffeff8f
 800c62c:	40010000 	.word	0x40010000
 800c630:	40010400 	.word	0x40010400
 800c634:	40014000 	.word	0x40014000
 800c638:	40014400 	.word	0x40014400
 800c63c:	40014800 	.word	0x40014800

0800c640 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a1b      	ldr	r3, [r3, #32]
 800c654:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	4b22      	ldr	r3, [pc, #136]	@ (800c6f4 <TIM_OC6_SetConfig+0xb4>)
 800c66c:	4013      	ands	r3, r2
 800c66e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	021b      	lsls	r3, r3, #8
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	4313      	orrs	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	051b      	lsls	r3, r3, #20
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a19      	ldr	r2, [pc, #100]	@ (800c6f8 <TIM_OC6_SetConfig+0xb8>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d00f      	beq.n	800c6b8 <TIM_OC6_SetConfig+0x78>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a18      	ldr	r2, [pc, #96]	@ (800c6fc <TIM_OC6_SetConfig+0xbc>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d00b      	beq.n	800c6b8 <TIM_OC6_SetConfig+0x78>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a17      	ldr	r2, [pc, #92]	@ (800c700 <TIM_OC6_SetConfig+0xc0>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d007      	beq.n	800c6b8 <TIM_OC6_SetConfig+0x78>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a16      	ldr	r2, [pc, #88]	@ (800c704 <TIM_OC6_SetConfig+0xc4>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d003      	beq.n	800c6b8 <TIM_OC6_SetConfig+0x78>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a15      	ldr	r2, [pc, #84]	@ (800c708 <TIM_OC6_SetConfig+0xc8>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d109      	bne.n	800c6cc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	695b      	ldr	r3, [r3, #20]
 800c6c4:	029b      	lsls	r3, r3, #10
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	697a      	ldr	r2, [r7, #20]
 800c6d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	693a      	ldr	r2, [r7, #16]
 800c6e4:	621a      	str	r2, [r3, #32]
}
 800c6e6:	bf00      	nop
 800c6e8:	371c      	adds	r7, #28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	feff8fff 	.word	0xfeff8fff
 800c6f8:	40010000 	.word	0x40010000
 800c6fc:	40010400 	.word	0x40010400
 800c700:	40014000 	.word	0x40014000
 800c704:	40014400 	.word	0x40014400
 800c708:	40014800 	.word	0x40014800

0800c70c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	f003 031f 	and.w	r3, r3, #31
 800c71e:	2201      	movs	r2, #1
 800c720:	fa02 f303 	lsl.w	r3, r2, r3
 800c724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6a1a      	ldr	r2, [r3, #32]
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	43db      	mvns	r3, r3
 800c72e:	401a      	ands	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6a1a      	ldr	r2, [r3, #32]
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	f003 031f 	and.w	r3, r3, #31
 800c73e:	6879      	ldr	r1, [r7, #4]
 800c740:	fa01 f303 	lsl.w	r3, r1, r3
 800c744:	431a      	orrs	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	621a      	str	r2, [r3, #32]
}
 800c74a:	bf00      	nop
 800c74c:	371c      	adds	r7, #28
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
	...

0800c758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d101      	bne.n	800c770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c76c:	2302      	movs	r3, #2
 800c76e:	e06d      	b.n	800c84c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2202      	movs	r2, #2
 800c77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a30      	ldr	r2, [pc, #192]	@ (800c858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d004      	beq.n	800c7a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a2f      	ldr	r2, [pc, #188]	@ (800c85c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d108      	bne.n	800c7b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c7aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a20      	ldr	r2, [pc, #128]	@ (800c858 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d022      	beq.n	800c820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7e2:	d01d      	beq.n	800c820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c860 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d018      	beq.n	800c820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a1c      	ldr	r2, [pc, #112]	@ (800c864 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d013      	beq.n	800c820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a1a      	ldr	r2, [pc, #104]	@ (800c868 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d00e      	beq.n	800c820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a15      	ldr	r2, [pc, #84]	@ (800c85c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d009      	beq.n	800c820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a16      	ldr	r2, [pc, #88]	@ (800c86c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d004      	beq.n	800c820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a15      	ldr	r2, [pc, #84]	@ (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d10c      	bne.n	800c83a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	4313      	orrs	r3, r2
 800c830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr
 800c858:	40010000 	.word	0x40010000
 800c85c:	40010400 	.word	0x40010400
 800c860:	40000400 	.word	0x40000400
 800c864:	40000800 	.word	0x40000800
 800c868:	40000c00 	.word	0x40000c00
 800c86c:	40001800 	.word	0x40001800
 800c870:	40014000 	.word	0x40014000

0800c874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e042      	b.n	800c948 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d106      	bne.n	800c8da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7f6 fe2b 	bl	8003530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2224      	movs	r2, #36	@ 0x24
 800c8de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f022 0201 	bic.w	r2, r2, #1
 800c8f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f001 fb52 	bl	800dfa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fce3 	bl	800d2cc <UART_SetConfig>
 800c906:	4603      	mov	r3, r0
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d101      	bne.n	800c910 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	e01b      	b.n	800c948 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	685a      	ldr	r2, [r3, #4]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c91e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	689a      	ldr	r2, [r3, #8]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c92e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f042 0201 	orr.w	r2, r2, #1
 800c93e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f001 fbd1 	bl	800e0e8 <UART_CheckIdleState>
 800c946:	4603      	mov	r3, r0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b08a      	sub	sp, #40	@ 0x28
 800c954:	af02      	add	r7, sp, #8
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	603b      	str	r3, [r7, #0]
 800c95c:	4613      	mov	r3, r2
 800c95e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c966:	2b20      	cmp	r3, #32
 800c968:	d17b      	bne.n	800ca62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <HAL_UART_Transmit+0x26>
 800c970:	88fb      	ldrh	r3, [r7, #6]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d101      	bne.n	800c97a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	e074      	b.n	800ca64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2221      	movs	r2, #33	@ 0x21
 800c986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c98a:	f7f7 f853 	bl	8003a34 <HAL_GetTick>
 800c98e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	88fa      	ldrh	r2, [r7, #6]
 800c994:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	88fa      	ldrh	r2, [r7, #6]
 800c99c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9a8:	d108      	bne.n	800c9bc <HAL_UART_Transmit+0x6c>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d104      	bne.n	800c9bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	61bb      	str	r3, [r7, #24]
 800c9ba:	e003      	b.n	800c9c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c9c4:	e030      	b.n	800ca28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	2180      	movs	r1, #128	@ 0x80
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f001 fc33 	bl	800e23c <UART_WaitOnFlagUntilTimeout>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d005      	beq.n	800c9e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2220      	movs	r2, #32
 800c9e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c9e4:	2303      	movs	r3, #3
 800c9e6:	e03d      	b.n	800ca64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10b      	bne.n	800ca06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	3302      	adds	r3, #2
 800ca02:	61bb      	str	r3, [r7, #24]
 800ca04:	e007      	b.n	800ca16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	781a      	ldrb	r2, [r3, #0]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	3301      	adds	r3, #1
 800ca14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1c8      	bne.n	800c9c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2140      	movs	r1, #64	@ 0x40
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f001 fbfc 	bl	800e23c <UART_WaitOnFlagUntilTimeout>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d005      	beq.n	800ca56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2220      	movs	r2, #32
 800ca4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ca52:	2303      	movs	r3, #3
 800ca54:	e006      	b.n	800ca64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2220      	movs	r2, #32
 800ca5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	e000      	b.n	800ca64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ca62:	2302      	movs	r3, #2
  }
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3720      	adds	r7, #32
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b08a      	sub	sp, #40	@ 0x28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	4613      	mov	r3, r2
 800ca78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d137      	bne.n	800caf4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <HAL_UART_Receive_DMA+0x24>
 800ca8a:	88fb      	ldrh	r3, [r7, #6]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d101      	bne.n	800ca94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	e030      	b.n	800caf6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a18      	ldr	r2, [pc, #96]	@ (800cb00 <HAL_UART_Receive_DMA+0x94>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d01f      	beq.n	800cae4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d018      	beq.n	800cae4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	e853 3f00 	ldrex	r3, [r3]
 800cabe:	613b      	str	r3, [r7, #16]
   return(result);
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cac6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	461a      	mov	r2, r3
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	623b      	str	r3, [r7, #32]
 800cad2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad4:	69f9      	ldr	r1, [r7, #28]
 800cad6:	6a3a      	ldr	r2, [r7, #32]
 800cad8:	e841 2300 	strex	r3, r2, [r1]
 800cadc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1e6      	bne.n	800cab2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cae4:	88fb      	ldrh	r3, [r7, #6]
 800cae6:	461a      	mov	r2, r3
 800cae8:	68b9      	ldr	r1, [r7, #8]
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f001 fc14 	bl	800e318 <UART_Start_Receive_DMA>
 800caf0:	4603      	mov	r3, r0
 800caf2:	e000      	b.n	800caf6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800caf4:	2302      	movs	r3, #2
  }
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3728      	adds	r7, #40	@ 0x28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	58000c00 	.word	0x58000c00

0800cb04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b0ba      	sub	sp, #232	@ 0xe8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69db      	ldr	r3, [r3, #28]
 800cb12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cb2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cb32:	4013      	ands	r3, r2
 800cb34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cb38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d11b      	bne.n	800cb78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb44:	f003 0320 	and.w	r3, r3, #32
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d015      	beq.n	800cb78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb50:	f003 0320 	and.w	r3, r3, #32
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d105      	bne.n	800cb64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d009      	beq.n	800cb78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 8377 	beq.w	800d25c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	4798      	blx	r3
      }
      return;
 800cb76:	e371      	b.n	800d25c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cb78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f000 8123 	beq.w	800cdc8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb86:	4b8d      	ldr	r3, [pc, #564]	@ (800cdbc <HAL_UART_IRQHandler+0x2b8>)
 800cb88:	4013      	ands	r3, r2
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d106      	bne.n	800cb9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cb92:	4b8b      	ldr	r3, [pc, #556]	@ (800cdc0 <HAL_UART_IRQHandler+0x2bc>)
 800cb94:	4013      	ands	r3, r2
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 8116 	beq.w	800cdc8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d011      	beq.n	800cbcc <HAL_UART_IRQHandler+0xc8>
 800cba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00b      	beq.n	800cbcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbc2:	f043 0201 	orr.w	r2, r3, #1
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbd0:	f003 0302 	and.w	r3, r3, #2
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d011      	beq.n	800cbfc <HAL_UART_IRQHandler+0xf8>
 800cbd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbdc:	f003 0301 	and.w	r3, r3, #1
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00b      	beq.n	800cbfc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2202      	movs	r2, #2
 800cbea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbf2:	f043 0204 	orr.w	r2, r3, #4
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc00:	f003 0304 	and.w	r3, r3, #4
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d011      	beq.n	800cc2c <HAL_UART_IRQHandler+0x128>
 800cc08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc0c:	f003 0301 	and.w	r3, r3, #1
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00b      	beq.n	800cc2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2204      	movs	r2, #4
 800cc1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc22:	f043 0202 	orr.w	r2, r3, #2
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc30:	f003 0308 	and.w	r3, r3, #8
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d017      	beq.n	800cc68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc3c:	f003 0320 	and.w	r3, r3, #32
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d105      	bne.n	800cc50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cc44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc48:	4b5c      	ldr	r3, [pc, #368]	@ (800cdbc <HAL_UART_IRQHandler+0x2b8>)
 800cc4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00b      	beq.n	800cc68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2208      	movs	r2, #8
 800cc56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc5e:	f043 0208 	orr.w	r2, r3, #8
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d012      	beq.n	800cc9a <HAL_UART_IRQHandler+0x196>
 800cc74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00c      	beq.n	800cc9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc90:	f043 0220 	orr.w	r2, r3, #32
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 82dd 	beq.w	800d260 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccaa:	f003 0320 	and.w	r3, r3, #32
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d013      	beq.n	800ccda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ccb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccb6:	f003 0320 	and.w	r3, r3, #32
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d105      	bne.n	800ccca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ccbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d007      	beq.n	800ccda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d003      	beq.n	800ccda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cce0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccee:	2b40      	cmp	r3, #64	@ 0x40
 800ccf0:	d005      	beq.n	800ccfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ccf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ccf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d054      	beq.n	800cda8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f001 fbf2 	bl	800e4e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd0e:	2b40      	cmp	r3, #64	@ 0x40
 800cd10:	d146      	bne.n	800cda0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	3308      	adds	r3, #8
 800cd18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cd20:	e853 3f00 	ldrex	r3, [r3]
 800cd24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cd28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	3308      	adds	r3, #8
 800cd3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cd3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cd42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cd4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cd4e:	e841 2300 	strex	r3, r2, [r1]
 800cd52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cd56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1d9      	bne.n	800cd12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d017      	beq.n	800cd98 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd6e:	4a15      	ldr	r2, [pc, #84]	@ (800cdc4 <HAL_UART_IRQHandler+0x2c0>)
 800cd70:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7f8 f929 	bl	8004fd0 <HAL_DMA_Abort_IT>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d019      	beq.n	800cdb8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cd92:	4610      	mov	r0, r2
 800cd94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd96:	e00f      	b.n	800cdb8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 fa81 	bl	800d2a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd9e:	e00b      	b.n	800cdb8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fa7d 	bl	800d2a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cda6:	e007      	b.n	800cdb8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fa79 	bl	800d2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cdb6:	e253      	b.n	800d260 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdb8:	bf00      	nop
    return;
 800cdba:	e251      	b.n	800d260 <HAL_UART_IRQHandler+0x75c>
 800cdbc:	10000001 	.word	0x10000001
 800cdc0:	04000120 	.word	0x04000120
 800cdc4:	0800e79b 	.word	0x0800e79b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	f040 81e7 	bne.w	800d1a0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cdd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdd6:	f003 0310 	and.w	r3, r3, #16
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 81e0 	beq.w	800d1a0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cde0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cde4:	f003 0310 	and.w	r3, r3, #16
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 81d9 	beq.w	800d1a0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2210      	movs	r2, #16
 800cdf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce00:	2b40      	cmp	r3, #64	@ 0x40
 800ce02:	f040 8151 	bne.w	800d0a8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a96      	ldr	r2, [pc, #600]	@ (800d068 <HAL_UART_IRQHandler+0x564>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d068      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a93      	ldr	r2, [pc, #588]	@ (800d06c <HAL_UART_IRQHandler+0x568>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d061      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a91      	ldr	r2, [pc, #580]	@ (800d070 <HAL_UART_IRQHandler+0x56c>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d05a      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a8e      	ldr	r2, [pc, #568]	@ (800d074 <HAL_UART_IRQHandler+0x570>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d053      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a8c      	ldr	r2, [pc, #560]	@ (800d078 <HAL_UART_IRQHandler+0x574>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d04c      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a89      	ldr	r2, [pc, #548]	@ (800d07c <HAL_UART_IRQHandler+0x578>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d045      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a87      	ldr	r2, [pc, #540]	@ (800d080 <HAL_UART_IRQHandler+0x57c>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d03e      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a84      	ldr	r2, [pc, #528]	@ (800d084 <HAL_UART_IRQHandler+0x580>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d037      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a82      	ldr	r2, [pc, #520]	@ (800d088 <HAL_UART_IRQHandler+0x584>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d030      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a7f      	ldr	r2, [pc, #508]	@ (800d08c <HAL_UART_IRQHandler+0x588>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d029      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a7d      	ldr	r2, [pc, #500]	@ (800d090 <HAL_UART_IRQHandler+0x58c>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d022      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a7a      	ldr	r2, [pc, #488]	@ (800d094 <HAL_UART_IRQHandler+0x590>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d01b      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a78      	ldr	r2, [pc, #480]	@ (800d098 <HAL_UART_IRQHandler+0x594>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d014      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a75      	ldr	r2, [pc, #468]	@ (800d09c <HAL_UART_IRQHandler+0x598>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d00d      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a73      	ldr	r2, [pc, #460]	@ (800d0a0 <HAL_UART_IRQHandler+0x59c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d006      	beq.n	800cee6 <HAL_UART_IRQHandler+0x3e2>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a70      	ldr	r2, [pc, #448]	@ (800d0a4 <HAL_UART_IRQHandler+0x5a0>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d106      	bne.n	800cef4 <HAL_UART_IRQHandler+0x3f0>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	e005      	b.n	800cf00 <HAL_UART_IRQHandler+0x3fc>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cf04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f000 81ab 	beq.w	800d264 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	f080 81a3 	bcs.w	800d264 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cf24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf2e:	69db      	ldr	r3, [r3, #28]
 800cf30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf34:	f000 8087 	beq.w	800d046 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf44:	e853 3f00 	ldrex	r3, [r3]
 800cf48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cf4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cf50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cf66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cf6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cf72:	e841 2300 	strex	r3, r2, [r1]
 800cf76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cf7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1da      	bne.n	800cf38 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	3308      	adds	r3, #8
 800cf88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf94:	f023 0301 	bic.w	r3, r3, #1
 800cf98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cfa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cfaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cfae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cfb2:	e841 2300 	strex	r3, r2, [r1]
 800cfb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cfb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1e1      	bne.n	800cf82 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3308      	adds	r3, #8
 800cfc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cfc8:	e853 3f00 	ldrex	r3, [r3]
 800cfcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cfce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3308      	adds	r3, #8
 800cfde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cfe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cfe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cfe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cfea:	e841 2300 	strex	r3, r2, [r1]
 800cfee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1e3      	bne.n	800cfbe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2220      	movs	r2, #32
 800cffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d00c:	e853 3f00 	ldrex	r3, [r3]
 800d010:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d014:	f023 0310 	bic.w	r3, r3, #16
 800d018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	461a      	mov	r2, r3
 800d022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d026:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d028:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d02c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d02e:	e841 2300 	strex	r3, r2, [r1]
 800d032:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1e4      	bne.n	800d004 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d040:	4618      	mov	r0, r3
 800d042:	f7f7 fca7 	bl	8004994 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2202      	movs	r2, #2
 800d04a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d058:	b29b      	uxth	r3, r3
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	4619      	mov	r1, r3
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 f927 	bl	800d2b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d066:	e0fd      	b.n	800d264 <HAL_UART_IRQHandler+0x760>
 800d068:	40020010 	.word	0x40020010
 800d06c:	40020028 	.word	0x40020028
 800d070:	40020040 	.word	0x40020040
 800d074:	40020058 	.word	0x40020058
 800d078:	40020070 	.word	0x40020070
 800d07c:	40020088 	.word	0x40020088
 800d080:	400200a0 	.word	0x400200a0
 800d084:	400200b8 	.word	0x400200b8
 800d088:	40020410 	.word	0x40020410
 800d08c:	40020428 	.word	0x40020428
 800d090:	40020440 	.word	0x40020440
 800d094:	40020458 	.word	0x40020458
 800d098:	40020470 	.word	0x40020470
 800d09c:	40020488 	.word	0x40020488
 800d0a0:	400204a0 	.word	0x400204a0
 800d0a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f000 80cf 	beq.w	800d268 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d0ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f000 80ca 	beq.w	800d268 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0dc:	e853 3f00 	ldrex	r3, [r3]
 800d0e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d0e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d0f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0f8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d0fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d0fe:	e841 2300 	strex	r3, r2, [r1]
 800d102:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1e4      	bne.n	800d0d4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3308      	adds	r3, #8
 800d110:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d114:	e853 3f00 	ldrex	r3, [r3]
 800d118:	623b      	str	r3, [r7, #32]
   return(result);
 800d11a:	6a3a      	ldr	r2, [r7, #32]
 800d11c:	4b55      	ldr	r3, [pc, #340]	@ (800d274 <HAL_UART_IRQHandler+0x770>)
 800d11e:	4013      	ands	r3, r2
 800d120:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	3308      	adds	r3, #8
 800d12a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d12e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d136:	e841 2300 	strex	r3, r2, [r1]
 800d13a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1e3      	bne.n	800d10a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2220      	movs	r2, #32
 800d146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	e853 3f00 	ldrex	r3, [r3]
 800d162:	60fb      	str	r3, [r7, #12]
   return(result);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f023 0310 	bic.w	r3, r3, #16
 800d16a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d178:	61fb      	str	r3, [r7, #28]
 800d17a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17c:	69b9      	ldr	r1, [r7, #24]
 800d17e:	69fa      	ldr	r2, [r7, #28]
 800d180:	e841 2300 	strex	r3, r2, [r1]
 800d184:	617b      	str	r3, [r7, #20]
   return(result);
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1e4      	bne.n	800d156 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2202      	movs	r2, #2
 800d190:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d196:	4619      	mov	r1, r3
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f88b 	bl	800d2b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d19e:	e063      	b.n	800d268 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00e      	beq.n	800d1ca <HAL_UART_IRQHandler+0x6c6>
 800d1ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d008      	beq.n	800d1ca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d1c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f001 fb2a 	bl	800e81c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1c8:	e051      	b.n	800d26e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d014      	beq.n	800d200 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d1d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d105      	bne.n	800d1ee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d1e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d008      	beq.n	800d200 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d03a      	beq.n	800d26c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	4798      	blx	r3
    }
    return;
 800d1fe:	e035      	b.n	800d26c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d009      	beq.n	800d220 <HAL_UART_IRQHandler+0x71c>
 800d20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d214:	2b00      	cmp	r3, #0
 800d216:	d003      	beq.n	800d220 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f001 fad4 	bl	800e7c6 <UART_EndTransmit_IT>
    return;
 800d21e:	e026      	b.n	800d26e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d009      	beq.n	800d240 <HAL_UART_IRQHandler+0x73c>
 800d22c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d230:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f001 fb03 	bl	800e844 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d23e:	e016      	b.n	800d26e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d010      	beq.n	800d26e <HAL_UART_IRQHandler+0x76a>
 800d24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d250:	2b00      	cmp	r3, #0
 800d252:	da0c      	bge.n	800d26e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f001 faeb 	bl	800e830 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d25a:	e008      	b.n	800d26e <HAL_UART_IRQHandler+0x76a>
      return;
 800d25c:	bf00      	nop
 800d25e:	e006      	b.n	800d26e <HAL_UART_IRQHandler+0x76a>
    return;
 800d260:	bf00      	nop
 800d262:	e004      	b.n	800d26e <HAL_UART_IRQHandler+0x76a>
      return;
 800d264:	bf00      	nop
 800d266:	e002      	b.n	800d26e <HAL_UART_IRQHandler+0x76a>
      return;
 800d268:	bf00      	nop
 800d26a:	e000      	b.n	800d26e <HAL_UART_IRQHandler+0x76a>
    return;
 800d26c:	bf00      	nop
  }
}
 800d26e:	37e8      	adds	r7, #232	@ 0xe8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	effffffe 	.word	0xeffffffe

0800d278 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d294:	bf00      	nop
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d2a8:	bf00      	nop
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2d0:	b092      	sub	sp, #72	@ 0x48
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	689a      	ldr	r2, [r3, #8]
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	431a      	orrs	r2, r3
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	431a      	orrs	r2, r3
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	69db      	ldr	r3, [r3, #28]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	4bbe      	ldr	r3, [pc, #760]	@ (800d5f4 <UART_SetConfig+0x328>)
 800d2fc:	4013      	ands	r3, r2
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	6812      	ldr	r2, [r2, #0]
 800d302:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d304:	430b      	orrs	r3, r1
 800d306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	68da      	ldr	r2, [r3, #12]
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	430a      	orrs	r2, r1
 800d31c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4ab3      	ldr	r2, [pc, #716]	@ (800d5f8 <UART_SetConfig+0x32c>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d004      	beq.n	800d338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d334:	4313      	orrs	r3, r2
 800d336:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	689a      	ldr	r2, [r3, #8]
 800d33e:	4baf      	ldr	r3, [pc, #700]	@ (800d5fc <UART_SetConfig+0x330>)
 800d340:	4013      	ands	r3, r2
 800d342:	697a      	ldr	r2, [r7, #20]
 800d344:	6812      	ldr	r2, [r2, #0]
 800d346:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d348:	430b      	orrs	r3, r1
 800d34a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d352:	f023 010f 	bic.w	r1, r3, #15
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	430a      	orrs	r2, r1
 800d360:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4aa6      	ldr	r2, [pc, #664]	@ (800d600 <UART_SetConfig+0x334>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d177      	bne.n	800d45c <UART_SetConfig+0x190>
 800d36c:	4ba5      	ldr	r3, [pc, #660]	@ (800d604 <UART_SetConfig+0x338>)
 800d36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d374:	2b28      	cmp	r3, #40	@ 0x28
 800d376:	d86d      	bhi.n	800d454 <UART_SetConfig+0x188>
 800d378:	a201      	add	r2, pc, #4	@ (adr r2, 800d380 <UART_SetConfig+0xb4>)
 800d37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37e:	bf00      	nop
 800d380:	0800d425 	.word	0x0800d425
 800d384:	0800d455 	.word	0x0800d455
 800d388:	0800d455 	.word	0x0800d455
 800d38c:	0800d455 	.word	0x0800d455
 800d390:	0800d455 	.word	0x0800d455
 800d394:	0800d455 	.word	0x0800d455
 800d398:	0800d455 	.word	0x0800d455
 800d39c:	0800d455 	.word	0x0800d455
 800d3a0:	0800d42d 	.word	0x0800d42d
 800d3a4:	0800d455 	.word	0x0800d455
 800d3a8:	0800d455 	.word	0x0800d455
 800d3ac:	0800d455 	.word	0x0800d455
 800d3b0:	0800d455 	.word	0x0800d455
 800d3b4:	0800d455 	.word	0x0800d455
 800d3b8:	0800d455 	.word	0x0800d455
 800d3bc:	0800d455 	.word	0x0800d455
 800d3c0:	0800d435 	.word	0x0800d435
 800d3c4:	0800d455 	.word	0x0800d455
 800d3c8:	0800d455 	.word	0x0800d455
 800d3cc:	0800d455 	.word	0x0800d455
 800d3d0:	0800d455 	.word	0x0800d455
 800d3d4:	0800d455 	.word	0x0800d455
 800d3d8:	0800d455 	.word	0x0800d455
 800d3dc:	0800d455 	.word	0x0800d455
 800d3e0:	0800d43d 	.word	0x0800d43d
 800d3e4:	0800d455 	.word	0x0800d455
 800d3e8:	0800d455 	.word	0x0800d455
 800d3ec:	0800d455 	.word	0x0800d455
 800d3f0:	0800d455 	.word	0x0800d455
 800d3f4:	0800d455 	.word	0x0800d455
 800d3f8:	0800d455 	.word	0x0800d455
 800d3fc:	0800d455 	.word	0x0800d455
 800d400:	0800d445 	.word	0x0800d445
 800d404:	0800d455 	.word	0x0800d455
 800d408:	0800d455 	.word	0x0800d455
 800d40c:	0800d455 	.word	0x0800d455
 800d410:	0800d455 	.word	0x0800d455
 800d414:	0800d455 	.word	0x0800d455
 800d418:	0800d455 	.word	0x0800d455
 800d41c:	0800d455 	.word	0x0800d455
 800d420:	0800d44d 	.word	0x0800d44d
 800d424:	2301      	movs	r3, #1
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d42a:	e326      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d42c:	2304      	movs	r3, #4
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d432:	e322      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d434:	2308      	movs	r3, #8
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d43a:	e31e      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d43c:	2310      	movs	r3, #16
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d442:	e31a      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d444:	2320      	movs	r3, #32
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d44a:	e316      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d44c:	2340      	movs	r3, #64	@ 0x40
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d452:	e312      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d454:	2380      	movs	r3, #128	@ 0x80
 800d456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d45a:	e30e      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a69      	ldr	r2, [pc, #420]	@ (800d608 <UART_SetConfig+0x33c>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d130      	bne.n	800d4c8 <UART_SetConfig+0x1fc>
 800d466:	4b67      	ldr	r3, [pc, #412]	@ (800d604 <UART_SetConfig+0x338>)
 800d468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d46a:	f003 0307 	and.w	r3, r3, #7
 800d46e:	2b05      	cmp	r3, #5
 800d470:	d826      	bhi.n	800d4c0 <UART_SetConfig+0x1f4>
 800d472:	a201      	add	r2, pc, #4	@ (adr r2, 800d478 <UART_SetConfig+0x1ac>)
 800d474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d478:	0800d491 	.word	0x0800d491
 800d47c:	0800d499 	.word	0x0800d499
 800d480:	0800d4a1 	.word	0x0800d4a1
 800d484:	0800d4a9 	.word	0x0800d4a9
 800d488:	0800d4b1 	.word	0x0800d4b1
 800d48c:	0800d4b9 	.word	0x0800d4b9
 800d490:	2300      	movs	r3, #0
 800d492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d496:	e2f0      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d498:	2304      	movs	r3, #4
 800d49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d49e:	e2ec      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d4a0:	2308      	movs	r3, #8
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4a6:	e2e8      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d4a8:	2310      	movs	r3, #16
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ae:	e2e4      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d4b0:	2320      	movs	r3, #32
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4b6:	e2e0      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d4b8:	2340      	movs	r3, #64	@ 0x40
 800d4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4be:	e2dc      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d4c0:	2380      	movs	r3, #128	@ 0x80
 800d4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4c6:	e2d8      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4a4f      	ldr	r2, [pc, #316]	@ (800d60c <UART_SetConfig+0x340>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d130      	bne.n	800d534 <UART_SetConfig+0x268>
 800d4d2:	4b4c      	ldr	r3, [pc, #304]	@ (800d604 <UART_SetConfig+0x338>)
 800d4d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4d6:	f003 0307 	and.w	r3, r3, #7
 800d4da:	2b05      	cmp	r3, #5
 800d4dc:	d826      	bhi.n	800d52c <UART_SetConfig+0x260>
 800d4de:	a201      	add	r2, pc, #4	@ (adr r2, 800d4e4 <UART_SetConfig+0x218>)
 800d4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e4:	0800d4fd 	.word	0x0800d4fd
 800d4e8:	0800d505 	.word	0x0800d505
 800d4ec:	0800d50d 	.word	0x0800d50d
 800d4f0:	0800d515 	.word	0x0800d515
 800d4f4:	0800d51d 	.word	0x0800d51d
 800d4f8:	0800d525 	.word	0x0800d525
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d502:	e2ba      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d504:	2304      	movs	r3, #4
 800d506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d50a:	e2b6      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d50c:	2308      	movs	r3, #8
 800d50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d512:	e2b2      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d514:	2310      	movs	r3, #16
 800d516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d51a:	e2ae      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d51c:	2320      	movs	r3, #32
 800d51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d522:	e2aa      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d524:	2340      	movs	r3, #64	@ 0x40
 800d526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d52a:	e2a6      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d52c:	2380      	movs	r3, #128	@ 0x80
 800d52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d532:	e2a2      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a35      	ldr	r2, [pc, #212]	@ (800d610 <UART_SetConfig+0x344>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d130      	bne.n	800d5a0 <UART_SetConfig+0x2d4>
 800d53e:	4b31      	ldr	r3, [pc, #196]	@ (800d604 <UART_SetConfig+0x338>)
 800d540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d542:	f003 0307 	and.w	r3, r3, #7
 800d546:	2b05      	cmp	r3, #5
 800d548:	d826      	bhi.n	800d598 <UART_SetConfig+0x2cc>
 800d54a:	a201      	add	r2, pc, #4	@ (adr r2, 800d550 <UART_SetConfig+0x284>)
 800d54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d550:	0800d569 	.word	0x0800d569
 800d554:	0800d571 	.word	0x0800d571
 800d558:	0800d579 	.word	0x0800d579
 800d55c:	0800d581 	.word	0x0800d581
 800d560:	0800d589 	.word	0x0800d589
 800d564:	0800d591 	.word	0x0800d591
 800d568:	2300      	movs	r3, #0
 800d56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d56e:	e284      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d570:	2304      	movs	r3, #4
 800d572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d576:	e280      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d578:	2308      	movs	r3, #8
 800d57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d57e:	e27c      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d580:	2310      	movs	r3, #16
 800d582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d586:	e278      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d588:	2320      	movs	r3, #32
 800d58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d58e:	e274      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d590:	2340      	movs	r3, #64	@ 0x40
 800d592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d596:	e270      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d598:	2380      	movs	r3, #128	@ 0x80
 800d59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d59e:	e26c      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a1b      	ldr	r2, [pc, #108]	@ (800d614 <UART_SetConfig+0x348>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d142      	bne.n	800d630 <UART_SetConfig+0x364>
 800d5aa:	4b16      	ldr	r3, [pc, #88]	@ (800d604 <UART_SetConfig+0x338>)
 800d5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5ae:	f003 0307 	and.w	r3, r3, #7
 800d5b2:	2b05      	cmp	r3, #5
 800d5b4:	d838      	bhi.n	800d628 <UART_SetConfig+0x35c>
 800d5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d5bc <UART_SetConfig+0x2f0>)
 800d5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5bc:	0800d5d5 	.word	0x0800d5d5
 800d5c0:	0800d5dd 	.word	0x0800d5dd
 800d5c4:	0800d5e5 	.word	0x0800d5e5
 800d5c8:	0800d5ed 	.word	0x0800d5ed
 800d5cc:	0800d619 	.word	0x0800d619
 800d5d0:	0800d621 	.word	0x0800d621
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5da:	e24e      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d5dc:	2304      	movs	r3, #4
 800d5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5e2:	e24a      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d5e4:	2308      	movs	r3, #8
 800d5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ea:	e246      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d5ec:	2310      	movs	r3, #16
 800d5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5f2:	e242      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d5f4:	cfff69f3 	.word	0xcfff69f3
 800d5f8:	58000c00 	.word	0x58000c00
 800d5fc:	11fff4ff 	.word	0x11fff4ff
 800d600:	40011000 	.word	0x40011000
 800d604:	58024400 	.word	0x58024400
 800d608:	40004400 	.word	0x40004400
 800d60c:	40004800 	.word	0x40004800
 800d610:	40004c00 	.word	0x40004c00
 800d614:	40005000 	.word	0x40005000
 800d618:	2320      	movs	r3, #32
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61e:	e22c      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d620:	2340      	movs	r3, #64	@ 0x40
 800d622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d626:	e228      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d628:	2380      	movs	r3, #128	@ 0x80
 800d62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62e:	e224      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4ab1      	ldr	r2, [pc, #708]	@ (800d8fc <UART_SetConfig+0x630>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d176      	bne.n	800d728 <UART_SetConfig+0x45c>
 800d63a:	4bb1      	ldr	r3, [pc, #708]	@ (800d900 <UART_SetConfig+0x634>)
 800d63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d63e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d642:	2b28      	cmp	r3, #40	@ 0x28
 800d644:	d86c      	bhi.n	800d720 <UART_SetConfig+0x454>
 800d646:	a201      	add	r2, pc, #4	@ (adr r2, 800d64c <UART_SetConfig+0x380>)
 800d648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64c:	0800d6f1 	.word	0x0800d6f1
 800d650:	0800d721 	.word	0x0800d721
 800d654:	0800d721 	.word	0x0800d721
 800d658:	0800d721 	.word	0x0800d721
 800d65c:	0800d721 	.word	0x0800d721
 800d660:	0800d721 	.word	0x0800d721
 800d664:	0800d721 	.word	0x0800d721
 800d668:	0800d721 	.word	0x0800d721
 800d66c:	0800d6f9 	.word	0x0800d6f9
 800d670:	0800d721 	.word	0x0800d721
 800d674:	0800d721 	.word	0x0800d721
 800d678:	0800d721 	.word	0x0800d721
 800d67c:	0800d721 	.word	0x0800d721
 800d680:	0800d721 	.word	0x0800d721
 800d684:	0800d721 	.word	0x0800d721
 800d688:	0800d721 	.word	0x0800d721
 800d68c:	0800d701 	.word	0x0800d701
 800d690:	0800d721 	.word	0x0800d721
 800d694:	0800d721 	.word	0x0800d721
 800d698:	0800d721 	.word	0x0800d721
 800d69c:	0800d721 	.word	0x0800d721
 800d6a0:	0800d721 	.word	0x0800d721
 800d6a4:	0800d721 	.word	0x0800d721
 800d6a8:	0800d721 	.word	0x0800d721
 800d6ac:	0800d709 	.word	0x0800d709
 800d6b0:	0800d721 	.word	0x0800d721
 800d6b4:	0800d721 	.word	0x0800d721
 800d6b8:	0800d721 	.word	0x0800d721
 800d6bc:	0800d721 	.word	0x0800d721
 800d6c0:	0800d721 	.word	0x0800d721
 800d6c4:	0800d721 	.word	0x0800d721
 800d6c8:	0800d721 	.word	0x0800d721
 800d6cc:	0800d711 	.word	0x0800d711
 800d6d0:	0800d721 	.word	0x0800d721
 800d6d4:	0800d721 	.word	0x0800d721
 800d6d8:	0800d721 	.word	0x0800d721
 800d6dc:	0800d721 	.word	0x0800d721
 800d6e0:	0800d721 	.word	0x0800d721
 800d6e4:	0800d721 	.word	0x0800d721
 800d6e8:	0800d721 	.word	0x0800d721
 800d6ec:	0800d719 	.word	0x0800d719
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f6:	e1c0      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d6f8:	2304      	movs	r3, #4
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fe:	e1bc      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d700:	2308      	movs	r3, #8
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d706:	e1b8      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d708:	2310      	movs	r3, #16
 800d70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d70e:	e1b4      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d710:	2320      	movs	r3, #32
 800d712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d716:	e1b0      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d718:	2340      	movs	r3, #64	@ 0x40
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d71e:	e1ac      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d720:	2380      	movs	r3, #128	@ 0x80
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d726:	e1a8      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a75      	ldr	r2, [pc, #468]	@ (800d904 <UART_SetConfig+0x638>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d130      	bne.n	800d794 <UART_SetConfig+0x4c8>
 800d732:	4b73      	ldr	r3, [pc, #460]	@ (800d900 <UART_SetConfig+0x634>)
 800d734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d736:	f003 0307 	and.w	r3, r3, #7
 800d73a:	2b05      	cmp	r3, #5
 800d73c:	d826      	bhi.n	800d78c <UART_SetConfig+0x4c0>
 800d73e:	a201      	add	r2, pc, #4	@ (adr r2, 800d744 <UART_SetConfig+0x478>)
 800d740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d744:	0800d75d 	.word	0x0800d75d
 800d748:	0800d765 	.word	0x0800d765
 800d74c:	0800d76d 	.word	0x0800d76d
 800d750:	0800d775 	.word	0x0800d775
 800d754:	0800d77d 	.word	0x0800d77d
 800d758:	0800d785 	.word	0x0800d785
 800d75c:	2300      	movs	r3, #0
 800d75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d762:	e18a      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d764:	2304      	movs	r3, #4
 800d766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76a:	e186      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d76c:	2308      	movs	r3, #8
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d772:	e182      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d774:	2310      	movs	r3, #16
 800d776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d77a:	e17e      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d77c:	2320      	movs	r3, #32
 800d77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d782:	e17a      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d784:	2340      	movs	r3, #64	@ 0x40
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d78a:	e176      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d78c:	2380      	movs	r3, #128	@ 0x80
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d792:	e172      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a5b      	ldr	r2, [pc, #364]	@ (800d908 <UART_SetConfig+0x63c>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d130      	bne.n	800d800 <UART_SetConfig+0x534>
 800d79e:	4b58      	ldr	r3, [pc, #352]	@ (800d900 <UART_SetConfig+0x634>)
 800d7a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7a2:	f003 0307 	and.w	r3, r3, #7
 800d7a6:	2b05      	cmp	r3, #5
 800d7a8:	d826      	bhi.n	800d7f8 <UART_SetConfig+0x52c>
 800d7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d7b0 <UART_SetConfig+0x4e4>)
 800d7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b0:	0800d7c9 	.word	0x0800d7c9
 800d7b4:	0800d7d1 	.word	0x0800d7d1
 800d7b8:	0800d7d9 	.word	0x0800d7d9
 800d7bc:	0800d7e1 	.word	0x0800d7e1
 800d7c0:	0800d7e9 	.word	0x0800d7e9
 800d7c4:	0800d7f1 	.word	0x0800d7f1
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ce:	e154      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d7d0:	2304      	movs	r3, #4
 800d7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7d6:	e150      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d7d8:	2308      	movs	r3, #8
 800d7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7de:	e14c      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d7e0:	2310      	movs	r3, #16
 800d7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e6:	e148      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d7e8:	2320      	movs	r3, #32
 800d7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ee:	e144      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d7f0:	2340      	movs	r3, #64	@ 0x40
 800d7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f6:	e140      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d7f8:	2380      	movs	r3, #128	@ 0x80
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fe:	e13c      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a41      	ldr	r2, [pc, #260]	@ (800d90c <UART_SetConfig+0x640>)
 800d806:	4293      	cmp	r3, r2
 800d808:	f040 8082 	bne.w	800d910 <UART_SetConfig+0x644>
 800d80c:	4b3c      	ldr	r3, [pc, #240]	@ (800d900 <UART_SetConfig+0x634>)
 800d80e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d810:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d814:	2b28      	cmp	r3, #40	@ 0x28
 800d816:	d86d      	bhi.n	800d8f4 <UART_SetConfig+0x628>
 800d818:	a201      	add	r2, pc, #4	@ (adr r2, 800d820 <UART_SetConfig+0x554>)
 800d81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81e:	bf00      	nop
 800d820:	0800d8c5 	.word	0x0800d8c5
 800d824:	0800d8f5 	.word	0x0800d8f5
 800d828:	0800d8f5 	.word	0x0800d8f5
 800d82c:	0800d8f5 	.word	0x0800d8f5
 800d830:	0800d8f5 	.word	0x0800d8f5
 800d834:	0800d8f5 	.word	0x0800d8f5
 800d838:	0800d8f5 	.word	0x0800d8f5
 800d83c:	0800d8f5 	.word	0x0800d8f5
 800d840:	0800d8cd 	.word	0x0800d8cd
 800d844:	0800d8f5 	.word	0x0800d8f5
 800d848:	0800d8f5 	.word	0x0800d8f5
 800d84c:	0800d8f5 	.word	0x0800d8f5
 800d850:	0800d8f5 	.word	0x0800d8f5
 800d854:	0800d8f5 	.word	0x0800d8f5
 800d858:	0800d8f5 	.word	0x0800d8f5
 800d85c:	0800d8f5 	.word	0x0800d8f5
 800d860:	0800d8d5 	.word	0x0800d8d5
 800d864:	0800d8f5 	.word	0x0800d8f5
 800d868:	0800d8f5 	.word	0x0800d8f5
 800d86c:	0800d8f5 	.word	0x0800d8f5
 800d870:	0800d8f5 	.word	0x0800d8f5
 800d874:	0800d8f5 	.word	0x0800d8f5
 800d878:	0800d8f5 	.word	0x0800d8f5
 800d87c:	0800d8f5 	.word	0x0800d8f5
 800d880:	0800d8dd 	.word	0x0800d8dd
 800d884:	0800d8f5 	.word	0x0800d8f5
 800d888:	0800d8f5 	.word	0x0800d8f5
 800d88c:	0800d8f5 	.word	0x0800d8f5
 800d890:	0800d8f5 	.word	0x0800d8f5
 800d894:	0800d8f5 	.word	0x0800d8f5
 800d898:	0800d8f5 	.word	0x0800d8f5
 800d89c:	0800d8f5 	.word	0x0800d8f5
 800d8a0:	0800d8e5 	.word	0x0800d8e5
 800d8a4:	0800d8f5 	.word	0x0800d8f5
 800d8a8:	0800d8f5 	.word	0x0800d8f5
 800d8ac:	0800d8f5 	.word	0x0800d8f5
 800d8b0:	0800d8f5 	.word	0x0800d8f5
 800d8b4:	0800d8f5 	.word	0x0800d8f5
 800d8b8:	0800d8f5 	.word	0x0800d8f5
 800d8bc:	0800d8f5 	.word	0x0800d8f5
 800d8c0:	0800d8ed 	.word	0x0800d8ed
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ca:	e0d6      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d8cc:	2304      	movs	r3, #4
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d2:	e0d2      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d8d4:	2308      	movs	r3, #8
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8da:	e0ce      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d8dc:	2310      	movs	r3, #16
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e2:	e0ca      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d8e4:	2320      	movs	r3, #32
 800d8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ea:	e0c6      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d8ec:	2340      	movs	r3, #64	@ 0x40
 800d8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8f2:	e0c2      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d8f4:	2380      	movs	r3, #128	@ 0x80
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8fa:	e0be      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d8fc:	40011400 	.word	0x40011400
 800d900:	58024400 	.word	0x58024400
 800d904:	40007800 	.word	0x40007800
 800d908:	40007c00 	.word	0x40007c00
 800d90c:	40011800 	.word	0x40011800
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4aad      	ldr	r2, [pc, #692]	@ (800dbcc <UART_SetConfig+0x900>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d176      	bne.n	800da08 <UART_SetConfig+0x73c>
 800d91a:	4bad      	ldr	r3, [pc, #692]	@ (800dbd0 <UART_SetConfig+0x904>)
 800d91c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d91e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d922:	2b28      	cmp	r3, #40	@ 0x28
 800d924:	d86c      	bhi.n	800da00 <UART_SetConfig+0x734>
 800d926:	a201      	add	r2, pc, #4	@ (adr r2, 800d92c <UART_SetConfig+0x660>)
 800d928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d92c:	0800d9d1 	.word	0x0800d9d1
 800d930:	0800da01 	.word	0x0800da01
 800d934:	0800da01 	.word	0x0800da01
 800d938:	0800da01 	.word	0x0800da01
 800d93c:	0800da01 	.word	0x0800da01
 800d940:	0800da01 	.word	0x0800da01
 800d944:	0800da01 	.word	0x0800da01
 800d948:	0800da01 	.word	0x0800da01
 800d94c:	0800d9d9 	.word	0x0800d9d9
 800d950:	0800da01 	.word	0x0800da01
 800d954:	0800da01 	.word	0x0800da01
 800d958:	0800da01 	.word	0x0800da01
 800d95c:	0800da01 	.word	0x0800da01
 800d960:	0800da01 	.word	0x0800da01
 800d964:	0800da01 	.word	0x0800da01
 800d968:	0800da01 	.word	0x0800da01
 800d96c:	0800d9e1 	.word	0x0800d9e1
 800d970:	0800da01 	.word	0x0800da01
 800d974:	0800da01 	.word	0x0800da01
 800d978:	0800da01 	.word	0x0800da01
 800d97c:	0800da01 	.word	0x0800da01
 800d980:	0800da01 	.word	0x0800da01
 800d984:	0800da01 	.word	0x0800da01
 800d988:	0800da01 	.word	0x0800da01
 800d98c:	0800d9e9 	.word	0x0800d9e9
 800d990:	0800da01 	.word	0x0800da01
 800d994:	0800da01 	.word	0x0800da01
 800d998:	0800da01 	.word	0x0800da01
 800d99c:	0800da01 	.word	0x0800da01
 800d9a0:	0800da01 	.word	0x0800da01
 800d9a4:	0800da01 	.word	0x0800da01
 800d9a8:	0800da01 	.word	0x0800da01
 800d9ac:	0800d9f1 	.word	0x0800d9f1
 800d9b0:	0800da01 	.word	0x0800da01
 800d9b4:	0800da01 	.word	0x0800da01
 800d9b8:	0800da01 	.word	0x0800da01
 800d9bc:	0800da01 	.word	0x0800da01
 800d9c0:	0800da01 	.word	0x0800da01
 800d9c4:	0800da01 	.word	0x0800da01
 800d9c8:	0800da01 	.word	0x0800da01
 800d9cc:	0800d9f9 	.word	0x0800d9f9
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d6:	e050      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d9d8:	2304      	movs	r3, #4
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e04c      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d9e0:	2308      	movs	r3, #8
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e6:	e048      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d9e8:	2310      	movs	r3, #16
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ee:	e044      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d9f0:	2320      	movs	r3, #32
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f6:	e040      	b.n	800da7a <UART_SetConfig+0x7ae>
 800d9f8:	2340      	movs	r3, #64	@ 0x40
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fe:	e03c      	b.n	800da7a <UART_SetConfig+0x7ae>
 800da00:	2380      	movs	r3, #128	@ 0x80
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da06:	e038      	b.n	800da7a <UART_SetConfig+0x7ae>
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a71      	ldr	r2, [pc, #452]	@ (800dbd4 <UART_SetConfig+0x908>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d130      	bne.n	800da74 <UART_SetConfig+0x7a8>
 800da12:	4b6f      	ldr	r3, [pc, #444]	@ (800dbd0 <UART_SetConfig+0x904>)
 800da14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da16:	f003 0307 	and.w	r3, r3, #7
 800da1a:	2b05      	cmp	r3, #5
 800da1c:	d826      	bhi.n	800da6c <UART_SetConfig+0x7a0>
 800da1e:	a201      	add	r2, pc, #4	@ (adr r2, 800da24 <UART_SetConfig+0x758>)
 800da20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da24:	0800da3d 	.word	0x0800da3d
 800da28:	0800da45 	.word	0x0800da45
 800da2c:	0800da4d 	.word	0x0800da4d
 800da30:	0800da55 	.word	0x0800da55
 800da34:	0800da5d 	.word	0x0800da5d
 800da38:	0800da65 	.word	0x0800da65
 800da3c:	2302      	movs	r3, #2
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da42:	e01a      	b.n	800da7a <UART_SetConfig+0x7ae>
 800da44:	2304      	movs	r3, #4
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e016      	b.n	800da7a <UART_SetConfig+0x7ae>
 800da4c:	2308      	movs	r3, #8
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da52:	e012      	b.n	800da7a <UART_SetConfig+0x7ae>
 800da54:	2310      	movs	r3, #16
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5a:	e00e      	b.n	800da7a <UART_SetConfig+0x7ae>
 800da5c:	2320      	movs	r3, #32
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da62:	e00a      	b.n	800da7a <UART_SetConfig+0x7ae>
 800da64:	2340      	movs	r3, #64	@ 0x40
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6a:	e006      	b.n	800da7a <UART_SetConfig+0x7ae>
 800da6c:	2380      	movs	r3, #128	@ 0x80
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da72:	e002      	b.n	800da7a <UART_SetConfig+0x7ae>
 800da74:	2380      	movs	r3, #128	@ 0x80
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a55      	ldr	r2, [pc, #340]	@ (800dbd4 <UART_SetConfig+0x908>)
 800da80:	4293      	cmp	r3, r2
 800da82:	f040 80f8 	bne.w	800dc76 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800da8a:	2b20      	cmp	r3, #32
 800da8c:	dc46      	bgt.n	800db1c <UART_SetConfig+0x850>
 800da8e:	2b02      	cmp	r3, #2
 800da90:	db75      	blt.n	800db7e <UART_SetConfig+0x8b2>
 800da92:	3b02      	subs	r3, #2
 800da94:	2b1e      	cmp	r3, #30
 800da96:	d872      	bhi.n	800db7e <UART_SetConfig+0x8b2>
 800da98:	a201      	add	r2, pc, #4	@ (adr r2, 800daa0 <UART_SetConfig+0x7d4>)
 800da9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9e:	bf00      	nop
 800daa0:	0800db23 	.word	0x0800db23
 800daa4:	0800db7f 	.word	0x0800db7f
 800daa8:	0800db2b 	.word	0x0800db2b
 800daac:	0800db7f 	.word	0x0800db7f
 800dab0:	0800db7f 	.word	0x0800db7f
 800dab4:	0800db7f 	.word	0x0800db7f
 800dab8:	0800db3b 	.word	0x0800db3b
 800dabc:	0800db7f 	.word	0x0800db7f
 800dac0:	0800db7f 	.word	0x0800db7f
 800dac4:	0800db7f 	.word	0x0800db7f
 800dac8:	0800db7f 	.word	0x0800db7f
 800dacc:	0800db7f 	.word	0x0800db7f
 800dad0:	0800db7f 	.word	0x0800db7f
 800dad4:	0800db7f 	.word	0x0800db7f
 800dad8:	0800db4b 	.word	0x0800db4b
 800dadc:	0800db7f 	.word	0x0800db7f
 800dae0:	0800db7f 	.word	0x0800db7f
 800dae4:	0800db7f 	.word	0x0800db7f
 800dae8:	0800db7f 	.word	0x0800db7f
 800daec:	0800db7f 	.word	0x0800db7f
 800daf0:	0800db7f 	.word	0x0800db7f
 800daf4:	0800db7f 	.word	0x0800db7f
 800daf8:	0800db7f 	.word	0x0800db7f
 800dafc:	0800db7f 	.word	0x0800db7f
 800db00:	0800db7f 	.word	0x0800db7f
 800db04:	0800db7f 	.word	0x0800db7f
 800db08:	0800db7f 	.word	0x0800db7f
 800db0c:	0800db7f 	.word	0x0800db7f
 800db10:	0800db7f 	.word	0x0800db7f
 800db14:	0800db7f 	.word	0x0800db7f
 800db18:	0800db71 	.word	0x0800db71
 800db1c:	2b40      	cmp	r3, #64	@ 0x40
 800db1e:	d02a      	beq.n	800db76 <UART_SetConfig+0x8aa>
 800db20:	e02d      	b.n	800db7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db22:	f7fc f835 	bl	8009b90 <HAL_RCCEx_GetD3PCLK1Freq>
 800db26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db28:	e02f      	b.n	800db8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fc f844 	bl	8009bbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db38:	e027      	b.n	800db8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db3a:	f107 0318 	add.w	r3, r7, #24
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fc f990 	bl	8009e64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db48:	e01f      	b.n	800db8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db4a:	4b21      	ldr	r3, [pc, #132]	@ (800dbd0 <UART_SetConfig+0x904>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f003 0320 	and.w	r3, r3, #32
 800db52:	2b00      	cmp	r3, #0
 800db54:	d009      	beq.n	800db6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db56:	4b1e      	ldr	r3, [pc, #120]	@ (800dbd0 <UART_SetConfig+0x904>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	08db      	lsrs	r3, r3, #3
 800db5c:	f003 0303 	and.w	r3, r3, #3
 800db60:	4a1d      	ldr	r2, [pc, #116]	@ (800dbd8 <UART_SetConfig+0x90c>)
 800db62:	fa22 f303 	lsr.w	r3, r2, r3
 800db66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db68:	e00f      	b.n	800db8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800db6a:	4b1b      	ldr	r3, [pc, #108]	@ (800dbd8 <UART_SetConfig+0x90c>)
 800db6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db6e:	e00c      	b.n	800db8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db70:	4b1a      	ldr	r3, [pc, #104]	@ (800dbdc <UART_SetConfig+0x910>)
 800db72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db74:	e009      	b.n	800db8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db7c:	e005      	b.n	800db8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800db7e:	2300      	movs	r3, #0
 800db80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800db82:	2301      	movs	r3, #1
 800db84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800db88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800db8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f000 81ee 	beq.w	800df6e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db96:	4a12      	ldr	r2, [pc, #72]	@ (800dbe0 <UART_SetConfig+0x914>)
 800db98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db9c:	461a      	mov	r2, r3
 800db9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dba0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dba4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	685a      	ldr	r2, [r3, #4]
 800dbaa:	4613      	mov	r3, r2
 800dbac:	005b      	lsls	r3, r3, #1
 800dbae:	4413      	add	r3, r2
 800dbb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d305      	bcc.n	800dbc2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d910      	bls.n	800dbe4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dbc8:	e1d1      	b.n	800df6e <UART_SetConfig+0xca2>
 800dbca:	bf00      	nop
 800dbcc:	40011c00 	.word	0x40011c00
 800dbd0:	58024400 	.word	0x58024400
 800dbd4:	58000c00 	.word	0x58000c00
 800dbd8:	03d09000 	.word	0x03d09000
 800dbdc:	003d0900 	.word	0x003d0900
 800dbe0:	08013190 	.word	0x08013190
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	60bb      	str	r3, [r7, #8]
 800dbea:	60fa      	str	r2, [r7, #12]
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf0:	4ac0      	ldr	r2, [pc, #768]	@ (800def4 <UART_SetConfig+0xc28>)
 800dbf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	603b      	str	r3, [r7, #0]
 800dbfc:	607a      	str	r2, [r7, #4]
 800dbfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc06:	f7f2 fbc3 	bl	8000390 <__aeabi_uldivmod>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	4610      	mov	r0, r2
 800dc10:	4619      	mov	r1, r3
 800dc12:	f04f 0200 	mov.w	r2, #0
 800dc16:	f04f 0300 	mov.w	r3, #0
 800dc1a:	020b      	lsls	r3, r1, #8
 800dc1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc20:	0202      	lsls	r2, r0, #8
 800dc22:	6979      	ldr	r1, [r7, #20]
 800dc24:	6849      	ldr	r1, [r1, #4]
 800dc26:	0849      	lsrs	r1, r1, #1
 800dc28:	2000      	movs	r0, #0
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	eb12 0804 	adds.w	r8, r2, r4
 800dc32:	eb43 0905 	adc.w	r9, r3, r5
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	469a      	mov	sl, r3
 800dc3e:	4693      	mov	fp, r2
 800dc40:	4652      	mov	r2, sl
 800dc42:	465b      	mov	r3, fp
 800dc44:	4640      	mov	r0, r8
 800dc46:	4649      	mov	r1, r9
 800dc48:	f7f2 fba2 	bl	8000390 <__aeabi_uldivmod>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	460b      	mov	r3, r1
 800dc50:	4613      	mov	r3, r2
 800dc52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc5a:	d308      	bcc.n	800dc6e <UART_SetConfig+0x9a2>
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc62:	d204      	bcs.n	800dc6e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc6a:	60da      	str	r2, [r3, #12]
 800dc6c:	e17f      	b.n	800df6e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc74:	e17b      	b.n	800df6e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	69db      	ldr	r3, [r3, #28]
 800dc7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc7e:	f040 80bd 	bne.w	800ddfc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dc82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dc86:	2b20      	cmp	r3, #32
 800dc88:	dc48      	bgt.n	800dd1c <UART_SetConfig+0xa50>
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	db7b      	blt.n	800dd86 <UART_SetConfig+0xaba>
 800dc8e:	2b20      	cmp	r3, #32
 800dc90:	d879      	bhi.n	800dd86 <UART_SetConfig+0xaba>
 800dc92:	a201      	add	r2, pc, #4	@ (adr r2, 800dc98 <UART_SetConfig+0x9cc>)
 800dc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc98:	0800dd23 	.word	0x0800dd23
 800dc9c:	0800dd2b 	.word	0x0800dd2b
 800dca0:	0800dd87 	.word	0x0800dd87
 800dca4:	0800dd87 	.word	0x0800dd87
 800dca8:	0800dd33 	.word	0x0800dd33
 800dcac:	0800dd87 	.word	0x0800dd87
 800dcb0:	0800dd87 	.word	0x0800dd87
 800dcb4:	0800dd87 	.word	0x0800dd87
 800dcb8:	0800dd43 	.word	0x0800dd43
 800dcbc:	0800dd87 	.word	0x0800dd87
 800dcc0:	0800dd87 	.word	0x0800dd87
 800dcc4:	0800dd87 	.word	0x0800dd87
 800dcc8:	0800dd87 	.word	0x0800dd87
 800dccc:	0800dd87 	.word	0x0800dd87
 800dcd0:	0800dd87 	.word	0x0800dd87
 800dcd4:	0800dd87 	.word	0x0800dd87
 800dcd8:	0800dd53 	.word	0x0800dd53
 800dcdc:	0800dd87 	.word	0x0800dd87
 800dce0:	0800dd87 	.word	0x0800dd87
 800dce4:	0800dd87 	.word	0x0800dd87
 800dce8:	0800dd87 	.word	0x0800dd87
 800dcec:	0800dd87 	.word	0x0800dd87
 800dcf0:	0800dd87 	.word	0x0800dd87
 800dcf4:	0800dd87 	.word	0x0800dd87
 800dcf8:	0800dd87 	.word	0x0800dd87
 800dcfc:	0800dd87 	.word	0x0800dd87
 800dd00:	0800dd87 	.word	0x0800dd87
 800dd04:	0800dd87 	.word	0x0800dd87
 800dd08:	0800dd87 	.word	0x0800dd87
 800dd0c:	0800dd87 	.word	0x0800dd87
 800dd10:	0800dd87 	.word	0x0800dd87
 800dd14:	0800dd87 	.word	0x0800dd87
 800dd18:	0800dd79 	.word	0x0800dd79
 800dd1c:	2b40      	cmp	r3, #64	@ 0x40
 800dd1e:	d02e      	beq.n	800dd7e <UART_SetConfig+0xab2>
 800dd20:	e031      	b.n	800dd86 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd22:	f7fa fd4b 	bl	80087bc <HAL_RCC_GetPCLK1Freq>
 800dd26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd28:	e033      	b.n	800dd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd2a:	f7fa fd5d 	bl	80087e8 <HAL_RCC_GetPCLK2Freq>
 800dd2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd30:	e02f      	b.n	800dd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fb ff40 	bl	8009bbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd40:	e027      	b.n	800dd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd42:	f107 0318 	add.w	r3, r7, #24
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fc f88c 	bl	8009e64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd50:	e01f      	b.n	800dd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd52:	4b69      	ldr	r3, [pc, #420]	@ (800def8 <UART_SetConfig+0xc2c>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f003 0320 	and.w	r3, r3, #32
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d009      	beq.n	800dd72 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd5e:	4b66      	ldr	r3, [pc, #408]	@ (800def8 <UART_SetConfig+0xc2c>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	08db      	lsrs	r3, r3, #3
 800dd64:	f003 0303 	and.w	r3, r3, #3
 800dd68:	4a64      	ldr	r2, [pc, #400]	@ (800defc <UART_SetConfig+0xc30>)
 800dd6a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd70:	e00f      	b.n	800dd92 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dd72:	4b62      	ldr	r3, [pc, #392]	@ (800defc <UART_SetConfig+0xc30>)
 800dd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd76:	e00c      	b.n	800dd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd78:	4b61      	ldr	r3, [pc, #388]	@ (800df00 <UART_SetConfig+0xc34>)
 800dd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd7c:	e009      	b.n	800dd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd84:	e005      	b.n	800dd92 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dd86:	2300      	movs	r3, #0
 800dd88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dd90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f000 80ea 	beq.w	800df6e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd9e:	4a55      	ldr	r2, [pc, #340]	@ (800def4 <UART_SetConfig+0xc28>)
 800dda0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dda4:	461a      	mov	r2, r3
 800dda6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dda8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddac:	005a      	lsls	r2, r3, #1
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	085b      	lsrs	r3, r3, #1
 800ddb4:	441a      	add	r2, r3
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc2:	2b0f      	cmp	r3, #15
 800ddc4:	d916      	bls.n	800ddf4 <UART_SetConfig+0xb28>
 800ddc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddcc:	d212      	bcs.n	800ddf4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ddce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	f023 030f 	bic.w	r3, r3, #15
 800ddd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddda:	085b      	lsrs	r3, r3, #1
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	f003 0307 	and.w	r3, r3, #7
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dde6:	4313      	orrs	r3, r2
 800dde8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ddf0:	60da      	str	r2, [r3, #12]
 800ddf2:	e0bc      	b.n	800df6e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ddfa:	e0b8      	b.n	800df6e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ddfc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de00:	2b20      	cmp	r3, #32
 800de02:	dc4b      	bgt.n	800de9c <UART_SetConfig+0xbd0>
 800de04:	2b00      	cmp	r3, #0
 800de06:	f2c0 8087 	blt.w	800df18 <UART_SetConfig+0xc4c>
 800de0a:	2b20      	cmp	r3, #32
 800de0c:	f200 8084 	bhi.w	800df18 <UART_SetConfig+0xc4c>
 800de10:	a201      	add	r2, pc, #4	@ (adr r2, 800de18 <UART_SetConfig+0xb4c>)
 800de12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de16:	bf00      	nop
 800de18:	0800dea3 	.word	0x0800dea3
 800de1c:	0800deab 	.word	0x0800deab
 800de20:	0800df19 	.word	0x0800df19
 800de24:	0800df19 	.word	0x0800df19
 800de28:	0800deb3 	.word	0x0800deb3
 800de2c:	0800df19 	.word	0x0800df19
 800de30:	0800df19 	.word	0x0800df19
 800de34:	0800df19 	.word	0x0800df19
 800de38:	0800dec3 	.word	0x0800dec3
 800de3c:	0800df19 	.word	0x0800df19
 800de40:	0800df19 	.word	0x0800df19
 800de44:	0800df19 	.word	0x0800df19
 800de48:	0800df19 	.word	0x0800df19
 800de4c:	0800df19 	.word	0x0800df19
 800de50:	0800df19 	.word	0x0800df19
 800de54:	0800df19 	.word	0x0800df19
 800de58:	0800ded3 	.word	0x0800ded3
 800de5c:	0800df19 	.word	0x0800df19
 800de60:	0800df19 	.word	0x0800df19
 800de64:	0800df19 	.word	0x0800df19
 800de68:	0800df19 	.word	0x0800df19
 800de6c:	0800df19 	.word	0x0800df19
 800de70:	0800df19 	.word	0x0800df19
 800de74:	0800df19 	.word	0x0800df19
 800de78:	0800df19 	.word	0x0800df19
 800de7c:	0800df19 	.word	0x0800df19
 800de80:	0800df19 	.word	0x0800df19
 800de84:	0800df19 	.word	0x0800df19
 800de88:	0800df19 	.word	0x0800df19
 800de8c:	0800df19 	.word	0x0800df19
 800de90:	0800df19 	.word	0x0800df19
 800de94:	0800df19 	.word	0x0800df19
 800de98:	0800df0b 	.word	0x0800df0b
 800de9c:	2b40      	cmp	r3, #64	@ 0x40
 800de9e:	d037      	beq.n	800df10 <UART_SetConfig+0xc44>
 800dea0:	e03a      	b.n	800df18 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dea2:	f7fa fc8b 	bl	80087bc <HAL_RCC_GetPCLK1Freq>
 800dea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dea8:	e03c      	b.n	800df24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800deaa:	f7fa fc9d 	bl	80087e8 <HAL_RCC_GetPCLK2Freq>
 800deae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800deb0:	e038      	b.n	800df24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7fb fe80 	bl	8009bbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800debc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800debe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dec0:	e030      	b.n	800df24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dec2:	f107 0318 	add.w	r3, r7, #24
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fb ffcc 	bl	8009e64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ded0:	e028      	b.n	800df24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ded2:	4b09      	ldr	r3, [pc, #36]	@ (800def8 <UART_SetConfig+0xc2c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f003 0320 	and.w	r3, r3, #32
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d012      	beq.n	800df04 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dede:	4b06      	ldr	r3, [pc, #24]	@ (800def8 <UART_SetConfig+0xc2c>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	08db      	lsrs	r3, r3, #3
 800dee4:	f003 0303 	and.w	r3, r3, #3
 800dee8:	4a04      	ldr	r2, [pc, #16]	@ (800defc <UART_SetConfig+0xc30>)
 800deea:	fa22 f303 	lsr.w	r3, r2, r3
 800deee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800def0:	e018      	b.n	800df24 <UART_SetConfig+0xc58>
 800def2:	bf00      	nop
 800def4:	08013190 	.word	0x08013190
 800def8:	58024400 	.word	0x58024400
 800defc:	03d09000 	.word	0x03d09000
 800df00:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800df04:	4b24      	ldr	r3, [pc, #144]	@ (800df98 <UART_SetConfig+0xccc>)
 800df06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df08:	e00c      	b.n	800df24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df0a:	4b24      	ldr	r3, [pc, #144]	@ (800df9c <UART_SetConfig+0xcd0>)
 800df0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df0e:	e009      	b.n	800df24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df16:	e005      	b.n	800df24 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800df18:	2300      	movs	r3, #0
 800df1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800df1c:	2301      	movs	r3, #1
 800df1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800df22:	bf00      	nop
    }

    if (pclk != 0U)
 800df24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df26:	2b00      	cmp	r3, #0
 800df28:	d021      	beq.n	800df6e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df2e:	4a1c      	ldr	r2, [pc, #112]	@ (800dfa0 <UART_SetConfig+0xcd4>)
 800df30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df34:	461a      	mov	r2, r3
 800df36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df38:	fbb3 f2f2 	udiv	r2, r3, r2
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	085b      	lsrs	r3, r3, #1
 800df42:	441a      	add	r2, r3
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	fbb2 f3f3 	udiv	r3, r2, r3
 800df4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df50:	2b0f      	cmp	r3, #15
 800df52:	d909      	bls.n	800df68 <UART_SetConfig+0xc9c>
 800df54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df5a:	d205      	bcs.n	800df68 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df5e:	b29a      	uxth	r2, r3
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	60da      	str	r2, [r3, #12]
 800df66:	e002      	b.n	800df6e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800df68:	2301      	movs	r3, #1
 800df6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	2201      	movs	r2, #1
 800df72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	2201      	movs	r2, #1
 800df7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2200      	movs	r2, #0
 800df82:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	2200      	movs	r2, #0
 800df88:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800df8a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3748      	adds	r7, #72	@ 0x48
 800df92:	46bd      	mov	sp, r7
 800df94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df98:	03d09000 	.word	0x03d09000
 800df9c:	003d0900 	.word	0x003d0900
 800dfa0:	08013190 	.word	0x08013190

0800dfa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb0:	f003 0308 	and.w	r3, r3, #8
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00a      	beq.n	800dfce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	430a      	orrs	r2, r1
 800dfcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd2:	f003 0301 	and.w	r3, r3, #1
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00a      	beq.n	800dff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	430a      	orrs	r2, r1
 800dfee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff4:	f003 0302 	and.w	r3, r3, #2
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d00a      	beq.n	800e012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	430a      	orrs	r2, r1
 800e010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e016:	f003 0304 	and.w	r3, r3, #4
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d00a      	beq.n	800e034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	430a      	orrs	r2, r1
 800e032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e038:	f003 0310 	and.w	r3, r3, #16
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00a      	beq.n	800e056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	689b      	ldr	r3, [r3, #8]
 800e046:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	430a      	orrs	r2, r1
 800e054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e05a:	f003 0320 	and.w	r3, r3, #32
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00a      	beq.n	800e078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	430a      	orrs	r2, r1
 800e076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e07c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e080:	2b00      	cmp	r3, #0
 800e082:	d01a      	beq.n	800e0ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	430a      	orrs	r2, r1
 800e098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e09e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0a2:	d10a      	bne.n	800e0ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	430a      	orrs	r2, r1
 800e0b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00a      	beq.n	800e0dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	430a      	orrs	r2, r1
 800e0da:	605a      	str	r2, [r3, #4]
  }
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b098      	sub	sp, #96	@ 0x60
 800e0ec:	af02      	add	r7, sp, #8
 800e0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e0f8:	f7f5 fc9c 	bl	8003a34 <HAL_GetTick>
 800e0fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f003 0308 	and.w	r3, r3, #8
 800e108:	2b08      	cmp	r3, #8
 800e10a:	d12f      	bne.n	800e16c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e10c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e114:	2200      	movs	r2, #0
 800e116:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 f88e 	bl	800e23c <UART_WaitOnFlagUntilTimeout>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d022      	beq.n	800e16c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12e:	e853 3f00 	ldrex	r3, [r3]
 800e132:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e13a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	461a      	mov	r2, r3
 800e142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e144:	647b      	str	r3, [r7, #68]	@ 0x44
 800e146:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e148:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e14a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e14c:	e841 2300 	strex	r3, r2, [r1]
 800e150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1e6      	bne.n	800e126 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2220      	movs	r2, #32
 800e15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e168:	2303      	movs	r3, #3
 800e16a:	e063      	b.n	800e234 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f003 0304 	and.w	r3, r3, #4
 800e176:	2b04      	cmp	r3, #4
 800e178:	d149      	bne.n	800e20e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e17a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e17e:	9300      	str	r3, [sp, #0]
 800e180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e182:	2200      	movs	r2, #0
 800e184:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f857 	bl	800e23c <UART_WaitOnFlagUntilTimeout>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d03c      	beq.n	800e20e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e19c:	e853 3f00 	ldrex	r3, [r3]
 800e1a0:	623b      	str	r3, [r7, #32]
   return(result);
 800e1a2:	6a3b      	ldr	r3, [r7, #32]
 800e1a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1ba:	e841 2300 	strex	r3, r2, [r1]
 800e1be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1e6      	bne.n	800e194 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	3308      	adds	r3, #8
 800e1cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	e853 3f00 	ldrex	r3, [r3]
 800e1d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f023 0301 	bic.w	r3, r3, #1
 800e1dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1e6:	61fa      	str	r2, [r7, #28]
 800e1e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ea:	69b9      	ldr	r1, [r7, #24]
 800e1ec:	69fa      	ldr	r2, [r7, #28]
 800e1ee:	e841 2300 	strex	r3, r2, [r1]
 800e1f2:	617b      	str	r3, [r7, #20]
   return(result);
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1e5      	bne.n	800e1c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2220      	movs	r2, #32
 800e1fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e20a:	2303      	movs	r3, #3
 800e20c:	e012      	b.n	800e234 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2220      	movs	r2, #32
 800e212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2220      	movs	r2, #32
 800e21a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2200      	movs	r2, #0
 800e228:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3758      	adds	r7, #88	@ 0x58
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	603b      	str	r3, [r7, #0]
 800e248:	4613      	mov	r3, r2
 800e24a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e24c:	e04f      	b.n	800e2ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e254:	d04b      	beq.n	800e2ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e256:	f7f5 fbed 	bl	8003a34 <HAL_GetTick>
 800e25a:	4602      	mov	r2, r0
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	1ad3      	subs	r3, r2, r3
 800e260:	69ba      	ldr	r2, [r7, #24]
 800e262:	429a      	cmp	r2, r3
 800e264:	d302      	bcc.n	800e26c <UART_WaitOnFlagUntilTimeout+0x30>
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d101      	bne.n	800e270 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e26c:	2303      	movs	r3, #3
 800e26e:	e04e      	b.n	800e30e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f003 0304 	and.w	r3, r3, #4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d037      	beq.n	800e2ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	2b80      	cmp	r3, #128	@ 0x80
 800e282:	d034      	beq.n	800e2ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2b40      	cmp	r3, #64	@ 0x40
 800e288:	d031      	beq.n	800e2ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	69db      	ldr	r3, [r3, #28]
 800e290:	f003 0308 	and.w	r3, r3, #8
 800e294:	2b08      	cmp	r3, #8
 800e296:	d110      	bne.n	800e2ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2208      	movs	r2, #8
 800e29e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f000 f921 	bl	800e4e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2208      	movs	r2, #8
 800e2aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e029      	b.n	800e30e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	69db      	ldr	r3, [r3, #28]
 800e2c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e2c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e2c8:	d111      	bne.n	800e2ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e2d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f000 f907 	bl	800e4e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2220      	movs	r2, #32
 800e2de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e2ea:	2303      	movs	r3, #3
 800e2ec:	e00f      	b.n	800e30e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	69da      	ldr	r2, [r3, #28]
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	bf0c      	ite	eq
 800e2fe:	2301      	moveq	r3, #1
 800e300:	2300      	movne	r3, #0
 800e302:	b2db      	uxtb	r3, r3
 800e304:	461a      	mov	r2, r3
 800e306:	79fb      	ldrb	r3, [r7, #7]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d0a0      	beq.n	800e24e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e30c:	2300      	movs	r3, #0
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
	...

0800e318 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b096      	sub	sp, #88	@ 0x58
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	4613      	mov	r3, r2
 800e324:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	68ba      	ldr	r2, [r7, #8]
 800e32a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	88fa      	ldrh	r2, [r7, #6]
 800e330:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2200      	movs	r2, #0
 800e338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2222      	movs	r2, #34	@ 0x22
 800e340:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d02d      	beq.n	800e3aa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e354:	4a40      	ldr	r2, [pc, #256]	@ (800e458 <UART_Start_Receive_DMA+0x140>)
 800e356:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e35e:	4a3f      	ldr	r2, [pc, #252]	@ (800e45c <UART_Start_Receive_DMA+0x144>)
 800e360:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e368:	4a3d      	ldr	r2, [pc, #244]	@ (800e460 <UART_Start_Receive_DMA+0x148>)
 800e36a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e372:	2200      	movs	r2, #0
 800e374:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3324      	adds	r3, #36	@ 0x24
 800e382:	4619      	mov	r1, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e388:	461a      	mov	r2, r3
 800e38a:	88fb      	ldrh	r3, [r7, #6]
 800e38c:	f7f6 f898 	bl	80044c0 <HAL_DMA_Start_IT>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d009      	beq.n	800e3aa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2210      	movs	r2, #16
 800e39a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2220      	movs	r2, #32
 800e3a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e051      	b.n	800e44e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d018      	beq.n	800e3e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ba:	e853 3f00 	ldrex	r3, [r3]
 800e3be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e3c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3d2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e3d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e3d8:	e841 2300 	strex	r3, r2, [r1]
 800e3dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e3de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1e6      	bne.n	800e3b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	3308      	adds	r3, #8
 800e3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ee:	e853 3f00 	ldrex	r3, [r3]
 800e3f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f6:	f043 0301 	orr.w	r3, r3, #1
 800e3fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	3308      	adds	r3, #8
 800e402:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e404:	637a      	str	r2, [r7, #52]	@ 0x34
 800e406:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e408:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e40a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e40c:	e841 2300 	strex	r3, r2, [r1]
 800e410:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e414:	2b00      	cmp	r3, #0
 800e416:	d1e5      	bne.n	800e3e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3308      	adds	r3, #8
 800e41e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	e853 3f00 	ldrex	r3, [r3]
 800e426:	613b      	str	r3, [r7, #16]
   return(result);
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e42e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3308      	adds	r3, #8
 800e436:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e438:	623a      	str	r2, [r7, #32]
 800e43a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	69f9      	ldr	r1, [r7, #28]
 800e43e:	6a3a      	ldr	r2, [r7, #32]
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	61bb      	str	r3, [r7, #24]
   return(result);
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e5      	bne.n	800e418 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3758      	adds	r7, #88	@ 0x58
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	0800e5b5 	.word	0x0800e5b5
 800e45c:	0800e6dd 	.word	0x0800e6dd
 800e460:	0800e71b 	.word	0x0800e71b

0800e464 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e464:	b480      	push	{r7}
 800e466:	b08f      	sub	sp, #60	@ 0x3c
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e472:	6a3b      	ldr	r3, [r7, #32]
 800e474:	e853 3f00 	ldrex	r3, [r3]
 800e478:	61fb      	str	r3, [r7, #28]
   return(result);
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e480:	637b      	str	r3, [r7, #52]	@ 0x34
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	461a      	mov	r2, r3
 800e488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e48c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e492:	e841 2300 	strex	r3, r2, [r1]
 800e496:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1e6      	bne.n	800e46c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3308      	adds	r3, #8
 800e4a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	e853 3f00 	ldrex	r3, [r3]
 800e4ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e4b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4be:	61ba      	str	r2, [r7, #24]
 800e4c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c2:	6979      	ldr	r1, [r7, #20]
 800e4c4:	69ba      	ldr	r2, [r7, #24]
 800e4c6:	e841 2300 	strex	r3, r2, [r1]
 800e4ca:	613b      	str	r3, [r7, #16]
   return(result);
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e5      	bne.n	800e49e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2220      	movs	r2, #32
 800e4d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e4da:	bf00      	nop
 800e4dc:	373c      	adds	r7, #60	@ 0x3c
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
	...

0800e4e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b095      	sub	sp, #84	@ 0x54
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f8:	e853 3f00 	ldrex	r3, [r3]
 800e4fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e50e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e510:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e512:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e516:	e841 2300 	strex	r3, r2, [r1]
 800e51a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1e6      	bne.n	800e4f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3308      	adds	r3, #8
 800e528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52a:	6a3b      	ldr	r3, [r7, #32]
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	61fb      	str	r3, [r7, #28]
   return(result);
 800e532:	69fa      	ldr	r2, [r7, #28]
 800e534:	4b1e      	ldr	r3, [pc, #120]	@ (800e5b0 <UART_EndRxTransfer+0xc8>)
 800e536:	4013      	ands	r3, r2
 800e538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e544:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e54a:	e841 2300 	strex	r3, r2, [r1]
 800e54e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1e5      	bne.n	800e522 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d118      	bne.n	800e590 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	e853 3f00 	ldrex	r3, [r3]
 800e56a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	f023 0310 	bic.w	r3, r3, #16
 800e572:	647b      	str	r3, [r7, #68]	@ 0x44
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	461a      	mov	r2, r3
 800e57a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e57c:	61bb      	str	r3, [r7, #24]
 800e57e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e580:	6979      	ldr	r1, [r7, #20]
 800e582:	69ba      	ldr	r2, [r7, #24]
 800e584:	e841 2300 	strex	r3, r2, [r1]
 800e588:	613b      	str	r3, [r7, #16]
   return(result);
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1e6      	bne.n	800e55e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2220      	movs	r2, #32
 800e594:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e5a4:	bf00      	nop
 800e5a6:	3754      	adds	r7, #84	@ 0x54
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	effffffe 	.word	0xeffffffe

0800e5b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b09c      	sub	sp, #112	@ 0x70
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	69db      	ldr	r3, [r3, #28]
 800e5c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5ca:	d071      	beq.n	800e6b0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e5cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5dc:	e853 3f00 	ldrex	r3, [r3]
 800e5e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e5e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e5e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e5ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e5f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e5f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5fa:	e841 2300 	strex	r3, r2, [r1]
 800e5fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1e6      	bne.n	800e5d4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3308      	adds	r3, #8
 800e60c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e610:	e853 3f00 	ldrex	r3, [r3]
 800e614:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e618:	f023 0301 	bic.w	r3, r3, #1
 800e61c:	667b      	str	r3, [r7, #100]	@ 0x64
 800e61e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3308      	adds	r3, #8
 800e624:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e626:	647a      	str	r2, [r7, #68]	@ 0x44
 800e628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e62c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e62e:	e841 2300 	strex	r3, r2, [r1]
 800e632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1e5      	bne.n	800e606 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e63a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	3308      	adds	r3, #8
 800e640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e644:	e853 3f00 	ldrex	r3, [r3]
 800e648:	623b      	str	r3, [r7, #32]
   return(result);
 800e64a:	6a3b      	ldr	r3, [r7, #32]
 800e64c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e650:	663b      	str	r3, [r7, #96]	@ 0x60
 800e652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	3308      	adds	r3, #8
 800e658:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e65a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e65c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e662:	e841 2300 	strex	r3, r2, [r1]
 800e666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1e5      	bne.n	800e63a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e66e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e670:	2220      	movs	r2, #32
 800e672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d118      	bne.n	800e6b0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e67e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	e853 3f00 	ldrex	r3, [r3]
 800e68a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f023 0310 	bic.w	r3, r3, #16
 800e692:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	461a      	mov	r2, r3
 800e69a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e69c:	61fb      	str	r3, [r7, #28]
 800e69e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a0:	69b9      	ldr	r1, [r7, #24]
 800e6a2:	69fa      	ldr	r2, [r7, #28]
 800e6a4:	e841 2300 	strex	r3, r2, [r1]
 800e6a8:	617b      	str	r3, [r7, #20]
   return(result);
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1e6      	bne.n	800e67e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d107      	bne.n	800e6ce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e6c8:	f7fe fdf4 	bl	800d2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e6cc:	e002      	b.n	800e6d4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e6ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e6d0:	f7f4 f812 	bl	80026f8 <HAL_UART_RxCpltCallback>
}
 800e6d4:	bf00      	nop
 800e6d6:	3770      	adds	r7, #112	@ 0x70
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d109      	bne.n	800e70c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6fe:	085b      	lsrs	r3, r3, #1
 800e700:	b29b      	uxth	r3, r3
 800e702:	4619      	mov	r1, r3
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f7fe fdd5 	bl	800d2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e70a:	e002      	b.n	800e712 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f7fe fdbd 	bl	800d28c <HAL_UART_RxHalfCpltCallback>
}
 800e712:	bf00      	nop
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b086      	sub	sp, #24
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e726:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e72e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e736:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e742:	2b80      	cmp	r3, #128	@ 0x80
 800e744:	d109      	bne.n	800e75a <UART_DMAError+0x40>
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	2b21      	cmp	r3, #33	@ 0x21
 800e74a:	d106      	bne.n	800e75a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	2200      	movs	r2, #0
 800e750:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e754:	6978      	ldr	r0, [r7, #20]
 800e756:	f7ff fe85 	bl	800e464 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e764:	2b40      	cmp	r3, #64	@ 0x40
 800e766:	d109      	bne.n	800e77c <UART_DMAError+0x62>
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2b22      	cmp	r3, #34	@ 0x22
 800e76c:	d106      	bne.n	800e77c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2200      	movs	r2, #0
 800e772:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e776:	6978      	ldr	r0, [r7, #20]
 800e778:	f7ff feb6 	bl	800e4e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e782:	f043 0210 	orr.w	r2, r3, #16
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e78c:	6978      	ldr	r0, [r7, #20]
 800e78e:	f7fe fd87 	bl	800d2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e792:	bf00      	nop
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e79a:	b580      	push	{r7, lr}
 800e79c:	b084      	sub	sp, #16
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f7fe fd71 	bl	800d2a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7be:	bf00      	nop
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b088      	sub	sp, #32
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	e853 3f00 	ldrex	r3, [r3]
 800e7da:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7e2:	61fb      	str	r3, [r7, #28]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	61bb      	str	r3, [r7, #24]
 800e7ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f0:	6979      	ldr	r1, [r7, #20]
 800e7f2:	69ba      	ldr	r2, [r7, #24]
 800e7f4:	e841 2300 	strex	r3, r2, [r1]
 800e7f8:	613b      	str	r3, [r7, #16]
   return(result);
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1e6      	bne.n	800e7ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2220      	movs	r2, #32
 800e804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7fe fd32 	bl	800d278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e814:	bf00      	nop
 800e816:	3720      	adds	r7, #32
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e824:	bf00      	nop
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr

0800e830 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e838:	bf00      	nop
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e84c:	bf00      	nop
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e858:	b480      	push	{r7}
 800e85a:	b085      	sub	sp, #20
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e866:	2b01      	cmp	r3, #1
 800e868:	d101      	bne.n	800e86e <HAL_UARTEx_DisableFifoMode+0x16>
 800e86a:	2302      	movs	r3, #2
 800e86c:	e027      	b.n	800e8be <HAL_UARTEx_DisableFifoMode+0x66>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2224      	movs	r2, #36	@ 0x24
 800e87a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f022 0201 	bic.w	r2, r2, #1
 800e894:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e89c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2220      	movs	r2, #32
 800e8b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b084      	sub	sp, #16
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
 800e8d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d101      	bne.n	800e8e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e8de:	2302      	movs	r3, #2
 800e8e0:	e02d      	b.n	800e93e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2224      	movs	r2, #36	@ 0x24
 800e8ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f022 0201 	bic.w	r2, r2, #1
 800e908:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	683a      	ldr	r2, [r7, #0]
 800e91a:	430a      	orrs	r2, r1
 800e91c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 f850 	bl	800e9c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2220      	movs	r2, #32
 800e930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2200      	movs	r2, #0
 800e938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3710      	adds	r7, #16
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b084      	sub	sp, #16
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e956:	2b01      	cmp	r3, #1
 800e958:	d101      	bne.n	800e95e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e95a:	2302      	movs	r3, #2
 800e95c:	e02d      	b.n	800e9ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2201      	movs	r2, #1
 800e962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2224      	movs	r2, #36	@ 0x24
 800e96a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f022 0201 	bic.w	r2, r2, #1
 800e984:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	683a      	ldr	r2, [r7, #0]
 800e996:	430a      	orrs	r2, r1
 800e998:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 f812 	bl	800e9c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2220      	movs	r2, #32
 800e9ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
	...

0800e9c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b085      	sub	sp, #20
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d108      	bne.n	800e9e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e9e4:	e031      	b.n	800ea4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e9e6:	2310      	movs	r3, #16
 800e9e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e9ea:	2310      	movs	r3, #16
 800e9ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	0e5b      	lsrs	r3, r3, #25
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	f003 0307 	and.w	r3, r3, #7
 800e9fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	0f5b      	lsrs	r3, r3, #29
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	f003 0307 	and.w	r3, r3, #7
 800ea0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea0e:	7bbb      	ldrb	r3, [r7, #14]
 800ea10:	7b3a      	ldrb	r2, [r7, #12]
 800ea12:	4911      	ldr	r1, [pc, #68]	@ (800ea58 <UARTEx_SetNbDataToProcess+0x94>)
 800ea14:	5c8a      	ldrb	r2, [r1, r2]
 800ea16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ea1a:	7b3a      	ldrb	r2, [r7, #12]
 800ea1c:	490f      	ldr	r1, [pc, #60]	@ (800ea5c <UARTEx_SetNbDataToProcess+0x98>)
 800ea1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea2c:	7bfb      	ldrb	r3, [r7, #15]
 800ea2e:	7b7a      	ldrb	r2, [r7, #13]
 800ea30:	4909      	ldr	r1, [pc, #36]	@ (800ea58 <UARTEx_SetNbDataToProcess+0x94>)
 800ea32:	5c8a      	ldrb	r2, [r1, r2]
 800ea34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea38:	7b7a      	ldrb	r2, [r7, #13]
 800ea3a:	4908      	ldr	r1, [pc, #32]	@ (800ea5c <UARTEx_SetNbDataToProcess+0x98>)
 800ea3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ea4a:	bf00      	nop
 800ea4c:	3714      	adds	r7, #20
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	080131a8 	.word	0x080131a8
 800ea5c:	080131b0 	.word	0x080131b0

0800ea60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ea64:	4904      	ldr	r1, [pc, #16]	@ (800ea78 <MX_FATFS_Init+0x18>)
 800ea66:	4805      	ldr	r0, [pc, #20]	@ (800ea7c <MX_FATFS_Init+0x1c>)
 800ea68:	f004 f8c6 	bl	8012bf8 <FATFS_LinkDriver>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461a      	mov	r2, r3
 800ea70:	4b03      	ldr	r3, [pc, #12]	@ (800ea80 <MX_FATFS_Init+0x20>)
 800ea72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ea74:	bf00      	nop
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	240029e4 	.word	0x240029e4
 800ea7c:	240000a8 	.word	0x240000a8
 800ea80:	240029e0 	.word	0x240029e0

0800ea84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ea84:	b480      	push	{r7}
 800ea86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ea88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800ea9e:	79fb      	ldrb	r3, [r7, #7]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f000 f9fd 	bl	800eea0 <SD_disk_initialize>
 800eaa6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	4603      	mov	r3, r0
 800eab8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800eaba:	79fb      	ldrb	r3, [r7, #7]
 800eabc:	4618      	mov	r0, r3
 800eabe:	f000 fad5 	bl	800f06c <SD_disk_status>
 800eac2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60b9      	str	r1, [r7, #8]
 800ead4:	607a      	str	r2, [r7, #4]
 800ead6:	603b      	str	r3, [r7, #0]
 800ead8:	4603      	mov	r3, r0
 800eada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800eadc:	7bf8      	ldrb	r0, [r7, #15]
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	68b9      	ldr	r1, [r7, #8]
 800eae4:	f000 fad8 	bl	800f098 <SD_disk_read>
 800eae8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b084      	sub	sp, #16
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
 800eafc:	603b      	str	r3, [r7, #0]
 800eafe:	4603      	mov	r3, r0
 800eb00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800eb02:	7bf8      	ldrb	r0, [r7, #15]
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	68b9      	ldr	r1, [r7, #8]
 800eb0a:	f000 fb2f 	bl	800f16c <SD_disk_write>
 800eb0e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4603      	mov	r3, r0
 800eb20:	603a      	str	r2, [r7, #0]
 800eb22:	71fb      	strb	r3, [r7, #7]
 800eb24:	460b      	mov	r3, r1
 800eb26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800eb28:	79b9      	ldrb	r1, [r7, #6]
 800eb2a:	79fb      	ldrb	r3, [r7, #7]
 800eb2c:	683a      	ldr	r2, [r7, #0]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f000 fba0 	bl	800f274 <SD_disk_ioctl>
 800eb34:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
	...

0800eb40 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800eb44:	2200      	movs	r2, #0
 800eb46:	2110      	movs	r1, #16
 800eb48:	4802      	ldr	r0, [pc, #8]	@ (800eb54 <SELECT+0x14>)
 800eb4a:	f7f8 fd1d 	bl	8007588 <HAL_GPIO_WritePin>
}
 800eb4e:	bf00      	nop
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	58020000 	.word	0x58020000

0800eb58 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	2110      	movs	r1, #16
 800eb60:	4802      	ldr	r0, [pc, #8]	@ (800eb6c <DESELECT+0x14>)
 800eb62:	f7f8 fd11 	bl	8007588 <HAL_GPIO_WritePin>
}
 800eb66:	bf00      	nop
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	58020000 	.word	0x58020000

0800eb70 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	4603      	mov	r3, r0
 800eb78:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800eb7a:	bf00      	nop
 800eb7c:	4b08      	ldr	r3, [pc, #32]	@ (800eba0 <SPI_TxByte+0x30>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	695b      	ldr	r3, [r3, #20]
 800eb82:	f003 0302 	and.w	r3, r3, #2
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	d1f8      	bne.n	800eb7c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800eb8a:	1df9      	adds	r1, r7, #7
 800eb8c:	2364      	movs	r3, #100	@ 0x64
 800eb8e:	2201      	movs	r2, #1
 800eb90:	4803      	ldr	r0, [pc, #12]	@ (800eba0 <SPI_TxByte+0x30>)
 800eb92:	f7fb fd43 	bl	800a61c <HAL_SPI_Transmit>
}
 800eb96:	bf00      	nop
 800eb98:	3708      	adds	r7, #8
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	24002410 	.word	0x24002410

0800eba4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	460b      	mov	r3, r1
 800ebae:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ebb0:	bf00      	nop
 800ebb2:	4b08      	ldr	r3, [pc, #32]	@ (800ebd4 <SPI_TxBuffer+0x30>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	695b      	ldr	r3, [r3, #20]
 800ebb8:	f003 0302 	and.w	r3, r3, #2
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d1f8      	bne.n	800ebb2 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800ebc0:	887a      	ldrh	r2, [r7, #2]
 800ebc2:	2364      	movs	r3, #100	@ 0x64
 800ebc4:	6879      	ldr	r1, [r7, #4]
 800ebc6:	4803      	ldr	r0, [pc, #12]	@ (800ebd4 <SPI_TxBuffer+0x30>)
 800ebc8:	f7fb fd28 	bl	800a61c <HAL_SPI_Transmit>
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	24002410 	.word	0x24002410

0800ebd8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800ebde:	23ff      	movs	r3, #255	@ 0xff
 800ebe0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ebe2:	bf00      	nop
 800ebe4:	4b09      	ldr	r3, [pc, #36]	@ (800ec0c <SPI_RxByte+0x34>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	695b      	ldr	r3, [r3, #20]
 800ebea:	f003 0302 	and.w	r3, r3, #2
 800ebee:	2b02      	cmp	r3, #2
 800ebf0:	d1f8      	bne.n	800ebe4 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800ebf2:	1dba      	adds	r2, r7, #6
 800ebf4:	1df9      	adds	r1, r7, #7
 800ebf6:	2364      	movs	r3, #100	@ 0x64
 800ebf8:	9300      	str	r3, [sp, #0]
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	4803      	ldr	r0, [pc, #12]	@ (800ec0c <SPI_RxByte+0x34>)
 800ebfe:	f7fc f96d 	bl	800aedc <HAL_SPI_TransmitReceive>
  return data;
 800ec02:	79bb      	ldrb	r3, [r7, #6]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	24002410 	.word	0x24002410

0800ec10 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800ec18:	f7ff ffde 	bl	800ebd8 <SPI_RxByte>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	461a      	mov	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	701a      	strb	r2, [r3, #0]
}
 800ec24:	bf00      	nop
 800ec26:	3708      	adds	r7, #8
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800ec32:	4b0a      	ldr	r3, [pc, #40]	@ (800ec5c <SD_ReadyWait+0x30>)
 800ec34:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800ec38:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800ec3a:	f7ff ffcd 	bl	800ebd8 <SPI_RxByte>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800ec42:	79fb      	ldrb	r3, [r7, #7]
 800ec44:	2bff      	cmp	r3, #255	@ 0xff
 800ec46:	d003      	beq.n	800ec50 <SD_ReadyWait+0x24>
 800ec48:	4b04      	ldr	r3, [pc, #16]	@ (800ec5c <SD_ReadyWait+0x30>)
 800ec4a:	881b      	ldrh	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d1f4      	bne.n	800ec3a <SD_ReadyWait+0xe>
  return res;
 800ec50:	79fb      	ldrb	r3, [r7, #7]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	240029ea 	.word	0x240029ea

0800ec60 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800ec66:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800ec6a:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800ec6c:	f7ff ff74 	bl	800eb58 <DESELECT>
  for(int i = 0; i < 10; i++)
 800ec70:	2300      	movs	r3, #0
 800ec72:	60bb      	str	r3, [r7, #8]
 800ec74:	e005      	b.n	800ec82 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800ec76:	20ff      	movs	r0, #255	@ 0xff
 800ec78:	f7ff ff7a 	bl	800eb70 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	3301      	adds	r3, #1
 800ec80:	60bb      	str	r3, [r7, #8]
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	2b09      	cmp	r3, #9
 800ec86:	ddf6      	ble.n	800ec76 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800ec88:	f7ff ff5a 	bl	800eb40 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800ec8c:	2340      	movs	r3, #64	@ 0x40
 800ec8e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800ec94:	2300      	movs	r3, #0
 800ec96:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800eca0:	2395      	movs	r3, #149	@ 0x95
 800eca2:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800eca4:	463b      	mov	r3, r7
 800eca6:	2106      	movs	r1, #6
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7ff ff7b 	bl	800eba4 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800ecae:	e002      	b.n	800ecb6 <SD_PowerOn+0x56>
  {
    cnt--;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800ecb6:	f7ff ff8f 	bl	800ebd8 <SPI_RxByte>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d002      	beq.n	800ecc6 <SD_PowerOn+0x66>
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1f4      	bne.n	800ecb0 <SD_PowerOn+0x50>
  }
  DESELECT();
 800ecc6:	f7ff ff47 	bl	800eb58 <DESELECT>
  SPI_TxByte(0XFF);
 800ecca:	20ff      	movs	r0, #255	@ 0xff
 800eccc:	f7ff ff50 	bl	800eb70 <SPI_TxByte>
  PowerFlag = 1;
 800ecd0:	4b03      	ldr	r3, [pc, #12]	@ (800ece0 <SD_PowerOn+0x80>)
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	701a      	strb	r2, [r3, #0]
}
 800ecd6:	bf00      	nop
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	240029ed 	.word	0x240029ed

0800ece4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800ece4:	b480      	push	{r7}
 800ece6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800ece8:	4b03      	ldr	r3, [pc, #12]	@ (800ecf8 <SD_PowerOff+0x14>)
 800ecea:	2200      	movs	r2, #0
 800ecec:	701a      	strb	r2, [r3, #0]
}
 800ecee:	bf00      	nop
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	240029ed 	.word	0x240029ed

0800ecfc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	af00      	add	r7, sp, #0
  return PowerFlag;
 800ed00:	4b03      	ldr	r3, [pc, #12]	@ (800ed10 <SD_CheckPower+0x14>)
 800ed02:	781b      	ldrb	r3, [r3, #0]
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop
 800ed10:	240029ed 	.word	0x240029ed

0800ed14 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800ed1e:	4b13      	ldr	r3, [pc, #76]	@ (800ed6c <SD_RxDataBlock+0x58>)
 800ed20:	22c8      	movs	r2, #200	@ 0xc8
 800ed22:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800ed24:	f7ff ff58 	bl	800ebd8 <SPI_RxByte>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800ed2c:	7bfb      	ldrb	r3, [r7, #15]
 800ed2e:	2bff      	cmp	r3, #255	@ 0xff
 800ed30:	d103      	bne.n	800ed3a <SD_RxDataBlock+0x26>
 800ed32:	4b0e      	ldr	r3, [pc, #56]	@ (800ed6c <SD_RxDataBlock+0x58>)
 800ed34:	881b      	ldrh	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d1f4      	bne.n	800ed24 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800ed3a:	7bfb      	ldrb	r3, [r7, #15]
 800ed3c:	2bfe      	cmp	r3, #254	@ 0xfe
 800ed3e:	d001      	beq.n	800ed44 <SD_RxDataBlock+0x30>
 800ed40:	2300      	movs	r3, #0
 800ed42:	e00f      	b.n	800ed64 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	607a      	str	r2, [r7, #4]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff ff60 	bl	800ec10 <SPI_RxBytePtr>
  } while(len--);
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	1e5a      	subs	r2, r3, #1
 800ed54:	603a      	str	r2, [r7, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1f4      	bne.n	800ed44 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800ed5a:	f7ff ff3d 	bl	800ebd8 <SPI_RxByte>
  SPI_RxByte();
 800ed5e:	f7ff ff3b 	bl	800ebd8 <SPI_RxByte>
  return TRUE;
 800ed62:	2301      	movs	r3, #1
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3710      	adds	r7, #16
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	240029e8 	.word	0x240029e8

0800ed70 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800ed80:	f7ff ff54 	bl	800ec2c <SD_ReadyWait>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2bff      	cmp	r3, #255	@ 0xff
 800ed88:	d001      	beq.n	800ed8e <SD_TxDataBlock+0x1e>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	e02f      	b.n	800edee <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800ed8e:	78fb      	ldrb	r3, [r7, #3]
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7ff feed 	bl	800eb70 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800ed96:	78fb      	ldrb	r3, [r7, #3]
 800ed98:	2bfd      	cmp	r3, #253	@ 0xfd
 800ed9a:	d020      	beq.n	800edde <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800ed9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f7ff feff 	bl	800eba4 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800eda6:	f7ff ff17 	bl	800ebd8 <SPI_RxByte>
    SPI_RxByte();
 800edaa:	f7ff ff15 	bl	800ebd8 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800edae:	e00b      	b.n	800edc8 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800edb0:	f7ff ff12 	bl	800ebd8 <SPI_RxByte>
 800edb4:	4603      	mov	r3, r0
 800edb6:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800edb8:	7bfb      	ldrb	r3, [r7, #15]
 800edba:	f003 031f 	and.w	r3, r3, #31
 800edbe:	2b05      	cmp	r3, #5
 800edc0:	d006      	beq.n	800edd0 <SD_TxDataBlock+0x60>
      i++;
 800edc2:	7bbb      	ldrb	r3, [r7, #14]
 800edc4:	3301      	adds	r3, #1
 800edc6:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800edc8:	7bbb      	ldrb	r3, [r7, #14]
 800edca:	2b40      	cmp	r3, #64	@ 0x40
 800edcc:	d9f0      	bls.n	800edb0 <SD_TxDataBlock+0x40>
 800edce:	e000      	b.n	800edd2 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800edd0:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800edd2:	bf00      	nop
 800edd4:	f7ff ff00 	bl	800ebd8 <SPI_RxByte>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d0fa      	beq.n	800edd4 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800edde:	7bfb      	ldrb	r3, [r7, #15]
 800ede0:	f003 031f 	and.w	r3, r3, #31
 800ede4:	2b05      	cmp	r3, #5
 800ede6:	d101      	bne.n	800edec <SD_TxDataBlock+0x7c>
 800ede8:	2301      	movs	r3, #1
 800edea:	e000      	b.n	800edee <SD_TxDataBlock+0x7e>

  return FALSE;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3710      	adds	r7, #16
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b084      	sub	sp, #16
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	4603      	mov	r3, r0
 800edfe:	6039      	str	r1, [r7, #0]
 800ee00:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800ee02:	f7ff ff13 	bl	800ec2c <SD_ReadyWait>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2bff      	cmp	r3, #255	@ 0xff
 800ee0a:	d001      	beq.n	800ee10 <SD_SendCmd+0x1a>
 800ee0c:	23ff      	movs	r3, #255	@ 0xff
 800ee0e:	e042      	b.n	800ee96 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7ff feac 	bl	800eb70 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	0e1b      	lsrs	r3, r3, #24
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7ff fea6 	bl	800eb70 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	0c1b      	lsrs	r3, r3, #16
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7ff fea0 	bl	800eb70 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	0a1b      	lsrs	r3, r3, #8
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7ff fe9a 	bl	800eb70 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7ff fe95 	bl	800eb70 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800ee46:	79fb      	ldrb	r3, [r7, #7]
 800ee48:	2b40      	cmp	r3, #64	@ 0x40
 800ee4a:	d102      	bne.n	800ee52 <SD_SendCmd+0x5c>
 800ee4c:	2395      	movs	r3, #149	@ 0x95
 800ee4e:	73fb      	strb	r3, [r7, #15]
 800ee50:	e007      	b.n	800ee62 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800ee52:	79fb      	ldrb	r3, [r7, #7]
 800ee54:	2b48      	cmp	r3, #72	@ 0x48
 800ee56:	d102      	bne.n	800ee5e <SD_SendCmd+0x68>
 800ee58:	2387      	movs	r3, #135	@ 0x87
 800ee5a:	73fb      	strb	r3, [r7, #15]
 800ee5c:	e001      	b.n	800ee62 <SD_SendCmd+0x6c>
  else crc = 1;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800ee62:	7bfb      	ldrb	r3, [r7, #15]
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7ff fe83 	bl	800eb70 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800ee6a:	79fb      	ldrb	r3, [r7, #7]
 800ee6c:	2b4c      	cmp	r3, #76	@ 0x4c
 800ee6e:	d101      	bne.n	800ee74 <SD_SendCmd+0x7e>
 800ee70:	f7ff feb2 	bl	800ebd8 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800ee74:	230a      	movs	r3, #10
 800ee76:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800ee78:	f7ff feae 	bl	800ebd8 <SPI_RxByte>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800ee80:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	da05      	bge.n	800ee94 <SD_SendCmd+0x9e>
 800ee88:	7bbb      	ldrb	r3, [r7, #14]
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	73bb      	strb	r3, [r7, #14]
 800ee8e:	7bbb      	ldrb	r3, [r7, #14]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d1f1      	bne.n	800ee78 <SD_SendCmd+0x82>

  return res;
 800ee94:	7b7b      	ldrb	r3, [r7, #13]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
	...

0800eea0 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800eea0:	b590      	push	{r4, r7, lr}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	4603      	mov	r3, r0
 800eea8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800eeaa:	79fb      	ldrb	r3, [r7, #7]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d001      	beq.n	800eeb4 <SD_disk_initialize+0x14>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	e0d1      	b.n	800f058 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800eeb4:	4b6a      	ldr	r3, [pc, #424]	@ (800f060 <SD_disk_initialize+0x1c0>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	f003 0302 	and.w	r3, r3, #2
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d003      	beq.n	800eeca <SD_disk_initialize+0x2a>
 800eec2:	4b67      	ldr	r3, [pc, #412]	@ (800f060 <SD_disk_initialize+0x1c0>)
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	e0c6      	b.n	800f058 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800eeca:	f7ff fec9 	bl	800ec60 <SD_PowerOn>
  /* slave select */
  SELECT();
 800eece:	f7ff fe37 	bl	800eb40 <SELECT>
  /* check disk type */
  type = 0;
 800eed2:	2300      	movs	r3, #0
 800eed4:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800eed6:	2100      	movs	r1, #0
 800eed8:	2040      	movs	r0, #64	@ 0x40
 800eeda:	f7ff ff8c 	bl	800edf6 <SD_SendCmd>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	f040 80a1 	bne.w	800f028 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800eee6:	4b5f      	ldr	r3, [pc, #380]	@ (800f064 <SD_disk_initialize+0x1c4>)
 800eee8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eeec:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800eeee:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800eef2:	2048      	movs	r0, #72	@ 0x48
 800eef4:	f7ff ff7f 	bl	800edf6 <SD_SendCmd>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d155      	bne.n	800efaa <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800eefe:	2300      	movs	r3, #0
 800ef00:	73fb      	strb	r3, [r7, #15]
 800ef02:	e00c      	b.n	800ef1e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800ef04:	7bfc      	ldrb	r4, [r7, #15]
 800ef06:	f7ff fe67 	bl	800ebd8 <SPI_RxByte>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	f104 0310 	add.w	r3, r4, #16
 800ef12:	443b      	add	r3, r7
 800ef14:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	73fb      	strb	r3, [r7, #15]
 800ef1e:	7bfb      	ldrb	r3, [r7, #15]
 800ef20:	2b03      	cmp	r3, #3
 800ef22:	d9ef      	bls.n	800ef04 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800ef24:	7abb      	ldrb	r3, [r7, #10]
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d17e      	bne.n	800f028 <SD_disk_initialize+0x188>
 800ef2a:	7afb      	ldrb	r3, [r7, #11]
 800ef2c:	2baa      	cmp	r3, #170	@ 0xaa
 800ef2e:	d17b      	bne.n	800f028 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ef30:	2100      	movs	r1, #0
 800ef32:	2077      	movs	r0, #119	@ 0x77
 800ef34:	f7ff ff5f 	bl	800edf6 <SD_SendCmd>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d807      	bhi.n	800ef4e <SD_disk_initialize+0xae>
 800ef3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ef42:	2069      	movs	r0, #105	@ 0x69
 800ef44:	f7ff ff57 	bl	800edf6 <SD_SendCmd>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d004      	beq.n	800ef58 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800ef4e:	4b45      	ldr	r3, [pc, #276]	@ (800f064 <SD_disk_initialize+0x1c4>)
 800ef50:	881b      	ldrh	r3, [r3, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1ec      	bne.n	800ef30 <SD_disk_initialize+0x90>
 800ef56:	e000      	b.n	800ef5a <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ef58:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800ef5a:	4b42      	ldr	r3, [pc, #264]	@ (800f064 <SD_disk_initialize+0x1c4>)
 800ef5c:	881b      	ldrh	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d062      	beq.n	800f028 <SD_disk_initialize+0x188>
 800ef62:	2100      	movs	r1, #0
 800ef64:	207a      	movs	r0, #122	@ 0x7a
 800ef66:	f7ff ff46 	bl	800edf6 <SD_SendCmd>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d15b      	bne.n	800f028 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800ef70:	2300      	movs	r3, #0
 800ef72:	73fb      	strb	r3, [r7, #15]
 800ef74:	e00c      	b.n	800ef90 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800ef76:	7bfc      	ldrb	r4, [r7, #15]
 800ef78:	f7ff fe2e 	bl	800ebd8 <SPI_RxByte>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	461a      	mov	r2, r3
 800ef80:	f104 0310 	add.w	r3, r4, #16
 800ef84:	443b      	add	r3, r7
 800ef86:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800ef8a:	7bfb      	ldrb	r3, [r7, #15]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	73fb      	strb	r3, [r7, #15]
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
 800ef92:	2b03      	cmp	r3, #3
 800ef94:	d9ef      	bls.n	800ef76 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800ef96:	7a3b      	ldrb	r3, [r7, #8]
 800ef98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <SD_disk_initialize+0x104>
 800efa0:	230c      	movs	r3, #12
 800efa2:	e000      	b.n	800efa6 <SD_disk_initialize+0x106>
 800efa4:	2304      	movs	r3, #4
 800efa6:	73bb      	strb	r3, [r7, #14]
 800efa8:	e03e      	b.n	800f028 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800efaa:	2100      	movs	r1, #0
 800efac:	2077      	movs	r0, #119	@ 0x77
 800efae:	f7ff ff22 	bl	800edf6 <SD_SendCmd>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d808      	bhi.n	800efca <SD_disk_initialize+0x12a>
 800efb8:	2100      	movs	r1, #0
 800efba:	2069      	movs	r0, #105	@ 0x69
 800efbc:	f7ff ff1b 	bl	800edf6 <SD_SendCmd>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d801      	bhi.n	800efca <SD_disk_initialize+0x12a>
 800efc6:	2302      	movs	r3, #2
 800efc8:	e000      	b.n	800efcc <SD_disk_initialize+0x12c>
 800efca:	2301      	movs	r3, #1
 800efcc:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800efce:	7bbb      	ldrb	r3, [r7, #14]
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d10e      	bne.n	800eff2 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800efd4:	2100      	movs	r1, #0
 800efd6:	2077      	movs	r0, #119	@ 0x77
 800efd8:	f7ff ff0d 	bl	800edf6 <SD_SendCmd>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d80e      	bhi.n	800f000 <SD_disk_initialize+0x160>
 800efe2:	2100      	movs	r1, #0
 800efe4:	2069      	movs	r0, #105	@ 0x69
 800efe6:	f7ff ff06 	bl	800edf6 <SD_SendCmd>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d107      	bne.n	800f000 <SD_disk_initialize+0x160>
 800eff0:	e00c      	b.n	800f00c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800eff2:	2100      	movs	r1, #0
 800eff4:	2041      	movs	r0, #65	@ 0x41
 800eff6:	f7ff fefe 	bl	800edf6 <SD_SendCmd>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d004      	beq.n	800f00a <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800f000:	4b18      	ldr	r3, [pc, #96]	@ (800f064 <SD_disk_initialize+0x1c4>)
 800f002:	881b      	ldrh	r3, [r3, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d1e2      	bne.n	800efce <SD_disk_initialize+0x12e>
 800f008:	e000      	b.n	800f00c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800f00a:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800f00c:	4b15      	ldr	r3, [pc, #84]	@ (800f064 <SD_disk_initialize+0x1c4>)
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d007      	beq.n	800f024 <SD_disk_initialize+0x184>
 800f014:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f018:	2050      	movs	r0, #80	@ 0x50
 800f01a:	f7ff feec 	bl	800edf6 <SD_SendCmd>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d001      	beq.n	800f028 <SD_disk_initialize+0x188>
 800f024:	2300      	movs	r3, #0
 800f026:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800f028:	4a0f      	ldr	r2, [pc, #60]	@ (800f068 <SD_disk_initialize+0x1c8>)
 800f02a:	7bbb      	ldrb	r3, [r7, #14]
 800f02c:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800f02e:	f7ff fd93 	bl	800eb58 <DESELECT>
  SPI_RxByte();
 800f032:	f7ff fdd1 	bl	800ebd8 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800f036:	7bbb      	ldrb	r3, [r7, #14]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d008      	beq.n	800f04e <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800f03c:	4b08      	ldr	r3, [pc, #32]	@ (800f060 <SD_disk_initialize+0x1c0>)
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	b2db      	uxtb	r3, r3
 800f042:	f023 0301 	bic.w	r3, r3, #1
 800f046:	b2da      	uxtb	r2, r3
 800f048:	4b05      	ldr	r3, [pc, #20]	@ (800f060 <SD_disk_initialize+0x1c0>)
 800f04a:	701a      	strb	r2, [r3, #0]
 800f04c:	e001      	b.n	800f052 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800f04e:	f7ff fe49 	bl	800ece4 <SD_PowerOff>
  }
  return Stat;
 800f052:	4b03      	ldr	r3, [pc, #12]	@ (800f060 <SD_disk_initialize+0x1c0>)
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	b2db      	uxtb	r3, r3
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3714      	adds	r7, #20
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd90      	pop	{r4, r7, pc}
 800f060:	240000bc 	.word	0x240000bc
 800f064:	240029e8 	.word	0x240029e8
 800f068:	240029ec 	.word	0x240029ec

0800f06c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800f076:	79fb      	ldrb	r3, [r7, #7]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <SD_disk_status+0x14>
 800f07c:	2301      	movs	r3, #1
 800f07e:	e002      	b.n	800f086 <SD_disk_status+0x1a>
  return Stat;
 800f080:	4b04      	ldr	r3, [pc, #16]	@ (800f094 <SD_disk_status+0x28>)
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	b2db      	uxtb	r3, r3
}
 800f086:	4618      	mov	r0, r3
 800f088:	370c      	adds	r7, #12
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	240000bc 	.word	0x240000bc

0800f098 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60b9      	str	r1, [r7, #8]
 800f0a0:	607a      	str	r2, [r7, #4]
 800f0a2:	603b      	str	r3, [r7, #0]
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d102      	bne.n	800f0b4 <SD_disk_read+0x1c>
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d101      	bne.n	800f0b8 <SD_disk_read+0x20>
 800f0b4:	2304      	movs	r3, #4
 800f0b6:	e051      	b.n	800f15c <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f0b8:	4b2a      	ldr	r3, [pc, #168]	@ (800f164 <SD_disk_read+0xcc>)
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	f003 0301 	and.w	r3, r3, #1
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d001      	beq.n	800f0ca <SD_disk_read+0x32>
 800f0c6:	2303      	movs	r3, #3
 800f0c8:	e048      	b.n	800f15c <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800f0ca:	4b27      	ldr	r3, [pc, #156]	@ (800f168 <SD_disk_read+0xd0>)
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	f003 0304 	and.w	r3, r3, #4
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <SD_disk_read+0x44>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	025b      	lsls	r3, r3, #9
 800f0da:	607b      	str	r3, [r7, #4]

  SELECT();
 800f0dc:	f7ff fd30 	bl	800eb40 <SELECT>

  if (count == 1)
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2b01      	cmp	r3, #1
 800f0e4:	d111      	bne.n	800f10a <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	2051      	movs	r0, #81	@ 0x51
 800f0ea:	f7ff fe84 	bl	800edf6 <SD_SendCmd>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d129      	bne.n	800f148 <SD_disk_read+0xb0>
 800f0f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f0f8:	68b8      	ldr	r0, [r7, #8]
 800f0fa:	f7ff fe0b 	bl	800ed14 <SD_RxDataBlock>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d021      	beq.n	800f148 <SD_disk_read+0xb0>
 800f104:	2300      	movs	r3, #0
 800f106:	603b      	str	r3, [r7, #0]
 800f108:	e01e      	b.n	800f148 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800f10a:	6879      	ldr	r1, [r7, #4]
 800f10c:	2052      	movs	r0, #82	@ 0x52
 800f10e:	f7ff fe72 	bl	800edf6 <SD_SendCmd>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d117      	bne.n	800f148 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800f118:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f11c:	68b8      	ldr	r0, [r7, #8]
 800f11e:	f7ff fdf9 	bl	800ed14 <SD_RxDataBlock>
 800f122:	4603      	mov	r3, r0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00a      	beq.n	800f13e <SD_disk_read+0xa6>
        buff += 512;
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f12e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	3b01      	subs	r3, #1
 800f134:	603b      	str	r3, [r7, #0]
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1ed      	bne.n	800f118 <SD_disk_read+0x80>
 800f13c:	e000      	b.n	800f140 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800f13e:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800f140:	2100      	movs	r1, #0
 800f142:	204c      	movs	r0, #76	@ 0x4c
 800f144:	f7ff fe57 	bl	800edf6 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800f148:	f7ff fd06 	bl	800eb58 <DESELECT>
  SPI_RxByte();
 800f14c:	f7ff fd44 	bl	800ebd8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	bf14      	ite	ne
 800f156:	2301      	movne	r3, #1
 800f158:	2300      	moveq	r3, #0
 800f15a:	b2db      	uxtb	r3, r3
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	240000bc 	.word	0x240000bc
 800f168:	240029ec 	.word	0x240029ec

0800f16c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	60b9      	str	r1, [r7, #8]
 800f174:	607a      	str	r2, [r7, #4]
 800f176:	603b      	str	r3, [r7, #0]
 800f178:	4603      	mov	r3, r0
 800f17a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800f17c:	7bfb      	ldrb	r3, [r7, #15]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d102      	bne.n	800f188 <SD_disk_write+0x1c>
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d101      	bne.n	800f18c <SD_disk_write+0x20>
 800f188:	2304      	movs	r3, #4
 800f18a:	e06b      	b.n	800f264 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f18c:	4b37      	ldr	r3, [pc, #220]	@ (800f26c <SD_disk_write+0x100>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	b2db      	uxtb	r3, r3
 800f192:	f003 0301 	and.w	r3, r3, #1
 800f196:	2b00      	cmp	r3, #0
 800f198:	d001      	beq.n	800f19e <SD_disk_write+0x32>
 800f19a:	2303      	movs	r3, #3
 800f19c:	e062      	b.n	800f264 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800f19e:	4b33      	ldr	r3, [pc, #204]	@ (800f26c <SD_disk_write+0x100>)
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	f003 0304 	and.w	r3, r3, #4
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <SD_disk_write+0x44>
 800f1ac:	2302      	movs	r3, #2
 800f1ae:	e059      	b.n	800f264 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800f1b0:	4b2f      	ldr	r3, [pc, #188]	@ (800f270 <SD_disk_write+0x104>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	f003 0304 	and.w	r3, r3, #4
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d102      	bne.n	800f1c2 <SD_disk_write+0x56>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	025b      	lsls	r3, r3, #9
 800f1c0:	607b      	str	r3, [r7, #4]

  SELECT();
 800f1c2:	f7ff fcbd 	bl	800eb40 <SELECT>

  if (count == 1)
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d110      	bne.n	800f1ee <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800f1cc:	6879      	ldr	r1, [r7, #4]
 800f1ce:	2058      	movs	r0, #88	@ 0x58
 800f1d0:	f7ff fe11 	bl	800edf6 <SD_SendCmd>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d13a      	bne.n	800f250 <SD_disk_write+0xe4>
 800f1da:	21fe      	movs	r1, #254	@ 0xfe
 800f1dc:	68b8      	ldr	r0, [r7, #8]
 800f1de:	f7ff fdc7 	bl	800ed70 <SD_TxDataBlock>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d033      	beq.n	800f250 <SD_disk_write+0xe4>
      count = 0;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	603b      	str	r3, [r7, #0]
 800f1ec:	e030      	b.n	800f250 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800f1ee:	4b20      	ldr	r3, [pc, #128]	@ (800f270 <SD_disk_write+0x104>)
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	f003 0302 	and.w	r3, r3, #2
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d007      	beq.n	800f20a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800f1fa:	2100      	movs	r1, #0
 800f1fc:	2077      	movs	r0, #119	@ 0x77
 800f1fe:	f7ff fdfa 	bl	800edf6 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800f202:	6839      	ldr	r1, [r7, #0]
 800f204:	2057      	movs	r0, #87	@ 0x57
 800f206:	f7ff fdf6 	bl	800edf6 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800f20a:	6879      	ldr	r1, [r7, #4]
 800f20c:	2059      	movs	r0, #89	@ 0x59
 800f20e:	f7ff fdf2 	bl	800edf6 <SD_SendCmd>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d11b      	bne.n	800f250 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800f218:	21fc      	movs	r1, #252	@ 0xfc
 800f21a:	68b8      	ldr	r0, [r7, #8]
 800f21c:	f7ff fda8 	bl	800ed70 <SD_TxDataBlock>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00a      	beq.n	800f23c <SD_disk_write+0xd0>
        buff += 512;
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f22c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	3b01      	subs	r3, #1
 800f232:	603b      	str	r3, [r7, #0]
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1ee      	bne.n	800f218 <SD_disk_write+0xac>
 800f23a:	e000      	b.n	800f23e <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800f23c:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800f23e:	21fd      	movs	r1, #253	@ 0xfd
 800f240:	2000      	movs	r0, #0
 800f242:	f7ff fd95 	bl	800ed70 <SD_TxDataBlock>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d101      	bne.n	800f250 <SD_disk_write+0xe4>
      {
        count = 1;
 800f24c:	2301      	movs	r3, #1
 800f24e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800f250:	f7ff fc82 	bl	800eb58 <DESELECT>
  SPI_RxByte();
 800f254:	f7ff fcc0 	bl	800ebd8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	bf14      	ite	ne
 800f25e:	2301      	movne	r3, #1
 800f260:	2300      	moveq	r3, #0
 800f262:	b2db      	uxtb	r3, r3
}
 800f264:	4618      	mov	r0, r3
 800f266:	3710      	adds	r7, #16
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	240000bc 	.word	0x240000bc
 800f270:	240029ec 	.word	0x240029ec

0800f274 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800f274:	b590      	push	{r4, r7, lr}
 800f276:	b08b      	sub	sp, #44	@ 0x2c
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	603a      	str	r2, [r7, #0]
 800f27e:	71fb      	strb	r3, [r7, #7]
 800f280:	460b      	mov	r3, r1
 800f282:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800f288:	79fb      	ldrb	r3, [r7, #7]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <SD_disk_ioctl+0x1e>
 800f28e:	2304      	movs	r3, #4
 800f290:	e113      	b.n	800f4ba <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800f292:	2301      	movs	r3, #1
 800f294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800f298:	79bb      	ldrb	r3, [r7, #6]
 800f29a:	2b05      	cmp	r3, #5
 800f29c:	d124      	bne.n	800f2e8 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800f29e:	6a3b      	ldr	r3, [r7, #32]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	d012      	beq.n	800f2cc <SD_disk_ioctl+0x58>
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	dc1a      	bgt.n	800f2e0 <SD_disk_ioctl+0x6c>
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d002      	beq.n	800f2b4 <SD_disk_ioctl+0x40>
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d006      	beq.n	800f2c0 <SD_disk_ioctl+0x4c>
 800f2b2:	e015      	b.n	800f2e0 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800f2b4:	f7ff fd16 	bl	800ece4 <SD_PowerOff>
      res = RES_OK;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f2be:	e0fa      	b.n	800f4b6 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800f2c0:	f7ff fcce 	bl	800ec60 <SD_PowerOn>
      res = RES_OK;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f2ca:	e0f4      	b.n	800f4b6 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	1c5c      	adds	r4, r3, #1
 800f2d0:	f7ff fd14 	bl	800ecfc <SD_CheckPower>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800f2d8:	2300      	movs	r3, #0
 800f2da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f2de:	e0ea      	b.n	800f4b6 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800f2e0:	2304      	movs	r3, #4
 800f2e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f2e6:	e0e6      	b.n	800f4b6 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800f2e8:	4b76      	ldr	r3, [pc, #472]	@ (800f4c4 <SD_disk_ioctl+0x250>)
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	f003 0301 	and.w	r3, r3, #1
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800f2f6:	2303      	movs	r3, #3
 800f2f8:	e0df      	b.n	800f4ba <SD_disk_ioctl+0x246>
    }
    SELECT();
 800f2fa:	f7ff fc21 	bl	800eb40 <SELECT>
    switch (ctrl)
 800f2fe:	79bb      	ldrb	r3, [r7, #6]
 800f300:	2b0d      	cmp	r3, #13
 800f302:	f200 80c9 	bhi.w	800f498 <SD_disk_ioctl+0x224>
 800f306:	a201      	add	r2, pc, #4	@ (adr r2, 800f30c <SD_disk_ioctl+0x98>)
 800f308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f30c:	0800f403 	.word	0x0800f403
 800f310:	0800f345 	.word	0x0800f345
 800f314:	0800f3f3 	.word	0x0800f3f3
 800f318:	0800f499 	.word	0x0800f499
 800f31c:	0800f499 	.word	0x0800f499
 800f320:	0800f499 	.word	0x0800f499
 800f324:	0800f499 	.word	0x0800f499
 800f328:	0800f499 	.word	0x0800f499
 800f32c:	0800f499 	.word	0x0800f499
 800f330:	0800f499 	.word	0x0800f499
 800f334:	0800f499 	.word	0x0800f499
 800f338:	0800f415 	.word	0x0800f415
 800f33c:	0800f439 	.word	0x0800f439
 800f340:	0800f45d 	.word	0x0800f45d
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800f344:	2100      	movs	r1, #0
 800f346:	2049      	movs	r0, #73	@ 0x49
 800f348:	f7ff fd55 	bl	800edf6 <SD_SendCmd>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f040 80a6 	bne.w	800f4a0 <SD_disk_ioctl+0x22c>
 800f354:	f107 030c 	add.w	r3, r7, #12
 800f358:	2110      	movs	r1, #16
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7ff fcda 	bl	800ed14 <SD_RxDataBlock>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	f000 809c 	beq.w	800f4a0 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800f368:	7b3b      	ldrb	r3, [r7, #12]
 800f36a:	099b      	lsrs	r3, r3, #6
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d10d      	bne.n	800f38e <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800f372:	7d7b      	ldrb	r3, [r7, #21]
 800f374:	461a      	mov	r2, r3
 800f376:	7d3b      	ldrb	r3, [r7, #20]
 800f378:	021b      	lsls	r3, r3, #8
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	4413      	add	r3, r2
 800f37e:	b29b      	uxth	r3, r3
 800f380:	3301      	adds	r3, #1
 800f382:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800f384:	8bfb      	ldrh	r3, [r7, #30]
 800f386:	029a      	lsls	r2, r3, #10
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	601a      	str	r2, [r3, #0]
 800f38c:	e02d      	b.n	800f3ea <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800f38e:	7c7b      	ldrb	r3, [r7, #17]
 800f390:	f003 030f 	and.w	r3, r3, #15
 800f394:	b2da      	uxtb	r2, r3
 800f396:	7dbb      	ldrb	r3, [r7, #22]
 800f398:	09db      	lsrs	r3, r3, #7
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	4413      	add	r3, r2
 800f39e:	b2da      	uxtb	r2, r3
 800f3a0:	7d7b      	ldrb	r3, [r7, #21]
 800f3a2:	005b      	lsls	r3, r3, #1
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	f003 0306 	and.w	r3, r3, #6
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	4413      	add	r3, r2
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	3302      	adds	r3, #2
 800f3b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800f3b6:	7d3b      	ldrb	r3, [r7, #20]
 800f3b8:	099b      	lsrs	r3, r3, #6
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	461a      	mov	r2, r3
 800f3be:	7cfb      	ldrb	r3, [r7, #19]
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	4413      	add	r3, r2
 800f3c6:	b29a      	uxth	r2, r3
 800f3c8:	7cbb      	ldrb	r3, [r7, #18]
 800f3ca:	029b      	lsls	r3, r3, #10
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	4413      	add	r3, r2
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	3301      	adds	r3, #1
 800f3da:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800f3dc:	8bfa      	ldrh	r2, [r7, #30]
 800f3de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f3e2:	3b09      	subs	r3, #9
 800f3e4:	409a      	lsls	r2, r3
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800f3f0:	e056      	b.n	800f4a0 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3f8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f400:	e055      	b.n	800f4ae <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800f402:	f7ff fc13 	bl	800ec2c <SD_ReadyWait>
 800f406:	4603      	mov	r3, r0
 800f408:	2bff      	cmp	r3, #255	@ 0xff
 800f40a:	d14b      	bne.n	800f4a4 <SD_disk_ioctl+0x230>
 800f40c:	2300      	movs	r3, #0
 800f40e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f412:	e047      	b.n	800f4a4 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f414:	2100      	movs	r1, #0
 800f416:	2049      	movs	r0, #73	@ 0x49
 800f418:	f7ff fced 	bl	800edf6 <SD_SendCmd>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d142      	bne.n	800f4a8 <SD_disk_ioctl+0x234>
 800f422:	2110      	movs	r1, #16
 800f424:	6a38      	ldr	r0, [r7, #32]
 800f426:	f7ff fc75 	bl	800ed14 <SD_RxDataBlock>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d03b      	beq.n	800f4a8 <SD_disk_ioctl+0x234>
 800f430:	2300      	movs	r3, #0
 800f432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f436:	e037      	b.n	800f4a8 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f438:	2100      	movs	r1, #0
 800f43a:	204a      	movs	r0, #74	@ 0x4a
 800f43c:	f7ff fcdb 	bl	800edf6 <SD_SendCmd>
 800f440:	4603      	mov	r3, r0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d132      	bne.n	800f4ac <SD_disk_ioctl+0x238>
 800f446:	2110      	movs	r1, #16
 800f448:	6a38      	ldr	r0, [r7, #32]
 800f44a:	f7ff fc63 	bl	800ed14 <SD_RxDataBlock>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	d02b      	beq.n	800f4ac <SD_disk_ioctl+0x238>
 800f454:	2300      	movs	r3, #0
 800f456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f45a:	e027      	b.n	800f4ac <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800f45c:	2100      	movs	r1, #0
 800f45e:	207a      	movs	r0, #122	@ 0x7a
 800f460:	f7ff fcc9 	bl	800edf6 <SD_SendCmd>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d116      	bne.n	800f498 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800f46a:	2300      	movs	r3, #0
 800f46c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f470:	e00b      	b.n	800f48a <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800f472:	6a3c      	ldr	r4, [r7, #32]
 800f474:	1c63      	adds	r3, r4, #1
 800f476:	623b      	str	r3, [r7, #32]
 800f478:	f7ff fbae 	bl	800ebd8 <SPI_RxByte>
 800f47c:	4603      	mov	r3, r0
 800f47e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800f480:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f484:	3301      	adds	r3, #1
 800f486:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f48a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f48e:	2b03      	cmp	r3, #3
 800f490:	d9ef      	bls.n	800f472 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800f492:	2300      	movs	r3, #0
 800f494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800f498:	2304      	movs	r3, #4
 800f49a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f49e:	e006      	b.n	800f4ae <SD_disk_ioctl+0x23a>
      break;
 800f4a0:	bf00      	nop
 800f4a2:	e004      	b.n	800f4ae <SD_disk_ioctl+0x23a>
      break;
 800f4a4:	bf00      	nop
 800f4a6:	e002      	b.n	800f4ae <SD_disk_ioctl+0x23a>
      break;
 800f4a8:	bf00      	nop
 800f4aa:	e000      	b.n	800f4ae <SD_disk_ioctl+0x23a>
      break;
 800f4ac:	bf00      	nop
    }
    DESELECT();
 800f4ae:	f7ff fb53 	bl	800eb58 <DESELECT>
    SPI_RxByte();
 800f4b2:	f7ff fb91 	bl	800ebd8 <SPI_RxByte>
  }
  return res;
 800f4b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	372c      	adds	r7, #44	@ 0x2c
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd90      	pop	{r4, r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	240000bc 	.word	0x240000bc

0800f4c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f4d2:	79fb      	ldrb	r3, [r7, #7]
 800f4d4:	4a08      	ldr	r2, [pc, #32]	@ (800f4f8 <disk_status+0x30>)
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	4413      	add	r3, r2
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	79fa      	ldrb	r2, [r7, #7]
 800f4e0:	4905      	ldr	r1, [pc, #20]	@ (800f4f8 <disk_status+0x30>)
 800f4e2:	440a      	add	r2, r1
 800f4e4:	7a12      	ldrb	r2, [r2, #8]
 800f4e6:	4610      	mov	r0, r2
 800f4e8:	4798      	blx	r3
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3710      	adds	r7, #16
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	24002c18 	.word	0x24002c18

0800f4fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	4603      	mov	r3, r0
 800f504:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f506:	2300      	movs	r3, #0
 800f508:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f50a:	79fb      	ldrb	r3, [r7, #7]
 800f50c:	4a0e      	ldr	r2, [pc, #56]	@ (800f548 <disk_initialize+0x4c>)
 800f50e:	5cd3      	ldrb	r3, [r2, r3]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d114      	bne.n	800f53e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	4a0c      	ldr	r2, [pc, #48]	@ (800f548 <disk_initialize+0x4c>)
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	4413      	add	r3, r2
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	79fa      	ldrb	r2, [r7, #7]
 800f522:	4909      	ldr	r1, [pc, #36]	@ (800f548 <disk_initialize+0x4c>)
 800f524:	440a      	add	r2, r1
 800f526:	7a12      	ldrb	r2, [r2, #8]
 800f528:	4610      	mov	r0, r2
 800f52a:	4798      	blx	r3
 800f52c:	4603      	mov	r3, r0
 800f52e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f530:	7bfb      	ldrb	r3, [r7, #15]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d103      	bne.n	800f53e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f536:	79fb      	ldrb	r3, [r7, #7]
 800f538:	4a03      	ldr	r2, [pc, #12]	@ (800f548 <disk_initialize+0x4c>)
 800f53a:	2101      	movs	r1, #1
 800f53c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	24002c18 	.word	0x24002c18

0800f54c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f54c:	b590      	push	{r4, r7, lr}
 800f54e:	b087      	sub	sp, #28
 800f550:	af00      	add	r7, sp, #0
 800f552:	60b9      	str	r1, [r7, #8]
 800f554:	607a      	str	r2, [r7, #4]
 800f556:	603b      	str	r3, [r7, #0]
 800f558:	4603      	mov	r3, r0
 800f55a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f55c:	7bfb      	ldrb	r3, [r7, #15]
 800f55e:	4a0a      	ldr	r2, [pc, #40]	@ (800f588 <disk_read+0x3c>)
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	4413      	add	r3, r2
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	689c      	ldr	r4, [r3, #8]
 800f568:	7bfb      	ldrb	r3, [r7, #15]
 800f56a:	4a07      	ldr	r2, [pc, #28]	@ (800f588 <disk_read+0x3c>)
 800f56c:	4413      	add	r3, r2
 800f56e:	7a18      	ldrb	r0, [r3, #8]
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	68b9      	ldr	r1, [r7, #8]
 800f576:	47a0      	blx	r4
 800f578:	4603      	mov	r3, r0
 800f57a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	371c      	adds	r7, #28
 800f582:	46bd      	mov	sp, r7
 800f584:	bd90      	pop	{r4, r7, pc}
 800f586:	bf00      	nop
 800f588:	24002c18 	.word	0x24002c18

0800f58c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f58c:	b590      	push	{r4, r7, lr}
 800f58e:	b087      	sub	sp, #28
 800f590:	af00      	add	r7, sp, #0
 800f592:	60b9      	str	r1, [r7, #8]
 800f594:	607a      	str	r2, [r7, #4]
 800f596:	603b      	str	r3, [r7, #0]
 800f598:	4603      	mov	r3, r0
 800f59a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
 800f59e:	4a0a      	ldr	r2, [pc, #40]	@ (800f5c8 <disk_write+0x3c>)
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	4413      	add	r3, r2
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	68dc      	ldr	r4, [r3, #12]
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
 800f5aa:	4a07      	ldr	r2, [pc, #28]	@ (800f5c8 <disk_write+0x3c>)
 800f5ac:	4413      	add	r3, r2
 800f5ae:	7a18      	ldrb	r0, [r3, #8]
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	68b9      	ldr	r1, [r7, #8]
 800f5b6:	47a0      	blx	r4
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800f5bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	371c      	adds	r7, #28
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd90      	pop	{r4, r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	24002c18 	.word	0x24002c18

0800f5cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	603a      	str	r2, [r7, #0]
 800f5d6:	71fb      	strb	r3, [r7, #7]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f5dc:	79fb      	ldrb	r3, [r7, #7]
 800f5de:	4a09      	ldr	r2, [pc, #36]	@ (800f604 <disk_ioctl+0x38>)
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	4413      	add	r3, r2
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	691b      	ldr	r3, [r3, #16]
 800f5e8:	79fa      	ldrb	r2, [r7, #7]
 800f5ea:	4906      	ldr	r1, [pc, #24]	@ (800f604 <disk_ioctl+0x38>)
 800f5ec:	440a      	add	r2, r1
 800f5ee:	7a10      	ldrb	r0, [r2, #8]
 800f5f0:	79b9      	ldrb	r1, [r7, #6]
 800f5f2:	683a      	ldr	r2, [r7, #0]
 800f5f4:	4798      	blx	r3
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	73fb      	strb	r3, [r7, #15]
  return res;
 800f5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	24002c18 	.word	0x24002c18

0800f608 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	3301      	adds	r3, #1
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f618:	89fb      	ldrh	r3, [r7, #14]
 800f61a:	021b      	lsls	r3, r3, #8
 800f61c:	b21a      	sxth	r2, r3
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	b21b      	sxth	r3, r3
 800f624:	4313      	orrs	r3, r2
 800f626:	b21b      	sxth	r3, r3
 800f628:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f62a:	89fb      	ldrh	r3, [r7, #14]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3714      	adds	r7, #20
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr

0800f638 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f638:	b480      	push	{r7}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	3303      	adds	r3, #3
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	021b      	lsls	r3, r3, #8
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	3202      	adds	r2, #2
 800f650:	7812      	ldrb	r2, [r2, #0]
 800f652:	4313      	orrs	r3, r2
 800f654:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	021b      	lsls	r3, r3, #8
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	3201      	adds	r2, #1
 800f65e:	7812      	ldrb	r2, [r2, #0]
 800f660:	4313      	orrs	r3, r2
 800f662:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	021b      	lsls	r3, r3, #8
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	7812      	ldrb	r2, [r2, #0]
 800f66c:	4313      	orrs	r3, r2
 800f66e:	60fb      	str	r3, [r7, #12]
	return rv;
 800f670:	68fb      	ldr	r3, [r7, #12]
}
 800f672:	4618      	mov	r0, r3
 800f674:	3714      	adds	r7, #20
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr

0800f67e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f67e:	b480      	push	{r7}
 800f680:	b083      	sub	sp, #12
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
 800f686:	460b      	mov	r3, r1
 800f688:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	1c5a      	adds	r2, r3, #1
 800f68e:	607a      	str	r2, [r7, #4]
 800f690:	887a      	ldrh	r2, [r7, #2]
 800f692:	b2d2      	uxtb	r2, r2
 800f694:	701a      	strb	r2, [r3, #0]
 800f696:	887b      	ldrh	r3, [r7, #2]
 800f698:	0a1b      	lsrs	r3, r3, #8
 800f69a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	1c5a      	adds	r2, r3, #1
 800f6a0:	607a      	str	r2, [r7, #4]
 800f6a2:	887a      	ldrh	r2, [r7, #2]
 800f6a4:	b2d2      	uxtb	r2, r2
 800f6a6:	701a      	strb	r2, [r3, #0]
}
 800f6a8:	bf00      	nop
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	1c5a      	adds	r2, r3, #1
 800f6c2:	607a      	str	r2, [r7, #4]
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	b2d2      	uxtb	r2, r2
 800f6c8:	701a      	strb	r2, [r3, #0]
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	0a1b      	lsrs	r3, r3, #8
 800f6ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	1c5a      	adds	r2, r3, #1
 800f6d4:	607a      	str	r2, [r7, #4]
 800f6d6:	683a      	ldr	r2, [r7, #0]
 800f6d8:	b2d2      	uxtb	r2, r2
 800f6da:	701a      	strb	r2, [r3, #0]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	0a1b      	lsrs	r3, r3, #8
 800f6e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	1c5a      	adds	r2, r3, #1
 800f6e6:	607a      	str	r2, [r7, #4]
 800f6e8:	683a      	ldr	r2, [r7, #0]
 800f6ea:	b2d2      	uxtb	r2, r2
 800f6ec:	701a      	strb	r2, [r3, #0]
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	0a1b      	lsrs	r3, r3, #8
 800f6f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	607a      	str	r2, [r7, #4]
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	b2d2      	uxtb	r2, r2
 800f6fe:	701a      	strb	r2, [r3, #0]
}
 800f700:	bf00      	nop
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f70c:	b480      	push	{r7}
 800f70e:	b087      	sub	sp, #28
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00d      	beq.n	800f742 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f726:	693a      	ldr	r2, [r7, #16]
 800f728:	1c53      	adds	r3, r2, #1
 800f72a:	613b      	str	r3, [r7, #16]
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	1c59      	adds	r1, r3, #1
 800f730:	6179      	str	r1, [r7, #20]
 800f732:	7812      	ldrb	r2, [r2, #0]
 800f734:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	3b01      	subs	r3, #1
 800f73a:	607b      	str	r3, [r7, #4]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d1f1      	bne.n	800f726 <mem_cpy+0x1a>
	}
}
 800f742:	bf00      	nop
 800f744:	371c      	adds	r7, #28
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr

0800f74e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f74e:	b480      	push	{r7}
 800f750:	b087      	sub	sp, #28
 800f752:	af00      	add	r7, sp, #0
 800f754:	60f8      	str	r0, [r7, #12]
 800f756:	60b9      	str	r1, [r7, #8]
 800f758:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	1c5a      	adds	r2, r3, #1
 800f762:	617a      	str	r2, [r7, #20]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	b2d2      	uxtb	r2, r2
 800f768:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	3b01      	subs	r3, #1
 800f76e:	607b      	str	r3, [r7, #4]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d1f3      	bne.n	800f75e <mem_set+0x10>
}
 800f776:	bf00      	nop
 800f778:	bf00      	nop
 800f77a:	371c      	adds	r7, #28
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f784:	b480      	push	{r7}
 800f786:	b089      	sub	sp, #36	@ 0x24
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	61fb      	str	r3, [r7, #28]
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f798:	2300      	movs	r3, #0
 800f79a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	61fa      	str	r2, [r7, #28]
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	1c5a      	adds	r2, r3, #1
 800f7aa:	61ba      	str	r2, [r7, #24]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	1acb      	subs	r3, r1, r3
 800f7b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	607b      	str	r3, [r7, #4]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d002      	beq.n	800f7c4 <mem_cmp+0x40>
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d0eb      	beq.n	800f79c <mem_cmp+0x18>

	return r;
 800f7c4:	697b      	ldr	r3, [r7, #20]
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3724      	adds	r7, #36	@ 0x24
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr

0800f7d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f7d2:	b480      	push	{r7}
 800f7d4:	b083      	sub	sp, #12
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
 800f7da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f7dc:	e002      	b.n	800f7e4 <chk_chr+0x12>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	607b      	str	r3, [r7, #4]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d005      	beq.n	800f7f8 <chk_chr+0x26>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d1f2      	bne.n	800f7de <chk_chr+0xc>
	return *str;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	781b      	ldrb	r3, [r3, #0]
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f812:	2300      	movs	r3, #0
 800f814:	60bb      	str	r3, [r7, #8]
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	60fb      	str	r3, [r7, #12]
 800f81a:	e029      	b.n	800f870 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f81c:	4a27      	ldr	r2, [pc, #156]	@ (800f8bc <chk_lock+0xb4>)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	011b      	lsls	r3, r3, #4
 800f822:	4413      	add	r3, r2
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d01d      	beq.n	800f866 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f82a:	4a24      	ldr	r2, [pc, #144]	@ (800f8bc <chk_lock+0xb4>)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	011b      	lsls	r3, r3, #4
 800f830:	4413      	add	r3, r2
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d116      	bne.n	800f86a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f83c:	4a1f      	ldr	r2, [pc, #124]	@ (800f8bc <chk_lock+0xb4>)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	011b      	lsls	r3, r3, #4
 800f842:	4413      	add	r3, r2
 800f844:	3304      	adds	r3, #4
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d10c      	bne.n	800f86a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f850:	4a1a      	ldr	r2, [pc, #104]	@ (800f8bc <chk_lock+0xb4>)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	011b      	lsls	r3, r3, #4
 800f856:	4413      	add	r3, r2
 800f858:	3308      	adds	r3, #8
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f860:	429a      	cmp	r2, r3
 800f862:	d102      	bne.n	800f86a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f864:	e007      	b.n	800f876 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f866:	2301      	movs	r3, #1
 800f868:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	3301      	adds	r3, #1
 800f86e:	60fb      	str	r3, [r7, #12]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d9d2      	bls.n	800f81c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d109      	bne.n	800f890 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d102      	bne.n	800f888 <chk_lock+0x80>
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	2b02      	cmp	r3, #2
 800f886:	d101      	bne.n	800f88c <chk_lock+0x84>
 800f888:	2300      	movs	r3, #0
 800f88a:	e010      	b.n	800f8ae <chk_lock+0xa6>
 800f88c:	2312      	movs	r3, #18
 800f88e:	e00e      	b.n	800f8ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d108      	bne.n	800f8a8 <chk_lock+0xa0>
 800f896:	4a09      	ldr	r2, [pc, #36]	@ (800f8bc <chk_lock+0xb4>)
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	011b      	lsls	r3, r3, #4
 800f89c:	4413      	add	r3, r2
 800f89e:	330c      	adds	r3, #12
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f8a6:	d101      	bne.n	800f8ac <chk_lock+0xa4>
 800f8a8:	2310      	movs	r3, #16
 800f8aa:	e000      	b.n	800f8ae <chk_lock+0xa6>
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3714      	adds	r7, #20
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	240029f8 	.word	0x240029f8

0800f8c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	607b      	str	r3, [r7, #4]
 800f8ca:	e002      	b.n	800f8d2 <enq_lock+0x12>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	607b      	str	r3, [r7, #4]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d806      	bhi.n	800f8e6 <enq_lock+0x26>
 800f8d8:	4a09      	ldr	r2, [pc, #36]	@ (800f900 <enq_lock+0x40>)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	011b      	lsls	r3, r3, #4
 800f8de:	4413      	add	r3, r2
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d1f2      	bne.n	800f8cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2b02      	cmp	r3, #2
 800f8ea:	bf14      	ite	ne
 800f8ec:	2301      	movne	r3, #1
 800f8ee:	2300      	moveq	r3, #0
 800f8f0:	b2db      	uxtb	r3, r3
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	370c      	adds	r7, #12
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	240029f8 	.word	0x240029f8

0800f904 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f904:	b480      	push	{r7}
 800f906:	b085      	sub	sp, #20
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f90e:	2300      	movs	r3, #0
 800f910:	60fb      	str	r3, [r7, #12]
 800f912:	e01f      	b.n	800f954 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f914:	4a41      	ldr	r2, [pc, #260]	@ (800fa1c <inc_lock+0x118>)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	011b      	lsls	r3, r3, #4
 800f91a:	4413      	add	r3, r2
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	d113      	bne.n	800f94e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f926:	4a3d      	ldr	r2, [pc, #244]	@ (800fa1c <inc_lock+0x118>)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	011b      	lsls	r3, r3, #4
 800f92c:	4413      	add	r3, r2
 800f92e:	3304      	adds	r3, #4
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f936:	429a      	cmp	r2, r3
 800f938:	d109      	bne.n	800f94e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f93a:	4a38      	ldr	r2, [pc, #224]	@ (800fa1c <inc_lock+0x118>)
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	011b      	lsls	r3, r3, #4
 800f940:	4413      	add	r3, r2
 800f942:	3308      	adds	r3, #8
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d006      	beq.n	800f95c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	3301      	adds	r3, #1
 800f952:	60fb      	str	r3, [r7, #12]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d9dc      	bls.n	800f914 <inc_lock+0x10>
 800f95a:	e000      	b.n	800f95e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f95c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2b02      	cmp	r3, #2
 800f962:	d132      	bne.n	800f9ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f964:	2300      	movs	r3, #0
 800f966:	60fb      	str	r3, [r7, #12]
 800f968:	e002      	b.n	800f970 <inc_lock+0x6c>
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	3301      	adds	r3, #1
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b01      	cmp	r3, #1
 800f974:	d806      	bhi.n	800f984 <inc_lock+0x80>
 800f976:	4a29      	ldr	r2, [pc, #164]	@ (800fa1c <inc_lock+0x118>)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	011b      	lsls	r3, r3, #4
 800f97c:	4413      	add	r3, r2
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d1f2      	bne.n	800f96a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2b02      	cmp	r3, #2
 800f988:	d101      	bne.n	800f98e <inc_lock+0x8a>
 800f98a:	2300      	movs	r3, #0
 800f98c:	e040      	b.n	800fa10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	4922      	ldr	r1, [pc, #136]	@ (800fa1c <inc_lock+0x118>)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	011b      	lsls	r3, r3, #4
 800f998:	440b      	add	r3, r1
 800f99a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	689a      	ldr	r2, [r3, #8]
 800f9a0:	491e      	ldr	r1, [pc, #120]	@ (800fa1c <inc_lock+0x118>)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	011b      	lsls	r3, r3, #4
 800f9a6:	440b      	add	r3, r1
 800f9a8:	3304      	adds	r3, #4
 800f9aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	695a      	ldr	r2, [r3, #20]
 800f9b0:	491a      	ldr	r1, [pc, #104]	@ (800fa1c <inc_lock+0x118>)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	011b      	lsls	r3, r3, #4
 800f9b6:	440b      	add	r3, r1
 800f9b8:	3308      	adds	r3, #8
 800f9ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f9bc:	4a17      	ldr	r2, [pc, #92]	@ (800fa1c <inc_lock+0x118>)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	011b      	lsls	r3, r3, #4
 800f9c2:	4413      	add	r3, r2
 800f9c4:	330c      	adds	r3, #12
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d009      	beq.n	800f9e4 <inc_lock+0xe0>
 800f9d0:	4a12      	ldr	r2, [pc, #72]	@ (800fa1c <inc_lock+0x118>)
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	011b      	lsls	r3, r3, #4
 800f9d6:	4413      	add	r3, r2
 800f9d8:	330c      	adds	r3, #12
 800f9da:	881b      	ldrh	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d001      	beq.n	800f9e4 <inc_lock+0xe0>
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	e015      	b.n	800fa10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d108      	bne.n	800f9fc <inc_lock+0xf8>
 800f9ea:	4a0c      	ldr	r2, [pc, #48]	@ (800fa1c <inc_lock+0x118>)
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	011b      	lsls	r3, r3, #4
 800f9f0:	4413      	add	r3, r2
 800f9f2:	330c      	adds	r3, #12
 800f9f4:	881b      	ldrh	r3, [r3, #0]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	b29a      	uxth	r2, r3
 800f9fa:	e001      	b.n	800fa00 <inc_lock+0xfc>
 800f9fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fa00:	4906      	ldr	r1, [pc, #24]	@ (800fa1c <inc_lock+0x118>)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	011b      	lsls	r3, r3, #4
 800fa06:	440b      	add	r3, r1
 800fa08:	330c      	adds	r3, #12
 800fa0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	3301      	adds	r3, #1
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3714      	adds	r7, #20
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr
 800fa1c:	240029f8 	.word	0x240029f8

0800fa20 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	607b      	str	r3, [r7, #4]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d825      	bhi.n	800fa80 <dec_lock+0x60>
		n = Files[i].ctr;
 800fa34:	4a17      	ldr	r2, [pc, #92]	@ (800fa94 <dec_lock+0x74>)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	011b      	lsls	r3, r3, #4
 800fa3a:	4413      	add	r3, r2
 800fa3c:	330c      	adds	r3, #12
 800fa3e:	881b      	ldrh	r3, [r3, #0]
 800fa40:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fa42:	89fb      	ldrh	r3, [r7, #14]
 800fa44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa48:	d101      	bne.n	800fa4e <dec_lock+0x2e>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fa4e:	89fb      	ldrh	r3, [r7, #14]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d002      	beq.n	800fa5a <dec_lock+0x3a>
 800fa54:	89fb      	ldrh	r3, [r7, #14]
 800fa56:	3b01      	subs	r3, #1
 800fa58:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fa5a:	4a0e      	ldr	r2, [pc, #56]	@ (800fa94 <dec_lock+0x74>)
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	011b      	lsls	r3, r3, #4
 800fa60:	4413      	add	r3, r2
 800fa62:	330c      	adds	r3, #12
 800fa64:	89fa      	ldrh	r2, [r7, #14]
 800fa66:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fa68:	89fb      	ldrh	r3, [r7, #14]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d105      	bne.n	800fa7a <dec_lock+0x5a>
 800fa6e:	4a09      	ldr	r2, [pc, #36]	@ (800fa94 <dec_lock+0x74>)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	011b      	lsls	r3, r3, #4
 800fa74:	4413      	add	r3, r2
 800fa76:	2200      	movs	r2, #0
 800fa78:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	737b      	strb	r3, [r7, #13]
 800fa7e:	e001      	b.n	800fa84 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fa80:	2302      	movs	r3, #2
 800fa82:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fa84:	7b7b      	ldrb	r3, [r7, #13]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3714      	adds	r7, #20
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop
 800fa94:	240029f8 	.word	0x240029f8

0800fa98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800faa0:	2300      	movs	r3, #0
 800faa2:	60fb      	str	r3, [r7, #12]
 800faa4:	e010      	b.n	800fac8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800faa6:	4a0d      	ldr	r2, [pc, #52]	@ (800fadc <clear_lock+0x44>)
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	011b      	lsls	r3, r3, #4
 800faac:	4413      	add	r3, r2
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	687a      	ldr	r2, [r7, #4]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d105      	bne.n	800fac2 <clear_lock+0x2a>
 800fab6:	4a09      	ldr	r2, [pc, #36]	@ (800fadc <clear_lock+0x44>)
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	011b      	lsls	r3, r3, #4
 800fabc:	4413      	add	r3, r2
 800fabe:	2200      	movs	r2, #0
 800fac0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	3301      	adds	r3, #1
 800fac6:	60fb      	str	r3, [r7, #12]
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2b01      	cmp	r3, #1
 800facc:	d9eb      	bls.n	800faa6 <clear_lock+0xe>
	}
}
 800face:	bf00      	nop
 800fad0:	bf00      	nop
 800fad2:	3714      	adds	r7, #20
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr
 800fadc:	240029f8 	.word	0x240029f8

0800fae0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fae8:	2300      	movs	r3, #0
 800faea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	78db      	ldrb	r3, [r3, #3]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d034      	beq.n	800fb5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	7858      	ldrb	r0, [r3, #1]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fb04:	2301      	movs	r3, #1
 800fb06:	697a      	ldr	r2, [r7, #20]
 800fb08:	f7ff fd40 	bl	800f58c <disk_write>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d002      	beq.n	800fb18 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fb12:	2301      	movs	r3, #1
 800fb14:	73fb      	strb	r3, [r7, #15]
 800fb16:	e022      	b.n	800fb5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb22:	697a      	ldr	r2, [r7, #20]
 800fb24:	1ad2      	subs	r2, r2, r3
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d217      	bcs.n	800fb5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	789b      	ldrb	r3, [r3, #2]
 800fb32:	613b      	str	r3, [r7, #16]
 800fb34:	e010      	b.n	800fb58 <sync_window+0x78>
					wsect += fs->fsize;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb3a:	697a      	ldr	r2, [r7, #20]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	7858      	ldrb	r0, [r3, #1]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	697a      	ldr	r2, [r7, #20]
 800fb4e:	f7ff fd1d 	bl	800f58c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	3b01      	subs	r3, #1
 800fb56:	613b      	str	r3, [r7, #16]
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d8eb      	bhi.n	800fb36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fb72:	2300      	movs	r3, #0
 800fb74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb7a:	683a      	ldr	r2, [r7, #0]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d01b      	beq.n	800fbb8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f7ff ffad 	bl	800fae0 <sync_window>
 800fb86:	4603      	mov	r3, r0
 800fb88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fb8a:	7bfb      	ldrb	r3, [r7, #15]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d113      	bne.n	800fbb8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	7858      	ldrb	r0, [r3, #1]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	683a      	ldr	r2, [r7, #0]
 800fb9e:	f7ff fcd5 	bl	800f54c <disk_read>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d004      	beq.n	800fbb2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fba8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	683a      	ldr	r2, [r7, #0]
 800fbb6:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800fbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
	...

0800fbc4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7ff ff87 	bl	800fae0 <sync_window>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fbd6:	7bfb      	ldrb	r3, [r7, #15]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d159      	bne.n	800fc90 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	2b03      	cmp	r3, #3
 800fbe2:	d149      	bne.n	800fc78 <sync_fs+0xb4>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	791b      	ldrb	r3, [r3, #4]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d145      	bne.n	800fc78 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	899b      	ldrh	r3, [r3, #12]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	f7ff fda8 	bl	800f74e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	333c      	adds	r3, #60	@ 0x3c
 800fc02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fc06:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7ff fd37 	bl	800f67e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	333c      	adds	r3, #60	@ 0x3c
 800fc14:	4921      	ldr	r1, [pc, #132]	@ (800fc9c <sync_fs+0xd8>)
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff fd4c 	bl	800f6b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	333c      	adds	r3, #60	@ 0x3c
 800fc20:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fc24:	491e      	ldr	r1, [pc, #120]	@ (800fca0 <sync_fs+0xdc>)
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7ff fd44 	bl	800f6b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	333c      	adds	r3, #60	@ 0x3c
 800fc30:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	699b      	ldr	r3, [r3, #24]
 800fc38:	4619      	mov	r1, r3
 800fc3a:	4610      	mov	r0, r2
 800fc3c:	f7ff fd3a 	bl	800f6b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	333c      	adds	r3, #60	@ 0x3c
 800fc44:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	695b      	ldr	r3, [r3, #20]
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	4610      	mov	r0, r2
 800fc50:	f7ff fd30 	bl	800f6b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc58:	1c5a      	adds	r2, r3, #1
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	7858      	ldrb	r0, [r3, #1]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	f7ff fc8d 	bl	800f58c <disk_write>
			fs->fsi_flag = 0;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2200      	movs	r2, #0
 800fc76:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	785b      	ldrb	r3, [r3, #1]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	2100      	movs	r1, #0
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7ff fca3 	bl	800f5cc <disk_ioctl>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d001      	beq.n	800fc90 <sync_fs+0xcc>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3710      	adds	r7, #16
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	41615252 	.word	0x41615252
 800fca0:	61417272 	.word	0x61417272

0800fca4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	3b02      	subs	r3, #2
 800fcb2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a1b      	ldr	r3, [r3, #32]
 800fcb8:	3b02      	subs	r3, #2
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d301      	bcc.n	800fcc4 <clust2sect+0x20>
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	e008      	b.n	800fcd6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	895b      	ldrh	r3, [r3, #10]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	fb03 f202 	mul.w	r2, r3, r2
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcd4:	4413      	add	r3, r2
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	370c      	adds	r7, #12
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr

0800fce2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b086      	sub	sp, #24
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
 800fcea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d904      	bls.n	800fd02 <get_fat+0x20>
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	6a1b      	ldr	r3, [r3, #32]
 800fcfc:	683a      	ldr	r2, [r7, #0]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d302      	bcc.n	800fd08 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fd02:	2301      	movs	r3, #1
 800fd04:	617b      	str	r3, [r7, #20]
 800fd06:	e0ba      	b.n	800fe7e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fd08:	f04f 33ff 	mov.w	r3, #4294967295
 800fd0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	2b03      	cmp	r3, #3
 800fd14:	f000 8082 	beq.w	800fe1c <get_fat+0x13a>
 800fd18:	2b03      	cmp	r3, #3
 800fd1a:	f300 80a6 	bgt.w	800fe6a <get_fat+0x188>
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d002      	beq.n	800fd28 <get_fat+0x46>
 800fd22:	2b02      	cmp	r3, #2
 800fd24:	d055      	beq.n	800fdd2 <get_fat+0xf0>
 800fd26:	e0a0      	b.n	800fe6a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	60fb      	str	r3, [r7, #12]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	085b      	lsrs	r3, r3, #1
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	4413      	add	r3, r2
 800fd34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	899b      	ldrh	r3, [r3, #12]
 800fd3e:	4619      	mov	r1, r3
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd46:	4413      	add	r3, r2
 800fd48:	4619      	mov	r1, r3
 800fd4a:	6938      	ldr	r0, [r7, #16]
 800fd4c:	f7ff ff0c 	bl	800fb68 <move_window>
 800fd50:	4603      	mov	r3, r0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f040 808c 	bne.w	800fe70 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	1c5a      	adds	r2, r3, #1
 800fd5c:	60fa      	str	r2, [r7, #12]
 800fd5e:	693a      	ldr	r2, [r7, #16]
 800fd60:	8992      	ldrh	r2, [r2, #12]
 800fd62:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd66:	fb01 f202 	mul.w	r2, r1, r2
 800fd6a:	1a9b      	subs	r3, r3, r2
 800fd6c:	693a      	ldr	r2, [r7, #16]
 800fd6e:	4413      	add	r3, r2
 800fd70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	899b      	ldrh	r3, [r3, #12]
 800fd7e:	4619      	mov	r1, r3
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd86:	4413      	add	r3, r2
 800fd88:	4619      	mov	r1, r3
 800fd8a:	6938      	ldr	r0, [r7, #16]
 800fd8c:	f7ff feec 	bl	800fb68 <move_window>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d16e      	bne.n	800fe74 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	899b      	ldrh	r3, [r3, #12]
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fda2:	fb01 f202 	mul.w	r2, r1, r2
 800fda6:	1a9b      	subs	r3, r3, r2
 800fda8:	693a      	ldr	r2, [r7, #16]
 800fdaa:	4413      	add	r3, r2
 800fdac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fdb0:	021b      	lsls	r3, r3, #8
 800fdb2:	68ba      	ldr	r2, [r7, #8]
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	f003 0301 	and.w	r3, r3, #1
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d002      	beq.n	800fdc8 <get_fat+0xe6>
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	091b      	lsrs	r3, r3, #4
 800fdc6:	e002      	b.n	800fdce <get_fat+0xec>
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fdce:	617b      	str	r3, [r7, #20]
			break;
 800fdd0:	e055      	b.n	800fe7e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	899b      	ldrh	r3, [r3, #12]
 800fdda:	085b      	lsrs	r3, r3, #1
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	4619      	mov	r1, r3
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fde6:	4413      	add	r3, r2
 800fde8:	4619      	mov	r1, r3
 800fdea:	6938      	ldr	r0, [r7, #16]
 800fdec:	f7ff febc 	bl	800fb68 <move_window>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d140      	bne.n	800fe78 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	005b      	lsls	r3, r3, #1
 800fe00:	693a      	ldr	r2, [r7, #16]
 800fe02:	8992      	ldrh	r2, [r2, #12]
 800fe04:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe08:	fb00 f202 	mul.w	r2, r0, r2
 800fe0c:	1a9b      	subs	r3, r3, r2
 800fe0e:	440b      	add	r3, r1
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff fbf9 	bl	800f608 <ld_word>
 800fe16:	4603      	mov	r3, r0
 800fe18:	617b      	str	r3, [r7, #20]
			break;
 800fe1a:	e030      	b.n	800fe7e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	899b      	ldrh	r3, [r3, #12]
 800fe24:	089b      	lsrs	r3, r3, #2
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	4619      	mov	r1, r3
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe30:	4413      	add	r3, r2
 800fe32:	4619      	mov	r1, r3
 800fe34:	6938      	ldr	r0, [r7, #16]
 800fe36:	f7ff fe97 	bl	800fb68 <move_window>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d11d      	bne.n	800fe7c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	693a      	ldr	r2, [r7, #16]
 800fe4c:	8992      	ldrh	r2, [r2, #12]
 800fe4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe52:	fb00 f202 	mul.w	r2, r0, r2
 800fe56:	1a9b      	subs	r3, r3, r2
 800fe58:	440b      	add	r3, r1
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff fbec 	bl	800f638 <ld_dword>
 800fe60:	4603      	mov	r3, r0
 800fe62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fe66:	617b      	str	r3, [r7, #20]
			break;
 800fe68:	e009      	b.n	800fe7e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	617b      	str	r3, [r7, #20]
 800fe6e:	e006      	b.n	800fe7e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fe70:	bf00      	nop
 800fe72:	e004      	b.n	800fe7e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fe74:	bf00      	nop
 800fe76:	e002      	b.n	800fe7e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fe78:	bf00      	nop
 800fe7a:	e000      	b.n	800fe7e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fe7c:	bf00      	nop
		}
	}

	return val;
 800fe7e:	697b      	ldr	r3, [r7, #20]
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3718      	adds	r7, #24
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}

0800fe88 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fe88:	b590      	push	{r4, r7, lr}
 800fe8a:	b089      	sub	sp, #36	@ 0x24
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fe94:	2302      	movs	r3, #2
 800fe96:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	f240 8109 	bls.w	80100b2 <put_fat+0x22a>
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6a1b      	ldr	r3, [r3, #32]
 800fea4:	68ba      	ldr	r2, [r7, #8]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	f080 8103 	bcs.w	80100b2 <put_fat+0x22a>
		switch (fs->fs_type) {
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	2b03      	cmp	r3, #3
 800feb2:	f000 80b6 	beq.w	8010022 <put_fat+0x19a>
 800feb6:	2b03      	cmp	r3, #3
 800feb8:	f300 80fb 	bgt.w	80100b2 <put_fat+0x22a>
 800febc:	2b01      	cmp	r3, #1
 800febe:	d003      	beq.n	800fec8 <put_fat+0x40>
 800fec0:	2b02      	cmp	r3, #2
 800fec2:	f000 8083 	beq.w	800ffcc <put_fat+0x144>
 800fec6:	e0f4      	b.n	80100b2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	61bb      	str	r3, [r7, #24]
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	085b      	lsrs	r3, r3, #1
 800fed0:	69ba      	ldr	r2, [r7, #24]
 800fed2:	4413      	add	r3, r2
 800fed4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	899b      	ldrh	r3, [r3, #12]
 800fede:	4619      	mov	r1, r3
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fee6:	4413      	add	r3, r2
 800fee8:	4619      	mov	r1, r3
 800feea:	68f8      	ldr	r0, [r7, #12]
 800feec:	f7ff fe3c 	bl	800fb68 <move_window>
 800fef0:	4603      	mov	r3, r0
 800fef2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fef4:	7ffb      	ldrb	r3, [r7, #31]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	f040 80d4 	bne.w	80100a4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	1c5a      	adds	r2, r3, #1
 800ff06:	61ba      	str	r2, [r7, #24]
 800ff08:	68fa      	ldr	r2, [r7, #12]
 800ff0a:	8992      	ldrh	r2, [r2, #12]
 800ff0c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff10:	fb00 f202 	mul.w	r2, r0, r2
 800ff14:	1a9b      	subs	r3, r3, r2
 800ff16:	440b      	add	r3, r1
 800ff18:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	f003 0301 	and.w	r3, r3, #1
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00d      	beq.n	800ff40 <put_fat+0xb8>
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	b25b      	sxtb	r3, r3
 800ff2a:	f003 030f 	and.w	r3, r3, #15
 800ff2e:	b25a      	sxtb	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	011b      	lsls	r3, r3, #4
 800ff36:	b25b      	sxtb	r3, r3
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	b25b      	sxtb	r3, r3
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	e001      	b.n	800ff44 <put_fat+0xbc>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	697a      	ldr	r2, [r7, #20]
 800ff46:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	899b      	ldrh	r3, [r3, #12]
 800ff56:	4619      	mov	r1, r3
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff5e:	4413      	add	r3, r2
 800ff60:	4619      	mov	r1, r3
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f7ff fe00 	bl	800fb68 <move_window>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff6c:	7ffb      	ldrb	r3, [r7, #31]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f040 809a 	bne.w	80100a8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	899b      	ldrh	r3, [r3, #12]
 800ff7e:	461a      	mov	r2, r3
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff86:	fb00 f202 	mul.w	r2, r0, r2
 800ff8a:	1a9b      	subs	r3, r3, r2
 800ff8c:	440b      	add	r3, r1
 800ff8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	f003 0301 	and.w	r3, r3, #1
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d003      	beq.n	800ffa2 <put_fat+0x11a>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	091b      	lsrs	r3, r3, #4
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	e00e      	b.n	800ffc0 <put_fat+0x138>
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	b25b      	sxtb	r3, r3
 800ffa8:	f023 030f 	bic.w	r3, r3, #15
 800ffac:	b25a      	sxtb	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	0a1b      	lsrs	r3, r3, #8
 800ffb2:	b25b      	sxtb	r3, r3
 800ffb4:	f003 030f 	and.w	r3, r3, #15
 800ffb8:	b25b      	sxtb	r3, r3
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	b25b      	sxtb	r3, r3
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	697a      	ldr	r2, [r7, #20]
 800ffc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	70da      	strb	r2, [r3, #3]
			break;
 800ffca:	e072      	b.n	80100b2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	899b      	ldrh	r3, [r3, #12]
 800ffd4:	085b      	lsrs	r3, r3, #1
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	4619      	mov	r1, r3
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffe0:	4413      	add	r3, r2
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	68f8      	ldr	r0, [r7, #12]
 800ffe6:	f7ff fdbf 	bl	800fb68 <move_window>
 800ffea:	4603      	mov	r3, r0
 800ffec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ffee:	7ffb      	ldrb	r3, [r7, #31]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d15b      	bne.n	80100ac <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	005b      	lsls	r3, r3, #1
 800fffe:	68fa      	ldr	r2, [r7, #12]
 8010000:	8992      	ldrh	r2, [r2, #12]
 8010002:	fbb3 f0f2 	udiv	r0, r3, r2
 8010006:	fb00 f202 	mul.w	r2, r0, r2
 801000a:	1a9b      	subs	r3, r3, r2
 801000c:	440b      	add	r3, r1
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	b292      	uxth	r2, r2
 8010012:	4611      	mov	r1, r2
 8010014:	4618      	mov	r0, r3
 8010016:	f7ff fb32 	bl	800f67e <st_word>
			fs->wflag = 1;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2201      	movs	r2, #1
 801001e:	70da      	strb	r2, [r3, #3]
			break;
 8010020:	e047      	b.n	80100b2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	899b      	ldrh	r3, [r3, #12]
 801002a:	089b      	lsrs	r3, r3, #2
 801002c:	b29b      	uxth	r3, r3
 801002e:	4619      	mov	r1, r3
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	fbb3 f3f1 	udiv	r3, r3, r1
 8010036:	4413      	add	r3, r2
 8010038:	4619      	mov	r1, r3
 801003a:	68f8      	ldr	r0, [r7, #12]
 801003c:	f7ff fd94 	bl	800fb68 <move_window>
 8010040:	4603      	mov	r3, r0
 8010042:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010044:	7ffb      	ldrb	r3, [r7, #31]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d132      	bne.n	80100b0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	68fa      	ldr	r2, [r7, #12]
 801005c:	8992      	ldrh	r2, [r2, #12]
 801005e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010062:	fb00 f202 	mul.w	r2, r0, r2
 8010066:	1a9b      	subs	r3, r3, r2
 8010068:	440b      	add	r3, r1
 801006a:	4618      	mov	r0, r3
 801006c:	f7ff fae4 	bl	800f638 <ld_dword>
 8010070:	4603      	mov	r3, r0
 8010072:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010076:	4323      	orrs	r3, r4
 8010078:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	68fa      	ldr	r2, [r7, #12]
 8010086:	8992      	ldrh	r2, [r2, #12]
 8010088:	fbb3 f0f2 	udiv	r0, r3, r2
 801008c:	fb00 f202 	mul.w	r2, r0, r2
 8010090:	1a9b      	subs	r3, r3, r2
 8010092:	440b      	add	r3, r1
 8010094:	6879      	ldr	r1, [r7, #4]
 8010096:	4618      	mov	r0, r3
 8010098:	f7ff fb0c 	bl	800f6b4 <st_dword>
			fs->wflag = 1;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2201      	movs	r2, #1
 80100a0:	70da      	strb	r2, [r3, #3]
			break;
 80100a2:	e006      	b.n	80100b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80100a4:	bf00      	nop
 80100a6:	e004      	b.n	80100b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80100a8:	bf00      	nop
 80100aa:	e002      	b.n	80100b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80100ac:	bf00      	nop
 80100ae:	e000      	b.n	80100b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80100b0:	bf00      	nop
		}
	}
	return res;
 80100b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3724      	adds	r7, #36	@ 0x24
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd90      	pop	{r4, r7, pc}

080100bc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b088      	sub	sp, #32
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80100c8:	2300      	movs	r3, #0
 80100ca:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d904      	bls.n	80100e2 <remove_chain+0x26>
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	6a1b      	ldr	r3, [r3, #32]
 80100dc:	68ba      	ldr	r2, [r7, #8]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d301      	bcc.n	80100e6 <remove_chain+0x2a>
 80100e2:	2302      	movs	r3, #2
 80100e4:	e04b      	b.n	801017e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d00c      	beq.n	8010106 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80100ec:	f04f 32ff 	mov.w	r2, #4294967295
 80100f0:	6879      	ldr	r1, [r7, #4]
 80100f2:	69b8      	ldr	r0, [r7, #24]
 80100f4:	f7ff fec8 	bl	800fe88 <put_fat>
 80100f8:	4603      	mov	r3, r0
 80100fa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80100fc:	7ffb      	ldrb	r3, [r7, #31]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d001      	beq.n	8010106 <remove_chain+0x4a>
 8010102:	7ffb      	ldrb	r3, [r7, #31]
 8010104:	e03b      	b.n	801017e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010106:	68b9      	ldr	r1, [r7, #8]
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f7ff fdea 	bl	800fce2 <get_fat>
 801010e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d031      	beq.n	801017a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	2b01      	cmp	r3, #1
 801011a:	d101      	bne.n	8010120 <remove_chain+0x64>
 801011c:	2302      	movs	r3, #2
 801011e:	e02e      	b.n	801017e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010126:	d101      	bne.n	801012c <remove_chain+0x70>
 8010128:	2301      	movs	r3, #1
 801012a:	e028      	b.n	801017e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801012c:	2200      	movs	r2, #0
 801012e:	68b9      	ldr	r1, [r7, #8]
 8010130:	69b8      	ldr	r0, [r7, #24]
 8010132:	f7ff fea9 	bl	800fe88 <put_fat>
 8010136:	4603      	mov	r3, r0
 8010138:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801013a:	7ffb      	ldrb	r3, [r7, #31]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d001      	beq.n	8010144 <remove_chain+0x88>
 8010140:	7ffb      	ldrb	r3, [r7, #31]
 8010142:	e01c      	b.n	801017e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	699a      	ldr	r2, [r3, #24]
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	6a1b      	ldr	r3, [r3, #32]
 801014c:	3b02      	subs	r3, #2
 801014e:	429a      	cmp	r2, r3
 8010150:	d20b      	bcs.n	801016a <remove_chain+0xae>
			fs->free_clst++;
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	699b      	ldr	r3, [r3, #24]
 8010156:	1c5a      	adds	r2, r3, #1
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801015c:	69bb      	ldr	r3, [r7, #24]
 801015e:	791b      	ldrb	r3, [r3, #4]
 8010160:	f043 0301 	orr.w	r3, r3, #1
 8010164:	b2da      	uxtb	r2, r3
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801016e:	69bb      	ldr	r3, [r7, #24]
 8010170:	6a1b      	ldr	r3, [r3, #32]
 8010172:	68ba      	ldr	r2, [r7, #8]
 8010174:	429a      	cmp	r2, r3
 8010176:	d3c6      	bcc.n	8010106 <remove_chain+0x4a>
 8010178:	e000      	b.n	801017c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801017a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801017c:	2300      	movs	r3, #0
}
 801017e:	4618      	mov	r0, r3
 8010180:	3720      	adds	r7, #32
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}

08010186 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010186:	b580      	push	{r7, lr}
 8010188:	b088      	sub	sp, #32
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
 801018e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10d      	bne.n	80101b8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	695b      	ldr	r3, [r3, #20]
 80101a0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d004      	beq.n	80101b2 <create_chain+0x2c>
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	6a1b      	ldr	r3, [r3, #32]
 80101ac:	69ba      	ldr	r2, [r7, #24]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d31b      	bcc.n	80101ea <create_chain+0x64>
 80101b2:	2301      	movs	r3, #1
 80101b4:	61bb      	str	r3, [r7, #24]
 80101b6:	e018      	b.n	80101ea <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80101b8:	6839      	ldr	r1, [r7, #0]
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7ff fd91 	bl	800fce2 <get_fat>
 80101c0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d801      	bhi.n	80101cc <create_chain+0x46>
 80101c8:	2301      	movs	r3, #1
 80101ca:	e070      	b.n	80102ae <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d2:	d101      	bne.n	80101d8 <create_chain+0x52>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	e06a      	b.n	80102ae <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	6a1b      	ldr	r3, [r3, #32]
 80101dc:	68fa      	ldr	r2, [r7, #12]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d201      	bcs.n	80101e6 <create_chain+0x60>
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	e063      	b.n	80102ae <create_chain+0x128>
		scl = clst;
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	3301      	adds	r3, #1
 80101f2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	6a1b      	ldr	r3, [r3, #32]
 80101f8:	69fa      	ldr	r2, [r7, #28]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d307      	bcc.n	801020e <create_chain+0x88>
				ncl = 2;
 80101fe:	2302      	movs	r3, #2
 8010200:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010202:	69fa      	ldr	r2, [r7, #28]
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	429a      	cmp	r2, r3
 8010208:	d901      	bls.n	801020e <create_chain+0x88>
 801020a:	2300      	movs	r3, #0
 801020c:	e04f      	b.n	80102ae <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801020e:	69f9      	ldr	r1, [r7, #28]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7ff fd66 	bl	800fce2 <get_fat>
 8010216:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d00e      	beq.n	801023c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d003      	beq.n	801022c <create_chain+0xa6>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801022a:	d101      	bne.n	8010230 <create_chain+0xaa>
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	e03e      	b.n	80102ae <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010230:	69fa      	ldr	r2, [r7, #28]
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	429a      	cmp	r2, r3
 8010236:	d1da      	bne.n	80101ee <create_chain+0x68>
 8010238:	2300      	movs	r3, #0
 801023a:	e038      	b.n	80102ae <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801023c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801023e:	f04f 32ff 	mov.w	r2, #4294967295
 8010242:	69f9      	ldr	r1, [r7, #28]
 8010244:	6938      	ldr	r0, [r7, #16]
 8010246:	f7ff fe1f 	bl	800fe88 <put_fat>
 801024a:	4603      	mov	r3, r0
 801024c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801024e:	7dfb      	ldrb	r3, [r7, #23]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d109      	bne.n	8010268 <create_chain+0xe2>
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d006      	beq.n	8010268 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801025a:	69fa      	ldr	r2, [r7, #28]
 801025c:	6839      	ldr	r1, [r7, #0]
 801025e:	6938      	ldr	r0, [r7, #16]
 8010260:	f7ff fe12 	bl	800fe88 <put_fat>
 8010264:	4603      	mov	r3, r0
 8010266:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010268:	7dfb      	ldrb	r3, [r7, #23]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d116      	bne.n	801029c <create_chain+0x116>
		fs->last_clst = ncl;
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	69fa      	ldr	r2, [r7, #28]
 8010272:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	699a      	ldr	r2, [r3, #24]
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	6a1b      	ldr	r3, [r3, #32]
 801027c:	3b02      	subs	r3, #2
 801027e:	429a      	cmp	r2, r3
 8010280:	d804      	bhi.n	801028c <create_chain+0x106>
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	699b      	ldr	r3, [r3, #24]
 8010286:	1e5a      	subs	r2, r3, #1
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	791b      	ldrb	r3, [r3, #4]
 8010290:	f043 0301 	orr.w	r3, r3, #1
 8010294:	b2da      	uxtb	r2, r3
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	711a      	strb	r2, [r3, #4]
 801029a:	e007      	b.n	80102ac <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801029c:	7dfb      	ldrb	r3, [r7, #23]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d102      	bne.n	80102a8 <create_chain+0x122>
 80102a2:	f04f 33ff 	mov.w	r3, #4294967295
 80102a6:	e000      	b.n	80102aa <create_chain+0x124>
 80102a8:	2301      	movs	r3, #1
 80102aa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80102ac:	69fb      	ldr	r3, [r7, #28]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3720      	adds	r7, #32
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80102b6:	b480      	push	{r7}
 80102b8:	b087      	sub	sp, #28
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ca:	3304      	adds	r3, #4
 80102cc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	899b      	ldrh	r3, [r3, #12]
 80102d2:	461a      	mov	r2, r3
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80102da:	68fa      	ldr	r2, [r7, #12]
 80102dc:	8952      	ldrh	r2, [r2, #10]
 80102de:	fbb3 f3f2 	udiv	r3, r3, r2
 80102e2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	1d1a      	adds	r2, r3, #4
 80102e8:	613a      	str	r2, [r7, #16]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d101      	bne.n	80102f8 <clmt_clust+0x42>
 80102f4:	2300      	movs	r3, #0
 80102f6:	e010      	b.n	801031a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80102f8:	697a      	ldr	r2, [r7, #20]
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d307      	bcc.n	8010310 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010300:	697a      	ldr	r2, [r7, #20]
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	1ad3      	subs	r3, r2, r3
 8010306:	617b      	str	r3, [r7, #20]
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	3304      	adds	r3, #4
 801030c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801030e:	e7e9      	b.n	80102e4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010310:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	4413      	add	r3, r2
}
 801031a:	4618      	mov	r0, r3
 801031c:	371c      	adds	r7, #28
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b086      	sub	sp, #24
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
 801032e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801033c:	d204      	bcs.n	8010348 <dir_sdi+0x22>
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	f003 031f 	and.w	r3, r3, #31
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010348:	2302      	movs	r3, #2
 801034a:	e071      	b.n	8010430 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	683a      	ldr	r2, [r7, #0]
 8010350:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	689b      	ldr	r3, [r3, #8]
 8010356:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d106      	bne.n	801036c <dir_sdi+0x46>
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	2b02      	cmp	r3, #2
 8010364:	d902      	bls.n	801036c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801036a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10c      	bne.n	801038c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	095b      	lsrs	r3, r3, #5
 8010376:	693a      	ldr	r2, [r7, #16]
 8010378:	8912      	ldrh	r2, [r2, #8]
 801037a:	4293      	cmp	r3, r2
 801037c:	d301      	bcc.n	8010382 <dir_sdi+0x5c>
 801037e:	2302      	movs	r3, #2
 8010380:	e056      	b.n	8010430 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	61da      	str	r2, [r3, #28]
 801038a:	e02d      	b.n	80103e8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	895b      	ldrh	r3, [r3, #10]
 8010390:	461a      	mov	r2, r3
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	899b      	ldrh	r3, [r3, #12]
 8010396:	fb02 f303 	mul.w	r3, r2, r3
 801039a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801039c:	e019      	b.n	80103d2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6979      	ldr	r1, [r7, #20]
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7ff fc9d 	bl	800fce2 <get_fat>
 80103a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103b0:	d101      	bne.n	80103b6 <dir_sdi+0x90>
 80103b2:	2301      	movs	r3, #1
 80103b4:	e03c      	b.n	8010430 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	d904      	bls.n	80103c6 <dir_sdi+0xa0>
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	6a1b      	ldr	r3, [r3, #32]
 80103c0:	697a      	ldr	r2, [r7, #20]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d301      	bcc.n	80103ca <dir_sdi+0xa4>
 80103c6:	2302      	movs	r3, #2
 80103c8:	e032      	b.n	8010430 <dir_sdi+0x10a>
			ofs -= csz;
 80103ca:	683a      	ldr	r2, [r7, #0]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	1ad3      	subs	r3, r2, r3
 80103d0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80103d2:	683a      	ldr	r2, [r7, #0]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d2e1      	bcs.n	801039e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80103da:	6979      	ldr	r1, [r7, #20]
 80103dc:	6938      	ldr	r0, [r7, #16]
 80103de:	f7ff fc61 	bl	800fca4 <clust2sect>
 80103e2:	4602      	mov	r2, r0
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	697a      	ldr	r2, [r7, #20]
 80103ec:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	69db      	ldr	r3, [r3, #28]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d101      	bne.n	80103fa <dir_sdi+0xd4>
 80103f6:	2302      	movs	r3, #2
 80103f8:	e01a      	b.n	8010430 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	69da      	ldr	r2, [r3, #28]
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	899b      	ldrh	r3, [r3, #12]
 8010402:	4619      	mov	r1, r3
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	fbb3 f3f1 	udiv	r3, r3, r1
 801040a:	441a      	add	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	899b      	ldrh	r3, [r3, #12]
 801041a:	461a      	mov	r2, r3
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010422:	fb00 f202 	mul.w	r2, r0, r2
 8010426:	1a9b      	subs	r3, r3, r2
 8010428:	18ca      	adds	r2, r1, r3
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801042e:	2300      	movs	r3, #0
}
 8010430:	4618      	mov	r0, r3
 8010432:	3718      	adds	r7, #24
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	695b      	ldr	r3, [r3, #20]
 801044c:	3320      	adds	r3, #32
 801044e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	69db      	ldr	r3, [r3, #28]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d003      	beq.n	8010460 <dir_next+0x28>
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801045e:	d301      	bcc.n	8010464 <dir_next+0x2c>
 8010460:	2304      	movs	r3, #4
 8010462:	e0bb      	b.n	80105dc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	899b      	ldrh	r3, [r3, #12]
 8010468:	461a      	mov	r2, r3
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010470:	fb01 f202 	mul.w	r2, r1, r2
 8010474:	1a9b      	subs	r3, r3, r2
 8010476:	2b00      	cmp	r3, #0
 8010478:	f040 809d 	bne.w	80105b6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	69db      	ldr	r3, [r3, #28]
 8010480:	1c5a      	adds	r2, r3, #1
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	699b      	ldr	r3, [r3, #24]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d10b      	bne.n	80104a6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	095b      	lsrs	r3, r3, #5
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	8912      	ldrh	r2, [r2, #8]
 8010496:	4293      	cmp	r3, r2
 8010498:	f0c0 808d 	bcc.w	80105b6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	61da      	str	r2, [r3, #28]
 80104a2:	2304      	movs	r3, #4
 80104a4:	e09a      	b.n	80105dc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	899b      	ldrh	r3, [r3, #12]
 80104aa:	461a      	mov	r2, r3
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80104b2:	68fa      	ldr	r2, [r7, #12]
 80104b4:	8952      	ldrh	r2, [r2, #10]
 80104b6:	3a01      	subs	r2, #1
 80104b8:	4013      	ands	r3, r2
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d17b      	bne.n	80105b6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	699b      	ldr	r3, [r3, #24]
 80104c4:	4619      	mov	r1, r3
 80104c6:	4610      	mov	r0, r2
 80104c8:	f7ff fc0b 	bl	800fce2 <get_fat>
 80104cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d801      	bhi.n	80104d8 <dir_next+0xa0>
 80104d4:	2302      	movs	r3, #2
 80104d6:	e081      	b.n	80105dc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104de:	d101      	bne.n	80104e4 <dir_next+0xac>
 80104e0:	2301      	movs	r3, #1
 80104e2:	e07b      	b.n	80105dc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6a1b      	ldr	r3, [r3, #32]
 80104e8:	697a      	ldr	r2, [r7, #20]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d359      	bcc.n	80105a2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d104      	bne.n	80104fe <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	61da      	str	r2, [r3, #28]
 80104fa:	2304      	movs	r3, #4
 80104fc:	e06e      	b.n	80105dc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	699b      	ldr	r3, [r3, #24]
 8010504:	4619      	mov	r1, r3
 8010506:	4610      	mov	r0, r2
 8010508:	f7ff fe3d 	bl	8010186 <create_chain>
 801050c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d101      	bne.n	8010518 <dir_next+0xe0>
 8010514:	2307      	movs	r3, #7
 8010516:	e061      	b.n	80105dc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	2b01      	cmp	r3, #1
 801051c:	d101      	bne.n	8010522 <dir_next+0xea>
 801051e:	2302      	movs	r3, #2
 8010520:	e05c      	b.n	80105dc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010528:	d101      	bne.n	801052e <dir_next+0xf6>
 801052a:	2301      	movs	r3, #1
 801052c:	e056      	b.n	80105dc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801052e:	68f8      	ldr	r0, [r7, #12]
 8010530:	f7ff fad6 	bl	800fae0 <sync_window>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d001      	beq.n	801053e <dir_next+0x106>
 801053a:	2301      	movs	r3, #1
 801053c:	e04e      	b.n	80105dc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	899b      	ldrh	r3, [r3, #12]
 8010548:	461a      	mov	r2, r3
 801054a:	2100      	movs	r1, #0
 801054c:	f7ff f8ff 	bl	800f74e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010550:	2300      	movs	r3, #0
 8010552:	613b      	str	r3, [r7, #16]
 8010554:	6979      	ldr	r1, [r7, #20]
 8010556:	68f8      	ldr	r0, [r7, #12]
 8010558:	f7ff fba4 	bl	800fca4 <clust2sect>
 801055c:	4602      	mov	r2, r0
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	639a      	str	r2, [r3, #56]	@ 0x38
 8010562:	e012      	b.n	801058a <dir_next+0x152>
						fs->wflag = 1;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	2201      	movs	r2, #1
 8010568:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801056a:	68f8      	ldr	r0, [r7, #12]
 801056c:	f7ff fab8 	bl	800fae0 <sync_window>
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <dir_next+0x142>
 8010576:	2301      	movs	r3, #1
 8010578:	e030      	b.n	80105dc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	3301      	adds	r3, #1
 801057e:	613b      	str	r3, [r7, #16]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010584:	1c5a      	adds	r2, r3, #1
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	639a      	str	r2, [r3, #56]	@ 0x38
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	895b      	ldrh	r3, [r3, #10]
 801058e:	461a      	mov	r2, r3
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	4293      	cmp	r3, r2
 8010594:	d3e6      	bcc.n	8010564 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	1ad2      	subs	r2, r2, r3
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	697a      	ldr	r2, [r7, #20]
 80105a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80105a8:	6979      	ldr	r1, [r7, #20]
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	f7ff fb7a 	bl	800fca4 <clust2sect>
 80105b0:	4602      	mov	r2, r0
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	68ba      	ldr	r2, [r7, #8]
 80105ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	899b      	ldrh	r3, [r3, #12]
 80105c6:	461a      	mov	r2, r3
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80105ce:	fb00 f202 	mul.w	r2, r0, r2
 80105d2:	1a9b      	subs	r3, r3, r2
 80105d4:	18ca      	adds	r2, r1, r3
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80105da:	2300      	movs	r3, #0
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3718      	adds	r7, #24
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80105f4:	2100      	movs	r1, #0
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7ff fe95 	bl	8010326 <dir_sdi>
 80105fc:	4603      	mov	r3, r0
 80105fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010600:	7dfb      	ldrb	r3, [r7, #23]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d12b      	bne.n	801065e <dir_alloc+0x7a>
		n = 0;
 8010606:	2300      	movs	r3, #0
 8010608:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	69db      	ldr	r3, [r3, #28]
 801060e:	4619      	mov	r1, r3
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f7ff faa9 	bl	800fb68 <move_window>
 8010616:	4603      	mov	r3, r0
 8010618:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801061a:	7dfb      	ldrb	r3, [r7, #23]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d11d      	bne.n	801065c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6a1b      	ldr	r3, [r3, #32]
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	2be5      	cmp	r3, #229	@ 0xe5
 8010628:	d004      	beq.n	8010634 <dir_alloc+0x50>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6a1b      	ldr	r3, [r3, #32]
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d107      	bne.n	8010644 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	3301      	adds	r3, #1
 8010638:	613b      	str	r3, [r7, #16]
 801063a:	693a      	ldr	r2, [r7, #16]
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	429a      	cmp	r2, r3
 8010640:	d102      	bne.n	8010648 <dir_alloc+0x64>
 8010642:	e00c      	b.n	801065e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010644:	2300      	movs	r3, #0
 8010646:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010648:	2101      	movs	r1, #1
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f7ff fef4 	bl	8010438 <dir_next>
 8010650:	4603      	mov	r3, r0
 8010652:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010654:	7dfb      	ldrb	r3, [r7, #23]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d0d7      	beq.n	801060a <dir_alloc+0x26>
 801065a:	e000      	b.n	801065e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801065c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801065e:	7dfb      	ldrb	r3, [r7, #23]
 8010660:	2b04      	cmp	r3, #4
 8010662:	d101      	bne.n	8010668 <dir_alloc+0x84>
 8010664:	2307      	movs	r3, #7
 8010666:	75fb      	strb	r3, [r7, #23]
	return res;
 8010668:	7dfb      	ldrb	r3, [r7, #23]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3718      	adds	r7, #24
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b084      	sub	sp, #16
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
 801067a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	331a      	adds	r3, #26
 8010680:	4618      	mov	r0, r3
 8010682:	f7fe ffc1 	bl	800f608 <ld_word>
 8010686:	4603      	mov	r3, r0
 8010688:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	2b03      	cmp	r3, #3
 8010690:	d109      	bne.n	80106a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	3314      	adds	r3, #20
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe ffb6 	bl	800f608 <ld_word>
 801069c:	4603      	mov	r3, r0
 801069e:	041b      	lsls	r3, r3, #16
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	4313      	orrs	r3, r2
 80106a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80106a6:	68fb      	ldr	r3, [r7, #12]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3710      	adds	r7, #16
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	331a      	adds	r3, #26
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	b292      	uxth	r2, r2
 80106c4:	4611      	mov	r1, r2
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fe ffd9 	bl	800f67e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	2b03      	cmp	r3, #3
 80106d2:	d109      	bne.n	80106e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	f103 0214 	add.w	r2, r3, #20
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	0c1b      	lsrs	r3, r3, #16
 80106de:	b29b      	uxth	r3, r3
 80106e0:	4619      	mov	r1, r3
 80106e2:	4610      	mov	r0, r2
 80106e4:	f7fe ffcb 	bl	800f67e <st_word>
	}
}
 80106e8:	bf00      	nop
 80106ea:	3710      	adds	r7, #16
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80106f0:	b590      	push	{r4, r7, lr}
 80106f2:	b087      	sub	sp, #28
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	331a      	adds	r3, #26
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fe ff82 	bl	800f608 <ld_word>
 8010704:	4603      	mov	r3, r0
 8010706:	2b00      	cmp	r3, #0
 8010708:	d001      	beq.n	801070e <cmp_lfn+0x1e>
 801070a:	2300      	movs	r3, #0
 801070c:	e059      	b.n	80107c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010716:	1e5a      	subs	r2, r3, #1
 8010718:	4613      	mov	r3, r2
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	4413      	add	r3, r2
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	4413      	add	r3, r2
 8010722:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010724:	2301      	movs	r3, #1
 8010726:	81fb      	strh	r3, [r7, #14]
 8010728:	2300      	movs	r3, #0
 801072a:	613b      	str	r3, [r7, #16]
 801072c:	e033      	b.n	8010796 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801072e:	4a27      	ldr	r2, [pc, #156]	@ (80107cc <cmp_lfn+0xdc>)
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	4413      	add	r3, r2
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	4413      	add	r3, r2
 801073c:	4618      	mov	r0, r3
 801073e:	f7fe ff63 	bl	800f608 <ld_word>
 8010742:	4603      	mov	r3, r0
 8010744:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010746:	89fb      	ldrh	r3, [r7, #14]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d01a      	beq.n	8010782 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	2bfe      	cmp	r3, #254	@ 0xfe
 8010750:	d812      	bhi.n	8010778 <cmp_lfn+0x88>
 8010752:	89bb      	ldrh	r3, [r7, #12]
 8010754:	4618      	mov	r0, r3
 8010756:	f002 fa9b 	bl	8012c90 <ff_wtoupper>
 801075a:	4603      	mov	r3, r0
 801075c:	461c      	mov	r4, r3
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	1c5a      	adds	r2, r3, #1
 8010762:	617a      	str	r2, [r7, #20]
 8010764:	005b      	lsls	r3, r3, #1
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	4413      	add	r3, r2
 801076a:	881b      	ldrh	r3, [r3, #0]
 801076c:	4618      	mov	r0, r3
 801076e:	f002 fa8f 	bl	8012c90 <ff_wtoupper>
 8010772:	4603      	mov	r3, r0
 8010774:	429c      	cmp	r4, r3
 8010776:	d001      	beq.n	801077c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010778:	2300      	movs	r3, #0
 801077a:	e022      	b.n	80107c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 801077c:	89bb      	ldrh	r3, [r7, #12]
 801077e:	81fb      	strh	r3, [r7, #14]
 8010780:	e006      	b.n	8010790 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010782:	89bb      	ldrh	r3, [r7, #12]
 8010784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010788:	4293      	cmp	r3, r2
 801078a:	d001      	beq.n	8010790 <cmp_lfn+0xa0>
 801078c:	2300      	movs	r3, #0
 801078e:	e018      	b.n	80107c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	3301      	adds	r3, #1
 8010794:	613b      	str	r3, [r7, #16]
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	2b0c      	cmp	r3, #12
 801079a:	d9c8      	bls.n	801072e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00b      	beq.n	80107c0 <cmp_lfn+0xd0>
 80107a8:	89fb      	ldrh	r3, [r7, #14]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d008      	beq.n	80107c0 <cmp_lfn+0xd0>
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	005b      	lsls	r3, r3, #1
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	4413      	add	r3, r2
 80107b6:	881b      	ldrh	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d001      	beq.n	80107c0 <cmp_lfn+0xd0>
 80107bc:	2300      	movs	r3, #0
 80107be:	e000      	b.n	80107c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80107c0:	2301      	movs	r3, #1
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	371c      	adds	r7, #28
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd90      	pop	{r4, r7, pc}
 80107ca:	bf00      	nop
 80107cc:	08013238 	.word	0x08013238

080107d0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b088      	sub	sp, #32
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	4611      	mov	r1, r2
 80107dc:	461a      	mov	r2, r3
 80107de:	460b      	mov	r3, r1
 80107e0:	71fb      	strb	r3, [r7, #7]
 80107e2:	4613      	mov	r3, r2
 80107e4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	330d      	adds	r3, #13
 80107ea:	79ba      	ldrb	r2, [r7, #6]
 80107ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	330b      	adds	r3, #11
 80107f2:	220f      	movs	r2, #15
 80107f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	330c      	adds	r3, #12
 80107fa:	2200      	movs	r2, #0
 80107fc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	331a      	adds	r3, #26
 8010802:	2100      	movs	r1, #0
 8010804:	4618      	mov	r0, r3
 8010806:	f7fe ff3a 	bl	800f67e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801080a:	79fb      	ldrb	r3, [r7, #7]
 801080c:	1e5a      	subs	r2, r3, #1
 801080e:	4613      	mov	r3, r2
 8010810:	005b      	lsls	r3, r3, #1
 8010812:	4413      	add	r3, r2
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	4413      	add	r3, r2
 8010818:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801081a:	2300      	movs	r3, #0
 801081c:	82fb      	strh	r3, [r7, #22]
 801081e:	2300      	movs	r3, #0
 8010820:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010822:	8afb      	ldrh	r3, [r7, #22]
 8010824:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010828:	4293      	cmp	r3, r2
 801082a:	d007      	beq.n	801083c <put_lfn+0x6c>
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	1c5a      	adds	r2, r3, #1
 8010830:	61fa      	str	r2, [r7, #28]
 8010832:	005b      	lsls	r3, r3, #1
 8010834:	68fa      	ldr	r2, [r7, #12]
 8010836:	4413      	add	r3, r2
 8010838:	881b      	ldrh	r3, [r3, #0]
 801083a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801083c:	4a17      	ldr	r2, [pc, #92]	@ (801089c <put_lfn+0xcc>)
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	4413      	add	r3, r2
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	461a      	mov	r2, r3
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	4413      	add	r3, r2
 801084a:	8afa      	ldrh	r2, [r7, #22]
 801084c:	4611      	mov	r1, r2
 801084e:	4618      	mov	r0, r3
 8010850:	f7fe ff15 	bl	800f67e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010854:	8afb      	ldrh	r3, [r7, #22]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d102      	bne.n	8010860 <put_lfn+0x90>
 801085a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801085e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	3301      	adds	r3, #1
 8010864:	61bb      	str	r3, [r7, #24]
 8010866:	69bb      	ldr	r3, [r7, #24]
 8010868:	2b0c      	cmp	r3, #12
 801086a:	d9da      	bls.n	8010822 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801086c:	8afb      	ldrh	r3, [r7, #22]
 801086e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010872:	4293      	cmp	r3, r2
 8010874:	d006      	beq.n	8010884 <put_lfn+0xb4>
 8010876:	69fb      	ldr	r3, [r7, #28]
 8010878:	005b      	lsls	r3, r3, #1
 801087a:	68fa      	ldr	r2, [r7, #12]
 801087c:	4413      	add	r3, r2
 801087e:	881b      	ldrh	r3, [r3, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d103      	bne.n	801088c <put_lfn+0xbc>
 8010884:	79fb      	ldrb	r3, [r7, #7]
 8010886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801088a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	79fa      	ldrb	r2, [r7, #7]
 8010890:	701a      	strb	r2, [r3, #0]
}
 8010892:	bf00      	nop
 8010894:	3720      	adds	r7, #32
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	08013238 	.word	0x08013238

080108a0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b08c      	sub	sp, #48	@ 0x30
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	607a      	str	r2, [r7, #4]
 80108ac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80108ae:	220b      	movs	r2, #11
 80108b0:	68b9      	ldr	r1, [r7, #8]
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f7fe ff2a 	bl	800f70c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	2b05      	cmp	r3, #5
 80108bc:	d929      	bls.n	8010912 <gen_numname+0x72>
		sr = seq;
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80108c2:	e020      	b.n	8010906 <gen_numname+0x66>
			wc = *lfn++;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	1c9a      	adds	r2, r3, #2
 80108c8:	607a      	str	r2, [r7, #4]
 80108ca:	881b      	ldrh	r3, [r3, #0]
 80108cc:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80108ce:	2300      	movs	r3, #0
 80108d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108d2:	e015      	b.n	8010900 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	005a      	lsls	r2, r3, #1
 80108d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	4413      	add	r3, r2
 80108e0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80108e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d003      	beq.n	80108fa <gen_numname+0x5a>
 80108f2:	69fa      	ldr	r2, [r7, #28]
 80108f4:	4b30      	ldr	r3, [pc, #192]	@ (80109b8 <gen_numname+0x118>)
 80108f6:	4053      	eors	r3, r2
 80108f8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80108fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108fc:	3301      	adds	r3, #1
 80108fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010902:	2b0f      	cmp	r3, #15
 8010904:	d9e6      	bls.n	80108d4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d1da      	bne.n	80108c4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8010912:	2307      	movs	r3, #7
 8010914:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	b2db      	uxtb	r3, r3
 801091a:	f003 030f 	and.w	r3, r3, #15
 801091e:	b2db      	uxtb	r3, r3
 8010920:	3330      	adds	r3, #48	@ 0x30
 8010922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8010926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801092a:	2b39      	cmp	r3, #57	@ 0x39
 801092c:	d904      	bls.n	8010938 <gen_numname+0x98>
 801092e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010932:	3307      	adds	r3, #7
 8010934:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8010938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801093a:	1e5a      	subs	r2, r3, #1
 801093c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801093e:	3330      	adds	r3, #48	@ 0x30
 8010940:	443b      	add	r3, r7
 8010942:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010946:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	091b      	lsrs	r3, r3, #4
 801094e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d1df      	bne.n	8010916 <gen_numname+0x76>
	ns[i] = '~';
 8010956:	f107 0214 	add.w	r2, r7, #20
 801095a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801095c:	4413      	add	r3, r2
 801095e:	227e      	movs	r2, #126	@ 0x7e
 8010960:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010962:	2300      	movs	r3, #0
 8010964:	627b      	str	r3, [r7, #36]	@ 0x24
 8010966:	e002      	b.n	801096e <gen_numname+0xce>
 8010968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096a:	3301      	adds	r3, #1
 801096c:	627b      	str	r3, [r7, #36]	@ 0x24
 801096e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010972:	429a      	cmp	r2, r3
 8010974:	d205      	bcs.n	8010982 <gen_numname+0xe2>
 8010976:	68fa      	ldr	r2, [r7, #12]
 8010978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801097a:	4413      	add	r3, r2
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	2b20      	cmp	r3, #32
 8010980:	d1f2      	bne.n	8010968 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010984:	2b07      	cmp	r3, #7
 8010986:	d807      	bhi.n	8010998 <gen_numname+0xf8>
 8010988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801098a:	1c5a      	adds	r2, r3, #1
 801098c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801098e:	3330      	adds	r3, #48	@ 0x30
 8010990:	443b      	add	r3, r7
 8010992:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010996:	e000      	b.n	801099a <gen_numname+0xfa>
 8010998:	2120      	movs	r1, #32
 801099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801099c:	1c5a      	adds	r2, r3, #1
 801099e:	627a      	str	r2, [r7, #36]	@ 0x24
 80109a0:	68fa      	ldr	r2, [r7, #12]
 80109a2:	4413      	add	r3, r2
 80109a4:	460a      	mov	r2, r1
 80109a6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80109a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109aa:	2b07      	cmp	r3, #7
 80109ac:	d9e9      	bls.n	8010982 <gen_numname+0xe2>
}
 80109ae:	bf00      	nop
 80109b0:	bf00      	nop
 80109b2:	3730      	adds	r7, #48	@ 0x30
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	00011021 	.word	0x00011021

080109bc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80109bc:	b480      	push	{r7}
 80109be:	b085      	sub	sp, #20
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80109c4:	2300      	movs	r3, #0
 80109c6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80109c8:	230b      	movs	r3, #11
 80109ca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80109cc:	7bfb      	ldrb	r3, [r7, #15]
 80109ce:	b2da      	uxtb	r2, r3
 80109d0:	0852      	lsrs	r2, r2, #1
 80109d2:	01db      	lsls	r3, r3, #7
 80109d4:	4313      	orrs	r3, r2
 80109d6:	b2da      	uxtb	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	1c59      	adds	r1, r3, #1
 80109dc:	6079      	str	r1, [r7, #4]
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	4413      	add	r3, r2
 80109e2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	3b01      	subs	r3, #1
 80109e8:	60bb      	str	r3, [r7, #8]
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d1ed      	bne.n	80109cc <sum_sfn+0x10>
	return sum;
 80109f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3714      	adds	r7, #20
 80109f6:	46bd      	mov	sp, r7
 80109f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fc:	4770      	bx	lr

080109fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b086      	sub	sp, #24
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f7ff fc89 	bl	8010326 <dir_sdi>
 8010a14:	4603      	mov	r3, r0
 8010a16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010a18:	7dfb      	ldrb	r3, [r7, #23]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d001      	beq.n	8010a22 <dir_find+0x24>
 8010a1e:	7dfb      	ldrb	r3, [r7, #23]
 8010a20:	e0a9      	b.n	8010b76 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010a22:	23ff      	movs	r3, #255	@ 0xff
 8010a24:	753b      	strb	r3, [r7, #20]
 8010a26:	7d3b      	ldrb	r3, [r7, #20]
 8010a28:	757b      	strb	r3, [r7, #21]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a30:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	69db      	ldr	r3, [r3, #28]
 8010a36:	4619      	mov	r1, r3
 8010a38:	6938      	ldr	r0, [r7, #16]
 8010a3a:	f7ff f895 	bl	800fb68 <move_window>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010a42:	7dfb      	ldrb	r3, [r7, #23]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f040 8090 	bne.w	8010b6a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a1b      	ldr	r3, [r3, #32]
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010a52:	7dbb      	ldrb	r3, [r7, #22]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d102      	bne.n	8010a5e <dir_find+0x60>
 8010a58:	2304      	movs	r3, #4
 8010a5a:	75fb      	strb	r3, [r7, #23]
 8010a5c:	e08a      	b.n	8010b74 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6a1b      	ldr	r3, [r3, #32]
 8010a62:	330b      	adds	r3, #11
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010a6a:	73fb      	strb	r3, [r7, #15]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	7bfa      	ldrb	r2, [r7, #15]
 8010a70:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010a72:	7dbb      	ldrb	r3, [r7, #22]
 8010a74:	2be5      	cmp	r3, #229	@ 0xe5
 8010a76:	d007      	beq.n	8010a88 <dir_find+0x8a>
 8010a78:	7bfb      	ldrb	r3, [r7, #15]
 8010a7a:	f003 0308 	and.w	r3, r3, #8
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d009      	beq.n	8010a96 <dir_find+0x98>
 8010a82:	7bfb      	ldrb	r3, [r7, #15]
 8010a84:	2b0f      	cmp	r3, #15
 8010a86:	d006      	beq.n	8010a96 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010a88:	23ff      	movs	r3, #255	@ 0xff
 8010a8a:	757b      	strb	r3, [r7, #21]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a92:	631a      	str	r2, [r3, #48]	@ 0x30
 8010a94:	e05e      	b.n	8010b54 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	2b0f      	cmp	r3, #15
 8010a9a:	d136      	bne.n	8010b0a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d154      	bne.n	8010b54 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010aaa:	7dbb      	ldrb	r3, [r7, #22]
 8010aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d00d      	beq.n	8010ad0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6a1b      	ldr	r3, [r3, #32]
 8010ab8:	7b5b      	ldrb	r3, [r3, #13]
 8010aba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010abc:	7dbb      	ldrb	r3, [r7, #22]
 8010abe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ac2:	75bb      	strb	r3, [r7, #22]
 8010ac4:	7dbb      	ldrb	r3, [r7, #22]
 8010ac6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	695a      	ldr	r2, [r3, #20]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010ad0:	7dba      	ldrb	r2, [r7, #22]
 8010ad2:	7d7b      	ldrb	r3, [r7, #21]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d115      	bne.n	8010b04 <dir_find+0x106>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6a1b      	ldr	r3, [r3, #32]
 8010adc:	330d      	adds	r3, #13
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	7d3a      	ldrb	r2, [r7, #20]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d10e      	bne.n	8010b04 <dir_find+0x106>
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	691a      	ldr	r2, [r3, #16]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6a1b      	ldr	r3, [r3, #32]
 8010aee:	4619      	mov	r1, r3
 8010af0:	4610      	mov	r0, r2
 8010af2:	f7ff fdfd 	bl	80106f0 <cmp_lfn>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d003      	beq.n	8010b04 <dir_find+0x106>
 8010afc:	7d7b      	ldrb	r3, [r7, #21]
 8010afe:	3b01      	subs	r3, #1
 8010b00:	b2db      	uxtb	r3, r3
 8010b02:	e000      	b.n	8010b06 <dir_find+0x108>
 8010b04:	23ff      	movs	r3, #255	@ 0xff
 8010b06:	757b      	strb	r3, [r7, #21]
 8010b08:	e024      	b.n	8010b54 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010b0a:	7d7b      	ldrb	r3, [r7, #21]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d109      	bne.n	8010b24 <dir_find+0x126>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6a1b      	ldr	r3, [r3, #32]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff ff51 	bl	80109bc <sum_sfn>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	7d3b      	ldrb	r3, [r7, #20]
 8010b20:	4293      	cmp	r3, r2
 8010b22:	d024      	beq.n	8010b6e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010b2a:	f003 0301 	and.w	r3, r3, #1
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d10a      	bne.n	8010b48 <dir_find+0x14a>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6a18      	ldr	r0, [r3, #32]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	3324      	adds	r3, #36	@ 0x24
 8010b3a:	220b      	movs	r2, #11
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	f7fe fe21 	bl	800f784 <mem_cmp>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d014      	beq.n	8010b72 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010b48:	23ff      	movs	r3, #255	@ 0xff
 8010b4a:	757b      	strb	r3, [r7, #21]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b52:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010b54:	2100      	movs	r1, #0
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7ff fc6e 	bl	8010438 <dir_next>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010b60:	7dfb      	ldrb	r3, [r7, #23]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	f43f af65 	beq.w	8010a32 <dir_find+0x34>
 8010b68:	e004      	b.n	8010b74 <dir_find+0x176>
		if (res != FR_OK) break;
 8010b6a:	bf00      	nop
 8010b6c:	e002      	b.n	8010b74 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010b6e:	bf00      	nop
 8010b70:	e000      	b.n	8010b74 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010b72:	bf00      	nop

	return res;
 8010b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3718      	adds	r7, #24
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
	...

08010b80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b08c      	sub	sp, #48	@ 0x30
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010b94:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d001      	beq.n	8010ba0 <dir_register+0x20>
 8010b9c:	2306      	movs	r3, #6
 8010b9e:	e0e0      	b.n	8010d62 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ba4:	e002      	b.n	8010bac <dir_register+0x2c>
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba8:	3301      	adds	r3, #1
 8010baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	691a      	ldr	r2, [r3, #16]
 8010bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb2:	005b      	lsls	r3, r3, #1
 8010bb4:	4413      	add	r3, r2
 8010bb6:	881b      	ldrh	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1f4      	bne.n	8010ba6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010bc2:	f107 030c 	add.w	r3, r7, #12
 8010bc6:	220c      	movs	r2, #12
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7fe fd9f 	bl	800f70c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010bce:	7dfb      	ldrb	r3, [r7, #23]
 8010bd0:	f003 0301 	and.w	r3, r3, #1
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d032      	beq.n	8010c3e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2240      	movs	r2, #64	@ 0x40
 8010bdc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010be0:	2301      	movs	r3, #1
 8010be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010be4:	e016      	b.n	8010c14 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8010bec:	69fb      	ldr	r3, [r7, #28]
 8010bee:	691a      	ldr	r2, [r3, #16]
 8010bf0:	f107 010c 	add.w	r1, r7, #12
 8010bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bf6:	f7ff fe53 	bl	80108a0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f7ff feff 	bl	80109fe <dir_find>
 8010c00:	4603      	mov	r3, r0
 8010c02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010c06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d106      	bne.n	8010c1c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c10:	3301      	adds	r3, #1
 8010c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c16:	2b63      	cmp	r3, #99	@ 0x63
 8010c18:	d9e5      	bls.n	8010be6 <dir_register+0x66>
 8010c1a:	e000      	b.n	8010c1e <dir_register+0x9e>
			if (res != FR_OK) break;
 8010c1c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c20:	2b64      	cmp	r3, #100	@ 0x64
 8010c22:	d101      	bne.n	8010c28 <dir_register+0xa8>
 8010c24:	2307      	movs	r3, #7
 8010c26:	e09c      	b.n	8010d62 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010c28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c2c:	2b04      	cmp	r3, #4
 8010c2e:	d002      	beq.n	8010c36 <dir_register+0xb6>
 8010c30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c34:	e095      	b.n	8010d62 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010c36:	7dfa      	ldrb	r2, [r7, #23]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010c3e:	7dfb      	ldrb	r3, [r7, #23]
 8010c40:	f003 0302 	and.w	r3, r3, #2
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d007      	beq.n	8010c58 <dir_register+0xd8>
 8010c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4a:	330c      	adds	r3, #12
 8010c4c:	4a47      	ldr	r2, [pc, #284]	@ (8010d6c <dir_register+0x1ec>)
 8010c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c52:	089b      	lsrs	r3, r3, #2
 8010c54:	3301      	adds	r3, #1
 8010c56:	e000      	b.n	8010c5a <dir_register+0xda>
 8010c58:	2301      	movs	r3, #1
 8010c5a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010c5c:	6a39      	ldr	r1, [r7, #32]
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7ff fcc0 	bl	80105e4 <dir_alloc>
 8010c64:	4603      	mov	r3, r0
 8010c66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d148      	bne.n	8010d04 <dir_register+0x184>
 8010c72:	6a3b      	ldr	r3, [r7, #32]
 8010c74:	3b01      	subs	r3, #1
 8010c76:	623b      	str	r3, [r7, #32]
 8010c78:	6a3b      	ldr	r3, [r7, #32]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d042      	beq.n	8010d04 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	695a      	ldr	r2, [r3, #20]
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	015b      	lsls	r3, r3, #5
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	4619      	mov	r1, r3
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f7ff fb4b 	bl	8010326 <dir_sdi>
 8010c90:	4603      	mov	r3, r0
 8010c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010c96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d132      	bne.n	8010d04 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	3324      	adds	r3, #36	@ 0x24
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7ff fe8a 	bl	80109bc <sum_sfn>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	69db      	ldr	r3, [r3, #28]
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	69f8      	ldr	r0, [r7, #28]
 8010cb4:	f7fe ff58 	bl	800fb68 <move_window>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8010cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d11d      	bne.n	8010d02 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010cc6:	69fb      	ldr	r3, [r7, #28]
 8010cc8:	6918      	ldr	r0, [r3, #16]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6a19      	ldr	r1, [r3, #32]
 8010cce:	6a3b      	ldr	r3, [r7, #32]
 8010cd0:	b2da      	uxtb	r2, r3
 8010cd2:	7efb      	ldrb	r3, [r7, #27]
 8010cd4:	f7ff fd7c 	bl	80107d0 <put_lfn>
				fs->wflag = 1;
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	2201      	movs	r2, #1
 8010cdc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010cde:	2100      	movs	r1, #0
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7ff fba9 	bl	8010438 <dir_next>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010cec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d107      	bne.n	8010d04 <dir_register+0x184>
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	3b01      	subs	r3, #1
 8010cf8:	623b      	str	r3, [r7, #32]
 8010cfa:	6a3b      	ldr	r3, [r7, #32]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d1d5      	bne.n	8010cac <dir_register+0x12c>
 8010d00:	e000      	b.n	8010d04 <dir_register+0x184>
				if (res != FR_OK) break;
 8010d02:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010d04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d128      	bne.n	8010d5e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	69db      	ldr	r3, [r3, #28]
 8010d10:	4619      	mov	r1, r3
 8010d12:	69f8      	ldr	r0, [r7, #28]
 8010d14:	f7fe ff28 	bl	800fb68 <move_window>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d11b      	bne.n	8010d5e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6a1b      	ldr	r3, [r3, #32]
 8010d2a:	2220      	movs	r2, #32
 8010d2c:	2100      	movs	r1, #0
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fe fd0d 	bl	800f74e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6a18      	ldr	r0, [r3, #32]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	3324      	adds	r3, #36	@ 0x24
 8010d3c:	220b      	movs	r2, #11
 8010d3e:	4619      	mov	r1, r3
 8010d40:	f7fe fce4 	bl	800f70c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6a1b      	ldr	r3, [r3, #32]
 8010d4e:	330c      	adds	r3, #12
 8010d50:	f002 0218 	and.w	r2, r2, #24
 8010d54:	b2d2      	uxtb	r2, r2
 8010d56:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3730      	adds	r7, #48	@ 0x30
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	4ec4ec4f 	.word	0x4ec4ec4f

08010d70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b08a      	sub	sp, #40	@ 0x28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	613b      	str	r3, [r7, #16]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	691b      	ldr	r3, [r3, #16]
 8010d86:	60fb      	str	r3, [r7, #12]
 8010d88:	2300      	movs	r3, #0
 8010d8a:	617b      	str	r3, [r7, #20]
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	1c5a      	adds	r2, r3, #1
 8010d94:	61ba      	str	r2, [r7, #24]
 8010d96:	693a      	ldr	r2, [r7, #16]
 8010d98:	4413      	add	r3, r2
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010d9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010da0:	2b1f      	cmp	r3, #31
 8010da2:	d940      	bls.n	8010e26 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010da4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010da6:	2b2f      	cmp	r3, #47	@ 0x2f
 8010da8:	d006      	beq.n	8010db8 <create_name+0x48>
 8010daa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010dac:	2b5c      	cmp	r3, #92	@ 0x5c
 8010dae:	d110      	bne.n	8010dd2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010db0:	e002      	b.n	8010db8 <create_name+0x48>
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	3301      	adds	r3, #1
 8010db6:	61bb      	str	r3, [r7, #24]
 8010db8:	693a      	ldr	r2, [r7, #16]
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	4413      	add	r3, r2
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8010dc2:	d0f6      	beq.n	8010db2 <create_name+0x42>
 8010dc4:	693a      	ldr	r2, [r7, #16]
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	4413      	add	r3, r2
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	2b5c      	cmp	r3, #92	@ 0x5c
 8010dce:	d0f0      	beq.n	8010db2 <create_name+0x42>
			break;
 8010dd0:	e02a      	b.n	8010e28 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	2bfe      	cmp	r3, #254	@ 0xfe
 8010dd6:	d901      	bls.n	8010ddc <create_name+0x6c>
 8010dd8:	2306      	movs	r3, #6
 8010dda:	e1ca      	b.n	8011172 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010ddc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010de2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010de4:	2101      	movs	r1, #1
 8010de6:	4618      	mov	r0, r3
 8010de8:	f001 ff16 	bl	8012c18 <ff_convert>
 8010dec:	4603      	mov	r3, r0
 8010dee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010df0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d101      	bne.n	8010dfa <create_name+0x8a>
 8010df6:	2306      	movs	r3, #6
 8010df8:	e1bb      	b.n	8011172 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010dfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010dfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8010dfe:	d809      	bhi.n	8010e14 <create_name+0xa4>
 8010e00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e02:	4619      	mov	r1, r3
 8010e04:	489e      	ldr	r0, [pc, #632]	@ (8011080 <create_name+0x310>)
 8010e06:	f7fe fce4 	bl	800f7d2 <chk_chr>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d001      	beq.n	8010e14 <create_name+0xa4>
 8010e10:	2306      	movs	r3, #6
 8010e12:	e1ae      	b.n	8011172 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	1c5a      	adds	r2, r3, #1
 8010e18:	617a      	str	r2, [r7, #20]
 8010e1a:	005b      	lsls	r3, r3, #1
 8010e1c:	68fa      	ldr	r2, [r7, #12]
 8010e1e:	4413      	add	r3, r2
 8010e20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010e22:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010e24:	e7b4      	b.n	8010d90 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010e26:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010e28:	693a      	ldr	r2, [r7, #16]
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	441a      	add	r2, r3
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010e32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e34:	2b1f      	cmp	r3, #31
 8010e36:	d801      	bhi.n	8010e3c <create_name+0xcc>
 8010e38:	2304      	movs	r3, #4
 8010e3a:	e000      	b.n	8010e3e <create_name+0xce>
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d109      	bne.n	8010e5c <create_name+0xec>
 8010e48:	697a      	ldr	r2, [r7, #20]
 8010e4a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010e4e:	4413      	add	r3, r2
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	68fa      	ldr	r2, [r7, #12]
 8010e54:	4413      	add	r3, r2
 8010e56:	881b      	ldrh	r3, [r3, #0]
 8010e58:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e5a:	d015      	beq.n	8010e88 <create_name+0x118>
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	2b02      	cmp	r3, #2
 8010e60:	d14d      	bne.n	8010efe <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010e68:	4413      	add	r3, r2
 8010e6a:	005b      	lsls	r3, r3, #1
 8010e6c:	68fa      	ldr	r2, [r7, #12]
 8010e6e:	4413      	add	r3, r2
 8010e70:	881b      	ldrh	r3, [r3, #0]
 8010e72:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e74:	d143      	bne.n	8010efe <create_name+0x18e>
 8010e76:	697a      	ldr	r2, [r7, #20]
 8010e78:	4b82      	ldr	r3, [pc, #520]	@ (8011084 <create_name+0x314>)
 8010e7a:	4413      	add	r3, r2
 8010e7c:	005b      	lsls	r3, r3, #1
 8010e7e:	68fa      	ldr	r2, [r7, #12]
 8010e80:	4413      	add	r3, r2
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e86:	d13a      	bne.n	8010efe <create_name+0x18e>
		lfn[di] = 0;
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	005b      	lsls	r3, r3, #1
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	4413      	add	r3, r2
 8010e90:	2200      	movs	r2, #0
 8010e92:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010e94:	2300      	movs	r3, #0
 8010e96:	623b      	str	r3, [r7, #32]
 8010e98:	e00f      	b.n	8010eba <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8010e9a:	6a3a      	ldr	r2, [r7, #32]
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d201      	bcs.n	8010ea6 <create_name+0x136>
 8010ea2:	212e      	movs	r1, #46	@ 0x2e
 8010ea4:	e000      	b.n	8010ea8 <create_name+0x138>
 8010ea6:	2120      	movs	r1, #32
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	6a3b      	ldr	r3, [r7, #32]
 8010eac:	4413      	add	r3, r2
 8010eae:	3324      	adds	r3, #36	@ 0x24
 8010eb0:	460a      	mov	r2, r1
 8010eb2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010eb4:	6a3b      	ldr	r3, [r7, #32]
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	623b      	str	r3, [r7, #32]
 8010eba:	6a3b      	ldr	r3, [r7, #32]
 8010ebc:	2b0a      	cmp	r3, #10
 8010ebe:	d9ec      	bls.n	8010e9a <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8010ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ec4:	f043 0320 	orr.w	r3, r3, #32
 8010ec8:	b2d9      	uxtb	r1, r3
 8010eca:	687a      	ldr	r2, [r7, #4]
 8010ecc:	6a3b      	ldr	r3, [r7, #32]
 8010ece:	4413      	add	r3, r2
 8010ed0:	3324      	adds	r3, #36	@ 0x24
 8010ed2:	460a      	mov	r2, r1
 8010ed4:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	e14b      	b.n	8011172 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8010eda:	697a      	ldr	r2, [r7, #20]
 8010edc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010ee0:	4413      	add	r3, r2
 8010ee2:	005b      	lsls	r3, r3, #1
 8010ee4:	68fa      	ldr	r2, [r7, #12]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	881b      	ldrh	r3, [r3, #0]
 8010eea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010eec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010eee:	2b20      	cmp	r3, #32
 8010ef0:	d002      	beq.n	8010ef8 <create_name+0x188>
 8010ef2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ef6:	d106      	bne.n	8010f06 <create_name+0x196>
		di--;
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	3b01      	subs	r3, #1
 8010efc:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d1ea      	bne.n	8010eda <create_name+0x16a>
 8010f04:	e000      	b.n	8010f08 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8010f06:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	005b      	lsls	r3, r3, #1
 8010f0c:	68fa      	ldr	r2, [r7, #12]
 8010f0e:	4413      	add	r3, r2
 8010f10:	2200      	movs	r2, #0
 8010f12:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d101      	bne.n	8010f1e <create_name+0x1ae>
 8010f1a:	2306      	movs	r3, #6
 8010f1c:	e129      	b.n	8011172 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	3324      	adds	r3, #36	@ 0x24
 8010f22:	220b      	movs	r2, #11
 8010f24:	2120      	movs	r1, #32
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fe fc11 	bl	800f74e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	61bb      	str	r3, [r7, #24]
 8010f30:	e002      	b.n	8010f38 <create_name+0x1c8>
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	3301      	adds	r3, #1
 8010f36:	61bb      	str	r3, [r7, #24]
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	005b      	lsls	r3, r3, #1
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	4413      	add	r3, r2
 8010f40:	881b      	ldrh	r3, [r3, #0]
 8010f42:	2b20      	cmp	r3, #32
 8010f44:	d0f5      	beq.n	8010f32 <create_name+0x1c2>
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	005b      	lsls	r3, r3, #1
 8010f4a:	68fa      	ldr	r2, [r7, #12]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	881b      	ldrh	r3, [r3, #0]
 8010f50:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f52:	d0ee      	beq.n	8010f32 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d009      	beq.n	8010f6e <create_name+0x1fe>
 8010f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f5e:	f043 0303 	orr.w	r3, r3, #3
 8010f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010f66:	e002      	b.n	8010f6e <create_name+0x1fe>
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	617b      	str	r3, [r7, #20]
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d009      	beq.n	8010f88 <create_name+0x218>
 8010f74:	697a      	ldr	r2, [r7, #20]
 8010f76:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010f7a:	4413      	add	r3, r2
 8010f7c:	005b      	lsls	r3, r3, #1
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	4413      	add	r3, r2
 8010f82:	881b      	ldrh	r3, [r3, #0]
 8010f84:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f86:	d1ef      	bne.n	8010f68 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010f8e:	2300      	movs	r3, #0
 8010f90:	623b      	str	r3, [r7, #32]
 8010f92:	2308      	movs	r3, #8
 8010f94:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	1c5a      	adds	r2, r3, #1
 8010f9a:	61ba      	str	r2, [r7, #24]
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	68fa      	ldr	r2, [r7, #12]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010fa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	f000 8098 	beq.w	80110de <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010fae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fb0:	2b20      	cmp	r3, #32
 8010fb2:	d006      	beq.n	8010fc2 <create_name+0x252>
 8010fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010fb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8010fb8:	d10a      	bne.n	8010fd0 <create_name+0x260>
 8010fba:	69ba      	ldr	r2, [r7, #24]
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d006      	beq.n	8010fd0 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8010fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fc6:	f043 0303 	orr.w	r3, r3, #3
 8010fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010fce:	e085      	b.n	80110dc <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010fd0:	6a3a      	ldr	r2, [r7, #32]
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d203      	bcs.n	8010fe0 <create_name+0x270>
 8010fd8:	69ba      	ldr	r2, [r7, #24]
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d123      	bne.n	8011028 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	2b0b      	cmp	r3, #11
 8010fe4:	d106      	bne.n	8010ff4 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8010fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fea:	f043 0303 	orr.w	r3, r3, #3
 8010fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ff2:	e077      	b.n	80110e4 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010ff4:	69ba      	ldr	r2, [r7, #24]
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d005      	beq.n	8011008 <create_name+0x298>
 8010ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011000:	f043 0303 	orr.w	r3, r3, #3
 8011004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8011008:	69ba      	ldr	r2, [r7, #24]
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	429a      	cmp	r2, r3
 801100e:	d868      	bhi.n	80110e2 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	61bb      	str	r3, [r7, #24]
 8011014:	2308      	movs	r3, #8
 8011016:	623b      	str	r3, [r7, #32]
 8011018:	230b      	movs	r3, #11
 801101a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801101c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011026:	e059      	b.n	80110dc <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011028:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801102a:	2b7f      	cmp	r3, #127	@ 0x7f
 801102c:	d914      	bls.n	8011058 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801102e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011030:	2100      	movs	r1, #0
 8011032:	4618      	mov	r0, r3
 8011034:	f001 fdf0 	bl	8012c18 <ff_convert>
 8011038:	4603      	mov	r3, r0
 801103a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801103c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801103e:	2b00      	cmp	r3, #0
 8011040:	d004      	beq.n	801104c <create_name+0x2dc>
 8011042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011044:	3b80      	subs	r3, #128	@ 0x80
 8011046:	4a10      	ldr	r2, [pc, #64]	@ (8011088 <create_name+0x318>)
 8011048:	5cd3      	ldrb	r3, [r2, r3]
 801104a:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801104c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011050:	f043 0302 	orr.w	r3, r3, #2
 8011054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8011058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801105a:	2b00      	cmp	r3, #0
 801105c:	d007      	beq.n	801106e <create_name+0x2fe>
 801105e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011060:	4619      	mov	r1, r3
 8011062:	480a      	ldr	r0, [pc, #40]	@ (801108c <create_name+0x31c>)
 8011064:	f7fe fbb5 	bl	800f7d2 <chk_chr>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d010      	beq.n	8011090 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801106e:	235f      	movs	r3, #95	@ 0x5f
 8011070:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011076:	f043 0303 	orr.w	r3, r3, #3
 801107a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801107e:	e023      	b.n	80110c8 <create_name+0x358>
 8011080:	08013130 	.word	0x08013130
 8011084:	7ffffffe 	.word	0x7ffffffe
 8011088:	080131b8 	.word	0x080131b8
 801108c:	0801313c 	.word	0x0801313c
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8011090:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011092:	2b40      	cmp	r3, #64	@ 0x40
 8011094:	d909      	bls.n	80110aa <create_name+0x33a>
 8011096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011098:	2b5a      	cmp	r3, #90	@ 0x5a
 801109a:	d806      	bhi.n	80110aa <create_name+0x33a>
					b |= 2;
 801109c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110a0:	f043 0302 	orr.w	r3, r3, #2
 80110a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80110a8:	e00e      	b.n	80110c8 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80110aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110ac:	2b60      	cmp	r3, #96	@ 0x60
 80110ae:	d90b      	bls.n	80110c8 <create_name+0x358>
 80110b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110b2:	2b7a      	cmp	r3, #122	@ 0x7a
 80110b4:	d808      	bhi.n	80110c8 <create_name+0x358>
						b |= 1; w -= 0x20;
 80110b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110ba:	f043 0301 	orr.w	r3, r3, #1
 80110be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80110c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110c4:	3b20      	subs	r3, #32
 80110c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80110c8:	6a3b      	ldr	r3, [r7, #32]
 80110ca:	1c5a      	adds	r2, r3, #1
 80110cc:	623a      	str	r2, [r7, #32]
 80110ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80110d0:	b2d1      	uxtb	r1, r2
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	4413      	add	r3, r2
 80110d6:	460a      	mov	r2, r1
 80110d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80110dc:	e75b      	b.n	8010f96 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 80110de:	bf00      	nop
 80110e0:	e000      	b.n	80110e4 <create_name+0x374>
			if (si > di) break;			/* No extension */
 80110e2:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80110ea:	2be5      	cmp	r3, #229	@ 0xe5
 80110ec:	d103      	bne.n	80110f6 <create_name+0x386>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2205      	movs	r2, #5
 80110f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80110f6:	69fb      	ldr	r3, [r7, #28]
 80110f8:	2b08      	cmp	r3, #8
 80110fa:	d104      	bne.n	8011106 <create_name+0x396>
 80110fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011106:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801110a:	f003 030c 	and.w	r3, r3, #12
 801110e:	2b0c      	cmp	r3, #12
 8011110:	d005      	beq.n	801111e <create_name+0x3ae>
 8011112:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011116:	f003 0303 	and.w	r3, r3, #3
 801111a:	2b03      	cmp	r3, #3
 801111c:	d105      	bne.n	801112a <create_name+0x3ba>
 801111e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011122:	f043 0302 	orr.w	r3, r3, #2
 8011126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801112a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801112e:	f003 0302 	and.w	r3, r3, #2
 8011132:	2b00      	cmp	r3, #0
 8011134:	d117      	bne.n	8011166 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8011136:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801113a:	f003 0303 	and.w	r3, r3, #3
 801113e:	2b01      	cmp	r3, #1
 8011140:	d105      	bne.n	801114e <create_name+0x3de>
 8011142:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011146:	f043 0310 	orr.w	r3, r3, #16
 801114a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801114e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011152:	f003 030c 	and.w	r3, r3, #12
 8011156:	2b04      	cmp	r3, #4
 8011158:	d105      	bne.n	8011166 <create_name+0x3f6>
 801115a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801115e:	f043 0308 	orr.w	r3, r3, #8
 8011162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801116c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8011170:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8011172:	4618      	mov	r0, r3
 8011174:	3728      	adds	r7, #40	@ 0x28
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop

0801117c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	2b2f      	cmp	r3, #47	@ 0x2f
 8011196:	d00b      	beq.n	80111b0 <follow_path+0x34>
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	2b5c      	cmp	r3, #92	@ 0x5c
 801119e:	d007      	beq.n	80111b0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	69da      	ldr	r2, [r3, #28]
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	609a      	str	r2, [r3, #8]
 80111a8:	e00d      	b.n	80111c6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	3301      	adds	r3, #1
 80111ae:	603b      	str	r3, [r7, #0]
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80111b6:	d0f8      	beq.n	80111aa <follow_path+0x2e>
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80111be:	d0f4      	beq.n	80111aa <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	2200      	movs	r2, #0
 80111c4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	2b1f      	cmp	r3, #31
 80111cc:	d80a      	bhi.n	80111e4 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2280      	movs	r2, #128	@ 0x80
 80111d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80111d6:	2100      	movs	r1, #0
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f7ff f8a4 	bl	8010326 <dir_sdi>
 80111de:	4603      	mov	r3, r0
 80111e0:	75fb      	strb	r3, [r7, #23]
 80111e2:	e05b      	b.n	801129c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80111e4:	463b      	mov	r3, r7
 80111e6:	4619      	mov	r1, r3
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7ff fdc1 	bl	8010d70 <create_name>
 80111ee:	4603      	mov	r3, r0
 80111f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80111f2:	7dfb      	ldrb	r3, [r7, #23]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d14c      	bne.n	8011292 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f7ff fc00 	bl	80109fe <dir_find>
 80111fe:	4603      	mov	r3, r0
 8011200:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011208:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801120a:	7dfb      	ldrb	r3, [r7, #23]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d01b      	beq.n	8011248 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011210:	7dfb      	ldrb	r3, [r7, #23]
 8011212:	2b04      	cmp	r3, #4
 8011214:	d13f      	bne.n	8011296 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8011216:	7afb      	ldrb	r3, [r7, #11]
 8011218:	f003 0320 	and.w	r3, r3, #32
 801121c:	2b00      	cmp	r3, #0
 801121e:	d00b      	beq.n	8011238 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011220:	7afb      	ldrb	r3, [r7, #11]
 8011222:	f003 0304 	and.w	r3, r3, #4
 8011226:	2b00      	cmp	r3, #0
 8011228:	d031      	beq.n	801128e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2280      	movs	r2, #128	@ 0x80
 801122e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011236:	e02e      	b.n	8011296 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011238:	7afb      	ldrb	r3, [r7, #11]
 801123a:	f003 0304 	and.w	r3, r3, #4
 801123e:	2b00      	cmp	r3, #0
 8011240:	d129      	bne.n	8011296 <follow_path+0x11a>
 8011242:	2305      	movs	r3, #5
 8011244:	75fb      	strb	r3, [r7, #23]
				break;
 8011246:	e026      	b.n	8011296 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011248:	7afb      	ldrb	r3, [r7, #11]
 801124a:	f003 0304 	and.w	r3, r3, #4
 801124e:	2b00      	cmp	r3, #0
 8011250:	d123      	bne.n	801129a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	799b      	ldrb	r3, [r3, #6]
 8011256:	f003 0310 	and.w	r3, r3, #16
 801125a:	2b00      	cmp	r3, #0
 801125c:	d102      	bne.n	8011264 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801125e:	2305      	movs	r3, #5
 8011260:	75fb      	strb	r3, [r7, #23]
 8011262:	e01b      	b.n	801129c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	695b      	ldr	r3, [r3, #20]
 801126e:	68fa      	ldr	r2, [r7, #12]
 8011270:	8992      	ldrh	r2, [r2, #12]
 8011272:	fbb3 f0f2 	udiv	r0, r3, r2
 8011276:	fb00 f202 	mul.w	r2, r0, r2
 801127a:	1a9b      	subs	r3, r3, r2
 801127c:	440b      	add	r3, r1
 801127e:	4619      	mov	r1, r3
 8011280:	68f8      	ldr	r0, [r7, #12]
 8011282:	f7ff f9f6 	bl	8010672 <ld_clust>
 8011286:	4602      	mov	r2, r0
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	609a      	str	r2, [r3, #8]
 801128c:	e7aa      	b.n	80111e4 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801128e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011290:	e7a8      	b.n	80111e4 <follow_path+0x68>
			if (res != FR_OK) break;
 8011292:	bf00      	nop
 8011294:	e002      	b.n	801129c <follow_path+0x120>
				break;
 8011296:	bf00      	nop
 8011298:	e000      	b.n	801129c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801129a:	bf00      	nop
			}
		}
	}

	return res;
 801129c:	7dfb      	ldrb	r3, [r7, #23]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3718      	adds	r7, #24
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80112a6:	b480      	push	{r7}
 80112a8:	b087      	sub	sp, #28
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80112ae:	f04f 33ff 	mov.w	r3, #4294967295
 80112b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d031      	beq.n	8011320 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	617b      	str	r3, [r7, #20]
 80112c2:	e002      	b.n	80112ca <get_ldnumber+0x24>
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	3301      	adds	r3, #1
 80112c8:	617b      	str	r3, [r7, #20]
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	2b1f      	cmp	r3, #31
 80112d0:	d903      	bls.n	80112da <get_ldnumber+0x34>
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	2b3a      	cmp	r3, #58	@ 0x3a
 80112d8:	d1f4      	bne.n	80112c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	2b3a      	cmp	r3, #58	@ 0x3a
 80112e0:	d11c      	bne.n	801131c <get_ldnumber+0x76>
			tp = *path;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	1c5a      	adds	r2, r3, #1
 80112ec:	60fa      	str	r2, [r7, #12]
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	3b30      	subs	r3, #48	@ 0x30
 80112f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	2b09      	cmp	r3, #9
 80112f8:	d80e      	bhi.n	8011318 <get_ldnumber+0x72>
 80112fa:	68fa      	ldr	r2, [r7, #12]
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d10a      	bne.n	8011318 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d107      	bne.n	8011318 <get_ldnumber+0x72>
					vol = (int)i;
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	3301      	adds	r3, #1
 8011310:	617b      	str	r3, [r7, #20]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	697a      	ldr	r2, [r7, #20]
 8011316:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	e002      	b.n	8011322 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801131c:	2300      	movs	r3, #0
 801131e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011320:	693b      	ldr	r3, [r7, #16]
}
 8011322:	4618      	mov	r0, r3
 8011324:	371c      	adds	r7, #28
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr
	...

08011330 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2200      	movs	r2, #0
 801133e:	70da      	strb	r2, [r3, #3]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f04f 32ff 	mov.w	r2, #4294967295
 8011346:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011348:	6839      	ldr	r1, [r7, #0]
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7fe fc0c 	bl	800fb68 <move_window>
 8011350:	4603      	mov	r3, r0
 8011352:	2b00      	cmp	r3, #0
 8011354:	d001      	beq.n	801135a <check_fs+0x2a>
 8011356:	2304      	movs	r3, #4
 8011358:	e038      	b.n	80113cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	333c      	adds	r3, #60	@ 0x3c
 801135e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011362:	4618      	mov	r0, r3
 8011364:	f7fe f950 	bl	800f608 <ld_word>
 8011368:	4603      	mov	r3, r0
 801136a:	461a      	mov	r2, r3
 801136c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011370:	429a      	cmp	r2, r3
 8011372:	d001      	beq.n	8011378 <check_fs+0x48>
 8011374:	2303      	movs	r3, #3
 8011376:	e029      	b.n	80113cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801137e:	2be9      	cmp	r3, #233	@ 0xe9
 8011380:	d009      	beq.n	8011396 <check_fs+0x66>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011388:	2beb      	cmp	r3, #235	@ 0xeb
 801138a:	d11e      	bne.n	80113ca <check_fs+0x9a>
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011392:	2b90      	cmp	r3, #144	@ 0x90
 8011394:	d119      	bne.n	80113ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	333c      	adds	r3, #60	@ 0x3c
 801139a:	3336      	adds	r3, #54	@ 0x36
 801139c:	4618      	mov	r0, r3
 801139e:	f7fe f94b 	bl	800f638 <ld_dword>
 80113a2:	4603      	mov	r3, r0
 80113a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80113a8:	4a0a      	ldr	r2, [pc, #40]	@ (80113d4 <check_fs+0xa4>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d101      	bne.n	80113b2 <check_fs+0x82>
 80113ae:	2300      	movs	r3, #0
 80113b0:	e00c      	b.n	80113cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	333c      	adds	r3, #60	@ 0x3c
 80113b6:	3352      	adds	r3, #82	@ 0x52
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7fe f93d 	bl	800f638 <ld_dword>
 80113be:	4603      	mov	r3, r0
 80113c0:	4a05      	ldr	r2, [pc, #20]	@ (80113d8 <check_fs+0xa8>)
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d101      	bne.n	80113ca <check_fs+0x9a>
 80113c6:	2300      	movs	r3, #0
 80113c8:	e000      	b.n	80113cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80113ca:	2302      	movs	r3, #2
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	00544146 	.word	0x00544146
 80113d8:	33544146 	.word	0x33544146

080113dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b096      	sub	sp, #88	@ 0x58
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	60f8      	str	r0, [r7, #12]
 80113e4:	60b9      	str	r1, [r7, #8]
 80113e6:	4613      	mov	r3, r2
 80113e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	2200      	movs	r2, #0
 80113ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80113f0:	68f8      	ldr	r0, [r7, #12]
 80113f2:	f7ff ff58 	bl	80112a6 <get_ldnumber>
 80113f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80113f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	da01      	bge.n	8011402 <find_volume+0x26>
 80113fe:	230b      	movs	r3, #11
 8011400:	e268      	b.n	80118d4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011402:	4a9f      	ldr	r2, [pc, #636]	@ (8011680 <find_volume+0x2a4>)
 8011404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801140a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801140c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801140e:	2b00      	cmp	r3, #0
 8011410:	d101      	bne.n	8011416 <find_volume+0x3a>
 8011412:	230c      	movs	r3, #12
 8011414:	e25e      	b.n	80118d4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801141a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801141c:	79fb      	ldrb	r3, [r7, #7]
 801141e:	f023 0301 	bic.w	r3, r3, #1
 8011422:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d01a      	beq.n	8011462 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801142c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801142e:	785b      	ldrb	r3, [r3, #1]
 8011430:	4618      	mov	r0, r3
 8011432:	f7fe f849 	bl	800f4c8 <disk_status>
 8011436:	4603      	mov	r3, r0
 8011438:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801143c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011440:	f003 0301 	and.w	r3, r3, #1
 8011444:	2b00      	cmp	r3, #0
 8011446:	d10c      	bne.n	8011462 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011448:	79fb      	ldrb	r3, [r7, #7]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d007      	beq.n	801145e <find_volume+0x82>
 801144e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011452:	f003 0304 	and.w	r3, r3, #4
 8011456:	2b00      	cmp	r3, #0
 8011458:	d001      	beq.n	801145e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801145a:	230a      	movs	r3, #10
 801145c:	e23a      	b.n	80118d4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801145e:	2300      	movs	r3, #0
 8011460:	e238      	b.n	80118d4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011464:	2200      	movs	r2, #0
 8011466:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801146a:	b2da      	uxtb	r2, r3
 801146c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801146e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011472:	785b      	ldrb	r3, [r3, #1]
 8011474:	4618      	mov	r0, r3
 8011476:	f7fe f841 	bl	800f4fc <disk_initialize>
 801147a:	4603      	mov	r3, r0
 801147c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011480:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011484:	f003 0301 	and.w	r3, r3, #1
 8011488:	2b00      	cmp	r3, #0
 801148a:	d001      	beq.n	8011490 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801148c:	2303      	movs	r3, #3
 801148e:	e221      	b.n	80118d4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011490:	79fb      	ldrb	r3, [r7, #7]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d007      	beq.n	80114a6 <find_volume+0xca>
 8011496:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801149a:	f003 0304 	and.w	r3, r3, #4
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d001      	beq.n	80114a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80114a2:	230a      	movs	r3, #10
 80114a4:	e216      	b.n	80118d4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80114a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114a8:	7858      	ldrb	r0, [r3, #1]
 80114aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ac:	330c      	adds	r3, #12
 80114ae:	461a      	mov	r2, r3
 80114b0:	2102      	movs	r1, #2
 80114b2:	f7fe f88b 	bl	800f5cc <disk_ioctl>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d001      	beq.n	80114c0 <find_volume+0xe4>
 80114bc:	2301      	movs	r3, #1
 80114be:	e209      	b.n	80118d4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80114c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114c2:	899b      	ldrh	r3, [r3, #12]
 80114c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80114c8:	d80d      	bhi.n	80114e6 <find_volume+0x10a>
 80114ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114cc:	899b      	ldrh	r3, [r3, #12]
 80114ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114d2:	d308      	bcc.n	80114e6 <find_volume+0x10a>
 80114d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d6:	899b      	ldrh	r3, [r3, #12]
 80114d8:	461a      	mov	r2, r3
 80114da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114dc:	899b      	ldrh	r3, [r3, #12]
 80114de:	3b01      	subs	r3, #1
 80114e0:	4013      	ands	r3, r2
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d001      	beq.n	80114ea <find_volume+0x10e>
 80114e6:	2301      	movs	r3, #1
 80114e8:	e1f4      	b.n	80118d4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80114ea:	2300      	movs	r3, #0
 80114ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80114ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80114f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80114f2:	f7ff ff1d 	bl	8011330 <check_fs>
 80114f6:	4603      	mov	r3, r0
 80114f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80114fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011500:	2b02      	cmp	r3, #2
 8011502:	d149      	bne.n	8011598 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011504:	2300      	movs	r3, #0
 8011506:	643b      	str	r3, [r7, #64]	@ 0x40
 8011508:	e01e      	b.n	8011548 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801150a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801150c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011512:	011b      	lsls	r3, r3, #4
 8011514:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011518:	4413      	add	r3, r2
 801151a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801151c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801151e:	3304      	adds	r3, #4
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d006      	beq.n	8011534 <find_volume+0x158>
 8011526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011528:	3308      	adds	r3, #8
 801152a:	4618      	mov	r0, r3
 801152c:	f7fe f884 	bl	800f638 <ld_dword>
 8011530:	4602      	mov	r2, r0
 8011532:	e000      	b.n	8011536 <find_volume+0x15a>
 8011534:	2200      	movs	r2, #0
 8011536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011538:	009b      	lsls	r3, r3, #2
 801153a:	3358      	adds	r3, #88	@ 0x58
 801153c:	443b      	add	r3, r7
 801153e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011544:	3301      	adds	r3, #1
 8011546:	643b      	str	r3, [r7, #64]	@ 0x40
 8011548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801154a:	2b03      	cmp	r3, #3
 801154c:	d9dd      	bls.n	801150a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801154e:	2300      	movs	r3, #0
 8011550:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011554:	2b00      	cmp	r3, #0
 8011556:	d002      	beq.n	801155e <find_volume+0x182>
 8011558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801155a:	3b01      	subs	r3, #1
 801155c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801155e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	3358      	adds	r3, #88	@ 0x58
 8011564:	443b      	add	r3, r7
 8011566:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801156a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801156c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801156e:	2b00      	cmp	r3, #0
 8011570:	d005      	beq.n	801157e <find_volume+0x1a2>
 8011572:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011574:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011576:	f7ff fedb 	bl	8011330 <check_fs>
 801157a:	4603      	mov	r3, r0
 801157c:	e000      	b.n	8011580 <find_volume+0x1a4>
 801157e:	2303      	movs	r3, #3
 8011580:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011584:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011588:	2b01      	cmp	r3, #1
 801158a:	d905      	bls.n	8011598 <find_volume+0x1bc>
 801158c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801158e:	3301      	adds	r3, #1
 8011590:	643b      	str	r3, [r7, #64]	@ 0x40
 8011592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011594:	2b03      	cmp	r3, #3
 8011596:	d9e2      	bls.n	801155e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011598:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801159c:	2b04      	cmp	r3, #4
 801159e:	d101      	bne.n	80115a4 <find_volume+0x1c8>
 80115a0:	2301      	movs	r3, #1
 80115a2:	e197      	b.n	80118d4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80115a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d901      	bls.n	80115b0 <find_volume+0x1d4>
 80115ac:	230d      	movs	r3, #13
 80115ae:	e191      	b.n	80118d4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80115b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115b2:	333c      	adds	r3, #60	@ 0x3c
 80115b4:	330b      	adds	r3, #11
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fe f826 	bl	800f608 <ld_word>
 80115bc:	4603      	mov	r3, r0
 80115be:	461a      	mov	r2, r3
 80115c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c2:	899b      	ldrh	r3, [r3, #12]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d001      	beq.n	80115cc <find_volume+0x1f0>
 80115c8:	230d      	movs	r3, #13
 80115ca:	e183      	b.n	80118d4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80115cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ce:	333c      	adds	r3, #60	@ 0x3c
 80115d0:	3316      	adds	r3, #22
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fe f818 	bl	800f608 <ld_word>
 80115d8:	4603      	mov	r3, r0
 80115da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80115dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d106      	bne.n	80115f0 <find_volume+0x214>
 80115e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115e4:	333c      	adds	r3, #60	@ 0x3c
 80115e6:	3324      	adds	r3, #36	@ 0x24
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fe f825 	bl	800f638 <ld_dword>
 80115ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80115f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80115f4:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80115f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115f8:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 80115fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011602:	789b      	ldrb	r3, [r3, #2]
 8011604:	2b01      	cmp	r3, #1
 8011606:	d005      	beq.n	8011614 <find_volume+0x238>
 8011608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160a:	789b      	ldrb	r3, [r3, #2]
 801160c:	2b02      	cmp	r3, #2
 801160e:	d001      	beq.n	8011614 <find_volume+0x238>
 8011610:	230d      	movs	r3, #13
 8011612:	e15f      	b.n	80118d4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011616:	789b      	ldrb	r3, [r3, #2]
 8011618:	461a      	mov	r2, r3
 801161a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801161c:	fb02 f303 	mul.w	r3, r2, r3
 8011620:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011624:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8011628:	461a      	mov	r2, r3
 801162a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801162c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801162e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011630:	895b      	ldrh	r3, [r3, #10]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d008      	beq.n	8011648 <find_volume+0x26c>
 8011636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011638:	895b      	ldrh	r3, [r3, #10]
 801163a:	461a      	mov	r2, r3
 801163c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801163e:	895b      	ldrh	r3, [r3, #10]
 8011640:	3b01      	subs	r3, #1
 8011642:	4013      	ands	r3, r2
 8011644:	2b00      	cmp	r3, #0
 8011646:	d001      	beq.n	801164c <find_volume+0x270>
 8011648:	230d      	movs	r3, #13
 801164a:	e143      	b.n	80118d4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801164c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164e:	333c      	adds	r3, #60	@ 0x3c
 8011650:	3311      	adds	r3, #17
 8011652:	4618      	mov	r0, r3
 8011654:	f7fd ffd8 	bl	800f608 <ld_word>
 8011658:	4603      	mov	r3, r0
 801165a:	461a      	mov	r2, r3
 801165c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801165e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011662:	891b      	ldrh	r3, [r3, #8]
 8011664:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011666:	8992      	ldrh	r2, [r2, #12]
 8011668:	0952      	lsrs	r2, r2, #5
 801166a:	b292      	uxth	r2, r2
 801166c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011670:	fb01 f202 	mul.w	r2, r1, r2
 8011674:	1a9b      	subs	r3, r3, r2
 8011676:	b29b      	uxth	r3, r3
 8011678:	2b00      	cmp	r3, #0
 801167a:	d003      	beq.n	8011684 <find_volume+0x2a8>
 801167c:	230d      	movs	r3, #13
 801167e:	e129      	b.n	80118d4 <find_volume+0x4f8>
 8011680:	240029f0 	.word	0x240029f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011686:	333c      	adds	r3, #60	@ 0x3c
 8011688:	3313      	adds	r3, #19
 801168a:	4618      	mov	r0, r3
 801168c:	f7fd ffbc 	bl	800f608 <ld_word>
 8011690:	4603      	mov	r3, r0
 8011692:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <find_volume+0x2cc>
 801169a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169c:	333c      	adds	r3, #60	@ 0x3c
 801169e:	3320      	adds	r3, #32
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fd ffc9 	bl	800f638 <ld_dword>
 80116a6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80116a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116aa:	333c      	adds	r3, #60	@ 0x3c
 80116ac:	330e      	adds	r3, #14
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7fd ffaa 	bl	800f608 <ld_word>
 80116b4:	4603      	mov	r3, r0
 80116b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80116b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d101      	bne.n	80116c2 <find_volume+0x2e6>
 80116be:	230d      	movs	r3, #13
 80116c0:	e108      	b.n	80118d4 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80116c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80116c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116c6:	4413      	add	r3, r2
 80116c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116ca:	8911      	ldrh	r1, [r2, #8]
 80116cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116ce:	8992      	ldrh	r2, [r2, #12]
 80116d0:	0952      	lsrs	r2, r2, #5
 80116d2:	b292      	uxth	r2, r2
 80116d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80116d8:	b292      	uxth	r2, r2
 80116da:	4413      	add	r3, r2
 80116dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80116de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80116e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d201      	bcs.n	80116ea <find_volume+0x30e>
 80116e6:	230d      	movs	r3, #13
 80116e8:	e0f4      	b.n	80118d4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80116ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80116ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116f2:	8952      	ldrh	r2, [r2, #10]
 80116f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80116f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80116fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d101      	bne.n	8011704 <find_volume+0x328>
 8011700:	230d      	movs	r3, #13
 8011702:	e0e7      	b.n	80118d4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8011704:	2303      	movs	r3, #3
 8011706:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801170c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011710:	4293      	cmp	r3, r2
 8011712:	d802      	bhi.n	801171a <find_volume+0x33e>
 8011714:	2302      	movs	r3, #2
 8011716:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011720:	4293      	cmp	r3, r2
 8011722:	d802      	bhi.n	801172a <find_volume+0x34e>
 8011724:	2301      	movs	r3, #1
 8011726:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801172c:	1c9a      	adds	r2, r3, #2
 801172e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011730:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8011732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011734:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011736:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011738:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801173a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801173c:	441a      	add	r2, r3
 801173e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011740:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8011742:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011746:	441a      	add	r2, r3
 8011748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 801174c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011750:	2b03      	cmp	r3, #3
 8011752:	d11e      	bne.n	8011792 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011756:	333c      	adds	r3, #60	@ 0x3c
 8011758:	332a      	adds	r3, #42	@ 0x2a
 801175a:	4618      	mov	r0, r3
 801175c:	f7fd ff54 	bl	800f608 <ld_word>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	d001      	beq.n	801176a <find_volume+0x38e>
 8011766:	230d      	movs	r3, #13
 8011768:	e0b4      	b.n	80118d4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801176a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801176c:	891b      	ldrh	r3, [r3, #8]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d001      	beq.n	8011776 <find_volume+0x39a>
 8011772:	230d      	movs	r3, #13
 8011774:	e0ae      	b.n	80118d4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011778:	333c      	adds	r3, #60	@ 0x3c
 801177a:	332c      	adds	r3, #44	@ 0x2c
 801177c:	4618      	mov	r0, r3
 801177e:	f7fd ff5b 	bl	800f638 <ld_dword>
 8011782:	4602      	mov	r2, r0
 8011784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011786:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178a:	6a1b      	ldr	r3, [r3, #32]
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011790:	e01f      	b.n	80117d2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011794:	891b      	ldrh	r3, [r3, #8]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d101      	bne.n	801179e <find_volume+0x3c2>
 801179a:	230d      	movs	r3, #13
 801179c:	e09a      	b.n	80118d4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801179e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117a4:	441a      	add	r2, r3
 80117a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a8:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80117aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80117ae:	2b02      	cmp	r3, #2
 80117b0:	d103      	bne.n	80117ba <find_volume+0x3de>
 80117b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b4:	6a1b      	ldr	r3, [r3, #32]
 80117b6:	005b      	lsls	r3, r3, #1
 80117b8:	e00a      	b.n	80117d0 <find_volume+0x3f4>
 80117ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117bc:	6a1a      	ldr	r2, [r3, #32]
 80117be:	4613      	mov	r3, r2
 80117c0:	005b      	lsls	r3, r3, #1
 80117c2:	4413      	add	r3, r2
 80117c4:	085a      	lsrs	r2, r3, #1
 80117c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c8:	6a1b      	ldr	r3, [r3, #32]
 80117ca:	f003 0301 	and.w	r3, r3, #1
 80117ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80117d0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80117d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80117d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d8:	899b      	ldrh	r3, [r3, #12]
 80117da:	4619      	mov	r1, r3
 80117dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117de:	440b      	add	r3, r1
 80117e0:	3b01      	subs	r3, #1
 80117e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80117e4:	8989      	ldrh	r1, [r1, #12]
 80117e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d201      	bcs.n	80117f2 <find_volume+0x416>
 80117ee:	230d      	movs	r3, #13
 80117f0:	e070      	b.n	80118d4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80117f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117f4:	f04f 32ff 	mov.w	r2, #4294967295
 80117f8:	619a      	str	r2, [r3, #24]
 80117fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117fc:	699a      	ldr	r2, [r3, #24]
 80117fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011800:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8011802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011804:	2280      	movs	r2, #128	@ 0x80
 8011806:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011808:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801180c:	2b03      	cmp	r3, #3
 801180e:	d149      	bne.n	80118a4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011812:	333c      	adds	r3, #60	@ 0x3c
 8011814:	3330      	adds	r3, #48	@ 0x30
 8011816:	4618      	mov	r0, r3
 8011818:	f7fd fef6 	bl	800f608 <ld_word>
 801181c:	4603      	mov	r3, r0
 801181e:	2b01      	cmp	r3, #1
 8011820:	d140      	bne.n	80118a4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011824:	3301      	adds	r3, #1
 8011826:	4619      	mov	r1, r3
 8011828:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801182a:	f7fe f99d 	bl	800fb68 <move_window>
 801182e:	4603      	mov	r3, r0
 8011830:	2b00      	cmp	r3, #0
 8011832:	d137      	bne.n	80118a4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011836:	2200      	movs	r2, #0
 8011838:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801183a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801183c:	333c      	adds	r3, #60	@ 0x3c
 801183e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011842:	4618      	mov	r0, r3
 8011844:	f7fd fee0 	bl	800f608 <ld_word>
 8011848:	4603      	mov	r3, r0
 801184a:	461a      	mov	r2, r3
 801184c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011850:	429a      	cmp	r2, r3
 8011852:	d127      	bne.n	80118a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011856:	333c      	adds	r3, #60	@ 0x3c
 8011858:	4618      	mov	r0, r3
 801185a:	f7fd feed 	bl	800f638 <ld_dword>
 801185e:	4603      	mov	r3, r0
 8011860:	4a1e      	ldr	r2, [pc, #120]	@ (80118dc <find_volume+0x500>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d11e      	bne.n	80118a4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011868:	333c      	adds	r3, #60	@ 0x3c
 801186a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801186e:	4618      	mov	r0, r3
 8011870:	f7fd fee2 	bl	800f638 <ld_dword>
 8011874:	4603      	mov	r3, r0
 8011876:	4a1a      	ldr	r2, [pc, #104]	@ (80118e0 <find_volume+0x504>)
 8011878:	4293      	cmp	r3, r2
 801187a:	d113      	bne.n	80118a4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801187c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801187e:	333c      	adds	r3, #60	@ 0x3c
 8011880:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011884:	4618      	mov	r0, r3
 8011886:	f7fd fed7 	bl	800f638 <ld_dword>
 801188a:	4602      	mov	r2, r0
 801188c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011892:	333c      	adds	r3, #60	@ 0x3c
 8011894:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011898:	4618      	mov	r0, r3
 801189a:	f7fd fecd 	bl	800f638 <ld_dword>
 801189e:	4602      	mov	r2, r0
 80118a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80118a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80118aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80118ac:	4b0d      	ldr	r3, [pc, #52]	@ (80118e4 <find_volume+0x508>)
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	3301      	adds	r3, #1
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	4b0b      	ldr	r3, [pc, #44]	@ (80118e4 <find_volume+0x508>)
 80118b6:	801a      	strh	r2, [r3, #0]
 80118b8:	4b0a      	ldr	r3, [pc, #40]	@ (80118e4 <find_volume+0x508>)
 80118ba:	881a      	ldrh	r2, [r3, #0]
 80118bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118be:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80118c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c2:	4a09      	ldr	r2, [pc, #36]	@ (80118e8 <find_volume+0x50c>)
 80118c4:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80118c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c8:	2200      	movs	r2, #0
 80118ca:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80118cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80118ce:	f7fe f8e3 	bl	800fa98 <clear_lock>
#endif
	return FR_OK;
 80118d2:	2300      	movs	r3, #0
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3758      	adds	r7, #88	@ 0x58
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	41615252 	.word	0x41615252
 80118e0:	61417272 	.word	0x61417272
 80118e4:	240029f4 	.word	0x240029f4
 80118e8:	24002a18 	.word	0x24002a18

080118ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80118f6:	2309      	movs	r3, #9
 80118f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d01c      	beq.n	801193a <validate+0x4e>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d018      	beq.n	801193a <validate+0x4e>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d013      	beq.n	801193a <validate+0x4e>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	889a      	ldrh	r2, [r3, #4]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	88db      	ldrh	r3, [r3, #6]
 801191c:	429a      	cmp	r2, r3
 801191e:	d10c      	bne.n	801193a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	785b      	ldrb	r3, [r3, #1]
 8011926:	4618      	mov	r0, r3
 8011928:	f7fd fdce 	bl	800f4c8 <disk_status>
 801192c:	4603      	mov	r3, r0
 801192e:	f003 0301 	and.w	r3, r3, #1
 8011932:	2b00      	cmp	r3, #0
 8011934:	d101      	bne.n	801193a <validate+0x4e>
			res = FR_OK;
 8011936:	2300      	movs	r3, #0
 8011938:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801193a:	7bfb      	ldrb	r3, [r7, #15]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d102      	bne.n	8011946 <validate+0x5a>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	e000      	b.n	8011948 <validate+0x5c>
 8011946:	2300      	movs	r3, #0
 8011948:	683a      	ldr	r2, [r7, #0]
 801194a:	6013      	str	r3, [r2, #0]
	return res;
 801194c:	7bfb      	ldrb	r3, [r7, #15]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3710      	adds	r7, #16
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
	...

08011958 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b088      	sub	sp, #32
 801195c:	af00      	add	r7, sp, #0
 801195e:	60f8      	str	r0, [r7, #12]
 8011960:	60b9      	str	r1, [r7, #8]
 8011962:	4613      	mov	r3, r2
 8011964:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801196a:	f107 0310 	add.w	r3, r7, #16
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff fc99 	bl	80112a6 <get_ldnumber>
 8011974:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	2b00      	cmp	r3, #0
 801197a:	da01      	bge.n	8011980 <f_mount+0x28>
 801197c:	230b      	movs	r3, #11
 801197e:	e02b      	b.n	80119d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011980:	4a17      	ldr	r2, [pc, #92]	@ (80119e0 <f_mount+0x88>)
 8011982:	69fb      	ldr	r3, [r7, #28]
 8011984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011988:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d005      	beq.n	801199c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011990:	69b8      	ldr	r0, [r7, #24]
 8011992:	f7fe f881 	bl	800fa98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011996:	69bb      	ldr	r3, [r7, #24]
 8011998:	2200      	movs	r2, #0
 801199a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d002      	beq.n	80119a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2200      	movs	r2, #0
 80119a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80119a8:	68fa      	ldr	r2, [r7, #12]
 80119aa:	490d      	ldr	r1, [pc, #52]	@ (80119e0 <f_mount+0x88>)
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d002      	beq.n	80119be <f_mount+0x66>
 80119b8:	79fb      	ldrb	r3, [r7, #7]
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	d001      	beq.n	80119c2 <f_mount+0x6a>
 80119be:	2300      	movs	r3, #0
 80119c0:	e00a      	b.n	80119d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80119c2:	f107 010c 	add.w	r1, r7, #12
 80119c6:	f107 0308 	add.w	r3, r7, #8
 80119ca:	2200      	movs	r2, #0
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7ff fd05 	bl	80113dc <find_volume>
 80119d2:	4603      	mov	r3, r0
 80119d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80119d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3720      	adds	r7, #32
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	240029f0 	.word	0x240029f0

080119e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b09a      	sub	sp, #104	@ 0x68
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	60f8      	str	r0, [r7, #12]
 80119ec:	60b9      	str	r1, [r7, #8]
 80119ee:	4613      	mov	r3, r2
 80119f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d101      	bne.n	80119fc <f_open+0x18>
 80119f8:	2309      	movs	r3, #9
 80119fa:	e1b7      	b.n	8011d6c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80119fc:	79fb      	ldrb	r3, [r7, #7]
 80119fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011a04:	79fa      	ldrb	r2, [r7, #7]
 8011a06:	f107 0114 	add.w	r1, r7, #20
 8011a0a:	f107 0308 	add.w	r3, r7, #8
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7ff fce4 	bl	80113dc <find_volume>
 8011a14:	4603      	mov	r3, r0
 8011a16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011a1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f040 819b 	bne.w	8011d5a <f_open+0x376>
		dj.obj.fs = fs;
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011a28:	68ba      	ldr	r2, [r7, #8]
 8011a2a:	f107 0318 	add.w	r3, r7, #24
 8011a2e:	4611      	mov	r1, r2
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff fba3 	bl	801117c <follow_path>
 8011a36:	4603      	mov	r3, r0
 8011a38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011a3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d118      	bne.n	8011a76 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011a44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011a48:	b25b      	sxtb	r3, r3
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	da03      	bge.n	8011a56 <f_open+0x72>
				res = FR_INVALID_NAME;
 8011a4e:	2306      	movs	r3, #6
 8011a50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011a54:	e00f      	b.n	8011a76 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011a56:	79fb      	ldrb	r3, [r7, #7]
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	bf8c      	ite	hi
 8011a5c:	2301      	movhi	r3, #1
 8011a5e:	2300      	movls	r3, #0
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	461a      	mov	r2, r3
 8011a64:	f107 0318 	add.w	r3, r7, #24
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fd fecc 	bl	800f808 <chk_lock>
 8011a70:	4603      	mov	r3, r0
 8011a72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011a76:	79fb      	ldrb	r3, [r7, #7]
 8011a78:	f003 031c 	and.w	r3, r3, #28
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d07f      	beq.n	8011b80 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011a80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d017      	beq.n	8011ab8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011a88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011a8c:	2b04      	cmp	r3, #4
 8011a8e:	d10e      	bne.n	8011aae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011a90:	f7fd ff16 	bl	800f8c0 <enq_lock>
 8011a94:	4603      	mov	r3, r0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d006      	beq.n	8011aa8 <f_open+0xc4>
 8011a9a:	f107 0318 	add.w	r3, r7, #24
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7ff f86e 	bl	8010b80 <dir_register>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	e000      	b.n	8011aaa <f_open+0xc6>
 8011aa8:	2312      	movs	r3, #18
 8011aaa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011aae:	79fb      	ldrb	r3, [r7, #7]
 8011ab0:	f043 0308 	orr.w	r3, r3, #8
 8011ab4:	71fb      	strb	r3, [r7, #7]
 8011ab6:	e010      	b.n	8011ada <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011ab8:	7fbb      	ldrb	r3, [r7, #30]
 8011aba:	f003 0311 	and.w	r3, r3, #17
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d003      	beq.n	8011aca <f_open+0xe6>
					res = FR_DENIED;
 8011ac2:	2307      	movs	r3, #7
 8011ac4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011ac8:	e007      	b.n	8011ada <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011aca:	79fb      	ldrb	r3, [r7, #7]
 8011acc:	f003 0304 	and.w	r3, r3, #4
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d002      	beq.n	8011ada <f_open+0xf6>
 8011ad4:	2308      	movs	r3, #8
 8011ad6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011ada:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d168      	bne.n	8011bb4 <f_open+0x1d0>
 8011ae2:	79fb      	ldrb	r3, [r7, #7]
 8011ae4:	f003 0308 	and.w	r3, r3, #8
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d063      	beq.n	8011bb4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8011aec:	f7fc ffca 	bl	800ea84 <get_fattime>
 8011af0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af4:	330e      	adds	r3, #14
 8011af6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7fd fddb 	bl	800f6b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b00:	3316      	adds	r3, #22
 8011b02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7fd fdd5 	bl	800f6b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b0c:	330b      	adds	r3, #11
 8011b0e:	2220      	movs	r2, #32
 8011b10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b16:	4611      	mov	r1, r2
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7fe fdaa 	bl	8010672 <ld_clust>
 8011b1e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011b24:	2200      	movs	r2, #0
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fe fdc2 	bl	80106b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b2e:	331c      	adds	r3, #28
 8011b30:	2100      	movs	r1, #0
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7fd fdbe 	bl	800f6b4 <st_dword>
					fs->wflag = 1;
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d037      	beq.n	8011bb4 <f_open+0x1d0>
						dw = fs->winsect;
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b48:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011b4a:	f107 0318 	add.w	r3, r7, #24
 8011b4e:	2200      	movs	r2, #0
 8011b50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fe fab2 	bl	80100bc <remove_chain>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8011b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d126      	bne.n	8011bb4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fd fffc 	bl	800fb68 <move_window>
 8011b70:	4603      	mov	r3, r0
 8011b72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011b7a:	3a01      	subs	r2, #1
 8011b7c:	615a      	str	r2, [r3, #20]
 8011b7e:	e019      	b.n	8011bb4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011b80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d115      	bne.n	8011bb4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011b88:	7fbb      	ldrb	r3, [r7, #30]
 8011b8a:	f003 0310 	and.w	r3, r3, #16
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d003      	beq.n	8011b9a <f_open+0x1b6>
					res = FR_NO_FILE;
 8011b92:	2304      	movs	r3, #4
 8011b94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011b98:	e00c      	b.n	8011bb4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011b9a:	79fb      	ldrb	r3, [r7, #7]
 8011b9c:	f003 0302 	and.w	r3, r3, #2
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d007      	beq.n	8011bb4 <f_open+0x1d0>
 8011ba4:	7fbb      	ldrb	r3, [r7, #30]
 8011ba6:	f003 0301 	and.w	r3, r3, #1
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d002      	beq.n	8011bb4 <f_open+0x1d0>
						res = FR_DENIED;
 8011bae:	2307      	movs	r3, #7
 8011bb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011bb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d126      	bne.n	8011c0a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011bbc:	79fb      	ldrb	r3, [r7, #7]
 8011bbe:	f003 0308 	and.w	r3, r3, #8
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d003      	beq.n	8011bce <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011bc6:	79fb      	ldrb	r3, [r7, #7]
 8011bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bcc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011bd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011bdc:	79fb      	ldrb	r3, [r7, #7]
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	bf8c      	ite	hi
 8011be2:	2301      	movhi	r3, #1
 8011be4:	2300      	movls	r3, #0
 8011be6:	b2db      	uxtb	r3, r3
 8011be8:	461a      	mov	r2, r3
 8011bea:	f107 0318 	add.w	r3, r7, #24
 8011bee:	4611      	mov	r1, r2
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7fd fe87 	bl	800f904 <inc_lock>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	691b      	ldr	r3, [r3, #16]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d102      	bne.n	8011c0a <f_open+0x226>
 8011c04:	2302      	movs	r3, #2
 8011c06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011c0a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	f040 80a3 	bne.w	8011d5a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c18:	4611      	mov	r1, r2
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fe fd29 	bl	8010672 <ld_clust>
 8011c20:	4602      	mov	r2, r0
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c28:	331c      	adds	r3, #28
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fd fd04 	bl	800f638 <ld_dword>
 8011c30:	4602      	mov	r2, r0
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011c3c:	697a      	ldr	r2, [r7, #20]
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	88da      	ldrh	r2, [r3, #6]
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	79fa      	ldrb	r2, [r7, #7]
 8011c4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	2200      	movs	r2, #0
 8011c54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	3330      	adds	r3, #48	@ 0x30
 8011c66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011c6a:	2100      	movs	r1, #0
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7fd fd6e 	bl	800f74e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011c72:	79fb      	ldrb	r3, [r7, #7]
 8011c74:	f003 0320 	and.w	r3, r3, #32
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d06e      	beq.n	8011d5a <f_open+0x376>
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d06a      	beq.n	8011d5a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	68da      	ldr	r2, [r3, #12]
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	895b      	ldrh	r3, [r3, #10]
 8011c90:	461a      	mov	r2, r3
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	899b      	ldrh	r3, [r3, #12]
 8011c96:	fb02 f303 	mul.w	r3, r2, r3
 8011c9a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011ca8:	e016      	b.n	8011cd8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7fe f817 	bl	800fce2 <get_fat>
 8011cb4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011cb8:	2b01      	cmp	r3, #1
 8011cba:	d802      	bhi.n	8011cc2 <f_open+0x2de>
 8011cbc:	2302      	movs	r3, #2
 8011cbe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011cc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc8:	d102      	bne.n	8011cd0 <f_open+0x2ec>
 8011cca:	2301      	movs	r3, #1
 8011ccc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011cd0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cd4:	1ad3      	subs	r3, r2, r3
 8011cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011cd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d103      	bne.n	8011ce8 <f_open+0x304>
 8011ce0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d8e0      	bhi.n	8011caa <f_open+0x2c6>
				}
				fp->clust = clst;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011cec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011cee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d131      	bne.n	8011d5a <f_open+0x376>
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	899b      	ldrh	r3, [r3, #12]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d02:	fb01 f202 	mul.w	r2, r1, r2
 8011d06:	1a9b      	subs	r3, r3, r2
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d026      	beq.n	8011d5a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7fd ffc7 	bl	800fca4 <clust2sect>
 8011d16:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d103      	bne.n	8011d26 <f_open+0x342>
						res = FR_INT_ERR;
 8011d1e:	2302      	movs	r3, #2
 8011d20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011d24:	e019      	b.n	8011d5a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	899b      	ldrh	r3, [r3, #12]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d34:	441a      	add	r2, r3
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	7858      	ldrb	r0, [r3, #1]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	6a1a      	ldr	r2, [r3, #32]
 8011d48:	2301      	movs	r3, #1
 8011d4a:	f7fd fbff 	bl	800f54c <disk_read>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d002      	beq.n	8011d5a <f_open+0x376>
 8011d54:	2301      	movs	r3, #1
 8011d56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d002      	beq.n	8011d68 <f_open+0x384>
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	2200      	movs	r2, #0
 8011d66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011d68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3768      	adds	r7, #104	@ 0x68
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b08c      	sub	sp, #48	@ 0x30
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	607a      	str	r2, [r7, #4]
 8011d80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f107 0210 	add.w	r2, r7, #16
 8011d92:	4611      	mov	r1, r2
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7ff fda9 	bl	80118ec <validate>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011da0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d107      	bne.n	8011db8 <f_write+0x44>
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	7d5b      	ldrb	r3, [r3, #21]
 8011dac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011db0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d002      	beq.n	8011dbe <f_write+0x4a>
 8011db8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011dbc:	e16a      	b.n	8012094 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	7d1b      	ldrb	r3, [r3, #20]
 8011dc2:	f003 0302 	and.w	r3, r3, #2
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d101      	bne.n	8011dce <f_write+0x5a>
 8011dca:	2307      	movs	r3, #7
 8011dcc:	e162      	b.n	8012094 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	699a      	ldr	r2, [r3, #24]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	441a      	add	r2, r3
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	699b      	ldr	r3, [r3, #24]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	f080 814c 	bcs.w	8012078 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	699b      	ldr	r3, [r3, #24]
 8011de4:	43db      	mvns	r3, r3
 8011de6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011de8:	e146      	b.n	8012078 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	699b      	ldr	r3, [r3, #24]
 8011dee:	693a      	ldr	r2, [r7, #16]
 8011df0:	8992      	ldrh	r2, [r2, #12]
 8011df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011df6:	fb01 f202 	mul.w	r2, r1, r2
 8011dfa:	1a9b      	subs	r3, r3, r2
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	f040 80f1 	bne.w	8011fe4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	699b      	ldr	r3, [r3, #24]
 8011e06:	693a      	ldr	r2, [r7, #16]
 8011e08:	8992      	ldrh	r2, [r2, #12]
 8011e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e0e:	693a      	ldr	r2, [r7, #16]
 8011e10:	8952      	ldrh	r2, [r2, #10]
 8011e12:	3a01      	subs	r2, #1
 8011e14:	4013      	ands	r3, r2
 8011e16:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d143      	bne.n	8011ea6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	699b      	ldr	r3, [r3, #24]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d10c      	bne.n	8011e40 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	689b      	ldr	r3, [r3, #8]
 8011e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d11a      	bne.n	8011e68 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2100      	movs	r1, #0
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7fe f9a5 	bl	8010186 <create_chain>
 8011e3c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011e3e:	e013      	b.n	8011e68 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d007      	beq.n	8011e58 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	699b      	ldr	r3, [r3, #24]
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f7fe fa31 	bl	80102b6 <clmt_clust>
 8011e54:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011e56:	e007      	b.n	8011e68 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011e58:	68fa      	ldr	r2, [r7, #12]
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	69db      	ldr	r3, [r3, #28]
 8011e5e:	4619      	mov	r1, r3
 8011e60:	4610      	mov	r0, r2
 8011e62:	f7fe f990 	bl	8010186 <create_chain>
 8011e66:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f000 8109 	beq.w	8012082 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d104      	bne.n	8011e80 <f_write+0x10c>
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	2202      	movs	r2, #2
 8011e7a:	755a      	strb	r2, [r3, #21]
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	e109      	b.n	8012094 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e86:	d104      	bne.n	8011e92 <f_write+0x11e>
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	755a      	strb	r2, [r3, #21]
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e100      	b.n	8012094 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e96:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	689b      	ldr	r3, [r3, #8]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d102      	bne.n	8011ea6 <f_write+0x132>
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ea4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	7d1b      	ldrb	r3, [r3, #20]
 8011eaa:	b25b      	sxtb	r3, r3
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	da18      	bge.n	8011ee2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	7858      	ldrb	r0, [r3, #1]
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	6a1a      	ldr	r2, [r3, #32]
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	f7fd fb64 	bl	800f58c <disk_write>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d004      	beq.n	8011ed4 <f_write+0x160>
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	2201      	movs	r2, #1
 8011ece:	755a      	strb	r2, [r3, #21]
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	e0df      	b.n	8012094 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	7d1b      	ldrb	r3, [r3, #20]
 8011ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011edc:	b2da      	uxtb	r2, r3
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011ee2:	693a      	ldr	r2, [r7, #16]
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	69db      	ldr	r3, [r3, #28]
 8011ee8:	4619      	mov	r1, r3
 8011eea:	4610      	mov	r0, r2
 8011eec:	f7fd feda 	bl	800fca4 <clust2sect>
 8011ef0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d104      	bne.n	8011f02 <f_write+0x18e>
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2202      	movs	r2, #2
 8011efc:	755a      	strb	r2, [r3, #21]
 8011efe:	2302      	movs	r3, #2
 8011f00:	e0c8      	b.n	8012094 <f_write+0x320>
			sect += csect;
 8011f02:	697a      	ldr	r2, [r7, #20]
 8011f04:	69bb      	ldr	r3, [r7, #24]
 8011f06:	4413      	add	r3, r2
 8011f08:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	899b      	ldrh	r3, [r3, #12]
 8011f0e:	461a      	mov	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f16:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011f18:	6a3b      	ldr	r3, [r7, #32]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d043      	beq.n	8011fa6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011f1e:	69ba      	ldr	r2, [r7, #24]
 8011f20:	6a3b      	ldr	r3, [r7, #32]
 8011f22:	4413      	add	r3, r2
 8011f24:	693a      	ldr	r2, [r7, #16]
 8011f26:	8952      	ldrh	r2, [r2, #10]
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	d905      	bls.n	8011f38 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	895b      	ldrh	r3, [r3, #10]
 8011f30:	461a      	mov	r2, r3
 8011f32:	69bb      	ldr	r3, [r7, #24]
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	7858      	ldrb	r0, [r3, #1]
 8011f3c:	6a3b      	ldr	r3, [r7, #32]
 8011f3e:	697a      	ldr	r2, [r7, #20]
 8011f40:	69f9      	ldr	r1, [r7, #28]
 8011f42:	f7fd fb23 	bl	800f58c <disk_write>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d004      	beq.n	8011f56 <f_write+0x1e2>
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2201      	movs	r2, #1
 8011f50:	755a      	strb	r2, [r3, #21]
 8011f52:	2301      	movs	r3, #1
 8011f54:	e09e      	b.n	8012094 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6a1a      	ldr	r2, [r3, #32]
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	6a3a      	ldr	r2, [r7, #32]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d918      	bls.n	8011f96 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	6a1a      	ldr	r2, [r3, #32]
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	693a      	ldr	r2, [r7, #16]
 8011f74:	8992      	ldrh	r2, [r2, #12]
 8011f76:	fb02 f303 	mul.w	r3, r2, r3
 8011f7a:	69fa      	ldr	r2, [r7, #28]
 8011f7c:	18d1      	adds	r1, r2, r3
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	899b      	ldrh	r3, [r3, #12]
 8011f82:	461a      	mov	r2, r3
 8011f84:	f7fd fbc2 	bl	800f70c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	7d1b      	ldrb	r3, [r3, #20]
 8011f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f90:	b2da      	uxtb	r2, r3
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011f96:	693b      	ldr	r3, [r7, #16]
 8011f98:	899b      	ldrh	r3, [r3, #12]
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	6a3b      	ldr	r3, [r7, #32]
 8011f9e:	fb02 f303 	mul.w	r3, r2, r3
 8011fa2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011fa4:	e04b      	b.n	801203e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	6a1b      	ldr	r3, [r3, #32]
 8011faa:	697a      	ldr	r2, [r7, #20]
 8011fac:	429a      	cmp	r2, r3
 8011fae:	d016      	beq.n	8011fde <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	699a      	ldr	r2, [r3, #24]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d210      	bcs.n	8011fde <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	7858      	ldrb	r0, [r3, #1]
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	697a      	ldr	r2, [r7, #20]
 8011fca:	f7fd fabf 	bl	800f54c <disk_read>
 8011fce:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d004      	beq.n	8011fde <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	755a      	strb	r2, [r3, #21]
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e05a      	b.n	8012094 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	697a      	ldr	r2, [r7, #20]
 8011fe2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	899b      	ldrh	r3, [r3, #12]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	699b      	ldr	r3, [r3, #24]
 8011fee:	693a      	ldr	r2, [r7, #16]
 8011ff0:	8992      	ldrh	r2, [r2, #12]
 8011ff2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ff6:	fb01 f202 	mul.w	r2, r1, r2
 8011ffa:	1a9b      	subs	r3, r3, r2
 8011ffc:	1ac3      	subs	r3, r0, r3
 8011ffe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	429a      	cmp	r2, r3
 8012006:	d901      	bls.n	801200c <f_write+0x298>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	699b      	ldr	r3, [r3, #24]
 8012016:	693a      	ldr	r2, [r7, #16]
 8012018:	8992      	ldrh	r2, [r2, #12]
 801201a:	fbb3 f0f2 	udiv	r0, r3, r2
 801201e:	fb00 f202 	mul.w	r2, r0, r2
 8012022:	1a9b      	subs	r3, r3, r2
 8012024:	440b      	add	r3, r1
 8012026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012028:	69f9      	ldr	r1, [r7, #28]
 801202a:	4618      	mov	r0, r3
 801202c:	f7fd fb6e 	bl	800f70c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	7d1b      	ldrb	r3, [r3, #20]
 8012034:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012038:	b2da      	uxtb	r2, r3
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801203e:	69fa      	ldr	r2, [r7, #28]
 8012040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012042:	4413      	add	r3, r2
 8012044:	61fb      	str	r3, [r7, #28]
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	699a      	ldr	r2, [r3, #24]
 801204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801204c:	441a      	add	r2, r3
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	619a      	str	r2, [r3, #24]
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	68da      	ldr	r2, [r3, #12]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	699b      	ldr	r3, [r3, #24]
 801205a:	429a      	cmp	r2, r3
 801205c:	bf38      	it	cc
 801205e:	461a      	movcc	r2, r3
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	60da      	str	r2, [r3, #12]
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801206a:	441a      	add	r2, r3
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	601a      	str	r2, [r3, #0]
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012074:	1ad3      	subs	r3, r2, r3
 8012076:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2b00      	cmp	r3, #0
 801207c:	f47f aeb5 	bne.w	8011dea <f_write+0x76>
 8012080:	e000      	b.n	8012084 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012082:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	7d1b      	ldrb	r3, [r3, #20]
 8012088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801208c:	b2da      	uxtb	r2, r3
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012092:	2300      	movs	r3, #0
}
 8012094:	4618      	mov	r0, r3
 8012096:	3730      	adds	r7, #48	@ 0x30
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}

0801209c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b086      	sub	sp, #24
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f107 0208 	add.w	r2, r7, #8
 80120aa:	4611      	mov	r1, r2
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7ff fc1d 	bl	80118ec <validate>
 80120b2:	4603      	mov	r3, r0
 80120b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80120b6:	7dfb      	ldrb	r3, [r7, #23]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d168      	bne.n	801218e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	7d1b      	ldrb	r3, [r3, #20]
 80120c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d062      	beq.n	801218e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	7d1b      	ldrb	r3, [r3, #20]
 80120cc:	b25b      	sxtb	r3, r3
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	da15      	bge.n	80120fe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	7858      	ldrb	r0, [r3, #1]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6a1a      	ldr	r2, [r3, #32]
 80120e0:	2301      	movs	r3, #1
 80120e2:	f7fd fa53 	bl	800f58c <disk_write>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d001      	beq.n	80120f0 <f_sync+0x54>
 80120ec:	2301      	movs	r3, #1
 80120ee:	e04f      	b.n	8012190 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	7d1b      	ldrb	r3, [r3, #20]
 80120f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80120f8:	b2da      	uxtb	r2, r3
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80120fe:	f7fc fcc1 	bl	800ea84 <get_fattime>
 8012102:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012104:	68ba      	ldr	r2, [r7, #8]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801210a:	4619      	mov	r1, r3
 801210c:	4610      	mov	r0, r2
 801210e:	f7fd fd2b 	bl	800fb68 <move_window>
 8012112:	4603      	mov	r3, r0
 8012114:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012116:	7dfb      	ldrb	r3, [r7, #23]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d138      	bne.n	801218e <f_sync+0xf2>
					dir = fp->dir_ptr;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012120:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	330b      	adds	r3, #11
 8012126:	781a      	ldrb	r2, [r3, #0]
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	330b      	adds	r3, #11
 801212c:	f042 0220 	orr.w	r2, r2, #32
 8012130:	b2d2      	uxtb	r2, r2
 8012132:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6818      	ldr	r0, [r3, #0]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	689b      	ldr	r3, [r3, #8]
 801213c:	461a      	mov	r2, r3
 801213e:	68f9      	ldr	r1, [r7, #12]
 8012140:	f7fe fab6 	bl	80106b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	f103 021c 	add.w	r2, r3, #28
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	68db      	ldr	r3, [r3, #12]
 801214e:	4619      	mov	r1, r3
 8012150:	4610      	mov	r0, r2
 8012152:	f7fd faaf 	bl	800f6b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	3316      	adds	r3, #22
 801215a:	6939      	ldr	r1, [r7, #16]
 801215c:	4618      	mov	r0, r3
 801215e:	f7fd faa9 	bl	800f6b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	3312      	adds	r3, #18
 8012166:	2100      	movs	r1, #0
 8012168:	4618      	mov	r0, r3
 801216a:	f7fd fa88 	bl	800f67e <st_word>
					fs->wflag = 1;
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	2201      	movs	r2, #1
 8012172:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	4618      	mov	r0, r3
 8012178:	f7fd fd24 	bl	800fbc4 <sync_fs>
 801217c:	4603      	mov	r3, r0
 801217e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	7d1b      	ldrb	r3, [r3, #20]
 8012184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012188:	b2da      	uxtb	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012190:	4618      	mov	r0, r3
 8012192:	3718      	adds	r7, #24
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f7ff ff7b 	bl	801209c <f_sync>
 80121a6:	4603      	mov	r3, r0
 80121a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80121aa:	7bfb      	ldrb	r3, [r7, #15]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d118      	bne.n	80121e2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f107 0208 	add.w	r2, r7, #8
 80121b6:	4611      	mov	r1, r2
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7ff fb97 	bl	80118ec <validate>
 80121be:	4603      	mov	r3, r0
 80121c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80121c2:	7bfb      	ldrb	r3, [r7, #15]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d10c      	bne.n	80121e2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	691b      	ldr	r3, [r3, #16]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fd fc27 	bl	800fa20 <dec_lock>
 80121d2:	4603      	mov	r3, r0
 80121d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80121d6:	7bfb      	ldrb	r3, [r7, #15]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d102      	bne.n	80121e2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80121e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3710      	adds	r7, #16
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b090      	sub	sp, #64	@ 0x40
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f107 0208 	add.w	r2, r7, #8
 80121fc:	4611      	mov	r1, r2
 80121fe:	4618      	mov	r0, r3
 8012200:	f7ff fb74 	bl	80118ec <validate>
 8012204:	4603      	mov	r3, r0
 8012206:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801220a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801220e:	2b00      	cmp	r3, #0
 8012210:	d103      	bne.n	801221a <f_lseek+0x2e>
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	7d5b      	ldrb	r3, [r3, #21]
 8012216:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801221a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801221e:	2b00      	cmp	r3, #0
 8012220:	d002      	beq.n	8012228 <f_lseek+0x3c>
 8012222:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012226:	e201      	b.n	801262c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801222c:	2b00      	cmp	r3, #0
 801222e:	f000 80d9 	beq.w	80123e4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012238:	d15a      	bne.n	80122f0 <f_lseek+0x104>
			tbl = fp->cltbl;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801223e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012242:	1d1a      	adds	r2, r3, #4
 8012244:	627a      	str	r2, [r7, #36]	@ 0x24
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	617b      	str	r3, [r7, #20]
 801224a:	2302      	movs	r3, #2
 801224c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	689b      	ldr	r3, [r3, #8]
 8012252:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8012254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012256:	2b00      	cmp	r3, #0
 8012258:	d03a      	beq.n	80122d0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801225a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801225c:	613b      	str	r3, [r7, #16]
 801225e:	2300      	movs	r3, #0
 8012260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012264:	3302      	adds	r3, #2
 8012266:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8012268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801226a:	60fb      	str	r3, [r7, #12]
 801226c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801226e:	3301      	adds	r3, #1
 8012270:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012276:	4618      	mov	r0, r3
 8012278:	f7fd fd33 	bl	800fce2 <get_fat>
 801227c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801227e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012280:	2b01      	cmp	r3, #1
 8012282:	d804      	bhi.n	801228e <f_lseek+0xa2>
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2202      	movs	r2, #2
 8012288:	755a      	strb	r2, [r3, #21]
 801228a:	2302      	movs	r3, #2
 801228c:	e1ce      	b.n	801262c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012294:	d104      	bne.n	80122a0 <f_lseek+0xb4>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2201      	movs	r2, #1
 801229a:	755a      	strb	r2, [r3, #21]
 801229c:	2301      	movs	r3, #1
 801229e:	e1c5      	b.n	801262c <f_lseek+0x440>
					} while (cl == pcl + 1);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	3301      	adds	r3, #1
 80122a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d0de      	beq.n	8012268 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80122aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d809      	bhi.n	80122c6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80122b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b4:	1d1a      	adds	r2, r3, #4
 80122b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80122b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122ba:	601a      	str	r2, [r3, #0]
 80122bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122be:	1d1a      	adds	r2, r3, #4
 80122c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80122c2:	693a      	ldr	r2, [r7, #16]
 80122c4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	6a1b      	ldr	r3, [r3, #32]
 80122ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d3c4      	bcc.n	801225a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122d6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80122d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d803      	bhi.n	80122e8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80122e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e2:	2200      	movs	r2, #0
 80122e4:	601a      	str	r2, [r3, #0]
 80122e6:	e19f      	b.n	8012628 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80122e8:	2311      	movs	r3, #17
 80122ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80122ee:	e19b      	b.n	8012628 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	68db      	ldr	r3, [r3, #12]
 80122f4:	683a      	ldr	r2, [r7, #0]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d902      	bls.n	8012300 <f_lseek+0x114>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	683a      	ldr	r2, [r7, #0]
 8012304:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	2b00      	cmp	r3, #0
 801230a:	f000 818d 	beq.w	8012628 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	3b01      	subs	r3, #1
 8012312:	4619      	mov	r1, r3
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7fd ffce 	bl	80102b6 <clmt_clust>
 801231a:	4602      	mov	r2, r0
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012320:	68ba      	ldr	r2, [r7, #8]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	69db      	ldr	r3, [r3, #28]
 8012326:	4619      	mov	r1, r3
 8012328:	4610      	mov	r0, r2
 801232a:	f7fd fcbb 	bl	800fca4 <clust2sect>
 801232e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d104      	bne.n	8012340 <f_lseek+0x154>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2202      	movs	r2, #2
 801233a:	755a      	strb	r2, [r3, #21]
 801233c:	2302      	movs	r3, #2
 801233e:	e175      	b.n	801262c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	3b01      	subs	r3, #1
 8012344:	68ba      	ldr	r2, [r7, #8]
 8012346:	8992      	ldrh	r2, [r2, #12]
 8012348:	fbb3 f3f2 	udiv	r3, r3, r2
 801234c:	68ba      	ldr	r2, [r7, #8]
 801234e:	8952      	ldrh	r2, [r2, #10]
 8012350:	3a01      	subs	r2, #1
 8012352:	4013      	ands	r3, r2
 8012354:	69ba      	ldr	r2, [r7, #24]
 8012356:	4413      	add	r3, r2
 8012358:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	699b      	ldr	r3, [r3, #24]
 801235e:	68ba      	ldr	r2, [r7, #8]
 8012360:	8992      	ldrh	r2, [r2, #12]
 8012362:	fbb3 f1f2 	udiv	r1, r3, r2
 8012366:	fb01 f202 	mul.w	r2, r1, r2
 801236a:	1a9b      	subs	r3, r3, r2
 801236c:	2b00      	cmp	r3, #0
 801236e:	f000 815b 	beq.w	8012628 <f_lseek+0x43c>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6a1b      	ldr	r3, [r3, #32]
 8012376:	69ba      	ldr	r2, [r7, #24]
 8012378:	429a      	cmp	r2, r3
 801237a:	f000 8155 	beq.w	8012628 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	7d1b      	ldrb	r3, [r3, #20]
 8012382:	b25b      	sxtb	r3, r3
 8012384:	2b00      	cmp	r3, #0
 8012386:	da18      	bge.n	80123ba <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	7858      	ldrb	r0, [r3, #1]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	6a1a      	ldr	r2, [r3, #32]
 8012396:	2301      	movs	r3, #1
 8012398:	f7fd f8f8 	bl	800f58c <disk_write>
 801239c:	4603      	mov	r3, r0
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d004      	beq.n	80123ac <f_lseek+0x1c0>
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2201      	movs	r2, #1
 80123a6:	755a      	strb	r2, [r3, #21]
 80123a8:	2301      	movs	r3, #1
 80123aa:	e13f      	b.n	801262c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	7d1b      	ldrb	r3, [r3, #20]
 80123b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80123b4:	b2da      	uxtb	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	7858      	ldrb	r0, [r3, #1]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80123c4:	2301      	movs	r3, #1
 80123c6:	69ba      	ldr	r2, [r7, #24]
 80123c8:	f7fd f8c0 	bl	800f54c <disk_read>
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d004      	beq.n	80123dc <f_lseek+0x1f0>
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2201      	movs	r2, #1
 80123d6:	755a      	strb	r2, [r3, #21]
 80123d8:	2301      	movs	r3, #1
 80123da:	e127      	b.n	801262c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	69ba      	ldr	r2, [r7, #24]
 80123e0:	621a      	str	r2, [r3, #32]
 80123e2:	e121      	b.n	8012628 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	683a      	ldr	r2, [r7, #0]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d908      	bls.n	8012400 <f_lseek+0x214>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	7d1b      	ldrb	r3, [r3, #20]
 80123f2:	f003 0302 	and.w	r3, r3, #2
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d102      	bne.n	8012400 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	68db      	ldr	r3, [r3, #12]
 80123fe:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	699b      	ldr	r3, [r3, #24]
 8012404:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012406:	2300      	movs	r3, #0
 8012408:	637b      	str	r3, [r7, #52]	@ 0x34
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801240e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	2b00      	cmp	r3, #0
 8012414:	f000 80b5 	beq.w	8012582 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	895b      	ldrh	r3, [r3, #10]
 801241c:	461a      	mov	r2, r3
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	899b      	ldrh	r3, [r3, #12]
 8012422:	fb02 f303 	mul.w	r3, r2, r3
 8012426:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012428:	6a3b      	ldr	r3, [r7, #32]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d01b      	beq.n	8012466 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	1e5a      	subs	r2, r3, #1
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	fbb2 f2f3 	udiv	r2, r2, r3
 8012438:	6a3b      	ldr	r3, [r7, #32]
 801243a:	1e59      	subs	r1, r3, #1
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012442:	429a      	cmp	r2, r3
 8012444:	d30f      	bcc.n	8012466 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012446:	6a3b      	ldr	r3, [r7, #32]
 8012448:	1e5a      	subs	r2, r3, #1
 801244a:	69fb      	ldr	r3, [r7, #28]
 801244c:	425b      	negs	r3, r3
 801244e:	401a      	ands	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	699b      	ldr	r3, [r3, #24]
 8012458:	683a      	ldr	r2, [r7, #0]
 801245a:	1ad3      	subs	r3, r2, r3
 801245c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	69db      	ldr	r3, [r3, #28]
 8012462:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012464:	e022      	b.n	80124ac <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	689b      	ldr	r3, [r3, #8]
 801246a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801246c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801246e:	2b00      	cmp	r3, #0
 8012470:	d119      	bne.n	80124a6 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2100      	movs	r1, #0
 8012476:	4618      	mov	r0, r3
 8012478:	f7fd fe85 	bl	8010186 <create_chain>
 801247c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012480:	2b01      	cmp	r3, #1
 8012482:	d104      	bne.n	801248e <f_lseek+0x2a2>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2202      	movs	r2, #2
 8012488:	755a      	strb	r2, [r3, #21]
 801248a:	2302      	movs	r3, #2
 801248c:	e0ce      	b.n	801262c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012494:	d104      	bne.n	80124a0 <f_lseek+0x2b4>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2201      	movs	r2, #1
 801249a:	755a      	strb	r2, [r3, #21]
 801249c:	2301      	movs	r3, #1
 801249e:	e0c5      	b.n	801262c <f_lseek+0x440>
					fp->obj.sclust = clst;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80124a4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80124aa:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80124ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d067      	beq.n	8012582 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80124b2:	e03a      	b.n	801252a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80124b4:	683a      	ldr	r2, [r7, #0]
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	1ad3      	subs	r3, r2, r3
 80124ba:	603b      	str	r3, [r7, #0]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	699a      	ldr	r2, [r3, #24]
 80124c0:	69fb      	ldr	r3, [r7, #28]
 80124c2:	441a      	add	r2, r3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	7d1b      	ldrb	r3, [r3, #20]
 80124cc:	f003 0302 	and.w	r3, r3, #2
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00b      	beq.n	80124ec <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fd fe54 	bl	8010186 <create_chain>
 80124de:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80124e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d108      	bne.n	80124f8 <f_lseek+0x30c>
							ofs = 0; break;
 80124e6:	2300      	movs	r3, #0
 80124e8:	603b      	str	r3, [r7, #0]
 80124ea:	e022      	b.n	8012532 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fd fbf6 	bl	800fce2 <get_fat>
 80124f6:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80124f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124fe:	d104      	bne.n	801250a <f_lseek+0x31e>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2201      	movs	r2, #1
 8012504:	755a      	strb	r2, [r3, #21]
 8012506:	2301      	movs	r3, #1
 8012508:	e090      	b.n	801262c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801250a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801250c:	2b01      	cmp	r3, #1
 801250e:	d904      	bls.n	801251a <f_lseek+0x32e>
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	6a1b      	ldr	r3, [r3, #32]
 8012514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012516:	429a      	cmp	r2, r3
 8012518:	d304      	bcc.n	8012524 <f_lseek+0x338>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2202      	movs	r2, #2
 801251e:	755a      	strb	r2, [r3, #21]
 8012520:	2302      	movs	r3, #2
 8012522:	e083      	b.n	801262c <f_lseek+0x440>
					fp->clust = clst;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012528:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801252a:	683a      	ldr	r2, [r7, #0]
 801252c:	69fb      	ldr	r3, [r7, #28]
 801252e:	429a      	cmp	r2, r3
 8012530:	d8c0      	bhi.n	80124b4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	699a      	ldr	r2, [r3, #24]
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	441a      	add	r2, r3
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801253e:	68bb      	ldr	r3, [r7, #8]
 8012540:	899b      	ldrh	r3, [r3, #12]
 8012542:	461a      	mov	r2, r3
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	fbb3 f1f2 	udiv	r1, r3, r2
 801254a:	fb01 f202 	mul.w	r2, r1, r2
 801254e:	1a9b      	subs	r3, r3, r2
 8012550:	2b00      	cmp	r3, #0
 8012552:	d016      	beq.n	8012582 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012558:	4618      	mov	r0, r3
 801255a:	f7fd fba3 	bl	800fca4 <clust2sect>
 801255e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012562:	2b00      	cmp	r3, #0
 8012564:	d104      	bne.n	8012570 <f_lseek+0x384>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2202      	movs	r2, #2
 801256a:	755a      	strb	r2, [r3, #21]
 801256c:	2302      	movs	r3, #2
 801256e:	e05d      	b.n	801262c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	899b      	ldrh	r3, [r3, #12]
 8012574:	461a      	mov	r2, r3
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	fbb3 f3f2 	udiv	r3, r3, r2
 801257c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801257e:	4413      	add	r3, r2
 8012580:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	699a      	ldr	r2, [r3, #24]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	429a      	cmp	r2, r3
 801258c:	d90a      	bls.n	80125a4 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	699a      	ldr	r2, [r3, #24]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	7d1b      	ldrb	r3, [r3, #20]
 801259a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801259e:	b2da      	uxtb	r2, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	699b      	ldr	r3, [r3, #24]
 80125a8:	68ba      	ldr	r2, [r7, #8]
 80125aa:	8992      	ldrh	r2, [r2, #12]
 80125ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80125b0:	fb01 f202 	mul.w	r2, r1, r2
 80125b4:	1a9b      	subs	r3, r3, r2
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d036      	beq.n	8012628 <f_lseek+0x43c>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6a1b      	ldr	r3, [r3, #32]
 80125be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d031      	beq.n	8012628 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	7d1b      	ldrb	r3, [r3, #20]
 80125c8:	b25b      	sxtb	r3, r3
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	da18      	bge.n	8012600 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	7858      	ldrb	r0, [r3, #1]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	6a1a      	ldr	r2, [r3, #32]
 80125dc:	2301      	movs	r3, #1
 80125de:	f7fc ffd5 	bl	800f58c <disk_write>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d004      	beq.n	80125f2 <f_lseek+0x406>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2201      	movs	r2, #1
 80125ec:	755a      	strb	r2, [r3, #21]
 80125ee:	2301      	movs	r3, #1
 80125f0:	e01c      	b.n	801262c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	7d1b      	ldrb	r3, [r3, #20]
 80125f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	7858      	ldrb	r0, [r3, #1]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801260a:	2301      	movs	r3, #1
 801260c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801260e:	f7fc ff9d 	bl	800f54c <disk_read>
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	d004      	beq.n	8012622 <f_lseek+0x436>
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2201      	movs	r2, #1
 801261c:	755a      	strb	r2, [r3, #21]
 801261e:	2301      	movs	r3, #1
 8012620:	e004      	b.n	801262c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012626:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012628:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801262c:	4618      	mov	r0, r3
 801262e:	3740      	adds	r7, #64	@ 0x40
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	460b      	mov	r3, r1
 801263e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8012640:	78fb      	ldrb	r3, [r7, #3]
 8012642:	2b0a      	cmp	r3, #10
 8012644:	d103      	bne.n	801264e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8012646:	210d      	movs	r1, #13
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7ff fff3 	bl	8012634 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	685b      	ldr	r3, [r3, #4]
 8012652:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2b00      	cmp	r3, #0
 8012658:	db25      	blt.n	80126a6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	1c5a      	adds	r2, r3, #1
 801265e:	60fa      	str	r2, [r7, #12]
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	4413      	add	r3, r2
 8012664:	78fa      	ldrb	r2, [r7, #3]
 8012666:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	2b3c      	cmp	r3, #60	@ 0x3c
 801266c:	dd12      	ble.n	8012694 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6818      	ldr	r0, [r3, #0]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f103 010c 	add.w	r1, r3, #12
 8012678:	68fa      	ldr	r2, [r7, #12]
 801267a:	f107 0308 	add.w	r3, r7, #8
 801267e:	f7ff fb79 	bl	8011d74 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8012682:	68ba      	ldr	r2, [r7, #8]
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	429a      	cmp	r2, r3
 8012688:	d101      	bne.n	801268e <putc_bfd+0x5a>
 801268a:	2300      	movs	r3, #0
 801268c:	e001      	b.n	8012692 <putc_bfd+0x5e>
 801268e:	f04f 33ff 	mov.w	r3, #4294967295
 8012692:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	68fa      	ldr	r2, [r7, #12]
 8012698:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	689b      	ldr	r3, [r3, #8]
 801269e:	1c5a      	adds	r2, r3, #1
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	609a      	str	r2, [r3, #8]
 80126a4:	e000      	b.n	80126a8 <putc_bfd+0x74>
	if (i < 0) return;
 80126a6:	bf00      	nop
}
 80126a8:	3710      	adds	r7, #16
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}

080126ae <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80126ae:	b580      	push	{r7, lr}
 80126b0:	b084      	sub	sp, #16
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	db16      	blt.n	80126ec <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6818      	ldr	r0, [r3, #0]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f103 010c 	add.w	r1, r3, #12
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	461a      	mov	r2, r3
 80126ce:	f107 030c 	add.w	r3, r7, #12
 80126d2:	f7ff fb4f 	bl	8011d74 <f_write>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d107      	bne.n	80126ec <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	68fa      	ldr	r2, [r7, #12]
 80126e2:	4293      	cmp	r3, r2
 80126e4:	d102      	bne.n	80126ec <putc_flush+0x3e>
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	689b      	ldr	r3, [r3, #8]
 80126ea:	e001      	b.n	80126f0 <putc_flush+0x42>
	return EOF;
 80126ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3710      	adds	r7, #16
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	683a      	ldr	r2, [r7, #0]
 8012706:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	605a      	str	r2, [r3, #4]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	685a      	ldr	r2, [r3, #4]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	609a      	str	r2, [r3, #8]
}
 8012716:	bf00      	nop
 8012718:	370c      	adds	r7, #12
 801271a:	46bd      	mov	sp, r7
 801271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012720:	4770      	bx	lr
	...

08012724 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8012724:	b40e      	push	{r1, r2, r3}
 8012726:	b580      	push	{r7, lr}
 8012728:	b0a7      	sub	sp, #156	@ 0x9c
 801272a:	af00      	add	r7, sp, #0
 801272c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801272e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012732:	6879      	ldr	r1, [r7, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff ffdf 	bl	80126f8 <putc_init>

	va_start(arp, fmt);
 801273a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 801273e:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8012740:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012744:	1c5a      	adds	r2, r3, #1
 8012746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8012750:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012754:	2b00      	cmp	r3, #0
 8012756:	f000 81f2 	beq.w	8012b3e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801275a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801275e:	2b25      	cmp	r3, #37	@ 0x25
 8012760:	d008      	beq.n	8012774 <f_printf+0x50>
			putc_bfd(&pb, c);
 8012762:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8012766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801276a:	4611      	mov	r1, r2
 801276c:	4618      	mov	r0, r3
 801276e:	f7ff ff61 	bl	8012634 <putc_bfd>
			continue;
 8012772:	e1e3      	b.n	8012b3c <f_printf+0x418>
		}
		w = f = 0;
 8012774:	2300      	movs	r3, #0
 8012776:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801277a:	2300      	movs	r3, #0
 801277c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8012780:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012784:	1c5a      	adds	r2, r3, #1
 8012786:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8012790:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012794:	2b30      	cmp	r3, #48	@ 0x30
 8012796:	d10b      	bne.n	80127b0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8012798:	2301      	movs	r3, #1
 801279a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801279e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80127a2:	1c5a      	adds	r2, r3, #1
 80127a4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80127ae:	e024      	b.n	80127fa <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80127b0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80127b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80127b6:	d120      	bne.n	80127fa <f_printf+0xd6>
				f = 2; c = *fmt++;
 80127b8:	2302      	movs	r3, #2
 80127ba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80127be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80127c2:	1c5a      	adds	r2, r3, #1
 80127c4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80127ce:	e014      	b.n	80127fa <f_printf+0xd6>
			w = w * 10 + c - '0';
 80127d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80127d4:	4613      	mov	r3, r2
 80127d6:	009b      	lsls	r3, r3, #2
 80127d8:	4413      	add	r3, r2
 80127da:	005b      	lsls	r3, r3, #1
 80127dc:	461a      	mov	r2, r3
 80127de:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80127e2:	4413      	add	r3, r2
 80127e4:	3b30      	subs	r3, #48	@ 0x30
 80127e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 80127ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80127ee:	1c5a      	adds	r2, r3, #1
 80127f0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 80127fa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80127fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8012800:	d903      	bls.n	801280a <f_printf+0xe6>
 8012802:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012806:	2b39      	cmp	r3, #57	@ 0x39
 8012808:	d9e2      	bls.n	80127d0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801280a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801280e:	2b6c      	cmp	r3, #108	@ 0x6c
 8012810:	d003      	beq.n	801281a <f_printf+0xf6>
 8012812:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012816:	2b4c      	cmp	r3, #76	@ 0x4c
 8012818:	d10d      	bne.n	8012836 <f_printf+0x112>
			f |= 4; c = *fmt++;
 801281a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801281e:	f043 0304 	orr.w	r3, r3, #4
 8012822:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801282a:	1c5a      	adds	r2, r3, #1
 801282c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8012836:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801283a:	2b00      	cmp	r3, #0
 801283c:	f000 8181 	beq.w	8012b42 <f_printf+0x41e>
		d = c;
 8012840:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012844:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8012848:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801284c:	2b60      	cmp	r3, #96	@ 0x60
 801284e:	d908      	bls.n	8012862 <f_printf+0x13e>
 8012850:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012854:	2b7a      	cmp	r3, #122	@ 0x7a
 8012856:	d804      	bhi.n	8012862 <f_printf+0x13e>
 8012858:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801285c:	3b20      	subs	r3, #32
 801285e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8012862:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012866:	3b42      	subs	r3, #66	@ 0x42
 8012868:	2b16      	cmp	r3, #22
 801286a:	f200 8098 	bhi.w	801299e <f_printf+0x27a>
 801286e:	a201      	add	r2, pc, #4	@ (adr r2, 8012874 <f_printf+0x150>)
 8012870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012874:	0801297f 	.word	0x0801297f
 8012878:	08012967 	.word	0x08012967
 801287c:	0801298f 	.word	0x0801298f
 8012880:	0801299f 	.word	0x0801299f
 8012884:	0801299f 	.word	0x0801299f
 8012888:	0801299f 	.word	0x0801299f
 801288c:	0801299f 	.word	0x0801299f
 8012890:	0801299f 	.word	0x0801299f
 8012894:	0801299f 	.word	0x0801299f
 8012898:	0801299f 	.word	0x0801299f
 801289c:	0801299f 	.word	0x0801299f
 80128a0:	0801299f 	.word	0x0801299f
 80128a4:	0801299f 	.word	0x0801299f
 80128a8:	08012987 	.word	0x08012987
 80128ac:	0801299f 	.word	0x0801299f
 80128b0:	0801299f 	.word	0x0801299f
 80128b4:	0801299f 	.word	0x0801299f
 80128b8:	080128d1 	.word	0x080128d1
 80128bc:	0801299f 	.word	0x0801299f
 80128c0:	0801298f 	.word	0x0801298f
 80128c4:	0801299f 	.word	0x0801299f
 80128c8:	0801299f 	.word	0x0801299f
 80128cc:	08012997 	.word	0x08012997
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80128d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128d2:	1d1a      	adds	r2, r3, #4
 80128d4:	67ba      	str	r2, [r7, #120]	@ 0x78
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 80128da:	2300      	movs	r3, #0
 80128dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80128e0:	e004      	b.n	80128ec <f_printf+0x1c8>
 80128e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80128e6:	3301      	adds	r3, #1
 80128e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80128ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80128ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80128f2:	4413      	add	r3, r2
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1f3      	bne.n	80128e2 <f_printf+0x1be>
			if (!(f & 2)) {
 80128fa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80128fe:	f003 0302 	and.w	r3, r3, #2
 8012902:	2b00      	cmp	r3, #0
 8012904:	d11a      	bne.n	801293c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8012906:	e005      	b.n	8012914 <f_printf+0x1f0>
 8012908:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801290c:	2120      	movs	r1, #32
 801290e:	4618      	mov	r0, r3
 8012910:	f7ff fe90 	bl	8012634 <putc_bfd>
 8012914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012918:	1c5a      	adds	r2, r3, #1
 801291a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801291e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012922:	429a      	cmp	r2, r3
 8012924:	d8f0      	bhi.n	8012908 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8012926:	e009      	b.n	801293c <f_printf+0x218>
 8012928:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801292a:	1c5a      	adds	r2, r3, #1
 801292c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801292e:	781a      	ldrb	r2, [r3, #0]
 8012930:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012934:	4611      	mov	r1, r2
 8012936:	4618      	mov	r0, r3
 8012938:	f7ff fe7c 	bl	8012634 <putc_bfd>
 801293c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d1f1      	bne.n	8012928 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8012944:	e005      	b.n	8012952 <f_printf+0x22e>
 8012946:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801294a:	2120      	movs	r1, #32
 801294c:	4618      	mov	r0, r3
 801294e:	f7ff fe71 	bl	8012634 <putc_bfd>
 8012952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012956:	1c5a      	adds	r2, r3, #1
 8012958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801295c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012960:	429a      	cmp	r2, r3
 8012962:	d8f0      	bhi.n	8012946 <f_printf+0x222>
			continue;
 8012964:	e0ea      	b.n	8012b3c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8012966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012968:	1d1a      	adds	r2, r3, #4
 801296a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	b2da      	uxtb	r2, r3
 8012970:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012974:	4611      	mov	r1, r2
 8012976:	4618      	mov	r0, r3
 8012978:	f7ff fe5c 	bl	8012634 <putc_bfd>
 801297c:	e0de      	b.n	8012b3c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801297e:	2302      	movs	r3, #2
 8012980:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012984:	e014      	b.n	80129b0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8012986:	2308      	movs	r3, #8
 8012988:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 801298c:	e010      	b.n	80129b0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801298e:	230a      	movs	r3, #10
 8012990:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012994:	e00c      	b.n	80129b0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8012996:	2310      	movs	r3, #16
 8012998:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 801299c:	e008      	b.n	80129b0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801299e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80129a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80129a6:	4611      	mov	r1, r2
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7ff fe43 	bl	8012634 <putc_bfd>
 80129ae:	e0c5      	b.n	8012b3c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80129b0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80129b4:	f003 0304 	and.w	r3, r3, #4
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d004      	beq.n	80129c6 <f_printf+0x2a2>
 80129bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129be:	1d1a      	adds	r2, r3, #4
 80129c0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	e00c      	b.n	80129e0 <f_printf+0x2bc>
 80129c6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80129ca:	2b44      	cmp	r3, #68	@ 0x44
 80129cc:	d104      	bne.n	80129d8 <f_printf+0x2b4>
 80129ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129d0:	1d1a      	adds	r2, r3, #4
 80129d2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	e003      	b.n	80129e0 <f_printf+0x2bc>
 80129d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80129da:	1d1a      	adds	r2, r3, #4
 80129dc:	67ba      	str	r2, [r7, #120]	@ 0x78
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80129e4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80129e8:	2b44      	cmp	r3, #68	@ 0x44
 80129ea:	d10e      	bne.n	8012a0a <f_printf+0x2e6>
 80129ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	da0a      	bge.n	8012a0a <f_printf+0x2e6>
			v = 0 - v;
 80129f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80129f8:	425b      	negs	r3, r3
 80129fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 80129fe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012a02:	f043 0308 	orr.w	r3, r3, #8
 8012a06:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8012a10:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8012a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012a18:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a1c:	fb01 f202 	mul.w	r2, r1, r2
 8012a20:	1a9b      	subs	r3, r3, r2
 8012a22:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8012a26:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8012a2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8012a36:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012a3a:	2b09      	cmp	r3, #9
 8012a3c:	d90b      	bls.n	8012a56 <f_printf+0x332>
 8012a3e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012a42:	2b78      	cmp	r3, #120	@ 0x78
 8012a44:	d101      	bne.n	8012a4a <f_printf+0x326>
 8012a46:	2227      	movs	r2, #39	@ 0x27
 8012a48:	e000      	b.n	8012a4c <f_printf+0x328>
 8012a4a:	2207      	movs	r2, #7
 8012a4c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012a50:	4413      	add	r3, r2
 8012a52:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8012a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012a5a:	1c5a      	adds	r2, r3, #1
 8012a5c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012a60:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012a64:	3230      	adds	r2, #48	@ 0x30
 8012a66:	b2d2      	uxtb	r2, r2
 8012a68:	3398      	adds	r3, #152	@ 0x98
 8012a6a:	443b      	add	r3, r7
 8012a6c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8012a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d003      	beq.n	8012a80 <f_printf+0x35c>
 8012a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012a7c:	2b1f      	cmp	r3, #31
 8012a7e:	d9c7      	bls.n	8012a10 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8012a80:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012a84:	f003 0308 	and.w	r3, r3, #8
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d009      	beq.n	8012aa0 <f_printf+0x37c>
 8012a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012a90:	1c5a      	adds	r2, r3, #1
 8012a92:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012a96:	3398      	adds	r3, #152	@ 0x98
 8012a98:	443b      	add	r3, r7
 8012a9a:	222d      	movs	r2, #45	@ 0x2d
 8012a9c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8012aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012aa4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012aa8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012aac:	f003 0301 	and.w	r3, r3, #1
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d001      	beq.n	8012ab8 <f_printf+0x394>
 8012ab4:	2330      	movs	r3, #48	@ 0x30
 8012ab6:	e000      	b.n	8012aba <f_printf+0x396>
 8012ab8:	2320      	movs	r3, #32
 8012aba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8012abe:	e007      	b.n	8012ad0 <f_printf+0x3ac>
 8012ac0:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012ac8:	4611      	mov	r1, r2
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7ff fdb2 	bl	8012634 <putc_bfd>
 8012ad0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012ad4:	f003 0302 	and.w	r3, r3, #2
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d108      	bne.n	8012aee <f_printf+0x3ca>
 8012adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012ae0:	1c5a      	adds	r2, r3, #1
 8012ae2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012ae6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d8e8      	bhi.n	8012ac0 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8012aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012af2:	3b01      	subs	r3, #1
 8012af4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012af8:	f107 020c 	add.w	r2, r7, #12
 8012afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012b00:	4413      	add	r3, r2
 8012b02:	781a      	ldrb	r2, [r3, #0]
 8012b04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b08:	4611      	mov	r1, r2
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7ff fd92 	bl	8012634 <putc_bfd>
		} while (i);
 8012b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d1ea      	bne.n	8012aee <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8012b18:	e007      	b.n	8012b2a <f_printf+0x406>
 8012b1a:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012b1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b22:	4611      	mov	r1, r2
 8012b24:	4618      	mov	r0, r3
 8012b26:	f7ff fd85 	bl	8012634 <putc_bfd>
 8012b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012b2e:	1c5a      	adds	r2, r3, #1
 8012b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012b34:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d8ee      	bhi.n	8012b1a <f_printf+0x3f6>
		c = *fmt++;
 8012b3c:	e600      	b.n	8012740 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8012b3e:	bf00      	nop
 8012b40:	e000      	b.n	8012b44 <f_printf+0x420>
		if (!c) break;
 8012b42:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8012b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7ff fdb0 	bl	80126ae <putc_flush>
 8012b4e:	4603      	mov	r3, r0
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	379c      	adds	r7, #156	@ 0x9c
 8012b54:	46bd      	mov	sp, r7
 8012b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b5a:	b003      	add	sp, #12
 8012b5c:	4770      	bx	lr
 8012b5e:	bf00      	nop

08012b60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012b60:	b480      	push	{r7}
 8012b62:	b087      	sub	sp, #28
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012b6e:	2301      	movs	r3, #1
 8012b70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012b76:	4b1f      	ldr	r3, [pc, #124]	@ (8012bf4 <FATFS_LinkDriverEx+0x94>)
 8012b78:	7a5b      	ldrb	r3, [r3, #9]
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d131      	bne.n	8012be4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012b80:	4b1c      	ldr	r3, [pc, #112]	@ (8012bf4 <FATFS_LinkDriverEx+0x94>)
 8012b82:	7a5b      	ldrb	r3, [r3, #9]
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	461a      	mov	r2, r3
 8012b88:	4b1a      	ldr	r3, [pc, #104]	@ (8012bf4 <FATFS_LinkDriverEx+0x94>)
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012b8e:	4b19      	ldr	r3, [pc, #100]	@ (8012bf4 <FATFS_LinkDriverEx+0x94>)
 8012b90:	7a5b      	ldrb	r3, [r3, #9]
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	4a17      	ldr	r2, [pc, #92]	@ (8012bf4 <FATFS_LinkDriverEx+0x94>)
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	4413      	add	r3, r2
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012b9e:	4b15      	ldr	r3, [pc, #84]	@ (8012bf4 <FATFS_LinkDriverEx+0x94>)
 8012ba0:	7a5b      	ldrb	r3, [r3, #9]
 8012ba2:	b2db      	uxtb	r3, r3
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	4b13      	ldr	r3, [pc, #76]	@ (8012bf4 <FATFS_LinkDriverEx+0x94>)
 8012ba8:	4413      	add	r3, r2
 8012baa:	79fa      	ldrb	r2, [r7, #7]
 8012bac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012bae:	4b11      	ldr	r3, [pc, #68]	@ (8012bf4 <FATFS_LinkDriverEx+0x94>)
 8012bb0:	7a5b      	ldrb	r3, [r3, #9]
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	1c5a      	adds	r2, r3, #1
 8012bb6:	b2d1      	uxtb	r1, r2
 8012bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8012bf4 <FATFS_LinkDriverEx+0x94>)
 8012bba:	7251      	strb	r1, [r2, #9]
 8012bbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012bbe:	7dbb      	ldrb	r3, [r7, #22]
 8012bc0:	3330      	adds	r3, #48	@ 0x30
 8012bc2:	b2da      	uxtb	r2, r3
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	3301      	adds	r3, #1
 8012bcc:	223a      	movs	r2, #58	@ 0x3a
 8012bce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	3302      	adds	r3, #2
 8012bd4:	222f      	movs	r2, #47	@ 0x2f
 8012bd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	3303      	adds	r3, #3
 8012bdc:	2200      	movs	r2, #0
 8012bde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012be0:	2300      	movs	r3, #0
 8012be2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	371c      	adds	r7, #28
 8012bea:	46bd      	mov	sp, r7
 8012bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf0:	4770      	bx	lr
 8012bf2:	bf00      	nop
 8012bf4:	24002c18 	.word	0x24002c18

08012bf8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b082      	sub	sp, #8
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012c02:	2200      	movs	r2, #0
 8012c04:	6839      	ldr	r1, [r7, #0]
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7ff ffaa 	bl	8012b60 <FATFS_LinkDriverEx>
 8012c0c:	4603      	mov	r3, r0
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	3708      	adds	r7, #8
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
	...

08012c18 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b085      	sub	sp, #20
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	4603      	mov	r3, r0
 8012c20:	6039      	str	r1, [r7, #0]
 8012c22:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012c24:	88fb      	ldrh	r3, [r7, #6]
 8012c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c28:	d802      	bhi.n	8012c30 <ff_convert+0x18>
		c = chr;
 8012c2a:	88fb      	ldrh	r3, [r7, #6]
 8012c2c:	81fb      	strh	r3, [r7, #14]
 8012c2e:	e025      	b.n	8012c7c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00b      	beq.n	8012c4e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012c36:	88fb      	ldrh	r3, [r7, #6]
 8012c38:	2bff      	cmp	r3, #255	@ 0xff
 8012c3a:	d805      	bhi.n	8012c48 <ff_convert+0x30>
 8012c3c:	88fb      	ldrh	r3, [r7, #6]
 8012c3e:	3b80      	subs	r3, #128	@ 0x80
 8012c40:	4a12      	ldr	r2, [pc, #72]	@ (8012c8c <ff_convert+0x74>)
 8012c42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c46:	e000      	b.n	8012c4a <ff_convert+0x32>
 8012c48:	2300      	movs	r3, #0
 8012c4a:	81fb      	strh	r3, [r7, #14]
 8012c4c:	e016      	b.n	8012c7c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012c4e:	2300      	movs	r3, #0
 8012c50:	81fb      	strh	r3, [r7, #14]
 8012c52:	e009      	b.n	8012c68 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012c54:	89fb      	ldrh	r3, [r7, #14]
 8012c56:	4a0d      	ldr	r2, [pc, #52]	@ (8012c8c <ff_convert+0x74>)
 8012c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c5c:	88fa      	ldrh	r2, [r7, #6]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d006      	beq.n	8012c70 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012c62:	89fb      	ldrh	r3, [r7, #14]
 8012c64:	3301      	adds	r3, #1
 8012c66:	81fb      	strh	r3, [r7, #14]
 8012c68:	89fb      	ldrh	r3, [r7, #14]
 8012c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c6c:	d9f2      	bls.n	8012c54 <ff_convert+0x3c>
 8012c6e:	e000      	b.n	8012c72 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012c70:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012c72:	89fb      	ldrh	r3, [r7, #14]
 8012c74:	3380      	adds	r3, #128	@ 0x80
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012c7c:	89fb      	ldrh	r3, [r7, #14]
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3714      	adds	r7, #20
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	08013248 	.word	0x08013248

08012c90 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012c90:	b480      	push	{r7}
 8012c92:	b087      	sub	sp, #28
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	4603      	mov	r3, r0
 8012c98:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012c9a:	88fb      	ldrh	r3, [r7, #6]
 8012c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ca0:	d201      	bcs.n	8012ca6 <ff_wtoupper+0x16>
 8012ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8012d9c <ff_wtoupper+0x10c>)
 8012ca4:	e000      	b.n	8012ca8 <ff_wtoupper+0x18>
 8012ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8012da0 <ff_wtoupper+0x110>)
 8012ca8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	1c9a      	adds	r2, r3, #2
 8012cae:	617a      	str	r2, [r7, #20]
 8012cb0:	881b      	ldrh	r3, [r3, #0]
 8012cb2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012cb4:	8a7b      	ldrh	r3, [r7, #18]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d068      	beq.n	8012d8c <ff_wtoupper+0xfc>
 8012cba:	88fa      	ldrh	r2, [r7, #6]
 8012cbc:	8a7b      	ldrh	r3, [r7, #18]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d364      	bcc.n	8012d8c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	1c9a      	adds	r2, r3, #2
 8012cc6:	617a      	str	r2, [r7, #20]
 8012cc8:	881b      	ldrh	r3, [r3, #0]
 8012cca:	823b      	strh	r3, [r7, #16]
 8012ccc:	8a3b      	ldrh	r3, [r7, #16]
 8012cce:	0a1b      	lsrs	r3, r3, #8
 8012cd0:	81fb      	strh	r3, [r7, #14]
 8012cd2:	8a3b      	ldrh	r3, [r7, #16]
 8012cd4:	b2db      	uxtb	r3, r3
 8012cd6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012cd8:	88fa      	ldrh	r2, [r7, #6]
 8012cda:	8a79      	ldrh	r1, [r7, #18]
 8012cdc:	8a3b      	ldrh	r3, [r7, #16]
 8012cde:	440b      	add	r3, r1
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	da49      	bge.n	8012d78 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012ce4:	89fb      	ldrh	r3, [r7, #14]
 8012ce6:	2b08      	cmp	r3, #8
 8012ce8:	d84f      	bhi.n	8012d8a <ff_wtoupper+0xfa>
 8012cea:	a201      	add	r2, pc, #4	@ (adr r2, 8012cf0 <ff_wtoupper+0x60>)
 8012cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cf0:	08012d15 	.word	0x08012d15
 8012cf4:	08012d27 	.word	0x08012d27
 8012cf8:	08012d3d 	.word	0x08012d3d
 8012cfc:	08012d45 	.word	0x08012d45
 8012d00:	08012d4d 	.word	0x08012d4d
 8012d04:	08012d55 	.word	0x08012d55
 8012d08:	08012d5d 	.word	0x08012d5d
 8012d0c:	08012d65 	.word	0x08012d65
 8012d10:	08012d6d 	.word	0x08012d6d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012d14:	88fa      	ldrh	r2, [r7, #6]
 8012d16:	8a7b      	ldrh	r3, [r7, #18]
 8012d18:	1ad3      	subs	r3, r2, r3
 8012d1a:	005b      	lsls	r3, r3, #1
 8012d1c:	697a      	ldr	r2, [r7, #20]
 8012d1e:	4413      	add	r3, r2
 8012d20:	881b      	ldrh	r3, [r3, #0]
 8012d22:	80fb      	strh	r3, [r7, #6]
 8012d24:	e027      	b.n	8012d76 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012d26:	88fa      	ldrh	r2, [r7, #6]
 8012d28:	8a7b      	ldrh	r3, [r7, #18]
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	b29b      	uxth	r3, r3
 8012d2e:	f003 0301 	and.w	r3, r3, #1
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	88fa      	ldrh	r2, [r7, #6]
 8012d36:	1ad3      	subs	r3, r2, r3
 8012d38:	80fb      	strh	r3, [r7, #6]
 8012d3a:	e01c      	b.n	8012d76 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012d3c:	88fb      	ldrh	r3, [r7, #6]
 8012d3e:	3b10      	subs	r3, #16
 8012d40:	80fb      	strh	r3, [r7, #6]
 8012d42:	e018      	b.n	8012d76 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012d44:	88fb      	ldrh	r3, [r7, #6]
 8012d46:	3b20      	subs	r3, #32
 8012d48:	80fb      	strh	r3, [r7, #6]
 8012d4a:	e014      	b.n	8012d76 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012d4c:	88fb      	ldrh	r3, [r7, #6]
 8012d4e:	3b30      	subs	r3, #48	@ 0x30
 8012d50:	80fb      	strh	r3, [r7, #6]
 8012d52:	e010      	b.n	8012d76 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012d54:	88fb      	ldrh	r3, [r7, #6]
 8012d56:	3b1a      	subs	r3, #26
 8012d58:	80fb      	strh	r3, [r7, #6]
 8012d5a:	e00c      	b.n	8012d76 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012d5c:	88fb      	ldrh	r3, [r7, #6]
 8012d5e:	3308      	adds	r3, #8
 8012d60:	80fb      	strh	r3, [r7, #6]
 8012d62:	e008      	b.n	8012d76 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012d64:	88fb      	ldrh	r3, [r7, #6]
 8012d66:	3b50      	subs	r3, #80	@ 0x50
 8012d68:	80fb      	strh	r3, [r7, #6]
 8012d6a:	e004      	b.n	8012d76 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012d6c:	88fb      	ldrh	r3, [r7, #6]
 8012d6e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8012d72:	80fb      	strh	r3, [r7, #6]
 8012d74:	bf00      	nop
			}
			break;
 8012d76:	e008      	b.n	8012d8a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012d78:	89fb      	ldrh	r3, [r7, #14]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d195      	bne.n	8012caa <ff_wtoupper+0x1a>
 8012d7e:	8a3b      	ldrh	r3, [r7, #16]
 8012d80:	005b      	lsls	r3, r3, #1
 8012d82:	697a      	ldr	r2, [r7, #20]
 8012d84:	4413      	add	r3, r2
 8012d86:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012d88:	e78f      	b.n	8012caa <ff_wtoupper+0x1a>
			break;
 8012d8a:	bf00      	nop
	}

	return chr;
 8012d8c:	88fb      	ldrh	r3, [r7, #6]
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	371c      	adds	r7, #28
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr
 8012d9a:	bf00      	nop
 8012d9c:	08013348 	.word	0x08013348
 8012da0:	0801353c 	.word	0x0801353c

08012da4 <memset>:
 8012da4:	4402      	add	r2, r0
 8012da6:	4603      	mov	r3, r0
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d100      	bne.n	8012dae <memset+0xa>
 8012dac:	4770      	bx	lr
 8012dae:	f803 1b01 	strb.w	r1, [r3], #1
 8012db2:	e7f9      	b.n	8012da8 <memset+0x4>

08012db4 <__errno>:
 8012db4:	4b01      	ldr	r3, [pc, #4]	@ (8012dbc <__errno+0x8>)
 8012db6:	6818      	ldr	r0, [r3, #0]
 8012db8:	4770      	bx	lr
 8012dba:	bf00      	nop
 8012dbc:	240000c0 	.word	0x240000c0

08012dc0 <__libc_init_array>:
 8012dc0:	b570      	push	{r4, r5, r6, lr}
 8012dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8012df8 <__libc_init_array+0x38>)
 8012dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8012dfc <__libc_init_array+0x3c>)
 8012dc6:	1b64      	subs	r4, r4, r5
 8012dc8:	10a4      	asrs	r4, r4, #2
 8012dca:	2600      	movs	r6, #0
 8012dcc:	42a6      	cmp	r6, r4
 8012dce:	d109      	bne.n	8012de4 <__libc_init_array+0x24>
 8012dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8012e00 <__libc_init_array+0x40>)
 8012dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8012e04 <__libc_init_array+0x44>)
 8012dd4:	f000 f954 	bl	8013080 <_init>
 8012dd8:	1b64      	subs	r4, r4, r5
 8012dda:	10a4      	asrs	r4, r4, #2
 8012ddc:	2600      	movs	r6, #0
 8012dde:	42a6      	cmp	r6, r4
 8012de0:	d105      	bne.n	8012dee <__libc_init_array+0x2e>
 8012de2:	bd70      	pop	{r4, r5, r6, pc}
 8012de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012de8:	4798      	blx	r3
 8012dea:	3601      	adds	r6, #1
 8012dec:	e7ee      	b.n	8012dcc <__libc_init_array+0xc>
 8012dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8012df2:	4798      	blx	r3
 8012df4:	3601      	adds	r6, #1
 8012df6:	e7f2      	b.n	8012dde <__libc_init_array+0x1e>
 8012df8:	08013e90 	.word	0x08013e90
 8012dfc:	08013e90 	.word	0x08013e90
 8012e00:	08013e90 	.word	0x08013e90
 8012e04:	08013e94 	.word	0x08013e94

08012e08 <memcpy>:
 8012e08:	440a      	add	r2, r1
 8012e0a:	4291      	cmp	r1, r2
 8012e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e10:	d100      	bne.n	8012e14 <memcpy+0xc>
 8012e12:	4770      	bx	lr
 8012e14:	b510      	push	{r4, lr}
 8012e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e1e:	4291      	cmp	r1, r2
 8012e20:	d1f9      	bne.n	8012e16 <memcpy+0xe>
 8012e22:	bd10      	pop	{r4, pc}
 8012e24:	0000      	movs	r0, r0
	...

08012e28 <log>:
 8012e28:	b4f0      	push	{r4, r5, r6, r7}
 8012e2a:	ee10 0a90 	vmov	r0, s1
 8012e2e:	ee10 3a10 	vmov	r3, s0
 8012e32:	f04f 34ff 	mov.w	r4, #4294967295
 8012e36:	429c      	cmp	r4, r3
 8012e38:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8012e3c:	4c70      	ldr	r4, [pc, #448]	@ (8013000 <log+0x1d8>)
 8012e3e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8012e42:	418c      	sbcs	r4, r1
 8012e44:	ed2d 8b02 	vpush	{d8}
 8012e48:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012e4c:	d35a      	bcc.n	8012f04 <log+0xdc>
 8012e4e:	4a6d      	ldr	r2, [pc, #436]	@ (8013004 <log+0x1dc>)
 8012e50:	4290      	cmp	r0, r2
 8012e52:	bf08      	it	eq
 8012e54:	2b00      	cmpeq	r3, #0
 8012e56:	f000 80c4 	beq.w	8012fe2 <log+0x1ba>
 8012e5a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012e5e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012e62:	4b69      	ldr	r3, [pc, #420]	@ (8013008 <log+0x1e0>)
 8012e64:	ee20 2b00 	vmul.f64	d2, d0, d0
 8012e68:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8012e6c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8012e70:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8012e74:	eea6 7b00 	vfma.f64	d7, d6, d0
 8012e78:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8012e7c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8012e80:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012e84:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8012e88:	eea5 6b00 	vfma.f64	d6, d5, d0
 8012e8c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8012e90:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8012e94:	eea5 6b02 	vfma.f64	d6, d5, d2
 8012e98:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8012e9c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8012ea0:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8012ea4:	eea3 5b02 	vfma.f64	d5, d3, d2
 8012ea8:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8012eac:	eea3 5b04 	vfma.f64	d5, d3, d4
 8012eb0:	eea5 6b04 	vfma.f64	d6, d5, d4
 8012eb4:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8012eb8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012ebc:	eeb0 2b47 	vmov.f64	d2, d7
 8012ec0:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8012fe8 <log+0x1c0>
 8012ec4:	eeb0 6b40 	vmov.f64	d6, d0
 8012ec8:	eeb0 3b40 	vmov.f64	d3, d0
 8012ecc:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012ed0:	eea0 6b47 	vfms.f64	d6, d0, d7
 8012ed4:	ee30 8b46 	vsub.f64	d8, d0, d6
 8012ed8:	ee26 1b06 	vmul.f64	d1, d6, d6
 8012edc:	eea1 3b05 	vfma.f64	d3, d1, d5
 8012ee0:	ee30 7b43 	vsub.f64	d7, d0, d3
 8012ee4:	ee30 0b06 	vadd.f64	d0, d0, d6
 8012ee8:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012eec:	ee25 5b08 	vmul.f64	d5, d5, d8
 8012ef0:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012ef4:	eea2 7b04 	vfma.f64	d7, d2, d4
 8012ef8:	ee33 0b07 	vadd.f64	d0, d3, d7
 8012efc:	ecbd 8b02 	vpop	{d8}
 8012f00:	bcf0      	pop	{r4, r5, r6, r7}
 8012f02:	4770      	bx	lr
 8012f04:	f1a2 0410 	sub.w	r4, r2, #16
 8012f08:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8012f0c:	428c      	cmp	r4, r1
 8012f0e:	d923      	bls.n	8012f58 <log+0x130>
 8012f10:	18d9      	adds	r1, r3, r3
 8012f12:	eb40 0400 	adc.w	r4, r0, r0
 8012f16:	4321      	orrs	r1, r4
 8012f18:	d105      	bne.n	8012f26 <log+0xfe>
 8012f1a:	ecbd 8b02 	vpop	{d8}
 8012f1e:	2001      	movs	r0, #1
 8012f20:	bcf0      	pop	{r4, r5, r6, r7}
 8012f22:	f000 b885 	b.w	8013030 <__math_divzero>
 8012f26:	4939      	ldr	r1, [pc, #228]	@ (801300c <log+0x1e4>)
 8012f28:	4288      	cmp	r0, r1
 8012f2a:	bf08      	it	eq
 8012f2c:	2b00      	cmpeq	r3, #0
 8012f2e:	d0e5      	beq.n	8012efc <log+0xd4>
 8012f30:	0413      	lsls	r3, r2, #16
 8012f32:	d403      	bmi.n	8012f3c <log+0x114>
 8012f34:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8012f38:	4393      	bics	r3, r2
 8012f3a:	d104      	bne.n	8012f46 <log+0x11e>
 8012f3c:	ecbd 8b02 	vpop	{d8}
 8012f40:	bcf0      	pop	{r4, r5, r6, r7}
 8012f42:	f000 b88d 	b.w	8013060 <__math_invalid>
 8012f46:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012ff0 <log+0x1c8>
 8012f4a:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012f4e:	ec53 2b17 	vmov	r2, r3, d7
 8012f52:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8012f56:	4613      	mov	r3, r2
 8012f58:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8012f5c:	492a      	ldr	r1, [pc, #168]	@ (8013008 <log+0x1e0>)
 8012f5e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8012f62:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8012f66:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8012f6a:	0d15      	lsrs	r5, r2, #20
 8012f6c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8012f70:	052d      	lsls	r5, r5, #20
 8012f72:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8012f76:	1e1e      	subs	r6, r3, #0
 8012f78:	1b47      	subs	r7, r0, r5
 8012f7a:	ec47 6b16 	vmov	d6, r6, r7
 8012f7e:	1512      	asrs	r2, r2, #20
 8012f80:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012f84:	ee07 2a90 	vmov	s15, r2
 8012f88:	ee25 2b05 	vmul.f64	d2, d5, d5
 8012f8c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012f90:	ed91 4b00 	vldr	d4, [r1]
 8012f94:	ee25 1b02 	vmul.f64	d1, d5, d2
 8012f98:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8012f9c:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012fa0:	ee35 4b07 	vadd.f64	d4, d5, d7
 8012fa4:	ee37 0b44 	vsub.f64	d0, d7, d4
 8012fa8:	ed91 7b02 	vldr	d7, [r1, #8]
 8012fac:	ee30 0b05 	vadd.f64	d0, d0, d5
 8012fb0:	eea7 0b06 	vfma.f64	d0, d7, d6
 8012fb4:	ed91 7b04 	vldr	d7, [r1, #16]
 8012fb8:	ed91 6b08 	vldr	d6, [r1, #32]
 8012fbc:	eea7 0b02 	vfma.f64	d0, d7, d2
 8012fc0:	ed91 7b06 	vldr	d7, [r1, #24]
 8012fc4:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8012fc8:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012fcc:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8012fd0:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012fd4:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012fd8:	eea1 0b07 	vfma.f64	d0, d1, d7
 8012fdc:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012fe0:	e78c      	b.n	8012efc <log+0xd4>
 8012fe2:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8012ff8 <log+0x1d0>
 8012fe6:	e789      	b.n	8012efc <log+0xd4>
 8012fe8:	00000000 	.word	0x00000000
 8012fec:	41a00000 	.word	0x41a00000
 8012ff0:	00000000 	.word	0x00000000
 8012ff4:	43300000 	.word	0x43300000
	...
 8013000:	000308ff 	.word	0x000308ff
 8013004:	3ff00000 	.word	0x3ff00000
 8013008:	080135f8 	.word	0x080135f8
 801300c:	7ff00000 	.word	0x7ff00000

08013010 <with_errno>:
 8013010:	b510      	push	{r4, lr}
 8013012:	ed2d 8b02 	vpush	{d8}
 8013016:	eeb0 8b40 	vmov.f64	d8, d0
 801301a:	4604      	mov	r4, r0
 801301c:	f7ff feca 	bl	8012db4 <__errno>
 8013020:	eeb0 0b48 	vmov.f64	d0, d8
 8013024:	ecbd 8b02 	vpop	{d8}
 8013028:	6004      	str	r4, [r0, #0]
 801302a:	bd10      	pop	{r4, pc}
 801302c:	0000      	movs	r0, r0
	...

08013030 <__math_divzero>:
 8013030:	b082      	sub	sp, #8
 8013032:	2800      	cmp	r0, #0
 8013034:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8013038:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801303c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8013040:	ed8d 7b00 	vstr	d7, [sp]
 8013044:	ed9d 0b00 	vldr	d0, [sp]
 8013048:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8013058 <__math_divzero+0x28>
 801304c:	2022      	movs	r0, #34	@ 0x22
 801304e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013052:	b002      	add	sp, #8
 8013054:	f7ff bfdc 	b.w	8013010 <with_errno>
	...

08013060 <__math_invalid>:
 8013060:	eeb0 7b40 	vmov.f64	d7, d0
 8013064:	eeb4 7b47 	vcmp.f64	d7, d7
 8013068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801306c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013070:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013074:	d602      	bvs.n	801307c <__math_invalid+0x1c>
 8013076:	2021      	movs	r0, #33	@ 0x21
 8013078:	f7ff bfca 	b.w	8013010 <with_errno>
 801307c:	4770      	bx	lr
	...

08013080 <_init>:
 8013080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013082:	bf00      	nop
 8013084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013086:	bc08      	pop	{r3}
 8013088:	469e      	mov	lr, r3
 801308a:	4770      	bx	lr

0801308c <_fini>:
 801308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308e:	bf00      	nop
 8013090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013092:	bc08      	pop	{r3}
 8013094:	469e      	mov	lr, r3
 8013096:	4770      	bx	lr
