
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e80  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08013130  08013130  00014130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013f20  08013f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013f28  08013f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013f2c  08013f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000110  24000000  08013f30  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002ce4  24000110  08014040  00015110  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002df4  08014040  00015df4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015110  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002984e  00000000  00000000  0001513e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005424  00000000  00000000  0003e98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f78  00000000  00000000  00043db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001878  00000000  00000000  00045d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037f15  00000000  00000000  000475a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031ad5  00000000  00000000  0007f4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001555dd  00000000  00000000  000b0f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00206567  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008728  00000000  00000000  002065ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0020ecd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08013118 	.word	0x08013118

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08013118 	.word	0x08013118

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f006 ffc4 	bl	8007624 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f00a f803 	bl	800a6b8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f009 fffd 	bl	800a6b8 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f006 ffad 	bl	8007624 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002530 	.word	0x24002530

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f006 ff94 	bl	8007624 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f009 ffd7 	bl	800a6b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f00a f9be 	bl	800aa94 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f006 ff80 	bl	8007624 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002530 	.word	0x24002530

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f006 ff55 	bl	8007624 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f009 ff98 	bl	800a6b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f00a f980 	bl	800aa94 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f006 ff42 	bl	8007624 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002530 	.word	0x24002530
 800088c:	24000140 	.word	0x24000140
 8000890:	24000144 	.word	0x24000144
 8000894:	24000146 	.word	0x24000146
 8000898:	24000142 	.word	0x24000142
 800089c:	24000148 	.word	0x24000148
 80008a0:	2400014a 	.word	0x2400014a
 80008a4:	2400014c 	.word	0x2400014c
 80008a8:	2400014e 	.word	0x2400014e
 80008ac:	24000150 	.word	0x24000150
 80008b0:	24000152 	.word	0x24000152
 80008b4:	24000154 	.word	0x24000154
 80008b8:	24000156 	.word	0x24000156

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 fea5 	bl	8007624 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 fee9 	bl	800a6b8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f00a f8d1 	bl	800aa94 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 fe93 	bl	8007624 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002530 	.word	0x24002530
 800093c:	2400015c 	.word	0x2400015c
 8000940:	24000158 	.word	0x24000158

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000158 	.word	0x24000158
 80009bc:	24000140 	.word	0x24000140
 80009c0:	24000144 	.word	0x24000144
 80009c4:	24000146 	.word	0x24000146
 80009c8:	24000160 	.word	0x24000160

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	24000160 	.word	0x24000160
 8000c9c:	24000150 	.word	0x24000150
 8000ca0:	2400014e 	.word	0x2400014e
 8000ca4:	2400014c 	.word	0x2400014c
 8000ca8:	2400014a 	.word	0x2400014a
 8000cac:	24000148 	.word	0x24000148
 8000cb0:	24000142 	.word	0x24000142
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000156 	.word	0x24000156
 8000f50:	24000154 	.word	0x24000154
 8000f54:	24000152 	.word	0x24000152

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f011 ff9d 	bl	8012ec0 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f006 fb02 	bl	8007624 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	2400012c 	.word	0x2400012c
 8001058:	24000158 	.word	0x24000158

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400012c 	.word	0x2400012c
 80010c8:	24000158 	.word	0x24000158
 80010cc:	2400015c 	.word	0x2400015c

080010d0 <bno055_delay>:
BNO_bufffer_Status_e BNO_bufferStatus;
uint8_t CalibrationFlag;

IMU_t IMU;

void bno055_delay(int time) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fd04 	bl	8003ae8 <HAL_Delay>
#endif
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 80010f8:	23aa      	movs	r3, #170	@ 0xaa
 80010fa:	723b      	strb	r3, [r7, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	727b      	strb	r3, [r7, #9]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	72bb      	strb	r3, [r7, #10]
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8001108:	4a08      	ldr	r2, [pc, #32]	@ (800112c <BNO_Read+0x44>)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 800110e:	f107 0108 	add.w	r1, r7, #8
 8001112:	2364      	movs	r3, #100	@ 0x64
 8001114:	2204      	movs	r2, #4
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <BNO_Read+0x48>)
 8001118:	f00b fc68 	bl	800c9ec <HAL_UART_Transmit>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	24000164 	.word	0x24000164
 8001130:	2400285c 	.word	0x2400285c

08001134 <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8001144:	23aa      	movs	r3, #170	@ 0xaa
 8001146:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001148:	2300      	movs	r3, #0
 800114a:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001150:	2301      	movs	r3, #1
 8001152:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001158:	f107 0108 	add.w	r1, r7, #8
 800115c:	2364      	movs	r3, #100	@ 0x64
 800115e:	2205      	movs	r2, #5
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <BNO_Write+0x40>)
 8001162:	f00b fc43 	bl	800c9ec <HAL_UART_Transmit>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
	return uartError;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2400285c 	.word	0x2400285c

08001178 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800117c:	4b7c      	ldr	r3, [pc, #496]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b3d      	cmp	r3, #61	@ 0x3d
 8001182:	f300 80ef 	bgt.w	8001364 <BNO_Page0Adress+0x1ec>
 8001186:	2b1a      	cmp	r3, #26
 8001188:	da04      	bge.n	8001194 <BNO_Page0Adress+0x1c>
 800118a:	2b00      	cmp	r3, #0
 800118c:	d052      	beq.n	8001234 <BNO_Page0Adress+0xbc>
 800118e:	2b07      	cmp	r3, #7
 8001190:	d069      	beq.n	8001266 <BNO_Page0Adress+0xee>

			BNO_bufferStatus = Awaiting;
			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 8001192:	e0e7      	b.n	8001364 <BNO_Page0Adress+0x1ec>
	switch (BNO_RxBuffer[0]) {
 8001194:	3b1a      	subs	r3, #26
 8001196:	2b23      	cmp	r3, #35	@ 0x23
 8001198:	f200 80e4 	bhi.w	8001364 <BNO_Page0Adress+0x1ec>
 800119c:	a201      	add	r2, pc, #4	@ (adr r2, 80011a4 <BNO_Page0Adress+0x2c>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080012df 	.word	0x080012df
 80011a8:	08001365 	.word	0x08001365
 80011ac:	08001365 	.word	0x08001365
 80011b0:	08001365 	.word	0x08001365
 80011b4:	08001365 	.word	0x08001365
 80011b8:	08001365 	.word	0x08001365
 80011bc:	08001365 	.word	0x08001365
 80011c0:	08001365 	.word	0x08001365
 80011c4:	08001365 	.word	0x08001365
 80011c8:	08001365 	.word	0x08001365
 80011cc:	08001365 	.word	0x08001365
 80011d0:	08001365 	.word	0x08001365
 80011d4:	08001365 	.word	0x08001365
 80011d8:	08001365 	.word	0x08001365
 80011dc:	08001365 	.word	0x08001365
 80011e0:	08001365 	.word	0x08001365
 80011e4:	08001365 	.word	0x08001365
 80011e8:	08001365 	.word	0x08001365
 80011ec:	08001365 	.word	0x08001365
 80011f0:	08001365 	.word	0x08001365
 80011f4:	08001365 	.word	0x08001365
 80011f8:	08001365 	.word	0x08001365
 80011fc:	08001365 	.word	0x08001365
 8001200:	08001365 	.word	0x08001365
 8001204:	08001365 	.word	0x08001365
 8001208:	08001365 	.word	0x08001365
 800120c:	08001365 	.word	0x08001365
 8001210:	080012c7 	.word	0x080012c7
 8001214:	08001365 	.word	0x08001365
 8001218:	08001365 	.word	0x08001365
 800121c:	08001365 	.word	0x08001365
 8001220:	08001297 	.word	0x08001297
 8001224:	08001365 	.word	0x08001365
 8001228:	0800127f 	.word	0x0800127f
 800122c:	08001365 	.word	0x08001365
 8001230:	080012af 	.word	0x080012af
			IMU.ID = BNO_RxBuffer[1];
 8001234:	4b4e      	ldr	r3, [pc, #312]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001236:	785a      	ldrb	r2, [r3, #1]
 8001238:	4b4e      	ldr	r3, [pc, #312]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 800123a:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 800123c:	4b4c      	ldr	r3, [pc, #304]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 800123e:	789a      	ldrb	r2, [r3, #2]
 8001240:	4b4c      	ldr	r3, [pc, #304]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 8001242:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 8001244:	4b4a      	ldr	r3, [pc, #296]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001246:	78da      	ldrb	r2, [r3, #3]
 8001248:	4b4a      	ldr	r3, [pc, #296]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 800124a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 800124e:	4b48      	ldr	r3, [pc, #288]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001250:	791a      	ldrb	r2, [r3, #4]
 8001252:	4b48      	ldr	r3, [pc, #288]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 8001254:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_bufferStatus = Awaiting;
 8001258:	4b47      	ldr	r3, [pc, #284]	@ (8001378 <BNO_Page0Adress+0x200>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 800125e:	4b47      	ldr	r3, [pc, #284]	@ (800137c <BNO_Page0Adress+0x204>)
 8001260:	220b      	movs	r2, #11
 8001262:	701a      	strb	r2, [r3, #0]
			break;
 8001264:	e07f      	b.n	8001366 <BNO_Page0Adress+0x1ee>
			IMU.Page = BNO_RxBuffer[1];
 8001266:	4b42      	ldr	r3, [pc, #264]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001268:	785a      	ldrb	r2, [r3, #1]
 800126a:	4b42      	ldr	r3, [pc, #264]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 800126c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_bufferStatus = Awaiting;
 8001270:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <BNO_Page0Adress+0x200>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 8001276:	4b41      	ldr	r3, [pc, #260]	@ (800137c <BNO_Page0Adress+0x204>)
 8001278:	220b      	movs	r2, #11
 800127a:	701a      	strb	r2, [r3, #0]
			break;
 800127c:	e073      	b.n	8001366 <BNO_Page0Adress+0x1ee>
			IMU.Unit_Select = BNO_RxBuffer[1];
 800127e:	4b3c      	ldr	r3, [pc, #240]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001280:	785a      	ldrb	r2, [r3, #1]
 8001282:	4b3c      	ldr	r3, [pc, #240]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 8001284:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_bufferStatus = Awaiting;
 8001288:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <BNO_Page0Adress+0x200>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 800128e:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <BNO_Page0Adress+0x204>)
 8001290:	220b      	movs	r2, #11
 8001292:	701a      	strb	r2, [r3, #0]
			break;
 8001294:	e067      	b.n	8001366 <BNO_Page0Adress+0x1ee>
			IMU.System_Status = BNO_RxBuffer[1];
 8001296:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001298:	785a      	ldrb	r2, [r3, #1]
 800129a:	4b36      	ldr	r3, [pc, #216]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 800129c:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			BNO_bufferStatus = Awaiting;
 80012a0:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <BNO_Page0Adress+0x200>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 80012a6:	4b35      	ldr	r3, [pc, #212]	@ (800137c <BNO_Page0Adress+0x204>)
 80012a8:	220b      	movs	r2, #11
 80012aa:	701a      	strb	r2, [r3, #0]
			break;
 80012ac:	e05b      	b.n	8001366 <BNO_Page0Adress+0x1ee>
			IMU.Op_Mode = BNO_RxBuffer[1];
 80012ae:	4b30      	ldr	r3, [pc, #192]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 80012b0:	785a      	ldrb	r2, [r3, #1]
 80012b2:	4b30      	ldr	r3, [pc, #192]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 80012b4:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			BNO_bufferStatus = Awaiting;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001378 <BNO_Page0Adress+0x200>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 80012be:	4b2f      	ldr	r3, [pc, #188]	@ (800137c <BNO_Page0Adress+0x204>)
 80012c0:	220b      	movs	r2, #11
 80012c2:	701a      	strb	r2, [r3, #0]
			break;
 80012c4:	e04f      	b.n	8001366 <BNO_Page0Adress+0x1ee>
			IMU.SysCalibration = BNO_RxBuffer[1];
 80012c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 80012c8:	785a      	ldrb	r2, [r3, #1]
 80012ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 80012cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_bufferStatus = Awaiting;
 80012d0:	4b29      	ldr	r3, [pc, #164]	@ (8001378 <BNO_Page0Adress+0x200>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 80012d6:	4b29      	ldr	r3, [pc, #164]	@ (800137c <BNO_Page0Adress+0x204>)
 80012d8:	220b      	movs	r2, #11
 80012da:	701a      	strb	r2, [r3, #0]
			break;
 80012dc:	e043      	b.n	8001366 <BNO_Page0Adress+0x1ee>
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/16;
 80012de:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 80012e0:	789b      	ldrb	r3, [r3, #2]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80012f8:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80012fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 8001302:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/16;
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001308:	791b      	ldrb	r3, [r3, #4]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001310:	78db      	ldrb	r3, [r3, #3]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001320:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001324:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 800132a:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/16;
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001330:	799b      	ldrb	r3, [r3, #6]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <BNO_Page0Adress+0x1f8>)
 8001338:	795b      	ldrb	r3, [r3, #5]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001348:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800134c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <BNO_Page0Adress+0x1fc>)
 8001352:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			BNO_bufferStatus = Awaiting;
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <BNO_Page0Adress+0x200>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <BNO_Page0Adress+0x204>)
 800135e:	220b      	movs	r2, #11
 8001360:	701a      	strb	r2, [r3, #0]
			break;
 8001362:	e000      	b.n	8001366 <BNO_Page0Adress+0x1ee>
			break;
 8001364:	bf00      	nop
	}
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	24000164 	.word	0x24000164
 8001374:	24000268 	.word	0x24000268
 8001378:	24000266 	.word	0x24000266
 800137c:	24000265 	.word	0x24000265

08001380 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <BNO_Page1Adress+0x30>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b07      	cmp	r3, #7
 800138a:	d10b      	bne.n	80013a4 <BNO_Page1Adress+0x24>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <BNO_Page1Adress+0x30>)
 800138e:	785a      	ldrb	r2, [r3, #1]
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <BNO_Page1Adress+0x34>)
 8001392:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_bufferStatus = Awaiting;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <BNO_Page1Adress+0x38>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
			BNO_ErrorHandler = ReadSucces;
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <BNO_Page1Adress+0x3c>)
 800139e:	220b      	movs	r2, #11
 80013a0:	701a      	strb	r2, [r3, #0]
			break;
 80013a2:	e000      	b.n	80013a6 <BNO_Page1Adress+0x26>

		default:
			break;
 80013a4:	bf00      	nop
	}
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	24000164 	.word	0x24000164
 80013b4:	24000268 	.word	0x24000268
 80013b8:	24000266 	.word	0x24000266
 80013bc:	24000265 	.word	0x24000265

080013c0 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	static uint64_t BusyTime;
	static uint8_t BusyFlag = 0;

	if(BNO_bufferStatus == Ready){
 80013c4:	4b21      	ldr	r3, [pc, #132]	@ (800144c <BNO_EmptyingBuffer+0x8c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d115      	bne.n	80013f8 <BNO_EmptyingBuffer+0x38>
		switch (IMU.Page) {
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <BNO_EmptyingBuffer+0x90>)
 80013ce:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <BNO_EmptyingBuffer+0x1c>
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d003      	beq.n	80013e2 <BNO_EmptyingBuffer+0x22>
				break;
			case 1:
				BNO_Page1Adress();
				break;
			default:
				break;
 80013da:	e005      	b.n	80013e8 <BNO_EmptyingBuffer+0x28>
				BNO_Page0Adress();
 80013dc:	f7ff fecc 	bl	8001178 <BNO_Page0Adress>
				break;
 80013e0:	e002      	b.n	80013e8 <BNO_EmptyingBuffer+0x28>
				BNO_Page1Adress();
 80013e2:	f7ff ffcd 	bl	8001380 <BNO_Page1Adress>
				break;
 80013e6:	bf00      	nop
		}
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80013e8:	22ff      	movs	r2, #255	@ 0xff
 80013ea:	2100      	movs	r1, #0
 80013ec:	4819      	ldr	r0, [pc, #100]	@ (8001454 <BNO_EmptyingBuffer+0x94>)
 80013ee:	f011 fd27 	bl	8012e40 <memset>
		BusyFlag = 0;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <BNO_EmptyingBuffer+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
	}

	if(BNO_bufferStatus ==  Busy && !BusyFlag){
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <BNO_EmptyingBuffer+0x8c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d10c      	bne.n	800141a <BNO_EmptyingBuffer+0x5a>
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <BNO_EmptyingBuffer+0x98>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d108      	bne.n	800141a <BNO_EmptyingBuffer+0x5a>
		BusyFlag = 1;
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <BNO_EmptyingBuffer+0x98>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
		BusyTime = TimeOn_Counter;
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <BNO_EmptyingBuffer+0x9c>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	4912      	ldr	r1, [pc, #72]	@ (8001460 <BNO_EmptyingBuffer+0xa0>)
 8001416:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if((TimeOn_Counter - BusyTime)>100){
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <BNO_EmptyingBuffer+0x9c>)
 800141c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <BNO_EmptyingBuffer+0xa0>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	1a84      	subs	r4, r0, r2
 8001428:	eb61 0503 	sbc.w	r5, r1, r3
 800142c:	2c65      	cmp	r4, #101	@ 0x65
 800142e:	f175 0300 	sbcs.w	r3, r5, #0
 8001432:	d308      	bcc.n	8001446 <BNO_EmptyingBuffer+0x86>
		BNO_bufferStatus = Awaiting;
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <BNO_EmptyingBuffer+0x8c>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
		BNO_ErrorHandler = READ_FAIL;
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <BNO_EmptyingBuffer+0xa4>)
 800143c:	2202      	movs	r2, #2
 800143e:	701a      	strb	r2, [r3, #0]
		BusyFlag = 0;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <BNO_EmptyingBuffer+0x98>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
	}
}
 8001446:	bf00      	nop
 8001448:	bdb0      	pop	{r4, r5, r7, pc}
 800144a:	bf00      	nop
 800144c:	24000266 	.word	0x24000266
 8001450:	24000268 	.word	0x24000268
 8001454:	24000164 	.word	0x24000164
 8001458:	24000308 	.word	0x24000308
 800145c:	240024a0 	.word	0x240024a0
 8001460:	24000310 	.word	0x24000310
 8001464:	24000265 	.word	0x24000265

08001468 <BNO_HWReset>:
void BNO_SelectPage(uint8_t Page){
	BNO_Write(BNO055_PAGE_ID, Page);
	BNO_Read(BNO055_PAGE_ID, 1);
}

void BNO_HWReset(void){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2104      	movs	r1, #4
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <BNO_HWReset+0x2c>)
 8001472:	f006 f8d7 	bl	8007624 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001476:	200a      	movs	r0, #10
 8001478:	f002 fb36 	bl	8003ae8 <HAL_Delay>
	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2104      	movs	r1, #4
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <BNO_HWReset+0x2c>)
 8001482:	f006 f8cf 	bl	8007624 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 8001486:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800148a:	f002 fb2d 	bl	8003ae8 <HAL_Delay>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58020c00 	.word	0x58020c00

08001498 <bno055_setOperationMode>:
void BNO_SWReset(void){
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
	HAL_Delay(700);
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4619      	mov	r1, r3
 80014a6:	203d      	movs	r0, #61	@ 0x3d
 80014a8:	f7ff fe44 	bl	8001134 <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <bno055_setOperationMode+0x22>
    bno055_delay(25);
 80014b2:	2019      	movs	r0, #25
 80014b4:	f7ff fe0c 	bl	80010d0 <bno055_delay>
  } else {
    bno055_delay(10);
  }
}
 80014b8:	e002      	b.n	80014c0 <bno055_setOperationMode+0x28>
    bno055_delay(10);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f7ff fe08 	bl	80010d0 <bno055_delay>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ffe3 	bl	8001498 <bno055_setOperationMode>
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <BNO_CalibrationStatus>:

void BNO_GetCalibrationData(void){

}

void BNO_CalibrationStatus(void){
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	if(IMU.SysCalibration != 0xFF){
 80014dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <BNO_CalibrationStatus+0x3c>)
 80014de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80014e2:	2bff      	cmp	r3, #255	@ 0xff
 80014e4:	d010      	beq.n	8001508 <BNO_CalibrationStatus+0x30>
		LED_Info.B_LED1.LED_status = SET;
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <BNO_CalibrationStatus+0x40>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	759a      	strb	r2, [r3, #22]
		LED_Info.B_LED1.Sequence = Blink;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <BNO_CalibrationStatus+0x40>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	75da      	strb	r2, [r3, #23]
		LED_Info.B_LED1.Time_On = 200;
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <BNO_CalibrationStatus+0x40>)
 80014f4:	22c8      	movs	r2, #200	@ 0xc8
 80014f6:	831a      	strh	r2, [r3, #24]
		LED_Info.B_LED1.Time_Off = 200;
 80014f8:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <BNO_CalibrationStatus+0x40>)
 80014fa:	22c8      	movs	r2, #200	@ 0xc8
 80014fc:	835a      	strh	r2, [r3, #26]

		BNO_Read(BNO055_CALIB_STAT,1);
 80014fe:	2101      	movs	r1, #1
 8001500:	2035      	movs	r0, #53	@ 0x35
 8001502:	f7ff fdf1 	bl	80010e8 <BNO_Read>
	}
	else{
		LED_Info.B_LED1.LED_status = RESET;

	}
}
 8001506:	e002      	b.n	800150e <BNO_CalibrationStatus+0x36>
		LED_Info.B_LED1.LED_status = RESET;
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <BNO_CalibrationStatus+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	759a      	strb	r2, [r3, #22]
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	24000268 	.word	0x24000268
 8001518:	24000000 	.word	0x24000000

0800151c <BNO_Init>:

void BNO_Init(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001520:	2201      	movs	r2, #1
 8001522:	4912      	ldr	r1, [pc, #72]	@ (800156c <BNO_Init+0x50>)
 8001524:	4812      	ldr	r0, [pc, #72]	@ (8001570 <BNO_Init+0x54>)
 8001526:	f00b faef 	bl	800cb08 <HAL_UART_Receive_DMA>
	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2104      	movs	r1, #4
 800152e:	4811      	ldr	r0, [pc, #68]	@ (8001574 <BNO_Init+0x58>)
 8001530:	f006 f878 	bl	8007624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800153a:	480f      	ldr	r0, [pc, #60]	@ (8001578 <BNO_Init+0x5c>)
 800153c:	f006 f872 	bl	8007624 <HAL_GPIO_WritePin>
	BNO_HWReset();
 8001540:	f7ff ff92 	bl	8001468 <BNO_HWReset>
	BNO_Read(BNO055_CHIP_ID, 4);
 8001544:	2104      	movs	r1, #4
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff fdce 	bl	80010e8 <BNO_Read>
	BNO_Write(BNO055_SYS_TRIGGER, 0x00);
 800154c:	2100      	movs	r1, #0
 800154e:	203f      	movs	r0, #63	@ 0x3f
 8001550:	f7ff fdf0 	bl	8001134 <BNO_Write>

	while(CalibrationFlag != 0x01){
 8001554:	e001      	b.n	800155a <BNO_Init+0x3e>
		BNO_CalibrationStatus();
 8001556:	f7ff ffbf 	bl	80014d8 <BNO_CalibrationStatus>
	while(CalibrationFlag != 0x01){
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <BNO_Init+0x60>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d1f9      	bne.n	8001556 <BNO_Init+0x3a>
	}

	bno055_setOperationModeConfig();
 8001562:	f7ff ffb1 	bl	80014c8 <bno055_setOperationModeConfig>

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	24000263 	.word	0x24000263
 8001570:	2400285c 	.word	0x2400285c
 8001574:	58020c00 	.word	0x58020c00
 8001578:	58020400 	.word	0x58020400
 800157c:	24000267 	.word	0x24000267

08001580 <BNO_GetAtt>:

void BNO_GetAtt(void){
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_EUL_HEADING_LSB, 6);
 8001584:	2106      	movs	r1, #6
 8001586:	201a      	movs	r0, #26
 8001588:	f7ff fdae 	bl	80010e8 <BNO_Read>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <BNO_Receive>:



void BNO_Receive(uint8_t Buffer){
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	switch (BNO_Rx_Status) {
 800159a:	4b2a      	ldr	r3, [pc, #168]	@ (8001644 <BNO_Receive+0xb4>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2bff      	cmp	r3, #255	@ 0xff
 80015a0:	d022      	beq.n	80015e8 <BNO_Receive+0x58>
 80015a2:	2bff      	cmp	r3, #255	@ 0xff
 80015a4:	dc44      	bgt.n	8001630 <BNO_Receive+0xa0>
 80015a6:	2bee      	cmp	r3, #238	@ 0xee
 80015a8:	d017      	beq.n	80015da <BNO_Receive+0x4a>
 80015aa:	2bee      	cmp	r3, #238	@ 0xee
 80015ac:	dc40      	bgt.n	8001630 <BNO_Receive+0xa0>
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <BNO_Receive+0x28>
 80015b2:	2bbb      	cmp	r3, #187	@ 0xbb
 80015b4:	d00a      	beq.n	80015cc <BNO_Receive+0x3c>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 80015b6:	e03b      	b.n	8001630 <BNO_Receive+0xa0>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2bbb      	cmp	r3, #187	@ 0xbb
 80015bc:	d002      	beq.n	80015c4 <BNO_Receive+0x34>
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2bee      	cmp	r3, #238	@ 0xee
 80015c2:	d137      	bne.n	8001634 <BNO_Receive+0xa4>
 80015c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001644 <BNO_Receive+0xb4>)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	7013      	strb	r3, [r2, #0]
			break;
 80015ca:	e033      	b.n	8001634 <BNO_Receive+0xa4>
			MsgSize = Buffer;
 80015cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001648 <BNO_Receive+0xb8>)
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <BNO_Receive+0xb4>)
 80015d4:	22ff      	movs	r2, #255	@ 0xff
 80015d6:	701a      	strb	r2, [r3, #0]
			break;
 80015d8:	e02f      	b.n	800163a <BNO_Receive+0xaa>
			BNO_ErrorHandler = Buffer;
 80015da:	4a1c      	ldr	r2, [pc, #112]	@ (800164c <BNO_Receive+0xbc>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <BNO_Receive+0xb4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
			break;
 80015e6:	e028      	b.n	800163a <BNO_Receive+0xaa>
			BNO_RxBuffer[Counter + 1] = Buffer;
 80015e8:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <BNO_Receive+0xc0>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4919      	ldr	r1, [pc, #100]	@ (8001654 <BNO_Receive+0xc4>)
 80015f0:	79fa      	ldrb	r2, [r7, #7]
 80015f2:	54ca      	strb	r2, [r1, r3]
			Counter++;
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <BNO_Receive+0xc0>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <BNO_Receive+0xc0>)
 80015fe:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <BNO_Receive+0xc0>)
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <BNO_Receive+0xb8>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d115      	bne.n	8001638 <BNO_Receive+0xa8>
				Counter = 0;
 800160c:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <BNO_Receive+0xc0>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <BNO_Receive+0xb8>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
				BNO_bufferStatus = Ready;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <BNO_Receive+0xc8>)
 800161a:	2202      	movs	r2, #2
 800161c:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <BNO_Receive+0xb4>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <BNO_Receive+0xbc>)
 8001626:	220b      	movs	r2, #11
 8001628:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 800162a:	f7ff fec9 	bl	80013c0 <BNO_EmptyingBuffer>
			break;
 800162e:	e003      	b.n	8001638 <BNO_Receive+0xa8>
			break;
 8001630:	bf00      	nop
 8001632:	e002      	b.n	800163a <BNO_Receive+0xaa>
			break;
 8001634:	bf00      	nop
 8001636:	e000      	b.n	800163a <BNO_Receive+0xaa>
			break;
 8001638:	bf00      	nop
	}
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	24000264 	.word	0x24000264
 8001648:	24000318 	.word	0x24000318
 800164c:	24000265 	.word	0x24000265
 8001650:	24000319 	.word	0x24000319
 8001654:	24000164 	.word	0x24000164
 8001658:	24000266 	.word	0x24000266

0800165c <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 800165c:	b084      	sub	sp, #16
 800165e:	b590      	push	{r4, r7, lr}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	f107 001c 	add.w	r0, r7, #28
 800166a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 800166e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <LED_blink+0x20>
 8001676:	2b01      	cmp	r3, #1
 8001678:	d010      	beq.n	800169c <LED_blink+0x40>
 800167a:	e01f      	b.n	80016bc <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 800167c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800167e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001680:	429a      	cmp	r2, r3
 8001682:	d31f      	bcc.n	80016c4 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	8c39      	ldrh	r1, [r7, #32]
 8001688:	2201      	movs	r2, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f005 ffca 	bl	8007624 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800169a:	e013      	b.n	80016c4 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 800169c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800169e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d311      	bcc.n	80016c8 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	8c39      	ldrh	r1, [r7, #32]
 80016a8:	2200      	movs	r2, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 ffba 	bl	8007624 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80016ba:	e005      	b.n	80016c8 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 80016c2:	e002      	b.n	80016ca <LED_blink+0x6e>
				break;
 80016c4:	bf00      	nop
 80016c6:	e000      	b.n	80016ca <LED_blink+0x6e>
				break;
 80016c8:	bf00      	nop
		}

	LED.count++;
 80016ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80016cc:	3301      	adds	r3, #1
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	461c      	mov	r4, r3
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016ea:	b004      	add	sp, #16
 80016ec:	4770      	bx	lr

080016ee <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 80016ee:	b084      	sub	sp, #16
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	f107 001c 	add.w	r0, r7, #28
 80016fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8001700:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001704:	2b01      	cmp	r3, #1
 8001706:	d117      	bne.n	8001738 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8001708:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <LED_Rutine+0x28>
 8001710:	2b01      	cmp	r3, #1
 8001712:	d007      	beq.n	8001724 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8001714:	e018      	b.n	8001748 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	8c39      	ldrh	r1, [r7, #32]
 800171a:	2201      	movs	r2, #1
 800171c:	4618      	mov	r0, r3
 800171e:	f005 ff81 	bl	8007624 <HAL_GPIO_WritePin>
				break;
 8001722:	e011      	b.n	8001748 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8001724:	f107 001c 	add.w	r0, r7, #28
 8001728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001732:	f7ff ff93 	bl	800165c <LED_blink>
				break;
 8001736:	e007      	b.n	8001748 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	8c39      	ldrh	r1, [r7, #32]
 800173c:	2200      	movs	r2, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f005 ff70 	bl	8007624 <HAL_GPIO_WritePin>
		LED.count = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	461c      	mov	r4, r3
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001752:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001760:	b004      	add	sp, #16
 8001762:	4770      	bx	lr

08001764 <LED_Tasks>:

void LED_Tasks (void){
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b087      	sub	sp, #28
 8001768:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 800176a:	4c24      	ldr	r4, [pc, #144]	@ (80017fc <LED_Tasks+0x98>)
 800176c:	4638      	mov	r0, r7
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <LED_Tasks+0x98>)
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	9200      	str	r2, [sp, #0]
 8001774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001776:	f7ff ffba 	bl	80016ee <LED_Rutine>
 800177a:	463b      	mov	r3, r7
 800177c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800177e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8001782:	4c1e      	ldr	r4, [pc, #120]	@ (80017fc <LED_Tasks+0x98>)
 8001784:	4638      	mov	r0, r7
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <LED_Tasks+0x98>)
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	9200      	str	r2, [sp, #0]
 800178c:	3310      	adds	r3, #16
 800178e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001790:	f7ff ffad 	bl	80016ee <LED_Rutine>
 8001794:	3410      	adds	r4, #16
 8001796:	463b      	mov	r3, r7
 8001798:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800179a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 800179e:	4c17      	ldr	r4, [pc, #92]	@ (80017fc <LED_Tasks+0x98>)
 80017a0:	4638      	mov	r0, r7
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <LED_Tasks+0x98>)
 80017a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a6:	9200      	str	r2, [sp, #0]
 80017a8:	3320      	adds	r3, #32
 80017aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ac:	f7ff ff9f 	bl	80016ee <LED_Rutine>
 80017b0:	3420      	adds	r4, #32
 80017b2:	463b      	mov	r3, r7
 80017b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 80017ba:	4c10      	ldr	r4, [pc, #64]	@ (80017fc <LED_Tasks+0x98>)
 80017bc:	4638      	mov	r0, r7
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <LED_Tasks+0x98>)
 80017c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017c2:	9200      	str	r2, [sp, #0]
 80017c4:	3330      	adds	r3, #48	@ 0x30
 80017c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c8:	f7ff ff91 	bl	80016ee <LED_Rutine>
 80017cc:	3430      	adds	r4, #48	@ 0x30
 80017ce:	463b      	mov	r3, r7
 80017d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 80017d6:	4c09      	ldr	r4, [pc, #36]	@ (80017fc <LED_Tasks+0x98>)
 80017d8:	4638      	mov	r0, r7
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <LED_Tasks+0x98>)
 80017dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	3340      	adds	r3, #64	@ 0x40
 80017e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e4:	f7ff ff83 	bl	80016ee <LED_Rutine>
 80017e8:	3440      	adds	r4, #64	@ 0x40
 80017ea:	463b      	mov	r3, r7
 80017ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	24000000 	.word	0x24000000

08001800 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8001804:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <PWM_Assing+0xb0>)
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800180c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 800180e:	4b28      	ldr	r3, [pc, #160]	@ (80018b0 <PWM_Assing+0xb0>)
 8001810:	885a      	ldrh	r2, [r3, #2]
 8001812:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001816:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8001818:	4b25      	ldr	r3, [pc, #148]	@ (80018b0 <PWM_Assing+0xb0>)
 800181a:	889a      	ldrh	r2, [r3, #4]
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <PWM_Assing+0xb4>)
 800181e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8001820:	4b23      	ldr	r3, [pc, #140]	@ (80018b0 <PWM_Assing+0xb0>)
 8001822:	88da      	ldrh	r2, [r3, #6]
 8001824:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <PWM_Assing+0xb4>)
 8001826:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8001828:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <PWM_Assing+0xb0>)
 800182a:	891a      	ldrh	r2, [r3, #8]
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <PWM_Assing+0xb8>)
 800182e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 8001830:	4b1f      	ldr	r3, [pc, #124]	@ (80018b0 <PWM_Assing+0xb0>)
 8001832:	895a      	ldrh	r2, [r3, #10]
 8001834:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <PWM_Assing+0xb8>)
 8001836:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8001838:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <PWM_Assing+0xb0>)
 800183a:	899a      	ldrh	r2, [r3, #12]
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <PWM_Assing+0xb8>)
 800183e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <PWM_Assing+0xb0>)
 8001842:	89da      	ldrh	r2, [r3, #14]
 8001844:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <PWM_Assing+0xb8>)
 8001846:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <PWM_Assing+0xb0>)
 800184a:	8a1a      	ldrh	r2, [r3, #16]
 800184c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001850:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <PWM_Assing+0xb0>)
 8001854:	8a5a      	ldrh	r2, [r3, #18]
 8001856:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800185a:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800185c:	2100      	movs	r1, #0
 800185e:	4817      	ldr	r0, [pc, #92]	@ (80018bc <PWM_Assing+0xbc>)
 8001860:	f00a f8d4 	bl	800ba0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001864:	2104      	movs	r1, #4
 8001866:	4815      	ldr	r0, [pc, #84]	@ (80018bc <PWM_Assing+0xbc>)
 8001868:	f00a f8d0 	bl	800ba0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800186c:	2108      	movs	r1, #8
 800186e:	4813      	ldr	r0, [pc, #76]	@ (80018bc <PWM_Assing+0xbc>)
 8001870:	f00a f8cc 	bl	800ba0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001874:	210c      	movs	r1, #12
 8001876:	4811      	ldr	r0, [pc, #68]	@ (80018bc <PWM_Assing+0xbc>)
 8001878:	f00a f8c8 	bl	800ba0c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800187c:	2100      	movs	r1, #0
 800187e:	4810      	ldr	r0, [pc, #64]	@ (80018c0 <PWM_Assing+0xc0>)
 8001880:	f00a f8c4 	bl	800ba0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001884:	2104      	movs	r1, #4
 8001886:	480e      	ldr	r0, [pc, #56]	@ (80018c0 <PWM_Assing+0xc0>)
 8001888:	f00a f8c0 	bl	800ba0c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800188c:	2100      	movs	r1, #0
 800188e:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <PWM_Assing+0xc4>)
 8001890:	f00a f8bc 	bl	800ba0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001894:	2104      	movs	r1, #4
 8001896:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <PWM_Assing+0xc4>)
 8001898:	f00a f8b8 	bl	800ba0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800189c:	2108      	movs	r1, #8
 800189e:	4809      	ldr	r0, [pc, #36]	@ (80018c4 <PWM_Assing+0xc4>)
 80018a0:	f00a f8b4 	bl	800ba0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80018a4:	210c      	movs	r1, #12
 80018a6:	4807      	ldr	r0, [pc, #28]	@ (80018c4 <PWM_Assing+0xc4>)
 80018a8:	f00a f8b0 	bl	800ba0c <HAL_TIM_PWM_Start>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	24000050 	.word	0x24000050
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40000800 	.word	0x40000800
 80018bc:	240025b8 	.word	0x240025b8
 80018c0:	24002604 	.word	0x24002604
 80018c4:	24002650 	.word	0x24002650

080018c8 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 80018cc:	2201      	movs	r2, #1
 80018ce:	4903      	ldr	r1, [pc, #12]	@ (80018dc <SBUS_init+0x14>)
 80018d0:	4803      	ldr	r0, [pc, #12]	@ (80018e0 <SBUS_init+0x18>)
 80018d2:	f00b f919 	bl	800cb08 <HAL_UART_Receive_DMA>

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	24000335 	.word	0x24000335
 80018e0:	240027c8 	.word	0x240027c8

080018e4 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <SBUS_Receive+0x8c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <SBUS_Receive+0x18>
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d017      	beq.n	800192a <SBUS_Receive+0x46>
 80018fa:	e02f      	b.n	800195c <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2b0f      	cmp	r3, #15
 8001900:	d10f      	bne.n	8001922 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <SBUS_Receive+0x90>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	4a1b      	ldr	r2, [pc, #108]	@ (8001978 <SBUS_Receive+0x94>)
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <SBUS_Receive+0x8c>)
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <SBUS_Receive+0x90>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <SBUS_Receive+0x90>)
 800191e:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001920:	e021      	b.n	8001966 <SBUS_Receive+0x82>
				RxCount = 0;
 8001922:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <SBUS_Receive+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
			break;
 8001928:	e01d      	b.n	8001966 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <SBUS_Receive+0x90>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	4a11      	ldr	r2, [pc, #68]	@ (8001978 <SBUS_Receive+0x94>)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <SBUS_Receive+0x90>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <SBUS_Receive+0x90>)
 8001940:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <SBUS_Receive+0x90>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b18      	cmp	r3, #24
 8001948:	d10c      	bne.n	8001964 <SBUS_Receive+0x80>
				RxCount = 0;
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <SBUS_Receive+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8001950:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <SBUS_Receive+0x8c>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8001956:	f000 f843 	bl	80019e0 <SBUS_getData>
			}
			break;
 800195a:	e003      	b.n	8001964 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <SBUS_Receive+0x8c>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
			break;
 8001962:	e000      	b.n	8001966 <SBUS_Receive+0x82>
			break;
 8001964:	bf00      	nop
	}
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	24000336 	.word	0x24000336
 8001974:	24000337 	.word	0x24000337
 8001978:	2400031c 	.word	0x2400031c

0800197c <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 8001980:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 8001982:	881a      	ldrh	r2, [r3, #0]
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <Temp_BypassFunct+0x60>)
 8001986:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8001988:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 800198a:	885a      	ldrh	r2, [r3, #2]
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <Temp_BypassFunct+0x60>)
 800198e:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 8001992:	889a      	ldrh	r2, [r3, #4]
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <Temp_BypassFunct+0x60>)
 8001996:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 800199a:	88da      	ldrh	r2, [r3, #6]
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <Temp_BypassFunct+0x60>)
 800199e:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 80019a2:	891a      	ldrh	r2, [r3, #8]
 80019a4:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <Temp_BypassFunct+0x60>)
 80019a6:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 80019aa:	895a      	ldrh	r2, [r3, #10]
 80019ac:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <Temp_BypassFunct+0x60>)
 80019ae:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 80019b2:	899a      	ldrh	r2, [r3, #12]
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <Temp_BypassFunct+0x60>)
 80019b6:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 80019ba:	89da      	ldrh	r2, [r3, #14]
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <Temp_BypassFunct+0x60>)
 80019be:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 80019c2:	8a1a      	ldrh	r2, [r3, #16]
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <Temp_BypassFunct+0x60>)
 80019c6:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <Temp_BypassFunct+0x5c>)
 80019ca:	8a5a      	ldrh	r2, [r3, #18]
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <Temp_BypassFunct+0x60>)
 80019ce:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 80019d0:	f7ff ff16 	bl	8001800 <PWM_Assing>
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	24000064 	.word	0x24000064
 80019dc:	24000050 	.word	0x24000050

080019e0 <SBUS_getData>:

void SBUS_getData(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 80019e4:	4b95      	ldr	r3, [pc, #596]	@ (8001c3c <SBUS_getData+0x25c>)
 80019e6:	785b      	ldrb	r3, [r3, #1]
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	4b94      	ldr	r3, [pc, #592]	@ (8001c3c <SBUS_getData+0x25c>)
 80019ec:	789b      	ldrb	r3, [r3, #2]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b90      	ldr	r3, [pc, #576]	@ (8001c40 <SBUS_getData+0x260>)
 8001a00:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8001a02:	4b8e      	ldr	r3, [pc, #568]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a04:	789b      	ldrb	r3, [r3, #2]
 8001a06:	08db      	lsrs	r3, r3, #3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	4b8b      	ldr	r3, [pc, #556]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a0e:	78db      	ldrb	r3, [r3, #3]
 8001a10:	015b      	lsls	r3, r3, #5
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b87      	ldr	r3, [pc, #540]	@ (8001c40 <SBUS_getData+0x260>)
 8001a22:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8001a24:	4b85      	ldr	r3, [pc, #532]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a26:	78db      	ldrb	r3, [r3, #3]
 8001a28:	099b      	lsrs	r3, r3, #6
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	4b83      	ldr	r3, [pc, #524]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a30:	791b      	ldrb	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b21a      	sxth	r2, r3
 8001a3a:	4b80      	ldr	r3, [pc, #512]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a3c:	795b      	ldrb	r3, [r3, #5]
 8001a3e:	029b      	lsls	r3, r3, #10
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c40 <SBUS_getData+0x260>)
 8001a50:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8001a52:	4b7a      	ldr	r3, [pc, #488]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a54:	795b      	ldrb	r3, [r3, #5]
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	4b77      	ldr	r3, [pc, #476]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a5e:	799b      	ldrb	r3, [r3, #6]
 8001a60:	01db      	lsls	r3, r3, #7
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b73      	ldr	r3, [pc, #460]	@ (8001c40 <SBUS_getData+0x260>)
 8001a72:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8001a74:	4b71      	ldr	r3, [pc, #452]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a76:	799b      	ldrb	r3, [r3, #6]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a80:	79db      	ldrb	r3, [r3, #7]
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b6b      	ldr	r3, [pc, #428]	@ (8001c40 <SBUS_getData+0x260>)
 8001a94:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8001a96:	4b69      	ldr	r3, [pc, #420]	@ (8001c3c <SBUS_getData+0x25c>)
 8001a98:	79db      	ldrb	r3, [r3, #7]
 8001a9a:	09db      	lsrs	r3, r3, #7
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <SBUS_getData+0x25c>)
 8001aa2:	7a1b      	ldrb	r3, [r3, #8]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b63      	ldr	r3, [pc, #396]	@ (8001c3c <SBUS_getData+0x25c>)
 8001aae:	7a5b      	ldrb	r3, [r3, #9]
 8001ab0:	025b      	lsls	r3, r3, #9
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c40 <SBUS_getData+0x260>)
 8001ac2:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001ac4:	4b5d      	ldr	r3, [pc, #372]	@ (8001c3c <SBUS_getData+0x25c>)
 8001ac6:	7a5b      	ldrb	r3, [r3, #9]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	4b5b      	ldr	r3, [pc, #364]	@ (8001c3c <SBUS_getData+0x25c>)
 8001ad0:	7a9b      	ldrb	r3, [r3, #10]
 8001ad2:	019b      	lsls	r3, r3, #6
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b57      	ldr	r3, [pc, #348]	@ (8001c40 <SBUS_getData+0x260>)
 8001ae4:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8001ae6:	4b55      	ldr	r3, [pc, #340]	@ (8001c3c <SBUS_getData+0x25c>)
 8001ae8:	7a9b      	ldrb	r3, [r3, #10]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	4b52      	ldr	r3, [pc, #328]	@ (8001c3c <SBUS_getData+0x25c>)
 8001af2:	7adb      	ldrb	r3, [r3, #11]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b4e      	ldr	r3, [pc, #312]	@ (8001c40 <SBUS_getData+0x260>)
 8001b06:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8001b08:	4b4c      	ldr	r3, [pc, #304]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b0a:	7b1b      	ldrb	r3, [r3, #12]
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b10:	7b5b      	ldrb	r3, [r3, #13]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b47      	ldr	r3, [pc, #284]	@ (8001c40 <SBUS_getData+0x260>)
 8001b24:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8001b26:	4b45      	ldr	r3, [pc, #276]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b28:	7b5b      	ldrb	r3, [r3, #13]
 8001b2a:	08db      	lsrs	r3, r3, #3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	b21a      	sxth	r2, r3
 8001b30:	4b42      	ldr	r3, [pc, #264]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b32:	7b9b      	ldrb	r3, [r3, #14]
 8001b34:	015b      	lsls	r3, r3, #5
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	4b3e      	ldr	r3, [pc, #248]	@ (8001c40 <SBUS_getData+0x260>)
 8001b46:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8001b48:	4b3c      	ldr	r3, [pc, #240]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b4a:	7b9b      	ldrb	r3, [r3, #14]
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	4b3a      	ldr	r3, [pc, #232]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b54:	7bdb      	ldrb	r3, [r3, #15]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	4b37      	ldr	r3, [pc, #220]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b60:	7c1b      	ldrb	r3, [r3, #16]
 8001b62:	029b      	lsls	r3, r3, #10
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <SBUS_getData+0x260>)
 8001b74:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8001b76:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b78:	7c1b      	ldrb	r3, [r3, #16]
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b82:	7c5b      	ldrb	r3, [r3, #17]
 8001b84:	01db      	lsls	r3, r3, #7
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <SBUS_getData+0x260>)
 8001b96:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <SBUS_getData+0x25c>)
 8001b9a:	7c5b      	ldrb	r3, [r3, #17]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <SBUS_getData+0x25c>)
 8001ba4:	7c9b      	ldrb	r3, [r3, #18]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <SBUS_getData+0x260>)
 8001bb8:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8001bba:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <SBUS_getData+0x25c>)
 8001bbc:	7c9b      	ldrb	r3, [r3, #18]
 8001bbe:	09db      	lsrs	r3, r3, #7
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <SBUS_getData+0x25c>)
 8001bc6:	7cdb      	ldrb	r3, [r3, #19]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <SBUS_getData+0x25c>)
 8001bd2:	7d1b      	ldrb	r3, [r3, #20]
 8001bd4:	025b      	lsls	r3, r3, #9
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <SBUS_getData+0x260>)
 8001be6:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <SBUS_getData+0x25c>)
 8001bea:	7d1b      	ldrb	r3, [r3, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <SBUS_getData+0x25c>)
 8001bf4:	7d5b      	ldrb	r3, [r3, #21]
 8001bf6:	019b      	lsls	r3, r3, #6
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <SBUS_getData+0x260>)
 8001c08:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <SBUS_getData+0x25c>)
 8001c0c:	7d5b      	ldrb	r3, [r3, #21]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <SBUS_getData+0x25c>)
 8001c16:	7d9b      	ldrb	r3, [r3, #22]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <SBUS_getData+0x260>)
 8001c2a:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <SBUS_getData+0x260>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c38:	e00a      	b.n	8001c50 <SBUS_getData+0x270>
 8001c3a:	bf00      	nop
 8001c3c:	2400031c 	.word	0x2400031c
 8001c40:	24000064 	.word	0x24000064
 8001c44:	43b00000 	.word	0x43b00000
 8001c48:	44a80000 	.word	0x44a80000
 8001c4c:	447a0000 	.word	0x447a0000
 8001c50:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8001c44 <SBUS_getData+0x264>
 8001c54:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c58:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8001c48 <SBUS_getData+0x268>
 8001c5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c60:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8001c4c <SBUS_getData+0x26c>
 8001c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c6c:	ee17 3a90 	vmov	r3, s15
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4bd1      	ldr	r3, [pc, #836]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001c7a:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8001c7c:	4bd0      	ldr	r3, [pc, #832]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001c7e:	885b      	ldrh	r3, [r3, #2]
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c88:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001c8c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c90:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c98:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001fcc <SBUS_getData+0x5ec>
 8001c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca4:	ee17 3a90 	vmov	r3, s15
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4bc3      	ldr	r3, [pc, #780]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001cb2:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001cb4:	4bc2      	ldr	r3, [pc, #776]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001cb6:	889b      	ldrh	r3, [r3, #4]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc0:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001cc4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cc8:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd0:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001fcc <SBUS_getData+0x5ec>
 8001cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cdc:	ee17 3a90 	vmov	r3, s15
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4bb5      	ldr	r3, [pc, #724]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001cea:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8001cec:	4bb4      	ldr	r3, [pc, #720]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001cee:	88db      	ldrh	r3, [r3, #6]
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf8:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001cfc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d00:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d08:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001fcc <SBUS_getData+0x5ec>
 8001d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d14:	ee17 3a90 	vmov	r3, s15
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4ba7      	ldr	r3, [pc, #668]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001d22:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8001d24:	4ba6      	ldr	r3, [pc, #664]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001d26:	891b      	ldrh	r3, [r3, #8]
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d30:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001d34:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d38:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d40:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001fcc <SBUS_getData+0x5ec>
 8001d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d4c:	ee17 3a90 	vmov	r3, s15
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	4b99      	ldr	r3, [pc, #612]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001d5a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8001d5c:	4b98      	ldr	r3, [pc, #608]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001d5e:	895b      	ldrh	r3, [r3, #10]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d68:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001d6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d70:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d78:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001fcc <SBUS_getData+0x5ec>
 8001d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d84:	ee17 3a90 	vmov	r3, s15
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b8b      	ldr	r3, [pc, #556]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001d92:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001d94:	4b8a      	ldr	r3, [pc, #552]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001d96:	899b      	ldrh	r3, [r3, #12]
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da0:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001da4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001da8:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001fcc <SBUS_getData+0x5ec>
 8001db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dbc:	ee17 3a90 	vmov	r3, s15
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001dca:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8001dcc:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001dce:	89db      	ldrh	r3, [r3, #14]
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd8:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001ddc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001de0:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001de4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de8:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001fcc <SBUS_getData+0x5ec>
 8001dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df4:	ee17 3a90 	vmov	r3, s15
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001e02:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8001e04:	4b6e      	ldr	r3, [pc, #440]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001e06:	8a1b      	ldrh	r3, [r3, #16]
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e10:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001e14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e18:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e20:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001fcc <SBUS_getData+0x5ec>
 8001e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e2c:	ee17 3a90 	vmov	r3, s15
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4b61      	ldr	r3, [pc, #388]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001e3a:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8001e3c:	4b60      	ldr	r3, [pc, #384]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001e3e:	8a5b      	ldrh	r3, [r3, #18]
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e48:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001e4c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e50:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e58:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001fcc <SBUS_getData+0x5ec>
 8001e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e64:	ee17 3a90 	vmov	r3, s15
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b53      	ldr	r3, [pc, #332]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001e72:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8001e74:	4b52      	ldr	r3, [pc, #328]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001e76:	8a9b      	ldrh	r3, [r3, #20]
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e80:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001e84:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e88:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001e8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e90:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001fcc <SBUS_getData+0x5ec>
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e9c:	ee17 3a90 	vmov	r3, s15
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b45      	ldr	r3, [pc, #276]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001eaa:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8001eac:	4b44      	ldr	r3, [pc, #272]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001eae:	8adb      	ldrh	r3, [r3, #22]
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001ebc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ec0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec8:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001fcc <SBUS_getData+0x5ec>
 8001ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed4:	ee17 3a90 	vmov	r3, s15
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001ee2:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8001ee4:	4b36      	ldr	r3, [pc, #216]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001ee6:	8b1b      	ldrh	r3, [r3, #24]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001ef4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ef8:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f00:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001fcc <SBUS_getData+0x5ec>
 8001f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f0c:	ee17 3a90 	vmov	r3, s15
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001f1a:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8001f1c:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001f1e:	8b5b      	ldrh	r3, [r3, #26]
 8001f20:	ee07 3a90 	vmov	s15, r3
 8001f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f28:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001f2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f30:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f38:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001fcc <SBUS_getData+0x5ec>
 8001f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f44:	ee17 3a90 	vmov	r3, s15
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001f52:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8001f54:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001f56:	8b9b      	ldrh	r3, [r3, #28]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f60:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001f64:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f68:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f70:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001fcc <SBUS_getData+0x5ec>
 8001f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f7c:	ee17 3a90 	vmov	r3, s15
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001f8a:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <SBUS_getData+0x5e0>)
 8001f8e:	8bdb      	ldrh	r3, [r3, #30]
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f98:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001fc4 <SBUS_getData+0x5e4>
 8001f9c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001fa0:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001fc8 <SBUS_getData+0x5e8>
 8001fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001fcc <SBUS_getData+0x5ec>
 8001fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb4:	ee17 3a90 	vmov	r3, s15
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001fbe:	e007      	b.n	8001fd0 <SBUS_getData+0x5f0>
 8001fc0:	24000064 	.word	0x24000064
 8001fc4:	43b00000 	.word	0x43b00000
 8001fc8:	44a80000 	.word	0x44a80000
 8001fcc:	447a0000 	.word	0x447a0000
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b28      	ldr	r3, [pc, #160]	@ (8002074 <SBUS_getData+0x694>)
 8001fd4:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 8001fd6:	4b28      	ldr	r3, [pc, #160]	@ (8002078 <SBUS_getData+0x698>)
 8001fd8:	7ddb      	ldrb	r3, [r3, #23]
 8001fda:	2b07      	cmp	r3, #7
 8001fdc:	d90a      	bls.n	8001ff4 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 8001fde:	4b26      	ldr	r3, [pc, #152]	@ (8002078 <SBUS_getData+0x698>)
 8001fe0:	7ddb      	ldrb	r3, [r3, #23]
 8001fe2:	3b08      	subs	r3, #8
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <SBUS_getData+0x698>)
 8001fe8:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8001fea:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <SBUS_getData+0x694>)
 8001fec:	2235      	movs	r2, #53	@ 0x35
 8001fee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001ff2:	e003      	b.n	8001ffc <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= Ok;
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <SBUS_getData+0x694>)
 8001ff6:	22aa      	movs	r2, #170	@ 0xaa
 8001ff8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <SBUS_getData+0x698>)
 8001ffe:	7ddb      	ldrb	r3, [r3, #23]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d90a      	bls.n	800201a <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <SBUS_getData+0x698>)
 8002006:	7ddb      	ldrb	r3, [r3, #23]
 8002008:	3b04      	subs	r3, #4
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <SBUS_getData+0x698>)
 800200e:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8002010:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <SBUS_getData+0x694>)
 8002012:	2210      	movs	r2, #16
 8002014:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002018:	e003      	b.n	8002022 <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=Ok;
 800201a:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <SBUS_getData+0x694>)
 800201c:	22aa      	movs	r2, #170	@ 0xaa
 800201e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <SBUS_getData+0x698>)
 8002024:	7ddb      	ldrb	r3, [r3, #23]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d90a      	bls.n	8002040 <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 800202a:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <SBUS_getData+0x698>)
 800202c:	7ddb      	ldrb	r3, [r3, #23]
 800202e:	3b02      	subs	r3, #2
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <SBUS_getData+0x698>)
 8002034:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <SBUS_getData+0x694>)
 8002038:	22ff      	movs	r2, #255	@ 0xff
 800203a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800203e:	e003      	b.n	8002048 <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=OFF;
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <SBUS_getData+0x694>)
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	if(SBUS_UART_Rx[23]){
 8002048:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <SBUS_getData+0x698>)
 800204a:	7ddb      	ldrb	r3, [r3, #23]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <SBUS_getData+0x67a>
		Radio_input.Interruptor_1=ON;
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <SBUS_getData+0x694>)
 8002052:	22ff      	movs	r2, #255	@ 0xff
 8002054:	f883 2020 	strb.w	r2, [r3, #32]
 8002058:	e003      	b.n	8002062 <SBUS_getData+0x682>
	}else Radio_input.Interruptor_1=OFF;
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <SBUS_getData+0x694>)
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2020 	strb.w	r2, [r3, #32]


	Radio_input.Uart_Counter = 0;
 8002062:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <SBUS_getData+0x694>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Temp_BypassFunct();
 800206a:	f7ff fc87 	bl	800197c <Temp_BypassFunct>

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	24000064 	.word	0x24000064
 8002078:	2400031c 	.word	0x2400031c

0800207c <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <SBUS_IntegrityVerification+0x44>)
 8002082:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002086:	2bff      	cmp	r3, #255	@ 0xff
 8002088:	d00c      	beq.n	80020a4 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 800208a:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <SBUS_IntegrityVerification+0x44>)
 800208c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002090:	3301      	adds	r3, #1
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <SBUS_IntegrityVerification+0x44>)
 8002096:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		Radio_input.uart_error = Ok;
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <SBUS_IntegrityVerification+0x44>)
 800209c:	22aa      	movs	r2, #170	@ 0xaa
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 80020a2:	e007      	b.n	80020b4 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <SBUS_IntegrityVerification+0x44>)
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		Radio_input.fail_safe = FailSafe;
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <SBUS_IntegrityVerification+0x44>)
 80020ae:	2235      	movs	r2, #53	@ 0x35
 80020b0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	24000064 	.word	0x24000064

080020c4 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 80020c8:	2201      	movs	r2, #1
 80020ca:	4910      	ldr	r1, [pc, #64]	@ (800210c <SD_init+0x48>)
 80020cc:	4810      	ldr	r0, [pc, #64]	@ (8002110 <SD_init+0x4c>)
 80020ce:	f00f fc91 	bl	80119f4 <f_mount>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <SD_init+0x50>)
 80020d8:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80020da:	2213      	movs	r2, #19
 80020dc:	490e      	ldr	r1, [pc, #56]	@ (8002118 <SD_init+0x54>)
 80020de:	480f      	ldr	r0, [pc, #60]	@ (800211c <SD_init+0x58>)
 80020e0:	f00f fcce 	bl	8011a80 <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 80020e4:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <SD_init+0x58>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4619      	mov	r1, r3
 80020ea:	480c      	ldr	r0, [pc, #48]	@ (800211c <SD_init+0x58>)
 80020ec:	f010 f8cc 	bl	8012288 <f_lseek>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <SD_init+0x50>)
 80020f6:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,Pitch,Roll,Yaw,Alt,Pressure,Temp\n");
 80020f8:	4909      	ldr	r1, [pc, #36]	@ (8002120 <SD_init+0x5c>)
 80020fa:	4808      	ldr	r0, [pc, #32]	@ (800211c <SD_init+0x58>)
 80020fc:	f010 fb60 	bl	80127c0 <f_printf>
	  f_close(&fil);
 8002100:	4806      	ldr	r0, [pc, #24]	@ (800211c <SD_init+0x58>)
 8002102:	f010 f897 	bl	8012234 <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	08013130 	.word	0x08013130
 8002110:	24000338 	.word	0x24000338
 8002114:	240023a4 	.word	0x240023a4
 8002118:	2400008c 	.word	0x2400008c
 800211c:	24001374 	.word	0x24001374
 8002120:	08013134 	.word	0x08013134

08002124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800212a:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <MX_DMA_Init+0x4c>)
 800212c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002130:	4a0f      	ldr	r2, [pc, #60]	@ (8002170 <MX_DMA_Init+0x4c>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <MX_DMA_Init+0x4c>)
 800213c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2100      	movs	r1, #0
 800214c:	200b      	movs	r0, #11
 800214e:	f001 fdca 	bl	8003ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002152:	200b      	movs	r0, #11
 8002154:	f001 fde1 	bl	8003d1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	200c      	movs	r0, #12
 800215e:	f001 fdc2 	bl	8003ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002162:	200c      	movs	r0, #12
 8002164:	f001 fdd9 	bl	8003d1a <HAL_NVIC_EnableIRQ>

}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	58024400 	.word	0x58024400

08002174 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002178:	4b2e      	ldr	r3, [pc, #184]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 800217a:	4a2f      	ldr	r2, [pc, #188]	@ (8002238 <MX_FDCAN1_Init+0xc4>)
 800217c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800217e:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002184:	4b2b      	ldr	r3, [pc, #172]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800218a:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 800218c:	2200      	movs	r2, #0
 800218e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002190:	4b28      	ldr	r3, [pc, #160]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 8002192:	2200      	movs	r2, #0
 8002194:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002196:	4b27      	ldr	r3, [pc, #156]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 8002198:	2200      	movs	r2, #0
 800219a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 800219e:	2210      	movs	r2, #16
 80021a0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80021a2:	4b24      	ldr	r3, [pc, #144]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80021a8:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021aa:	2202      	movs	r2, #2
 80021ac:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80021ae:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021b0:	2202      	movs	r2, #2
 80021b2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80021b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021bc:	2201      	movs	r2, #1
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80021c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80021cc:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80021d2:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80021e4:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021e6:	2204      	movs	r2, #4
 80021e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80021f0:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021f2:	2204      	movs	r2, #4
 80021f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80021fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 80021fe:	2204      	movs	r2, #4
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 8002204:	2200      	movs	r2, #0
 8002206:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 800220a:	2200      	movs	r2, #0
 800220c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 8002210:	2200      	movs	r2, #0
 8002212:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002214:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 8002216:	2200      	movs	r2, #0
 8002218:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 800221c:	2204      	movs	r2, #4
 800221e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <MX_FDCAN1_Init+0xc0>)
 8002222:	f004 fceb 	bl	8006bfc <HAL_FDCAN_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800222c:	f000 fb30 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	240023a8 	.word	0x240023a8
 8002238:	4000a000 	.word	0x4000a000

0800223c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b0ba      	sub	sp, #232	@ 0xe8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	22c0      	movs	r2, #192	@ 0xc0
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f010 fdef 	bl	8012e40 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2f      	ldr	r2, [pc, #188]	@ (8002324 <HAL_FDCAN_MspInit+0xe8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d157      	bne.n	800231c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800226c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002278:	2304      	movs	r3, #4
 800227a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 800227c:	2308      	movs	r3, #8
 800227e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8002284:	2301      	movs	r3, #1
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002288:	2302      	movs	r3, #2
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800228c:	23c0      	movs	r3, #192	@ 0xc0
 800228e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8002298:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800229c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4618      	mov	r0, r3
 80022a6:	f006 fb03 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80022b0:	f000 faee 	bl	8002890 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80022b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <HAL_FDCAN_MspInit+0xec>)
 80022b6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80022ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <HAL_FDCAN_MspInit+0xec>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c0:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80022c4:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <HAL_FDCAN_MspInit+0xec>)
 80022c6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80022ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <HAL_FDCAN_MspInit+0xec>)
 80022d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022d8:	4a13      	ldr	r2, [pc, #76]	@ (8002328 <HAL_FDCAN_MspInit+0xec>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_FDCAN_MspInit+0xec>)
 80022e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80022f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800230a:	2309      	movs	r3, #9
 800230c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002314:	4619      	mov	r1, r3
 8002316:	4805      	ldr	r0, [pc, #20]	@ (800232c <HAL_FDCAN_MspInit+0xf0>)
 8002318:	f004 ffd4 	bl	80072c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800231c:	bf00      	nop
 800231e:	37e8      	adds	r7, #232	@ 0xe8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	4000a000 	.word	0x4000a000
 8002328:	58024400 	.word	0x58024400
 800232c:	58020000 	.word	0x58020000

08002330 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	@ 0x28
 8002334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002346:	4b4e      	ldr	r3, [pc, #312]	@ (8002480 <MX_GPIO_Init+0x150>)
 8002348:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800234c:	4a4c      	ldr	r2, [pc, #304]	@ (8002480 <MX_GPIO_Init+0x150>)
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002356:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <MX_GPIO_Init+0x150>)
 8002358:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	4b46      	ldr	r3, [pc, #280]	@ (8002480 <MX_GPIO_Init+0x150>)
 8002366:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800236a:	4a45      	ldr	r2, [pc, #276]	@ (8002480 <MX_GPIO_Init+0x150>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002374:	4b42      	ldr	r3, [pc, #264]	@ (8002480 <MX_GPIO_Init+0x150>)
 8002376:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	4b3f      	ldr	r3, [pc, #252]	@ (8002480 <MX_GPIO_Init+0x150>)
 8002384:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002388:	4a3d      	ldr	r2, [pc, #244]	@ (8002480 <MX_GPIO_Init+0x150>)
 800238a:	f043 0302 	orr.w	r3, r3, #2
 800238e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002392:	4b3b      	ldr	r3, [pc, #236]	@ (8002480 <MX_GPIO_Init+0x150>)
 8002394:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a0:	4b37      	ldr	r3, [pc, #220]	@ (8002480 <MX_GPIO_Init+0x150>)
 80023a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023a6:	4a36      	ldr	r2, [pc, #216]	@ (8002480 <MX_GPIO_Init+0x150>)
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80023b0:	4b33      	ldr	r3, [pc, #204]	@ (8002480 <MX_GPIO_Init+0x150>)
 80023b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80023be:	2200      	movs	r2, #0
 80023c0:	f242 010f 	movw	r1, #8207	@ 0x200f
 80023c4:	482f      	ldr	r0, [pc, #188]	@ (8002484 <MX_GPIO_Init+0x154>)
 80023c6:	f005 f92d 	bl	8007624 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2110      	movs	r1, #16
 80023ce:	482e      	ldr	r0, [pc, #184]	@ (8002488 <MX_GPIO_Init+0x158>)
 80023d0:	f005 f928 	bl	8007624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 80023d4:	2200      	movs	r2, #0
 80023d6:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80023da:	482c      	ldr	r0, [pc, #176]	@ (800248c <MX_GPIO_Init+0x15c>)
 80023dc:	f005 f922 	bl	8007624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2104      	movs	r1, #4
 80023e4:	482a      	ldr	r0, [pc, #168]	@ (8002490 <MX_GPIO_Init+0x160>)
 80023e6:	f005 f91d 	bl	8007624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80023ea:	f242 030f 	movw	r3, #8207	@ 0x200f
 80023ee:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	4820      	ldr	r0, [pc, #128]	@ (8002484 <MX_GPIO_Init+0x154>)
 8002404:	f004 ff5e 	bl	80072c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002408:	2310      	movs	r3, #16
 800240a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	2301      	movs	r3, #1
 800240e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	481a      	ldr	r0, [pc, #104]	@ (8002488 <MX_GPIO_Init+0x158>)
 8002420:	f004 ff50 	bl	80072c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002424:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242a:	2301      	movs	r3, #1
 800242c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4813      	ldr	r0, [pc, #76]	@ (800248c <MX_GPIO_Init+0x15c>)
 800243e:	f004 ff41 	bl	80072c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	480b      	ldr	r0, [pc, #44]	@ (8002484 <MX_GPIO_Init+0x154>)
 8002458:	f004 ff34 	bl	80072c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 800245c:	2304      	movs	r3, #4
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2301      	movs	r3, #1
 8002462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4807      	ldr	r0, [pc, #28]	@ (8002490 <MX_GPIO_Init+0x160>)
 8002474:	f004 ff26 	bl	80072c4 <HAL_GPIO_Init>

}
 8002478:	bf00      	nop
 800247a:	3728      	adds	r7, #40	@ 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	58024400 	.word	0x58024400
 8002484:	58020800 	.word	0x58020800
 8002488:	58020000 	.word	0x58020000
 800248c:	58020400 	.word	0x58020400
 8002490:	58020c00 	.word	0x58020c00

08002494 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002498:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <MX_I2C3_Init+0x74>)
 800249a:	4a1c      	ldr	r2, [pc, #112]	@ (800250c <MX_I2C3_Init+0x78>)
 800249c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002510 <MX_I2C3_Init+0x7c>)
 80024a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80024a4:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b0:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024bc:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024ce:	480e      	ldr	r0, [pc, #56]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024d0:	f005 f8c2 	bl	8007658 <HAL_I2C_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80024da:	f000 f9d9 	bl	8002890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024de:	2100      	movs	r1, #0
 80024e0:	4809      	ldr	r0, [pc, #36]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024e2:	f005 f955 	bl	8007790 <HAL_I2CEx_ConfigAnalogFilter>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80024ec:	f000 f9d0 	bl	8002890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024f0:	2100      	movs	r1, #0
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <MX_I2C3_Init+0x74>)
 80024f4:	f005 f997 	bl	8007826 <HAL_I2CEx_ConfigDigitalFilter>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80024fe:	f000 f9c7 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	24002448 	.word	0x24002448
 800250c:	40005c00 	.word	0x40005c00
 8002510:	20b0ccff 	.word	0x20b0ccff

08002514 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0bc      	sub	sp, #240	@ 0xf0
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800252c:	f107 0318 	add.w	r3, r7, #24
 8002530:	22c0      	movs	r2, #192	@ 0xc0
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f010 fc83 	bl	8012e40 <memset>
  if(i2cHandle->Instance==I2C3)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a39      	ldr	r2, [pc, #228]	@ (8002624 <HAL_I2C_MspInit+0x110>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d16b      	bne.n	800261c <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002544:	f04f 0208 	mov.w	r2, #8
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002556:	f107 0318 	add.w	r3, r7, #24
 800255a:	4618      	mov	r0, r3
 800255c:	f006 f9a8 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002566:	f000 f993 	bl	8002890 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256a:	4b2f      	ldr	r3, [pc, #188]	@ (8002628 <HAL_I2C_MspInit+0x114>)
 800256c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002570:	4a2d      	ldr	r2, [pc, #180]	@ (8002628 <HAL_I2C_MspInit+0x114>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800257a:	4b2b      	ldr	r3, [pc, #172]	@ (8002628 <HAL_I2C_MspInit+0x114>)
 800257c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002588:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <HAL_I2C_MspInit+0x114>)
 800258a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800258e:	4a26      	ldr	r2, [pc, #152]	@ (8002628 <HAL_I2C_MspInit+0x114>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002598:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <HAL_I2C_MspInit+0x114>)
 800259a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ae:	2312      	movs	r3, #18
 80025b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025c0:	2304      	movs	r3, #4
 80025c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025ca:	4619      	mov	r1, r3
 80025cc:	4817      	ldr	r0, [pc, #92]	@ (800262c <HAL_I2C_MspInit+0x118>)
 80025ce:	f004 fe79 	bl	80072c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025da:	2312      	movs	r3, #18
 80025dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025ec:	2304      	movs	r3, #4
 80025ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025f6:	4619      	mov	r1, r3
 80025f8:	480d      	ldr	r0, [pc, #52]	@ (8002630 <HAL_I2C_MspInit+0x11c>)
 80025fa:	f004 fe63 	bl	80072c4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <HAL_I2C_MspInit+0x114>)
 8002600:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002604:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <HAL_I2C_MspInit+0x114>)
 8002606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800260a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_I2C_MspInit+0x114>)
 8002610:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002614:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800261c:	bf00      	nop
 800261e:	37f0      	adds	r7, #240	@ 0xf0
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40005c00 	.word	0x40005c00
 8002628:	58024400 	.word	0x58024400
 800262c:	58020800 	.word	0x58020800
 8002630:	58020000 	.word	0x58020000

08002634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002638:	f000 f8fe 	bl	8002838 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263c:	f001 f9c2 	bl	80039c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002640:	f000 f832 	bl	80026a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002644:	f7ff fe74 	bl	8002330 <MX_GPIO_Init>
  MX_DMA_Init();
 8002648:	f7ff fd6c 	bl	8002124 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800264c:	f7ff fd92 	bl	8002174 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002650:	f7ff ff20 	bl	8002494 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002654:	f000 f922 	bl	800289c <MX_SPI1_Init>
  MX_SPI2_Init();
 8002658:	f000 f976 	bl	8002948 <MX_SPI2_Init>
  MX_TIM2_Init();
 800265c:	f000 fb8e 	bl	8002d7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002660:	f000 fc08 	bl	8002e74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002664:	f000 fc6c 	bl	8002f40 <MX_TIM4_Init>
  MX_UART4_Init();
 8002668:	f000 fe7c 	bl	8003364 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800266c:	f000 fec6 	bl	80033fc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002670:	f000 ff60 	bl	8003534 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002674:	f000 fd1a 	bl	80030ac <MX_TIM13_Init>
  MX_FATFS_Init();
 8002678:	f00c fa40 	bl	800eafc <MX_FATFS_Init>
  MX_TIM6_Init();
 800267c:	f000 fcdc 	bl	8003038 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8002680:	f000 ff0c 	bl	800349c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002684:	f7fe fcc4 	bl	8001010 <BMP280_init>
  SD_init();
 8002688:	f7ff fd1c 	bl	80020c4 <SD_init>
  SBUS_init();
 800268c:	f7ff f91c 	bl	80018c8 <SBUS_init>
  BNO_Init();
 8002690:	f7fe ff44 	bl	800151c <BNO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 8002694:	f7fe fce2 	bl	800105c <BMP280_calculate>
	  BNO_GetAtt();
 8002698:	f7fe ff72 	bl	8001580 <BNO_GetAtt>
	  HAL_Delay(10);
 800269c:	200a      	movs	r0, #10
 800269e:	f001 fa23 	bl	8003ae8 <HAL_Delay>
	  BMP280_calculate();
 80026a2:	bf00      	nop
 80026a4:	e7f6      	b.n	8002694 <main+0x60>
	...

080026a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b09c      	sub	sp, #112	@ 0x70
 80026ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b2:	224c      	movs	r2, #76	@ 0x4c
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f010 fbc2 	bl	8012e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2220      	movs	r2, #32
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f010 fbbc 	bl	8012e40 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80026c8:	4b30      	ldr	r3, [pc, #192]	@ (800278c <SystemClock_Config+0xe4>)
 80026ca:	f04f 32ff 	mov.w	r2, #4294967295
 80026ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80026d2:	2002      	movs	r0, #2
 80026d4:	f005 f8f4 	bl	80078c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80026d8:	2300      	movs	r3, #0
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002790 <SystemClock_Config+0xe8>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002790 <SystemClock_Config+0xe8>)
 80026e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <SystemClock_Config+0xe8>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80026f4:	bf00      	nop
 80026f6:	4b26      	ldr	r3, [pc, #152]	@ (8002790 <SystemClock_Config+0xe8>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002702:	d1f8      	bne.n	80026f6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002704:	2302      	movs	r3, #2
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002708:	2301      	movs	r3, #1
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800270c:	2340      	movs	r3, #64	@ 0x40
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002710:	2302      	movs	r3, #2
 8002712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002714:	2300      	movs	r3, #0
 8002716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002718:	2304      	movs	r3, #4
 800271a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800271c:	2323      	movs	r3, #35	@ 0x23
 800271e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002720:	2302      	movs	r3, #2
 8002722:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002724:	2302      	movs	r3, #2
 8002726:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002728:	2302      	movs	r3, #2
 800272a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800272c:	230c      	movs	r3, #12
 800272e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002730:	2300      	movs	r3, #0
 8002732:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800273c:	4618      	mov	r0, r3
 800273e:	f005 f8f9 	bl	8007934 <HAL_RCC_OscConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002748:	f000 f8a2 	bl	8002890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800274c:	233f      	movs	r3, #63	@ 0x3f
 800274e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002750:	2303      	movs	r3, #3
 8002752:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800275c:	2340      	movs	r3, #64	@ 0x40
 800275e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002760:	2340      	movs	r3, #64	@ 0x40
 8002762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002764:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002768:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800276a:	2340      	movs	r3, #64	@ 0x40
 800276c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2106      	movs	r1, #6
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fd10 	bl	8008198 <HAL_RCC_ClockConfig>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800277e:	f000 f887 	bl	8002890 <Error_Handler>
  }
}
 8002782:	bf00      	nop
 8002784:	3770      	adds	r7, #112	@ 0x70
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	58024400 	.word	0x58024400
 8002790:	58024800 	.word	0x58024800

08002794 <HAL_UART_RxCpltCallback>:

uint64_t TimeOn_Counter = 0x00;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a10      	ldr	r2, [pc, #64]	@ (80027e4 <HAL_UART_RxCpltCallback+0x50>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10a      	bne.n	80027bc <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <HAL_UART_RxCpltCallback+0x54>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f89a 	bl	80018e4 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 80027b0:	2201      	movs	r2, #1
 80027b2:	490d      	ldr	r1, [pc, #52]	@ (80027e8 <HAL_UART_RxCpltCallback+0x54>)
 80027b4:	480d      	ldr	r0, [pc, #52]	@ (80027ec <HAL_UART_RxCpltCallback+0x58>)
 80027b6:	f00a f9a7 	bl	800cb08 <HAL_UART_Receive_DMA>
	}
    else if (huart -> Instance == USART3){
        BNO_Receive(BNO_BufferByte);
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
    }
}
 80027ba:	e00e      	b.n	80027da <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0b      	ldr	r2, [pc, #44]	@ (80027f0 <HAL_UART_RxCpltCallback+0x5c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d109      	bne.n	80027da <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 80027c6:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_UART_RxCpltCallback+0x60>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fee0 	bl	8001590 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80027d0:	2201      	movs	r2, #1
 80027d2:	4908      	ldr	r1, [pc, #32]	@ (80027f4 <HAL_UART_RxCpltCallback+0x60>)
 80027d4:	4808      	ldr	r0, [pc, #32]	@ (80027f8 <HAL_UART_RxCpltCallback+0x64>)
 80027d6:	f00a f997 	bl	800cb08 <HAL_UART_Receive_DMA>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40011000 	.word	0x40011000
 80027e8:	24000335 	.word	0x24000335
 80027ec:	240027c8 	.word	0x240027c8
 80027f0:	40004800 	.word	0x40004800
 80027f4:	24000263 	.word	0x24000263
 80027f8:	2400285c 	.word	0x2400285c

080027fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a09      	ldr	r2, [pc, #36]	@ (8002830 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10c      	bne.n	8002828 <HAL_TIM_PeriodElapsedCallback+0x2c>
		TimeOn_Counter++;
 800280e:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	1c54      	adds	r4, r2, #1
 8002816:	f143 0500 	adc.w	r5, r3, #0
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800281c:	e9c3 4500 	strd	r4, r5, [r3]
		LED_Tasks();
 8002820:	f7fe ffa0 	bl	8001764 <LED_Tasks>
		SBUS_IntegrityVerification();
 8002824:	f7ff fc2a 	bl	800207c <SBUS_IntegrityVerification>
	}

}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bdb0      	pop	{r4, r5, r7, pc}
 8002830:	40001000 	.word	0x40001000
 8002834:	240024a0 	.word	0x240024a0

08002838 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800283e:	463b      	mov	r3, r7
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800284a:	f001 fa81 	bl	8003d50 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800284e:	2301      	movs	r3, #1
 8002850:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002852:	2300      	movs	r3, #0
 8002854:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800285a:	231f      	movs	r3, #31
 800285c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800285e:	2387      	movs	r3, #135	@ 0x87
 8002860:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002862:	2300      	movs	r3, #0
 8002864:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002866:	2300      	movs	r3, #0
 8002868:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800286e:	2301      	movs	r3, #1
 8002870:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800287a:	463b      	mov	r3, r7
 800287c:	4618      	mov	r0, r3
 800287e:	f001 fa9f 	bl	8003dc0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002882:	2004      	movs	r0, #4
 8002884:	f001 fa7c 	bl	8003d80 <HAL_MPU_Enable>

}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002894:	b672      	cpsid	i
}
 8002896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <Error_Handler+0x8>

0800289c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028a2:	4a28      	ldr	r2, [pc, #160]	@ (8002944 <MX_SPI1_Init+0xa8>)
 80028a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028a6:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80028ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028ae:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028b4:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028b6:	2207      	movs	r2, #7
 80028b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ba:	4b21      	ldr	r3, [pc, #132]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028d0:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80028d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028de:	2200      	movs	r2, #0
 80028e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e2:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80028f6:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80028fc:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <MX_SPI1_Init+0xa4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002902:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <MX_SPI1_Init+0xa4>)
 8002904:	2200      	movs	r2, #0
 8002906:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002908:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <MX_SPI1_Init+0xa4>)
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800290e:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <MX_SPI1_Init+0xa4>)
 8002910:	2200      	movs	r2, #0
 8002912:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002914:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <MX_SPI1_Init+0xa4>)
 8002916:	2200      	movs	r2, #0
 8002918:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800291a:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <MX_SPI1_Init+0xa4>)
 800291c:	2200      	movs	r2, #0
 800291e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002920:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <MX_SPI1_Init+0xa4>)
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <MX_SPI1_Init+0xa4>)
 8002928:	2200      	movs	r2, #0
 800292a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800292c:	4804      	ldr	r0, [pc, #16]	@ (8002940 <MX_SPI1_Init+0xa4>)
 800292e:	f007 fd9f 	bl	800a470 <HAL_SPI_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002938:	f7ff ffaa 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	240024a8 	.word	0x240024a8
 8002944:	40013000 	.word	0x40013000

08002948 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800294c:	4b27      	ldr	r3, [pc, #156]	@ (80029ec <MX_SPI2_Init+0xa4>)
 800294e:	4a28      	ldr	r2, [pc, #160]	@ (80029f0 <MX_SPI2_Init+0xa8>)
 8002950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002952:	4b26      	ldr	r3, [pc, #152]	@ (80029ec <MX_SPI2_Init+0xa4>)
 8002954:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002958:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800295a:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <MX_SPI2_Init+0xa4>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002960:	4b22      	ldr	r3, [pc, #136]	@ (80029ec <MX_SPI2_Init+0xa4>)
 8002962:	2207      	movs	r2, #7
 8002964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002966:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <MX_SPI2_Init+0xa4>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800296c:	4b1f      	ldr	r3, [pc, #124]	@ (80029ec <MX_SPI2_Init+0xa4>)
 800296e:	2200      	movs	r2, #0
 8002970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002972:	4b1e      	ldr	r3, [pc, #120]	@ (80029ec <MX_SPI2_Init+0xa4>)
 8002974:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002978:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800297a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ec <MX_SPI2_Init+0xa4>)
 800297c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002980:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002982:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <MX_SPI2_Init+0xa4>)
 8002984:	2200      	movs	r2, #0
 8002986:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002988:	4b18      	ldr	r3, [pc, #96]	@ (80029ec <MX_SPI2_Init+0xa4>)
 800298a:	2200      	movs	r2, #0
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <MX_SPI2_Init+0xa4>)
 8002990:	2200      	movs	r2, #0
 8002992:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002994:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <MX_SPI2_Init+0xa4>)
 8002996:	2200      	movs	r2, #0
 8002998:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800299a:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <MX_SPI2_Init+0xa4>)
 800299c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80029a2:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80029ae:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80029b4:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80029ba:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029bc:	2200      	movs	r2, #0
 80029be:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80029c0:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80029c6:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80029cc:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029d8:	4804      	ldr	r0, [pc, #16]	@ (80029ec <MX_SPI2_Init+0xa4>)
 80029da:	f007 fd49 	bl	800a470 <HAL_SPI_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80029e4:	f7ff ff54 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	24002530 	.word	0x24002530
 80029f0:	40003800 	.word	0x40003800

080029f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0bc      	sub	sp, #240	@ 0xf0
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a0c:	f107 0318 	add.w	r3, r7, #24
 8002a10:	22c0      	movs	r2, #192	@ 0xc0
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f010 fa13 	bl	8012e40 <memset>
  if(spiHandle->Instance==SPI1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b50 <HAL_SPI_MspInit+0x15c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d145      	bne.n	8002ab0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002a24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a34:	f107 0318 	add.w	r3, r7, #24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f005 ff39 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002a44:	f7ff ff24 	bl	8002890 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a48:	4b42      	ldr	r3, [pc, #264]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002a4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002a4e:	4a41      	ldr	r2, [pc, #260]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a54:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002a58:	4b3e      	ldr	r3, [pc, #248]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002a5a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	4b3b      	ldr	r3, [pc, #236]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002a68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a6c:	4a39      	ldr	r2, [pc, #228]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a76:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002a84:	23e0      	movs	r3, #224	@ 0xe0
 8002a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a9c:	2305      	movs	r3, #5
 8002a9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	482b      	ldr	r0, [pc, #172]	@ (8002b58 <HAL_SPI_MspInit+0x164>)
 8002aaa:	f004 fc0b 	bl	80072c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002aae:	e04a      	b.n	8002b46 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a29      	ldr	r2, [pc, #164]	@ (8002b5c <HAL_SPI_MspInit+0x168>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d145      	bne.n	8002b46 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002aba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aca:	f107 0318 	add.w	r3, r7, #24
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f005 feee 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002ada:	f7ff fed9 	bl	8002890 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ade:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002ae0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aea:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002aee:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002af0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002af4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afc:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002afe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b02:	4a14      	ldr	r2, [pc, #80]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_SPI_MspInit+0x160>)
 8002b0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8002b1a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b34:	2305      	movs	r3, #5
 8002b36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4807      	ldr	r0, [pc, #28]	@ (8002b60 <HAL_SPI_MspInit+0x16c>)
 8002b42:	f004 fbbf 	bl	80072c4 <HAL_GPIO_Init>
}
 8002b46:	bf00      	nop
 8002b48:	37f0      	adds	r7, #240	@ 0xf0
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40013000 	.word	0x40013000
 8002b54:	58024400 	.word	0x58024400
 8002b58:	58020000 	.word	0x58020000
 8002b5c:	40003800 	.word	0x40003800
 8002b60:	58020400 	.word	0x58020400

08002b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_MspInit+0x30>)
 8002b6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002b70:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <HAL_MspInit+0x30>)
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_MspInit+0x30>)
 8002b7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	58024400 	.word	0x58024400

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <NMI_Handler+0x4>

08002ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <HardFault_Handler+0x4>

08002ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <MemManage_Handler+0x4>

08002bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <BusFault_Handler+0x4>

08002bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <UsageFault_Handler+0x4>

08002bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <SysTick_Handler+0x34>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <SysTick_Handler+0x18>
	    Timer1--;
 8002bf8:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <SysTick_Handler+0x34>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <SysTick_Handler+0x34>)
 8002c02:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <SysTick_Handler+0x38>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <SysTick_Handler+0x2c>
	    Timer2--;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <SysTick_Handler+0x38>)
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	4b03      	ldr	r3, [pc, #12]	@ (8002c24 <SysTick_Handler+0x38>)
 8002c16:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c18:	f000 ff46 	bl	8003aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	24002a80 	.word	0x24002a80
 8002c24:	24002a82 	.word	0x24002a82

08002c28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c2c:	4802      	ldr	r0, [pc, #8]	@ (8002c38 <DMA1_Stream0_IRQHandler+0x10>)
 8002c2e:	f002 fc63 	bl	80054f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	24002984 	.word	0x24002984

08002c3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002c40:	4802      	ldr	r0, [pc, #8]	@ (8002c4c <DMA1_Stream1_IRQHandler+0x10>)
 8002c42:	f002 fc59 	bl	80054f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	240029fc 	.word	0x240029fc

08002c50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c54:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <USART1_IRQHandler+0x10>)
 8002c56:	f009 ffa3 	bl	800cba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	240027c8 	.word	0x240027c8

08002c64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <USART3_IRQHandler+0x10>)
 8002c6a:	f009 ff99 	bl	800cba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	2400285c 	.word	0x2400285c

08002c78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <TIM6_DAC_IRQHandler+0x10>)
 8002c7e:	f008 ffd3 	bl	800bc28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	2400269c 	.word	0x2400269c

08002c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c90:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <SystemInit+0xd0>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c96:	4a31      	ldr	r2, [pc, #196]	@ (8002d5c <SystemInit+0xd0>)
 8002c98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8002d60 <SystemInit+0xd4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d807      	bhi.n	8002cbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cac:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <SystemInit+0xd4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 030f 	bic.w	r3, r3, #15
 8002cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8002d60 <SystemInit+0xd4>)
 8002cb6:	f043 0303 	orr.w	r3, r3, #3
 8002cba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002cbc:	4b29      	ldr	r3, [pc, #164]	@ (8002d64 <SystemInit+0xd8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a28      	ldr	r2, [pc, #160]	@ (8002d64 <SystemInit+0xd8>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cc8:	4b26      	ldr	r3, [pc, #152]	@ (8002d64 <SystemInit+0xd8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002cce:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <SystemInit+0xd8>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4924      	ldr	r1, [pc, #144]	@ (8002d64 <SystemInit+0xd8>)
 8002cd4:	4b24      	ldr	r3, [pc, #144]	@ (8002d68 <SystemInit+0xdc>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cda:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <SystemInit+0xd4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <SystemInit+0xd4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 030f 	bic.w	r3, r3, #15
 8002cee:	4a1c      	ldr	r2, [pc, #112]	@ (8002d60 <SystemInit+0xd4>)
 8002cf0:	f043 0303 	orr.w	r3, r3, #3
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <SystemInit+0xd8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <SystemInit+0xd8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002d02:	4b18      	ldr	r3, [pc, #96]	@ (8002d64 <SystemInit+0xd8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d08:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <SystemInit+0xd8>)
 8002d0a:	4a18      	ldr	r2, [pc, #96]	@ (8002d6c <SystemInit+0xe0>)
 8002d0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <SystemInit+0xd8>)
 8002d10:	4a17      	ldr	r2, [pc, #92]	@ (8002d70 <SystemInit+0xe4>)
 8002d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d14:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <SystemInit+0xd8>)
 8002d16:	4a17      	ldr	r2, [pc, #92]	@ (8002d74 <SystemInit+0xe8>)
 8002d18:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <SystemInit+0xd8>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d20:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <SystemInit+0xd8>)
 8002d22:	4a14      	ldr	r2, [pc, #80]	@ (8002d74 <SystemInit+0xe8>)
 8002d24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <SystemInit+0xd8>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <SystemInit+0xd8>)
 8002d2e:	4a11      	ldr	r2, [pc, #68]	@ (8002d74 <SystemInit+0xe8>)
 8002d30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d32:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <SystemInit+0xd8>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <SystemInit+0xd8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a09      	ldr	r2, [pc, #36]	@ (8002d64 <SystemInit+0xd8>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d44:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <SystemInit+0xd8>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <SystemInit+0xec>)
 8002d4c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002d50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00
 8002d60:	52002000 	.word	0x52002000
 8002d64:	58024400 	.word	0x58024400
 8002d68:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d6c:	02020200 	.word	0x02020200
 8002d70:	01ff0000 	.word	0x01ff0000
 8002d74:	01010280 	.word	0x01010280
 8002d78:	52004000 	.word	0x52004000

08002d7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d8e:	463b      	mov	r3, r7
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
 8002d9c:	615a      	str	r2, [r3, #20]
 8002d9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002da0:	4b33      	ldr	r3, [pc, #204]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002da2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002da8:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002daa:	f240 1217 	movw	r2, #279	@ 0x117
 8002dae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db0:	4b2f      	ldr	r3, [pc, #188]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002db6:	4b2e      	ldr	r3, [pc, #184]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002db8:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002dbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002dc6:	2280      	movs	r2, #128	@ 0x80
 8002dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002dca:	4829      	ldr	r0, [pc, #164]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002dcc:	f008 fdc6 	bl	800b95c <HAL_TIM_PWM_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002dd6:	f7ff fd5b 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002de2:	f107 031c 	add.w	r3, r7, #28
 8002de6:	4619      	mov	r1, r3
 8002de8:	4821      	ldr	r0, [pc, #132]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002dea:	f009 fd03 	bl	800c7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002df4:	f7ff fd4c 	bl	8002890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df8:	2360      	movs	r3, #96	@ 0x60
 8002dfa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e08:	463b      	mov	r3, r7
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4818      	ldr	r0, [pc, #96]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002e10:	f009 f812 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002e1a:	f7ff fd39 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e1e:	463b      	mov	r3, r7
 8002e20:	2204      	movs	r2, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4812      	ldr	r0, [pc, #72]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002e26:	f009 f807 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002e30:	f7ff fd2e 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e34:	463b      	mov	r3, r7
 8002e36:	2208      	movs	r2, #8
 8002e38:	4619      	mov	r1, r3
 8002e3a:	480d      	ldr	r0, [pc, #52]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002e3c:	f008 fffc 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002e46:	f7ff fd23 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	220c      	movs	r2, #12
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4807      	ldr	r0, [pc, #28]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002e52:	f008 fff1 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002e5c:	f7ff fd18 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e60:	4803      	ldr	r0, [pc, #12]	@ (8002e70 <MX_TIM2_Init+0xf4>)
 8002e62:	f000 f9d5 	bl	8003210 <HAL_TIM_MspPostInit>

}
 8002e66:	bf00      	nop
 8002e68:	3728      	adds	r7, #40	@ 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	240025b8 	.word	0x240025b8

08002e74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	@ 0x28
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7a:	f107 031c 	add.w	r3, r7, #28
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e86:	463b      	mov	r3, r7
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
 8002e94:	615a      	str	r2, [r3, #20]
 8002e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e98:	4b27      	ldr	r3, [pc, #156]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002e9a:	4a28      	ldr	r2, [pc, #160]	@ (8002f3c <MX_TIM3_Init+0xc8>)
 8002e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8002e9e:	4b26      	ldr	r3, [pc, #152]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002ea0:	f240 1217 	movw	r2, #279	@ 0x117
 8002ea4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea6:	4b24      	ldr	r3, [pc, #144]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002eac:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002eae:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002eb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb4:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002eba:	4b1f      	ldr	r3, [pc, #124]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002ebc:	2280      	movs	r2, #128	@ 0x80
 8002ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ec0:	481d      	ldr	r0, [pc, #116]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002ec2:	f008 fd4b 	bl	800b95c <HAL_TIM_PWM_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002ecc:	f7ff fce0 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	4619      	mov	r1, r3
 8002ede:	4816      	ldr	r0, [pc, #88]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002ee0:	f009 fc88 	bl	800c7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002eea:	f7ff fcd1 	bl	8002890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eee:	2360      	movs	r3, #96	@ 0x60
 8002ef0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002efe:	463b      	mov	r3, r7
 8002f00:	2200      	movs	r2, #0
 8002f02:	4619      	mov	r1, r3
 8002f04:	480c      	ldr	r0, [pc, #48]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002f06:	f008 ff97 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002f10:	f7ff fcbe 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f14:	463b      	mov	r3, r7
 8002f16:	2204      	movs	r2, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4807      	ldr	r0, [pc, #28]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002f1c:	f008 ff8c 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002f26:	f7ff fcb3 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f2a:	4803      	ldr	r0, [pc, #12]	@ (8002f38 <MX_TIM3_Init+0xc4>)
 8002f2c:	f000 f970 	bl	8003210 <HAL_TIM_MspPostInit>

}
 8002f30:	bf00      	nop
 8002f32:	3728      	adds	r7, #40	@ 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	24002604 	.word	0x24002604
 8002f3c:	40000400 	.word	0x40000400

08002f40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f52:	463b      	mov	r3, r7
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
 8002f60:	615a      	str	r2, [r3, #20]
 8002f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f64:	4b32      	ldr	r3, [pc, #200]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002f66:	4a33      	ldr	r2, [pc, #204]	@ (8003034 <MX_TIM4_Init+0xf4>)
 8002f68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002f6a:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002f6c:	f240 1217 	movw	r2, #279	@ 0x117
 8002f70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f72:	4b2f      	ldr	r3, [pc, #188]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002f78:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002f7a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002f7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f80:	4b2b      	ldr	r3, [pc, #172]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002f88:	2280      	movs	r2, #128	@ 0x80
 8002f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f8c:	4828      	ldr	r0, [pc, #160]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002f8e:	f008 fce5 	bl	800b95c <HAL_TIM_PWM_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002f98:	f7ff fc7a 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4821      	ldr	r0, [pc, #132]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002fac:	f009 fc22 	bl	800c7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002fb6:	f7ff fc6b 	bl	8002890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fba:	2360      	movs	r3, #96	@ 0x60
 8002fbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fca:	463b      	mov	r3, r7
 8002fcc:	2200      	movs	r2, #0
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4817      	ldr	r0, [pc, #92]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002fd2:	f008 ff31 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002fdc:	f7ff fc58 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4812      	ldr	r0, [pc, #72]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002fe8:	f008 ff26 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002ff2:	f7ff fc4d 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	480c      	ldr	r0, [pc, #48]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8002ffe:	f008 ff1b 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003008:	f7ff fc42 	bl	8002890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800300c:	463b      	mov	r3, r7
 800300e:	220c      	movs	r2, #12
 8003010:	4619      	mov	r1, r3
 8003012:	4807      	ldr	r0, [pc, #28]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8003014:	f008 ff10 	bl	800be38 <HAL_TIM_PWM_ConfigChannel>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800301e:	f7ff fc37 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003022:	4803      	ldr	r0, [pc, #12]	@ (8003030 <MX_TIM4_Init+0xf0>)
 8003024:	f000 f8f4 	bl	8003210 <HAL_TIM_MspPostInit>

}
 8003028:	bf00      	nop
 800302a:	3728      	adds	r7, #40	@ 0x28
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	24002650 	.word	0x24002650
 8003034:	40000800 	.word	0x40000800

08003038 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003048:	4b16      	ldr	r3, [pc, #88]	@ (80030a4 <MX_TIM6_Init+0x6c>)
 800304a:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <MX_TIM6_Init+0x70>)
 800304c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <MX_TIM6_Init+0x6c>)
 8003050:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003054:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003056:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <MX_TIM6_Init+0x6c>)
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <MX_TIM6_Init+0x6c>)
 800305e:	f240 1217 	movw	r2, #279	@ 0x117
 8003062:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003064:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <MX_TIM6_Init+0x6c>)
 8003066:	2200      	movs	r2, #0
 8003068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800306a:	480e      	ldr	r0, [pc, #56]	@ (80030a4 <MX_TIM6_Init+0x6c>)
 800306c:	f008 fba7 	bl	800b7be <HAL_TIM_Base_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003076:	f7ff fc0b 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	4619      	mov	r1, r3
 8003086:	4807      	ldr	r0, [pc, #28]	@ (80030a4 <MX_TIM6_Init+0x6c>)
 8003088:	f009 fbb4 	bl	800c7f4 <HAL_TIMEx_MasterConfigSynchronization>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003092:	f7ff fbfd 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8003096:	4803      	ldr	r0, [pc, #12]	@ (80030a4 <MX_TIM6_Init+0x6c>)
 8003098:	f008 fbe8 	bl	800b86c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2400269c 	.word	0x2400269c
 80030a8:	40001000 	.word	0x40001000

080030ac <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80030b0:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <MX_TIM13_Init+0x40>)
 80030b2:	4a0f      	ldr	r2, [pc, #60]	@ (80030f0 <MX_TIM13_Init+0x44>)
 80030b4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <MX_TIM13_Init+0x40>)
 80030b8:	f240 1217 	movw	r2, #279	@ 0x117
 80030bc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030be:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <MX_TIM13_Init+0x40>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80030c4:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <MX_TIM13_Init+0x40>)
 80030c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ca:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030cc:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <MX_TIM13_Init+0x40>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <MX_TIM13_Init+0x40>)
 80030d4:	2280      	movs	r2, #128	@ 0x80
 80030d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80030d8:	4804      	ldr	r0, [pc, #16]	@ (80030ec <MX_TIM13_Init+0x40>)
 80030da:	f008 fb70 	bl	800b7be <HAL_TIM_Base_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80030e4:	f7ff fbd4 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	240026e8 	.word	0x240026e8
 80030f0:	40001c00 	.word	0x40001c00

080030f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003104:	d10f      	bne.n	8003126 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003106:	4b1f      	ldr	r3, [pc, #124]	@ (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 8003108:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800310c:	4a1d      	ldr	r2, [pc, #116]	@ (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003116:	4b1b      	ldr	r3, [pc, #108]	@ (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 8003118:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003124:	e028      	b.n	8003178 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a17      	ldr	r2, [pc, #92]	@ (8003188 <HAL_TIM_PWM_MspInit+0x94>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d10f      	bne.n	8003150 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003130:	4b14      	ldr	r3, [pc, #80]	@ (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 8003132:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003136:	4a13      	ldr	r2, [pc, #76]	@ (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003140:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 8003142:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]
}
 800314e:	e013      	b.n	8003178 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0d      	ldr	r2, [pc, #52]	@ (800318c <HAL_TIM_PWM_MspInit+0x98>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800315a:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 800315c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003160:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 8003162:	f043 0304 	orr.w	r3, r3, #4
 8003166:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800316a:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <HAL_TIM_PWM_MspInit+0x90>)
 800316c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	58024400 	.word	0x58024400
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800

08003190 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_TIM_Base_MspInit+0x74>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d117      	bne.n	80031d2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031a2:	4b19      	ldr	r3, [pc, #100]	@ (8003208 <HAL_TIM_Base_MspInit+0x78>)
 80031a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80031a8:	4a17      	ldr	r2, [pc, #92]	@ (8003208 <HAL_TIM_Base_MspInit+0x78>)
 80031aa:	f043 0310 	orr.w	r3, r3, #16
 80031ae:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80031b2:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <HAL_TIM_Base_MspInit+0x78>)
 80031b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	2036      	movs	r0, #54	@ 0x36
 80031c6:	f000 fd8e 	bl	8003ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031ca:	2036      	movs	r0, #54	@ 0x36
 80031cc:	f000 fda5 	bl	8003d1a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80031d0:	e013      	b.n	80031fa <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM13)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a0d      	ldr	r2, [pc, #52]	@ (800320c <HAL_TIM_Base_MspInit+0x7c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10e      	bne.n	80031fa <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80031dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003208 <HAL_TIM_Base_MspInit+0x78>)
 80031de:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80031e2:	4a09      	ldr	r2, [pc, #36]	@ (8003208 <HAL_TIM_Base_MspInit+0x78>)
 80031e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_TIM_Base_MspInit+0x78>)
 80031ee:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40001000 	.word	0x40001000
 8003208:	58024400 	.word	0x58024400
 800320c:	40001c00 	.word	0x40001c00

08003210 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	@ 0x30
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 031c 	add.w	r3, r7, #28
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003230:	d13f      	bne.n	80032b2 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 8003234:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003238:	4a45      	ldr	r2, [pc, #276]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003242:	4b43      	ldr	r3, [pc, #268]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 8003244:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003250:	4b3f      	ldr	r3, [pc, #252]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 8003252:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003256:	4a3e      	ldr	r2, [pc, #248]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 8003262:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800326e:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003280:	2301      	movs	r3, #1
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	4619      	mov	r1, r3
 800328a:	4832      	ldr	r0, [pc, #200]	@ (8003354 <HAL_TIM_MspPostInit+0x144>)
 800328c:	f004 f81a 	bl	80072c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003290:	2308      	movs	r3, #8
 8003292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032a0:	2301      	movs	r3, #1
 80032a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	4619      	mov	r1, r3
 80032aa:	482b      	ldr	r0, [pc, #172]	@ (8003358 <HAL_TIM_MspPostInit+0x148>)
 80032ac:	f004 f80a 	bl	80072c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80032b0:	e049      	b.n	8003346 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a29      	ldr	r2, [pc, #164]	@ (800335c <HAL_TIM_MspPostInit+0x14c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d11f      	bne.n	80032fc <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032bc:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 80032be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032c2:	4a23      	ldr	r2, [pc, #140]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032cc:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 80032ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032da:	2330      	movs	r3, #48	@ 0x30
 80032dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
 80032e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032ea:	2302      	movs	r3, #2
 80032ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ee:	f107 031c 	add.w	r3, r7, #28
 80032f2:	4619      	mov	r1, r3
 80032f4:	4818      	ldr	r0, [pc, #96]	@ (8003358 <HAL_TIM_MspPostInit+0x148>)
 80032f6:	f003 ffe5 	bl	80072c4 <HAL_GPIO_Init>
}
 80032fa:	e024      	b.n	8003346 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a17      	ldr	r2, [pc, #92]	@ (8003360 <HAL_TIM_MspPostInit+0x150>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d11f      	bne.n	8003346 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 8003308:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800330c:	4a10      	ldr	r2, [pc, #64]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003316:	4b0e      	ldr	r3, [pc, #56]	@ (8003350 <HAL_TIM_MspPostInit+0x140>)
 8003318:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003324:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003336:	2302      	movs	r3, #2
 8003338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333a:	f107 031c 	add.w	r3, r7, #28
 800333e:	4619      	mov	r1, r3
 8003340:	4805      	ldr	r0, [pc, #20]	@ (8003358 <HAL_TIM_MspPostInit+0x148>)
 8003342:	f003 ffbf 	bl	80072c4 <HAL_GPIO_Init>
}
 8003346:	bf00      	nop
 8003348:	3730      	adds	r7, #48	@ 0x30
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400
 8003354:	58020000 	.word	0x58020000
 8003358:	58020400 	.word	0x58020400
 800335c:	40000400 	.word	0x40000400
 8003360:	40000800 	.word	0x40000800

08003364 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003368:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <MX_UART4_Init+0x90>)
 800336a:	4a23      	ldr	r2, [pc, #140]	@ (80033f8 <MX_UART4_Init+0x94>)
 800336c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800336e:	4b21      	ldr	r3, [pc, #132]	@ (80033f4 <MX_UART4_Init+0x90>)
 8003370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003374:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003376:	4b1f      	ldr	r3, [pc, #124]	@ (80033f4 <MX_UART4_Init+0x90>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800337c:	4b1d      	ldr	r3, [pc, #116]	@ (80033f4 <MX_UART4_Init+0x90>)
 800337e:	2200      	movs	r2, #0
 8003380:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003382:	4b1c      	ldr	r3, [pc, #112]	@ (80033f4 <MX_UART4_Init+0x90>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003388:	4b1a      	ldr	r3, [pc, #104]	@ (80033f4 <MX_UART4_Init+0x90>)
 800338a:	220c      	movs	r2, #12
 800338c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800338e:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <MX_UART4_Init+0x90>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003394:	4b17      	ldr	r3, [pc, #92]	@ (80033f4 <MX_UART4_Init+0x90>)
 8003396:	2200      	movs	r2, #0
 8003398:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800339a:	4b16      	ldr	r3, [pc, #88]	@ (80033f4 <MX_UART4_Init+0x90>)
 800339c:	2200      	movs	r2, #0
 800339e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033a0:	4b14      	ldr	r3, [pc, #80]	@ (80033f4 <MX_UART4_Init+0x90>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033a6:	4b13      	ldr	r3, [pc, #76]	@ (80033f4 <MX_UART4_Init+0x90>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80033ac:	4811      	ldr	r0, [pc, #68]	@ (80033f4 <MX_UART4_Init+0x90>)
 80033ae:	f009 facd 	bl	800c94c <HAL_UART_Init>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80033b8:	f7ff fa6a 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033bc:	2100      	movs	r1, #0
 80033be:	480d      	ldr	r0, [pc, #52]	@ (80033f4 <MX_UART4_Init+0x90>)
 80033c0:	f00b fad1 	bl	800e966 <HAL_UARTEx_SetTxFifoThreshold>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80033ca:	f7ff fa61 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033ce:	2100      	movs	r1, #0
 80033d0:	4808      	ldr	r0, [pc, #32]	@ (80033f4 <MX_UART4_Init+0x90>)
 80033d2:	f00b fb06 	bl	800e9e2 <HAL_UARTEx_SetRxFifoThreshold>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80033dc:	f7ff fa58 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80033e0:	4804      	ldr	r0, [pc, #16]	@ (80033f4 <MX_UART4_Init+0x90>)
 80033e2:	f00b fa87 	bl	800e8f4 <HAL_UARTEx_DisableFifoMode>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80033ec:	f7ff fa50 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	24002734 	.word	0x24002734
 80033f8:	40004c00 	.word	0x40004c00

080033fc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003400:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 8003402:	4a24      	ldr	r2, [pc, #144]	@ (8003494 <MX_USART1_UART_Init+0x98>)
 8003404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003406:	4b22      	ldr	r3, [pc, #136]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 8003408:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <MX_USART1_UART_Init+0x9c>)
 800340a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800340c:	4b20      	ldr	r3, [pc, #128]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 800340e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003414:	4b1e      	ldr	r3, [pc, #120]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800341a:	4b1d      	ldr	r3, [pc, #116]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 800341c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003420:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003422:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 8003424:	220c      	movs	r2, #12
 8003426:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003428:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800342e:	4b18      	ldr	r3, [pc, #96]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 8003430:	2200      	movs	r2, #0
 8003432:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003434:	4b16      	ldr	r3, [pc, #88]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 8003436:	2200      	movs	r2, #0
 8003438:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800343a:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003440:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 8003442:	2200      	movs	r2, #0
 8003444:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003446:	4812      	ldr	r0, [pc, #72]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 8003448:	f009 fa80 	bl	800c94c <HAL_UART_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003452:	f7ff fa1d 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003456:	2100      	movs	r1, #0
 8003458:	480d      	ldr	r0, [pc, #52]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 800345a:	f00b fa84 	bl	800e966 <HAL_UARTEx_SetTxFifoThreshold>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003464:	f7ff fa14 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003468:	2100      	movs	r1, #0
 800346a:	4809      	ldr	r0, [pc, #36]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 800346c:	f00b fab9 	bl	800e9e2 <HAL_UARTEx_SetRxFifoThreshold>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003476:	f7ff fa0b 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800347a:	4805      	ldr	r0, [pc, #20]	@ (8003490 <MX_USART1_UART_Init+0x94>)
 800347c:	f00b fa3a 	bl	800e8f4 <HAL_UARTEx_DisableFifoMode>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003486:	f7ff fa03 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	240027c8 	.word	0x240027c8
 8003494:	40011000 	.word	0x40011000
 8003498:	000186a0 	.word	0x000186a0

0800349c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034a0:	4b22      	ldr	r3, [pc, #136]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034a2:	4a23      	ldr	r2, [pc, #140]	@ (8003530 <MX_USART3_UART_Init+0x94>)
 80034a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80034a6:	4b21      	ldr	r3, [pc, #132]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034ae:	4b1f      	ldr	r3, [pc, #124]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034b4:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034ba:	4b1c      	ldr	r3, [pc, #112]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034c0:	4b1a      	ldr	r3, [pc, #104]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034c2:	220c      	movs	r2, #12
 80034c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034c6:	4b19      	ldr	r3, [pc, #100]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034cc:	4b17      	ldr	r3, [pc, #92]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034d2:	4b16      	ldr	r3, [pc, #88]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034d8:	4b14      	ldr	r3, [pc, #80]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034da:	2200      	movs	r2, #0
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034de:	4b13      	ldr	r3, [pc, #76]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034e4:	4811      	ldr	r0, [pc, #68]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034e6:	f009 fa31 	bl	800c94c <HAL_UART_Init>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80034f0:	f7ff f9ce 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034f4:	2100      	movs	r1, #0
 80034f6:	480d      	ldr	r0, [pc, #52]	@ (800352c <MX_USART3_UART_Init+0x90>)
 80034f8:	f00b fa35 	bl	800e966 <HAL_UARTEx_SetTxFifoThreshold>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003502:	f7ff f9c5 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003506:	2100      	movs	r1, #0
 8003508:	4808      	ldr	r0, [pc, #32]	@ (800352c <MX_USART3_UART_Init+0x90>)
 800350a:	f00b fa6a 	bl	800e9e2 <HAL_UARTEx_SetRxFifoThreshold>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003514:	f7ff f9bc 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003518:	4804      	ldr	r0, [pc, #16]	@ (800352c <MX_USART3_UART_Init+0x90>)
 800351a:	f00b f9eb 	bl	800e8f4 <HAL_UARTEx_DisableFifoMode>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003524:	f7ff f9b4 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003528:	bf00      	nop
 800352a:	bd80      	pop	{r7, pc}
 800352c:	2400285c 	.word	0x2400285c
 8003530:	40004800 	.word	0x40004800

08003534 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003538:	4b22      	ldr	r3, [pc, #136]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 800353a:	4a23      	ldr	r2, [pc, #140]	@ (80035c8 <MX_USART6_UART_Init+0x94>)
 800353c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800353e:	4b21      	ldr	r3, [pc, #132]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 8003540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003544:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003546:	4b1f      	ldr	r3, [pc, #124]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800354c:	4b1d      	ldr	r3, [pc, #116]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003552:	4b1c      	ldr	r3, [pc, #112]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 8003554:	2200      	movs	r2, #0
 8003556:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003558:	4b1a      	ldr	r3, [pc, #104]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 800355a:	220c      	movs	r2, #12
 800355c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355e:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003564:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 8003566:	2200      	movs	r2, #0
 8003568:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800356a:	4b16      	ldr	r3, [pc, #88]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 800356c:	2200      	movs	r2, #0
 800356e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003570:	4b14      	ldr	r3, [pc, #80]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 8003572:	2200      	movs	r2, #0
 8003574:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003576:	4b13      	ldr	r3, [pc, #76]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 8003578:	2200      	movs	r2, #0
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800357c:	4811      	ldr	r0, [pc, #68]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 800357e:	f009 f9e5 	bl	800c94c <HAL_UART_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003588:	f7ff f982 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800358c:	2100      	movs	r1, #0
 800358e:	480d      	ldr	r0, [pc, #52]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 8003590:	f00b f9e9 	bl	800e966 <HAL_UARTEx_SetTxFifoThreshold>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800359a:	f7ff f979 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800359e:	2100      	movs	r1, #0
 80035a0:	4808      	ldr	r0, [pc, #32]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 80035a2:	f00b fa1e 	bl	800e9e2 <HAL_UARTEx_SetRxFifoThreshold>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80035ac:	f7ff f970 	bl	8002890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80035b0:	4804      	ldr	r0, [pc, #16]	@ (80035c4 <MX_USART6_UART_Init+0x90>)
 80035b2:	f00b f99f 	bl	800e8f4 <HAL_UARTEx_DisableFifoMode>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80035bc:	f7ff f968 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	240028f0 	.word	0x240028f0
 80035c8:	40011400 	.word	0x40011400

080035cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b0c0      	sub	sp, #256	@ 0x100
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035e8:	22c0      	movs	r2, #192	@ 0xc0
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f00f fc27 	bl	8012e40 <memset>
  if(uartHandle->Instance==UART4)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4aa9      	ldr	r2, [pc, #676]	@ (800389c <HAL_UART_MspInit+0x2d0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d146      	bne.n	800368a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80035fc:	f04f 0202 	mov.w	r2, #2
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800360e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003612:	4618      	mov	r0, r3
 8003614:	f005 f94c 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800361e:	f7ff f937 	bl	8002890 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003622:	4b9f      	ldr	r3, [pc, #636]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 8003624:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003628:	4a9d      	ldr	r2, [pc, #628]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 800362a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800362e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003632:	4b9b      	ldr	r3, [pc, #620]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 8003634:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003638:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	4b97      	ldr	r3, [pc, #604]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 8003642:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003646:	4a96      	ldr	r2, [pc, #600]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003650:	4b93      	ldr	r3, [pc, #588]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 8003652:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800365e:	2303      	movs	r3, #3
 8003660:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003676:	2308      	movs	r3, #8
 8003678:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003680:	4619      	mov	r1, r3
 8003682:	4888      	ldr	r0, [pc, #544]	@ (80038a4 <HAL_UART_MspInit+0x2d8>)
 8003684:	f003 fe1e 	bl	80072c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003688:	e167      	b.n	800395a <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a86      	ldr	r2, [pc, #536]	@ (80038a8 <HAL_UART_MspInit+0x2dc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d17f      	bne.n	8003794 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003694:	f04f 0201 	mov.w	r2, #1
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036aa:	4618      	mov	r0, r3
 80036ac:	f005 f900 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_UART_MspInit+0xee>
      Error_Handler();
 80036b6:	f7ff f8eb 	bl	8002890 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80036ba:	4b79      	ldr	r3, [pc, #484]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80036bc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80036c0:	4a77      	ldr	r2, [pc, #476]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80036c2:	f043 0310 	orr.w	r3, r3, #16
 80036c6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80036ca:	4b75      	ldr	r3, [pc, #468]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80036cc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d8:	4b71      	ldr	r3, [pc, #452]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80036da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80036de:	4a70      	ldr	r2, [pc, #448]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80036e8:	4b6d      	ldr	r3, [pc, #436]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80036ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 80036f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80036fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2300      	movs	r3, #0
 800370c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003710:	2307      	movs	r3, #7
 8003712:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003716:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800371a:	4619      	mov	r1, r3
 800371c:	4861      	ldr	r0, [pc, #388]	@ (80038a4 <HAL_UART_MspInit+0x2d8>)
 800371e:	f003 fdd1 	bl	80072c4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003722:	4b62      	ldr	r3, [pc, #392]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 8003724:	4a62      	ldr	r2, [pc, #392]	@ (80038b0 <HAL_UART_MspInit+0x2e4>)
 8003726:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003728:	4b60      	ldr	r3, [pc, #384]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 800372a:	2229      	movs	r2, #41	@ 0x29
 800372c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800372e:	4b5f      	ldr	r3, [pc, #380]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003734:	4b5d      	ldr	r3, [pc, #372]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 8003736:	2200      	movs	r2, #0
 8003738:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800373a:	4b5c      	ldr	r3, [pc, #368]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 800373c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003740:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003742:	4b5a      	ldr	r3, [pc, #360]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 8003744:	2200      	movs	r2, #0
 8003746:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003748:	4b58      	ldr	r3, [pc, #352]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 800374a:	2200      	movs	r2, #0
 800374c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800374e:	4b57      	ldr	r3, [pc, #348]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 8003750:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003754:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003756:	4b55      	ldr	r3, [pc, #340]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 8003758:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800375c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800375e:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 8003760:	2200      	movs	r2, #0
 8003762:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003764:	4851      	ldr	r0, [pc, #324]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 8003766:	f000 fb6b 	bl	8003e40 <HAL_DMA_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003770:	f7ff f88e 	bl	8002890 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a4d      	ldr	r2, [pc, #308]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 8003778:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800377c:	4a4b      	ldr	r2, [pc, #300]	@ (80038ac <HAL_UART_MspInit+0x2e0>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003782:	2200      	movs	r2, #0
 8003784:	2100      	movs	r1, #0
 8003786:	2025      	movs	r0, #37	@ 0x25
 8003788:	f000 faad 	bl	8003ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800378c:	2025      	movs	r0, #37	@ 0x25
 800378e:	f000 fac4 	bl	8003d1a <HAL_NVIC_EnableIRQ>
}
 8003792:	e0e2      	b.n	800395a <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART3)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a46      	ldr	r2, [pc, #280]	@ (80038b4 <HAL_UART_MspInit+0x2e8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	f040 8092 	bne.w	80038c4 <HAL_UART_MspInit+0x2f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037a0:	f04f 0202 	mov.w	r2, #2
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037b6:	4618      	mov	r0, r3
 80037b8:	f005 f87a 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80037c2:	f7ff f865 	bl	8002890 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037c6:	4b36      	ldr	r3, [pc, #216]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80037c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80037cc:	4a34      	ldr	r2, [pc, #208]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80037ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80037d6:	4b32      	ldr	r3, [pc, #200]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80037d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80037dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e4:	4b2e      	ldr	r3, [pc, #184]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80037e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80037ea:	4a2d      	ldr	r2, [pc, #180]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80037f4:	4b2a      	ldr	r3, [pc, #168]	@ (80038a0 <HAL_UART_MspInit+0x2d4>)
 80037f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003802:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003806:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380a:	2302      	movs	r3, #2
 800380c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800381c:	2307      	movs	r3, #7
 800381e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003822:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003826:	4619      	mov	r1, r3
 8003828:	4823      	ldr	r0, [pc, #140]	@ (80038b8 <HAL_UART_MspInit+0x2ec>)
 800382a:	f003 fd4b 	bl	80072c4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800382e:	4b23      	ldr	r3, [pc, #140]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003830:	4a23      	ldr	r2, [pc, #140]	@ (80038c0 <HAL_UART_MspInit+0x2f4>)
 8003832:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003834:	4b21      	ldr	r3, [pc, #132]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003836:	222d      	movs	r2, #45	@ 0x2d
 8003838:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800383a:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003840:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003846:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003848:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800384c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003850:	2200      	movs	r2, #0
 8003852:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003854:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003856:	2200      	movs	r2, #0
 8003858:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800385a:	4b18      	ldr	r3, [pc, #96]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 800385c:	2200      	movs	r2, #0
 800385e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003860:	4b16      	ldr	r3, [pc, #88]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003862:	2200      	movs	r2, #0
 8003864:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003866:	4b15      	ldr	r3, [pc, #84]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003868:	2200      	movs	r2, #0
 800386a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800386c:	4813      	ldr	r0, [pc, #76]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 800386e:	f000 fae7 	bl	8003e40 <HAL_DMA_Init>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8003878:	f7ff f80a 	bl	8002890 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a0f      	ldr	r2, [pc, #60]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003880:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003884:	4a0d      	ldr	r2, [pc, #52]	@ (80038bc <HAL_UART_MspInit+0x2f0>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	2100      	movs	r1, #0
 800388e:	2027      	movs	r0, #39	@ 0x27
 8003890:	f000 fa29 	bl	8003ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003894:	2027      	movs	r0, #39	@ 0x27
 8003896:	f000 fa40 	bl	8003d1a <HAL_NVIC_EnableIRQ>
}
 800389a:	e05e      	b.n	800395a <HAL_UART_MspInit+0x38e>
 800389c:	40004c00 	.word	0x40004c00
 80038a0:	58024400 	.word	0x58024400
 80038a4:	58020000 	.word	0x58020000
 80038a8:	40011000 	.word	0x40011000
 80038ac:	24002984 	.word	0x24002984
 80038b0:	40020010 	.word	0x40020010
 80038b4:	40004800 	.word	0x40004800
 80038b8:	58020800 	.word	0x58020800
 80038bc:	240029fc 	.word	0x240029fc
 80038c0:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a26      	ldr	r2, [pc, #152]	@ (8003964 <HAL_UART_MspInit+0x398>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d145      	bne.n	800395a <HAL_UART_MspInit+0x38e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80038ce:	f04f 0201 	mov.w	r2, #1
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038e4:	4618      	mov	r0, r3
 80038e6:	f004 ffe3 	bl	80088b0 <HAL_RCCEx_PeriphCLKConfig>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_MspInit+0x328>
      Error_Handler();
 80038f0:	f7fe ffce 	bl	8002890 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003968 <HAL_UART_MspInit+0x39c>)
 80038f6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80038fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003968 <HAL_UART_MspInit+0x39c>)
 80038fc:	f043 0320 	orr.w	r3, r3, #32
 8003900:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003904:	4b18      	ldr	r3, [pc, #96]	@ (8003968 <HAL_UART_MspInit+0x39c>)
 8003906:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <HAL_UART_MspInit+0x39c>)
 8003914:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003918:	4a13      	ldr	r2, [pc, #76]	@ (8003968 <HAL_UART_MspInit+0x39c>)
 800391a:	f043 0304 	orr.w	r3, r3, #4
 800391e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003922:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_UART_MspInit+0x39c>)
 8003924:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003930:	23c0      	movs	r3, #192	@ 0xc0
 8003932:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003948:	2307      	movs	r3, #7
 800394a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003952:	4619      	mov	r1, r3
 8003954:	4805      	ldr	r0, [pc, #20]	@ (800396c <HAL_UART_MspInit+0x3a0>)
 8003956:	f003 fcb5 	bl	80072c4 <HAL_GPIO_Init>
}
 800395a:	bf00      	nop
 800395c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40011400 	.word	0x40011400
 8003968:	58024400 	.word	0x58024400
 800396c:	58020800 	.word	0x58020800

08003970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003974:	f7ff f98a 	bl	8002c8c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003978:	480c      	ldr	r0, [pc, #48]	@ (80039ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800397a:	490d      	ldr	r1, [pc, #52]	@ (80039b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800397c:	4a0d      	ldr	r2, [pc, #52]	@ (80039b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800397e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003980:	e002      	b.n	8003988 <LoopCopyDataInit>

08003982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003986:	3304      	adds	r3, #4

08003988 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800398a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800398c:	d3f9      	bcc.n	8003982 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800398e:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003990:	4c0a      	ldr	r4, [pc, #40]	@ (80039bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003994:	e001      	b.n	800399a <LoopFillZerobss>

08003996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003998:	3204      	adds	r2, #4

0800399a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800399a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800399c:	d3fb      	bcc.n	8003996 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800399e:	f00f fa5d 	bl	8012e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039a2:	f7fe fe47 	bl	8002634 <main>
  bx  lr
 80039a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039a8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80039ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039b0:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 80039b4:	08013f30 	.word	0x08013f30
  ldr r2, =_sbss
 80039b8:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 80039bc:	24002df4 	.word	0x24002df4

080039c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039c0:	e7fe      	b.n	80039c0 <ADC_IRQHandler>
	...

080039c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ca:	2003      	movs	r0, #3
 80039cc:	f000 f980 	bl	8003cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80039d0:	f004 fd98 	bl	8008504 <HAL_RCC_GetSysClockFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <HAL_Init+0x68>)
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	4913      	ldr	r1, [pc, #76]	@ (8003a30 <HAL_Init+0x6c>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80039ee:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <HAL_Init+0x68>)
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a30 <HAL_Init+0x6c>)
 80039f8:	5cd3      	ldrb	r3, [r2, r3]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	4a0b      	ldr	r2, [pc, #44]	@ (8003a34 <HAL_Init+0x70>)
 8003a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a08:	4a0b      	ldr	r2, [pc, #44]	@ (8003a38 <HAL_Init+0x74>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a0e:	200f      	movs	r0, #15
 8003a10:	f000 f814 	bl	8003a3c <HAL_InitTick>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e002      	b.n	8003a24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a1e:	f7ff f8a1 	bl	8002b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	58024400 	.word	0x58024400
 8003a30:	08013210 	.word	0x08013210
 8003a34:	2400009c 	.word	0x2400009c
 8003a38:	24000098 	.word	0x24000098

08003a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a44:	4b15      	ldr	r3, [pc, #84]	@ (8003a9c <HAL_InitTick+0x60>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e021      	b.n	8003a94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a50:	4b13      	ldr	r3, [pc, #76]	@ (8003aa0 <HAL_InitTick+0x64>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <HAL_InitTick+0x60>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f965 	bl	8003d36 <HAL_SYSTICK_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00e      	b.n	8003a94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b0f      	cmp	r3, #15
 8003a7a:	d80a      	bhi.n	8003a92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	f000 f92f 	bl	8003ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a88:	4a06      	ldr	r2, [pc, #24]	@ (8003aa4 <HAL_InitTick+0x68>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	240000a4 	.word	0x240000a4
 8003aa0:	24000098 	.word	0x24000098
 8003aa4:	240000a0 	.word	0x240000a0

08003aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003aac:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <HAL_IncTick+0x20>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_IncTick+0x24>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <HAL_IncTick+0x24>)
 8003aba:	6013      	str	r3, [r2, #0]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	240000a4 	.word	0x240000a4
 8003acc:	24002a74 	.word	0x24002a74

08003ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	@ (8003ae4 <HAL_GetTick+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	24002a74 	.word	0x24002a74

08003ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af0:	f7ff ffee 	bl	8003ad0 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d005      	beq.n	8003b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_Delay+0x44>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b0e:	bf00      	nop
 8003b10:	f7ff ffde 	bl	8003ad0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d8f7      	bhi.n	8003b10 <HAL_Delay+0x28>
  {
  }
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	240000a4 	.word	0x240000a4

08003b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b40:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <__NVIC_SetPriorityGrouping+0x40>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b5e:	4a04      	ldr	r2, [pc, #16]	@ (8003b70 <__NVIC_SetPriorityGrouping+0x40>)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	60d3      	str	r3, [r2, #12]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000ed00 	.word	0xe000ed00
 8003b74:	05fa0000 	.word	0x05fa0000

08003b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <__NVIC_GetPriorityGrouping+0x18>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0307 	and.w	r3, r3, #7
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	db0b      	blt.n	8003bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	f003 021f 	and.w	r2, r3, #31
 8003bac:	4907      	ldr	r1, [pc, #28]	@ (8003bcc <__NVIC_EnableIRQ+0x38>)
 8003bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	e000e100 	.word	0xe000e100

08003bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	db0a      	blt.n	8003bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	490c      	ldr	r1, [pc, #48]	@ (8003c1c <__NVIC_SetPriority+0x4c>)
 8003bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bee:	0112      	lsls	r2, r2, #4
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf8:	e00a      	b.n	8003c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4908      	ldr	r1, [pc, #32]	@ (8003c20 <__NVIC_SetPriority+0x50>)
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	3b04      	subs	r3, #4
 8003c08:	0112      	lsls	r2, r2, #4
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	761a      	strb	r2, [r3, #24]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000e100 	.word	0xe000e100
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	@ 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f1c3 0307 	rsb	r3, r3, #7
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	bf28      	it	cs
 8003c42:	2304      	movcs	r3, #4
 8003c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	d902      	bls.n	8003c54 <NVIC_EncodePriority+0x30>
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3b03      	subs	r3, #3
 8003c52:	e000      	b.n	8003c56 <NVIC_EncodePriority+0x32>
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43da      	mvns	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	401a      	ands	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	43d9      	mvns	r1, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c7c:	4313      	orrs	r3, r2
         );
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3724      	adds	r7, #36	@ 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c9c:	d301      	bcc.n	8003ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e00f      	b.n	8003cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ccc <SysTick_Config+0x40>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003caa:	210f      	movs	r1, #15
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	f7ff ff8e 	bl	8003bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <SysTick_Config+0x40>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cba:	4b04      	ldr	r3, [pc, #16]	@ (8003ccc <SysTick_Config+0x40>)
 8003cbc:	2207      	movs	r2, #7
 8003cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	e000e010 	.word	0xe000e010

08003cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff29 	bl	8003b30 <__NVIC_SetPriorityGrouping>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b086      	sub	sp, #24
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	4603      	mov	r3, r0
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf4:	f7ff ff40 	bl	8003b78 <__NVIC_GetPriorityGrouping>
 8003cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	6978      	ldr	r0, [r7, #20]
 8003d00:	f7ff ff90 	bl	8003c24 <NVIC_EncodePriority>
 8003d04:	4602      	mov	r2, r0
 8003d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff5f 	bl	8003bd0 <__NVIC_SetPriority>
}
 8003d12:	bf00      	nop
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	4603      	mov	r3, r0
 8003d22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff33 	bl	8003b94 <__NVIC_EnableIRQ>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ffa4 	bl	8003c8c <SysTick_Config>
 8003d44:	4603      	mov	r3, r0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003d54:	f3bf 8f5f 	dmb	sy
}
 8003d58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003d5a:	4b07      	ldr	r3, [pc, #28]	@ (8003d78 <HAL_MPU_Disable+0x28>)
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	4a06      	ldr	r2, [pc, #24]	@ (8003d78 <HAL_MPU_Disable+0x28>)
 8003d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d64:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003d66:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <HAL_MPU_Disable+0x2c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	605a      	str	r2, [r3, #4]
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000ed00 	.word	0xe000ed00
 8003d7c:	e000ed90 	.word	0xe000ed90

08003d80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003d88:	4a0b      	ldr	r2, [pc, #44]	@ (8003db8 <HAL_MPU_Enable+0x38>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003d92:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <HAL_MPU_Enable+0x3c>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	4a09      	ldr	r2, [pc, #36]	@ (8003dbc <HAL_MPU_Enable+0x3c>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003d9e:	f3bf 8f4f 	dsb	sy
}
 8003da2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003da4:	f3bf 8f6f 	isb	sy
}
 8003da8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	e000ed90 	.word	0xe000ed90
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	785a      	ldrb	r2, [r3, #1]
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e3c <HAL_MPU_ConfigRegion+0x7c>)
 8003dce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e3c <HAL_MPU_ConfigRegion+0x7c>)
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4a19      	ldr	r2, [pc, #100]	@ (8003e3c <HAL_MPU_ConfigRegion+0x7c>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003ddc:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <HAL_MPU_ConfigRegion+0x7c>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	7b1b      	ldrb	r3, [r3, #12]
 8003de8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7adb      	ldrb	r3, [r3, #11]
 8003dee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003df0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7a9b      	ldrb	r3, [r3, #10]
 8003df6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003df8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	7b5b      	ldrb	r3, [r3, #13]
 8003dfe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	7b9b      	ldrb	r3, [r3, #14]
 8003e06:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003e08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7bdb      	ldrb	r3, [r3, #15]
 8003e0e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7a5b      	ldrb	r3, [r3, #9]
 8003e16:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7a1b      	ldrb	r3, [r3, #8]
 8003e1e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e20:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	7812      	ldrb	r2, [r2, #0]
 8003e26:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e28:	4a04      	ldr	r2, [pc, #16]	@ (8003e3c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e2a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e2c:	6113      	str	r3, [r2, #16]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000ed90 	.word	0xe000ed90

08003e40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7ff fe42 	bl	8003ad0 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e37d      	b.n	8004554 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a66      	ldr	r2, [pc, #408]	@ (8003ff8 <HAL_DMA_Init+0x1b8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d04a      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a65      	ldr	r2, [pc, #404]	@ (8003ffc <HAL_DMA_Init+0x1bc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d045      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a63      	ldr	r2, [pc, #396]	@ (8004000 <HAL_DMA_Init+0x1c0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d040      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a62      	ldr	r2, [pc, #392]	@ (8004004 <HAL_DMA_Init+0x1c4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d03b      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a60      	ldr	r2, [pc, #384]	@ (8004008 <HAL_DMA_Init+0x1c8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d036      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5f      	ldr	r2, [pc, #380]	@ (800400c <HAL_DMA_Init+0x1cc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d031      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5d      	ldr	r2, [pc, #372]	@ (8004010 <HAL_DMA_Init+0x1d0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02c      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8004014 <HAL_DMA_Init+0x1d4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d027      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5a      	ldr	r2, [pc, #360]	@ (8004018 <HAL_DMA_Init+0x1d8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d022      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a59      	ldr	r2, [pc, #356]	@ (800401c <HAL_DMA_Init+0x1dc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d01d      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a57      	ldr	r2, [pc, #348]	@ (8004020 <HAL_DMA_Init+0x1e0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d018      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a56      	ldr	r2, [pc, #344]	@ (8004024 <HAL_DMA_Init+0x1e4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a54      	ldr	r2, [pc, #336]	@ (8004028 <HAL_DMA_Init+0x1e8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a53      	ldr	r2, [pc, #332]	@ (800402c <HAL_DMA_Init+0x1ec>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a51      	ldr	r2, [pc, #324]	@ (8004030 <HAL_DMA_Init+0x1f0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <HAL_DMA_Init+0xb8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a50      	ldr	r2, [pc, #320]	@ (8004034 <HAL_DMA_Init+0x1f4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <HAL_DMA_Init+0xbc>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <HAL_DMA_Init+0xbe>
 8003efc:	2300      	movs	r3, #0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 813c 	beq.w	800417c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a37      	ldr	r2, [pc, #220]	@ (8003ff8 <HAL_DMA_Init+0x1b8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d04a      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a36      	ldr	r2, [pc, #216]	@ (8003ffc <HAL_DMA_Init+0x1bc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d045      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a34      	ldr	r2, [pc, #208]	@ (8004000 <HAL_DMA_Init+0x1c0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d040      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a33      	ldr	r2, [pc, #204]	@ (8004004 <HAL_DMA_Init+0x1c4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d03b      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a31      	ldr	r2, [pc, #196]	@ (8004008 <HAL_DMA_Init+0x1c8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d036      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a30      	ldr	r2, [pc, #192]	@ (800400c <HAL_DMA_Init+0x1cc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d031      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2e      	ldr	r2, [pc, #184]	@ (8004010 <HAL_DMA_Init+0x1d0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02c      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004014 <HAL_DMA_Init+0x1d4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d027      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2b      	ldr	r2, [pc, #172]	@ (8004018 <HAL_DMA_Init+0x1d8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d022      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <HAL_DMA_Init+0x1dc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01d      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	@ (8004020 <HAL_DMA_Init+0x1e0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d018      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a27      	ldr	r2, [pc, #156]	@ (8004024 <HAL_DMA_Init+0x1e4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a25      	ldr	r2, [pc, #148]	@ (8004028 <HAL_DMA_Init+0x1e8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00e      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a24      	ldr	r2, [pc, #144]	@ (800402c <HAL_DMA_Init+0x1ec>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	@ (8004030 <HAL_DMA_Init+0x1f0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_DMA_Init+0x174>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a21      	ldr	r2, [pc, #132]	@ (8004034 <HAL_DMA_Init+0x1f4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d108      	bne.n	8003fc6 <HAL_DMA_Init+0x186>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e007      	b.n	8003fd6 <HAL_DMA_Init+0x196>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fd6:	e02f      	b.n	8004038 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fd8:	f7ff fd7a 	bl	8003ad0 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d928      	bls.n	8004038 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2203      	movs	r2, #3
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e2ad      	b.n	8004554 <HAL_DMA_Init+0x714>
 8003ff8:	40020010 	.word	0x40020010
 8003ffc:	40020028 	.word	0x40020028
 8004000:	40020040 	.word	0x40020040
 8004004:	40020058 	.word	0x40020058
 8004008:	40020070 	.word	0x40020070
 800400c:	40020088 	.word	0x40020088
 8004010:	400200a0 	.word	0x400200a0
 8004014:	400200b8 	.word	0x400200b8
 8004018:	40020410 	.word	0x40020410
 800401c:	40020428 	.word	0x40020428
 8004020:	40020440 	.word	0x40020440
 8004024:	40020458 	.word	0x40020458
 8004028:	40020470 	.word	0x40020470
 800402c:	40020488 	.word	0x40020488
 8004030:	400204a0 	.word	0x400204a0
 8004034:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1c8      	bne.n	8003fd8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4b73      	ldr	r3, [pc, #460]	@ (8004220 <HAL_DMA_Init+0x3e0>)
 8004052:	4013      	ands	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800405e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004076:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	2b04      	cmp	r3, #4
 800408a:	d107      	bne.n	800409c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004094:	4313      	orrs	r3, r2
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b28      	cmp	r3, #40	@ 0x28
 80040a2:	d903      	bls.n	80040ac <HAL_DMA_Init+0x26c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80040aa:	d91f      	bls.n	80040ec <HAL_DMA_Init+0x2ac>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80040b2:	d903      	bls.n	80040bc <HAL_DMA_Init+0x27c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b42      	cmp	r3, #66	@ 0x42
 80040ba:	d917      	bls.n	80040ec <HAL_DMA_Init+0x2ac>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b46      	cmp	r3, #70	@ 0x46
 80040c2:	d903      	bls.n	80040cc <HAL_DMA_Init+0x28c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b48      	cmp	r3, #72	@ 0x48
 80040ca:	d90f      	bls.n	80040ec <HAL_DMA_Init+0x2ac>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b4e      	cmp	r3, #78	@ 0x4e
 80040d2:	d903      	bls.n	80040dc <HAL_DMA_Init+0x29c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b52      	cmp	r3, #82	@ 0x52
 80040da:	d907      	bls.n	80040ec <HAL_DMA_Init+0x2ac>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b73      	cmp	r3, #115	@ 0x73
 80040e2:	d905      	bls.n	80040f0 <HAL_DMA_Init+0x2b0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b77      	cmp	r3, #119	@ 0x77
 80040ea:	d801      	bhi.n	80040f0 <HAL_DMA_Init+0x2b0>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <HAL_DMA_Init+0x2b2>
 80040f0:	2300      	movs	r3, #0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f023 0307 	bic.w	r3, r3, #7
 8004114:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	2b04      	cmp	r3, #4
 8004126:	d117      	bne.n	8004158 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f002 fbd4 	bl	80068e8 <DMA_CheckFifoParam>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2240      	movs	r2, #64	@ 0x40
 800414a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e1fd      	b.n	8004554 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f002 fb0f 	bl	8006784 <DMA_CalcBaseAndBitshift>
 8004166:	4603      	mov	r3, r0
 8004168:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	223f      	movs	r2, #63	@ 0x3f
 8004174:	409a      	lsls	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	609a      	str	r2, [r3, #8]
 800417a:	e0fd      	b.n	8004378 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a28      	ldr	r2, [pc, #160]	@ (8004224 <HAL_DMA_Init+0x3e4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d04a      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a27      	ldr	r2, [pc, #156]	@ (8004228 <HAL_DMA_Init+0x3e8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d045      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a25      	ldr	r2, [pc, #148]	@ (800422c <HAL_DMA_Init+0x3ec>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d040      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a24      	ldr	r2, [pc, #144]	@ (8004230 <HAL_DMA_Init+0x3f0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d03b      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a22      	ldr	r2, [pc, #136]	@ (8004234 <HAL_DMA_Init+0x3f4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d036      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a21      	ldr	r2, [pc, #132]	@ (8004238 <HAL_DMA_Init+0x3f8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d031      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1f      	ldr	r2, [pc, #124]	@ (800423c <HAL_DMA_Init+0x3fc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02c      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004240 <HAL_DMA_Init+0x400>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d027      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004244 <HAL_DMA_Init+0x404>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1b      	ldr	r2, [pc, #108]	@ (8004248 <HAL_DMA_Init+0x408>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a19      	ldr	r2, [pc, #100]	@ (800424c <HAL_DMA_Init+0x40c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a18      	ldr	r2, [pc, #96]	@ (8004250 <HAL_DMA_Init+0x410>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a16      	ldr	r2, [pc, #88]	@ (8004254 <HAL_DMA_Init+0x414>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a15      	ldr	r2, [pc, #84]	@ (8004258 <HAL_DMA_Init+0x418>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a13      	ldr	r2, [pc, #76]	@ (800425c <HAL_DMA_Init+0x41c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_DMA_Init+0x3dc>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a12      	ldr	r2, [pc, #72]	@ (8004260 <HAL_DMA_Init+0x420>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d123      	bne.n	8004264 <HAL_DMA_Init+0x424>
 800421c:	2301      	movs	r3, #1
 800421e:	e022      	b.n	8004266 <HAL_DMA_Init+0x426>
 8004220:	fe10803f 	.word	0xfe10803f
 8004224:	48022c08 	.word	0x48022c08
 8004228:	48022c1c 	.word	0x48022c1c
 800422c:	48022c30 	.word	0x48022c30
 8004230:	48022c44 	.word	0x48022c44
 8004234:	48022c58 	.word	0x48022c58
 8004238:	48022c6c 	.word	0x48022c6c
 800423c:	48022c80 	.word	0x48022c80
 8004240:	48022c94 	.word	0x48022c94
 8004244:	58025408 	.word	0x58025408
 8004248:	5802541c 	.word	0x5802541c
 800424c:	58025430 	.word	0x58025430
 8004250:	58025444 	.word	0x58025444
 8004254:	58025458 	.word	0x58025458
 8004258:	5802546c 	.word	0x5802546c
 800425c:	58025480 	.word	0x58025480
 8004260:	58025494 	.word	0x58025494
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d07d      	beq.n	8004366 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a7f      	ldr	r2, [pc, #508]	@ (800446c <HAL_DMA_Init+0x62c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d021      	beq.n	80042b8 <HAL_DMA_Init+0x478>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a7d      	ldr	r2, [pc, #500]	@ (8004470 <HAL_DMA_Init+0x630>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01c      	beq.n	80042b8 <HAL_DMA_Init+0x478>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a7c      	ldr	r2, [pc, #496]	@ (8004474 <HAL_DMA_Init+0x634>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d017      	beq.n	80042b8 <HAL_DMA_Init+0x478>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a7a      	ldr	r2, [pc, #488]	@ (8004478 <HAL_DMA_Init+0x638>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d012      	beq.n	80042b8 <HAL_DMA_Init+0x478>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a79      	ldr	r2, [pc, #484]	@ (800447c <HAL_DMA_Init+0x63c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00d      	beq.n	80042b8 <HAL_DMA_Init+0x478>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a77      	ldr	r2, [pc, #476]	@ (8004480 <HAL_DMA_Init+0x640>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d008      	beq.n	80042b8 <HAL_DMA_Init+0x478>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a76      	ldr	r2, [pc, #472]	@ (8004484 <HAL_DMA_Init+0x644>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <HAL_DMA_Init+0x478>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a74      	ldr	r2, [pc, #464]	@ (8004488 <HAL_DMA_Init+0x648>)
 80042b6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4b6e      	ldr	r3, [pc, #440]	@ (800448c <HAL_DMA_Init+0x64c>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b40      	cmp	r3, #64	@ 0x40
 80042de:	d008      	beq.n	80042f2 <HAL_DMA_Init+0x4b2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b80      	cmp	r3, #128	@ 0x80
 80042e6:	d102      	bne.n	80042ee <HAL_DMA_Init+0x4ae>
 80042e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042ec:	e002      	b.n	80042f4 <HAL_DMA_Init+0x4b4>
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_DMA_Init+0x4b4>
 80042f2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68d2      	ldr	r2, [r2, #12]
 80042f8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80042fa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004302:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800430a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004312:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800431a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004322:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	4b55      	ldr	r3, [pc, #340]	@ (8004490 <HAL_DMA_Init+0x650>)
 800433a:	4413      	add	r3, r2
 800433c:	4a55      	ldr	r2, [pc, #340]	@ (8004494 <HAL_DMA_Init+0x654>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f002 fa1a 	bl	8006784 <DMA_CalcBaseAndBitshift>
 8004350:	4603      	mov	r3, r0
 8004352:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2201      	movs	r2, #1
 800435e:	409a      	lsls	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	605a      	str	r2, [r3, #4]
 8004364:	e008      	b.n	8004378 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2240      	movs	r2, #64	@ 0x40
 800436a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2203      	movs	r2, #3
 8004370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0ed      	b.n	8004554 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a46      	ldr	r2, [pc, #280]	@ (8004498 <HAL_DMA_Init+0x658>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d072      	beq.n	8004468 <HAL_DMA_Init+0x628>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a45      	ldr	r2, [pc, #276]	@ (800449c <HAL_DMA_Init+0x65c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d06d      	beq.n	8004468 <HAL_DMA_Init+0x628>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a43      	ldr	r2, [pc, #268]	@ (80044a0 <HAL_DMA_Init+0x660>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d068      	beq.n	8004468 <HAL_DMA_Init+0x628>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a42      	ldr	r2, [pc, #264]	@ (80044a4 <HAL_DMA_Init+0x664>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d063      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a40      	ldr	r2, [pc, #256]	@ (80044a8 <HAL_DMA_Init+0x668>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d05e      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3f      	ldr	r2, [pc, #252]	@ (80044ac <HAL_DMA_Init+0x66c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d059      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a3d      	ldr	r2, [pc, #244]	@ (80044b0 <HAL_DMA_Init+0x670>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d054      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3c      	ldr	r2, [pc, #240]	@ (80044b4 <HAL_DMA_Init+0x674>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d04f      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a3a      	ldr	r2, [pc, #232]	@ (80044b8 <HAL_DMA_Init+0x678>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d04a      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a39      	ldr	r2, [pc, #228]	@ (80044bc <HAL_DMA_Init+0x67c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d045      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a37      	ldr	r2, [pc, #220]	@ (80044c0 <HAL_DMA_Init+0x680>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d040      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a36      	ldr	r2, [pc, #216]	@ (80044c4 <HAL_DMA_Init+0x684>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d03b      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a34      	ldr	r2, [pc, #208]	@ (80044c8 <HAL_DMA_Init+0x688>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d036      	beq.n	8004468 <HAL_DMA_Init+0x628>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a33      	ldr	r2, [pc, #204]	@ (80044cc <HAL_DMA_Init+0x68c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d031      	beq.n	8004468 <HAL_DMA_Init+0x628>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a31      	ldr	r2, [pc, #196]	@ (80044d0 <HAL_DMA_Init+0x690>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d02c      	beq.n	8004468 <HAL_DMA_Init+0x628>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a30      	ldr	r2, [pc, #192]	@ (80044d4 <HAL_DMA_Init+0x694>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d027      	beq.n	8004468 <HAL_DMA_Init+0x628>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a13      	ldr	r2, [pc, #76]	@ (800446c <HAL_DMA_Init+0x62c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_DMA_Init+0x628>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a12      	ldr	r2, [pc, #72]	@ (8004470 <HAL_DMA_Init+0x630>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d01d      	beq.n	8004468 <HAL_DMA_Init+0x628>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a10      	ldr	r2, [pc, #64]	@ (8004474 <HAL_DMA_Init+0x634>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d018      	beq.n	8004468 <HAL_DMA_Init+0x628>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a0f      	ldr	r2, [pc, #60]	@ (8004478 <HAL_DMA_Init+0x638>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <HAL_DMA_Init+0x628>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <HAL_DMA_Init+0x63c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_DMA_Init+0x628>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a0c      	ldr	r2, [pc, #48]	@ (8004480 <HAL_DMA_Init+0x640>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_DMA_Init+0x628>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a0a      	ldr	r2, [pc, #40]	@ (8004484 <HAL_DMA_Init+0x644>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_DMA_Init+0x628>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a09      	ldr	r2, [pc, #36]	@ (8004488 <HAL_DMA_Init+0x648>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d137      	bne.n	80044d8 <HAL_DMA_Init+0x698>
 8004468:	2301      	movs	r3, #1
 800446a:	e036      	b.n	80044da <HAL_DMA_Init+0x69a>
 800446c:	58025408 	.word	0x58025408
 8004470:	5802541c 	.word	0x5802541c
 8004474:	58025430 	.word	0x58025430
 8004478:	58025444 	.word	0x58025444
 800447c:	58025458 	.word	0x58025458
 8004480:	5802546c 	.word	0x5802546c
 8004484:	58025480 	.word	0x58025480
 8004488:	58025494 	.word	0x58025494
 800448c:	fffe000f 	.word	0xfffe000f
 8004490:	a7fdabf8 	.word	0xa7fdabf8
 8004494:	cccccccd 	.word	0xcccccccd
 8004498:	40020010 	.word	0x40020010
 800449c:	40020028 	.word	0x40020028
 80044a0:	40020040 	.word	0x40020040
 80044a4:	40020058 	.word	0x40020058
 80044a8:	40020070 	.word	0x40020070
 80044ac:	40020088 	.word	0x40020088
 80044b0:	400200a0 	.word	0x400200a0
 80044b4:	400200b8 	.word	0x400200b8
 80044b8:	40020410 	.word	0x40020410
 80044bc:	40020428 	.word	0x40020428
 80044c0:	40020440 	.word	0x40020440
 80044c4:	40020458 	.word	0x40020458
 80044c8:	40020470 	.word	0x40020470
 80044cc:	40020488 	.word	0x40020488
 80044d0:	400204a0 	.word	0x400204a0
 80044d4:	400204b8 	.word	0x400204b8
 80044d8:	2300      	movs	r3, #0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d032      	beq.n	8004544 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f002 fa7e 	bl	80069e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b80      	cmp	r3, #128	@ 0x80
 80044ea:	d102      	bne.n	80044f2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004506:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d010      	beq.n	8004532 <HAL_DMA_Init+0x6f2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d80c      	bhi.n	8004532 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f002 fafb 	bl	8006b14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	e008      	b.n	8004544 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e226      	b.n	80049c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_DMA_Start_IT+0x2a>
 8004582:	2302      	movs	r3, #2
 8004584:	e21f      	b.n	80049c6 <HAL_DMA_Start_IT+0x46a>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	f040 820a 	bne.w	80049b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a68      	ldr	r2, [pc, #416]	@ (8004750 <HAL_DMA_Start_IT+0x1f4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d04a      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a66      	ldr	r2, [pc, #408]	@ (8004754 <HAL_DMA_Start_IT+0x1f8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d045      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a65      	ldr	r2, [pc, #404]	@ (8004758 <HAL_DMA_Start_IT+0x1fc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d040      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a63      	ldr	r2, [pc, #396]	@ (800475c <HAL_DMA_Start_IT+0x200>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d03b      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a62      	ldr	r2, [pc, #392]	@ (8004760 <HAL_DMA_Start_IT+0x204>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d036      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a60      	ldr	r2, [pc, #384]	@ (8004764 <HAL_DMA_Start_IT+0x208>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d031      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a5f      	ldr	r2, [pc, #380]	@ (8004768 <HAL_DMA_Start_IT+0x20c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d02c      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5d      	ldr	r2, [pc, #372]	@ (800476c <HAL_DMA_Start_IT+0x210>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d027      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004770 <HAL_DMA_Start_IT+0x214>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d022      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a5a      	ldr	r2, [pc, #360]	@ (8004774 <HAL_DMA_Start_IT+0x218>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01d      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a59      	ldr	r2, [pc, #356]	@ (8004778 <HAL_DMA_Start_IT+0x21c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d018      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a57      	ldr	r2, [pc, #348]	@ (800477c <HAL_DMA_Start_IT+0x220>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a56      	ldr	r2, [pc, #344]	@ (8004780 <HAL_DMA_Start_IT+0x224>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00e      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a54      	ldr	r2, [pc, #336]	@ (8004784 <HAL_DMA_Start_IT+0x228>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d009      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a53      	ldr	r2, [pc, #332]	@ (8004788 <HAL_DMA_Start_IT+0x22c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d004      	beq.n	800464a <HAL_DMA_Start_IT+0xee>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a51      	ldr	r2, [pc, #324]	@ (800478c <HAL_DMA_Start_IT+0x230>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d108      	bne.n	800465c <HAL_DMA_Start_IT+0x100>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e007      	b.n	800466c <HAL_DMA_Start_IT+0x110>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f001 fea2 	bl	80063bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a34      	ldr	r2, [pc, #208]	@ (8004750 <HAL_DMA_Start_IT+0x1f4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d04a      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a33      	ldr	r2, [pc, #204]	@ (8004754 <HAL_DMA_Start_IT+0x1f8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d045      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a31      	ldr	r2, [pc, #196]	@ (8004758 <HAL_DMA_Start_IT+0x1fc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d040      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a30      	ldr	r2, [pc, #192]	@ (800475c <HAL_DMA_Start_IT+0x200>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d03b      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004760 <HAL_DMA_Start_IT+0x204>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d036      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004764 <HAL_DMA_Start_IT+0x208>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d031      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004768 <HAL_DMA_Start_IT+0x20c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02c      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2a      	ldr	r2, [pc, #168]	@ (800476c <HAL_DMA_Start_IT+0x210>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d027      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a28      	ldr	r2, [pc, #160]	@ (8004770 <HAL_DMA_Start_IT+0x214>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d022      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a27      	ldr	r2, [pc, #156]	@ (8004774 <HAL_DMA_Start_IT+0x218>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d01d      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a25      	ldr	r2, [pc, #148]	@ (8004778 <HAL_DMA_Start_IT+0x21c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d018      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a24      	ldr	r2, [pc, #144]	@ (800477c <HAL_DMA_Start_IT+0x220>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a22      	ldr	r2, [pc, #136]	@ (8004780 <HAL_DMA_Start_IT+0x224>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00e      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <HAL_DMA_Start_IT+0x228>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1f      	ldr	r2, [pc, #124]	@ (8004788 <HAL_DMA_Start_IT+0x22c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_DMA_Start_IT+0x1bc>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1e      	ldr	r2, [pc, #120]	@ (800478c <HAL_DMA_Start_IT+0x230>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_DMA_Start_IT+0x1c0>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_DMA_Start_IT+0x1c2>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d036      	beq.n	8004790 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f023 021e 	bic.w	r2, r3, #30
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0216 	orr.w	r2, r2, #22
 8004734:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d03e      	beq.n	80047bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0208 	orr.w	r2, r2, #8
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e035      	b.n	80047bc <HAL_DMA_Start_IT+0x260>
 8004750:	40020010 	.word	0x40020010
 8004754:	40020028 	.word	0x40020028
 8004758:	40020040 	.word	0x40020040
 800475c:	40020058 	.word	0x40020058
 8004760:	40020070 	.word	0x40020070
 8004764:	40020088 	.word	0x40020088
 8004768:	400200a0 	.word	0x400200a0
 800476c:	400200b8 	.word	0x400200b8
 8004770:	40020410 	.word	0x40020410
 8004774:	40020428 	.word	0x40020428
 8004778:	40020440 	.word	0x40020440
 800477c:	40020458 	.word	0x40020458
 8004780:	40020470 	.word	0x40020470
 8004784:	40020488 	.word	0x40020488
 8004788:	400204a0 	.word	0x400204a0
 800478c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 020e 	bic.w	r2, r3, #14
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 020a 	orr.w	r2, r2, #10
 80047a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0204 	orr.w	r2, r2, #4
 80047ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a83      	ldr	r2, [pc, #524]	@ (80049d0 <HAL_DMA_Start_IT+0x474>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d072      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a82      	ldr	r2, [pc, #520]	@ (80049d4 <HAL_DMA_Start_IT+0x478>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d06d      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a80      	ldr	r2, [pc, #512]	@ (80049d8 <HAL_DMA_Start_IT+0x47c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d068      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7f      	ldr	r2, [pc, #508]	@ (80049dc <HAL_DMA_Start_IT+0x480>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d063      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a7d      	ldr	r2, [pc, #500]	@ (80049e0 <HAL_DMA_Start_IT+0x484>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d05e      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a7c      	ldr	r2, [pc, #496]	@ (80049e4 <HAL_DMA_Start_IT+0x488>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d059      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a7a      	ldr	r2, [pc, #488]	@ (80049e8 <HAL_DMA_Start_IT+0x48c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d054      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a79      	ldr	r2, [pc, #484]	@ (80049ec <HAL_DMA_Start_IT+0x490>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d04f      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a77      	ldr	r2, [pc, #476]	@ (80049f0 <HAL_DMA_Start_IT+0x494>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d04a      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a76      	ldr	r2, [pc, #472]	@ (80049f4 <HAL_DMA_Start_IT+0x498>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d045      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a74      	ldr	r2, [pc, #464]	@ (80049f8 <HAL_DMA_Start_IT+0x49c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d040      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a73      	ldr	r2, [pc, #460]	@ (80049fc <HAL_DMA_Start_IT+0x4a0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d03b      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a71      	ldr	r2, [pc, #452]	@ (8004a00 <HAL_DMA_Start_IT+0x4a4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d036      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a70      	ldr	r2, [pc, #448]	@ (8004a04 <HAL_DMA_Start_IT+0x4a8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d031      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a6e      	ldr	r2, [pc, #440]	@ (8004a08 <HAL_DMA_Start_IT+0x4ac>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d02c      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6d      	ldr	r2, [pc, #436]	@ (8004a0c <HAL_DMA_Start_IT+0x4b0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d027      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a6b      	ldr	r2, [pc, #428]	@ (8004a10 <HAL_DMA_Start_IT+0x4b4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d022      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6a      	ldr	r2, [pc, #424]	@ (8004a14 <HAL_DMA_Start_IT+0x4b8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d01d      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a68      	ldr	r2, [pc, #416]	@ (8004a18 <HAL_DMA_Start_IT+0x4bc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d018      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a67      	ldr	r2, [pc, #412]	@ (8004a1c <HAL_DMA_Start_IT+0x4c0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d013      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a65      	ldr	r2, [pc, #404]	@ (8004a20 <HAL_DMA_Start_IT+0x4c4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00e      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a64      	ldr	r2, [pc, #400]	@ (8004a24 <HAL_DMA_Start_IT+0x4c8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d009      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a62      	ldr	r2, [pc, #392]	@ (8004a28 <HAL_DMA_Start_IT+0x4cc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_DMA_Start_IT+0x350>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a61      	ldr	r2, [pc, #388]	@ (8004a2c <HAL_DMA_Start_IT+0x4d0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d101      	bne.n	80048b0 <HAL_DMA_Start_IT+0x354>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_DMA_Start_IT+0x356>
 80048b0:	2300      	movs	r3, #0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01a      	beq.n	80048ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a37      	ldr	r2, [pc, #220]	@ (80049d0 <HAL_DMA_Start_IT+0x474>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d04a      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a36      	ldr	r2, [pc, #216]	@ (80049d4 <HAL_DMA_Start_IT+0x478>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d045      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a34      	ldr	r2, [pc, #208]	@ (80049d8 <HAL_DMA_Start_IT+0x47c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d040      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a33      	ldr	r2, [pc, #204]	@ (80049dc <HAL_DMA_Start_IT+0x480>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d03b      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a31      	ldr	r2, [pc, #196]	@ (80049e0 <HAL_DMA_Start_IT+0x484>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d036      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a30      	ldr	r2, [pc, #192]	@ (80049e4 <HAL_DMA_Start_IT+0x488>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d031      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2e      	ldr	r2, [pc, #184]	@ (80049e8 <HAL_DMA_Start_IT+0x48c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d02c      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2d      	ldr	r2, [pc, #180]	@ (80049ec <HAL_DMA_Start_IT+0x490>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d027      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2b      	ldr	r2, [pc, #172]	@ (80049f0 <HAL_DMA_Start_IT+0x494>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d022      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2a      	ldr	r2, [pc, #168]	@ (80049f4 <HAL_DMA_Start_IT+0x498>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d01d      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a28      	ldr	r2, [pc, #160]	@ (80049f8 <HAL_DMA_Start_IT+0x49c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d018      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a27      	ldr	r2, [pc, #156]	@ (80049fc <HAL_DMA_Start_IT+0x4a0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d013      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a25      	ldr	r2, [pc, #148]	@ (8004a00 <HAL_DMA_Start_IT+0x4a4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00e      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a24      	ldr	r2, [pc, #144]	@ (8004a04 <HAL_DMA_Start_IT+0x4a8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d009      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a22      	ldr	r2, [pc, #136]	@ (8004a08 <HAL_DMA_Start_IT+0x4ac>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_DMA_Start_IT+0x430>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a21      	ldr	r2, [pc, #132]	@ (8004a0c <HAL_DMA_Start_IT+0x4b0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d108      	bne.n	800499e <HAL_DMA_Start_IT+0x442>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e012      	b.n	80049c4 <HAL_DMA_Start_IT+0x468>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0201 	orr.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e009      	b.n	80049c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40020010 	.word	0x40020010
 80049d4:	40020028 	.word	0x40020028
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020058 	.word	0x40020058
 80049e0:	40020070 	.word	0x40020070
 80049e4:	40020088 	.word	0x40020088
 80049e8:	400200a0 	.word	0x400200a0
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	40020440 	.word	0x40020440
 80049fc:	40020458 	.word	0x40020458
 8004a00:	40020470 	.word	0x40020470
 8004a04:	40020488 	.word	0x40020488
 8004a08:	400204a0 	.word	0x400204a0
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	58025408 	.word	0x58025408
 8004a14:	5802541c 	.word	0x5802541c
 8004a18:	58025430 	.word	0x58025430
 8004a1c:	58025444 	.word	0x58025444
 8004a20:	58025458 	.word	0x58025458
 8004a24:	5802546c 	.word	0x5802546c
 8004a28:	58025480 	.word	0x58025480
 8004a2c:	58025494 	.word	0x58025494

08004a30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004a38:	f7ff f84a 	bl	8003ad0 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e2dc      	b.n	8005002 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d008      	beq.n	8004a66 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2280      	movs	r2, #128	@ 0x80
 8004a58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e2cd      	b.n	8005002 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a76      	ldr	r2, [pc, #472]	@ (8004c44 <HAL_DMA_Abort+0x214>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d04a      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a74      	ldr	r2, [pc, #464]	@ (8004c48 <HAL_DMA_Abort+0x218>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d045      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a73      	ldr	r2, [pc, #460]	@ (8004c4c <HAL_DMA_Abort+0x21c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d040      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a71      	ldr	r2, [pc, #452]	@ (8004c50 <HAL_DMA_Abort+0x220>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d03b      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a70      	ldr	r2, [pc, #448]	@ (8004c54 <HAL_DMA_Abort+0x224>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d036      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c58 <HAL_DMA_Abort+0x228>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d031      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a6d      	ldr	r2, [pc, #436]	@ (8004c5c <HAL_DMA_Abort+0x22c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d02c      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8004c60 <HAL_DMA_Abort+0x230>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d027      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a6a      	ldr	r2, [pc, #424]	@ (8004c64 <HAL_DMA_Abort+0x234>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d022      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a68      	ldr	r2, [pc, #416]	@ (8004c68 <HAL_DMA_Abort+0x238>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01d      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a67      	ldr	r2, [pc, #412]	@ (8004c6c <HAL_DMA_Abort+0x23c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d018      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a65      	ldr	r2, [pc, #404]	@ (8004c70 <HAL_DMA_Abort+0x240>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a64      	ldr	r2, [pc, #400]	@ (8004c74 <HAL_DMA_Abort+0x244>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a62      	ldr	r2, [pc, #392]	@ (8004c78 <HAL_DMA_Abort+0x248>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a61      	ldr	r2, [pc, #388]	@ (8004c7c <HAL_DMA_Abort+0x24c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_DMA_Abort+0xd6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5f      	ldr	r2, [pc, #380]	@ (8004c80 <HAL_DMA_Abort+0x250>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d101      	bne.n	8004b0a <HAL_DMA_Abort+0xda>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_DMA_Abort+0xdc>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 021e 	bic.w	r2, r2, #30
 8004b1e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b2e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e00a      	b.n	8004b4e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 020e 	bic.w	r2, r2, #14
 8004b46:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a3c      	ldr	r2, [pc, #240]	@ (8004c44 <HAL_DMA_Abort+0x214>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d072      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c48 <HAL_DMA_Abort+0x218>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d06d      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a39      	ldr	r2, [pc, #228]	@ (8004c4c <HAL_DMA_Abort+0x21c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d068      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a37      	ldr	r2, [pc, #220]	@ (8004c50 <HAL_DMA_Abort+0x220>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d063      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a36      	ldr	r2, [pc, #216]	@ (8004c54 <HAL_DMA_Abort+0x224>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d05e      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a34      	ldr	r2, [pc, #208]	@ (8004c58 <HAL_DMA_Abort+0x228>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d059      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a33      	ldr	r2, [pc, #204]	@ (8004c5c <HAL_DMA_Abort+0x22c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d054      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a31      	ldr	r2, [pc, #196]	@ (8004c60 <HAL_DMA_Abort+0x230>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d04f      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a30      	ldr	r2, [pc, #192]	@ (8004c64 <HAL_DMA_Abort+0x234>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d04a      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2e      	ldr	r2, [pc, #184]	@ (8004c68 <HAL_DMA_Abort+0x238>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d045      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c6c <HAL_DMA_Abort+0x23c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d040      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c70 <HAL_DMA_Abort+0x240>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d03b      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2a      	ldr	r2, [pc, #168]	@ (8004c74 <HAL_DMA_Abort+0x244>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d036      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a28      	ldr	r2, [pc, #160]	@ (8004c78 <HAL_DMA_Abort+0x248>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d031      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a27      	ldr	r2, [pc, #156]	@ (8004c7c <HAL_DMA_Abort+0x24c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d02c      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a25      	ldr	r2, [pc, #148]	@ (8004c80 <HAL_DMA_Abort+0x250>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d027      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a24      	ldr	r2, [pc, #144]	@ (8004c84 <HAL_DMA_Abort+0x254>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d022      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a22      	ldr	r2, [pc, #136]	@ (8004c88 <HAL_DMA_Abort+0x258>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01d      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a21      	ldr	r2, [pc, #132]	@ (8004c8c <HAL_DMA_Abort+0x25c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d018      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1f      	ldr	r2, [pc, #124]	@ (8004c90 <HAL_DMA_Abort+0x260>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c94 <HAL_DMA_Abort+0x264>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00e      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <HAL_DMA_Abort+0x268>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d009      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c9c <HAL_DMA_Abort+0x26c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_DMA_Abort+0x20e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a19      	ldr	r2, [pc, #100]	@ (8004ca0 <HAL_DMA_Abort+0x270>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d132      	bne.n	8004ca4 <HAL_DMA_Abort+0x274>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e031      	b.n	8004ca6 <HAL_DMA_Abort+0x276>
 8004c42:	bf00      	nop
 8004c44:	40020010 	.word	0x40020010
 8004c48:	40020028 	.word	0x40020028
 8004c4c:	40020040 	.word	0x40020040
 8004c50:	40020058 	.word	0x40020058
 8004c54:	40020070 	.word	0x40020070
 8004c58:	40020088 	.word	0x40020088
 8004c5c:	400200a0 	.word	0x400200a0
 8004c60:	400200b8 	.word	0x400200b8
 8004c64:	40020410 	.word	0x40020410
 8004c68:	40020428 	.word	0x40020428
 8004c6c:	40020440 	.word	0x40020440
 8004c70:	40020458 	.word	0x40020458
 8004c74:	40020470 	.word	0x40020470
 8004c78:	40020488 	.word	0x40020488
 8004c7c:	400204a0 	.word	0x400204a0
 8004c80:	400204b8 	.word	0x400204b8
 8004c84:	58025408 	.word	0x58025408
 8004c88:	5802541c 	.word	0x5802541c
 8004c8c:	58025430 	.word	0x58025430
 8004c90:	58025444 	.word	0x58025444
 8004c94:	58025458 	.word	0x58025458
 8004c98:	5802546c 	.word	0x5802546c
 8004c9c:	58025480 	.word	0x58025480
 8004ca0:	58025494 	.word	0x58025494
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a6d      	ldr	r2, [pc, #436]	@ (8004e74 <HAL_DMA_Abort+0x444>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d04a      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a6b      	ldr	r2, [pc, #428]	@ (8004e78 <HAL_DMA_Abort+0x448>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d045      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a6a      	ldr	r2, [pc, #424]	@ (8004e7c <HAL_DMA_Abort+0x44c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d040      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a68      	ldr	r2, [pc, #416]	@ (8004e80 <HAL_DMA_Abort+0x450>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d03b      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a67      	ldr	r2, [pc, #412]	@ (8004e84 <HAL_DMA_Abort+0x454>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d036      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a65      	ldr	r2, [pc, #404]	@ (8004e88 <HAL_DMA_Abort+0x458>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d031      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a64      	ldr	r2, [pc, #400]	@ (8004e8c <HAL_DMA_Abort+0x45c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d02c      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a62      	ldr	r2, [pc, #392]	@ (8004e90 <HAL_DMA_Abort+0x460>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d027      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a61      	ldr	r2, [pc, #388]	@ (8004e94 <HAL_DMA_Abort+0x464>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d022      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5f      	ldr	r2, [pc, #380]	@ (8004e98 <HAL_DMA_Abort+0x468>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01d      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a5e      	ldr	r2, [pc, #376]	@ (8004e9c <HAL_DMA_Abort+0x46c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d018      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ea0 <HAL_DMA_Abort+0x470>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea4 <HAL_DMA_Abort+0x474>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a59      	ldr	r2, [pc, #356]	@ (8004ea8 <HAL_DMA_Abort+0x478>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a58      	ldr	r2, [pc, #352]	@ (8004eac <HAL_DMA_Abort+0x47c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_DMA_Abort+0x32a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a56      	ldr	r2, [pc, #344]	@ (8004eb0 <HAL_DMA_Abort+0x480>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <HAL_DMA_Abort+0x33c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e007      	b.n	8004d7c <HAL_DMA_Abort+0x34c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d7c:	e013      	b.n	8004da6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d7e:	f7fe fea7 	bl	8003ad0 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d90c      	bls.n	8004da6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2203      	movs	r2, #3
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e12d      	b.n	8005002 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e5      	bne.n	8004d7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2f      	ldr	r2, [pc, #188]	@ (8004e74 <HAL_DMA_Abort+0x444>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d04a      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e78 <HAL_DMA_Abort+0x448>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d045      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2c      	ldr	r2, [pc, #176]	@ (8004e7c <HAL_DMA_Abort+0x44c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d040      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8004e80 <HAL_DMA_Abort+0x450>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d03b      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a29      	ldr	r2, [pc, #164]	@ (8004e84 <HAL_DMA_Abort+0x454>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d036      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a27      	ldr	r2, [pc, #156]	@ (8004e88 <HAL_DMA_Abort+0x458>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d031      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a26      	ldr	r2, [pc, #152]	@ (8004e8c <HAL_DMA_Abort+0x45c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d02c      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a24      	ldr	r2, [pc, #144]	@ (8004e90 <HAL_DMA_Abort+0x460>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d027      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a23      	ldr	r2, [pc, #140]	@ (8004e94 <HAL_DMA_Abort+0x464>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d022      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a21      	ldr	r2, [pc, #132]	@ (8004e98 <HAL_DMA_Abort+0x468>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01d      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a20      	ldr	r2, [pc, #128]	@ (8004e9c <HAL_DMA_Abort+0x46c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d018      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea0 <HAL_DMA_Abort+0x470>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea4 <HAL_DMA_Abort+0x474>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00e      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea8 <HAL_DMA_Abort+0x478>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d009      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1a      	ldr	r2, [pc, #104]	@ (8004eac <HAL_DMA_Abort+0x47c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d004      	beq.n	8004e52 <HAL_DMA_Abort+0x422>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a18      	ldr	r2, [pc, #96]	@ (8004eb0 <HAL_DMA_Abort+0x480>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d101      	bne.n	8004e56 <HAL_DMA_Abort+0x426>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_DMA_Abort+0x428>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d02b      	beq.n	8004eb4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	223f      	movs	r2, #63	@ 0x3f
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	609a      	str	r2, [r3, #8]
 8004e72:	e02a      	b.n	8004eca <HAL_DMA_Abort+0x49a>
 8004e74:	40020010 	.word	0x40020010
 8004e78:	40020028 	.word	0x40020028
 8004e7c:	40020040 	.word	0x40020040
 8004e80:	40020058 	.word	0x40020058
 8004e84:	40020070 	.word	0x40020070
 8004e88:	40020088 	.word	0x40020088
 8004e8c:	400200a0 	.word	0x400200a0
 8004e90:	400200b8 	.word	0x400200b8
 8004e94:	40020410 	.word	0x40020410
 8004e98:	40020428 	.word	0x40020428
 8004e9c:	40020440 	.word	0x40020440
 8004ea0:	40020458 	.word	0x40020458
 8004ea4:	40020470 	.word	0x40020470
 8004ea8:	40020488 	.word	0x40020488
 8004eac:	400204a0 	.word	0x400204a0
 8004eb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	409a      	lsls	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a4f      	ldr	r2, [pc, #316]	@ (800500c <HAL_DMA_Abort+0x5dc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d072      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8005010 <HAL_DMA_Abort+0x5e0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d06d      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a4c      	ldr	r2, [pc, #304]	@ (8005014 <HAL_DMA_Abort+0x5e4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d068      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a4a      	ldr	r2, [pc, #296]	@ (8005018 <HAL_DMA_Abort+0x5e8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d063      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a49      	ldr	r2, [pc, #292]	@ (800501c <HAL_DMA_Abort+0x5ec>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d05e      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a47      	ldr	r2, [pc, #284]	@ (8005020 <HAL_DMA_Abort+0x5f0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d059      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a46      	ldr	r2, [pc, #280]	@ (8005024 <HAL_DMA_Abort+0x5f4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d054      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a44      	ldr	r2, [pc, #272]	@ (8005028 <HAL_DMA_Abort+0x5f8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d04f      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a43      	ldr	r2, [pc, #268]	@ (800502c <HAL_DMA_Abort+0x5fc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d04a      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a41      	ldr	r2, [pc, #260]	@ (8005030 <HAL_DMA_Abort+0x600>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d045      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a40      	ldr	r2, [pc, #256]	@ (8005034 <HAL_DMA_Abort+0x604>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d040      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005038 <HAL_DMA_Abort+0x608>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d03b      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3d      	ldr	r2, [pc, #244]	@ (800503c <HAL_DMA_Abort+0x60c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d036      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3b      	ldr	r2, [pc, #236]	@ (8005040 <HAL_DMA_Abort+0x610>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d031      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a3a      	ldr	r2, [pc, #232]	@ (8005044 <HAL_DMA_Abort+0x614>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d02c      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a38      	ldr	r2, [pc, #224]	@ (8005048 <HAL_DMA_Abort+0x618>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d027      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a37      	ldr	r2, [pc, #220]	@ (800504c <HAL_DMA_Abort+0x61c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d022      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a35      	ldr	r2, [pc, #212]	@ (8005050 <HAL_DMA_Abort+0x620>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a34      	ldr	r2, [pc, #208]	@ (8005054 <HAL_DMA_Abort+0x624>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a32      	ldr	r2, [pc, #200]	@ (8005058 <HAL_DMA_Abort+0x628>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a31      	ldr	r2, [pc, #196]	@ (800505c <HAL_DMA_Abort+0x62c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8005060 <HAL_DMA_Abort+0x630>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2e      	ldr	r2, [pc, #184]	@ (8005064 <HAL_DMA_Abort+0x634>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_DMA_Abort+0x58a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8005068 <HAL_DMA_Abort+0x638>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d101      	bne.n	8004fbe <HAL_DMA_Abort+0x58e>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <HAL_DMA_Abort+0x590>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004fcc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fe4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004fee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40020010 	.word	0x40020010
 8005010:	40020028 	.word	0x40020028
 8005014:	40020040 	.word	0x40020040
 8005018:	40020058 	.word	0x40020058
 800501c:	40020070 	.word	0x40020070
 8005020:	40020088 	.word	0x40020088
 8005024:	400200a0 	.word	0x400200a0
 8005028:	400200b8 	.word	0x400200b8
 800502c:	40020410 	.word	0x40020410
 8005030:	40020428 	.word	0x40020428
 8005034:	40020440 	.word	0x40020440
 8005038:	40020458 	.word	0x40020458
 800503c:	40020470 	.word	0x40020470
 8005040:	40020488 	.word	0x40020488
 8005044:	400204a0 	.word	0x400204a0
 8005048:	400204b8 	.word	0x400204b8
 800504c:	58025408 	.word	0x58025408
 8005050:	5802541c 	.word	0x5802541c
 8005054:	58025430 	.word	0x58025430
 8005058:	58025444 	.word	0x58025444
 800505c:	58025458 	.word	0x58025458
 8005060:	5802546c 	.word	0x5802546c
 8005064:	58025480 	.word	0x58025480
 8005068:	58025494 	.word	0x58025494

0800506c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e237      	b.n	80054ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d004      	beq.n	8005094 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2280      	movs	r2, #128	@ 0x80
 800508e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e22c      	b.n	80054ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5c      	ldr	r2, [pc, #368]	@ (800520c <HAL_DMA_Abort_IT+0x1a0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d04a      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5b      	ldr	r2, [pc, #364]	@ (8005210 <HAL_DMA_Abort_IT+0x1a4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d045      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a59      	ldr	r2, [pc, #356]	@ (8005214 <HAL_DMA_Abort_IT+0x1a8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d040      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a58      	ldr	r2, [pc, #352]	@ (8005218 <HAL_DMA_Abort_IT+0x1ac>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d03b      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a56      	ldr	r2, [pc, #344]	@ (800521c <HAL_DMA_Abort_IT+0x1b0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d036      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a55      	ldr	r2, [pc, #340]	@ (8005220 <HAL_DMA_Abort_IT+0x1b4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d031      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a53      	ldr	r2, [pc, #332]	@ (8005224 <HAL_DMA_Abort_IT+0x1b8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d02c      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a52      	ldr	r2, [pc, #328]	@ (8005228 <HAL_DMA_Abort_IT+0x1bc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d027      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a50      	ldr	r2, [pc, #320]	@ (800522c <HAL_DMA_Abort_IT+0x1c0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d022      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a4f      	ldr	r2, [pc, #316]	@ (8005230 <HAL_DMA_Abort_IT+0x1c4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d01d      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a4d      	ldr	r2, [pc, #308]	@ (8005234 <HAL_DMA_Abort_IT+0x1c8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d018      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a4c      	ldr	r2, [pc, #304]	@ (8005238 <HAL_DMA_Abort_IT+0x1cc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a4a      	ldr	r2, [pc, #296]	@ (800523c <HAL_DMA_Abort_IT+0x1d0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00e      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a49      	ldr	r2, [pc, #292]	@ (8005240 <HAL_DMA_Abort_IT+0x1d4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d009      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a47      	ldr	r2, [pc, #284]	@ (8005244 <HAL_DMA_Abort_IT+0x1d8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d004      	beq.n	8005134 <HAL_DMA_Abort_IT+0xc8>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a46      	ldr	r2, [pc, #280]	@ (8005248 <HAL_DMA_Abort_IT+0x1dc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d101      	bne.n	8005138 <HAL_DMA_Abort_IT+0xcc>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_DMA_Abort_IT+0xce>
 8005138:	2300      	movs	r3, #0
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8086 	beq.w	800524c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2204      	movs	r2, #4
 8005144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2f      	ldr	r2, [pc, #188]	@ (800520c <HAL_DMA_Abort_IT+0x1a0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d04a      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2e      	ldr	r2, [pc, #184]	@ (8005210 <HAL_DMA_Abort_IT+0x1a4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d045      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a2c      	ldr	r2, [pc, #176]	@ (8005214 <HAL_DMA_Abort_IT+0x1a8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d040      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2b      	ldr	r2, [pc, #172]	@ (8005218 <HAL_DMA_Abort_IT+0x1ac>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d03b      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a29      	ldr	r2, [pc, #164]	@ (800521c <HAL_DMA_Abort_IT+0x1b0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d036      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a28      	ldr	r2, [pc, #160]	@ (8005220 <HAL_DMA_Abort_IT+0x1b4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d031      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a26      	ldr	r2, [pc, #152]	@ (8005224 <HAL_DMA_Abort_IT+0x1b8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d02c      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a25      	ldr	r2, [pc, #148]	@ (8005228 <HAL_DMA_Abort_IT+0x1bc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d027      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a23      	ldr	r2, [pc, #140]	@ (800522c <HAL_DMA_Abort_IT+0x1c0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d022      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a22      	ldr	r2, [pc, #136]	@ (8005230 <HAL_DMA_Abort_IT+0x1c4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d01d      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a20      	ldr	r2, [pc, #128]	@ (8005234 <HAL_DMA_Abort_IT+0x1c8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005238 <HAL_DMA_Abort_IT+0x1cc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d013      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1d      	ldr	r2, [pc, #116]	@ (800523c <HAL_DMA_Abort_IT+0x1d0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005240 <HAL_DMA_Abort_IT+0x1d4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005244 <HAL_DMA_Abort_IT+0x1d8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_DMA_Abort_IT+0x17c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a19      	ldr	r2, [pc, #100]	@ (8005248 <HAL_DMA_Abort_IT+0x1dc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d108      	bne.n	80051fa <HAL_DMA_Abort_IT+0x18e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e178      	b.n	80054ec <HAL_DMA_Abort_IT+0x480>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e16f      	b.n	80054ec <HAL_DMA_Abort_IT+0x480>
 800520c:	40020010 	.word	0x40020010
 8005210:	40020028 	.word	0x40020028
 8005214:	40020040 	.word	0x40020040
 8005218:	40020058 	.word	0x40020058
 800521c:	40020070 	.word	0x40020070
 8005220:	40020088 	.word	0x40020088
 8005224:	400200a0 	.word	0x400200a0
 8005228:	400200b8 	.word	0x400200b8
 800522c:	40020410 	.word	0x40020410
 8005230:	40020428 	.word	0x40020428
 8005234:	40020440 	.word	0x40020440
 8005238:	40020458 	.word	0x40020458
 800523c:	40020470 	.word	0x40020470
 8005240:	40020488 	.word	0x40020488
 8005244:	400204a0 	.word	0x400204a0
 8005248:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 020e 	bic.w	r2, r2, #14
 800525a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a6c      	ldr	r2, [pc, #432]	@ (8005414 <HAL_DMA_Abort_IT+0x3a8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d04a      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a6b      	ldr	r2, [pc, #428]	@ (8005418 <HAL_DMA_Abort_IT+0x3ac>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d045      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a69      	ldr	r2, [pc, #420]	@ (800541c <HAL_DMA_Abort_IT+0x3b0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d040      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a68      	ldr	r2, [pc, #416]	@ (8005420 <HAL_DMA_Abort_IT+0x3b4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d03b      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a66      	ldr	r2, [pc, #408]	@ (8005424 <HAL_DMA_Abort_IT+0x3b8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d036      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a65      	ldr	r2, [pc, #404]	@ (8005428 <HAL_DMA_Abort_IT+0x3bc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d031      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a63      	ldr	r2, [pc, #396]	@ (800542c <HAL_DMA_Abort_IT+0x3c0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02c      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a62      	ldr	r2, [pc, #392]	@ (8005430 <HAL_DMA_Abort_IT+0x3c4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d027      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a60      	ldr	r2, [pc, #384]	@ (8005434 <HAL_DMA_Abort_IT+0x3c8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d022      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005438 <HAL_DMA_Abort_IT+0x3cc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d01d      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a5d      	ldr	r2, [pc, #372]	@ (800543c <HAL_DMA_Abort_IT+0x3d0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005440 <HAL_DMA_Abort_IT+0x3d4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005444 <HAL_DMA_Abort_IT+0x3d8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a59      	ldr	r2, [pc, #356]	@ (8005448 <HAL_DMA_Abort_IT+0x3dc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a57      	ldr	r2, [pc, #348]	@ (800544c <HAL_DMA_Abort_IT+0x3e0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_DMA_Abort_IT+0x290>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a56      	ldr	r2, [pc, #344]	@ (8005450 <HAL_DMA_Abort_IT+0x3e4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <HAL_DMA_Abort_IT+0x2a2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e007      	b.n	800531e <HAL_DMA_Abort_IT+0x2b2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3c      	ldr	r2, [pc, #240]	@ (8005414 <HAL_DMA_Abort_IT+0x3a8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d072      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a3a      	ldr	r2, [pc, #232]	@ (8005418 <HAL_DMA_Abort_IT+0x3ac>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d06d      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a39      	ldr	r2, [pc, #228]	@ (800541c <HAL_DMA_Abort_IT+0x3b0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d068      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a37      	ldr	r2, [pc, #220]	@ (8005420 <HAL_DMA_Abort_IT+0x3b4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d063      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a36      	ldr	r2, [pc, #216]	@ (8005424 <HAL_DMA_Abort_IT+0x3b8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d05e      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a34      	ldr	r2, [pc, #208]	@ (8005428 <HAL_DMA_Abort_IT+0x3bc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d059      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a33      	ldr	r2, [pc, #204]	@ (800542c <HAL_DMA_Abort_IT+0x3c0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d054      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a31      	ldr	r2, [pc, #196]	@ (8005430 <HAL_DMA_Abort_IT+0x3c4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d04f      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a30      	ldr	r2, [pc, #192]	@ (8005434 <HAL_DMA_Abort_IT+0x3c8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d04a      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2e      	ldr	r2, [pc, #184]	@ (8005438 <HAL_DMA_Abort_IT+0x3cc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d045      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2d      	ldr	r2, [pc, #180]	@ (800543c <HAL_DMA_Abort_IT+0x3d0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d040      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2b      	ldr	r2, [pc, #172]	@ (8005440 <HAL_DMA_Abort_IT+0x3d4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d03b      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2a      	ldr	r2, [pc, #168]	@ (8005444 <HAL_DMA_Abort_IT+0x3d8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d036      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a28      	ldr	r2, [pc, #160]	@ (8005448 <HAL_DMA_Abort_IT+0x3dc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d031      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a27      	ldr	r2, [pc, #156]	@ (800544c <HAL_DMA_Abort_IT+0x3e0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d02c      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a25      	ldr	r2, [pc, #148]	@ (8005450 <HAL_DMA_Abort_IT+0x3e4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d027      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a24      	ldr	r2, [pc, #144]	@ (8005454 <HAL_DMA_Abort_IT+0x3e8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d022      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a22      	ldr	r2, [pc, #136]	@ (8005458 <HAL_DMA_Abort_IT+0x3ec>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01d      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a21      	ldr	r2, [pc, #132]	@ (800545c <HAL_DMA_Abort_IT+0x3f0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d018      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005460 <HAL_DMA_Abort_IT+0x3f4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005464 <HAL_DMA_Abort_IT+0x3f8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00e      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005468 <HAL_DMA_Abort_IT+0x3fc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d009      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1b      	ldr	r2, [pc, #108]	@ (800546c <HAL_DMA_Abort_IT+0x400>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_DMA_Abort_IT+0x3a2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <HAL_DMA_Abort_IT+0x404>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d132      	bne.n	8005474 <HAL_DMA_Abort_IT+0x408>
 800540e:	2301      	movs	r3, #1
 8005410:	e031      	b.n	8005476 <HAL_DMA_Abort_IT+0x40a>
 8005412:	bf00      	nop
 8005414:	40020010 	.word	0x40020010
 8005418:	40020028 	.word	0x40020028
 800541c:	40020040 	.word	0x40020040
 8005420:	40020058 	.word	0x40020058
 8005424:	40020070 	.word	0x40020070
 8005428:	40020088 	.word	0x40020088
 800542c:	400200a0 	.word	0x400200a0
 8005430:	400200b8 	.word	0x400200b8
 8005434:	40020410 	.word	0x40020410
 8005438:	40020428 	.word	0x40020428
 800543c:	40020440 	.word	0x40020440
 8005440:	40020458 	.word	0x40020458
 8005444:	40020470 	.word	0x40020470
 8005448:	40020488 	.word	0x40020488
 800544c:	400204a0 	.word	0x400204a0
 8005450:	400204b8 	.word	0x400204b8
 8005454:	58025408 	.word	0x58025408
 8005458:	5802541c 	.word	0x5802541c
 800545c:	58025430 	.word	0x58025430
 8005460:	58025444 	.word	0x58025444
 8005464:	58025458 	.word	0x58025458
 8005468:	5802546c 	.word	0x5802546c
 800546c:	58025480 	.word	0x58025480
 8005470:	58025494 	.word	0x58025494
 8005474:	2300      	movs	r3, #0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d028      	beq.n	80054cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005488:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	2201      	movs	r2, #1
 800549a:	409a      	lsls	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop

080054f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	@ 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005504:	4b67      	ldr	r3, [pc, #412]	@ (80056a4 <HAL_DMA_IRQHandler+0x1ac>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a67      	ldr	r2, [pc, #412]	@ (80056a8 <HAL_DMA_IRQHandler+0x1b0>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	0a9b      	lsrs	r3, r3, #10
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005516:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a5f      	ldr	r2, [pc, #380]	@ (80056ac <HAL_DMA_IRQHandler+0x1b4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d04a      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5d      	ldr	r2, [pc, #372]	@ (80056b0 <HAL_DMA_IRQHandler+0x1b8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d045      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a5c      	ldr	r2, [pc, #368]	@ (80056b4 <HAL_DMA_IRQHandler+0x1bc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d040      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5a      	ldr	r2, [pc, #360]	@ (80056b8 <HAL_DMA_IRQHandler+0x1c0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d03b      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a59      	ldr	r2, [pc, #356]	@ (80056bc <HAL_DMA_IRQHandler+0x1c4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d036      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a57      	ldr	r2, [pc, #348]	@ (80056c0 <HAL_DMA_IRQHandler+0x1c8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d031      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a56      	ldr	r2, [pc, #344]	@ (80056c4 <HAL_DMA_IRQHandler+0x1cc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d02c      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a54      	ldr	r2, [pc, #336]	@ (80056c8 <HAL_DMA_IRQHandler+0x1d0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d027      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a53      	ldr	r2, [pc, #332]	@ (80056cc <HAL_DMA_IRQHandler+0x1d4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d022      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a51      	ldr	r2, [pc, #324]	@ (80056d0 <HAL_DMA_IRQHandler+0x1d8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01d      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a50      	ldr	r2, [pc, #320]	@ (80056d4 <HAL_DMA_IRQHandler+0x1dc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d018      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a4e      	ldr	r2, [pc, #312]	@ (80056d8 <HAL_DMA_IRQHandler+0x1e0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a4d      	ldr	r2, [pc, #308]	@ (80056dc <HAL_DMA_IRQHandler+0x1e4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00e      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a4b      	ldr	r2, [pc, #300]	@ (80056e0 <HAL_DMA_IRQHandler+0x1e8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a4a      	ldr	r2, [pc, #296]	@ (80056e4 <HAL_DMA_IRQHandler+0x1ec>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_DMA_IRQHandler+0xd2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a48      	ldr	r2, [pc, #288]	@ (80056e8 <HAL_DMA_IRQHandler+0x1f0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d101      	bne.n	80055ce <HAL_DMA_IRQHandler+0xd6>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <HAL_DMA_IRQHandler+0xd8>
 80055ce:	2300      	movs	r3, #0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 842b 	beq.w	8005e2c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	2208      	movs	r2, #8
 80055e0:	409a      	lsls	r2, r3
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80a2 	beq.w	8005730 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a2e      	ldr	r2, [pc, #184]	@ (80056ac <HAL_DMA_IRQHandler+0x1b4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d04a      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a2d      	ldr	r2, [pc, #180]	@ (80056b0 <HAL_DMA_IRQHandler+0x1b8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d045      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2b      	ldr	r2, [pc, #172]	@ (80056b4 <HAL_DMA_IRQHandler+0x1bc>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d040      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2a      	ldr	r2, [pc, #168]	@ (80056b8 <HAL_DMA_IRQHandler+0x1c0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d03b      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a28      	ldr	r2, [pc, #160]	@ (80056bc <HAL_DMA_IRQHandler+0x1c4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d036      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a27      	ldr	r2, [pc, #156]	@ (80056c0 <HAL_DMA_IRQHandler+0x1c8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d031      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a25      	ldr	r2, [pc, #148]	@ (80056c4 <HAL_DMA_IRQHandler+0x1cc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d02c      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a24      	ldr	r2, [pc, #144]	@ (80056c8 <HAL_DMA_IRQHandler+0x1d0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d027      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a22      	ldr	r2, [pc, #136]	@ (80056cc <HAL_DMA_IRQHandler+0x1d4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d022      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a21      	ldr	r2, [pc, #132]	@ (80056d0 <HAL_DMA_IRQHandler+0x1d8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d01d      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1f      	ldr	r2, [pc, #124]	@ (80056d4 <HAL_DMA_IRQHandler+0x1dc>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d018      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1e      	ldr	r2, [pc, #120]	@ (80056d8 <HAL_DMA_IRQHandler+0x1e0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d013      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1c      	ldr	r2, [pc, #112]	@ (80056dc <HAL_DMA_IRQHandler+0x1e4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00e      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1b      	ldr	r2, [pc, #108]	@ (80056e0 <HAL_DMA_IRQHandler+0x1e8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d009      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a19      	ldr	r2, [pc, #100]	@ (80056e4 <HAL_DMA_IRQHandler+0x1ec>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d004      	beq.n	800568c <HAL_DMA_IRQHandler+0x194>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a18      	ldr	r2, [pc, #96]	@ (80056e8 <HAL_DMA_IRQHandler+0x1f0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d12f      	bne.n	80056ec <HAL_DMA_IRQHandler+0x1f4>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	bf14      	ite	ne
 800569a:	2301      	movne	r3, #1
 800569c:	2300      	moveq	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	e02e      	b.n	8005700 <HAL_DMA_IRQHandler+0x208>
 80056a2:	bf00      	nop
 80056a4:	24000098 	.word	0x24000098
 80056a8:	1b4e81b5 	.word	0x1b4e81b5
 80056ac:	40020010 	.word	0x40020010
 80056b0:	40020028 	.word	0x40020028
 80056b4:	40020040 	.word	0x40020040
 80056b8:	40020058 	.word	0x40020058
 80056bc:	40020070 	.word	0x40020070
 80056c0:	40020088 	.word	0x40020088
 80056c4:	400200a0 	.word	0x400200a0
 80056c8:	400200b8 	.word	0x400200b8
 80056cc:	40020410 	.word	0x40020410
 80056d0:	40020428 	.word	0x40020428
 80056d4:	40020440 	.word	0x40020440
 80056d8:	40020458 	.word	0x40020458
 80056dc:	40020470 	.word	0x40020470
 80056e0:	40020488 	.word	0x40020488
 80056e4:	400204a0 	.word	0x400204a0
 80056e8:	400204b8 	.word	0x400204b8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf14      	ite	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	2300      	moveq	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d015      	beq.n	8005730 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0204 	bic.w	r2, r2, #4
 8005712:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	2208      	movs	r2, #8
 800571e:	409a      	lsls	r2, r3
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005728:	f043 0201 	orr.w	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d06e      	beq.n	8005824 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a69      	ldr	r2, [pc, #420]	@ (80058f0 <HAL_DMA_IRQHandler+0x3f8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d04a      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a67      	ldr	r2, [pc, #412]	@ (80058f4 <HAL_DMA_IRQHandler+0x3fc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d045      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a66      	ldr	r2, [pc, #408]	@ (80058f8 <HAL_DMA_IRQHandler+0x400>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d040      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a64      	ldr	r2, [pc, #400]	@ (80058fc <HAL_DMA_IRQHandler+0x404>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d03b      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a63      	ldr	r2, [pc, #396]	@ (8005900 <HAL_DMA_IRQHandler+0x408>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d036      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a61      	ldr	r2, [pc, #388]	@ (8005904 <HAL_DMA_IRQHandler+0x40c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d031      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a60      	ldr	r2, [pc, #384]	@ (8005908 <HAL_DMA_IRQHandler+0x410>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d02c      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a5e      	ldr	r2, [pc, #376]	@ (800590c <HAL_DMA_IRQHandler+0x414>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d027      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a5d      	ldr	r2, [pc, #372]	@ (8005910 <HAL_DMA_IRQHandler+0x418>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a5b      	ldr	r2, [pc, #364]	@ (8005914 <HAL_DMA_IRQHandler+0x41c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01d      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a5a      	ldr	r2, [pc, #360]	@ (8005918 <HAL_DMA_IRQHandler+0x420>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a58      	ldr	r2, [pc, #352]	@ (800591c <HAL_DMA_IRQHandler+0x424>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a57      	ldr	r2, [pc, #348]	@ (8005920 <HAL_DMA_IRQHandler+0x428>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a55      	ldr	r2, [pc, #340]	@ (8005924 <HAL_DMA_IRQHandler+0x42c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a54      	ldr	r2, [pc, #336]	@ (8005928 <HAL_DMA_IRQHandler+0x430>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x2ee>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a52      	ldr	r2, [pc, #328]	@ (800592c <HAL_DMA_IRQHandler+0x434>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10a      	bne.n	80057fc <HAL_DMA_IRQHandler+0x304>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e003      	b.n	8005804 <HAL_DMA_IRQHandler+0x30c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2300      	movs	r3, #0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00d      	beq.n	8005824 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2201      	movs	r2, #1
 8005812:	409a      	lsls	r2, r3
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581c:	f043 0202 	orr.w	r2, r3, #2
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	2204      	movs	r2, #4
 800582e:	409a      	lsls	r2, r3
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 808f 	beq.w	8005958 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2c      	ldr	r2, [pc, #176]	@ (80058f0 <HAL_DMA_IRQHandler+0x3f8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04a      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2a      	ldr	r2, [pc, #168]	@ (80058f4 <HAL_DMA_IRQHandler+0x3fc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d045      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a29      	ldr	r2, [pc, #164]	@ (80058f8 <HAL_DMA_IRQHandler+0x400>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d040      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a27      	ldr	r2, [pc, #156]	@ (80058fc <HAL_DMA_IRQHandler+0x404>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d03b      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a26      	ldr	r2, [pc, #152]	@ (8005900 <HAL_DMA_IRQHandler+0x408>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d036      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a24      	ldr	r2, [pc, #144]	@ (8005904 <HAL_DMA_IRQHandler+0x40c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a23      	ldr	r2, [pc, #140]	@ (8005908 <HAL_DMA_IRQHandler+0x410>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02c      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a21      	ldr	r2, [pc, #132]	@ (800590c <HAL_DMA_IRQHandler+0x414>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a20      	ldr	r2, [pc, #128]	@ (8005910 <HAL_DMA_IRQHandler+0x418>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1e      	ldr	r2, [pc, #120]	@ (8005914 <HAL_DMA_IRQHandler+0x41c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <HAL_DMA_IRQHandler+0x420>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1b      	ldr	r2, [pc, #108]	@ (800591c <HAL_DMA_IRQHandler+0x424>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005920 <HAL_DMA_IRQHandler+0x428>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a18      	ldr	r2, [pc, #96]	@ (8005924 <HAL_DMA_IRQHandler+0x42c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a17      	ldr	r2, [pc, #92]	@ (8005928 <HAL_DMA_IRQHandler+0x430>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_DMA_IRQHandler+0x3e2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a15      	ldr	r2, [pc, #84]	@ (800592c <HAL_DMA_IRQHandler+0x434>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d12a      	bne.n	8005930 <HAL_DMA_IRQHandler+0x438>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	e023      	b.n	8005938 <HAL_DMA_IRQHandler+0x440>
 80058f0:	40020010 	.word	0x40020010
 80058f4:	40020028 	.word	0x40020028
 80058f8:	40020040 	.word	0x40020040
 80058fc:	40020058 	.word	0x40020058
 8005900:	40020070 	.word	0x40020070
 8005904:	40020088 	.word	0x40020088
 8005908:	400200a0 	.word	0x400200a0
 800590c:	400200b8 	.word	0x400200b8
 8005910:	40020410 	.word	0x40020410
 8005914:	40020428 	.word	0x40020428
 8005918:	40020440 	.word	0x40020440
 800591c:	40020458 	.word	0x40020458
 8005920:	40020470 	.word	0x40020470
 8005924:	40020488 	.word	0x40020488
 8005928:	400204a0 	.word	0x400204a0
 800592c:	400204b8 	.word	0x400204b8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2300      	movs	r3, #0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2204      	movs	r2, #4
 8005946:	409a      	lsls	r2, r3
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005950:	f043 0204 	orr.w	r2, r3, #4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	2210      	movs	r2, #16
 8005962:	409a      	lsls	r2, r3
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	4013      	ands	r3, r2
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80a6 	beq.w	8005aba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a85      	ldr	r2, [pc, #532]	@ (8005b88 <HAL_DMA_IRQHandler+0x690>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d04a      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a83      	ldr	r2, [pc, #524]	@ (8005b8c <HAL_DMA_IRQHandler+0x694>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d045      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a82      	ldr	r2, [pc, #520]	@ (8005b90 <HAL_DMA_IRQHandler+0x698>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d040      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a80      	ldr	r2, [pc, #512]	@ (8005b94 <HAL_DMA_IRQHandler+0x69c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d03b      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a7f      	ldr	r2, [pc, #508]	@ (8005b98 <HAL_DMA_IRQHandler+0x6a0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d036      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a7d      	ldr	r2, [pc, #500]	@ (8005b9c <HAL_DMA_IRQHandler+0x6a4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d031      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a7c      	ldr	r2, [pc, #496]	@ (8005ba0 <HAL_DMA_IRQHandler+0x6a8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d02c      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a7a      	ldr	r2, [pc, #488]	@ (8005ba4 <HAL_DMA_IRQHandler+0x6ac>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d027      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a79      	ldr	r2, [pc, #484]	@ (8005ba8 <HAL_DMA_IRQHandler+0x6b0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a77      	ldr	r2, [pc, #476]	@ (8005bac <HAL_DMA_IRQHandler+0x6b4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a76      	ldr	r2, [pc, #472]	@ (8005bb0 <HAL_DMA_IRQHandler+0x6b8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d018      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a74      	ldr	r2, [pc, #464]	@ (8005bb4 <HAL_DMA_IRQHandler+0x6bc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a73      	ldr	r2, [pc, #460]	@ (8005bb8 <HAL_DMA_IRQHandler+0x6c0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a71      	ldr	r2, [pc, #452]	@ (8005bbc <HAL_DMA_IRQHandler+0x6c4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a70      	ldr	r2, [pc, #448]	@ (8005bc0 <HAL_DMA_IRQHandler+0x6c8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x516>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a6e      	ldr	r2, [pc, #440]	@ (8005bc4 <HAL_DMA_IRQHandler+0x6cc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d10a      	bne.n	8005a24 <HAL_DMA_IRQHandler+0x52c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bf14      	ite	ne
 8005a1c:	2301      	movne	r3, #1
 8005a1e:	2300      	moveq	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	e009      	b.n	8005a38 <HAL_DMA_IRQHandler+0x540>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	2300      	moveq	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d03e      	beq.n	8005aba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2210      	movs	r2, #16
 8005a46:	409a      	lsls	r2, r3
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d018      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d108      	bne.n	8005a7a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d024      	beq.n	8005aba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	4798      	blx	r3
 8005a78:	e01f      	b.n	8005aba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01b      	beq.n	8005aba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
 8005a8a:	e016      	b.n	8005aba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d107      	bne.n	8005aaa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0208 	bic.w	r2, r2, #8
 8005aa8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8110 	beq.w	8005cf0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8005b88 <HAL_DMA_IRQHandler+0x690>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d04a      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2b      	ldr	r2, [pc, #172]	@ (8005b8c <HAL_DMA_IRQHandler+0x694>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d045      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a29      	ldr	r2, [pc, #164]	@ (8005b90 <HAL_DMA_IRQHandler+0x698>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d040      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a28      	ldr	r2, [pc, #160]	@ (8005b94 <HAL_DMA_IRQHandler+0x69c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d03b      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a26      	ldr	r2, [pc, #152]	@ (8005b98 <HAL_DMA_IRQHandler+0x6a0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d036      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a25      	ldr	r2, [pc, #148]	@ (8005b9c <HAL_DMA_IRQHandler+0x6a4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d031      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a23      	ldr	r2, [pc, #140]	@ (8005ba0 <HAL_DMA_IRQHandler+0x6a8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d02c      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a22      	ldr	r2, [pc, #136]	@ (8005ba4 <HAL_DMA_IRQHandler+0x6ac>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d027      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a20      	ldr	r2, [pc, #128]	@ (8005ba8 <HAL_DMA_IRQHandler+0x6b0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d022      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bac <HAL_DMA_IRQHandler+0x6b4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d01d      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb0 <HAL_DMA_IRQHandler+0x6b8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d018      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb4 <HAL_DMA_IRQHandler+0x6bc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d013      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb8 <HAL_DMA_IRQHandler+0x6c0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00e      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a19      	ldr	r2, [pc, #100]	@ (8005bbc <HAL_DMA_IRQHandler+0x6c4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d009      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a17      	ldr	r2, [pc, #92]	@ (8005bc0 <HAL_DMA_IRQHandler+0x6c8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d004      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x678>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a16      	ldr	r2, [pc, #88]	@ (8005bc4 <HAL_DMA_IRQHandler+0x6cc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d12b      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0x6d0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bf14      	ite	ne
 8005b7e:	2301      	movne	r3, #1
 8005b80:	2300      	moveq	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	e02a      	b.n	8005bdc <HAL_DMA_IRQHandler+0x6e4>
 8005b86:	bf00      	nop
 8005b88:	40020010 	.word	0x40020010
 8005b8c:	40020028 	.word	0x40020028
 8005b90:	40020040 	.word	0x40020040
 8005b94:	40020058 	.word	0x40020058
 8005b98:	40020070 	.word	0x40020070
 8005b9c:	40020088 	.word	0x40020088
 8005ba0:	400200a0 	.word	0x400200a0
 8005ba4:	400200b8 	.word	0x400200b8
 8005ba8:	40020410 	.word	0x40020410
 8005bac:	40020428 	.word	0x40020428
 8005bb0:	40020440 	.word	0x40020440
 8005bb4:	40020458 	.word	0x40020458
 8005bb8:	40020470 	.word	0x40020470
 8005bbc:	40020488 	.word	0x40020488
 8005bc0:	400204a0 	.word	0x400204a0
 8005bc4:	400204b8 	.word	0x400204b8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bf14      	ite	ne
 8005bd6:	2301      	movne	r3, #1
 8005bd8:	2300      	moveq	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8087 	beq.w	8005cf0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	2220      	movs	r2, #32
 8005bec:	409a      	lsls	r2, r3
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d139      	bne.n	8005c72 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0216 	bic.w	r2, r2, #22
 8005c0c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c1c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <HAL_DMA_IRQHandler+0x736>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0208 	bic.w	r2, r2, #8
 8005c3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	223f      	movs	r2, #63	@ 0x3f
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8382 	beq.w	800636c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
          }
          return;
 8005c70:	e37c      	b.n	800636c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d018      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d108      	bne.n	8005ca0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d02c      	beq.n	8005cf0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
 8005c9e:	e027      	b.n	8005cf0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d023      	beq.n	8005cf0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	e01e      	b.n	8005cf0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10f      	bne.n	8005ce0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0210 	bic.w	r2, r2, #16
 8005cce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 833e 	beq.w	8006376 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8088 	beq.w	8005e18 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a89      	ldr	r2, [pc, #548]	@ (8005f3c <HAL_DMA_IRQHandler+0xa44>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04a      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a88      	ldr	r2, [pc, #544]	@ (8005f40 <HAL_DMA_IRQHandler+0xa48>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d045      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a86      	ldr	r2, [pc, #536]	@ (8005f44 <HAL_DMA_IRQHandler+0xa4c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d040      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a85      	ldr	r2, [pc, #532]	@ (8005f48 <HAL_DMA_IRQHandler+0xa50>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d03b      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a83      	ldr	r2, [pc, #524]	@ (8005f4c <HAL_DMA_IRQHandler+0xa54>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d036      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a82      	ldr	r2, [pc, #520]	@ (8005f50 <HAL_DMA_IRQHandler+0xa58>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d031      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a80      	ldr	r2, [pc, #512]	@ (8005f54 <HAL_DMA_IRQHandler+0xa5c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d02c      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a7f      	ldr	r2, [pc, #508]	@ (8005f58 <HAL_DMA_IRQHandler+0xa60>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d027      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a7d      	ldr	r2, [pc, #500]	@ (8005f5c <HAL_DMA_IRQHandler+0xa64>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d022      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a7c      	ldr	r2, [pc, #496]	@ (8005f60 <HAL_DMA_IRQHandler+0xa68>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01d      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a7a      	ldr	r2, [pc, #488]	@ (8005f64 <HAL_DMA_IRQHandler+0xa6c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a79      	ldr	r2, [pc, #484]	@ (8005f68 <HAL_DMA_IRQHandler+0xa70>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a77      	ldr	r2, [pc, #476]	@ (8005f6c <HAL_DMA_IRQHandler+0xa74>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a76      	ldr	r2, [pc, #472]	@ (8005f70 <HAL_DMA_IRQHandler+0xa78>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a74      	ldr	r2, [pc, #464]	@ (8005f74 <HAL_DMA_IRQHandler+0xa7c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x8b8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a73      	ldr	r2, [pc, #460]	@ (8005f78 <HAL_DMA_IRQHandler+0xa80>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <HAL_DMA_IRQHandler+0x8ca>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e007      	b.n	8005dd2 <HAL_DMA_IRQHandler+0x8da>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0201 	bic.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d307      	bcc.n	8005dee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f2      	bne.n	8005dd2 <HAL_DMA_IRQHandler+0x8da>
 8005dec:	e000      	b.n	8005df0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005dee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2203      	movs	r2, #3
 8005e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005e06:	e003      	b.n	8005e10 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 82aa 	beq.w	8006376 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
 8005e2a:	e2a4      	b.n	8006376 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a52      	ldr	r2, [pc, #328]	@ (8005f7c <HAL_DMA_IRQHandler+0xa84>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d04a      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a51      	ldr	r2, [pc, #324]	@ (8005f80 <HAL_DMA_IRQHandler+0xa88>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d045      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a4f      	ldr	r2, [pc, #316]	@ (8005f84 <HAL_DMA_IRQHandler+0xa8c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d040      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a4e      	ldr	r2, [pc, #312]	@ (8005f88 <HAL_DMA_IRQHandler+0xa90>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d03b      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a4c      	ldr	r2, [pc, #304]	@ (8005f8c <HAL_DMA_IRQHandler+0xa94>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d036      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a4b      	ldr	r2, [pc, #300]	@ (8005f90 <HAL_DMA_IRQHandler+0xa98>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d031      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a49      	ldr	r2, [pc, #292]	@ (8005f94 <HAL_DMA_IRQHandler+0xa9c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d02c      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a48      	ldr	r2, [pc, #288]	@ (8005f98 <HAL_DMA_IRQHandler+0xaa0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d027      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a46      	ldr	r2, [pc, #280]	@ (8005f9c <HAL_DMA_IRQHandler+0xaa4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d022      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a45      	ldr	r2, [pc, #276]	@ (8005fa0 <HAL_DMA_IRQHandler+0xaa8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d01d      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a43      	ldr	r2, [pc, #268]	@ (8005fa4 <HAL_DMA_IRQHandler+0xaac>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a42      	ldr	r2, [pc, #264]	@ (8005fa8 <HAL_DMA_IRQHandler+0xab0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a40      	ldr	r2, [pc, #256]	@ (8005fac <HAL_DMA_IRQHandler+0xab4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a3f      	ldr	r2, [pc, #252]	@ (8005fb0 <HAL_DMA_IRQHandler+0xab8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8005fb4 <HAL_DMA_IRQHandler+0xabc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x9d4>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb8 <HAL_DMA_IRQHandler+0xac0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d101      	bne.n	8005ed0 <HAL_DMA_IRQHandler+0x9d8>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <HAL_DMA_IRQHandler+0x9da>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 824f 	beq.w	8006376 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	2204      	movs	r2, #4
 8005eea:	409a      	lsls	r2, r3
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80dd 	beq.w	80060b0 <HAL_DMA_IRQHandler+0xbb8>
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80d7 	beq.w	80060b0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	2204      	movs	r2, #4
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d059      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d14a      	bne.n	8005fbc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8220 	beq.w	8006370 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f38:	e21a      	b.n	8006370 <HAL_DMA_IRQHandler+0xe78>
 8005f3a:	bf00      	nop
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
 8005f7c:	48022c08 	.word	0x48022c08
 8005f80:	48022c1c 	.word	0x48022c1c
 8005f84:	48022c30 	.word	0x48022c30
 8005f88:	48022c44 	.word	0x48022c44
 8005f8c:	48022c58 	.word	0x48022c58
 8005f90:	48022c6c 	.word	0x48022c6c
 8005f94:	48022c80 	.word	0x48022c80
 8005f98:	48022c94 	.word	0x48022c94
 8005f9c:	58025408 	.word	0x58025408
 8005fa0:	5802541c 	.word	0x5802541c
 8005fa4:	58025430 	.word	0x58025430
 8005fa8:	58025444 	.word	0x58025444
 8005fac:	58025458 	.word	0x58025458
 8005fb0:	5802546c 	.word	0x5802546c
 8005fb4:	58025480 	.word	0x58025480
 8005fb8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 81d5 	beq.w	8006370 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fce:	e1cf      	b.n	8006370 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d160      	bne.n	800609c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a7f      	ldr	r2, [pc, #508]	@ (80061dc <HAL_DMA_IRQHandler+0xce4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d04a      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a7d      	ldr	r2, [pc, #500]	@ (80061e0 <HAL_DMA_IRQHandler+0xce8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d045      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80061e4 <HAL_DMA_IRQHandler+0xcec>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d040      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a7a      	ldr	r2, [pc, #488]	@ (80061e8 <HAL_DMA_IRQHandler+0xcf0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d03b      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a79      	ldr	r2, [pc, #484]	@ (80061ec <HAL_DMA_IRQHandler+0xcf4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d036      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a77      	ldr	r2, [pc, #476]	@ (80061f0 <HAL_DMA_IRQHandler+0xcf8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d031      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a76      	ldr	r2, [pc, #472]	@ (80061f4 <HAL_DMA_IRQHandler+0xcfc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d02c      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a74      	ldr	r2, [pc, #464]	@ (80061f8 <HAL_DMA_IRQHandler+0xd00>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d027      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a73      	ldr	r2, [pc, #460]	@ (80061fc <HAL_DMA_IRQHandler+0xd04>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d022      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a71      	ldr	r2, [pc, #452]	@ (8006200 <HAL_DMA_IRQHandler+0xd08>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01d      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a70      	ldr	r2, [pc, #448]	@ (8006204 <HAL_DMA_IRQHandler+0xd0c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d018      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a6e      	ldr	r2, [pc, #440]	@ (8006208 <HAL_DMA_IRQHandler+0xd10>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a6d      	ldr	r2, [pc, #436]	@ (800620c <HAL_DMA_IRQHandler+0xd14>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00e      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a6b      	ldr	r2, [pc, #428]	@ (8006210 <HAL_DMA_IRQHandler+0xd18>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d009      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a6a      	ldr	r2, [pc, #424]	@ (8006214 <HAL_DMA_IRQHandler+0xd1c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d004      	beq.n	800607a <HAL_DMA_IRQHandler+0xb82>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a68      	ldr	r2, [pc, #416]	@ (8006218 <HAL_DMA_IRQHandler+0xd20>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d108      	bne.n	800608c <HAL_DMA_IRQHandler+0xb94>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0208 	bic.w	r2, r2, #8
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	e007      	b.n	800609c <HAL_DMA_IRQHandler+0xba4>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0204 	bic.w	r2, r2, #4
 800609a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8165 	beq.w	8006370 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ae:	e15f      	b.n	8006370 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2202      	movs	r2, #2
 80060ba:	409a      	lsls	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80c5 	beq.w	8006250 <HAL_DMA_IRQHandler+0xd58>
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80bf 	beq.w	8006250 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	2202      	movs	r2, #2
 80060dc:	409a      	lsls	r2, r3
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d018      	beq.n	800611e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 813a 	beq.w	8006374 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006108:	e134      	b.n	8006374 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8130 	beq.w	8006374 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800611c:	e12a      	b.n	8006374 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	f040 8089 	bne.w	800623c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2b      	ldr	r2, [pc, #172]	@ (80061dc <HAL_DMA_IRQHandler+0xce4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d04a      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a29      	ldr	r2, [pc, #164]	@ (80061e0 <HAL_DMA_IRQHandler+0xce8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d045      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a28      	ldr	r2, [pc, #160]	@ (80061e4 <HAL_DMA_IRQHandler+0xcec>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d040      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a26      	ldr	r2, [pc, #152]	@ (80061e8 <HAL_DMA_IRQHandler+0xcf0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d03b      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a25      	ldr	r2, [pc, #148]	@ (80061ec <HAL_DMA_IRQHandler+0xcf4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d036      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a23      	ldr	r2, [pc, #140]	@ (80061f0 <HAL_DMA_IRQHandler+0xcf8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d031      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a22      	ldr	r2, [pc, #136]	@ (80061f4 <HAL_DMA_IRQHandler+0xcfc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d02c      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a20      	ldr	r2, [pc, #128]	@ (80061f8 <HAL_DMA_IRQHandler+0xd00>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d027      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1f      	ldr	r2, [pc, #124]	@ (80061fc <HAL_DMA_IRQHandler+0xd04>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d022      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1d      	ldr	r2, [pc, #116]	@ (8006200 <HAL_DMA_IRQHandler+0xd08>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01d      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1c      	ldr	r2, [pc, #112]	@ (8006204 <HAL_DMA_IRQHandler+0xd0c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d018      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1a      	ldr	r2, [pc, #104]	@ (8006208 <HAL_DMA_IRQHandler+0xd10>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a19      	ldr	r2, [pc, #100]	@ (800620c <HAL_DMA_IRQHandler+0xd14>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a17      	ldr	r2, [pc, #92]	@ (8006210 <HAL_DMA_IRQHandler+0xd18>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a16      	ldr	r2, [pc, #88]	@ (8006214 <HAL_DMA_IRQHandler+0xd1c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <HAL_DMA_IRQHandler+0xcd2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a14      	ldr	r2, [pc, #80]	@ (8006218 <HAL_DMA_IRQHandler+0xd20>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d128      	bne.n	800621c <HAL_DMA_IRQHandler+0xd24>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0214 	bic.w	r2, r2, #20
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e027      	b.n	800622c <HAL_DMA_IRQHandler+0xd34>
 80061dc:	40020010 	.word	0x40020010
 80061e0:	40020028 	.word	0x40020028
 80061e4:	40020040 	.word	0x40020040
 80061e8:	40020058 	.word	0x40020058
 80061ec:	40020070 	.word	0x40020070
 80061f0:	40020088 	.word	0x40020088
 80061f4:	400200a0 	.word	0x400200a0
 80061f8:	400200b8 	.word	0x400200b8
 80061fc:	40020410 	.word	0x40020410
 8006200:	40020428 	.word	0x40020428
 8006204:	40020440 	.word	0x40020440
 8006208:	40020458 	.word	0x40020458
 800620c:	40020470 	.word	0x40020470
 8006210:	40020488 	.word	0x40020488
 8006214:	400204a0 	.word	0x400204a0
 8006218:	400204b8 	.word	0x400204b8
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 020a 	bic.w	r2, r2, #10
 800622a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 8097 	beq.w	8006374 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800624e:	e091      	b.n	8006374 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2208      	movs	r2, #8
 800625a:	409a      	lsls	r2, r3
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8088 	beq.w	8006376 <HAL_DMA_IRQHandler+0xe7e>
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8082 	beq.w	8006376 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a41      	ldr	r2, [pc, #260]	@ (800637c <HAL_DMA_IRQHandler+0xe84>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d04a      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a3f      	ldr	r2, [pc, #252]	@ (8006380 <HAL_DMA_IRQHandler+0xe88>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d045      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a3e      	ldr	r2, [pc, #248]	@ (8006384 <HAL_DMA_IRQHandler+0xe8c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d040      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a3c      	ldr	r2, [pc, #240]	@ (8006388 <HAL_DMA_IRQHandler+0xe90>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d03b      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a3b      	ldr	r2, [pc, #236]	@ (800638c <HAL_DMA_IRQHandler+0xe94>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d036      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a39      	ldr	r2, [pc, #228]	@ (8006390 <HAL_DMA_IRQHandler+0xe98>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d031      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a38      	ldr	r2, [pc, #224]	@ (8006394 <HAL_DMA_IRQHandler+0xe9c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d02c      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a36      	ldr	r2, [pc, #216]	@ (8006398 <HAL_DMA_IRQHandler+0xea0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d027      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a35      	ldr	r2, [pc, #212]	@ (800639c <HAL_DMA_IRQHandler+0xea4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d022      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a33      	ldr	r2, [pc, #204]	@ (80063a0 <HAL_DMA_IRQHandler+0xea8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01d      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a32      	ldr	r2, [pc, #200]	@ (80063a4 <HAL_DMA_IRQHandler+0xeac>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d018      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a30      	ldr	r2, [pc, #192]	@ (80063a8 <HAL_DMA_IRQHandler+0xeb0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2f      	ldr	r2, [pc, #188]	@ (80063ac <HAL_DMA_IRQHandler+0xeb4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00e      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2d      	ldr	r2, [pc, #180]	@ (80063b0 <HAL_DMA_IRQHandler+0xeb8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d009      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2c      	ldr	r2, [pc, #176]	@ (80063b4 <HAL_DMA_IRQHandler+0xebc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_DMA_IRQHandler+0xe1a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a2a      	ldr	r2, [pc, #168]	@ (80063b8 <HAL_DMA_IRQHandler+0xec0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d108      	bne.n	8006324 <HAL_DMA_IRQHandler+0xe2c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 021c 	bic.w	r2, r2, #28
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	e007      	b.n	8006334 <HAL_DMA_IRQHandler+0xe3c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 020e 	bic.w	r2, r2, #14
 8006332:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	2201      	movs	r2, #1
 800633e:	409a      	lsls	r2, r3
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
 800636a:	e004      	b.n	8006376 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800636c:	bf00      	nop
 800636e:	e002      	b.n	8006376 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006370:	bf00      	nop
 8006372:	e000      	b.n	8006376 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006374:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006376:	3728      	adds	r7, #40	@ 0x28
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8

080063bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a7f      	ldr	r2, [pc, #508]	@ (80065d8 <DMA_SetConfig+0x21c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d072      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a7d      	ldr	r2, [pc, #500]	@ (80065dc <DMA_SetConfig+0x220>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d06d      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a7c      	ldr	r2, [pc, #496]	@ (80065e0 <DMA_SetConfig+0x224>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d068      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a7a      	ldr	r2, [pc, #488]	@ (80065e4 <DMA_SetConfig+0x228>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d063      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a79      	ldr	r2, [pc, #484]	@ (80065e8 <DMA_SetConfig+0x22c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d05e      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a77      	ldr	r2, [pc, #476]	@ (80065ec <DMA_SetConfig+0x230>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d059      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a76      	ldr	r2, [pc, #472]	@ (80065f0 <DMA_SetConfig+0x234>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d054      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a74      	ldr	r2, [pc, #464]	@ (80065f4 <DMA_SetConfig+0x238>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d04f      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a73      	ldr	r2, [pc, #460]	@ (80065f8 <DMA_SetConfig+0x23c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d04a      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a71      	ldr	r2, [pc, #452]	@ (80065fc <DMA_SetConfig+0x240>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d045      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a70      	ldr	r2, [pc, #448]	@ (8006600 <DMA_SetConfig+0x244>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d040      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a6e      	ldr	r2, [pc, #440]	@ (8006604 <DMA_SetConfig+0x248>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d03b      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a6d      	ldr	r2, [pc, #436]	@ (8006608 <DMA_SetConfig+0x24c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d036      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a6b      	ldr	r2, [pc, #428]	@ (800660c <DMA_SetConfig+0x250>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d031      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a6a      	ldr	r2, [pc, #424]	@ (8006610 <DMA_SetConfig+0x254>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d02c      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a68      	ldr	r2, [pc, #416]	@ (8006614 <DMA_SetConfig+0x258>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d027      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a67      	ldr	r2, [pc, #412]	@ (8006618 <DMA_SetConfig+0x25c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d022      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a65      	ldr	r2, [pc, #404]	@ (800661c <DMA_SetConfig+0x260>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01d      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a64      	ldr	r2, [pc, #400]	@ (8006620 <DMA_SetConfig+0x264>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a62      	ldr	r2, [pc, #392]	@ (8006624 <DMA_SetConfig+0x268>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a61      	ldr	r2, [pc, #388]	@ (8006628 <DMA_SetConfig+0x26c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a5f      	ldr	r2, [pc, #380]	@ (800662c <DMA_SetConfig+0x270>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a5e      	ldr	r2, [pc, #376]	@ (8006630 <DMA_SetConfig+0x274>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <DMA_SetConfig+0x10a>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a5c      	ldr	r2, [pc, #368]	@ (8006634 <DMA_SetConfig+0x278>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d101      	bne.n	80064ca <DMA_SetConfig+0x10e>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <DMA_SetConfig+0x110>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00d      	beq.n	80064ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80064d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80064ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a39      	ldr	r2, [pc, #228]	@ (80065d8 <DMA_SetConfig+0x21c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d04a      	beq.n	800658c <DMA_SetConfig+0x1d0>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a38      	ldr	r2, [pc, #224]	@ (80065dc <DMA_SetConfig+0x220>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d045      	beq.n	800658c <DMA_SetConfig+0x1d0>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a36      	ldr	r2, [pc, #216]	@ (80065e0 <DMA_SetConfig+0x224>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d040      	beq.n	800658c <DMA_SetConfig+0x1d0>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a35      	ldr	r2, [pc, #212]	@ (80065e4 <DMA_SetConfig+0x228>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d03b      	beq.n	800658c <DMA_SetConfig+0x1d0>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a33      	ldr	r2, [pc, #204]	@ (80065e8 <DMA_SetConfig+0x22c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d036      	beq.n	800658c <DMA_SetConfig+0x1d0>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a32      	ldr	r2, [pc, #200]	@ (80065ec <DMA_SetConfig+0x230>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d031      	beq.n	800658c <DMA_SetConfig+0x1d0>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a30      	ldr	r2, [pc, #192]	@ (80065f0 <DMA_SetConfig+0x234>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d02c      	beq.n	800658c <DMA_SetConfig+0x1d0>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2f      	ldr	r2, [pc, #188]	@ (80065f4 <DMA_SetConfig+0x238>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d027      	beq.n	800658c <DMA_SetConfig+0x1d0>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2d      	ldr	r2, [pc, #180]	@ (80065f8 <DMA_SetConfig+0x23c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d022      	beq.n	800658c <DMA_SetConfig+0x1d0>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2c      	ldr	r2, [pc, #176]	@ (80065fc <DMA_SetConfig+0x240>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d01d      	beq.n	800658c <DMA_SetConfig+0x1d0>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2a      	ldr	r2, [pc, #168]	@ (8006600 <DMA_SetConfig+0x244>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d018      	beq.n	800658c <DMA_SetConfig+0x1d0>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a29      	ldr	r2, [pc, #164]	@ (8006604 <DMA_SetConfig+0x248>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <DMA_SetConfig+0x1d0>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a27      	ldr	r2, [pc, #156]	@ (8006608 <DMA_SetConfig+0x24c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00e      	beq.n	800658c <DMA_SetConfig+0x1d0>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a26      	ldr	r2, [pc, #152]	@ (800660c <DMA_SetConfig+0x250>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d009      	beq.n	800658c <DMA_SetConfig+0x1d0>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a24      	ldr	r2, [pc, #144]	@ (8006610 <DMA_SetConfig+0x254>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <DMA_SetConfig+0x1d0>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a23      	ldr	r2, [pc, #140]	@ (8006614 <DMA_SetConfig+0x258>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d101      	bne.n	8006590 <DMA_SetConfig+0x1d4>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <DMA_SetConfig+0x1d6>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d059      	beq.n	800664a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	223f      	movs	r2, #63	@ 0x3f
 80065a0:	409a      	lsls	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80065b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b40      	cmp	r3, #64	@ 0x40
 80065c4:	d138      	bne.n	8006638 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065d6:	e0ae      	b.n	8006736 <DMA_SetConfig+0x37a>
 80065d8:	40020010 	.word	0x40020010
 80065dc:	40020028 	.word	0x40020028
 80065e0:	40020040 	.word	0x40020040
 80065e4:	40020058 	.word	0x40020058
 80065e8:	40020070 	.word	0x40020070
 80065ec:	40020088 	.word	0x40020088
 80065f0:	400200a0 	.word	0x400200a0
 80065f4:	400200b8 	.word	0x400200b8
 80065f8:	40020410 	.word	0x40020410
 80065fc:	40020428 	.word	0x40020428
 8006600:	40020440 	.word	0x40020440
 8006604:	40020458 	.word	0x40020458
 8006608:	40020470 	.word	0x40020470
 800660c:	40020488 	.word	0x40020488
 8006610:	400204a0 	.word	0x400204a0
 8006614:	400204b8 	.word	0x400204b8
 8006618:	58025408 	.word	0x58025408
 800661c:	5802541c 	.word	0x5802541c
 8006620:	58025430 	.word	0x58025430
 8006624:	58025444 	.word	0x58025444
 8006628:	58025458 	.word	0x58025458
 800662c:	5802546c 	.word	0x5802546c
 8006630:	58025480 	.word	0x58025480
 8006634:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	60da      	str	r2, [r3, #12]
}
 8006648:	e075      	b.n	8006736 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a3d      	ldr	r2, [pc, #244]	@ (8006744 <DMA_SetConfig+0x388>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d04a      	beq.n	80066ea <DMA_SetConfig+0x32e>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a3b      	ldr	r2, [pc, #236]	@ (8006748 <DMA_SetConfig+0x38c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d045      	beq.n	80066ea <DMA_SetConfig+0x32e>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a3a      	ldr	r2, [pc, #232]	@ (800674c <DMA_SetConfig+0x390>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d040      	beq.n	80066ea <DMA_SetConfig+0x32e>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a38      	ldr	r2, [pc, #224]	@ (8006750 <DMA_SetConfig+0x394>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d03b      	beq.n	80066ea <DMA_SetConfig+0x32e>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a37      	ldr	r2, [pc, #220]	@ (8006754 <DMA_SetConfig+0x398>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d036      	beq.n	80066ea <DMA_SetConfig+0x32e>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a35      	ldr	r2, [pc, #212]	@ (8006758 <DMA_SetConfig+0x39c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d031      	beq.n	80066ea <DMA_SetConfig+0x32e>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a34      	ldr	r2, [pc, #208]	@ (800675c <DMA_SetConfig+0x3a0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d02c      	beq.n	80066ea <DMA_SetConfig+0x32e>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a32      	ldr	r2, [pc, #200]	@ (8006760 <DMA_SetConfig+0x3a4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d027      	beq.n	80066ea <DMA_SetConfig+0x32e>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a31      	ldr	r2, [pc, #196]	@ (8006764 <DMA_SetConfig+0x3a8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d022      	beq.n	80066ea <DMA_SetConfig+0x32e>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2f      	ldr	r2, [pc, #188]	@ (8006768 <DMA_SetConfig+0x3ac>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01d      	beq.n	80066ea <DMA_SetConfig+0x32e>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2e      	ldr	r2, [pc, #184]	@ (800676c <DMA_SetConfig+0x3b0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d018      	beq.n	80066ea <DMA_SetConfig+0x32e>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006770 <DMA_SetConfig+0x3b4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <DMA_SetConfig+0x32e>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006774 <DMA_SetConfig+0x3b8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00e      	beq.n	80066ea <DMA_SetConfig+0x32e>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a29      	ldr	r2, [pc, #164]	@ (8006778 <DMA_SetConfig+0x3bc>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d009      	beq.n	80066ea <DMA_SetConfig+0x32e>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a28      	ldr	r2, [pc, #160]	@ (800677c <DMA_SetConfig+0x3c0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d004      	beq.n	80066ea <DMA_SetConfig+0x32e>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a26      	ldr	r2, [pc, #152]	@ (8006780 <DMA_SetConfig+0x3c4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d101      	bne.n	80066ee <DMA_SetConfig+0x332>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <DMA_SetConfig+0x334>
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d020      	beq.n	8006736 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	2201      	movs	r2, #1
 80066fe:	409a      	lsls	r2, r3
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b40      	cmp	r3, #64	@ 0x40
 8006712:	d108      	bne.n	8006726 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	60da      	str	r2, [r3, #12]
}
 8006724:	e007      	b.n	8006736 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	60da      	str	r2, [r3, #12]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	48022c08 	.word	0x48022c08
 8006748:	48022c1c 	.word	0x48022c1c
 800674c:	48022c30 	.word	0x48022c30
 8006750:	48022c44 	.word	0x48022c44
 8006754:	48022c58 	.word	0x48022c58
 8006758:	48022c6c 	.word	0x48022c6c
 800675c:	48022c80 	.word	0x48022c80
 8006760:	48022c94 	.word	0x48022c94
 8006764:	58025408 	.word	0x58025408
 8006768:	5802541c 	.word	0x5802541c
 800676c:	58025430 	.word	0x58025430
 8006770:	58025444 	.word	0x58025444
 8006774:	58025458 	.word	0x58025458
 8006778:	5802546c 	.word	0x5802546c
 800677c:	58025480 	.word	0x58025480
 8006780:	58025494 	.word	0x58025494

08006784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a42      	ldr	r2, [pc, #264]	@ (800689c <DMA_CalcBaseAndBitshift+0x118>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d04a      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a41      	ldr	r2, [pc, #260]	@ (80068a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d045      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a3f      	ldr	r2, [pc, #252]	@ (80068a4 <DMA_CalcBaseAndBitshift+0x120>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d040      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a3e      	ldr	r2, [pc, #248]	@ (80068a8 <DMA_CalcBaseAndBitshift+0x124>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d03b      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a3c      	ldr	r2, [pc, #240]	@ (80068ac <DMA_CalcBaseAndBitshift+0x128>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d036      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a3b      	ldr	r2, [pc, #236]	@ (80068b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d031      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a39      	ldr	r2, [pc, #228]	@ (80068b4 <DMA_CalcBaseAndBitshift+0x130>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d02c      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a38      	ldr	r2, [pc, #224]	@ (80068b8 <DMA_CalcBaseAndBitshift+0x134>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d027      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a36      	ldr	r2, [pc, #216]	@ (80068bc <DMA_CalcBaseAndBitshift+0x138>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d022      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a35      	ldr	r2, [pc, #212]	@ (80068c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d01d      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a33      	ldr	r2, [pc, #204]	@ (80068c4 <DMA_CalcBaseAndBitshift+0x140>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d018      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a32      	ldr	r2, [pc, #200]	@ (80068c8 <DMA_CalcBaseAndBitshift+0x144>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d013      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a30      	ldr	r2, [pc, #192]	@ (80068cc <DMA_CalcBaseAndBitshift+0x148>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00e      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a2f      	ldr	r2, [pc, #188]	@ (80068d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d009      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a2d      	ldr	r2, [pc, #180]	@ (80068d4 <DMA_CalcBaseAndBitshift+0x150>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <DMA_CalcBaseAndBitshift+0xa8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a2c      	ldr	r2, [pc, #176]	@ (80068d8 <DMA_CalcBaseAndBitshift+0x154>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d101      	bne.n	8006830 <DMA_CalcBaseAndBitshift+0xac>
 800682c:	2301      	movs	r3, #1
 800682e:	e000      	b.n	8006832 <DMA_CalcBaseAndBitshift+0xae>
 8006830:	2300      	movs	r3, #0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d024      	beq.n	8006880 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	3b10      	subs	r3, #16
 800683e:	4a27      	ldr	r2, [pc, #156]	@ (80068dc <DMA_CalcBaseAndBitshift+0x158>)
 8006840:	fba2 2303 	umull	r2, r3, r2, r3
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	4a24      	ldr	r2, [pc, #144]	@ (80068e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006850:	5cd3      	ldrb	r3, [r2, r3]
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b03      	cmp	r3, #3
 800685c:	d908      	bls.n	8006870 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	4b1f      	ldr	r3, [pc, #124]	@ (80068e4 <DMA_CalcBaseAndBitshift+0x160>)
 8006866:	4013      	ands	r3, r2
 8006868:	1d1a      	adds	r2, r3, #4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	659a      	str	r2, [r3, #88]	@ 0x58
 800686e:	e00d      	b.n	800688c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	4b1b      	ldr	r3, [pc, #108]	@ (80068e4 <DMA_CalcBaseAndBitshift+0x160>)
 8006878:	4013      	ands	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6593      	str	r3, [r2, #88]	@ 0x58
 800687e:	e005      	b.n	800688c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	40020010 	.word	0x40020010
 80068a0:	40020028 	.word	0x40020028
 80068a4:	40020040 	.word	0x40020040
 80068a8:	40020058 	.word	0x40020058
 80068ac:	40020070 	.word	0x40020070
 80068b0:	40020088 	.word	0x40020088
 80068b4:	400200a0 	.word	0x400200a0
 80068b8:	400200b8 	.word	0x400200b8
 80068bc:	40020410 	.word	0x40020410
 80068c0:	40020428 	.word	0x40020428
 80068c4:	40020440 	.word	0x40020440
 80068c8:	40020458 	.word	0x40020458
 80068cc:	40020470 	.word	0x40020470
 80068d0:	40020488 	.word	0x40020488
 80068d4:	400204a0 	.word	0x400204a0
 80068d8:	400204b8 	.word	0x400204b8
 80068dc:	aaaaaaab 	.word	0xaaaaaaab
 80068e0:	08013220 	.word	0x08013220
 80068e4:	fffffc00 	.word	0xfffffc00

080068e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d120      	bne.n	800693e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	2b03      	cmp	r3, #3
 8006902:	d858      	bhi.n	80069b6 <DMA_CheckFifoParam+0xce>
 8006904:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <DMA_CheckFifoParam+0x24>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	0800691d 	.word	0x0800691d
 8006910:	0800692f 	.word	0x0800692f
 8006914:	0800691d 	.word	0x0800691d
 8006918:	080069b7 	.word	0x080069b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006920:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d048      	beq.n	80069ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800692c:	e045      	b.n	80069ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006932:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006936:	d142      	bne.n	80069be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800693c:	e03f      	b.n	80069be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006946:	d123      	bne.n	8006990 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694c:	2b03      	cmp	r3, #3
 800694e:	d838      	bhi.n	80069c2 <DMA_CheckFifoParam+0xda>
 8006950:	a201      	add	r2, pc, #4	@ (adr r2, 8006958 <DMA_CheckFifoParam+0x70>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	08006969 	.word	0x08006969
 800695c:	0800696f 	.word	0x0800696f
 8006960:	08006969 	.word	0x08006969
 8006964:	08006981 	.word	0x08006981
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
        break;
 800696c:	e030      	b.n	80069d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d025      	beq.n	80069c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800697e:	e022      	b.n	80069c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006988:	d11f      	bne.n	80069ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800698e:	e01c      	b.n	80069ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	2b02      	cmp	r3, #2
 8006996:	d902      	bls.n	800699e <DMA_CheckFifoParam+0xb6>
 8006998:	2b03      	cmp	r3, #3
 800699a:	d003      	beq.n	80069a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800699c:	e018      	b.n	80069d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
        break;
 80069a2:	e015      	b.n	80069d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00e      	beq.n	80069ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
    break;
 80069b4:	e00b      	b.n	80069ce <DMA_CheckFifoParam+0xe6>
        break;
 80069b6:	bf00      	nop
 80069b8:	e00a      	b.n	80069d0 <DMA_CheckFifoParam+0xe8>
        break;
 80069ba:	bf00      	nop
 80069bc:	e008      	b.n	80069d0 <DMA_CheckFifoParam+0xe8>
        break;
 80069be:	bf00      	nop
 80069c0:	e006      	b.n	80069d0 <DMA_CheckFifoParam+0xe8>
        break;
 80069c2:	bf00      	nop
 80069c4:	e004      	b.n	80069d0 <DMA_CheckFifoParam+0xe8>
        break;
 80069c6:	bf00      	nop
 80069c8:	e002      	b.n	80069d0 <DMA_CheckFifoParam+0xe8>
        break;
 80069ca:	bf00      	nop
 80069cc:	e000      	b.n	80069d0 <DMA_CheckFifoParam+0xe8>
    break;
 80069ce:	bf00      	nop
    }
  }

  return status;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop

080069e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a38      	ldr	r2, [pc, #224]	@ (8006ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d022      	beq.n	8006a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a36      	ldr	r2, [pc, #216]	@ (8006ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d01d      	beq.n	8006a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a35      	ldr	r2, [pc, #212]	@ (8006adc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d018      	beq.n	8006a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a33      	ldr	r2, [pc, #204]	@ (8006ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d013      	beq.n	8006a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a32      	ldr	r2, [pc, #200]	@ (8006ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00e      	beq.n	8006a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a30      	ldr	r2, [pc, #192]	@ (8006ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d009      	beq.n	8006a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d004      	beq.n	8006a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2d      	ldr	r2, [pc, #180]	@ (8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d101      	bne.n	8006a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a42:	2300      	movs	r3, #0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01a      	beq.n	8006a7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	3b08      	subs	r3, #8
 8006a50:	4a28      	ldr	r2, [pc, #160]	@ (8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	091b      	lsrs	r3, r3, #4
 8006a58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4b26      	ldr	r3, [pc, #152]	@ (8006af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	461a      	mov	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a24      	ldr	r2, [pc, #144]	@ (8006afc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	2201      	movs	r2, #1
 8006a76:	409a      	lsls	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a7c:	e024      	b.n	8006ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	3b10      	subs	r3, #16
 8006a86:	4a1e      	ldr	r2, [pc, #120]	@ (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006a88:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8c:	091b      	lsrs	r3, r3, #4
 8006a8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4a1c      	ldr	r2, [pc, #112]	@ (8006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d806      	bhi.n	8006aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d902      	bls.n	8006aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4b18      	ldr	r3, [pc, #96]	@ (8006b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a16      	ldr	r2, [pc, #88]	@ (8006b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006ab8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	58025408 	.word	0x58025408
 8006ad8:	5802541c 	.word	0x5802541c
 8006adc:	58025430 	.word	0x58025430
 8006ae0:	58025444 	.word	0x58025444
 8006ae4:	58025458 	.word	0x58025458
 8006ae8:	5802546c 	.word	0x5802546c
 8006aec:	58025480 	.word	0x58025480
 8006af0:	58025494 	.word	0x58025494
 8006af4:	cccccccd 	.word	0xcccccccd
 8006af8:	16009600 	.word	0x16009600
 8006afc:	58025880 	.word	0x58025880
 8006b00:	aaaaaaab 	.word	0xaaaaaaab
 8006b04:	400204b8 	.word	0x400204b8
 8006b08:	4002040f 	.word	0x4002040f
 8006b0c:	10008200 	.word	0x10008200
 8006b10:	40020880 	.word	0x40020880

08006b14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d04a      	beq.n	8006bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d847      	bhi.n	8006bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a25      	ldr	r2, [pc, #148]	@ (8006bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a24      	ldr	r2, [pc, #144]	@ (8006bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01d      	beq.n	8006b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a22      	ldr	r2, [pc, #136]	@ (8006bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a21      	ldr	r2, [pc, #132]	@ (8006bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1e      	ldr	r2, [pc, #120]	@ (8006be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1c      	ldr	r2, [pc, #112]	@ (8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4b17      	ldr	r3, [pc, #92]	@ (8006bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	461a      	mov	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a15      	ldr	r2, [pc, #84]	@ (8006bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b9c:	671a      	str	r2, [r3, #112]	@ 0x70
 8006b9e:	e009      	b.n	8006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4b14      	ldr	r3, [pc, #80]	@ (8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	461a      	mov	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a11      	ldr	r2, [pc, #68]	@ (8006bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006bb2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	2201      	movs	r2, #1
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	58025408 	.word	0x58025408
 8006bd0:	5802541c 	.word	0x5802541c
 8006bd4:	58025430 	.word	0x58025430
 8006bd8:	58025444 	.word	0x58025444
 8006bdc:	58025458 	.word	0x58025458
 8006be0:	5802546c 	.word	0x5802546c
 8006be4:	58025480 	.word	0x58025480
 8006be8:	58025494 	.word	0x58025494
 8006bec:	1600963f 	.word	0x1600963f
 8006bf0:	58025940 	.word	0x58025940
 8006bf4:	1000823f 	.word	0x1000823f
 8006bf8:	40020940 	.word	0x40020940

08006bfc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b098      	sub	sp, #96	@ 0x60
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006c04:	4a84      	ldr	r2, [pc, #528]	@ (8006e18 <HAL_FDCAN_Init+0x21c>)
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	224c      	movs	r2, #76	@ 0x4c
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f00c f948 	bl	8012ea4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e1c6      	b.n	8006fac <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a7e      	ldr	r2, [pc, #504]	@ (8006e1c <HAL_FDCAN_Init+0x220>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d106      	bne.n	8006c36 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006c30:	461a      	mov	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fb faf6 	bl	800223c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0210 	bic.w	r2, r2, #16
 8006c5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c60:	f7fc ff36 	bl	8003ad0 <HAL_GetTick>
 8006c64:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c66:	e014      	b.n	8006c92 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c68:	f7fc ff32 	bl	8003ad0 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b0a      	cmp	r3, #10
 8006c74:	d90d      	bls.n	8006c92 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c7c:	f043 0201 	orr.w	r2, r3, #1
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2203      	movs	r2, #3
 8006c8a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e18c      	b.n	8006fac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d0e3      	beq.n	8006c68 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cb0:	f7fc ff0e 	bl	8003ad0 <HAL_GetTick>
 8006cb4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006cb6:	e014      	b.n	8006ce2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006cb8:	f7fc ff0a 	bl	8003ad0 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b0a      	cmp	r3, #10
 8006cc4:	d90d      	bls.n	8006ce2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ccc:	f043 0201 	orr.w	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2203      	movs	r2, #3
 8006cda:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e164      	b.n	8006fac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0e3      	beq.n	8006cb8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0202 	orr.w	r2, r2, #2
 8006cfe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	7c1b      	ldrb	r3, [r3, #16]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d108      	bne.n	8006d1a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d16:	619a      	str	r2, [r3, #24]
 8006d18:	e007      	b.n	8006d2a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d28:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	7c5b      	ldrb	r3, [r3, #17]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d108      	bne.n	8006d44 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d40:	619a      	str	r2, [r3, #24]
 8006d42:	e007      	b.n	8006d54 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d52:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7c9b      	ldrb	r3, [r3, #18]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d108      	bne.n	8006d6e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d6a:	619a      	str	r2, [r3, #24]
 8006d6c:	e007      	b.n	8006d7e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006da2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691a      	ldr	r2, [r3, #16]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0210 	bic.w	r2, r2, #16
 8006db2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d108      	bne.n	8006dce <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0204 	orr.w	r2, r2, #4
 8006dca:	619a      	str	r2, [r3, #24]
 8006dcc:	e030      	b.n	8006e30 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02c      	beq.n	8006e30 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d020      	beq.n	8006e20 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699a      	ldr	r2, [r3, #24]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006dec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0210 	orr.w	r2, r2, #16
 8006dfc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d114      	bne.n	8006e30 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0220 	orr.w	r2, r2, #32
 8006e14:	619a      	str	r2, [r3, #24]
 8006e16:	e00b      	b.n	8006e30 <HAL_FDCAN_Init+0x234>
 8006e18:	0801317c 	.word	0x0801317c
 8006e1c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699a      	ldr	r2, [r3, #24]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0220 	orr.w	r2, r2, #32
 8006e2e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e40:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e48:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e58:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e5a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e64:	d115      	bne.n	8006e92 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	3b01      	subs	r3, #1
 8006e72:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e74:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006e7e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e86:	3b01      	subs	r3, #1
 8006e88:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006e8e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e90:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb8:	4413      	add	r3, r2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d011      	beq.n	8006ee2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006ec6:	f023 0107 	bic.w	r1, r3, #7
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	3360      	adds	r3, #96	@ 0x60
 8006ed2:	443b      	add	r3, r7
 8006ed4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d011      	beq.n	8006f0e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ef2:	f023 0107 	bic.w	r1, r3, #7
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	3360      	adds	r3, #96	@ 0x60
 8006efe:	443b      	add	r3, r7
 8006f00:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d012      	beq.n	8006f3c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f1e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	3360      	adds	r3, #96	@ 0x60
 8006f2a:	443b      	add	r3, r7
 8006f2c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006f30:	011a      	lsls	r2, r3, #4
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d012      	beq.n	8006f6a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f4c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	3360      	adds	r3, #96	@ 0x60
 8006f58:	443b      	add	r3, r7
 8006f5a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006f5e:	021a      	lsls	r2, r3, #8
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a11      	ldr	r2, [pc, #68]	@ (8006fb4 <HAL_FDCAN_Init+0x3b8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d107      	bne.n	8006f84 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f022 0203 	bic.w	r2, r2, #3
 8006f82:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f80b 	bl	8006fb8 <FDCAN_CalcultateRamBlockAddresses>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006fa8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3760      	adds	r7, #96	@ 0x60
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	4000a000 	.word	0x4000a000

08006fb8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006fce:	4ba7      	ldr	r3, [pc, #668]	@ (800726c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	0091      	lsls	r1, r2, #2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fe8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff0:	041a      	lsls	r2, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	4413      	add	r3, r2
 8007004:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800700e:	4b97      	ldr	r3, [pc, #604]	@ (800726c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007010:	4013      	ands	r3, r2
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	0091      	lsls	r1, r2, #2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	430b      	orrs	r3, r1
 800701c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007028:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007030:	041a      	lsls	r2, r3, #16
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	4413      	add	r3, r2
 8007046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007050:	4b86      	ldr	r3, [pc, #536]	@ (800726c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007052:	4013      	ands	r3, r2
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	0091      	lsls	r1, r2, #2
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	430b      	orrs	r3, r1
 800705e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800706a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007072:	041a      	lsls	r2, r3, #16
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007086:	fb02 f303 	mul.w	r3, r2, r3
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	4413      	add	r3, r2
 800708e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007098:	4b74      	ldr	r3, [pc, #464]	@ (800726c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800709a:	4013      	ands	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	0091      	lsls	r1, r2, #2
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	430b      	orrs	r3, r1
 80070a6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070b2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ba:	041a      	lsls	r2, r3, #16
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	4413      	add	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80070e0:	4b62      	ldr	r3, [pc, #392]	@ (800726c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070e2:	4013      	ands	r3, r2
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	0091      	lsls	r1, r2, #2
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	430b      	orrs	r3, r1
 80070ee:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	4413      	add	r3, r2
 8007102:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800710c:	4b57      	ldr	r3, [pc, #348]	@ (800726c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800710e:	4013      	ands	r3, r2
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	0091      	lsls	r1, r2, #2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	430b      	orrs	r3, r1
 800711a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007126:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712e:	041a      	lsls	r2, r3, #16
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	4413      	add	r3, r2
 8007144:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800714e:	4b47      	ldr	r3, [pc, #284]	@ (800726c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007150:	4013      	ands	r3, r2
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	0091      	lsls	r1, r2, #2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6812      	ldr	r2, [r2, #0]
 800715a:	430b      	orrs	r3, r1
 800715c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007168:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007170:	041a      	lsls	r2, r3, #16
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007184:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800718c:	061a      	lsls	r2, r3, #24
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800719c:	4b34      	ldr	r3, [pc, #208]	@ (8007270 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800719e:	4413      	add	r3, r2
 80071a0:	009a      	lsls	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	441a      	add	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	441a      	add	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80071d2:	fb01 f303 	mul.w	r3, r1, r3
 80071d6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80071d8:	441a      	add	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80071ea:	fb01 f303 	mul.w	r3, r1, r3
 80071ee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80071f0:	441a      	add	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007208:	441a      	add	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007232:	fb01 f303 	mul.w	r3, r1, r3
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800724e:	fb01 f303 	mul.w	r3, r1, r3
 8007252:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007254:	441a      	add	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007262:	4a04      	ldr	r2, [pc, #16]	@ (8007274 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d915      	bls.n	8007294 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007268:	e006      	b.n	8007278 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800726a:	bf00      	nop
 800726c:	ffff0003 	.word	0xffff0003
 8007270:	10002b00 	.word	0x10002b00
 8007274:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800727e:	f043 0220 	orr.w	r2, r3, #32
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2203      	movs	r2, #3
 800728c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e010      	b.n	80072b6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	e005      	b.n	80072a8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3304      	adds	r3, #4
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d3f3      	bcc.n	800729c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop

080072c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b089      	sub	sp, #36	@ 0x24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80072d2:	4b89      	ldr	r3, [pc, #548]	@ (80074f8 <HAL_GPIO_Init+0x234>)
 80072d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072d6:	e194      	b.n	8007602 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	2101      	movs	r1, #1
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	fa01 f303 	lsl.w	r3, r1, r3
 80072e4:	4013      	ands	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8186 	beq.w	80075fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d005      	beq.n	8007308 <HAL_GPIO_Init+0x44>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d130      	bne.n	800736a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	2203      	movs	r2, #3
 8007314:	fa02 f303 	lsl.w	r3, r2, r3
 8007318:	43db      	mvns	r3, r3
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	4013      	ands	r3, r2
 800731e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	4313      	orrs	r3, r2
 8007330:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800733e:	2201      	movs	r2, #1
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	fa02 f303 	lsl.w	r3, r2, r3
 8007346:	43db      	mvns	r3, r3
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	4013      	ands	r3, r2
 800734c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	091b      	lsrs	r3, r3, #4
 8007354:	f003 0201 	and.w	r2, r3, #1
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	fa02 f303 	lsl.w	r3, r2, r3
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	4313      	orrs	r3, r2
 8007362:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f003 0303 	and.w	r3, r3, #3
 8007372:	2b03      	cmp	r3, #3
 8007374:	d017      	beq.n	80073a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	2203      	movs	r2, #3
 8007382:	fa02 f303 	lsl.w	r3, r2, r3
 8007386:	43db      	mvns	r3, r3
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	4013      	ands	r3, r2
 800738c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	fa02 f303 	lsl.w	r3, r2, r3
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	4313      	orrs	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d123      	bne.n	80073fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	08da      	lsrs	r2, r3, #3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3208      	adds	r2, #8
 80073ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	220f      	movs	r2, #15
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	43db      	mvns	r3, r3
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	4013      	ands	r3, r2
 80073d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	691a      	ldr	r2, [r3, #16]
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	fa02 f303 	lsl.w	r3, r2, r3
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	08da      	lsrs	r2, r3, #3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3208      	adds	r2, #8
 80073f4:	69b9      	ldr	r1, [r7, #24]
 80073f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	2203      	movs	r2, #3
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	43db      	mvns	r3, r3
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	4013      	ands	r3, r2
 8007410:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 0203 	and.w	r2, r3, #3
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	fa02 f303 	lsl.w	r3, r2, r3
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	4313      	orrs	r3, r2
 8007426:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 80e0 	beq.w	80075fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800743c:	4b2f      	ldr	r3, [pc, #188]	@ (80074fc <HAL_GPIO_Init+0x238>)
 800743e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007442:	4a2e      	ldr	r2, [pc, #184]	@ (80074fc <HAL_GPIO_Init+0x238>)
 8007444:	f043 0302 	orr.w	r3, r3, #2
 8007448:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800744c:	4b2b      	ldr	r3, [pc, #172]	@ (80074fc <HAL_GPIO_Init+0x238>)
 800744e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800745a:	4a29      	ldr	r2, [pc, #164]	@ (8007500 <HAL_GPIO_Init+0x23c>)
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	089b      	lsrs	r3, r3, #2
 8007460:	3302      	adds	r3, #2
 8007462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	220f      	movs	r2, #15
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	43db      	mvns	r3, r3
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	4013      	ands	r3, r2
 800747c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a20      	ldr	r2, [pc, #128]	@ (8007504 <HAL_GPIO_Init+0x240>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d052      	beq.n	800752c <HAL_GPIO_Init+0x268>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a1f      	ldr	r2, [pc, #124]	@ (8007508 <HAL_GPIO_Init+0x244>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d031      	beq.n	80074f2 <HAL_GPIO_Init+0x22e>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a1e      	ldr	r2, [pc, #120]	@ (800750c <HAL_GPIO_Init+0x248>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d02b      	beq.n	80074ee <HAL_GPIO_Init+0x22a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a1d      	ldr	r2, [pc, #116]	@ (8007510 <HAL_GPIO_Init+0x24c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d025      	beq.n	80074ea <HAL_GPIO_Init+0x226>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007514 <HAL_GPIO_Init+0x250>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d01f      	beq.n	80074e6 <HAL_GPIO_Init+0x222>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007518 <HAL_GPIO_Init+0x254>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d019      	beq.n	80074e2 <HAL_GPIO_Init+0x21e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1a      	ldr	r2, [pc, #104]	@ (800751c <HAL_GPIO_Init+0x258>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <HAL_GPIO_Init+0x21a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a19      	ldr	r2, [pc, #100]	@ (8007520 <HAL_GPIO_Init+0x25c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00d      	beq.n	80074da <HAL_GPIO_Init+0x216>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a18      	ldr	r2, [pc, #96]	@ (8007524 <HAL_GPIO_Init+0x260>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d007      	beq.n	80074d6 <HAL_GPIO_Init+0x212>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a17      	ldr	r2, [pc, #92]	@ (8007528 <HAL_GPIO_Init+0x264>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d101      	bne.n	80074d2 <HAL_GPIO_Init+0x20e>
 80074ce:	2309      	movs	r3, #9
 80074d0:	e02d      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074d2:	230a      	movs	r3, #10
 80074d4:	e02b      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074d6:	2308      	movs	r3, #8
 80074d8:	e029      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074da:	2307      	movs	r3, #7
 80074dc:	e027      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074de:	2306      	movs	r3, #6
 80074e0:	e025      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074e2:	2305      	movs	r3, #5
 80074e4:	e023      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074e6:	2304      	movs	r3, #4
 80074e8:	e021      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074ea:	2303      	movs	r3, #3
 80074ec:	e01f      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e01d      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e01b      	b.n	800752e <HAL_GPIO_Init+0x26a>
 80074f6:	bf00      	nop
 80074f8:	58000080 	.word	0x58000080
 80074fc:	58024400 	.word	0x58024400
 8007500:	58000400 	.word	0x58000400
 8007504:	58020000 	.word	0x58020000
 8007508:	58020400 	.word	0x58020400
 800750c:	58020800 	.word	0x58020800
 8007510:	58020c00 	.word	0x58020c00
 8007514:	58021000 	.word	0x58021000
 8007518:	58021400 	.word	0x58021400
 800751c:	58021800 	.word	0x58021800
 8007520:	58021c00 	.word	0x58021c00
 8007524:	58022000 	.word	0x58022000
 8007528:	58022400 	.word	0x58022400
 800752c:	2300      	movs	r3, #0
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	f002 0203 	and.w	r2, r2, #3
 8007534:	0092      	lsls	r2, r2, #2
 8007536:	4093      	lsls	r3, r2
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	4313      	orrs	r3, r2
 800753c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800753e:	4938      	ldr	r1, [pc, #224]	@ (8007620 <HAL_GPIO_Init+0x35c>)
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	089b      	lsrs	r3, r3, #2
 8007544:	3302      	adds	r3, #2
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800754c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	43db      	mvns	r3, r3
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	4013      	ands	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800757a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	43db      	mvns	r3, r3
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	4013      	ands	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80075a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	43db      	mvns	r3, r3
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	4013      	ands	r3, r2
 80075b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	43db      	mvns	r3, r3
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	4013      	ands	r3, r2
 80075e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	3301      	adds	r3, #1
 8007600:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	f47f ae63 	bne.w	80072d8 <HAL_GPIO_Init+0x14>
  }
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	3724      	adds	r7, #36	@ 0x24
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	58000400 	.word	0x58000400

08007624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	807b      	strh	r3, [r7, #2]
 8007630:	4613      	mov	r3, r2
 8007632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007634:	787b      	ldrb	r3, [r7, #1]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800763a:	887a      	ldrh	r2, [r7, #2]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007640:	e003      	b.n	800764a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007642:	887b      	ldrh	r3, [r7, #2]
 8007644:	041a      	lsls	r2, r3, #16
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	619a      	str	r2, [r3, #24]
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e08b      	b.n	8007782 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7fa ff48 	bl	8002514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2224      	movs	r2, #36	@ 0x24
 8007688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80076a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d107      	bne.n	80076d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	e006      	b.n	80076e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80076de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d108      	bne.n	80076fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076f6:	605a      	str	r2, [r3, #4]
 80076f8:	e007      	b.n	800770a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007708:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6859      	ldr	r1, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	4b1d      	ldr	r3, [pc, #116]	@ (800778c <HAL_I2C_Init+0x134>)
 8007716:	430b      	orrs	r3, r1
 8007718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	69d9      	ldr	r1, [r3, #28]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a1a      	ldr	r2, [r3, #32]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0201 	orr.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	02008000 	.word	0x02008000

08007790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d138      	bne.n	8007818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e032      	b.n	800781a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2224      	movs	r2, #36	@ 0x24
 80077c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80077e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6819      	ldr	r1, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0201 	orr.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	e000      	b.n	800781a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007818:	2302      	movs	r3, #2
  }
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007826:	b480      	push	{r7}
 8007828:	b085      	sub	sp, #20
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b20      	cmp	r3, #32
 800783a:	d139      	bne.n	80078b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007846:	2302      	movs	r3, #2
 8007848:	e033      	b.n	80078b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2224      	movs	r2, #36	@ 0x24
 8007856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0201 	bic.w	r2, r2, #1
 8007868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	e000      	b.n	80078b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078b0:	2302      	movs	r3, #2
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80078c8:	4b19      	ldr	r3, [pc, #100]	@ (8007930 <HAL_PWREx_ConfigSupply+0x70>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d00a      	beq.n	80078ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80078d4:	4b16      	ldr	r3, [pc, #88]	@ (8007930 <HAL_PWREx_ConfigSupply+0x70>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d001      	beq.n	80078e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e01f      	b.n	8007926 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e01d      	b.n	8007926 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80078ea:	4b11      	ldr	r3, [pc, #68]	@ (8007930 <HAL_PWREx_ConfigSupply+0x70>)
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f023 0207 	bic.w	r2, r3, #7
 80078f2:	490f      	ldr	r1, [pc, #60]	@ (8007930 <HAL_PWREx_ConfigSupply+0x70>)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078fa:	f7fc f8e9 	bl	8003ad0 <HAL_GetTick>
 80078fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007900:	e009      	b.n	8007916 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007902:	f7fc f8e5 	bl	8003ad0 <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007910:	d901      	bls.n	8007916 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e007      	b.n	8007926 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007916:	4b06      	ldr	r3, [pc, #24]	@ (8007930 <HAL_PWREx_ConfigSupply+0x70>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800791e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007922:	d1ee      	bne.n	8007902 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	58024800 	.word	0x58024800

08007934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08c      	sub	sp, #48	@ 0x30
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	f000 bc1f 	b.w	8008186 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80b3 	beq.w	8007abc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007956:	4b95      	ldr	r3, [pc, #596]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800795e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007960:	4b92      	ldr	r3, [pc, #584]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007964:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007968:	2b10      	cmp	r3, #16
 800796a:	d007      	beq.n	800797c <HAL_RCC_OscConfig+0x48>
 800796c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796e:	2b18      	cmp	r3, #24
 8007970:	d112      	bne.n	8007998 <HAL_RCC_OscConfig+0x64>
 8007972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d10d      	bne.n	8007998 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800797c:	4b8b      	ldr	r3, [pc, #556]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 8098 	beq.w	8007aba <HAL_RCC_OscConfig+0x186>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f040 8093 	bne.w	8007aba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e3f6      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a0:	d106      	bne.n	80079b0 <HAL_RCC_OscConfig+0x7c>
 80079a2:	4b82      	ldr	r3, [pc, #520]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a81      	ldr	r2, [pc, #516]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	e058      	b.n	8007a62 <HAL_RCC_OscConfig+0x12e>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d112      	bne.n	80079de <HAL_RCC_OscConfig+0xaa>
 80079b8:	4b7c      	ldr	r3, [pc, #496]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a7b      	ldr	r2, [pc, #492]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	4b79      	ldr	r3, [pc, #484]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a78      	ldr	r2, [pc, #480]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079ca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	4b76      	ldr	r3, [pc, #472]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a75      	ldr	r2, [pc, #468]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	e041      	b.n	8007a62 <HAL_RCC_OscConfig+0x12e>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079e6:	d112      	bne.n	8007a0e <HAL_RCC_OscConfig+0xda>
 80079e8:	4b70      	ldr	r3, [pc, #448]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a6f      	ldr	r2, [pc, #444]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	4b6d      	ldr	r3, [pc, #436]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a6c      	ldr	r2, [pc, #432]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 80079fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	4b6a      	ldr	r3, [pc, #424]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a69      	ldr	r2, [pc, #420]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	e029      	b.n	8007a62 <HAL_RCC_OscConfig+0x12e>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007a16:	d112      	bne.n	8007a3e <HAL_RCC_OscConfig+0x10a>
 8007a18:	4b64      	ldr	r3, [pc, #400]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a63      	ldr	r2, [pc, #396]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	4b61      	ldr	r3, [pc, #388]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a60      	ldr	r2, [pc, #384]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	4b5e      	ldr	r3, [pc, #376]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a5d      	ldr	r2, [pc, #372]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	e011      	b.n	8007a62 <HAL_RCC_OscConfig+0x12e>
 8007a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a5a      	ldr	r2, [pc, #360]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	4b58      	ldr	r3, [pc, #352]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a57      	ldr	r2, [pc, #348]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	4b55      	ldr	r3, [pc, #340]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a54      	ldr	r2, [pc, #336]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007a60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d013      	beq.n	8007a92 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6a:	f7fc f831 	bl	8003ad0 <HAL_GetTick>
 8007a6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a72:	f7fc f82d 	bl	8003ad0 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b64      	cmp	r3, #100	@ 0x64
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e380      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a84:	4b49      	ldr	r3, [pc, #292]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0f0      	beq.n	8007a72 <HAL_RCC_OscConfig+0x13e>
 8007a90:	e014      	b.n	8007abc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a92:	f7fc f81d 	bl	8003ad0 <HAL_GetTick>
 8007a96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a98:	e008      	b.n	8007aac <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a9a:	f7fc f819 	bl	8003ad0 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b64      	cmp	r3, #100	@ 0x64
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e36c      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007aac:	4b3f      	ldr	r3, [pc, #252]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1f0      	bne.n	8007a9a <HAL_RCC_OscConfig+0x166>
 8007ab8:	e000      	b.n	8007abc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 808c 	beq.w	8007be2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007aca:	4b38      	ldr	r3, [pc, #224]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ad2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ad4:	4b35      	ldr	r3, [pc, #212]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <HAL_RCC_OscConfig+0x1bc>
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	2b18      	cmp	r3, #24
 8007ae4:	d137      	bne.n	8007b56 <HAL_RCC_OscConfig+0x222>
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d132      	bne.n	8007b56 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007af0:	4b2e      	ldr	r3, [pc, #184]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_RCC_OscConfig+0x1d4>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e33e      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b08:	4b28      	ldr	r3, [pc, #160]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f023 0219 	bic.w	r2, r3, #25
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	4925      	ldr	r1, [pc, #148]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1a:	f7fb ffd9 	bl	8003ad0 <HAL_GetTick>
 8007b1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b20:	e008      	b.n	8007b34 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b22:	f7fb ffd5 	bl	8003ad0 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d901      	bls.n	8007b34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e328      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b34:	4b1d      	ldr	r3, [pc, #116]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0f0      	beq.n	8007b22 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b40:	4b1a      	ldr	r3, [pc, #104]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	061b      	lsls	r3, r3, #24
 8007b4e:	4917      	ldr	r1, [pc, #92]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b54:	e045      	b.n	8007be2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d028      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b5e:	4b13      	ldr	r3, [pc, #76]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f023 0219 	bic.w	r2, r3, #25
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	4910      	ldr	r1, [pc, #64]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b70:	f7fb ffae 	bl	8003ad0 <HAL_GetTick>
 8007b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b78:	f7fb ffaa 	bl	8003ad0 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e2fd      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b8a:	4b08      	ldr	r3, [pc, #32]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0f0      	beq.n	8007b78 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b96:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	061b      	lsls	r3, r3, #24
 8007ba4:	4901      	ldr	r1, [pc, #4]	@ (8007bac <HAL_RCC_OscConfig+0x278>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	604b      	str	r3, [r1, #4]
 8007baa:	e01a      	b.n	8007be2 <HAL_RCC_OscConfig+0x2ae>
 8007bac:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bb0:	4b97      	ldr	r3, [pc, #604]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a96      	ldr	r2, [pc, #600]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bbc:	f7fb ff88 	bl	8003ad0 <HAL_GetTick>
 8007bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bc4:	f7fb ff84 	bl	8003ad0 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e2d7      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bd6:	4b8e      	ldr	r3, [pc, #568]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1f0      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d06a      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bee:	4b88      	ldr	r3, [pc, #544]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bf6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bf8:	4b85      	ldr	r3, [pc, #532]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d007      	beq.n	8007c14 <HAL_RCC_OscConfig+0x2e0>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2b18      	cmp	r3, #24
 8007c08:	d11b      	bne.n	8007c42 <HAL_RCC_OscConfig+0x30e>
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d116      	bne.n	8007c42 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c14:	4b7e      	ldr	r3, [pc, #504]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <HAL_RCC_OscConfig+0x2f8>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	2b80      	cmp	r3, #128	@ 0x80
 8007c26:	d001      	beq.n	8007c2c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e2ac      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c2c:	4b78      	ldr	r3, [pc, #480]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	061b      	lsls	r3, r3, #24
 8007c3a:	4975      	ldr	r1, [pc, #468]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c40:	e040      	b.n	8007cc4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d023      	beq.n	8007c92 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c4a:	4b71      	ldr	r3, [pc, #452]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a70      	ldr	r2, [pc, #448]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c56:	f7fb ff3b 	bl	8003ad0 <HAL_GetTick>
 8007c5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c5c:	e008      	b.n	8007c70 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c5e:	f7fb ff37 	bl	8003ad0 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e28a      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c70:	4b67      	ldr	r3, [pc, #412]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f0      	beq.n	8007c5e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c7c:	4b64      	ldr	r3, [pc, #400]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	061b      	lsls	r3, r3, #24
 8007c8a:	4961      	ldr	r1, [pc, #388]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60cb      	str	r3, [r1, #12]
 8007c90:	e018      	b.n	8007cc4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007c92:	4b5f      	ldr	r3, [pc, #380]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a5e      	ldr	r2, [pc, #376]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9e:	f7fb ff17 	bl	8003ad0 <HAL_GetTick>
 8007ca2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ca4:	e008      	b.n	8007cb8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ca6:	f7fb ff13 	bl	8003ad0 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e266      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cb8:	4b55      	ldr	r3, [pc, #340]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1f0      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d036      	beq.n	8007d3e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d019      	beq.n	8007d0c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cdc:	4a4c      	ldr	r2, [pc, #304]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007cde:	f043 0301 	orr.w	r3, r3, #1
 8007ce2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce4:	f7fb fef4 	bl	8003ad0 <HAL_GetTick>
 8007ce8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cec:	f7fb fef0 	bl	8003ad0 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e243      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007cfe:	4b44      	ldr	r3, [pc, #272]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0f0      	beq.n	8007cec <HAL_RCC_OscConfig+0x3b8>
 8007d0a:	e018      	b.n	8007d3e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d0c:	4b40      	ldr	r3, [pc, #256]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d10:	4a3f      	ldr	r2, [pc, #252]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d18:	f7fb feda 	bl	8003ad0 <HAL_GetTick>
 8007d1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d20:	f7fb fed6 	bl	8003ad0 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e229      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d32:	4b37      	ldr	r3, [pc, #220]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1f0      	bne.n	8007d20 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d036      	beq.n	8007db8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d019      	beq.n	8007d86 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d52:	4b2f      	ldr	r3, [pc, #188]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a2e      	ldr	r2, [pc, #184]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d5e:	f7fb feb7 	bl	8003ad0 <HAL_GetTick>
 8007d62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d64:	e008      	b.n	8007d78 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d66:	f7fb feb3 	bl	8003ad0 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d901      	bls.n	8007d78 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e206      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d78:	4b25      	ldr	r3, [pc, #148]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0f0      	beq.n	8007d66 <HAL_RCC_OscConfig+0x432>
 8007d84:	e018      	b.n	8007db8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d86:	4b22      	ldr	r3, [pc, #136]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a21      	ldr	r2, [pc, #132]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007d8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d92:	f7fb fe9d 	bl	8003ad0 <HAL_GetTick>
 8007d96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d98:	e008      	b.n	8007dac <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d9a:	f7fb fe99 	bl	8003ad0 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e1ec      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dac:	4b18      	ldr	r3, [pc, #96]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f0      	bne.n	8007d9a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80af 	beq.w	8007f24 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007dc6:	4b13      	ldr	r3, [pc, #76]	@ (8007e14 <HAL_RCC_OscConfig+0x4e0>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a12      	ldr	r2, [pc, #72]	@ (8007e14 <HAL_RCC_OscConfig+0x4e0>)
 8007dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dd2:	f7fb fe7d 	bl	8003ad0 <HAL_GetTick>
 8007dd6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dd8:	e008      	b.n	8007dec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dda:	f7fb fe79 	bl	8003ad0 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	2b64      	cmp	r3, #100	@ 0x64
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e1cc      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dec:	4b09      	ldr	r3, [pc, #36]	@ (8007e14 <HAL_RCC_OscConfig+0x4e0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0f0      	beq.n	8007dda <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d10b      	bne.n	8007e18 <HAL_RCC_OscConfig+0x4e4>
 8007e00:	4b03      	ldr	r3, [pc, #12]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e04:	4a02      	ldr	r2, [pc, #8]	@ (8007e10 <HAL_RCC_OscConfig+0x4dc>)
 8007e06:	f043 0301 	orr.w	r3, r3, #1
 8007e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e0c:	e05b      	b.n	8007ec6 <HAL_RCC_OscConfig+0x592>
 8007e0e:	bf00      	nop
 8007e10:	58024400 	.word	0x58024400
 8007e14:	58024800 	.word	0x58024800
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d112      	bne.n	8007e46 <HAL_RCC_OscConfig+0x512>
 8007e20:	4b9d      	ldr	r3, [pc, #628]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e24:	4a9c      	ldr	r2, [pc, #624]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e2c:	4b9a      	ldr	r3, [pc, #616]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e30:	4a99      	ldr	r2, [pc, #612]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e38:	4b97      	ldr	r3, [pc, #604]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e3c:	4a96      	ldr	r2, [pc, #600]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e3e:	f023 0304 	bic.w	r3, r3, #4
 8007e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e44:	e03f      	b.n	8007ec6 <HAL_RCC_OscConfig+0x592>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d112      	bne.n	8007e74 <HAL_RCC_OscConfig+0x540>
 8007e4e:	4b92      	ldr	r3, [pc, #584]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e52:	4a91      	ldr	r2, [pc, #580]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e54:	f043 0304 	orr.w	r3, r3, #4
 8007e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e5a:	4b8f      	ldr	r3, [pc, #572]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e5e:	4a8e      	ldr	r2, [pc, #568]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e66:	4b8c      	ldr	r3, [pc, #560]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6a:	4a8b      	ldr	r2, [pc, #556]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e6c:	f043 0301 	orr.w	r3, r3, #1
 8007e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e72:	e028      	b.n	8007ec6 <HAL_RCC_OscConfig+0x592>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	2b85      	cmp	r3, #133	@ 0x85
 8007e7a:	d112      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x56e>
 8007e7c:	4b86      	ldr	r3, [pc, #536]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e80:	4a85      	ldr	r2, [pc, #532]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e82:	f043 0304 	orr.w	r3, r3, #4
 8007e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e88:	4b83      	ldr	r3, [pc, #524]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e8c:	4a82      	ldr	r2, [pc, #520]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e94:	4b80      	ldr	r3, [pc, #512]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e98:	4a7f      	ldr	r2, [pc, #508]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007e9a:	f043 0301 	orr.w	r3, r3, #1
 8007e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ea0:	e011      	b.n	8007ec6 <HAL_RCC_OscConfig+0x592>
 8007ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ea6:	4a7c      	ldr	r2, [pc, #496]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007ea8:	f023 0301 	bic.w	r3, r3, #1
 8007eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eae:	4b7a      	ldr	r3, [pc, #488]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb2:	4a79      	ldr	r2, [pc, #484]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007eb4:	f023 0304 	bic.w	r3, r3, #4
 8007eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eba:	4b77      	ldr	r3, [pc, #476]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ebe:	4a76      	ldr	r2, [pc, #472]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007ec0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ec4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d015      	beq.n	8007efa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ece:	f7fb fdff 	bl	8003ad0 <HAL_GetTick>
 8007ed2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ed4:	e00a      	b.n	8007eec <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ed6:	f7fb fdfb 	bl	8003ad0 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e14c      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eec:	4b6a      	ldr	r3, [pc, #424]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0ee      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x5a2>
 8007ef8:	e014      	b.n	8007f24 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efa:	f7fb fde9 	bl	8003ad0 <HAL_GetTick>
 8007efe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f00:	e00a      	b.n	8007f18 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f02:	f7fb fde5 	bl	8003ad0 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d901      	bls.n	8007f18 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e136      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f18:	4b5f      	ldr	r3, [pc, #380]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1ee      	bne.n	8007f02 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 812b 	beq.w	8008184 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f36:	2b18      	cmp	r3, #24
 8007f38:	f000 80bb 	beq.w	80080b2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	f040 8095 	bne.w	8008070 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f46:	4b54      	ldr	r3, [pc, #336]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a53      	ldr	r2, [pc, #332]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007f4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f52:	f7fb fdbd 	bl	8003ad0 <HAL_GetTick>
 8007f56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f5a:	f7fb fdb9 	bl	8003ad0 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e10c      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1f0      	bne.n	8007f5a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f78:	4b47      	ldr	r3, [pc, #284]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f7c:	4b47      	ldr	r3, [pc, #284]	@ (800809c <HAL_RCC_OscConfig+0x768>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007f88:	0112      	lsls	r2, r2, #4
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	4942      	ldr	r1, [pc, #264]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f96:	3b01      	subs	r3, #1
 8007f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	025b      	lsls	r3, r3, #9
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fac:	3b01      	subs	r3, #1
 8007fae:	041b      	lsls	r3, r3, #16
 8007fb0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	061b      	lsls	r3, r3, #24
 8007fbe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007fc2:	4935      	ldr	r1, [pc, #212]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007fc8:	4b33      	ldr	r3, [pc, #204]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	4a32      	ldr	r2, [pc, #200]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007fd4:	4b30      	ldr	r3, [pc, #192]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fd8:	4b31      	ldr	r3, [pc, #196]	@ (80080a0 <HAL_RCC_OscConfig+0x76c>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007fe0:	00d2      	lsls	r2, r2, #3
 8007fe2:	492d      	ldr	r1, [pc, #180]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	f023 020c 	bic.w	r2, r3, #12
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff4:	4928      	ldr	r1, [pc, #160]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ffa:	4b27      	ldr	r3, [pc, #156]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	f023 0202 	bic.w	r2, r3, #2
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008006:	4924      	ldr	r1, [pc, #144]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8008008:	4313      	orrs	r3, r2
 800800a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800800c:	4b22      	ldr	r3, [pc, #136]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 800800e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008010:	4a21      	ldr	r2, [pc, #132]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8008012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008018:	4b1f      	ldr	r3, [pc, #124]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 800801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801c:	4a1e      	ldr	r2, [pc, #120]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 800801e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008024:	4b1c      	ldr	r3, [pc, #112]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	4a1b      	ldr	r2, [pc, #108]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 800802a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800802e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008030:	4b19      	ldr	r3, [pc, #100]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	4a18      	ldr	r2, [pc, #96]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8008036:	f043 0301 	orr.w	r3, r3, #1
 800803a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800803c:	4b16      	ldr	r3, [pc, #88]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a15      	ldr	r2, [pc, #84]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8008042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008048:	f7fb fd42 	bl	8003ad0 <HAL_GetTick>
 800804c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008050:	f7fb fd3e 	bl	8003ad0 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b02      	cmp	r3, #2
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e091      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008062:	4b0d      	ldr	r3, [pc, #52]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f0      	beq.n	8008050 <HAL_RCC_OscConfig+0x71c>
 800806e:	e089      	b.n	8008184 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008070:	4b09      	ldr	r3, [pc, #36]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a08      	ldr	r2, [pc, #32]	@ (8008098 <HAL_RCC_OscConfig+0x764>)
 8008076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800807a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807c:	f7fb fd28 	bl	8003ad0 <HAL_GetTick>
 8008080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008082:	e00f      	b.n	80080a4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008084:	f7fb fd24 	bl	8003ad0 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d908      	bls.n	80080a4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e077      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
 8008096:	bf00      	nop
 8008098:	58024400 	.word	0x58024400
 800809c:	fffffc0c 	.word	0xfffffc0c
 80080a0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080a4:	4b3a      	ldr	r3, [pc, #232]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e9      	bne.n	8008084 <HAL_RCC_OscConfig+0x750>
 80080b0:	e068      	b.n	8008184 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80080b2:	4b37      	ldr	r3, [pc, #220]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80080b8:	4b35      	ldr	r3, [pc, #212]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 80080ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080bc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d031      	beq.n	800812a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f003 0203 	and.w	r2, r3, #3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d12a      	bne.n	800812a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	091b      	lsrs	r3, r3, #4
 80080d8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d122      	bne.n	800812a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d11a      	bne.n	800812a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	0a5b      	lsrs	r3, r3, #9
 80080f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008100:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008102:	429a      	cmp	r2, r3
 8008104:	d111      	bne.n	800812a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	0c1b      	lsrs	r3, r3, #16
 800810a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008112:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008114:	429a      	cmp	r2, r3
 8008116:	d108      	bne.n	800812a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	0e1b      	lsrs	r3, r3, #24
 800811c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008124:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008126:	429a      	cmp	r2, r3
 8008128:	d001      	beq.n	800812e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e02b      	b.n	8008186 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800812e:	4b18      	ldr	r3, [pc, #96]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 8008130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008132:	08db      	lsrs	r3, r3, #3
 8008134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008138:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	429a      	cmp	r2, r3
 8008142:	d01f      	beq.n	8008184 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008144:	4b12      	ldr	r3, [pc, #72]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	4a11      	ldr	r2, [pc, #68]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 800814a:	f023 0301 	bic.w	r3, r3, #1
 800814e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008150:	f7fb fcbe 	bl	8003ad0 <HAL_GetTick>
 8008154:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008156:	bf00      	nop
 8008158:	f7fb fcba 	bl	8003ad0 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	4293      	cmp	r3, r2
 8008162:	d0f9      	beq.n	8008158 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008164:	4b0a      	ldr	r3, [pc, #40]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 8008166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008168:	4b0a      	ldr	r3, [pc, #40]	@ (8008194 <HAL_RCC_OscConfig+0x860>)
 800816a:	4013      	ands	r3, r2
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008170:	00d2      	lsls	r2, r2, #3
 8008172:	4907      	ldr	r1, [pc, #28]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008178:	4b05      	ldr	r3, [pc, #20]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 800817a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817c:	4a04      	ldr	r2, [pc, #16]	@ (8008190 <HAL_RCC_OscConfig+0x85c>)
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3730      	adds	r7, #48	@ 0x30
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	58024400 	.word	0x58024400
 8008194:	ffff0007 	.word	0xffff0007

08008198 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e19c      	b.n	80084e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081ac:	4b8a      	ldr	r3, [pc, #552]	@ (80083d8 <HAL_RCC_ClockConfig+0x240>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 030f 	and.w	r3, r3, #15
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d910      	bls.n	80081dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ba:	4b87      	ldr	r3, [pc, #540]	@ (80083d8 <HAL_RCC_ClockConfig+0x240>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f023 020f 	bic.w	r2, r3, #15
 80081c2:	4985      	ldr	r1, [pc, #532]	@ (80083d8 <HAL_RCC_ClockConfig+0x240>)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ca:	4b83      	ldr	r3, [pc, #524]	@ (80083d8 <HAL_RCC_ClockConfig+0x240>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 030f 	and.w	r3, r3, #15
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d001      	beq.n	80081dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e184      	b.n	80084e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0304 	and.w	r3, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d010      	beq.n	800820a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691a      	ldr	r2, [r3, #16]
 80081ec:	4b7b      	ldr	r3, [pc, #492]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d908      	bls.n	800820a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081f8:	4b78      	ldr	r3, [pc, #480]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	4975      	ldr	r1, [pc, #468]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008206:	4313      	orrs	r3, r2
 8008208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d010      	beq.n	8008238 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	695a      	ldr	r2, [r3, #20]
 800821a:	4b70      	ldr	r3, [pc, #448]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008222:	429a      	cmp	r2, r3
 8008224:	d908      	bls.n	8008238 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008226:	4b6d      	ldr	r3, [pc, #436]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	496a      	ldr	r1, [pc, #424]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008234:	4313      	orrs	r3, r2
 8008236:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0310 	and.w	r3, r3, #16
 8008240:	2b00      	cmp	r3, #0
 8008242:	d010      	beq.n	8008266 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699a      	ldr	r2, [r3, #24]
 8008248:	4b64      	ldr	r3, [pc, #400]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008250:	429a      	cmp	r2, r3
 8008252:	d908      	bls.n	8008266 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008254:	4b61      	ldr	r3, [pc, #388]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	495e      	ldr	r1, [pc, #376]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008262:	4313      	orrs	r3, r2
 8008264:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b00      	cmp	r3, #0
 8008270:	d010      	beq.n	8008294 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69da      	ldr	r2, [r3, #28]
 8008276:	4b59      	ldr	r3, [pc, #356]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800827e:	429a      	cmp	r2, r3
 8008280:	d908      	bls.n	8008294 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008282:	4b56      	ldr	r3, [pc, #344]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	4953      	ldr	r1, [pc, #332]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008290:	4313      	orrs	r3, r2
 8008292:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d010      	beq.n	80082c2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	4b4d      	ldr	r3, [pc, #308]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d908      	bls.n	80082c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082b0:	4b4a      	ldr	r3, [pc, #296]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f023 020f 	bic.w	r2, r3, #15
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	4947      	ldr	r1, [pc, #284]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d055      	beq.n	800837a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80082ce:	4b43      	ldr	r3, [pc, #268]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	4940      	ldr	r1, [pc, #256]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d107      	bne.n	80082f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082e8:	4b3c      	ldr	r3, [pc, #240]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d121      	bne.n	8008338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e0f6      	b.n	80084e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d107      	bne.n	8008310 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008300:	4b36      	ldr	r3, [pc, #216]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d115      	bne.n	8008338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e0ea      	b.n	80084e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d107      	bne.n	8008328 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008318:	4b30      	ldr	r3, [pc, #192]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008320:	2b00      	cmp	r3, #0
 8008322:	d109      	bne.n	8008338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e0de      	b.n	80084e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008328:	4b2c      	ldr	r3, [pc, #176]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e0d6      	b.n	80084e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008338:	4b28      	ldr	r3, [pc, #160]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	f023 0207 	bic.w	r2, r3, #7
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	4925      	ldr	r1, [pc, #148]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008346:	4313      	orrs	r3, r2
 8008348:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800834a:	f7fb fbc1 	bl	8003ad0 <HAL_GetTick>
 800834e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008350:	e00a      	b.n	8008368 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008352:	f7fb fbbd 	bl	8003ad0 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008360:	4293      	cmp	r3, r2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e0be      	b.n	80084e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008368:	4b1c      	ldr	r3, [pc, #112]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	429a      	cmp	r2, r3
 8008378:	d1eb      	bne.n	8008352 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d010      	beq.n	80083a8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	4b14      	ldr	r3, [pc, #80]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	429a      	cmp	r2, r3
 8008394:	d208      	bcs.n	80083a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008396:	4b11      	ldr	r3, [pc, #68]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	f023 020f 	bic.w	r2, r3, #15
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	490e      	ldr	r1, [pc, #56]	@ (80083dc <HAL_RCC_ClockConfig+0x244>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083a8:	4b0b      	ldr	r3, [pc, #44]	@ (80083d8 <HAL_RCC_ClockConfig+0x240>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 030f 	and.w	r3, r3, #15
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d214      	bcs.n	80083e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b6:	4b08      	ldr	r3, [pc, #32]	@ (80083d8 <HAL_RCC_ClockConfig+0x240>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f023 020f 	bic.w	r2, r3, #15
 80083be:	4906      	ldr	r1, [pc, #24]	@ (80083d8 <HAL_RCC_ClockConfig+0x240>)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083c6:	4b04      	ldr	r3, [pc, #16]	@ (80083d8 <HAL_RCC_ClockConfig+0x240>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 030f 	and.w	r3, r3, #15
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d005      	beq.n	80083e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e086      	b.n	80084e6 <HAL_RCC_ClockConfig+0x34e>
 80083d8:	52002000 	.word	0x52002000
 80083dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d010      	beq.n	800840e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	4b3f      	ldr	r3, [pc, #252]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d208      	bcs.n	800840e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083fc:	4b3c      	ldr	r3, [pc, #240]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	4939      	ldr	r1, [pc, #228]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 800840a:	4313      	orrs	r3, r2
 800840c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0308 	and.w	r3, r3, #8
 8008416:	2b00      	cmp	r3, #0
 8008418:	d010      	beq.n	800843c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695a      	ldr	r2, [r3, #20]
 800841e:	4b34      	ldr	r3, [pc, #208]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008426:	429a      	cmp	r2, r3
 8008428:	d208      	bcs.n	800843c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800842a:	4b31      	ldr	r3, [pc, #196]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	492e      	ldr	r1, [pc, #184]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 8008438:	4313      	orrs	r3, r2
 800843a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	2b00      	cmp	r3, #0
 8008446:	d010      	beq.n	800846a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	699a      	ldr	r2, [r3, #24]
 800844c:	4b28      	ldr	r3, [pc, #160]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008454:	429a      	cmp	r2, r3
 8008456:	d208      	bcs.n	800846a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008458:	4b25      	ldr	r3, [pc, #148]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	4922      	ldr	r1, [pc, #136]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 8008466:	4313      	orrs	r3, r2
 8008468:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b00      	cmp	r3, #0
 8008474:	d010      	beq.n	8008498 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	69da      	ldr	r2, [r3, #28]
 800847a:	4b1d      	ldr	r3, [pc, #116]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008482:	429a      	cmp	r2, r3
 8008484:	d208      	bcs.n	8008498 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008486:	4b1a      	ldr	r3, [pc, #104]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	4917      	ldr	r1, [pc, #92]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 8008494:	4313      	orrs	r3, r2
 8008496:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008498:	f000 f834 	bl	8008504 <HAL_RCC_GetSysClockFreq>
 800849c:	4602      	mov	r2, r0
 800849e:	4b14      	ldr	r3, [pc, #80]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	0a1b      	lsrs	r3, r3, #8
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	4912      	ldr	r1, [pc, #72]	@ (80084f4 <HAL_RCC_ClockConfig+0x35c>)
 80084aa:	5ccb      	ldrb	r3, [r1, r3]
 80084ac:	f003 031f 	and.w	r3, r3, #31
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
 80084b4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80084b6:	4b0e      	ldr	r3, [pc, #56]	@ (80084f0 <HAL_RCC_ClockConfig+0x358>)
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	4a0d      	ldr	r2, [pc, #52]	@ (80084f4 <HAL_RCC_ClockConfig+0x35c>)
 80084c0:	5cd3      	ldrb	r3, [r2, r3]
 80084c2:	f003 031f 	and.w	r3, r3, #31
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
 80084cc:	4a0a      	ldr	r2, [pc, #40]	@ (80084f8 <HAL_RCC_ClockConfig+0x360>)
 80084ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084d0:	4a0a      	ldr	r2, [pc, #40]	@ (80084fc <HAL_RCC_ClockConfig+0x364>)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80084d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008500 <HAL_RCC_ClockConfig+0x368>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fb faae 	bl	8003a3c <HAL_InitTick>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	58024400 	.word	0x58024400
 80084f4:	08013210 	.word	0x08013210
 80084f8:	2400009c 	.word	0x2400009c
 80084fc:	24000098 	.word	0x24000098
 8008500:	240000a0 	.word	0x240000a0

08008504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008504:	b480      	push	{r7}
 8008506:	b089      	sub	sp, #36	@ 0x24
 8008508:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800850a:	4bb3      	ldr	r3, [pc, #716]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008512:	2b18      	cmp	r3, #24
 8008514:	f200 8155 	bhi.w	80087c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008518:	a201      	add	r2, pc, #4	@ (adr r2, 8008520 <HAL_RCC_GetSysClockFreq+0x1c>)
 800851a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851e:	bf00      	nop
 8008520:	08008585 	.word	0x08008585
 8008524:	080087c3 	.word	0x080087c3
 8008528:	080087c3 	.word	0x080087c3
 800852c:	080087c3 	.word	0x080087c3
 8008530:	080087c3 	.word	0x080087c3
 8008534:	080087c3 	.word	0x080087c3
 8008538:	080087c3 	.word	0x080087c3
 800853c:	080087c3 	.word	0x080087c3
 8008540:	080085ab 	.word	0x080085ab
 8008544:	080087c3 	.word	0x080087c3
 8008548:	080087c3 	.word	0x080087c3
 800854c:	080087c3 	.word	0x080087c3
 8008550:	080087c3 	.word	0x080087c3
 8008554:	080087c3 	.word	0x080087c3
 8008558:	080087c3 	.word	0x080087c3
 800855c:	080087c3 	.word	0x080087c3
 8008560:	080085b1 	.word	0x080085b1
 8008564:	080087c3 	.word	0x080087c3
 8008568:	080087c3 	.word	0x080087c3
 800856c:	080087c3 	.word	0x080087c3
 8008570:	080087c3 	.word	0x080087c3
 8008574:	080087c3 	.word	0x080087c3
 8008578:	080087c3 	.word	0x080087c3
 800857c:	080087c3 	.word	0x080087c3
 8008580:	080085b7 	.word	0x080085b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008584:	4b94      	ldr	r3, [pc, #592]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d009      	beq.n	80085a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008590:	4b91      	ldr	r3, [pc, #580]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	08db      	lsrs	r3, r3, #3
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	4a90      	ldr	r2, [pc, #576]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800859c:	fa22 f303 	lsr.w	r3, r2, r3
 80085a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80085a2:	e111      	b.n	80087c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80085a4:	4b8d      	ldr	r3, [pc, #564]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085a6:	61bb      	str	r3, [r7, #24]
      break;
 80085a8:	e10e      	b.n	80087c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80085aa:	4b8d      	ldr	r3, [pc, #564]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085ac:	61bb      	str	r3, [r7, #24]
      break;
 80085ae:	e10b      	b.n	80087c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80085b0:	4b8c      	ldr	r3, [pc, #560]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80085b2:	61bb      	str	r3, [r7, #24]
      break;
 80085b4:	e108      	b.n	80087c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085b6:	4b88      	ldr	r3, [pc, #544]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80085c0:	4b85      	ldr	r3, [pc, #532]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c4:	091b      	lsrs	r3, r3, #4
 80085c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80085cc:	4b82      	ldr	r3, [pc, #520]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80085d6:	4b80      	ldr	r3, [pc, #512]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085da:	08db      	lsrs	r3, r3, #3
 80085dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	fb02 f303 	mul.w	r3, r2, r3
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 80e1 	beq.w	80087bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	f000 8083 	beq.w	8008708 <HAL_RCC_GetSysClockFreq+0x204>
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b02      	cmp	r3, #2
 8008606:	f200 80a1 	bhi.w	800874c <HAL_RCC_GetSysClockFreq+0x248>
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_RCC_GetSysClockFreq+0x114>
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d056      	beq.n	80086c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008616:	e099      	b.n	800874c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008618:	4b6f      	ldr	r3, [pc, #444]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d02d      	beq.n	8008680 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008624:	4b6c      	ldr	r3, [pc, #432]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	08db      	lsrs	r3, r3, #3
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	4a6b      	ldr	r2, [pc, #428]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008630:	fa22 f303 	lsr.w	r3, r2, r3
 8008634:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	ee07 3a90 	vmov	s15, r3
 800863c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864e:	4b62      	ldr	r3, [pc, #392]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800865e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008662:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80087e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800866e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800867e:	e087      	b.n	8008790 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80087ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800868e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008692:	4b51      	ldr	r3, [pc, #324]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80086a6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80087e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086c2:	e065      	b.n	8008790 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80087f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80086d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d6:	4b40      	ldr	r3, [pc, #256]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80087e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008706:	e043      	b.n	8008790 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80087f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871a:	4b2f      	ldr	r3, [pc, #188]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800871e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872a:	ed97 6a02 	vldr	s12, [r7, #8]
 800872e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80087e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800874a:	e021      	b.n	8008790 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80087f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800875a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875e:	4b1e      	ldr	r3, [pc, #120]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008772:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80087e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800878e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008790:	4b11      	ldr	r3, [pc, #68]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008794:	0a5b      	lsrs	r3, r3, #9
 8008796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800879a:	3301      	adds	r3, #1
 800879c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	ee07 3a90 	vmov	s15, r3
 80087a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b4:	ee17 3a90 	vmov	r3, s15
 80087b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80087ba:	e005      	b.n	80087c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	61bb      	str	r3, [r7, #24]
      break;
 80087c0:	e002      	b.n	80087c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80087c2:	4b07      	ldr	r3, [pc, #28]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087c4:	61bb      	str	r3, [r7, #24]
      break;
 80087c6:	bf00      	nop
  }

  return sysclockfreq;
 80087c8:	69bb      	ldr	r3, [r7, #24]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3724      	adds	r7, #36	@ 0x24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	58024400 	.word	0x58024400
 80087dc:	03d09000 	.word	0x03d09000
 80087e0:	003d0900 	.word	0x003d0900
 80087e4:	016e3600 	.word	0x016e3600
 80087e8:	46000000 	.word	0x46000000
 80087ec:	4c742400 	.word	0x4c742400
 80087f0:	4a742400 	.word	0x4a742400
 80087f4:	4bb71b00 	.word	0x4bb71b00

080087f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80087fe:	f7ff fe81 	bl	8008504 <HAL_RCC_GetSysClockFreq>
 8008802:	4602      	mov	r2, r0
 8008804:	4b10      	ldr	r3, [pc, #64]	@ (8008848 <HAL_RCC_GetHCLKFreq+0x50>)
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	0a1b      	lsrs	r3, r3, #8
 800880a:	f003 030f 	and.w	r3, r3, #15
 800880e:	490f      	ldr	r1, [pc, #60]	@ (800884c <HAL_RCC_GetHCLKFreq+0x54>)
 8008810:	5ccb      	ldrb	r3, [r1, r3]
 8008812:	f003 031f 	and.w	r3, r3, #31
 8008816:	fa22 f303 	lsr.w	r3, r2, r3
 800881a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800881c:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <HAL_RCC_GetHCLKFreq+0x50>)
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	f003 030f 	and.w	r3, r3, #15
 8008824:	4a09      	ldr	r2, [pc, #36]	@ (800884c <HAL_RCC_GetHCLKFreq+0x54>)
 8008826:	5cd3      	ldrb	r3, [r2, r3]
 8008828:	f003 031f 	and.w	r3, r3, #31
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	fa22 f303 	lsr.w	r3, r2, r3
 8008832:	4a07      	ldr	r2, [pc, #28]	@ (8008850 <HAL_RCC_GetHCLKFreq+0x58>)
 8008834:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008836:	4a07      	ldr	r2, [pc, #28]	@ (8008854 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800883c:	4b04      	ldr	r3, [pc, #16]	@ (8008850 <HAL_RCC_GetHCLKFreq+0x58>)
 800883e:	681b      	ldr	r3, [r3, #0]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	58024400 	.word	0x58024400
 800884c:	08013210 	.word	0x08013210
 8008850:	2400009c 	.word	0x2400009c
 8008854:	24000098 	.word	0x24000098

08008858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800885c:	f7ff ffcc 	bl	80087f8 <HAL_RCC_GetHCLKFreq>
 8008860:	4602      	mov	r2, r0
 8008862:	4b06      	ldr	r3, [pc, #24]	@ (800887c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	091b      	lsrs	r3, r3, #4
 8008868:	f003 0307 	and.w	r3, r3, #7
 800886c:	4904      	ldr	r1, [pc, #16]	@ (8008880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800886e:	5ccb      	ldrb	r3, [r1, r3]
 8008870:	f003 031f 	and.w	r3, r3, #31
 8008874:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008878:	4618      	mov	r0, r3
 800887a:	bd80      	pop	{r7, pc}
 800887c:	58024400 	.word	0x58024400
 8008880:	08013210 	.word	0x08013210

08008884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008888:	f7ff ffb6 	bl	80087f8 <HAL_RCC_GetHCLKFreq>
 800888c:	4602      	mov	r2, r0
 800888e:	4b06      	ldr	r3, [pc, #24]	@ (80088a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	0a1b      	lsrs	r3, r3, #8
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	4904      	ldr	r1, [pc, #16]	@ (80088ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800889a:	5ccb      	ldrb	r3, [r1, r3]
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	58024400 	.word	0x58024400
 80088ac:	08013210 	.word	0x08013210

080088b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088b4:	b0c8      	sub	sp, #288	@ 0x120
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088c2:	2300      	movs	r3, #0
 80088c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80088c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80088d4:	2500      	movs	r5, #0
 80088d6:	ea54 0305 	orrs.w	r3, r4, r5
 80088da:	d049      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80088dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80088e6:	d02f      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80088e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80088ec:	d828      	bhi.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80088ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088f2:	d01a      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80088f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088f8:	d822      	bhi.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80088fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008902:	d007      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008904:	e01c      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008906:	4ba7      	ldr	r3, [pc, #668]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890a:	4aa6      	ldr	r2, [pc, #664]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800890c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008912:	e01a      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008918:	3308      	adds	r3, #8
 800891a:	2102      	movs	r1, #2
 800891c:	4618      	mov	r0, r3
 800891e:	f001 fc43 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008922:	4603      	mov	r3, r0
 8008924:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008928:	e00f      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800892a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800892e:	3328      	adds	r3, #40	@ 0x28
 8008930:	2102      	movs	r1, #2
 8008932:	4618      	mov	r0, r3
 8008934:	f001 fcea 	bl	800a30c <RCCEx_PLL3_Config>
 8008938:	4603      	mov	r3, r0
 800893a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800893e:	e004      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008946:	e000      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800894a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008952:	4b94      	ldr	r3, [pc, #592]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008956:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800895a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800895e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008960:	4a90      	ldr	r2, [pc, #576]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008962:	430b      	orrs	r3, r1
 8008964:	6513      	str	r3, [r2, #80]	@ 0x50
 8008966:	e003      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008968:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800896c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800897c:	f04f 0900 	mov.w	r9, #0
 8008980:	ea58 0309 	orrs.w	r3, r8, r9
 8008984:	d047      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800898a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800898c:	2b04      	cmp	r3, #4
 800898e:	d82a      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008990:	a201      	add	r2, pc, #4	@ (adr r2, 8008998 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008996:	bf00      	nop
 8008998:	080089ad 	.word	0x080089ad
 800899c:	080089bb 	.word	0x080089bb
 80089a0:	080089d1 	.word	0x080089d1
 80089a4:	080089ef 	.word	0x080089ef
 80089a8:	080089ef 	.word	0x080089ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ac:	4b7d      	ldr	r3, [pc, #500]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	4a7c      	ldr	r2, [pc, #496]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089b8:	e01a      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089be:	3308      	adds	r3, #8
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 fbf0 	bl	800a1a8 <RCCEx_PLL2_Config>
 80089c8:	4603      	mov	r3, r0
 80089ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089ce:	e00f      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d4:	3328      	adds	r3, #40	@ 0x28
 80089d6:	2100      	movs	r1, #0
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 fc97 	bl	800a30c <RCCEx_PLL3_Config>
 80089de:	4603      	mov	r3, r0
 80089e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089e4:	e004      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089ec:	e000      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80089ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10a      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089f8:	4b6a      	ldr	r3, [pc, #424]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089fc:	f023 0107 	bic.w	r1, r3, #7
 8008a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a06:	4a67      	ldr	r2, [pc, #412]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a0c:	e003      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008a22:	f04f 0b00 	mov.w	fp, #0
 8008a26:	ea5a 030b 	orrs.w	r3, sl, fp
 8008a2a:	d054      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a32:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008a36:	d036      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008a38:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008a3c:	d82f      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a42:	d032      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a48:	d829      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a4c:	d02f      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8008a4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a50:	d825      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008a52:	2b80      	cmp	r3, #128	@ 0x80
 8008a54:	d018      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008a56:	2b80      	cmp	r3, #128	@ 0x80
 8008a58:	d821      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008a5e:	2b40      	cmp	r3, #64	@ 0x40
 8008a60:	d007      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8008a62:	e01c      	b.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a64:	4b4f      	ldr	r3, [pc, #316]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a68:	4a4e      	ldr	r2, [pc, #312]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008a70:	e01e      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a76:	3308      	adds	r3, #8
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f001 fb94 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008a86:	e013      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a8c:	3328      	adds	r3, #40	@ 0x28
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f001 fc3b 	bl	800a30c <RCCEx_PLL3_Config>
 8008a96:	4603      	mov	r3, r0
 8008a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008a9c:	e008      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008aa4:	e004      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008aa6:	bf00      	nop
 8008aa8:	e002      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008aaa:	bf00      	nop
 8008aac:	e000      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ab0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008abc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ac6:	4a37      	ldr	r2, [pc, #220]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	6513      	str	r3, [r2, #80]	@ 0x50
 8008acc:	e003      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ace:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ad2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008ae2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008aec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008af0:	460b      	mov	r3, r1
 8008af2:	4313      	orrs	r3, r2
 8008af4:	d05c      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008afc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008b00:	d03b      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b02:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008b06:	d834      	bhi.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b0c:	d037      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b12:	d82e      	bhi.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008b14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b18:	d033      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008b1a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b1e:	d828      	bhi.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008b20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b24:	d01a      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b2a:	d822      	bhi.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b34:	d007      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008b36:	e01c      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b38:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3c:	4a19      	ldr	r2, [pc, #100]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008b44:	e01e      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fb2a 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008b5a:	e013      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b60:	3328      	adds	r3, #40	@ 0x28
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 fbd1 	bl	800a30c <RCCEx_PLL3_Config>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008b70:	e008      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b78:	e004      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008b7a:	bf00      	nop
 8008b7c:	e002      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008b7e:	bf00      	nop
 8008b80:	e000      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10d      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008b8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b90:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b9a:	4a02      	ldr	r2, [pc, #8]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ba0:	e006      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008ba2:	bf00      	nop
 8008ba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008bc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	d03a      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bd6:	2b30      	cmp	r3, #48	@ 0x30
 8008bd8:	d01f      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008bda:	2b30      	cmp	r3, #48	@ 0x30
 8008bdc:	d819      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d00c      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d815      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d019      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008bea:	2b10      	cmp	r3, #16
 8008bec:	d111      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bee:	4bae      	ldr	r3, [pc, #696]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf2:	4aad      	ldr	r2, [pc, #692]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008bfa:	e011      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c00:	3308      	adds	r3, #8
 8008c02:	2102      	movs	r1, #2
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 facf 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008c10:	e006      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c18:	e002      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008c1a:	bf00      	nop
 8008c1c:	e000      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008c28:	4b9f      	ldr	r3, [pc, #636]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c2c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c36:	4a9c      	ldr	r2, [pc, #624]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c3c:	e003      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008c52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c56:	2300      	movs	r3, #0
 8008c58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4313      	orrs	r3, r2
 8008c64:	d051      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c70:	d035      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c76:	d82e      	bhi.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008c78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c7c:	d031      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008c7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c82:	d828      	bhi.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c88:	d01a      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c8e:	d822      	bhi.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c98:	d007      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008c9a:	e01c      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c9c:	4b82      	ldr	r3, [pc, #520]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca0:	4a81      	ldr	r2, [pc, #516]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ca8:	e01c      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cae:	3308      	adds	r3, #8
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 fa78 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008cbe:	e011      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc4:	3328      	adds	r3, #40	@ 0x28
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 fb1f 	bl	800a30c <RCCEx_PLL3_Config>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008cd4:	e006      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008cdc:	e002      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008cde:	bf00      	nop
 8008ce0:	e000      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10a      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008cec:	4b6e      	ldr	r3, [pc, #440]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cfa:	4a6b      	ldr	r2, [pc, #428]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cfc:	430b      	orrs	r3, r1
 8008cfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d00:	e003      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008d16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008d24:	460b      	mov	r3, r1
 8008d26:	4313      	orrs	r3, r2
 8008d28:	d053      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d34:	d033      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008d36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d3a:	d82c      	bhi.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008d3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d40:	d02f      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008d42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d46:	d826      	bhi.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008d48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d4c:	d02b      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008d4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d52:	d820      	bhi.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008d54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d58:	d012      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d5e:	d81a      	bhi.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d022      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d68:	d115      	bne.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6e:	3308      	adds	r3, #8
 8008d70:	2101      	movs	r1, #1
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 fa18 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d7e:	e015      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d84:	3328      	adds	r3, #40	@ 0x28
 8008d86:	2101      	movs	r1, #1
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f001 fabf 	bl	800a30c <RCCEx_PLL3_Config>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d94:	e00a      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d9c:	e006      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008d9e:	bf00      	nop
 8008da0:	e004      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008da2:	bf00      	nop
 8008da4:	e002      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008da6:	bf00      	nop
 8008da8:	e000      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008db4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008db8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dc2:	4a39      	ldr	r2, [pc, #228]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008dc8:	e003      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008dde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008de2:	2300      	movs	r3, #0
 8008de4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008de8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d060      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008dfa:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008dfe:	d039      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008e00:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008e04:	d832      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e0a:	d035      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e10:	d82c      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e16:	d031      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e1c:	d826      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008e1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e22:	d02d      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008e24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e28:	d820      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e2e:	d012      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e34:	d81a      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d024      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e3e:	d115      	bne.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e44:	3308      	adds	r3, #8
 8008e46:	2101      	movs	r1, #1
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 f9ad 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e54:	e017      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e5a:	3328      	adds	r3, #40	@ 0x28
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f001 fa54 	bl	800a30c <RCCEx_PLL3_Config>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e6a:	e00c      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e72:	e008      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008e74:	bf00      	nop
 8008e76:	e006      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008e78:	bf00      	nop
 8008e7a:	e004      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008e7c:	bf00      	nop
 8008e7e:	e002      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008e80:	bf00      	nop
 8008e82:	e000      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10e      	bne.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e8e:	4b06      	ldr	r3, [pc, #24]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e92:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e9e:	4a02      	ldr	r2, [pc, #8]	@ (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ea0:	430b      	orrs	r3, r1
 8008ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ea4:	e006      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008ea6:	bf00      	nop
 8008ea8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eb0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	d037      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ede:	d00e      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ee4:	d816      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d018      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008eee:	d111      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef0:	4bc4      	ldr	r3, [pc, #784]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef4:	4ac3      	ldr	r2, [pc, #780]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008efc:	e00f      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f02:	3308      	adds	r3, #8
 8008f04:	2101      	movs	r1, #1
 8008f06:	4618      	mov	r0, r3
 8008f08:	f001 f94e 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f12:	e004      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f1a:	e000      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f26:	4bb7      	ldr	r3, [pc, #732]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f34:	4ab3      	ldr	r2, [pc, #716]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f36:	430b      	orrs	r3, r1
 8008f38:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f3a:	e003      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f54:	2300      	movs	r3, #0
 8008f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008f5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4313      	orrs	r3, r2
 8008f62:	d039      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d81c      	bhi.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008fb1 	.word	0x08008fb1
 8008f78:	08008f85 	.word	0x08008f85
 8008f7c:	08008f93 	.word	0x08008f93
 8008f80:	08008fb1 	.word	0x08008fb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f84:	4b9f      	ldr	r3, [pc, #636]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f88:	4a9e      	ldr	r2, [pc, #632]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f90:	e00f      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f96:	3308      	adds	r3, #8
 8008f98:	2102      	movs	r1, #2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 f904 	bl	800a1a8 <RCCEx_PLL2_Config>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008fa6:	e004      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008fae:	e000      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10a      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008fba:	4b92      	ldr	r3, [pc, #584]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fbe:	f023 0103 	bic.w	r1, r3, #3
 8008fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fc8:	4a8e      	ldr	r2, [pc, #568]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008fce:	e003      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	f000 8099 	beq.w	800912c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ffa:	4b83      	ldr	r3, [pc, #524]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a82      	ldr	r2, [pc, #520]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009006:	f7fa fd63 	bl	8003ad0 <HAL_GetTick>
 800900a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800900e:	e00b      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009010:	f7fa fd5e 	bl	8003ad0 <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b64      	cmp	r3, #100	@ 0x64
 800901e:	d903      	bls.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009026:	e005      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009028:	4b77      	ldr	r3, [pc, #476]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0ed      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009034:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009038:	2b00      	cmp	r3, #0
 800903a:	d173      	bne.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800903c:	4b71      	ldr	r3, [pc, #452]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800903e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009048:	4053      	eors	r3, r2
 800904a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800904e:	2b00      	cmp	r3, #0
 8009050:	d015      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009052:	4b6c      	ldr	r3, [pc, #432]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800905a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800905e:	4b69      	ldr	r3, [pc, #420]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009062:	4a68      	ldr	r2, [pc, #416]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009068:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800906a:	4b66      	ldr	r3, [pc, #408]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800906c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800906e:	4a65      	ldr	r2, [pc, #404]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009074:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009076:	4a63      	ldr	r2, [pc, #396]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800907e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800908a:	d118      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800908c:	f7fa fd20 	bl	8003ad0 <HAL_GetTick>
 8009090:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009094:	e00d      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009096:	f7fa fd1b 	bl	8003ad0 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80090a0:	1ad2      	subs	r2, r2, r3
 80090a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d903      	bls.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80090b0:	e005      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090b2:	4b54      	ldr	r3, [pc, #336]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0eb      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80090be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d129      	bne.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80090ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090d6:	d10e      	bne.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80090d8:	4b4a      	ldr	r3, [pc, #296]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80090e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80090e8:	091a      	lsrs	r2, r3, #4
 80090ea:	4b48      	ldr	r3, [pc, #288]	@ (800920c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80090ec:	4013      	ands	r3, r2
 80090ee:	4a45      	ldr	r2, [pc, #276]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090f0:	430b      	orrs	r3, r1
 80090f2:	6113      	str	r3, [r2, #16]
 80090f4:	e005      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80090f6:	4b43      	ldr	r3, [pc, #268]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	4a42      	ldr	r2, [pc, #264]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009100:	6113      	str	r3, [r2, #16]
 8009102:	4b40      	ldr	r3, [pc, #256]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009104:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800910a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800910e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009112:	4a3c      	ldr	r2, [pc, #240]	@ (8009204 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009114:	430b      	orrs	r3, r1
 8009116:	6713      	str	r3, [r2, #112]	@ 0x70
 8009118:	e008      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800911a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800911e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009122:	e003      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009128:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f002 0301 	and.w	r3, r2, #1
 8009138:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800913c:	2300      	movs	r3, #0
 800913e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009142:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009146:	460b      	mov	r3, r1
 8009148:	4313      	orrs	r3, r2
 800914a:	f000 8090 	beq.w	800926e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800914e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009156:	2b28      	cmp	r3, #40	@ 0x28
 8009158:	d870      	bhi.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800915a:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	08009245 	.word	0x08009245
 8009164:	0800923d 	.word	0x0800923d
 8009168:	0800923d 	.word	0x0800923d
 800916c:	0800923d 	.word	0x0800923d
 8009170:	0800923d 	.word	0x0800923d
 8009174:	0800923d 	.word	0x0800923d
 8009178:	0800923d 	.word	0x0800923d
 800917c:	0800923d 	.word	0x0800923d
 8009180:	08009211 	.word	0x08009211
 8009184:	0800923d 	.word	0x0800923d
 8009188:	0800923d 	.word	0x0800923d
 800918c:	0800923d 	.word	0x0800923d
 8009190:	0800923d 	.word	0x0800923d
 8009194:	0800923d 	.word	0x0800923d
 8009198:	0800923d 	.word	0x0800923d
 800919c:	0800923d 	.word	0x0800923d
 80091a0:	08009227 	.word	0x08009227
 80091a4:	0800923d 	.word	0x0800923d
 80091a8:	0800923d 	.word	0x0800923d
 80091ac:	0800923d 	.word	0x0800923d
 80091b0:	0800923d 	.word	0x0800923d
 80091b4:	0800923d 	.word	0x0800923d
 80091b8:	0800923d 	.word	0x0800923d
 80091bc:	0800923d 	.word	0x0800923d
 80091c0:	08009245 	.word	0x08009245
 80091c4:	0800923d 	.word	0x0800923d
 80091c8:	0800923d 	.word	0x0800923d
 80091cc:	0800923d 	.word	0x0800923d
 80091d0:	0800923d 	.word	0x0800923d
 80091d4:	0800923d 	.word	0x0800923d
 80091d8:	0800923d 	.word	0x0800923d
 80091dc:	0800923d 	.word	0x0800923d
 80091e0:	08009245 	.word	0x08009245
 80091e4:	0800923d 	.word	0x0800923d
 80091e8:	0800923d 	.word	0x0800923d
 80091ec:	0800923d 	.word	0x0800923d
 80091f0:	0800923d 	.word	0x0800923d
 80091f4:	0800923d 	.word	0x0800923d
 80091f8:	0800923d 	.word	0x0800923d
 80091fc:	0800923d 	.word	0x0800923d
 8009200:	08009245 	.word	0x08009245
 8009204:	58024400 	.word	0x58024400
 8009208:	58024800 	.word	0x58024800
 800920c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009214:	3308      	adds	r3, #8
 8009216:	2101      	movs	r1, #1
 8009218:	4618      	mov	r0, r3
 800921a:	f000 ffc5 	bl	800a1a8 <RCCEx_PLL2_Config>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009224:	e00f      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800922a:	3328      	adds	r3, #40	@ 0x28
 800922c:	2101      	movs	r1, #1
 800922e:	4618      	mov	r0, r3
 8009230:	f001 f86c 	bl	800a30c <RCCEx_PLL3_Config>
 8009234:	4603      	mov	r3, r0
 8009236:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800923a:	e004      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009242:	e000      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009246:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10b      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800924e:	4bc0      	ldr	r3, [pc, #768]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009252:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800925a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800925e:	4abc      	ldr	r2, [pc, #752]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009260:	430b      	orrs	r3, r1
 8009262:	6553      	str	r3, [r2, #84]	@ 0x54
 8009264:	e003      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009266:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800926a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800926e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f002 0302 	and.w	r3, r2, #2
 800927a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800927e:	2300      	movs	r3, #0
 8009280:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009284:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009288:	460b      	mov	r3, r1
 800928a:	4313      	orrs	r3, r2
 800928c:	d043      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800928e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009296:	2b05      	cmp	r3, #5
 8009298:	d824      	bhi.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800929a:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	080092ed 	.word	0x080092ed
 80092a4:	080092b9 	.word	0x080092b9
 80092a8:	080092cf 	.word	0x080092cf
 80092ac:	080092ed 	.word	0x080092ed
 80092b0:	080092ed 	.word	0x080092ed
 80092b4:	080092ed 	.word	0x080092ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092bc:	3308      	adds	r3, #8
 80092be:	2101      	movs	r1, #1
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 ff71 	bl	800a1a8 <RCCEx_PLL2_Config>
 80092c6:	4603      	mov	r3, r0
 80092c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80092cc:	e00f      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d2:	3328      	adds	r3, #40	@ 0x28
 80092d4:	2101      	movs	r1, #1
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 f818 	bl	800a30c <RCCEx_PLL3_Config>
 80092dc:	4603      	mov	r3, r0
 80092de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80092e2:	e004      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092ea:	e000      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80092ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10b      	bne.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092f6:	4b96      	ldr	r3, [pc, #600]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80092f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092fa:	f023 0107 	bic.w	r1, r3, #7
 80092fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009306:	4a92      	ldr	r2, [pc, #584]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009308:	430b      	orrs	r3, r1
 800930a:	6553      	str	r3, [r2, #84]	@ 0x54
 800930c:	e003      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009312:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931e:	f002 0304 	and.w	r3, r2, #4
 8009322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009326:	2300      	movs	r3, #0
 8009328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800932c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009330:	460b      	mov	r3, r1
 8009332:	4313      	orrs	r3, r2
 8009334:	d043      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800933a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800933e:	2b05      	cmp	r3, #5
 8009340:	d824      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009342:	a201      	add	r2, pc, #4	@ (adr r2, 8009348 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	08009395 	.word	0x08009395
 800934c:	08009361 	.word	0x08009361
 8009350:	08009377 	.word	0x08009377
 8009354:	08009395 	.word	0x08009395
 8009358:	08009395 	.word	0x08009395
 800935c:	08009395 	.word	0x08009395
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009364:	3308      	adds	r3, #8
 8009366:	2101      	movs	r1, #1
 8009368:	4618      	mov	r0, r3
 800936a:	f000 ff1d 	bl	800a1a8 <RCCEx_PLL2_Config>
 800936e:	4603      	mov	r3, r0
 8009370:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009374:	e00f      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800937a:	3328      	adds	r3, #40	@ 0x28
 800937c:	2101      	movs	r1, #1
 800937e:	4618      	mov	r0, r3
 8009380:	f000 ffc4 	bl	800a30c <RCCEx_PLL3_Config>
 8009384:	4603      	mov	r3, r0
 8009386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800938a:	e004      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009392:	e000      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009396:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10b      	bne.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800939e:	4b6c      	ldr	r3, [pc, #432]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80093a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093a2:	f023 0107 	bic.w	r1, r3, #7
 80093a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093ae:	4a68      	ldr	r2, [pc, #416]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80093b0:	430b      	orrs	r3, r1
 80093b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80093b4:	e003      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f002 0320 	and.w	r3, r2, #32
 80093ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093ce:	2300      	movs	r3, #0
 80093d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80093d8:	460b      	mov	r3, r1
 80093da:	4313      	orrs	r3, r2
 80093dc:	d055      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80093de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093ea:	d033      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80093ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093f0:	d82c      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80093f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093f6:	d02f      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093fc:	d826      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80093fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009402:	d02b      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009404:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009408:	d820      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800940a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800940e:	d012      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009414:	d81a      	bhi.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d022      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800941a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800941e:	d115      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009424:	3308      	adds	r3, #8
 8009426:	2100      	movs	r1, #0
 8009428:	4618      	mov	r0, r3
 800942a:	f000 febd 	bl	800a1a8 <RCCEx_PLL2_Config>
 800942e:	4603      	mov	r3, r0
 8009430:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009434:	e015      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800943a:	3328      	adds	r3, #40	@ 0x28
 800943c:	2102      	movs	r1, #2
 800943e:	4618      	mov	r0, r3
 8009440:	f000 ff64 	bl	800a30c <RCCEx_PLL3_Config>
 8009444:	4603      	mov	r3, r0
 8009446:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800944a:	e00a      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009452:	e006      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009454:	bf00      	nop
 8009456:	e004      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009458:	bf00      	nop
 800945a:	e002      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800945c:	bf00      	nop
 800945e:	e000      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009462:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10b      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800946a:	4b39      	ldr	r3, [pc, #228]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800946c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800946e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800947a:	4a35      	ldr	r2, [pc, #212]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800947c:	430b      	orrs	r3, r1
 800947e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009480:	e003      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009482:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009486:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800948a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009492:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800949a:	2300      	movs	r3, #0
 800949c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4313      	orrs	r3, r2
 80094a8:	d058      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80094aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80094b6:	d033      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80094b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80094bc:	d82c      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80094be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094c2:	d02f      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80094c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094c8:	d826      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80094ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094ce:	d02b      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80094d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094d4:	d820      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80094d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094da:	d012      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80094dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094e0:	d81a      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d022      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80094e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ea:	d115      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f0:	3308      	adds	r3, #8
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fe57 	bl	800a1a8 <RCCEx_PLL2_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009500:	e015      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009506:	3328      	adds	r3, #40	@ 0x28
 8009508:	2102      	movs	r1, #2
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fefe 	bl	800a30c <RCCEx_PLL3_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009516:	e00a      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800951e:	e006      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009520:	bf00      	nop
 8009522:	e004      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009524:	bf00      	nop
 8009526:	e002      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009528:	bf00      	nop
 800952a:	e000      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800952c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800952e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10e      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009536:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800953a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800953e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009546:	4a02      	ldr	r2, [pc, #8]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009548:	430b      	orrs	r3, r1
 800954a:	6593      	str	r3, [r2, #88]	@ 0x58
 800954c:	e006      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800954e:	bf00      	nop
 8009550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009554:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009558:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800955c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800956c:	2300      	movs	r3, #0
 800956e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009572:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009576:	460b      	mov	r3, r1
 8009578:	4313      	orrs	r3, r2
 800957a:	d055      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800957c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009580:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009584:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009588:	d033      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800958a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800958e:	d82c      	bhi.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009594:	d02f      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009596:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800959a:	d826      	bhi.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800959c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80095a0:	d02b      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80095a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80095a6:	d820      	bhi.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80095a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095ac:	d012      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80095ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095b2:	d81a      	bhi.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d022      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80095b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095bc:	d115      	bne.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095c2:	3308      	adds	r3, #8
 80095c4:	2100      	movs	r1, #0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fdee 	bl	800a1a8 <RCCEx_PLL2_Config>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80095d2:	e015      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095d8:	3328      	adds	r3, #40	@ 0x28
 80095da:	2102      	movs	r1, #2
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fe95 	bl	800a30c <RCCEx_PLL3_Config>
 80095e2:	4603      	mov	r3, r0
 80095e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80095e8:	e00a      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80095f0:	e006      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80095f2:	bf00      	nop
 80095f4:	e004      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80095f6:	bf00      	nop
 80095f8:	e002      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80095fa:	bf00      	nop
 80095fc:	e000      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80095fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009600:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10b      	bne.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009608:	4ba1      	ldr	r3, [pc, #644]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800960a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009614:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009618:	4a9d      	ldr	r2, [pc, #628]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800961a:	430b      	orrs	r3, r1
 800961c:	6593      	str	r3, [r2, #88]	@ 0x58
 800961e:	e003      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009620:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009624:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	f002 0308 	and.w	r3, r2, #8
 8009634:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009638:	2300      	movs	r3, #0
 800963a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800963e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009642:	460b      	mov	r3, r1
 8009644:	4313      	orrs	r3, r2
 8009646:	d01e      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800964c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009654:	d10c      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800965a:	3328      	adds	r3, #40	@ 0x28
 800965c:	2102      	movs	r1, #2
 800965e:	4618      	mov	r0, r3
 8009660:	f000 fe54 	bl	800a30c <RCCEx_PLL3_Config>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009670:	4b87      	ldr	r3, [pc, #540]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009674:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800967c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009680:	4a83      	ldr	r2, [pc, #524]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009682:	430b      	orrs	r3, r1
 8009684:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968e:	f002 0310 	and.w	r3, r2, #16
 8009692:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009696:	2300      	movs	r3, #0
 8009698:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800969c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80096a0:	460b      	mov	r3, r1
 80096a2:	4313      	orrs	r3, r2
 80096a4:	d01e      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80096a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80096ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096b2:	d10c      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80096b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096b8:	3328      	adds	r3, #40	@ 0x28
 80096ba:	2102      	movs	r1, #2
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 fe25 	bl	800a30c <RCCEx_PLL3_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096ce:	4b70      	ldr	r3, [pc, #448]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80096d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80096d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80096de:	4a6c      	ldr	r2, [pc, #432]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80096e0:	430b      	orrs	r3, r1
 80096e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80096f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80096f4:	2300      	movs	r3, #0
 80096f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80096fe:	460b      	mov	r3, r1
 8009700:	4313      	orrs	r3, r2
 8009702:	d03e      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009708:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800970c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009710:	d022      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8009712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009716:	d81b      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009718:	2b00      	cmp	r3, #0
 800971a:	d003      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800971c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009720:	d00b      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8009722:	e015      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009728:	3308      	adds	r3, #8
 800972a:	2100      	movs	r1, #0
 800972c:	4618      	mov	r0, r3
 800972e:	f000 fd3b 	bl	800a1a8 <RCCEx_PLL2_Config>
 8009732:	4603      	mov	r3, r0
 8009734:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009738:	e00f      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800973a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973e:	3328      	adds	r3, #40	@ 0x28
 8009740:	2102      	movs	r1, #2
 8009742:	4618      	mov	r0, r3
 8009744:	f000 fde2 	bl	800a30c <RCCEx_PLL3_Config>
 8009748:	4603      	mov	r3, r0
 800974a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800974e:	e004      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009756:	e000      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800975a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10b      	bne.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009762:	4b4b      	ldr	r3, [pc, #300]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009766:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800976a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800976e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009772:	4a47      	ldr	r2, [pc, #284]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009774:	430b      	orrs	r3, r1
 8009776:	6593      	str	r3, [r2, #88]	@ 0x58
 8009778:	e003      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800977a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800977e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800978e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009790:	2300      	movs	r3, #0
 8009792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009794:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009798:	460b      	mov	r3, r1
 800979a:	4313      	orrs	r3, r2
 800979c:	d03b      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800979e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097aa:	d01f      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80097ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097b0:	d818      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80097b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097b6:	d003      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80097b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097bc:	d007      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80097be:	e011      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097c0:	4b33      	ldr	r3, [pc, #204]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80097c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c4:	4a32      	ldr	r2, [pc, #200]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80097c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80097cc:	e00f      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097d2:	3328      	adds	r3, #40	@ 0x28
 80097d4:	2101      	movs	r1, #1
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fd98 	bl	800a30c <RCCEx_PLL3_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80097e2:	e004      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097ea:	e000      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80097ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10b      	bne.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097f6:	4b26      	ldr	r3, [pc, #152]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80097f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80097fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009806:	4a22      	ldr	r2, [pc, #136]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009808:	430b      	orrs	r3, r1
 800980a:	6553      	str	r3, [r2, #84]	@ 0x54
 800980c:	e003      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800980e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009812:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009822:	673b      	str	r3, [r7, #112]	@ 0x70
 8009824:	2300      	movs	r3, #0
 8009826:	677b      	str	r3, [r7, #116]	@ 0x74
 8009828:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800982c:	460b      	mov	r3, r1
 800982e:	4313      	orrs	r3, r2
 8009830:	d034      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800983c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009840:	d007      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8009842:	e011      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009844:	4b12      	ldr	r3, [pc, #72]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	4a11      	ldr	r2, [pc, #68]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800984a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800984e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009850:	e00e      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009856:	3308      	adds	r3, #8
 8009858:	2102      	movs	r1, #2
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fca4 	bl	800a1a8 <RCCEx_PLL2_Config>
 8009860:	4603      	mov	r3, r0
 8009862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009866:	e003      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800986e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009870:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10d      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009878:	4b05      	ldr	r3, [pc, #20]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800987a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800987c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009886:	4a02      	ldr	r2, [pc, #8]	@ (8009890 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009888:	430b      	orrs	r3, r1
 800988a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800988c:	e006      	b.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800988e:	bf00      	nop
 8009890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009894:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009898:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800989c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80098a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098aa:	2300      	movs	r3, #0
 80098ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80098b2:	460b      	mov	r3, r1
 80098b4:	4313      	orrs	r3, r2
 80098b6:	d00c      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098bc:	3328      	adds	r3, #40	@ 0x28
 80098be:	2102      	movs	r1, #2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fd23 	bl	800a30c <RCCEx_PLL3_Config>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80098d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80098de:	663b      	str	r3, [r7, #96]	@ 0x60
 80098e0:	2300      	movs	r3, #0
 80098e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80098e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80098e8:	460b      	mov	r3, r1
 80098ea:	4313      	orrs	r3, r2
 80098ec:	d038      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80098ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098fa:	d018      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80098fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009900:	d811      	bhi.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009906:	d014      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800990c:	d80b      	bhi.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d011      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8009912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009916:	d106      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009918:	4bc3      	ldr	r3, [pc, #780]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	4ac2      	ldr	r2, [pc, #776]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800991e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009924:	e008      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800992c:	e004      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800992e:	bf00      	nop
 8009930:	e002      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009932:	bf00      	nop
 8009934:	e000      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10b      	bne.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009940:	4bb9      	ldr	r3, [pc, #740]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009944:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800994c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009950:	4ab5      	ldr	r2, [pc, #724]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009952:	430b      	orrs	r3, r1
 8009954:	6553      	str	r3, [r2, #84]	@ 0x54
 8009956:	e003      	b.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800995c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800996c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800996e:	2300      	movs	r3, #0
 8009970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009972:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009976:	460b      	mov	r3, r1
 8009978:	4313      	orrs	r3, r2
 800997a:	d009      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800997c:	4baa      	ldr	r3, [pc, #680]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800997e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009980:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800998a:	4aa7      	ldr	r2, [pc, #668]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800998c:	430b      	orrs	r3, r1
 800998e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800999c:	653b      	str	r3, [r7, #80]	@ 0x50
 800999e:	2300      	movs	r3, #0
 80099a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80099a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80099a6:	460b      	mov	r3, r1
 80099a8:	4313      	orrs	r3, r2
 80099aa:	d009      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099ac:	4b9e      	ldr	r3, [pc, #632]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80099ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099b0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80099b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099ba:	4a9b      	ldr	r2, [pc, #620]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80099bc:	430b      	orrs	r3, r1
 80099be:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80099c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80099cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ce:	2300      	movs	r3, #0
 80099d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d009      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80099dc:	4b92      	ldr	r3, [pc, #584]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80099de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099e0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80099e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099ea:	4a8f      	ldr	r2, [pc, #572]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80099ec:	430b      	orrs	r3, r1
 80099ee:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80099fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80099fe:	2300      	movs	r3, #0
 8009a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009a06:	460b      	mov	r3, r1
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	d00e      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a0c:	4b86      	ldr	r3, [pc, #536]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	4a85      	ldr	r2, [pc, #532]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009a12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a16:	6113      	str	r3, [r2, #16]
 8009a18:	4b83      	ldr	r3, [pc, #524]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009a1a:	6919      	ldr	r1, [r3, #16]
 8009a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009a24:	4a80      	ldr	r2, [pc, #512]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009a26:	430b      	orrs	r3, r1
 8009a28:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a38:	2300      	movs	r3, #0
 8009a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009a40:	460b      	mov	r3, r1
 8009a42:	4313      	orrs	r3, r2
 8009a44:	d009      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a46:	4b78      	ldr	r3, [pc, #480]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a54:	4a74      	ldr	r2, [pc, #464]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009a56:	430b      	orrs	r3, r1
 8009a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a68:	2300      	movs	r3, #0
 8009a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009a70:	460b      	mov	r3, r1
 8009a72:	4313      	orrs	r3, r2
 8009a74:	d00a      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a76:	4b6c      	ldr	r3, [pc, #432]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a7a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a86:	4a68      	ldr	r2, [pc, #416]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	2100      	movs	r1, #0
 8009a96:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	d011      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aac:	3308      	adds	r3, #8
 8009aae:	2100      	movs	r1, #0
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 fb79 	bl	800a1a8 <RCCEx_PLL2_Config>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009abc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d003      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ac8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	6239      	str	r1, [r7, #32]
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ade:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	d011      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aec:	3308      	adds	r3, #8
 8009aee:	2101      	movs	r1, #1
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fb59 	bl	800a1a8 <RCCEx_PLL2_Config>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009afc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d003      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	2100      	movs	r1, #0
 8009b16:	61b9      	str	r1, [r7, #24]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	61fb      	str	r3, [r7, #28]
 8009b1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009b22:	460b      	mov	r3, r1
 8009b24:	4313      	orrs	r3, r2
 8009b26:	d011      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	2102      	movs	r1, #2
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 fb39 	bl	800a1a8 <RCCEx_PLL2_Config>
 8009b36:	4603      	mov	r3, r0
 8009b38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009b3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	2100      	movs	r1, #0
 8009b56:	6139      	str	r1, [r7, #16]
 8009b58:	f003 0308 	and.w	r3, r3, #8
 8009b5c:	617b      	str	r3, [r7, #20]
 8009b5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009b62:	460b      	mov	r3, r1
 8009b64:	4313      	orrs	r3, r2
 8009b66:	d011      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b6c:	3328      	adds	r3, #40	@ 0x28
 8009b6e:	2100      	movs	r1, #0
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fbcb 	bl	800a30c <RCCEx_PLL3_Config>
 8009b76:	4603      	mov	r3, r0
 8009b78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b94:	2100      	movs	r1, #0
 8009b96:	60b9      	str	r1, [r7, #8]
 8009b98:	f003 0310 	and.w	r3, r3, #16
 8009b9c:	60fb      	str	r3, [r7, #12]
 8009b9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	d011      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bac:	3328      	adds	r3, #40	@ 0x28
 8009bae:	2101      	movs	r1, #1
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 fbab 	bl	800a30c <RCCEx_PLL3_Config>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d003      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	6039      	str	r1, [r7, #0]
 8009bd8:	f003 0320 	and.w	r3, r3, #32
 8009bdc:	607b      	str	r3, [r7, #4]
 8009bde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009be2:	460b      	mov	r3, r1
 8009be4:	4313      	orrs	r3, r2
 8009be6:	d011      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bec:	3328      	adds	r3, #40	@ 0x28
 8009bee:	2102      	movs	r1, #2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fb8b 	bl	800a30c <RCCEx_PLL3_Config>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009bfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009c0c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	e000      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009c20:	46bd      	mov	sp, r7
 8009c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c26:	bf00      	nop
 8009c28:	58024400 	.word	0x58024400

08009c2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009c30:	f7fe fde2 	bl	80087f8 <HAL_RCC_GetHCLKFreq>
 8009c34:	4602      	mov	r2, r0
 8009c36:	4b06      	ldr	r3, [pc, #24]	@ (8009c50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	091b      	lsrs	r3, r3, #4
 8009c3c:	f003 0307 	and.w	r3, r3, #7
 8009c40:	4904      	ldr	r1, [pc, #16]	@ (8009c54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c42:	5ccb      	ldrb	r3, [r1, r3]
 8009c44:	f003 031f 	and.w	r3, r3, #31
 8009c48:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	58024400 	.word	0x58024400
 8009c54:	08013210 	.word	0x08013210

08009c58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b089      	sub	sp, #36	@ 0x24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c60:	4ba1      	ldr	r3, [pc, #644]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c64:	f003 0303 	and.w	r3, r3, #3
 8009c68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009c6a:	4b9f      	ldr	r3, [pc, #636]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6e:	0b1b      	lsrs	r3, r3, #12
 8009c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c76:	4b9c      	ldr	r3, [pc, #624]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7a:	091b      	lsrs	r3, r3, #4
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009c82:	4b99      	ldr	r3, [pc, #612]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c86:	08db      	lsrs	r3, r3, #3
 8009c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	fb02 f303 	mul.w	r3, r2, r3
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 8111 	beq.w	8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	f000 8083 	beq.w	8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	f200 80a1 	bhi.w	8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d056      	beq.n	8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009cc2:	e099      	b.n	8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cc4:	4b88      	ldr	r3, [pc, #544]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d02d      	beq.n	8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cd0:	4b85      	ldr	r3, [pc, #532]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	08db      	lsrs	r3, r3, #3
 8009cd6:	f003 0303 	and.w	r3, r3, #3
 8009cda:	4a84      	ldr	r2, [pc, #528]	@ (8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	ee07 3a90 	vmov	s15, r3
 8009ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d2a:	e087      	b.n	8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d6e:	e065      	b.n	8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	4b59      	ldr	r3, [pc, #356]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009db2:	e043      	b.n	8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc6:	4b48      	ldr	r3, [pc, #288]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009df6:	e021      	b.n	8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0a:	4b37      	ldr	r3, [pc, #220]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e40:	0a5b      	lsrs	r3, r3, #9
 8009e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e62:	ee17 2a90 	vmov	r2, s15
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e6e:	0c1b      	lsrs	r3, r3, #16
 8009e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e74:	ee07 3a90 	vmov	s15, r3
 8009e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e90:	ee17 2a90 	vmov	r2, s15
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009e98:	4b13      	ldr	r3, [pc, #76]	@ (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9c:	0e1b      	lsrs	r3, r3, #24
 8009e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ebe:	ee17 2a90 	vmov	r2, s15
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ec6:	e008      	b.n	8009eda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	609a      	str	r2, [r3, #8]
}
 8009eda:	bf00      	nop
 8009edc:	3724      	adds	r7, #36	@ 0x24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	58024400 	.word	0x58024400
 8009eec:	03d09000 	.word	0x03d09000
 8009ef0:	46000000 	.word	0x46000000
 8009ef4:	4c742400 	.word	0x4c742400
 8009ef8:	4a742400 	.word	0x4a742400
 8009efc:	4bb71b00 	.word	0x4bb71b00

08009f00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b089      	sub	sp, #36	@ 0x24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f08:	4ba1      	ldr	r3, [pc, #644]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0c:	f003 0303 	and.w	r3, r3, #3
 8009f10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f12:	4b9f      	ldr	r3, [pc, #636]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f16:	0d1b      	lsrs	r3, r3, #20
 8009f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f1e:	4b9c      	ldr	r3, [pc, #624]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f22:	0a1b      	lsrs	r3, r3, #8
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009f2a:	4b99      	ldr	r3, [pc, #612]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f2e:	08db      	lsrs	r3, r3, #3
 8009f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	fb02 f303 	mul.w	r3, r2, r3
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 8111 	beq.w	800a170 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	f000 8083 	beq.w	800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	f200 80a1 	bhi.w	800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d056      	beq.n	800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f6a:	e099      	b.n	800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f6c:	4b88      	ldr	r3, [pc, #544]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0320 	and.w	r3, r3, #32
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d02d      	beq.n	8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f78:	4b85      	ldr	r3, [pc, #532]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	08db      	lsrs	r3, r3, #3
 8009f7e:	f003 0303 	and.w	r3, r3, #3
 8009f82:	4a84      	ldr	r2, [pc, #528]	@ (800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f84:	fa22 f303 	lsr.w	r3, r2, r3
 8009f88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	ee07 3a90 	vmov	s15, r3
 8009f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fa2:	4b7b      	ldr	r3, [pc, #492]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fd2:	e087      	b.n	800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	ee07 3a90 	vmov	s15, r3
 8009fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe6:	4b6a      	ldr	r3, [pc, #424]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ffa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a016:	e065      	b.n	800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02a:	4b59      	ldr	r3, [pc, #356]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a05a:	e043      	b.n	800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	ee07 3a90 	vmov	s15, r3
 800a062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a066:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06e:	4b48      	ldr	r3, [pc, #288]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a082:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a09e:	e021      	b.n	800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	ee07 3a90 	vmov	s15, r3
 800a0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b2:	4b37      	ldr	r3, [pc, #220]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a0e4:	4b2a      	ldr	r3, [pc, #168]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e8:	0a5b      	lsrs	r3, r3, #9
 800a0ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a10a:	ee17 2a90 	vmov	r2, s15
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a112:	4b1f      	ldr	r3, [pc, #124]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a116:	0c1b      	lsrs	r3, r3, #16
 800a118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a11c:	ee07 3a90 	vmov	s15, r3
 800a120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a124:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a12c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a138:	ee17 2a90 	vmov	r2, s15
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a140:	4b13      	ldr	r3, [pc, #76]	@ (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a144:	0e1b      	lsrs	r3, r3, #24
 800a146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a15a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a15e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a166:	ee17 2a90 	vmov	r2, s15
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a16e:	e008      	b.n	800a182 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	609a      	str	r2, [r3, #8]
}
 800a182:	bf00      	nop
 800a184:	3724      	adds	r7, #36	@ 0x24
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	58024400 	.word	0x58024400
 800a194:	03d09000 	.word	0x03d09000
 800a198:	46000000 	.word	0x46000000
 800a19c:	4c742400 	.word	0x4c742400
 800a1a0:	4a742400 	.word	0x4a742400
 800a1a4:	4bb71b00 	.word	0x4bb71b00

0800a1a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1b6:	4b53      	ldr	r3, [pc, #332]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ba:	f003 0303 	and.w	r3, r3, #3
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d101      	bne.n	800a1c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e099      	b.n	800a2fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1c6:	4b4f      	ldr	r3, [pc, #316]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a4e      	ldr	r2, [pc, #312]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a1d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1d2:	f7f9 fc7d 	bl	8003ad0 <HAL_GetTick>
 800a1d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1d8:	e008      	b.n	800a1ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1da:	f7f9 fc79 	bl	8003ad0 <HAL_GetTick>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d901      	bls.n	800a1ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e086      	b.n	800a2fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1ec:	4b45      	ldr	r3, [pc, #276]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1f0      	bne.n	800a1da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a1f8:	4b42      	ldr	r3, [pc, #264]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	031b      	lsls	r3, r3, #12
 800a206:	493f      	ldr	r1, [pc, #252]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	3b01      	subs	r3, #1
 800a212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	025b      	lsls	r3, r3, #9
 800a21e:	b29b      	uxth	r3, r3
 800a220:	431a      	orrs	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	3b01      	subs	r3, #1
 800a228:	041b      	lsls	r3, r3, #16
 800a22a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a22e:	431a      	orrs	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	3b01      	subs	r3, #1
 800a236:	061b      	lsls	r3, r3, #24
 800a238:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a23c:	4931      	ldr	r1, [pc, #196]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a23e:	4313      	orrs	r3, r2
 800a240:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a242:	4b30      	ldr	r3, [pc, #192]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a246:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	492d      	ldr	r1, [pc, #180]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a250:	4313      	orrs	r3, r2
 800a252:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a254:	4b2b      	ldr	r3, [pc, #172]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a258:	f023 0220 	bic.w	r2, r3, #32
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	4928      	ldr	r1, [pc, #160]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a262:	4313      	orrs	r3, r2
 800a264:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a266:	4b27      	ldr	r3, [pc, #156]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26a:	4a26      	ldr	r2, [pc, #152]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a26c:	f023 0310 	bic.w	r3, r3, #16
 800a270:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a272:	4b24      	ldr	r3, [pc, #144]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a274:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a276:	4b24      	ldr	r3, [pc, #144]	@ (800a308 <RCCEx_PLL2_Config+0x160>)
 800a278:	4013      	ands	r3, r2
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	69d2      	ldr	r2, [r2, #28]
 800a27e:	00d2      	lsls	r2, r2, #3
 800a280:	4920      	ldr	r1, [pc, #128]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a282:	4313      	orrs	r3, r2
 800a284:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a286:	4b1f      	ldr	r3, [pc, #124]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28a:	4a1e      	ldr	r2, [pc, #120]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a28c:	f043 0310 	orr.w	r3, r3, #16
 800a290:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d106      	bne.n	800a2a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a298:	4b1a      	ldr	r3, [pc, #104]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29c:	4a19      	ldr	r2, [pc, #100]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a29e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2a4:	e00f      	b.n	800a2c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d106      	bne.n	800a2ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a2ac:	4b15      	ldr	r3, [pc, #84]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b0:	4a14      	ldr	r2, [pc, #80]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2b8:	e005      	b.n	800a2c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2ba:	4b12      	ldr	r3, [pc, #72]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2be:	4a11      	ldr	r2, [pc, #68]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a2c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a0e      	ldr	r2, [pc, #56]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a2d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2d2:	f7f9 fbfd 	bl	8003ad0 <HAL_GetTick>
 800a2d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2d8:	e008      	b.n	800a2ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2da:	f7f9 fbf9 	bl	8003ad0 <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d901      	bls.n	800a2ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e006      	b.n	800a2fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2ec:	4b05      	ldr	r3, [pc, #20]	@ (800a304 <RCCEx_PLL2_Config+0x15c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d0f0      	beq.n	800a2da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	58024400 	.word	0x58024400
 800a308:	ffff0007 	.word	0xffff0007

0800a30c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a31a:	4b53      	ldr	r3, [pc, #332]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a31e:	f003 0303 	and.w	r3, r3, #3
 800a322:	2b03      	cmp	r3, #3
 800a324:	d101      	bne.n	800a32a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e099      	b.n	800a45e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a32a:	4b4f      	ldr	r3, [pc, #316]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a4e      	ldr	r2, [pc, #312]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a336:	f7f9 fbcb 	bl	8003ad0 <HAL_GetTick>
 800a33a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a33c:	e008      	b.n	800a350 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a33e:	f7f9 fbc7 	bl	8003ad0 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d901      	bls.n	800a350 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e086      	b.n	800a45e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a350:	4b45      	ldr	r3, [pc, #276]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1f0      	bne.n	800a33e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a35c:	4b42      	ldr	r3, [pc, #264]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a360:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	051b      	lsls	r3, r3, #20
 800a36a:	493f      	ldr	r1, [pc, #252]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	3b01      	subs	r3, #1
 800a376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	3b01      	subs	r3, #1
 800a380:	025b      	lsls	r3, r3, #9
 800a382:	b29b      	uxth	r3, r3
 800a384:	431a      	orrs	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	041b      	lsls	r3, r3, #16
 800a38e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	3b01      	subs	r3, #1
 800a39a:	061b      	lsls	r3, r3, #24
 800a39c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a3a0:	4931      	ldr	r1, [pc, #196]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3a6:	4b30      	ldr	r3, [pc, #192]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	492d      	ldr	r1, [pc, #180]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3b8:	4b2b      	ldr	r3, [pc, #172]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	4928      	ldr	r1, [pc, #160]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3ca:	4b27      	ldr	r3, [pc, #156]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ce:	4a26      	ldr	r2, [pc, #152]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3d6:	4b24      	ldr	r3, [pc, #144]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3da:	4b24      	ldr	r3, [pc, #144]	@ (800a46c <RCCEx_PLL3_Config+0x160>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	69d2      	ldr	r2, [r2, #28]
 800a3e2:	00d2      	lsls	r2, r2, #3
 800a3e4:	4920      	ldr	r1, [pc, #128]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3ea:	4b1f      	ldr	r3, [pc, #124]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ee:	4a1e      	ldr	r2, [pc, #120]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d106      	bne.n	800a40a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a3fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	4a19      	ldr	r2, [pc, #100]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a402:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a406:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a408:	e00f      	b.n	800a42a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d106      	bne.n	800a41e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a410:	4b15      	ldr	r3, [pc, #84]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a414:	4a14      	ldr	r2, [pc, #80]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a416:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a41a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a41c:	e005      	b.n	800a42a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a41e:	4b12      	ldr	r3, [pc, #72]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a422:	4a11      	ldr	r2, [pc, #68]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a424:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a428:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a42a:	4b0f      	ldr	r3, [pc, #60]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a0e      	ldr	r2, [pc, #56]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a436:	f7f9 fb4b 	bl	8003ad0 <HAL_GetTick>
 800a43a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a43c:	e008      	b.n	800a450 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a43e:	f7f9 fb47 	bl	8003ad0 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d901      	bls.n	800a450 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e006      	b.n	800a45e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a450:	4b05      	ldr	r3, [pc, #20]	@ (800a468 <RCCEx_PLL3_Config+0x15c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d0f0      	beq.n	800a43e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	58024400 	.word	0x58024400
 800a46c:	ffff0007 	.word	0xffff0007

0800a470 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e10f      	b.n	800a6a2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a87      	ldr	r2, [pc, #540]	@ (800a6ac <HAL_SPI_Init+0x23c>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d00f      	beq.n	800a4b2 <HAL_SPI_Init+0x42>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a86      	ldr	r2, [pc, #536]	@ (800a6b0 <HAL_SPI_Init+0x240>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00a      	beq.n	800a4b2 <HAL_SPI_Init+0x42>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a84      	ldr	r2, [pc, #528]	@ (800a6b4 <HAL_SPI_Init+0x244>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d005      	beq.n	800a4b2 <HAL_SPI_Init+0x42>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	2b0f      	cmp	r3, #15
 800a4ac:	d901      	bls.n	800a4b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e0f7      	b.n	800a6a2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 f968 	bl	800b788 <SPI_GetPacketSize>
 800a4b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a7b      	ldr	r2, [pc, #492]	@ (800a6ac <HAL_SPI_Init+0x23c>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d00c      	beq.n	800a4de <HAL_SPI_Init+0x6e>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a79      	ldr	r2, [pc, #484]	@ (800a6b0 <HAL_SPI_Init+0x240>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d007      	beq.n	800a4de <HAL_SPI_Init+0x6e>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a78      	ldr	r2, [pc, #480]	@ (800a6b4 <HAL_SPI_Init+0x244>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d002      	beq.n	800a4de <HAL_SPI_Init+0x6e>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b08      	cmp	r3, #8
 800a4dc:	d811      	bhi.n	800a502 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a4e2:	4a72      	ldr	r2, [pc, #456]	@ (800a6ac <HAL_SPI_Init+0x23c>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d009      	beq.n	800a4fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a70      	ldr	r2, [pc, #448]	@ (800a6b0 <HAL_SPI_Init+0x240>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d004      	beq.n	800a4fc <HAL_SPI_Init+0x8c>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a6f      	ldr	r2, [pc, #444]	@ (800a6b4 <HAL_SPI_Init+0x244>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d104      	bne.n	800a506 <HAL_SPI_Init+0x96>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b10      	cmp	r3, #16
 800a500:	d901      	bls.n	800a506 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e0cd      	b.n	800a6a2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d106      	bne.n	800a520 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7f8 fa6a 	bl	80029f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 0201 	bic.w	r2, r2, #1
 800a536:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a542:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a54c:	d119      	bne.n	800a582 <HAL_SPI_Init+0x112>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a556:	d103      	bne.n	800a560 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d008      	beq.n	800a572 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10c      	bne.n	800a582 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a56c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a570:	d107      	bne.n	800a582 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a580:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00f      	beq.n	800a5ae <HAL_SPI_Init+0x13e>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	2b06      	cmp	r3, #6
 800a594:	d90b      	bls.n	800a5ae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	e007      	b.n	800a5be <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a5bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	69da      	ldr	r2, [r3, #28]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5d0:	ea42 0103 	orr.w	r1, r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	431a      	orrs	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	431a      	orrs	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	431a      	orrs	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	431a      	orrs	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a612:	431a      	orrs	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	431a      	orrs	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a61e:	ea42 0103 	orr.w	r1, r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d113      	bne.n	800a65e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a648:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a65c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f022 0201 	bic.w	r2, r2, #1
 800a66c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	40013000 	.word	0x40013000
 800a6b0:	40003800 	.word	0x40003800
 800a6b4:	40003c00 	.word	0x40003c00

0800a6b8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	603b      	str	r3, [r7, #0]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3320      	adds	r3, #32
 800a6ce:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6d0:	f7f9 f9fe 	bl	8003ad0 <HAL_GetTick>
 800a6d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d001      	beq.n	800a6e6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	e1d1      	b.n	800aa8a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <HAL_SPI_Transmit+0x3a>
 800a6ec:	88fb      	ldrh	r3, [r7, #6]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e1c9      	b.n	800aa8a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_SPI_Transmit+0x4c>
 800a700:	2302      	movs	r3, #2
 800a702:	e1c2      	b.n	800aa8a <HAL_SPI_Transmit+0x3d2>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2203      	movs	r2, #3
 800a710:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	88fa      	ldrh	r2, [r7, #6]
 800a726:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	88fa      	ldrh	r2, [r7, #6]
 800a72e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a75c:	d108      	bne.n	800a770 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	e009      	b.n	800a784 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a782:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	4b96      	ldr	r3, [pc, #600]	@ (800a9e4 <HAL_SPI_Transmit+0x32c>)
 800a78c:	4013      	ands	r3, r2
 800a78e:	88f9      	ldrh	r1, [r7, #6]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	6812      	ldr	r2, [r2, #0]
 800a794:	430b      	orrs	r3, r1
 800a796:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0201 	orr.w	r2, r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7b0:	d107      	bne.n	800a7c2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	2b0f      	cmp	r3, #15
 800a7c8:	d947      	bls.n	800a85a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a7ca:	e03f      	b.n	800a84c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d114      	bne.n	800a804 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6812      	ldr	r2, [r2, #0]
 800a7e4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7ea:	1d1a      	adds	r2, r3, #4
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a802:	e023      	b.n	800a84c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a804:	f7f9 f964 	bl	8003ad0 <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	429a      	cmp	r2, r3
 800a812:	d803      	bhi.n	800a81c <HAL_SPI_Transmit+0x164>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81a:	d102      	bne.n	800a822 <HAL_SPI_Transmit+0x16a>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d114      	bne.n	800a84c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 fee2 	bl	800b5ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a82e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	e11e      	b.n	800aa8a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a852:	b29b      	uxth	r3, r3
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1b9      	bne.n	800a7cc <HAL_SPI_Transmit+0x114>
 800a858:	e0f1      	b.n	800aa3e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	2b07      	cmp	r3, #7
 800a860:	f240 80e6 	bls.w	800aa30 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a864:	e05d      	b.n	800a922 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b02      	cmp	r3, #2
 800a872:	d132      	bne.n	800a8da <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d918      	bls.n	800a8b2 <HAL_SPI_Transmit+0x1fa>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a884:	2b00      	cmp	r3, #0
 800a886:	d014      	beq.n	800a8b2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6812      	ldr	r2, [r2, #0]
 800a892:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a898:	1d1a      	adds	r2, r3, #4
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	3b02      	subs	r3, #2
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a8b0:	e037      	b.n	800a922 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8b6:	881a      	ldrh	r2, [r3, #0]
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8c0:	1c9a      	adds	r2, r3, #2
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a8d8:	e023      	b.n	800a922 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8da:	f7f9 f8f9 	bl	8003ad0 <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d803      	bhi.n	800a8f2 <HAL_SPI_Transmit+0x23a>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f0:	d102      	bne.n	800a8f8 <HAL_SPI_Transmit+0x240>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d114      	bne.n	800a922 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 fe77 	bl	800b5ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a904:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e0b3      	b.n	800aa8a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a928:	b29b      	uxth	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d19b      	bne.n	800a866 <HAL_SPI_Transmit+0x1ae>
 800a92e:	e086      	b.n	800aa3e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d154      	bne.n	800a9e8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a944:	b29b      	uxth	r3, r3
 800a946:	2b03      	cmp	r3, #3
 800a948:	d918      	bls.n	800a97c <HAL_SPI_Transmit+0x2c4>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a94e:	2b40      	cmp	r3, #64	@ 0x40
 800a950:	d914      	bls.n	800a97c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	6812      	ldr	r2, [r2, #0]
 800a95c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a962:	1d1a      	adds	r2, r3, #4
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a96e:	b29b      	uxth	r3, r3
 800a970:	3b04      	subs	r3, #4
 800a972:	b29a      	uxth	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a97a:	e059      	b.n	800aa30 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a982:	b29b      	uxth	r3, r3
 800a984:	2b01      	cmp	r3, #1
 800a986:	d917      	bls.n	800a9b8 <HAL_SPI_Transmit+0x300>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d013      	beq.n	800a9b8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a994:	881a      	ldrh	r2, [r3, #0]
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a99e:	1c9a      	adds	r2, r3, #2
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	3b02      	subs	r3, #2
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a9b6:	e03b      	b.n	800aa30 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3320      	adds	r3, #32
 800a9c2:	7812      	ldrb	r2, [r2, #0]
 800a9c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a9e2:	e025      	b.n	800aa30 <HAL_SPI_Transmit+0x378>
 800a9e4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9e8:	f7f9 f872 	bl	8003ad0 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d803      	bhi.n	800aa00 <HAL_SPI_Transmit+0x348>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fe:	d102      	bne.n	800aa06 <HAL_SPI_Transmit+0x34e>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d114      	bne.n	800aa30 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f000 fdf0 	bl	800b5ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e02c      	b.n	800aa8a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f47f af79 	bne.w	800a930 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2200      	movs	r2, #0
 800aa46:	2108      	movs	r1, #8
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 fe6f 	bl	800b72c <SPI_WaitOnFlagUntilTimeout>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d007      	beq.n	800aa64 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa5a:	f043 0220 	orr.w	r2, r3, #32
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 fdc1 	bl	800b5ec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e000      	b.n	800aa8a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800aa88:	2300      	movs	r3, #0
  }
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop

0800aa94 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa8:	095b      	lsrs	r3, r3, #5
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	3301      	adds	r3, #1
 800aaae:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3330      	adds	r3, #48	@ 0x30
 800aab6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aab8:	f7f9 f80a 	bl	8003ad0 <HAL_GetTick>
 800aabc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d001      	beq.n	800aace <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800aaca:	2302      	movs	r3, #2
 800aacc:	e250      	b.n	800af70 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <HAL_SPI_Receive+0x46>
 800aad4:	88fb      	ldrh	r3, [r7, #6]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e248      	b.n	800af70 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d101      	bne.n	800aaec <HAL_SPI_Receive+0x58>
 800aae8:	2302      	movs	r3, #2
 800aaea:	e241      	b.n	800af70 <HAL_SPI_Receive+0x4dc>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2204      	movs	r2, #4
 800aaf8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	88fa      	ldrh	r2, [r7, #6]
 800ab0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	88fa      	ldrh	r2, [r7, #6]
 800ab16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ab44:	d108      	bne.n	800ab58 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	e009      	b.n	800ab6c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ab6a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	4b95      	ldr	r3, [pc, #596]	@ (800adc8 <HAL_SPI_Receive+0x334>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	88f9      	ldrh	r1, [r7, #6]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	6812      	ldr	r2, [r2, #0]
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f042 0201 	orr.w	r2, r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab98:	d107      	bne.n	800abaa <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aba8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	2b0f      	cmp	r3, #15
 800abb0:	d96c      	bls.n	800ac8c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800abb2:	e064      	b.n	800ac7e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d114      	bne.n	800abf4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abd2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800abd4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abda:	1d1a      	adds	r2, r3, #4
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	3b01      	subs	r3, #1
 800abea:	b29a      	uxth	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800abf2:	e044      	b.n	800ac7e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	8bfa      	ldrh	r2, [r7, #30]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d919      	bls.n	800ac36 <HAL_SPI_Receive+0x1a2>
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d014      	beq.n	800ac36 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ac16:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac1c:	1d1a      	adds	r2, r3, #4
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ac34:	e023      	b.n	800ac7e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac36:	f7f8 ff4b 	bl	8003ad0 <HAL_GetTick>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d803      	bhi.n	800ac4e <HAL_SPI_Receive+0x1ba>
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4c:	d102      	bne.n	800ac54 <HAL_SPI_Receive+0x1c0>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d114      	bne.n	800ac7e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 fcc9 	bl	800b5ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e178      	b.n	800af70 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d194      	bne.n	800abb4 <HAL_SPI_Receive+0x120>
 800ac8a:	e15e      	b.n	800af4a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	2b07      	cmp	r3, #7
 800ac92:	f240 8153 	bls.w	800af3c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ac96:	e08f      	b.n	800adb8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d114      	bne.n	800acd8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acb2:	69ba      	ldr	r2, [r7, #24]
 800acb4:	8812      	ldrh	r2, [r2, #0]
 800acb6:	b292      	uxth	r2, r2
 800acb8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acbe:	1c9a      	adds	r2, r3, #2
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acca:	b29b      	uxth	r3, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	b29a      	uxth	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800acd6:	e06f      	b.n	800adb8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acde:	b29b      	uxth	r3, r3
 800ace0:	8bfa      	ldrh	r2, [r7, #30]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d924      	bls.n	800ad30 <HAL_SPI_Receive+0x29c>
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01f      	beq.n	800ad30 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	8812      	ldrh	r2, [r2, #0]
 800acf8:	b292      	uxth	r2, r2
 800acfa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad00:	1c9a      	adds	r2, r3, #2
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	8812      	ldrh	r2, [r2, #0]
 800ad0e:	b292      	uxth	r2, r2
 800ad10:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad16:	1c9a      	adds	r2, r3, #2
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	3b02      	subs	r3, #2
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ad2e:	e043      	b.n	800adb8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d119      	bne.n	800ad70 <HAL_SPI_Receive+0x2dc>
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d014      	beq.n	800ad70 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	8812      	ldrh	r2, [r2, #0]
 800ad4e:	b292      	uxth	r2, r2
 800ad50:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad56:	1c9a      	adds	r2, r3, #2
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	3b01      	subs	r3, #1
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ad6e:	e023      	b.n	800adb8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad70:	f7f8 feae 	bl	8003ad0 <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d803      	bhi.n	800ad88 <HAL_SPI_Receive+0x2f4>
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad86:	d102      	bne.n	800ad8e <HAL_SPI_Receive+0x2fa>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d114      	bne.n	800adb8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f000 fc2c 	bl	800b5ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800adb4:	2303      	movs	r3, #3
 800adb6:	e0db      	b.n	800af70 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f47f af69 	bne.w	800ac98 <HAL_SPI_Receive+0x204>
 800adc6:	e0c0      	b.n	800af4a <HAL_SPI_Receive+0x4b6>
 800adc8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d117      	bne.n	800ae12 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adee:	7812      	ldrb	r2, [r2, #0]
 800adf0:	b2d2      	uxtb	r2, r2
 800adf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	3b01      	subs	r3, #1
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ae10:	e094      	b.n	800af3c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	8bfa      	ldrh	r2, [r7, #30]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d946      	bls.n	800aeae <HAL_SPI_Receive+0x41a>
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d041      	beq.n	800aeae <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae36:	7812      	ldrb	r2, [r2, #0]
 800ae38:	b2d2      	uxtb	r2, r2
 800ae3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae52:	7812      	ldrb	r2, [r2, #0]
 800ae54:	b2d2      	uxtb	r2, r2
 800ae56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae6e:	7812      	ldrb	r2, [r2, #0]
 800ae70:	b2d2      	uxtb	r2, r2
 800ae72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae8a:	7812      	ldrb	r2, [r2, #0]
 800ae8c:	b2d2      	uxtb	r2, r2
 800ae8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae94:	1c5a      	adds	r2, r3, #1
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	3b04      	subs	r3, #4
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aeac:	e046      	b.n	800af3c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d81c      	bhi.n	800aef4 <HAL_SPI_Receive+0x460>
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d017      	beq.n	800aef4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aed0:	7812      	ldrb	r2, [r2, #0]
 800aed2:	b2d2      	uxtb	r2, r2
 800aed4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	3b01      	subs	r3, #1
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aef2:	e023      	b.n	800af3c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aef4:	f7f8 fdec 	bl	8003ad0 <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	429a      	cmp	r2, r3
 800af02:	d803      	bhi.n	800af0c <HAL_SPI_Receive+0x478>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0a:	d102      	bne.n	800af12 <HAL_SPI_Receive+0x47e>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d114      	bne.n	800af3c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 fb6a 	bl	800b5ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e019      	b.n	800af70 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af42:	b29b      	uxth	r3, r3
 800af44:	2b00      	cmp	r3, #0
 800af46:	f47f af41 	bne.w	800adcc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f000 fb4e 	bl	800b5ec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	e000      	b.n	800af70 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800af6e:	2300      	movs	r3, #0
  }
}
 800af70:	4618      	mov	r0, r3
 800af72:	3720      	adds	r7, #32
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08e      	sub	sp, #56	@ 0x38
 800af7c:	af02      	add	r7, sp, #8
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3320      	adds	r3, #32
 800af8c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3330      	adds	r3, #48	@ 0x30
 800af94:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af9a:	095b      	lsrs	r3, r3, #5
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	3301      	adds	r3, #1
 800afa0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800afa2:	f7f8 fd95 	bl	8003ad0 <HAL_GetTick>
 800afa6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800afa8:	887b      	ldrh	r3, [r7, #2]
 800afaa:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800afac:	887b      	ldrh	r3, [r7, #2]
 800afae:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d001      	beq.n	800afc0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800afbc:	2302      	movs	r3, #2
 800afbe:	e310      	b.n	800b5e2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d005      	beq.n	800afd2 <HAL_SPI_TransmitReceive+0x5a>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <HAL_SPI_TransmitReceive+0x5a>
 800afcc:	887b      	ldrh	r3, [r7, #2]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e305      	b.n	800b5e2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d101      	bne.n	800afe4 <HAL_SPI_TransmitReceive+0x6c>
 800afe0:	2302      	movs	r3, #2
 800afe2:	e2fe      	b.n	800b5e2 <HAL_SPI_TransmitReceive+0x66a>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2205      	movs	r2, #5
 800aff0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	887a      	ldrh	r2, [r7, #2]
 800b006:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	887a      	ldrh	r2, [r7, #2]
 800b00e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	887a      	ldrh	r2, [r7, #2]
 800b01c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	887a      	ldrh	r2, [r7, #2]
 800b024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2200      	movs	r2, #0
 800b02c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68da      	ldr	r2, [r3, #12]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b042:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a70      	ldr	r2, [pc, #448]	@ (800b20c <HAL_SPI_TransmitReceive+0x294>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d009      	beq.n	800b062 <HAL_SPI_TransmitReceive+0xea>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a6f      	ldr	r2, [pc, #444]	@ (800b210 <HAL_SPI_TransmitReceive+0x298>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d004      	beq.n	800b062 <HAL_SPI_TransmitReceive+0xea>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a6d      	ldr	r2, [pc, #436]	@ (800b214 <HAL_SPI_TransmitReceive+0x29c>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d102      	bne.n	800b068 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800b062:	2310      	movs	r3, #16
 800b064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b066:	e001      	b.n	800b06c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800b068:	2308      	movs	r3, #8
 800b06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	4b69      	ldr	r3, [pc, #420]	@ (800b218 <HAL_SPI_TransmitReceive+0x2a0>)
 800b074:	4013      	ands	r3, r2
 800b076:	8879      	ldrh	r1, [r7, #2]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	6812      	ldr	r2, [r2, #0]
 800b07c:	430b      	orrs	r3, r1
 800b07e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f042 0201 	orr.w	r2, r2, #1
 800b08e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b098:	d107      	bne.n	800b0aa <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	2b0f      	cmp	r3, #15
 800b0b0:	f240 80a2 	bls.w	800b1f8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b6:	089b      	lsrs	r3, r3, #2
 800b0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b0ba:	e094      	b.n	800b1e6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d120      	bne.n	800b10c <HAL_SPI_TransmitReceive+0x194>
 800b0ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d01d      	beq.n	800b10c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b0d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b0d2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d217      	bcs.n	800b10c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6812      	ldr	r2, [r2, #0]
 800b0e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0ec:	1d1a      	adds	r2, r3, #4
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b10a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b114:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b116:	2b00      	cmp	r3, #0
 800b118:	d065      	beq.n	800b1e6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b01      	cmp	r3, #1
 800b126:	d118      	bne.n	800b15a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b130:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b132:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b138:	1d1a      	adds	r2, r3, #4
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b144:	b29b      	uxth	r3, r3
 800b146:	3b01      	subs	r3, #1
 800b148:	b29a      	uxth	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b156:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b158:	e045      	b.n	800b1e6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b15a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b15c:	8bfb      	ldrh	r3, [r7, #30]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d21d      	bcs.n	800b19e <HAL_SPI_TransmitReceive+0x226>
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d018      	beq.n	800b19e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b174:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b176:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b17c:	1d1a      	adds	r2, r3, #4
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b188:	b29b      	uxth	r3, r3
 800b18a:	3b01      	subs	r3, #1
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b19a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b19c:	e023      	b.n	800b1e6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b19e:	f7f8 fc97 	bl	8003ad0 <HAL_GetTick>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d803      	bhi.n	800b1b6 <HAL_SPI_TransmitReceive+0x23e>
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b4:	d102      	bne.n	800b1bc <HAL_SPI_TransmitReceive+0x244>
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d114      	bne.n	800b1e6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 fa15 	bl	800b5ec <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e1fd      	b.n	800b5e2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b1e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f47f af67 	bne.w	800b0bc <HAL_SPI_TransmitReceive+0x144>
 800b1ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f47f af63 	bne.w	800b0bc <HAL_SPI_TransmitReceive+0x144>
 800b1f6:	e1ce      	b.n	800b596 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	2b07      	cmp	r3, #7
 800b1fe:	f240 81c2 	bls.w	800b586 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b204:	085b      	lsrs	r3, r3, #1
 800b206:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b208:	e0c9      	b.n	800b39e <HAL_SPI_TransmitReceive+0x426>
 800b20a:	bf00      	nop
 800b20c:	40013000 	.word	0x40013000
 800b210:	40003800 	.word	0x40003800
 800b214:	40003c00 	.word	0x40003c00
 800b218:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	f003 0302 	and.w	r3, r3, #2
 800b226:	2b02      	cmp	r3, #2
 800b228:	d11f      	bne.n	800b26a <HAL_SPI_TransmitReceive+0x2f2>
 800b22a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d01c      	beq.n	800b26a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b230:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b232:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b236:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b238:	429a      	cmp	r2, r3
 800b23a:	d216      	bcs.n	800b26a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b240:	881a      	ldrh	r2, [r3, #0]
 800b242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b244:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b24a:	1c9a      	adds	r2, r3, #2
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b256:	b29b      	uxth	r3, r3
 800b258:	3b01      	subs	r3, #1
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b268:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b272:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 8092 	beq.w	800b39e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b01      	cmp	r3, #1
 800b286:	d118      	bne.n	800b2ba <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b28c:	6a3a      	ldr	r2, [r7, #32]
 800b28e:	8812      	ldrh	r2, [r2, #0]
 800b290:	b292      	uxth	r2, r2
 800b292:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b298:	1c9a      	adds	r2, r3, #2
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b2b8:	e071      	b.n	800b39e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b2ba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b2bc:	8bfb      	ldrh	r3, [r7, #30]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d228      	bcs.n	800b314 <HAL_SPI_TransmitReceive+0x39c>
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d023      	beq.n	800b314 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2d0:	6a3a      	ldr	r2, [r7, #32]
 800b2d2:	8812      	ldrh	r2, [r2, #0]
 800b2d4:	b292      	uxth	r2, r2
 800b2d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2dc:	1c9a      	adds	r2, r3, #2
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2e6:	6a3a      	ldr	r2, [r7, #32]
 800b2e8:	8812      	ldrh	r2, [r2, #0]
 800b2ea:	b292      	uxth	r2, r2
 800b2ec:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2f2:	1c9a      	adds	r2, r3, #2
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	3b02      	subs	r3, #2
 800b302:	b29a      	uxth	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b310:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b312:	e044      	b.n	800b39e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b314:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b316:	2b01      	cmp	r3, #1
 800b318:	d11d      	bne.n	800b356 <HAL_SPI_TransmitReceive+0x3de>
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d018      	beq.n	800b356 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b328:	6a3a      	ldr	r2, [r7, #32]
 800b32a:	8812      	ldrh	r2, [r2, #0]
 800b32c:	b292      	uxth	r2, r2
 800b32e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b334:	1c9a      	adds	r2, r3, #2
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b340:	b29b      	uxth	r3, r3
 800b342:	3b01      	subs	r3, #1
 800b344:	b29a      	uxth	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b352:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b354:	e023      	b.n	800b39e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b356:	f7f8 fbbb 	bl	8003ad0 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b362:	429a      	cmp	r2, r3
 800b364:	d803      	bhi.n	800b36e <HAL_SPI_TransmitReceive+0x3f6>
 800b366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36c:	d102      	bne.n	800b374 <HAL_SPI_TransmitReceive+0x3fc>
 800b36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b370:	2b00      	cmp	r3, #0
 800b372:	d114      	bne.n	800b39e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f939 	bl	800b5ec <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b380:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e121      	b.n	800b5e2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b39e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f47f af3b 	bne.w	800b21c <HAL_SPI_TransmitReceive+0x2a4>
 800b3a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f47f af37 	bne.w	800b21c <HAL_SPI_TransmitReceive+0x2a4>
 800b3ae:	e0f2      	b.n	800b596 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	f003 0302 	and.w	r3, r3, #2
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d121      	bne.n	800b402 <HAL_SPI_TransmitReceive+0x48a>
 800b3be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d01e      	beq.n	800b402 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b3c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b3c6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d218      	bcs.n	800b402 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3320      	adds	r3, #32
 800b3da:	7812      	ldrb	r2, [r2, #0]
 800b3dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3e2:	1c5a      	adds	r2, r3, #1
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b400:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b40a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 80ba 	beq.w	800b586 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d11b      	bne.n	800b458 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b42c:	7812      	ldrb	r2, [r2, #0]
 800b42e:	b2d2      	uxtb	r2, r2
 800b430:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b436:	1c5a      	adds	r2, r3, #1
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b442:	b29b      	uxth	r3, r3
 800b444:	3b01      	subs	r3, #1
 800b446:	b29a      	uxth	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b454:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b456:	e096      	b.n	800b586 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b458:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b45a:	8bfb      	ldrh	r3, [r7, #30]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d24a      	bcs.n	800b4f6 <HAL_SPI_TransmitReceive+0x57e>
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d045      	beq.n	800b4f6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b476:	7812      	ldrb	r2, [r2, #0]
 800b478:	b2d2      	uxtb	r2, r2
 800b47a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b492:	7812      	ldrb	r2, [r2, #0]
 800b494:	b2d2      	uxtb	r2, r2
 800b496:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4ae:	7812      	ldrb	r2, [r2, #0]
 800b4b0:	b2d2      	uxtb	r2, r2
 800b4b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4ca:	7812      	ldrb	r2, [r2, #0]
 800b4cc:	b2d2      	uxtb	r2, r2
 800b4ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	3b04      	subs	r3, #4
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b4f4:	e047      	b.n	800b586 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b4f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d820      	bhi.n	800b53e <HAL_SPI_TransmitReceive+0x5c6>
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d01b      	beq.n	800b53e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b512:	7812      	ldrb	r2, [r2, #0]
 800b514:	b2d2      	uxtb	r2, r2
 800b516:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b51c:	1c5a      	adds	r2, r3, #1
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b528:	b29b      	uxth	r3, r3
 800b52a:	3b01      	subs	r3, #1
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b53a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b53c:	e023      	b.n	800b586 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b53e:	f7f8 fac7 	bl	8003ad0 <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d803      	bhi.n	800b556 <HAL_SPI_TransmitReceive+0x5de>
 800b54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b554:	d102      	bne.n	800b55c <HAL_SPI_TransmitReceive+0x5e4>
 800b556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d114      	bne.n	800b586 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f000 f845 	bl	800b5ec <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b568:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e02d      	b.n	800b5e2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b586:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f47f af11 	bne.w	800b3b0 <HAL_SPI_TransmitReceive+0x438>
 800b58e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b590:	2b00      	cmp	r3, #0
 800b592:	f47f af0d 	bne.w	800b3b0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59c:	2200      	movs	r2, #0
 800b59e:	2108      	movs	r1, #8
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 f8c3 	bl	800b72c <SPI_WaitOnFlagUntilTimeout>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d007      	beq.n	800b5bc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5b2:	f043 0220 	orr.w	r2, r3, #32
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 f815 	bl	800b5ec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d001      	beq.n	800b5e0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e000      	b.n	800b5e2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
  }
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3730      	adds	r7, #48	@ 0x30
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop

0800b5ec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	699a      	ldr	r2, [r3, #24]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f042 0208 	orr.w	r2, r2, #8
 800b60a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	699a      	ldr	r2, [r3, #24]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f042 0210 	orr.w	r2, r2, #16
 800b61a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f022 0201 	bic.w	r2, r2, #1
 800b62a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6919      	ldr	r1, [r3, #16]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	4b3c      	ldr	r3, [pc, #240]	@ (800b728 <SPI_CloseTransfer+0x13c>)
 800b638:	400b      	ands	r3, r1
 800b63a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689a      	ldr	r2, [r3, #8]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b64a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b04      	cmp	r3, #4
 800b656:	d014      	beq.n	800b682 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f003 0320 	and.w	r3, r3, #32
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00f      	beq.n	800b682 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b668:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	699a      	ldr	r2, [r3, #24]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f042 0220 	orr.w	r2, r2, #32
 800b680:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d014      	beq.n	800b6b8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b694:	2b00      	cmp	r3, #0
 800b696:	d00f      	beq.n	800b6b8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b69e:	f043 0204 	orr.w	r2, r3, #4
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	699a      	ldr	r2, [r3, #24]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6b6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00f      	beq.n	800b6e2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6c8:	f043 0201 	orr.w	r2, r3, #1
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	699a      	ldr	r2, [r3, #24]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6e0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00f      	beq.n	800b70c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6f2:	f043 0208 	orr.w	r2, r3, #8
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	699a      	ldr	r2, [r3, #24]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b70a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b71c:	bf00      	nop
 800b71e:	3714      	adds	r7, #20
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	fffffc90 	.word	0xfffffc90

0800b72c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	603b      	str	r3, [r7, #0]
 800b738:	4613      	mov	r3, r2
 800b73a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b73c:	e010      	b.n	800b760 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b73e:	f7f8 f9c7 	bl	8003ad0 <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d803      	bhi.n	800b756 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b754:	d102      	bne.n	800b75c <SPI_WaitOnFlagUntilTimeout+0x30>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b75c:	2303      	movs	r3, #3
 800b75e:	e00f      	b.n	800b780 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	695a      	ldr	r2, [r3, #20]
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	4013      	ands	r3, r2
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	bf0c      	ite	eq
 800b770:	2301      	moveq	r3, #1
 800b772:	2300      	movne	r3, #0
 800b774:	b2db      	uxtb	r3, r3
 800b776:	461a      	mov	r2, r3
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d0df      	beq.n	800b73e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b794:	095b      	lsrs	r3, r3, #5
 800b796:	3301      	adds	r3, #1
 800b798:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	3307      	adds	r3, #7
 800b7a6:	08db      	lsrs	r3, r3, #3
 800b7a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	fb02 f303 	mul.w	r3, r2, r3
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d101      	bne.n	800b7d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e049      	b.n	800b864 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d106      	bne.n	800b7ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7f7 fcd3 	bl	8003190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2202      	movs	r2, #2
 800b7ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	f000 fc57 	bl	800c0b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d001      	beq.n	800b884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e054      	b.n	800b92e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2202      	movs	r2, #2
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68da      	ldr	r2, [r3, #12]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f042 0201 	orr.w	r2, r2, #1
 800b89a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a26      	ldr	r2, [pc, #152]	@ (800b93c <HAL_TIM_Base_Start_IT+0xd0>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d022      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8ae:	d01d      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a22      	ldr	r2, [pc, #136]	@ (800b940 <HAL_TIM_Base_Start_IT+0xd4>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d018      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a21      	ldr	r2, [pc, #132]	@ (800b944 <HAL_TIM_Base_Start_IT+0xd8>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d013      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a1f      	ldr	r2, [pc, #124]	@ (800b948 <HAL_TIM_Base_Start_IT+0xdc>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d00e      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a1e      	ldr	r2, [pc, #120]	@ (800b94c <HAL_TIM_Base_Start_IT+0xe0>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d009      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a1c      	ldr	r2, [pc, #112]	@ (800b950 <HAL_TIM_Base_Start_IT+0xe4>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d004      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x80>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a1b      	ldr	r2, [pc, #108]	@ (800b954 <HAL_TIM_Base_Start_IT+0xe8>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d115      	bne.n	800b918 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689a      	ldr	r2, [r3, #8]
 800b8f2:	4b19      	ldr	r3, [pc, #100]	@ (800b958 <HAL_TIM_Base_Start_IT+0xec>)
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b06      	cmp	r3, #6
 800b8fc:	d015      	beq.n	800b92a <HAL_TIM_Base_Start_IT+0xbe>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b904:	d011      	beq.n	800b92a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f042 0201 	orr.w	r2, r2, #1
 800b914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b916:	e008      	b.n	800b92a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f042 0201 	orr.w	r2, r2, #1
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	e000      	b.n	800b92c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b92a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	40010000 	.word	0x40010000
 800b940:	40000400 	.word	0x40000400
 800b944:	40000800 	.word	0x40000800
 800b948:	40000c00 	.word	0x40000c00
 800b94c:	40010400 	.word	0x40010400
 800b950:	40001800 	.word	0x40001800
 800b954:	40014000 	.word	0x40014000
 800b958:	00010007 	.word	0x00010007

0800b95c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e049      	b.n	800ba02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d106      	bne.n	800b988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7f7 fbb6 	bl	80030f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2202      	movs	r2, #2
 800b98c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3304      	adds	r3, #4
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f000 fb88 	bl	800c0b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d109      	bne.n	800ba30 <HAL_TIM_PWM_Start+0x24>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	bf14      	ite	ne
 800ba28:	2301      	movne	r3, #1
 800ba2a:	2300      	moveq	r3, #0
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	e03c      	b.n	800baaa <HAL_TIM_PWM_Start+0x9e>
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	2b04      	cmp	r3, #4
 800ba34:	d109      	bne.n	800ba4a <HAL_TIM_PWM_Start+0x3e>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	bf14      	ite	ne
 800ba42:	2301      	movne	r3, #1
 800ba44:	2300      	moveq	r3, #0
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	e02f      	b.n	800baaa <HAL_TIM_PWM_Start+0x9e>
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b08      	cmp	r3, #8
 800ba4e:	d109      	bne.n	800ba64 <HAL_TIM_PWM_Start+0x58>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	bf14      	ite	ne
 800ba5c:	2301      	movne	r3, #1
 800ba5e:	2300      	moveq	r3, #0
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	e022      	b.n	800baaa <HAL_TIM_PWM_Start+0x9e>
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b0c      	cmp	r3, #12
 800ba68:	d109      	bne.n	800ba7e <HAL_TIM_PWM_Start+0x72>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	bf14      	ite	ne
 800ba76:	2301      	movne	r3, #1
 800ba78:	2300      	moveq	r3, #0
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	e015      	b.n	800baaa <HAL_TIM_PWM_Start+0x9e>
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	2b10      	cmp	r3, #16
 800ba82:	d109      	bne.n	800ba98 <HAL_TIM_PWM_Start+0x8c>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	bf14      	ite	ne
 800ba90:	2301      	movne	r3, #1
 800ba92:	2300      	moveq	r3, #0
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	e008      	b.n	800baaa <HAL_TIM_PWM_Start+0x9e>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	bf14      	ite	ne
 800baa4:	2301      	movne	r3, #1
 800baa6:	2300      	moveq	r3, #0
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e0a1      	b.n	800bbf6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d104      	bne.n	800bac2 <HAL_TIM_PWM_Start+0xb6>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2202      	movs	r2, #2
 800babc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bac0:	e023      	b.n	800bb0a <HAL_TIM_PWM_Start+0xfe>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b04      	cmp	r3, #4
 800bac6:	d104      	bne.n	800bad2 <HAL_TIM_PWM_Start+0xc6>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2202      	movs	r2, #2
 800bacc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bad0:	e01b      	b.n	800bb0a <HAL_TIM_PWM_Start+0xfe>
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b08      	cmp	r3, #8
 800bad6:	d104      	bne.n	800bae2 <HAL_TIM_PWM_Start+0xd6>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2202      	movs	r2, #2
 800badc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bae0:	e013      	b.n	800bb0a <HAL_TIM_PWM_Start+0xfe>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b0c      	cmp	r3, #12
 800bae6:	d104      	bne.n	800baf2 <HAL_TIM_PWM_Start+0xe6>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2202      	movs	r2, #2
 800baec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800baf0:	e00b      	b.n	800bb0a <HAL_TIM_PWM_Start+0xfe>
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	2b10      	cmp	r3, #16
 800baf6:	d104      	bne.n	800bb02 <HAL_TIM_PWM_Start+0xf6>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2202      	movs	r2, #2
 800bafc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb00:	e003      	b.n	800bb0a <HAL_TIM_PWM_Start+0xfe>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2202      	movs	r2, #2
 800bb06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 fe48 	bl	800c7a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a38      	ldr	r2, [pc, #224]	@ (800bc00 <HAL_TIM_PWM_Start+0x1f4>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d013      	beq.n	800bb4a <HAL_TIM_PWM_Start+0x13e>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a37      	ldr	r2, [pc, #220]	@ (800bc04 <HAL_TIM_PWM_Start+0x1f8>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d00e      	beq.n	800bb4a <HAL_TIM_PWM_Start+0x13e>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a35      	ldr	r2, [pc, #212]	@ (800bc08 <HAL_TIM_PWM_Start+0x1fc>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d009      	beq.n	800bb4a <HAL_TIM_PWM_Start+0x13e>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a34      	ldr	r2, [pc, #208]	@ (800bc0c <HAL_TIM_PWM_Start+0x200>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d004      	beq.n	800bb4a <HAL_TIM_PWM_Start+0x13e>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a32      	ldr	r2, [pc, #200]	@ (800bc10 <HAL_TIM_PWM_Start+0x204>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d101      	bne.n	800bb4e <HAL_TIM_PWM_Start+0x142>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <HAL_TIM_PWM_Start+0x144>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d007      	beq.n	800bb64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a25      	ldr	r2, [pc, #148]	@ (800bc00 <HAL_TIM_PWM_Start+0x1f4>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d022      	beq.n	800bbb4 <HAL_TIM_PWM_Start+0x1a8>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb76:	d01d      	beq.n	800bbb4 <HAL_TIM_PWM_Start+0x1a8>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a25      	ldr	r2, [pc, #148]	@ (800bc14 <HAL_TIM_PWM_Start+0x208>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d018      	beq.n	800bbb4 <HAL_TIM_PWM_Start+0x1a8>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a24      	ldr	r2, [pc, #144]	@ (800bc18 <HAL_TIM_PWM_Start+0x20c>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d013      	beq.n	800bbb4 <HAL_TIM_PWM_Start+0x1a8>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a22      	ldr	r2, [pc, #136]	@ (800bc1c <HAL_TIM_PWM_Start+0x210>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d00e      	beq.n	800bbb4 <HAL_TIM_PWM_Start+0x1a8>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a1a      	ldr	r2, [pc, #104]	@ (800bc04 <HAL_TIM_PWM_Start+0x1f8>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d009      	beq.n	800bbb4 <HAL_TIM_PWM_Start+0x1a8>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a1e      	ldr	r2, [pc, #120]	@ (800bc20 <HAL_TIM_PWM_Start+0x214>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d004      	beq.n	800bbb4 <HAL_TIM_PWM_Start+0x1a8>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a16      	ldr	r2, [pc, #88]	@ (800bc08 <HAL_TIM_PWM_Start+0x1fc>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d115      	bne.n	800bbe0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689a      	ldr	r2, [r3, #8]
 800bbba:	4b1a      	ldr	r3, [pc, #104]	@ (800bc24 <HAL_TIM_PWM_Start+0x218>)
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b06      	cmp	r3, #6
 800bbc4:	d015      	beq.n	800bbf2 <HAL_TIM_PWM_Start+0x1e6>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbcc:	d011      	beq.n	800bbf2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f042 0201 	orr.w	r2, r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbde:	e008      	b.n	800bbf2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f042 0201 	orr.w	r2, r2, #1
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	e000      	b.n	800bbf4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	40010000 	.word	0x40010000
 800bc04:	40010400 	.word	0x40010400
 800bc08:	40014000 	.word	0x40014000
 800bc0c:	40014400 	.word	0x40014400
 800bc10:	40014800 	.word	0x40014800
 800bc14:	40000400 	.word	0x40000400
 800bc18:	40000800 	.word	0x40000800
 800bc1c:	40000c00 	.word	0x40000c00
 800bc20:	40001800 	.word	0x40001800
 800bc24:	00010007 	.word	0x00010007

0800bc28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f003 0302 	and.w	r3, r3, #2
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d020      	beq.n	800bc8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f003 0302 	and.w	r3, r3, #2
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d01b      	beq.n	800bc8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f06f 0202 	mvn.w	r2, #2
 800bc5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	699b      	ldr	r3, [r3, #24]
 800bc6a:	f003 0303 	and.w	r3, r3, #3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f9fe 	bl	800c074 <HAL_TIM_IC_CaptureCallback>
 800bc78:	e005      	b.n	800bc86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f9f0 	bl	800c060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fa01 	bl	800c088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	f003 0304 	and.w	r3, r3, #4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d020      	beq.n	800bcd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f003 0304 	and.w	r3, r3, #4
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d01b      	beq.n	800bcd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f06f 0204 	mvn.w	r2, #4
 800bca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2202      	movs	r2, #2
 800bcae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	699b      	ldr	r3, [r3, #24]
 800bcb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f9d8 	bl	800c074 <HAL_TIM_IC_CaptureCallback>
 800bcc4:	e005      	b.n	800bcd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f9ca 	bl	800c060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 f9db 	bl	800c088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	f003 0308 	and.w	r3, r3, #8
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d020      	beq.n	800bd24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f003 0308 	and.w	r3, r3, #8
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d01b      	beq.n	800bd24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f06f 0208 	mvn.w	r2, #8
 800bcf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2204      	movs	r2, #4
 800bcfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	f003 0303 	and.w	r3, r3, #3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f9b2 	bl	800c074 <HAL_TIM_IC_CaptureCallback>
 800bd10:	e005      	b.n	800bd1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f9a4 	bl	800c060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f9b5 	bl	800c088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f003 0310 	and.w	r3, r3, #16
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d020      	beq.n	800bd70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f003 0310 	and.w	r3, r3, #16
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d01b      	beq.n	800bd70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f06f 0210 	mvn.w	r2, #16
 800bd40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2208      	movs	r2, #8
 800bd46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d003      	beq.n	800bd5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f98c 	bl	800c074 <HAL_TIM_IC_CaptureCallback>
 800bd5c:	e005      	b.n	800bd6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f97e 	bl	800c060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f98f 	bl	800c088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	f003 0301 	and.w	r3, r3, #1
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00c      	beq.n	800bd94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f003 0301 	and.w	r3, r3, #1
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d007      	beq.n	800bd94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f06f 0201 	mvn.w	r2, #1
 800bd8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7f6 fd34 	bl	80027fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d104      	bne.n	800bda8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00c      	beq.n	800bdc2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d007      	beq.n	800bdc2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bdba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fdb1 	bl	800c924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00c      	beq.n	800bde6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d007      	beq.n	800bde6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bdde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fda9 	bl	800c938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00c      	beq.n	800be0a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d007      	beq.n	800be0a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800be02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 f949 	bl	800c09c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	f003 0320 	and.w	r3, r3, #32
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00c      	beq.n	800be2e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f003 0320 	and.w	r3, r3, #32
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d007      	beq.n	800be2e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f06f 0220 	mvn.w	r2, #32
 800be26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fd71 	bl	800c910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be2e:	bf00      	nop
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
	...

0800be38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d101      	bne.n	800be56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800be52:	2302      	movs	r3, #2
 800be54:	e0ff      	b.n	800c056 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b14      	cmp	r3, #20
 800be62:	f200 80f0 	bhi.w	800c046 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800be66:	a201      	add	r2, pc, #4	@ (adr r2, 800be6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800bec1 	.word	0x0800bec1
 800be70:	0800c047 	.word	0x0800c047
 800be74:	0800c047 	.word	0x0800c047
 800be78:	0800c047 	.word	0x0800c047
 800be7c:	0800bf01 	.word	0x0800bf01
 800be80:	0800c047 	.word	0x0800c047
 800be84:	0800c047 	.word	0x0800c047
 800be88:	0800c047 	.word	0x0800c047
 800be8c:	0800bf43 	.word	0x0800bf43
 800be90:	0800c047 	.word	0x0800c047
 800be94:	0800c047 	.word	0x0800c047
 800be98:	0800c047 	.word	0x0800c047
 800be9c:	0800bf83 	.word	0x0800bf83
 800bea0:	0800c047 	.word	0x0800c047
 800bea4:	0800c047 	.word	0x0800c047
 800bea8:	0800c047 	.word	0x0800c047
 800beac:	0800bfc5 	.word	0x0800bfc5
 800beb0:	0800c047 	.word	0x0800c047
 800beb4:	0800c047 	.word	0x0800c047
 800beb8:	0800c047 	.word	0x0800c047
 800bebc:	0800c005 	.word	0x0800c005
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68b9      	ldr	r1, [r7, #8]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 f998 	bl	800c1fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	699a      	ldr	r2, [r3, #24]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f042 0208 	orr.w	r2, r2, #8
 800beda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	699a      	ldr	r2, [r3, #24]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f022 0204 	bic.w	r2, r2, #4
 800beea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6999      	ldr	r1, [r3, #24]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	691a      	ldr	r2, [r3, #16]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	619a      	str	r2, [r3, #24]
      break;
 800befe:	e0a5      	b.n	800c04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 fa08 	bl	800c31c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	699a      	ldr	r2, [r3, #24]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	699a      	ldr	r2, [r3, #24]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6999      	ldr	r1, [r3, #24]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	021a      	lsls	r2, r3, #8
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	430a      	orrs	r2, r1
 800bf3e:	619a      	str	r2, [r3, #24]
      break;
 800bf40:	e084      	b.n	800c04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 fa71 	bl	800c430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	69da      	ldr	r2, [r3, #28]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f042 0208 	orr.w	r2, r2, #8
 800bf5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	69da      	ldr	r2, [r3, #28]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f022 0204 	bic.w	r2, r2, #4
 800bf6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	69d9      	ldr	r1, [r3, #28]
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	691a      	ldr	r2, [r3, #16]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	61da      	str	r2, [r3, #28]
      break;
 800bf80:	e064      	b.n	800c04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 fad9 	bl	800c540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	69da      	ldr	r2, [r3, #28]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	69da      	ldr	r2, [r3, #28]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bfac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	69d9      	ldr	r1, [r3, #28]
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	021a      	lsls	r2, r3, #8
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	61da      	str	r2, [r3, #28]
      break;
 800bfc2:	e043      	b.n	800c04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68b9      	ldr	r1, [r7, #8]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 fb22 	bl	800c614 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f042 0208 	orr.w	r2, r2, #8
 800bfde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f022 0204 	bic.w	r2, r2, #4
 800bfee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	691a      	ldr	r2, [r3, #16]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	430a      	orrs	r2, r1
 800c000:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c002:	e023      	b.n	800c04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 fb66 	bl	800c6dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c01e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c02e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	021a      	lsls	r2, r3, #8
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	430a      	orrs	r2, r1
 800c042:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c044:	e002      	b.n	800c04c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	75fb      	strb	r3, [r7, #23]
      break;
 800c04a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c054:	7dfb      	ldrb	r3, [r7, #23]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3718      	adds	r7, #24
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop

0800c060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0a4:	bf00      	nop
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a46      	ldr	r2, [pc, #280]	@ (800c1dc <TIM_Base_SetConfig+0x12c>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d013      	beq.n	800c0f0 <TIM_Base_SetConfig+0x40>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ce:	d00f      	beq.n	800c0f0 <TIM_Base_SetConfig+0x40>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a43      	ldr	r2, [pc, #268]	@ (800c1e0 <TIM_Base_SetConfig+0x130>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d00b      	beq.n	800c0f0 <TIM_Base_SetConfig+0x40>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a42      	ldr	r2, [pc, #264]	@ (800c1e4 <TIM_Base_SetConfig+0x134>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d007      	beq.n	800c0f0 <TIM_Base_SetConfig+0x40>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a41      	ldr	r2, [pc, #260]	@ (800c1e8 <TIM_Base_SetConfig+0x138>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d003      	beq.n	800c0f0 <TIM_Base_SetConfig+0x40>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a40      	ldr	r2, [pc, #256]	@ (800c1ec <TIM_Base_SetConfig+0x13c>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d108      	bne.n	800c102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a35      	ldr	r2, [pc, #212]	@ (800c1dc <TIM_Base_SetConfig+0x12c>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d01f      	beq.n	800c14a <TIM_Base_SetConfig+0x9a>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c110:	d01b      	beq.n	800c14a <TIM_Base_SetConfig+0x9a>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4a32      	ldr	r2, [pc, #200]	@ (800c1e0 <TIM_Base_SetConfig+0x130>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d017      	beq.n	800c14a <TIM_Base_SetConfig+0x9a>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4a31      	ldr	r2, [pc, #196]	@ (800c1e4 <TIM_Base_SetConfig+0x134>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d013      	beq.n	800c14a <TIM_Base_SetConfig+0x9a>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a30      	ldr	r2, [pc, #192]	@ (800c1e8 <TIM_Base_SetConfig+0x138>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d00f      	beq.n	800c14a <TIM_Base_SetConfig+0x9a>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a2f      	ldr	r2, [pc, #188]	@ (800c1ec <TIM_Base_SetConfig+0x13c>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d00b      	beq.n	800c14a <TIM_Base_SetConfig+0x9a>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a2e      	ldr	r2, [pc, #184]	@ (800c1f0 <TIM_Base_SetConfig+0x140>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d007      	beq.n	800c14a <TIM_Base_SetConfig+0x9a>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a2d      	ldr	r2, [pc, #180]	@ (800c1f4 <TIM_Base_SetConfig+0x144>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d003      	beq.n	800c14a <TIM_Base_SetConfig+0x9a>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4a2c      	ldr	r2, [pc, #176]	@ (800c1f8 <TIM_Base_SetConfig+0x148>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d108      	bne.n	800c15c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	4313      	orrs	r3, r2
 800c15a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	4313      	orrs	r3, r2
 800c168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	689a      	ldr	r2, [r3, #8]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a16      	ldr	r2, [pc, #88]	@ (800c1dc <TIM_Base_SetConfig+0x12c>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d00f      	beq.n	800c1a8 <TIM_Base_SetConfig+0xf8>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a18      	ldr	r2, [pc, #96]	@ (800c1ec <TIM_Base_SetConfig+0x13c>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00b      	beq.n	800c1a8 <TIM_Base_SetConfig+0xf8>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a17      	ldr	r2, [pc, #92]	@ (800c1f0 <TIM_Base_SetConfig+0x140>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d007      	beq.n	800c1a8 <TIM_Base_SetConfig+0xf8>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a16      	ldr	r2, [pc, #88]	@ (800c1f4 <TIM_Base_SetConfig+0x144>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d003      	beq.n	800c1a8 <TIM_Base_SetConfig+0xf8>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a15      	ldr	r2, [pc, #84]	@ (800c1f8 <TIM_Base_SetConfig+0x148>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d103      	bne.n	800c1b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	691a      	ldr	r2, [r3, #16]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	f003 0301 	and.w	r3, r3, #1
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d105      	bne.n	800c1ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	f023 0201 	bic.w	r2, r3, #1
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	611a      	str	r2, [r3, #16]
  }
}
 800c1ce:	bf00      	nop
 800c1d0:	3714      	adds	r7, #20
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	40010000 	.word	0x40010000
 800c1e0:	40000400 	.word	0x40000400
 800c1e4:	40000800 	.word	0x40000800
 800c1e8:	40000c00 	.word	0x40000c00
 800c1ec:	40010400 	.word	0x40010400
 800c1f0:	40014000 	.word	0x40014000
 800c1f4:	40014400 	.word	0x40014400
 800c1f8:	40014800 	.word	0x40014800

0800c1fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b087      	sub	sp, #28
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a1b      	ldr	r3, [r3, #32]
 800c20a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a1b      	ldr	r3, [r3, #32]
 800c210:	f023 0201 	bic.w	r2, r3, #1
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	4b37      	ldr	r3, [pc, #220]	@ (800c304 <TIM_OC1_SetConfig+0x108>)
 800c228:	4013      	ands	r3, r2
 800c22a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f023 0303 	bic.w	r3, r3, #3
 800c232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f023 0302 	bic.w	r3, r3, #2
 800c244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a2d      	ldr	r2, [pc, #180]	@ (800c308 <TIM_OC1_SetConfig+0x10c>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d00f      	beq.n	800c278 <TIM_OC1_SetConfig+0x7c>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a2c      	ldr	r2, [pc, #176]	@ (800c30c <TIM_OC1_SetConfig+0x110>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d00b      	beq.n	800c278 <TIM_OC1_SetConfig+0x7c>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a2b      	ldr	r2, [pc, #172]	@ (800c310 <TIM_OC1_SetConfig+0x114>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d007      	beq.n	800c278 <TIM_OC1_SetConfig+0x7c>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a2a      	ldr	r2, [pc, #168]	@ (800c314 <TIM_OC1_SetConfig+0x118>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d003      	beq.n	800c278 <TIM_OC1_SetConfig+0x7c>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a29      	ldr	r2, [pc, #164]	@ (800c318 <TIM_OC1_SetConfig+0x11c>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d10c      	bne.n	800c292 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f023 0308 	bic.w	r3, r3, #8
 800c27e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	4313      	orrs	r3, r2
 800c288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f023 0304 	bic.w	r3, r3, #4
 800c290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a1c      	ldr	r2, [pc, #112]	@ (800c308 <TIM_OC1_SetConfig+0x10c>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00f      	beq.n	800c2ba <TIM_OC1_SetConfig+0xbe>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a1b      	ldr	r2, [pc, #108]	@ (800c30c <TIM_OC1_SetConfig+0x110>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00b      	beq.n	800c2ba <TIM_OC1_SetConfig+0xbe>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a1a      	ldr	r2, [pc, #104]	@ (800c310 <TIM_OC1_SetConfig+0x114>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d007      	beq.n	800c2ba <TIM_OC1_SetConfig+0xbe>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a19      	ldr	r2, [pc, #100]	@ (800c314 <TIM_OC1_SetConfig+0x118>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d003      	beq.n	800c2ba <TIM_OC1_SetConfig+0xbe>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a18      	ldr	r2, [pc, #96]	@ (800c318 <TIM_OC1_SetConfig+0x11c>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d111      	bne.n	800c2de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c2c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	695b      	ldr	r3, [r3, #20]
 800c2ce:	693a      	ldr	r2, [r7, #16]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	621a      	str	r2, [r3, #32]
}
 800c2f8:	bf00      	nop
 800c2fa:	371c      	adds	r7, #28
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr
 800c304:	fffeff8f 	.word	0xfffeff8f
 800c308:	40010000 	.word	0x40010000
 800c30c:	40010400 	.word	0x40010400
 800c310:	40014000 	.word	0x40014000
 800c314:	40014400 	.word	0x40014400
 800c318:	40014800 	.word	0x40014800

0800c31c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6a1b      	ldr	r3, [r3, #32]
 800c330:	f023 0210 	bic.w	r2, r3, #16
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	699b      	ldr	r3, [r3, #24]
 800c342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	4b34      	ldr	r3, [pc, #208]	@ (800c418 <TIM_OC2_SetConfig+0xfc>)
 800c348:	4013      	ands	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	021b      	lsls	r3, r3, #8
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	f023 0320 	bic.w	r3, r3, #32
 800c366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	011b      	lsls	r3, r3, #4
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	4313      	orrs	r3, r2
 800c372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4a29      	ldr	r2, [pc, #164]	@ (800c41c <TIM_OC2_SetConfig+0x100>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d003      	beq.n	800c384 <TIM_OC2_SetConfig+0x68>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a28      	ldr	r2, [pc, #160]	@ (800c420 <TIM_OC2_SetConfig+0x104>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d10d      	bne.n	800c3a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	011b      	lsls	r3, r3, #4
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	4313      	orrs	r3, r2
 800c396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c39e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a1e      	ldr	r2, [pc, #120]	@ (800c41c <TIM_OC2_SetConfig+0x100>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d00f      	beq.n	800c3c8 <TIM_OC2_SetConfig+0xac>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a1d      	ldr	r2, [pc, #116]	@ (800c420 <TIM_OC2_SetConfig+0x104>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d00b      	beq.n	800c3c8 <TIM_OC2_SetConfig+0xac>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a1c      	ldr	r2, [pc, #112]	@ (800c424 <TIM_OC2_SetConfig+0x108>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d007      	beq.n	800c3c8 <TIM_OC2_SetConfig+0xac>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c428 <TIM_OC2_SetConfig+0x10c>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d003      	beq.n	800c3c8 <TIM_OC2_SetConfig+0xac>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a1a      	ldr	r2, [pc, #104]	@ (800c42c <TIM_OC2_SetConfig+0x110>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d113      	bne.n	800c3f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c3ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c3d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	695b      	ldr	r3, [r3, #20]
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	693a      	ldr	r2, [r7, #16]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	685a      	ldr	r2, [r3, #4]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	621a      	str	r2, [r3, #32]
}
 800c40a:	bf00      	nop
 800c40c:	371c      	adds	r7, #28
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	feff8fff 	.word	0xfeff8fff
 800c41c:	40010000 	.word	0x40010000
 800c420:	40010400 	.word	0x40010400
 800c424:	40014000 	.word	0x40014000
 800c428:	40014400 	.word	0x40014400
 800c42c:	40014800 	.word	0x40014800

0800c430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a1b      	ldr	r3, [r3, #32]
 800c444:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	69db      	ldr	r3, [r3, #28]
 800c456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	4b33      	ldr	r3, [pc, #204]	@ (800c528 <TIM_OC3_SetConfig+0xf8>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f023 0303 	bic.w	r3, r3, #3
 800c466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	4313      	orrs	r3, r2
 800c470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	021b      	lsls	r3, r3, #8
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	4313      	orrs	r3, r2
 800c484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a28      	ldr	r2, [pc, #160]	@ (800c52c <TIM_OC3_SetConfig+0xfc>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d003      	beq.n	800c496 <TIM_OC3_SetConfig+0x66>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a27      	ldr	r2, [pc, #156]	@ (800c530 <TIM_OC3_SetConfig+0x100>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d10d      	bne.n	800c4b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c49c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	021b      	lsls	r3, r3, #8
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c4b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a1d      	ldr	r2, [pc, #116]	@ (800c52c <TIM_OC3_SetConfig+0xfc>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d00f      	beq.n	800c4da <TIM_OC3_SetConfig+0xaa>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a1c      	ldr	r2, [pc, #112]	@ (800c530 <TIM_OC3_SetConfig+0x100>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d00b      	beq.n	800c4da <TIM_OC3_SetConfig+0xaa>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a1b      	ldr	r2, [pc, #108]	@ (800c534 <TIM_OC3_SetConfig+0x104>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d007      	beq.n	800c4da <TIM_OC3_SetConfig+0xaa>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c538 <TIM_OC3_SetConfig+0x108>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d003      	beq.n	800c4da <TIM_OC3_SetConfig+0xaa>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a19      	ldr	r2, [pc, #100]	@ (800c53c <TIM_OC3_SetConfig+0x10c>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d113      	bne.n	800c502 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c4e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	695b      	ldr	r3, [r3, #20]
 800c4ee:	011b      	lsls	r3, r3, #4
 800c4f0:	693a      	ldr	r2, [r7, #16]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	011b      	lsls	r3, r3, #4
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	621a      	str	r2, [r3, #32]
}
 800c51c:	bf00      	nop
 800c51e:	371c      	adds	r7, #28
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr
 800c528:	fffeff8f 	.word	0xfffeff8f
 800c52c:	40010000 	.word	0x40010000
 800c530:	40010400 	.word	0x40010400
 800c534:	40014000 	.word	0x40014000
 800c538:	40014400 	.word	0x40014400
 800c53c:	40014800 	.word	0x40014800

0800c540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c540:	b480      	push	{r7}
 800c542:	b087      	sub	sp, #28
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a1b      	ldr	r3, [r3, #32]
 800c54e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6a1b      	ldr	r3, [r3, #32]
 800c554:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	69db      	ldr	r3, [r3, #28]
 800c566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4b24      	ldr	r3, [pc, #144]	@ (800c5fc <TIM_OC4_SetConfig+0xbc>)
 800c56c:	4013      	ands	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	021b      	lsls	r3, r3, #8
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	4313      	orrs	r3, r2
 800c582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c58a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	031b      	lsls	r3, r3, #12
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	4313      	orrs	r3, r2
 800c596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a19      	ldr	r2, [pc, #100]	@ (800c600 <TIM_OC4_SetConfig+0xc0>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d00f      	beq.n	800c5c0 <TIM_OC4_SetConfig+0x80>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a18      	ldr	r2, [pc, #96]	@ (800c604 <TIM_OC4_SetConfig+0xc4>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d00b      	beq.n	800c5c0 <TIM_OC4_SetConfig+0x80>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a17      	ldr	r2, [pc, #92]	@ (800c608 <TIM_OC4_SetConfig+0xc8>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d007      	beq.n	800c5c0 <TIM_OC4_SetConfig+0x80>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a16      	ldr	r2, [pc, #88]	@ (800c60c <TIM_OC4_SetConfig+0xcc>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d003      	beq.n	800c5c0 <TIM_OC4_SetConfig+0x80>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a15      	ldr	r2, [pc, #84]	@ (800c610 <TIM_OC4_SetConfig+0xd0>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d109      	bne.n	800c5d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	695b      	ldr	r3, [r3, #20]
 800c5cc:	019b      	lsls	r3, r3, #6
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	685a      	ldr	r2, [r3, #4]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	621a      	str	r2, [r3, #32]
}
 800c5ee:	bf00      	nop
 800c5f0:	371c      	adds	r7, #28
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	feff8fff 	.word	0xfeff8fff
 800c600:	40010000 	.word	0x40010000
 800c604:	40010400 	.word	0x40010400
 800c608:	40014000 	.word	0x40014000
 800c60c:	40014400 	.word	0x40014400
 800c610:	40014800 	.word	0x40014800

0800c614 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c614:	b480      	push	{r7}
 800c616:	b087      	sub	sp, #28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6a1b      	ldr	r3, [r3, #32]
 800c622:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4b21      	ldr	r3, [pc, #132]	@ (800c6c4 <TIM_OC5_SetConfig+0xb0>)
 800c640:	4013      	ands	r3, r2
 800c642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c654:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	041b      	lsls	r3, r3, #16
 800c65c:	693a      	ldr	r2, [r7, #16]
 800c65e:	4313      	orrs	r3, r2
 800c660:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a18      	ldr	r2, [pc, #96]	@ (800c6c8 <TIM_OC5_SetConfig+0xb4>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d00f      	beq.n	800c68a <TIM_OC5_SetConfig+0x76>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a17      	ldr	r2, [pc, #92]	@ (800c6cc <TIM_OC5_SetConfig+0xb8>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d00b      	beq.n	800c68a <TIM_OC5_SetConfig+0x76>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a16      	ldr	r2, [pc, #88]	@ (800c6d0 <TIM_OC5_SetConfig+0xbc>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d007      	beq.n	800c68a <TIM_OC5_SetConfig+0x76>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a15      	ldr	r2, [pc, #84]	@ (800c6d4 <TIM_OC5_SetConfig+0xc0>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d003      	beq.n	800c68a <TIM_OC5_SetConfig+0x76>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a14      	ldr	r2, [pc, #80]	@ (800c6d8 <TIM_OC5_SetConfig+0xc4>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d109      	bne.n	800c69e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c690:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	021b      	lsls	r3, r3, #8
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	685a      	ldr	r2, [r3, #4]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	621a      	str	r2, [r3, #32]
}
 800c6b8:	bf00      	nop
 800c6ba:	371c      	adds	r7, #28
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	fffeff8f 	.word	0xfffeff8f
 800c6c8:	40010000 	.word	0x40010000
 800c6cc:	40010400 	.word	0x40010400
 800c6d0:	40014000 	.word	0x40014000
 800c6d4:	40014400 	.word	0x40014400
 800c6d8:	40014800 	.word	0x40014800

0800c6dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a1b      	ldr	r3, [r3, #32]
 800c6ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a1b      	ldr	r3, [r3, #32]
 800c6f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	4b22      	ldr	r3, [pc, #136]	@ (800c790 <TIM_OC6_SetConfig+0xb4>)
 800c708:	4013      	ands	r3, r2
 800c70a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	021b      	lsls	r3, r3, #8
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	4313      	orrs	r3, r2
 800c716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c71e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	051b      	lsls	r3, r3, #20
 800c726:	693a      	ldr	r2, [r7, #16]
 800c728:	4313      	orrs	r3, r2
 800c72a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a19      	ldr	r2, [pc, #100]	@ (800c794 <TIM_OC6_SetConfig+0xb8>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d00f      	beq.n	800c754 <TIM_OC6_SetConfig+0x78>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a18      	ldr	r2, [pc, #96]	@ (800c798 <TIM_OC6_SetConfig+0xbc>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d00b      	beq.n	800c754 <TIM_OC6_SetConfig+0x78>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a17      	ldr	r2, [pc, #92]	@ (800c79c <TIM_OC6_SetConfig+0xc0>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d007      	beq.n	800c754 <TIM_OC6_SetConfig+0x78>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a16      	ldr	r2, [pc, #88]	@ (800c7a0 <TIM_OC6_SetConfig+0xc4>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d003      	beq.n	800c754 <TIM_OC6_SetConfig+0x78>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a15      	ldr	r2, [pc, #84]	@ (800c7a4 <TIM_OC6_SetConfig+0xc8>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d109      	bne.n	800c768 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c75a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	029b      	lsls	r3, r3, #10
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	4313      	orrs	r3, r2
 800c766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	621a      	str	r2, [r3, #32]
}
 800c782:	bf00      	nop
 800c784:	371c      	adds	r7, #28
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	feff8fff 	.word	0xfeff8fff
 800c794:	40010000 	.word	0x40010000
 800c798:	40010400 	.word	0x40010400
 800c79c:	40014000 	.word	0x40014000
 800c7a0:	40014400 	.word	0x40014400
 800c7a4:	40014800 	.word	0x40014800

0800c7a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b087      	sub	sp, #28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f003 031f 	and.w	r3, r3, #31
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6a1a      	ldr	r2, [r3, #32]
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	43db      	mvns	r3, r3
 800c7ca:	401a      	ands	r2, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6a1a      	ldr	r2, [r3, #32]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	f003 031f 	and.w	r3, r3, #31
 800c7da:	6879      	ldr	r1, [r7, #4]
 800c7dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	621a      	str	r2, [r3, #32]
}
 800c7e6:	bf00      	nop
 800c7e8:	371c      	adds	r7, #28
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c804:	2b01      	cmp	r3, #1
 800c806:	d101      	bne.n	800c80c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c808:	2302      	movs	r3, #2
 800c80a:	e06d      	b.n	800c8e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2202      	movs	r2, #2
 800c818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a30      	ldr	r2, [pc, #192]	@ (800c8f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d004      	beq.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a2f      	ldr	r2, [pc, #188]	@ (800c8f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d108      	bne.n	800c852 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c846:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4313      	orrs	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c858:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	4313      	orrs	r3, r2
 800c862:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a20      	ldr	r2, [pc, #128]	@ (800c8f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d022      	beq.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c87e:	d01d      	beq.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a1d      	ldr	r2, [pc, #116]	@ (800c8fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d018      	beq.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a1c      	ldr	r2, [pc, #112]	@ (800c900 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d013      	beq.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a1a      	ldr	r2, [pc, #104]	@ (800c904 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d00e      	beq.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a15      	ldr	r2, [pc, #84]	@ (800c8f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d009      	beq.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a16      	ldr	r2, [pc, #88]	@ (800c908 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d004      	beq.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a15      	ldr	r2, [pc, #84]	@ (800c90c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d10c      	bne.n	800c8d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c8c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3714      	adds	r7, #20
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr
 800c8f4:	40010000 	.word	0x40010000
 800c8f8:	40010400 	.word	0x40010400
 800c8fc:	40000400 	.word	0x40000400
 800c900:	40000800 	.word	0x40000800
 800c904:	40000c00 	.word	0x40000c00
 800c908:	40001800 	.word	0x40001800
 800c90c:	40014000 	.word	0x40014000

0800c910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c918:	bf00      	nop
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e042      	b.n	800c9e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c964:	2b00      	cmp	r3, #0
 800c966:	d106      	bne.n	800c976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7f6 fe2b 	bl	80035cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2224      	movs	r2, #36	@ 0x24
 800c97a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f022 0201 	bic.w	r2, r2, #1
 800c98c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c992:	2b00      	cmp	r3, #0
 800c994:	d002      	beq.n	800c99c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f001 fb52 	bl	800e040 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fce3 	bl	800d368 <UART_SetConfig>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d101      	bne.n	800c9ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e01b      	b.n	800c9e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c9ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	689a      	ldr	r2, [r3, #8]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c9ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f042 0201 	orr.w	r2, r2, #1
 800c9da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f001 fbd1 	bl	800e184 <UART_CheckIdleState>
 800c9e2:	4603      	mov	r3, r0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08a      	sub	sp, #40	@ 0x28
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	603b      	str	r3, [r7, #0]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca02:	2b20      	cmp	r3, #32
 800ca04:	d17b      	bne.n	800cafe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <HAL_UART_Transmit+0x26>
 800ca0c:	88fb      	ldrh	r3, [r7, #6]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d101      	bne.n	800ca16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	e074      	b.n	800cb00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2221      	movs	r2, #33	@ 0x21
 800ca22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca26:	f7f7 f853 	bl	8003ad0 <HAL_GetTick>
 800ca2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	88fa      	ldrh	r2, [r7, #6]
 800ca30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	88fa      	ldrh	r2, [r7, #6]
 800ca38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca44:	d108      	bne.n	800ca58 <HAL_UART_Transmit+0x6c>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d104      	bne.n	800ca58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	61bb      	str	r3, [r7, #24]
 800ca56:	e003      	b.n	800ca60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ca60:	e030      	b.n	800cac4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2180      	movs	r1, #128	@ 0x80
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f001 fc33 	bl	800e2d8 <UART_WaitOnFlagUntilTimeout>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d005      	beq.n	800ca84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2220      	movs	r2, #32
 800ca7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ca80:	2303      	movs	r3, #3
 800ca82:	e03d      	b.n	800cb00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10b      	bne.n	800caa2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	3302      	adds	r3, #2
 800ca9e:	61bb      	str	r3, [r7, #24]
 800caa0:	e007      	b.n	800cab2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	781a      	ldrb	r2, [r3, #0]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	3301      	adds	r3, #1
 800cab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cab8:	b29b      	uxth	r3, r3
 800caba:	3b01      	subs	r3, #1
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800caca:	b29b      	uxth	r3, r3
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1c8      	bne.n	800ca62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	2200      	movs	r2, #0
 800cad8:	2140      	movs	r1, #64	@ 0x40
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f001 fbfc 	bl	800e2d8 <UART_WaitOnFlagUntilTimeout>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d005      	beq.n	800caf2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2220      	movs	r2, #32
 800caea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800caee:	2303      	movs	r3, #3
 800caf0:	e006      	b.n	800cb00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	e000      	b.n	800cb00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cafe:	2302      	movs	r3, #2
  }
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08a      	sub	sp, #40	@ 0x28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	4613      	mov	r3, r2
 800cb14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb1c:	2b20      	cmp	r3, #32
 800cb1e:	d137      	bne.n	800cb90 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <HAL_UART_Receive_DMA+0x24>
 800cb26:	88fb      	ldrh	r3, [r7, #6]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d101      	bne.n	800cb30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e030      	b.n	800cb92 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a18      	ldr	r2, [pc, #96]	@ (800cb9c <HAL_UART_Receive_DMA+0x94>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d01f      	beq.n	800cb80 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d018      	beq.n	800cb80 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	e853 3f00 	ldrex	r3, [r3]
 800cb5a:	613b      	str	r3, [r7, #16]
   return(result);
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cb62:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6c:	623b      	str	r3, [r7, #32]
 800cb6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb70:	69f9      	ldr	r1, [r7, #28]
 800cb72:	6a3a      	ldr	r2, [r7, #32]
 800cb74:	e841 2300 	strex	r3, r2, [r1]
 800cb78:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1e6      	bne.n	800cb4e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb80:	88fb      	ldrh	r3, [r7, #6]
 800cb82:	461a      	mov	r2, r3
 800cb84:	68b9      	ldr	r1, [r7, #8]
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f001 fc14 	bl	800e3b4 <UART_Start_Receive_DMA>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	e000      	b.n	800cb92 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cb90:	2302      	movs	r3, #2
  }
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3728      	adds	r7, #40	@ 0x28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	58000c00 	.word	0x58000c00

0800cba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b0ba      	sub	sp, #232	@ 0xe8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	69db      	ldr	r3, [r3, #28]
 800cbae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cbc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cbca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cbce:	4013      	ands	r3, r2
 800cbd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cbd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d11b      	bne.n	800cc14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbe0:	f003 0320 	and.w	r3, r3, #32
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d015      	beq.n	800cc14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbec:	f003 0320 	and.w	r3, r3, #32
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d105      	bne.n	800cc00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d009      	beq.n	800cc14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f000 8377 	beq.w	800d2f8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	4798      	blx	r3
      }
      return;
 800cc12:	e371      	b.n	800d2f8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cc14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f000 8123 	beq.w	800ce64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cc1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc22:	4b8d      	ldr	r3, [pc, #564]	@ (800ce58 <HAL_UART_IRQHandler+0x2b8>)
 800cc24:	4013      	ands	r3, r2
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d106      	bne.n	800cc38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cc2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cc2e:	4b8b      	ldr	r3, [pc, #556]	@ (800ce5c <HAL_UART_IRQHandler+0x2bc>)
 800cc30:	4013      	ands	r3, r2
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f000 8116 	beq.w	800ce64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc3c:	f003 0301 	and.w	r3, r3, #1
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d011      	beq.n	800cc68 <HAL_UART_IRQHandler+0xc8>
 800cc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00b      	beq.n	800cc68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2201      	movs	r2, #1
 800cc56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc5e:	f043 0201 	orr.w	r2, r3, #1
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc6c:	f003 0302 	and.w	r3, r3, #2
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d011      	beq.n	800cc98 <HAL_UART_IRQHandler+0xf8>
 800cc74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00b      	beq.n	800cc98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2202      	movs	r2, #2
 800cc86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc8e:	f043 0204 	orr.w	r2, r3, #4
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc9c:	f003 0304 	and.w	r3, r3, #4
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d011      	beq.n	800ccc8 <HAL_UART_IRQHandler+0x128>
 800cca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00b      	beq.n	800ccc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2204      	movs	r2, #4
 800ccb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccbe:	f043 0202 	orr.w	r2, r3, #2
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ccc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cccc:	f003 0308 	and.w	r3, r3, #8
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d017      	beq.n	800cd04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccd8:	f003 0320 	and.w	r3, r3, #32
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d105      	bne.n	800ccec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cce0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cce4:	4b5c      	ldr	r3, [pc, #368]	@ (800ce58 <HAL_UART_IRQHandler+0x2b8>)
 800cce6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00b      	beq.n	800cd04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2208      	movs	r2, #8
 800ccf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccfa:	f043 0208 	orr.w	r2, r3, #8
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d012      	beq.n	800cd36 <HAL_UART_IRQHandler+0x196>
 800cd10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00c      	beq.n	800cd36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd2c:	f043 0220 	orr.w	r2, r3, #32
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f000 82dd 	beq.w	800d2fc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd46:	f003 0320 	and.w	r3, r3, #32
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d013      	beq.n	800cd76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd52:	f003 0320 	and.w	r3, r3, #32
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d105      	bne.n	800cd66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d007      	beq.n	800cd76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d003      	beq.n	800cd76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd8a:	2b40      	cmp	r3, #64	@ 0x40
 800cd8c:	d005      	beq.n	800cd9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d054      	beq.n	800ce44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f001 fbf2 	bl	800e584 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdaa:	2b40      	cmp	r3, #64	@ 0x40
 800cdac:	d146      	bne.n	800ce3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cdbc:	e853 3f00 	ldrex	r3, [r3]
 800cdc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cdc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cdc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	3308      	adds	r3, #8
 800cdd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cdda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cdde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cde6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cdea:	e841 2300 	strex	r3, r2, [r1]
 800cdee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cdf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1d9      	bne.n	800cdae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d017      	beq.n	800ce34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce0a:	4a15      	ldr	r2, [pc, #84]	@ (800ce60 <HAL_UART_IRQHandler+0x2c0>)
 800ce0c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7f8 f929 	bl	800506c <HAL_DMA_Abort_IT>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d019      	beq.n	800ce54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ce2e:	4610      	mov	r0, r2
 800ce30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce32:	e00f      	b.n	800ce54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 fa81 	bl	800d33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce3a:	e00b      	b.n	800ce54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 fa7d 	bl	800d33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce42:	e007      	b.n	800ce54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 fa79 	bl	800d33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ce52:	e253      	b.n	800d2fc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce54:	bf00      	nop
    return;
 800ce56:	e251      	b.n	800d2fc <HAL_UART_IRQHandler+0x75c>
 800ce58:	10000001 	.word	0x10000001
 800ce5c:	04000120 	.word	0x04000120
 800ce60:	0800e837 	.word	0x0800e837

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	f040 81e7 	bne.w	800d23c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce72:	f003 0310 	and.w	r3, r3, #16
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 81e0 	beq.w	800d23c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce80:	f003 0310 	and.w	r3, r3, #16
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f000 81d9 	beq.w	800d23c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2210      	movs	r2, #16
 800ce90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce9c:	2b40      	cmp	r3, #64	@ 0x40
 800ce9e:	f040 8151 	bne.w	800d144 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a96      	ldr	r2, [pc, #600]	@ (800d104 <HAL_UART_IRQHandler+0x564>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d068      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a93      	ldr	r2, [pc, #588]	@ (800d108 <HAL_UART_IRQHandler+0x568>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d061      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a91      	ldr	r2, [pc, #580]	@ (800d10c <HAL_UART_IRQHandler+0x56c>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d05a      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a8e      	ldr	r2, [pc, #568]	@ (800d110 <HAL_UART_IRQHandler+0x570>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d053      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a8c      	ldr	r2, [pc, #560]	@ (800d114 <HAL_UART_IRQHandler+0x574>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d04c      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a89      	ldr	r2, [pc, #548]	@ (800d118 <HAL_UART_IRQHandler+0x578>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d045      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a87      	ldr	r2, [pc, #540]	@ (800d11c <HAL_UART_IRQHandler+0x57c>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d03e      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a84      	ldr	r2, [pc, #528]	@ (800d120 <HAL_UART_IRQHandler+0x580>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d037      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a82      	ldr	r2, [pc, #520]	@ (800d124 <HAL_UART_IRQHandler+0x584>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d030      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a7f      	ldr	r2, [pc, #508]	@ (800d128 <HAL_UART_IRQHandler+0x588>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d029      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a7d      	ldr	r2, [pc, #500]	@ (800d12c <HAL_UART_IRQHandler+0x58c>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d022      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a7a      	ldr	r2, [pc, #488]	@ (800d130 <HAL_UART_IRQHandler+0x590>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d01b      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a78      	ldr	r2, [pc, #480]	@ (800d134 <HAL_UART_IRQHandler+0x594>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d014      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a75      	ldr	r2, [pc, #468]	@ (800d138 <HAL_UART_IRQHandler+0x598>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d00d      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a73      	ldr	r2, [pc, #460]	@ (800d13c <HAL_UART_IRQHandler+0x59c>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d006      	beq.n	800cf82 <HAL_UART_IRQHandler+0x3e2>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a70      	ldr	r2, [pc, #448]	@ (800d140 <HAL_UART_IRQHandler+0x5a0>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d106      	bne.n	800cf90 <HAL_UART_IRQHandler+0x3f0>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	e005      	b.n	800cf9c <HAL_UART_IRQHandler+0x3fc>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cfa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f000 81ab 	beq.w	800d300 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cfb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	f080 81a3 	bcs.w	800d300 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfca:	69db      	ldr	r3, [r3, #28]
 800cfcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfd0:	f000 8087 	beq.w	800d0e2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cfe0:	e853 3f00 	ldrex	r3, [r3]
 800cfe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cfe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cfec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	461a      	mov	r2, r3
 800cffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d002:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d006:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d00a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d00e:	e841 2300 	strex	r3, r2, [r1]
 800d012:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1da      	bne.n	800cfd4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3308      	adds	r3, #8
 800d024:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d028:	e853 3f00 	ldrex	r3, [r3]
 800d02c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d02e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d030:	f023 0301 	bic.w	r3, r3, #1
 800d034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3308      	adds	r3, #8
 800d03e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d042:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d046:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d048:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d04a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d04e:	e841 2300 	strex	r3, r2, [r1]
 800d052:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1e1      	bne.n	800d01e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	3308      	adds	r3, #8
 800d060:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d064:	e853 3f00 	ldrex	r3, [r3]
 800d068:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d06a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d06c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d070:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	3308      	adds	r3, #8
 800d07a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d07e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d080:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d082:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d084:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d086:	e841 2300 	strex	r3, r2, [r1]
 800d08a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d08c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1e3      	bne.n	800d05a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2220      	movs	r2, #32
 800d096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0a8:	e853 3f00 	ldrex	r3, [r3]
 800d0ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d0ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0b0:	f023 0310 	bic.w	r3, r3, #16
 800d0b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d0c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d0c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0ca:	e841 2300 	strex	r3, r2, [r1]
 800d0ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d0d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1e4      	bne.n	800d0a0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7f7 fca7 	bl	8004a30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f927 	bl	800d350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d102:	e0fd      	b.n	800d300 <HAL_UART_IRQHandler+0x760>
 800d104:	40020010 	.word	0x40020010
 800d108:	40020028 	.word	0x40020028
 800d10c:	40020040 	.word	0x40020040
 800d110:	40020058 	.word	0x40020058
 800d114:	40020070 	.word	0x40020070
 800d118:	40020088 	.word	0x40020088
 800d11c:	400200a0 	.word	0x400200a0
 800d120:	400200b8 	.word	0x400200b8
 800d124:	40020410 	.word	0x40020410
 800d128:	40020428 	.word	0x40020428
 800d12c:	40020440 	.word	0x40020440
 800d130:	40020458 	.word	0x40020458
 800d134:	40020470 	.word	0x40020470
 800d138:	40020488 	.word	0x40020488
 800d13c:	400204a0 	.word	0x400204a0
 800d140:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d150:	b29b      	uxth	r3, r3
 800d152:	1ad3      	subs	r3, r2, r3
 800d154:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d15e:	b29b      	uxth	r3, r3
 800d160:	2b00      	cmp	r3, #0
 800d162:	f000 80cf 	beq.w	800d304 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f000 80ca 	beq.w	800d304 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d178:	e853 3f00 	ldrex	r3, [r3]
 800d17c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d184:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	461a      	mov	r2, r3
 800d18e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d192:	647b      	str	r3, [r7, #68]	@ 0x44
 800d194:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d196:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d198:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d19a:	e841 2300 	strex	r3, r2, [r1]
 800d19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d1a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1e4      	bne.n	800d170 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3308      	adds	r3, #8
 800d1ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b0:	e853 3f00 	ldrex	r3, [r3]
 800d1b4:	623b      	str	r3, [r7, #32]
   return(result);
 800d1b6:	6a3a      	ldr	r2, [r7, #32]
 800d1b8:	4b55      	ldr	r3, [pc, #340]	@ (800d310 <HAL_UART_IRQHandler+0x770>)
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d1ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800d1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d1d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1d2:	e841 2300 	strex	r3, r2, [r1]
 800d1d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1e3      	bne.n	800d1a6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2220      	movs	r2, #32
 800d1e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	e853 3f00 	ldrex	r3, [r3]
 800d1fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f023 0310 	bic.w	r3, r3, #16
 800d206:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d218:	69b9      	ldr	r1, [r7, #24]
 800d21a:	69fa      	ldr	r2, [r7, #28]
 800d21c:	e841 2300 	strex	r3, r2, [r1]
 800d220:	617b      	str	r3, [r7, #20]
   return(result);
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1e4      	bne.n	800d1f2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d22e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d232:	4619      	mov	r1, r3
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f88b 	bl	800d350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d23a:	e063      	b.n	800d304 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00e      	beq.n	800d266 <HAL_UART_IRQHandler+0x6c6>
 800d248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d24c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d250:	2b00      	cmp	r3, #0
 800d252:	d008      	beq.n	800d266 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d25c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f001 fb2a 	bl	800e8b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d264:	e051      	b.n	800d30a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d26a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d014      	beq.n	800d29c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d105      	bne.n	800d28a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d27e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d286:	2b00      	cmp	r3, #0
 800d288:	d008      	beq.n	800d29c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d03a      	beq.n	800d308 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	4798      	blx	r3
    }
    return;
 800d29a:	e035      	b.n	800d308 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d009      	beq.n	800d2bc <HAL_UART_IRQHandler+0x71c>
 800d2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d003      	beq.n	800d2bc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f001 fad4 	bl	800e862 <UART_EndTransmit_IT>
    return;
 800d2ba:	e026      	b.n	800d30a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d009      	beq.n	800d2dc <HAL_UART_IRQHandler+0x73c>
 800d2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d003      	beq.n	800d2dc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f001 fb03 	bl	800e8e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d2da:	e016      	b.n	800d30a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d010      	beq.n	800d30a <HAL_UART_IRQHandler+0x76a>
 800d2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	da0c      	bge.n	800d30a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f001 faeb 	bl	800e8cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d2f6:	e008      	b.n	800d30a <HAL_UART_IRQHandler+0x76a>
      return;
 800d2f8:	bf00      	nop
 800d2fa:	e006      	b.n	800d30a <HAL_UART_IRQHandler+0x76a>
    return;
 800d2fc:	bf00      	nop
 800d2fe:	e004      	b.n	800d30a <HAL_UART_IRQHandler+0x76a>
      return;
 800d300:	bf00      	nop
 800d302:	e002      	b.n	800d30a <HAL_UART_IRQHandler+0x76a>
      return;
 800d304:	bf00      	nop
 800d306:	e000      	b.n	800d30a <HAL_UART_IRQHandler+0x76a>
    return;
 800d308:	bf00      	nop
  }
}
 800d30a:	37e8      	adds	r7, #232	@ 0xe8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	effffffe 	.word	0xeffffffe

0800d314 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	460b      	mov	r3, r1
 800d35a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d36c:	b092      	sub	sp, #72	@ 0x48
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d372:	2300      	movs	r3, #0
 800d374:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	689a      	ldr	r2, [r3, #8]
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	431a      	orrs	r2, r3
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	695b      	ldr	r3, [r3, #20]
 800d386:	431a      	orrs	r2, r3
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	69db      	ldr	r3, [r3, #28]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	4bbe      	ldr	r3, [pc, #760]	@ (800d690 <UART_SetConfig+0x328>)
 800d398:	4013      	ands	r3, r2
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	6812      	ldr	r2, [r2, #0]
 800d39e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d3a0:	430b      	orrs	r3, r1
 800d3a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	430a      	orrs	r2, r1
 800d3b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4ab3      	ldr	r2, [pc, #716]	@ (800d694 <UART_SetConfig+0x32c>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d004      	beq.n	800d3d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	6a1b      	ldr	r3, [r3, #32]
 800d3ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689a      	ldr	r2, [r3, #8]
 800d3da:	4baf      	ldr	r3, [pc, #700]	@ (800d698 <UART_SetConfig+0x330>)
 800d3dc:	4013      	ands	r3, r2
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	6812      	ldr	r2, [r2, #0]
 800d3e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d3e4:	430b      	orrs	r3, r1
 800d3e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ee:	f023 010f 	bic.w	r1, r3, #15
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	430a      	orrs	r2, r1
 800d3fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4aa6      	ldr	r2, [pc, #664]	@ (800d69c <UART_SetConfig+0x334>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d177      	bne.n	800d4f8 <UART_SetConfig+0x190>
 800d408:	4ba5      	ldr	r3, [pc, #660]	@ (800d6a0 <UART_SetConfig+0x338>)
 800d40a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d40c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d410:	2b28      	cmp	r3, #40	@ 0x28
 800d412:	d86d      	bhi.n	800d4f0 <UART_SetConfig+0x188>
 800d414:	a201      	add	r2, pc, #4	@ (adr r2, 800d41c <UART_SetConfig+0xb4>)
 800d416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41a:	bf00      	nop
 800d41c:	0800d4c1 	.word	0x0800d4c1
 800d420:	0800d4f1 	.word	0x0800d4f1
 800d424:	0800d4f1 	.word	0x0800d4f1
 800d428:	0800d4f1 	.word	0x0800d4f1
 800d42c:	0800d4f1 	.word	0x0800d4f1
 800d430:	0800d4f1 	.word	0x0800d4f1
 800d434:	0800d4f1 	.word	0x0800d4f1
 800d438:	0800d4f1 	.word	0x0800d4f1
 800d43c:	0800d4c9 	.word	0x0800d4c9
 800d440:	0800d4f1 	.word	0x0800d4f1
 800d444:	0800d4f1 	.word	0x0800d4f1
 800d448:	0800d4f1 	.word	0x0800d4f1
 800d44c:	0800d4f1 	.word	0x0800d4f1
 800d450:	0800d4f1 	.word	0x0800d4f1
 800d454:	0800d4f1 	.word	0x0800d4f1
 800d458:	0800d4f1 	.word	0x0800d4f1
 800d45c:	0800d4d1 	.word	0x0800d4d1
 800d460:	0800d4f1 	.word	0x0800d4f1
 800d464:	0800d4f1 	.word	0x0800d4f1
 800d468:	0800d4f1 	.word	0x0800d4f1
 800d46c:	0800d4f1 	.word	0x0800d4f1
 800d470:	0800d4f1 	.word	0x0800d4f1
 800d474:	0800d4f1 	.word	0x0800d4f1
 800d478:	0800d4f1 	.word	0x0800d4f1
 800d47c:	0800d4d9 	.word	0x0800d4d9
 800d480:	0800d4f1 	.word	0x0800d4f1
 800d484:	0800d4f1 	.word	0x0800d4f1
 800d488:	0800d4f1 	.word	0x0800d4f1
 800d48c:	0800d4f1 	.word	0x0800d4f1
 800d490:	0800d4f1 	.word	0x0800d4f1
 800d494:	0800d4f1 	.word	0x0800d4f1
 800d498:	0800d4f1 	.word	0x0800d4f1
 800d49c:	0800d4e1 	.word	0x0800d4e1
 800d4a0:	0800d4f1 	.word	0x0800d4f1
 800d4a4:	0800d4f1 	.word	0x0800d4f1
 800d4a8:	0800d4f1 	.word	0x0800d4f1
 800d4ac:	0800d4f1 	.word	0x0800d4f1
 800d4b0:	0800d4f1 	.word	0x0800d4f1
 800d4b4:	0800d4f1 	.word	0x0800d4f1
 800d4b8:	0800d4f1 	.word	0x0800d4f1
 800d4bc:	0800d4e9 	.word	0x0800d4e9
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4c6:	e326      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d4c8:	2304      	movs	r3, #4
 800d4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ce:	e322      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d4d0:	2308      	movs	r3, #8
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4d6:	e31e      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d4d8:	2310      	movs	r3, #16
 800d4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4de:	e31a      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d4e0:	2320      	movs	r3, #32
 800d4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4e6:	e316      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d4e8:	2340      	movs	r3, #64	@ 0x40
 800d4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ee:	e312      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d4f0:	2380      	movs	r3, #128	@ 0x80
 800d4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4f6:	e30e      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a69      	ldr	r2, [pc, #420]	@ (800d6a4 <UART_SetConfig+0x33c>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d130      	bne.n	800d564 <UART_SetConfig+0x1fc>
 800d502:	4b67      	ldr	r3, [pc, #412]	@ (800d6a0 <UART_SetConfig+0x338>)
 800d504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d506:	f003 0307 	and.w	r3, r3, #7
 800d50a:	2b05      	cmp	r3, #5
 800d50c:	d826      	bhi.n	800d55c <UART_SetConfig+0x1f4>
 800d50e:	a201      	add	r2, pc, #4	@ (adr r2, 800d514 <UART_SetConfig+0x1ac>)
 800d510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d514:	0800d52d 	.word	0x0800d52d
 800d518:	0800d535 	.word	0x0800d535
 800d51c:	0800d53d 	.word	0x0800d53d
 800d520:	0800d545 	.word	0x0800d545
 800d524:	0800d54d 	.word	0x0800d54d
 800d528:	0800d555 	.word	0x0800d555
 800d52c:	2300      	movs	r3, #0
 800d52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d532:	e2f0      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d534:	2304      	movs	r3, #4
 800d536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d53a:	e2ec      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d53c:	2308      	movs	r3, #8
 800d53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d542:	e2e8      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d544:	2310      	movs	r3, #16
 800d546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d54a:	e2e4      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d54c:	2320      	movs	r3, #32
 800d54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d552:	e2e0      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d554:	2340      	movs	r3, #64	@ 0x40
 800d556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d55a:	e2dc      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d55c:	2380      	movs	r3, #128	@ 0x80
 800d55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d562:	e2d8      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a4f      	ldr	r2, [pc, #316]	@ (800d6a8 <UART_SetConfig+0x340>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d130      	bne.n	800d5d0 <UART_SetConfig+0x268>
 800d56e:	4b4c      	ldr	r3, [pc, #304]	@ (800d6a0 <UART_SetConfig+0x338>)
 800d570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d572:	f003 0307 	and.w	r3, r3, #7
 800d576:	2b05      	cmp	r3, #5
 800d578:	d826      	bhi.n	800d5c8 <UART_SetConfig+0x260>
 800d57a:	a201      	add	r2, pc, #4	@ (adr r2, 800d580 <UART_SetConfig+0x218>)
 800d57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d580:	0800d599 	.word	0x0800d599
 800d584:	0800d5a1 	.word	0x0800d5a1
 800d588:	0800d5a9 	.word	0x0800d5a9
 800d58c:	0800d5b1 	.word	0x0800d5b1
 800d590:	0800d5b9 	.word	0x0800d5b9
 800d594:	0800d5c1 	.word	0x0800d5c1
 800d598:	2300      	movs	r3, #0
 800d59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d59e:	e2ba      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d5a0:	2304      	movs	r3, #4
 800d5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5a6:	e2b6      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d5a8:	2308      	movs	r3, #8
 800d5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ae:	e2b2      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d5b0:	2310      	movs	r3, #16
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5b6:	e2ae      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d5b8:	2320      	movs	r3, #32
 800d5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5be:	e2aa      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d5c0:	2340      	movs	r3, #64	@ 0x40
 800d5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5c6:	e2a6      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d5c8:	2380      	movs	r3, #128	@ 0x80
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ce:	e2a2      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a35      	ldr	r2, [pc, #212]	@ (800d6ac <UART_SetConfig+0x344>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d130      	bne.n	800d63c <UART_SetConfig+0x2d4>
 800d5da:	4b31      	ldr	r3, [pc, #196]	@ (800d6a0 <UART_SetConfig+0x338>)
 800d5dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5de:	f003 0307 	and.w	r3, r3, #7
 800d5e2:	2b05      	cmp	r3, #5
 800d5e4:	d826      	bhi.n	800d634 <UART_SetConfig+0x2cc>
 800d5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d5ec <UART_SetConfig+0x284>)
 800d5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ec:	0800d605 	.word	0x0800d605
 800d5f0:	0800d60d 	.word	0x0800d60d
 800d5f4:	0800d615 	.word	0x0800d615
 800d5f8:	0800d61d 	.word	0x0800d61d
 800d5fc:	0800d625 	.word	0x0800d625
 800d600:	0800d62d 	.word	0x0800d62d
 800d604:	2300      	movs	r3, #0
 800d606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60a:	e284      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d60c:	2304      	movs	r3, #4
 800d60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d612:	e280      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d614:	2308      	movs	r3, #8
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61a:	e27c      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d61c:	2310      	movs	r3, #16
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d622:	e278      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d624:	2320      	movs	r3, #32
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62a:	e274      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d62c:	2340      	movs	r3, #64	@ 0x40
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d632:	e270      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d634:	2380      	movs	r3, #128	@ 0x80
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d63a:	e26c      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a1b      	ldr	r2, [pc, #108]	@ (800d6b0 <UART_SetConfig+0x348>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d142      	bne.n	800d6cc <UART_SetConfig+0x364>
 800d646:	4b16      	ldr	r3, [pc, #88]	@ (800d6a0 <UART_SetConfig+0x338>)
 800d648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d64a:	f003 0307 	and.w	r3, r3, #7
 800d64e:	2b05      	cmp	r3, #5
 800d650:	d838      	bhi.n	800d6c4 <UART_SetConfig+0x35c>
 800d652:	a201      	add	r2, pc, #4	@ (adr r2, 800d658 <UART_SetConfig+0x2f0>)
 800d654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d658:	0800d671 	.word	0x0800d671
 800d65c:	0800d679 	.word	0x0800d679
 800d660:	0800d681 	.word	0x0800d681
 800d664:	0800d689 	.word	0x0800d689
 800d668:	0800d6b5 	.word	0x0800d6b5
 800d66c:	0800d6bd 	.word	0x0800d6bd
 800d670:	2300      	movs	r3, #0
 800d672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d676:	e24e      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d678:	2304      	movs	r3, #4
 800d67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67e:	e24a      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d680:	2308      	movs	r3, #8
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d686:	e246      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d688:	2310      	movs	r3, #16
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68e:	e242      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d690:	cfff69f3 	.word	0xcfff69f3
 800d694:	58000c00 	.word	0x58000c00
 800d698:	11fff4ff 	.word	0x11fff4ff
 800d69c:	40011000 	.word	0x40011000
 800d6a0:	58024400 	.word	0x58024400
 800d6a4:	40004400 	.word	0x40004400
 800d6a8:	40004800 	.word	0x40004800
 800d6ac:	40004c00 	.word	0x40004c00
 800d6b0:	40005000 	.word	0x40005000
 800d6b4:	2320      	movs	r3, #32
 800d6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ba:	e22c      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d6bc:	2340      	movs	r3, #64	@ 0x40
 800d6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6c2:	e228      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d6c4:	2380      	movs	r3, #128	@ 0x80
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ca:	e224      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4ab1      	ldr	r2, [pc, #708]	@ (800d998 <UART_SetConfig+0x630>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d176      	bne.n	800d7c4 <UART_SetConfig+0x45c>
 800d6d6:	4bb1      	ldr	r3, [pc, #708]	@ (800d99c <UART_SetConfig+0x634>)
 800d6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d6de:	2b28      	cmp	r3, #40	@ 0x28
 800d6e0:	d86c      	bhi.n	800d7bc <UART_SetConfig+0x454>
 800d6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e8 <UART_SetConfig+0x380>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d78d 	.word	0x0800d78d
 800d6ec:	0800d7bd 	.word	0x0800d7bd
 800d6f0:	0800d7bd 	.word	0x0800d7bd
 800d6f4:	0800d7bd 	.word	0x0800d7bd
 800d6f8:	0800d7bd 	.word	0x0800d7bd
 800d6fc:	0800d7bd 	.word	0x0800d7bd
 800d700:	0800d7bd 	.word	0x0800d7bd
 800d704:	0800d7bd 	.word	0x0800d7bd
 800d708:	0800d795 	.word	0x0800d795
 800d70c:	0800d7bd 	.word	0x0800d7bd
 800d710:	0800d7bd 	.word	0x0800d7bd
 800d714:	0800d7bd 	.word	0x0800d7bd
 800d718:	0800d7bd 	.word	0x0800d7bd
 800d71c:	0800d7bd 	.word	0x0800d7bd
 800d720:	0800d7bd 	.word	0x0800d7bd
 800d724:	0800d7bd 	.word	0x0800d7bd
 800d728:	0800d79d 	.word	0x0800d79d
 800d72c:	0800d7bd 	.word	0x0800d7bd
 800d730:	0800d7bd 	.word	0x0800d7bd
 800d734:	0800d7bd 	.word	0x0800d7bd
 800d738:	0800d7bd 	.word	0x0800d7bd
 800d73c:	0800d7bd 	.word	0x0800d7bd
 800d740:	0800d7bd 	.word	0x0800d7bd
 800d744:	0800d7bd 	.word	0x0800d7bd
 800d748:	0800d7a5 	.word	0x0800d7a5
 800d74c:	0800d7bd 	.word	0x0800d7bd
 800d750:	0800d7bd 	.word	0x0800d7bd
 800d754:	0800d7bd 	.word	0x0800d7bd
 800d758:	0800d7bd 	.word	0x0800d7bd
 800d75c:	0800d7bd 	.word	0x0800d7bd
 800d760:	0800d7bd 	.word	0x0800d7bd
 800d764:	0800d7bd 	.word	0x0800d7bd
 800d768:	0800d7ad 	.word	0x0800d7ad
 800d76c:	0800d7bd 	.word	0x0800d7bd
 800d770:	0800d7bd 	.word	0x0800d7bd
 800d774:	0800d7bd 	.word	0x0800d7bd
 800d778:	0800d7bd 	.word	0x0800d7bd
 800d77c:	0800d7bd 	.word	0x0800d7bd
 800d780:	0800d7bd 	.word	0x0800d7bd
 800d784:	0800d7bd 	.word	0x0800d7bd
 800d788:	0800d7b5 	.word	0x0800d7b5
 800d78c:	2301      	movs	r3, #1
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d792:	e1c0      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d794:	2304      	movs	r3, #4
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d79a:	e1bc      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d79c:	2308      	movs	r3, #8
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7a2:	e1b8      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d7a4:	2310      	movs	r3, #16
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7aa:	e1b4      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d7ac:	2320      	movs	r3, #32
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7b2:	e1b0      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d7b4:	2340      	movs	r3, #64	@ 0x40
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ba:	e1ac      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d7bc:	2380      	movs	r3, #128	@ 0x80
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c2:	e1a8      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a75      	ldr	r2, [pc, #468]	@ (800d9a0 <UART_SetConfig+0x638>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d130      	bne.n	800d830 <UART_SetConfig+0x4c8>
 800d7ce:	4b73      	ldr	r3, [pc, #460]	@ (800d99c <UART_SetConfig+0x634>)
 800d7d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7d2:	f003 0307 	and.w	r3, r3, #7
 800d7d6:	2b05      	cmp	r3, #5
 800d7d8:	d826      	bhi.n	800d828 <UART_SetConfig+0x4c0>
 800d7da:	a201      	add	r2, pc, #4	@ (adr r2, 800d7e0 <UART_SetConfig+0x478>)
 800d7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e0:	0800d7f9 	.word	0x0800d7f9
 800d7e4:	0800d801 	.word	0x0800d801
 800d7e8:	0800d809 	.word	0x0800d809
 800d7ec:	0800d811 	.word	0x0800d811
 800d7f0:	0800d819 	.word	0x0800d819
 800d7f4:	0800d821 	.word	0x0800d821
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fe:	e18a      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d800:	2304      	movs	r3, #4
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d806:	e186      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d808:	2308      	movs	r3, #8
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80e:	e182      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d810:	2310      	movs	r3, #16
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d816:	e17e      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d818:	2320      	movs	r3, #32
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d81e:	e17a      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d820:	2340      	movs	r3, #64	@ 0x40
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d826:	e176      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d828:	2380      	movs	r3, #128	@ 0x80
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82e:	e172      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a5b      	ldr	r2, [pc, #364]	@ (800d9a4 <UART_SetConfig+0x63c>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d130      	bne.n	800d89c <UART_SetConfig+0x534>
 800d83a:	4b58      	ldr	r3, [pc, #352]	@ (800d99c <UART_SetConfig+0x634>)
 800d83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	2b05      	cmp	r3, #5
 800d844:	d826      	bhi.n	800d894 <UART_SetConfig+0x52c>
 800d846:	a201      	add	r2, pc, #4	@ (adr r2, 800d84c <UART_SetConfig+0x4e4>)
 800d848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84c:	0800d865 	.word	0x0800d865
 800d850:	0800d86d 	.word	0x0800d86d
 800d854:	0800d875 	.word	0x0800d875
 800d858:	0800d87d 	.word	0x0800d87d
 800d85c:	0800d885 	.word	0x0800d885
 800d860:	0800d88d 	.word	0x0800d88d
 800d864:	2300      	movs	r3, #0
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86a:	e154      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d86c:	2304      	movs	r3, #4
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d872:	e150      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d874:	2308      	movs	r3, #8
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d87a:	e14c      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d87c:	2310      	movs	r3, #16
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d882:	e148      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d884:	2320      	movs	r3, #32
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d88a:	e144      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d88c:	2340      	movs	r3, #64	@ 0x40
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d892:	e140      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d894:	2380      	movs	r3, #128	@ 0x80
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d89a:	e13c      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a41      	ldr	r2, [pc, #260]	@ (800d9a8 <UART_SetConfig+0x640>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	f040 8082 	bne.w	800d9ac <UART_SetConfig+0x644>
 800d8a8:	4b3c      	ldr	r3, [pc, #240]	@ (800d99c <UART_SetConfig+0x634>)
 800d8aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d8b0:	2b28      	cmp	r3, #40	@ 0x28
 800d8b2:	d86d      	bhi.n	800d990 <UART_SetConfig+0x628>
 800d8b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d8bc <UART_SetConfig+0x554>)
 800d8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ba:	bf00      	nop
 800d8bc:	0800d961 	.word	0x0800d961
 800d8c0:	0800d991 	.word	0x0800d991
 800d8c4:	0800d991 	.word	0x0800d991
 800d8c8:	0800d991 	.word	0x0800d991
 800d8cc:	0800d991 	.word	0x0800d991
 800d8d0:	0800d991 	.word	0x0800d991
 800d8d4:	0800d991 	.word	0x0800d991
 800d8d8:	0800d991 	.word	0x0800d991
 800d8dc:	0800d969 	.word	0x0800d969
 800d8e0:	0800d991 	.word	0x0800d991
 800d8e4:	0800d991 	.word	0x0800d991
 800d8e8:	0800d991 	.word	0x0800d991
 800d8ec:	0800d991 	.word	0x0800d991
 800d8f0:	0800d991 	.word	0x0800d991
 800d8f4:	0800d991 	.word	0x0800d991
 800d8f8:	0800d991 	.word	0x0800d991
 800d8fc:	0800d971 	.word	0x0800d971
 800d900:	0800d991 	.word	0x0800d991
 800d904:	0800d991 	.word	0x0800d991
 800d908:	0800d991 	.word	0x0800d991
 800d90c:	0800d991 	.word	0x0800d991
 800d910:	0800d991 	.word	0x0800d991
 800d914:	0800d991 	.word	0x0800d991
 800d918:	0800d991 	.word	0x0800d991
 800d91c:	0800d979 	.word	0x0800d979
 800d920:	0800d991 	.word	0x0800d991
 800d924:	0800d991 	.word	0x0800d991
 800d928:	0800d991 	.word	0x0800d991
 800d92c:	0800d991 	.word	0x0800d991
 800d930:	0800d991 	.word	0x0800d991
 800d934:	0800d991 	.word	0x0800d991
 800d938:	0800d991 	.word	0x0800d991
 800d93c:	0800d981 	.word	0x0800d981
 800d940:	0800d991 	.word	0x0800d991
 800d944:	0800d991 	.word	0x0800d991
 800d948:	0800d991 	.word	0x0800d991
 800d94c:	0800d991 	.word	0x0800d991
 800d950:	0800d991 	.word	0x0800d991
 800d954:	0800d991 	.word	0x0800d991
 800d958:	0800d991 	.word	0x0800d991
 800d95c:	0800d989 	.word	0x0800d989
 800d960:	2301      	movs	r3, #1
 800d962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d966:	e0d6      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d968:	2304      	movs	r3, #4
 800d96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d96e:	e0d2      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d970:	2308      	movs	r3, #8
 800d972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d976:	e0ce      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d978:	2310      	movs	r3, #16
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97e:	e0ca      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d980:	2320      	movs	r3, #32
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d986:	e0c6      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d988:	2340      	movs	r3, #64	@ 0x40
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98e:	e0c2      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d990:	2380      	movs	r3, #128	@ 0x80
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d996:	e0be      	b.n	800db16 <UART_SetConfig+0x7ae>
 800d998:	40011400 	.word	0x40011400
 800d99c:	58024400 	.word	0x58024400
 800d9a0:	40007800 	.word	0x40007800
 800d9a4:	40007c00 	.word	0x40007c00
 800d9a8:	40011800 	.word	0x40011800
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4aad      	ldr	r2, [pc, #692]	@ (800dc68 <UART_SetConfig+0x900>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d176      	bne.n	800daa4 <UART_SetConfig+0x73c>
 800d9b6:	4bad      	ldr	r3, [pc, #692]	@ (800dc6c <UART_SetConfig+0x904>)
 800d9b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d9be:	2b28      	cmp	r3, #40	@ 0x28
 800d9c0:	d86c      	bhi.n	800da9c <UART_SetConfig+0x734>
 800d9c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9c8 <UART_SetConfig+0x660>)
 800d9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c8:	0800da6d 	.word	0x0800da6d
 800d9cc:	0800da9d 	.word	0x0800da9d
 800d9d0:	0800da9d 	.word	0x0800da9d
 800d9d4:	0800da9d 	.word	0x0800da9d
 800d9d8:	0800da9d 	.word	0x0800da9d
 800d9dc:	0800da9d 	.word	0x0800da9d
 800d9e0:	0800da9d 	.word	0x0800da9d
 800d9e4:	0800da9d 	.word	0x0800da9d
 800d9e8:	0800da75 	.word	0x0800da75
 800d9ec:	0800da9d 	.word	0x0800da9d
 800d9f0:	0800da9d 	.word	0x0800da9d
 800d9f4:	0800da9d 	.word	0x0800da9d
 800d9f8:	0800da9d 	.word	0x0800da9d
 800d9fc:	0800da9d 	.word	0x0800da9d
 800da00:	0800da9d 	.word	0x0800da9d
 800da04:	0800da9d 	.word	0x0800da9d
 800da08:	0800da7d 	.word	0x0800da7d
 800da0c:	0800da9d 	.word	0x0800da9d
 800da10:	0800da9d 	.word	0x0800da9d
 800da14:	0800da9d 	.word	0x0800da9d
 800da18:	0800da9d 	.word	0x0800da9d
 800da1c:	0800da9d 	.word	0x0800da9d
 800da20:	0800da9d 	.word	0x0800da9d
 800da24:	0800da9d 	.word	0x0800da9d
 800da28:	0800da85 	.word	0x0800da85
 800da2c:	0800da9d 	.word	0x0800da9d
 800da30:	0800da9d 	.word	0x0800da9d
 800da34:	0800da9d 	.word	0x0800da9d
 800da38:	0800da9d 	.word	0x0800da9d
 800da3c:	0800da9d 	.word	0x0800da9d
 800da40:	0800da9d 	.word	0x0800da9d
 800da44:	0800da9d 	.word	0x0800da9d
 800da48:	0800da8d 	.word	0x0800da8d
 800da4c:	0800da9d 	.word	0x0800da9d
 800da50:	0800da9d 	.word	0x0800da9d
 800da54:	0800da9d 	.word	0x0800da9d
 800da58:	0800da9d 	.word	0x0800da9d
 800da5c:	0800da9d 	.word	0x0800da9d
 800da60:	0800da9d 	.word	0x0800da9d
 800da64:	0800da9d 	.word	0x0800da9d
 800da68:	0800da95 	.word	0x0800da95
 800da6c:	2301      	movs	r3, #1
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da72:	e050      	b.n	800db16 <UART_SetConfig+0x7ae>
 800da74:	2304      	movs	r3, #4
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7a:	e04c      	b.n	800db16 <UART_SetConfig+0x7ae>
 800da7c:	2308      	movs	r3, #8
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da82:	e048      	b.n	800db16 <UART_SetConfig+0x7ae>
 800da84:	2310      	movs	r3, #16
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8a:	e044      	b.n	800db16 <UART_SetConfig+0x7ae>
 800da8c:	2320      	movs	r3, #32
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da92:	e040      	b.n	800db16 <UART_SetConfig+0x7ae>
 800da94:	2340      	movs	r3, #64	@ 0x40
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da9a:	e03c      	b.n	800db16 <UART_SetConfig+0x7ae>
 800da9c:	2380      	movs	r3, #128	@ 0x80
 800da9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daa2:	e038      	b.n	800db16 <UART_SetConfig+0x7ae>
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a71      	ldr	r2, [pc, #452]	@ (800dc70 <UART_SetConfig+0x908>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d130      	bne.n	800db10 <UART_SetConfig+0x7a8>
 800daae:	4b6f      	ldr	r3, [pc, #444]	@ (800dc6c <UART_SetConfig+0x904>)
 800dab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dab2:	f003 0307 	and.w	r3, r3, #7
 800dab6:	2b05      	cmp	r3, #5
 800dab8:	d826      	bhi.n	800db08 <UART_SetConfig+0x7a0>
 800daba:	a201      	add	r2, pc, #4	@ (adr r2, 800dac0 <UART_SetConfig+0x758>)
 800dabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac0:	0800dad9 	.word	0x0800dad9
 800dac4:	0800dae1 	.word	0x0800dae1
 800dac8:	0800dae9 	.word	0x0800dae9
 800dacc:	0800daf1 	.word	0x0800daf1
 800dad0:	0800daf9 	.word	0x0800daf9
 800dad4:	0800db01 	.word	0x0800db01
 800dad8:	2302      	movs	r3, #2
 800dada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dade:	e01a      	b.n	800db16 <UART_SetConfig+0x7ae>
 800dae0:	2304      	movs	r3, #4
 800dae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dae6:	e016      	b.n	800db16 <UART_SetConfig+0x7ae>
 800dae8:	2308      	movs	r3, #8
 800daea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daee:	e012      	b.n	800db16 <UART_SetConfig+0x7ae>
 800daf0:	2310      	movs	r3, #16
 800daf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daf6:	e00e      	b.n	800db16 <UART_SetConfig+0x7ae>
 800daf8:	2320      	movs	r3, #32
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dafe:	e00a      	b.n	800db16 <UART_SetConfig+0x7ae>
 800db00:	2340      	movs	r3, #64	@ 0x40
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db06:	e006      	b.n	800db16 <UART_SetConfig+0x7ae>
 800db08:	2380      	movs	r3, #128	@ 0x80
 800db0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db0e:	e002      	b.n	800db16 <UART_SetConfig+0x7ae>
 800db10:	2380      	movs	r3, #128	@ 0x80
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a55      	ldr	r2, [pc, #340]	@ (800dc70 <UART_SetConfig+0x908>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	f040 80f8 	bne.w	800dd12 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db26:	2b20      	cmp	r3, #32
 800db28:	dc46      	bgt.n	800dbb8 <UART_SetConfig+0x850>
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	db75      	blt.n	800dc1a <UART_SetConfig+0x8b2>
 800db2e:	3b02      	subs	r3, #2
 800db30:	2b1e      	cmp	r3, #30
 800db32:	d872      	bhi.n	800dc1a <UART_SetConfig+0x8b2>
 800db34:	a201      	add	r2, pc, #4	@ (adr r2, 800db3c <UART_SetConfig+0x7d4>)
 800db36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3a:	bf00      	nop
 800db3c:	0800dbbf 	.word	0x0800dbbf
 800db40:	0800dc1b 	.word	0x0800dc1b
 800db44:	0800dbc7 	.word	0x0800dbc7
 800db48:	0800dc1b 	.word	0x0800dc1b
 800db4c:	0800dc1b 	.word	0x0800dc1b
 800db50:	0800dc1b 	.word	0x0800dc1b
 800db54:	0800dbd7 	.word	0x0800dbd7
 800db58:	0800dc1b 	.word	0x0800dc1b
 800db5c:	0800dc1b 	.word	0x0800dc1b
 800db60:	0800dc1b 	.word	0x0800dc1b
 800db64:	0800dc1b 	.word	0x0800dc1b
 800db68:	0800dc1b 	.word	0x0800dc1b
 800db6c:	0800dc1b 	.word	0x0800dc1b
 800db70:	0800dc1b 	.word	0x0800dc1b
 800db74:	0800dbe7 	.word	0x0800dbe7
 800db78:	0800dc1b 	.word	0x0800dc1b
 800db7c:	0800dc1b 	.word	0x0800dc1b
 800db80:	0800dc1b 	.word	0x0800dc1b
 800db84:	0800dc1b 	.word	0x0800dc1b
 800db88:	0800dc1b 	.word	0x0800dc1b
 800db8c:	0800dc1b 	.word	0x0800dc1b
 800db90:	0800dc1b 	.word	0x0800dc1b
 800db94:	0800dc1b 	.word	0x0800dc1b
 800db98:	0800dc1b 	.word	0x0800dc1b
 800db9c:	0800dc1b 	.word	0x0800dc1b
 800dba0:	0800dc1b 	.word	0x0800dc1b
 800dba4:	0800dc1b 	.word	0x0800dc1b
 800dba8:	0800dc1b 	.word	0x0800dc1b
 800dbac:	0800dc1b 	.word	0x0800dc1b
 800dbb0:	0800dc1b 	.word	0x0800dc1b
 800dbb4:	0800dc0d 	.word	0x0800dc0d
 800dbb8:	2b40      	cmp	r3, #64	@ 0x40
 800dbba:	d02a      	beq.n	800dc12 <UART_SetConfig+0x8aa>
 800dbbc:	e02d      	b.n	800dc1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dbbe:	f7fc f835 	bl	8009c2c <HAL_RCCEx_GetD3PCLK1Freq>
 800dbc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dbc4:	e02f      	b.n	800dc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fc f844 	bl	8009c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbd4:	e027      	b.n	800dc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbd6:	f107 0318 	add.w	r3, r7, #24
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fc f990 	bl	8009f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbe4:	e01f      	b.n	800dc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbe6:	4b21      	ldr	r3, [pc, #132]	@ (800dc6c <UART_SetConfig+0x904>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f003 0320 	and.w	r3, r3, #32
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d009      	beq.n	800dc06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbf2:	4b1e      	ldr	r3, [pc, #120]	@ (800dc6c <UART_SetConfig+0x904>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	08db      	lsrs	r3, r3, #3
 800dbf8:	f003 0303 	and.w	r3, r3, #3
 800dbfc:	4a1d      	ldr	r2, [pc, #116]	@ (800dc74 <UART_SetConfig+0x90c>)
 800dbfe:	fa22 f303 	lsr.w	r3, r2, r3
 800dc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc04:	e00f      	b.n	800dc26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dc06:	4b1b      	ldr	r3, [pc, #108]	@ (800dc74 <UART_SetConfig+0x90c>)
 800dc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc0a:	e00c      	b.n	800dc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc0c:	4b1a      	ldr	r3, [pc, #104]	@ (800dc78 <UART_SetConfig+0x910>)
 800dc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc10:	e009      	b.n	800dc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc18:	e005      	b.n	800dc26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dc24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f000 81ee 	beq.w	800e00a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc32:	4a12      	ldr	r2, [pc, #72]	@ (800dc7c <UART_SetConfig+0x914>)
 800dc34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc38:	461a      	mov	r2, r3
 800dc3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc40:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	685a      	ldr	r2, [r3, #4]
 800dc46:	4613      	mov	r3, r2
 800dc48:	005b      	lsls	r3, r3, #1
 800dc4a:	4413      	add	r3, r2
 800dc4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d305      	bcc.n	800dc5e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d910      	bls.n	800dc80 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc64:	e1d1      	b.n	800e00a <UART_SetConfig+0xca2>
 800dc66:	bf00      	nop
 800dc68:	40011c00 	.word	0x40011c00
 800dc6c:	58024400 	.word	0x58024400
 800dc70:	58000c00 	.word	0x58000c00
 800dc74:	03d09000 	.word	0x03d09000
 800dc78:	003d0900 	.word	0x003d0900
 800dc7c:	08013228 	.word	0x08013228
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc82:	2200      	movs	r2, #0
 800dc84:	60bb      	str	r3, [r7, #8]
 800dc86:	60fa      	str	r2, [r7, #12]
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc8c:	4ac0      	ldr	r2, [pc, #768]	@ (800df90 <UART_SetConfig+0xc28>)
 800dc8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	2200      	movs	r2, #0
 800dc96:	603b      	str	r3, [r7, #0]
 800dc98:	607a      	str	r2, [r7, #4]
 800dc9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dca2:	f7f2 fb75 	bl	8000390 <__aeabi_uldivmod>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	4610      	mov	r0, r2
 800dcac:	4619      	mov	r1, r3
 800dcae:	f04f 0200 	mov.w	r2, #0
 800dcb2:	f04f 0300 	mov.w	r3, #0
 800dcb6:	020b      	lsls	r3, r1, #8
 800dcb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dcbc:	0202      	lsls	r2, r0, #8
 800dcbe:	6979      	ldr	r1, [r7, #20]
 800dcc0:	6849      	ldr	r1, [r1, #4]
 800dcc2:	0849      	lsrs	r1, r1, #1
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	460c      	mov	r4, r1
 800dcc8:	4605      	mov	r5, r0
 800dcca:	eb12 0804 	adds.w	r8, r2, r4
 800dcce:	eb43 0905 	adc.w	r9, r3, r5
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	469a      	mov	sl, r3
 800dcda:	4693      	mov	fp, r2
 800dcdc:	4652      	mov	r2, sl
 800dcde:	465b      	mov	r3, fp
 800dce0:	4640      	mov	r0, r8
 800dce2:	4649      	mov	r1, r9
 800dce4:	f7f2 fb54 	bl	8000390 <__aeabi_uldivmod>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	4613      	mov	r3, r2
 800dcee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dcf6:	d308      	bcc.n	800dd0a <UART_SetConfig+0x9a2>
 800dcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcfe:	d204      	bcs.n	800dd0a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd06:	60da      	str	r2, [r3, #12]
 800dd08:	e17f      	b.n	800e00a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd10:	e17b      	b.n	800e00a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	69db      	ldr	r3, [r3, #28]
 800dd16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd1a:	f040 80bd 	bne.w	800de98 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dd1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd22:	2b20      	cmp	r3, #32
 800dd24:	dc48      	bgt.n	800ddb8 <UART_SetConfig+0xa50>
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	db7b      	blt.n	800de22 <UART_SetConfig+0xaba>
 800dd2a:	2b20      	cmp	r3, #32
 800dd2c:	d879      	bhi.n	800de22 <UART_SetConfig+0xaba>
 800dd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd34 <UART_SetConfig+0x9cc>)
 800dd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd34:	0800ddbf 	.word	0x0800ddbf
 800dd38:	0800ddc7 	.word	0x0800ddc7
 800dd3c:	0800de23 	.word	0x0800de23
 800dd40:	0800de23 	.word	0x0800de23
 800dd44:	0800ddcf 	.word	0x0800ddcf
 800dd48:	0800de23 	.word	0x0800de23
 800dd4c:	0800de23 	.word	0x0800de23
 800dd50:	0800de23 	.word	0x0800de23
 800dd54:	0800dddf 	.word	0x0800dddf
 800dd58:	0800de23 	.word	0x0800de23
 800dd5c:	0800de23 	.word	0x0800de23
 800dd60:	0800de23 	.word	0x0800de23
 800dd64:	0800de23 	.word	0x0800de23
 800dd68:	0800de23 	.word	0x0800de23
 800dd6c:	0800de23 	.word	0x0800de23
 800dd70:	0800de23 	.word	0x0800de23
 800dd74:	0800ddef 	.word	0x0800ddef
 800dd78:	0800de23 	.word	0x0800de23
 800dd7c:	0800de23 	.word	0x0800de23
 800dd80:	0800de23 	.word	0x0800de23
 800dd84:	0800de23 	.word	0x0800de23
 800dd88:	0800de23 	.word	0x0800de23
 800dd8c:	0800de23 	.word	0x0800de23
 800dd90:	0800de23 	.word	0x0800de23
 800dd94:	0800de23 	.word	0x0800de23
 800dd98:	0800de23 	.word	0x0800de23
 800dd9c:	0800de23 	.word	0x0800de23
 800dda0:	0800de23 	.word	0x0800de23
 800dda4:	0800de23 	.word	0x0800de23
 800dda8:	0800de23 	.word	0x0800de23
 800ddac:	0800de23 	.word	0x0800de23
 800ddb0:	0800de23 	.word	0x0800de23
 800ddb4:	0800de15 	.word	0x0800de15
 800ddb8:	2b40      	cmp	r3, #64	@ 0x40
 800ddba:	d02e      	beq.n	800de1a <UART_SetConfig+0xab2>
 800ddbc:	e031      	b.n	800de22 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddbe:	f7fa fd4b 	bl	8008858 <HAL_RCC_GetPCLK1Freq>
 800ddc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddc4:	e033      	b.n	800de2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddc6:	f7fa fd5d 	bl	8008884 <HAL_RCC_GetPCLK2Freq>
 800ddca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddcc:	e02f      	b.n	800de2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fb ff40 	bl	8009c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dddc:	e027      	b.n	800de2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddde:	f107 0318 	add.w	r3, r7, #24
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fc f88c 	bl	8009f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddec:	e01f      	b.n	800de2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddee:	4b69      	ldr	r3, [pc, #420]	@ (800df94 <UART_SetConfig+0xc2c>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f003 0320 	and.w	r3, r3, #32
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d009      	beq.n	800de0e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddfa:	4b66      	ldr	r3, [pc, #408]	@ (800df94 <UART_SetConfig+0xc2c>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	08db      	lsrs	r3, r3, #3
 800de00:	f003 0303 	and.w	r3, r3, #3
 800de04:	4a64      	ldr	r2, [pc, #400]	@ (800df98 <UART_SetConfig+0xc30>)
 800de06:	fa22 f303 	lsr.w	r3, r2, r3
 800de0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de0c:	e00f      	b.n	800de2e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800de0e:	4b62      	ldr	r3, [pc, #392]	@ (800df98 <UART_SetConfig+0xc30>)
 800de10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de12:	e00c      	b.n	800de2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de14:	4b61      	ldr	r3, [pc, #388]	@ (800df9c <UART_SetConfig+0xc34>)
 800de16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de18:	e009      	b.n	800de2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de20:	e005      	b.n	800de2e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800de22:	2300      	movs	r3, #0
 800de24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de30:	2b00      	cmp	r3, #0
 800de32:	f000 80ea 	beq.w	800e00a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de3a:	4a55      	ldr	r2, [pc, #340]	@ (800df90 <UART_SetConfig+0xc28>)
 800de3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de40:	461a      	mov	r2, r3
 800de42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de44:	fbb3 f3f2 	udiv	r3, r3, r2
 800de48:	005a      	lsls	r2, r3, #1
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	085b      	lsrs	r3, r3, #1
 800de50:	441a      	add	r2, r3
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	fbb2 f3f3 	udiv	r3, r2, r3
 800de5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de5e:	2b0f      	cmp	r3, #15
 800de60:	d916      	bls.n	800de90 <UART_SetConfig+0xb28>
 800de62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de68:	d212      	bcs.n	800de90 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	f023 030f 	bic.w	r3, r3, #15
 800de72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de76:	085b      	lsrs	r3, r3, #1
 800de78:	b29b      	uxth	r3, r3
 800de7a:	f003 0307 	and.w	r3, r3, #7
 800de7e:	b29a      	uxth	r2, r3
 800de80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de82:	4313      	orrs	r3, r2
 800de84:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800de8c:	60da      	str	r2, [r3, #12]
 800de8e:	e0bc      	b.n	800e00a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800de90:	2301      	movs	r3, #1
 800de92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800de96:	e0b8      	b.n	800e00a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800de98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de9c:	2b20      	cmp	r3, #32
 800de9e:	dc4b      	bgt.n	800df38 <UART_SetConfig+0xbd0>
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f2c0 8087 	blt.w	800dfb4 <UART_SetConfig+0xc4c>
 800dea6:	2b20      	cmp	r3, #32
 800dea8:	f200 8084 	bhi.w	800dfb4 <UART_SetConfig+0xc4c>
 800deac:	a201      	add	r2, pc, #4	@ (adr r2, 800deb4 <UART_SetConfig+0xb4c>)
 800deae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb2:	bf00      	nop
 800deb4:	0800df3f 	.word	0x0800df3f
 800deb8:	0800df47 	.word	0x0800df47
 800debc:	0800dfb5 	.word	0x0800dfb5
 800dec0:	0800dfb5 	.word	0x0800dfb5
 800dec4:	0800df4f 	.word	0x0800df4f
 800dec8:	0800dfb5 	.word	0x0800dfb5
 800decc:	0800dfb5 	.word	0x0800dfb5
 800ded0:	0800dfb5 	.word	0x0800dfb5
 800ded4:	0800df5f 	.word	0x0800df5f
 800ded8:	0800dfb5 	.word	0x0800dfb5
 800dedc:	0800dfb5 	.word	0x0800dfb5
 800dee0:	0800dfb5 	.word	0x0800dfb5
 800dee4:	0800dfb5 	.word	0x0800dfb5
 800dee8:	0800dfb5 	.word	0x0800dfb5
 800deec:	0800dfb5 	.word	0x0800dfb5
 800def0:	0800dfb5 	.word	0x0800dfb5
 800def4:	0800df6f 	.word	0x0800df6f
 800def8:	0800dfb5 	.word	0x0800dfb5
 800defc:	0800dfb5 	.word	0x0800dfb5
 800df00:	0800dfb5 	.word	0x0800dfb5
 800df04:	0800dfb5 	.word	0x0800dfb5
 800df08:	0800dfb5 	.word	0x0800dfb5
 800df0c:	0800dfb5 	.word	0x0800dfb5
 800df10:	0800dfb5 	.word	0x0800dfb5
 800df14:	0800dfb5 	.word	0x0800dfb5
 800df18:	0800dfb5 	.word	0x0800dfb5
 800df1c:	0800dfb5 	.word	0x0800dfb5
 800df20:	0800dfb5 	.word	0x0800dfb5
 800df24:	0800dfb5 	.word	0x0800dfb5
 800df28:	0800dfb5 	.word	0x0800dfb5
 800df2c:	0800dfb5 	.word	0x0800dfb5
 800df30:	0800dfb5 	.word	0x0800dfb5
 800df34:	0800dfa7 	.word	0x0800dfa7
 800df38:	2b40      	cmp	r3, #64	@ 0x40
 800df3a:	d037      	beq.n	800dfac <UART_SetConfig+0xc44>
 800df3c:	e03a      	b.n	800dfb4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df3e:	f7fa fc8b 	bl	8008858 <HAL_RCC_GetPCLK1Freq>
 800df42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df44:	e03c      	b.n	800dfc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df46:	f7fa fc9d 	bl	8008884 <HAL_RCC_GetPCLK2Freq>
 800df4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800df4c:	e038      	b.n	800dfc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df52:	4618      	mov	r0, r3
 800df54:	f7fb fe80 	bl	8009c58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df5c:	e030      	b.n	800dfc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df5e:	f107 0318 	add.w	r3, r7, #24
 800df62:	4618      	mov	r0, r3
 800df64:	f7fb ffcc 	bl	8009f00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df6c:	e028      	b.n	800dfc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df6e:	4b09      	ldr	r3, [pc, #36]	@ (800df94 <UART_SetConfig+0xc2c>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f003 0320 	and.w	r3, r3, #32
 800df76:	2b00      	cmp	r3, #0
 800df78:	d012      	beq.n	800dfa0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df7a:	4b06      	ldr	r3, [pc, #24]	@ (800df94 <UART_SetConfig+0xc2c>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	08db      	lsrs	r3, r3, #3
 800df80:	f003 0303 	and.w	r3, r3, #3
 800df84:	4a04      	ldr	r2, [pc, #16]	@ (800df98 <UART_SetConfig+0xc30>)
 800df86:	fa22 f303 	lsr.w	r3, r2, r3
 800df8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df8c:	e018      	b.n	800dfc0 <UART_SetConfig+0xc58>
 800df8e:	bf00      	nop
 800df90:	08013228 	.word	0x08013228
 800df94:	58024400 	.word	0x58024400
 800df98:	03d09000 	.word	0x03d09000
 800df9c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800dfa0:	4b24      	ldr	r3, [pc, #144]	@ (800e034 <UART_SetConfig+0xccc>)
 800dfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfa4:	e00c      	b.n	800dfc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfa6:	4b24      	ldr	r3, [pc, #144]	@ (800e038 <UART_SetConfig+0xcd0>)
 800dfa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfaa:	e009      	b.n	800dfc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfb2:	e005      	b.n	800dfc0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dfbe:	bf00      	nop
    }

    if (pclk != 0U)
 800dfc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d021      	beq.n	800e00a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfca:	4a1c      	ldr	r2, [pc, #112]	@ (800e03c <UART_SetConfig+0xcd4>)
 800dfcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfd4:	fbb3 f2f2 	udiv	r2, r3, r2
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	085b      	lsrs	r3, r3, #1
 800dfde:	441a      	add	r2, r3
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfe8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfec:	2b0f      	cmp	r3, #15
 800dfee:	d909      	bls.n	800e004 <UART_SetConfig+0xc9c>
 800dff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dff6:	d205      	bcs.n	800e004 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	60da      	str	r2, [r3, #12]
 800e002:	e002      	b.n	800e00a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e004:	2301      	movs	r3, #1
 800e006:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	2201      	movs	r2, #1
 800e00e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	2201      	movs	r2, #1
 800e016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	2200      	movs	r2, #0
 800e01e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	2200      	movs	r2, #0
 800e024:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e026:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3748      	adds	r7, #72	@ 0x48
 800e02e:	46bd      	mov	sp, r7
 800e030:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e034:	03d09000 	.word	0x03d09000
 800e038:	003d0900 	.word	0x003d0900
 800e03c:	08013228 	.word	0x08013228

0800e040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e04c:	f003 0308 	and.w	r3, r3, #8
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00a      	beq.n	800e06a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	430a      	orrs	r2, r1
 800e068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e06e:	f003 0301 	and.w	r3, r3, #1
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00a      	beq.n	800e08c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	430a      	orrs	r2, r1
 800e08a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e090:	f003 0302 	and.w	r3, r3, #2
 800e094:	2b00      	cmp	r3, #0
 800e096:	d00a      	beq.n	800e0ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	430a      	orrs	r2, r1
 800e0ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0b2:	f003 0304 	and.w	r3, r3, #4
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00a      	beq.n	800e0d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	430a      	orrs	r2, r1
 800e0ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0d4:	f003 0310 	and.w	r3, r3, #16
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00a      	beq.n	800e0f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	430a      	orrs	r2, r1
 800e0f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f6:	f003 0320 	and.w	r3, r3, #32
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00a      	beq.n	800e114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	430a      	orrs	r2, r1
 800e112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d01a      	beq.n	800e156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	430a      	orrs	r2, r1
 800e134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e13a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e13e:	d10a      	bne.n	800e156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	430a      	orrs	r2, r1
 800e154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00a      	beq.n	800e178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	430a      	orrs	r2, r1
 800e176:	605a      	str	r2, [r3, #4]
  }
}
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b098      	sub	sp, #96	@ 0x60
 800e188:	af02      	add	r7, sp, #8
 800e18a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e194:	f7f5 fc9c 	bl	8003ad0 <HAL_GetTick>
 800e198:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f003 0308 	and.w	r3, r3, #8
 800e1a4:	2b08      	cmp	r3, #8
 800e1a6:	d12f      	bne.n	800e208 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e1a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e1ac:	9300      	str	r3, [sp, #0]
 800e1ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f88e 	bl	800e2d8 <UART_WaitOnFlagUntilTimeout>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d022      	beq.n	800e208 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ca:	e853 3f00 	ldrex	r3, [r3]
 800e1ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	461a      	mov	r2, r3
 800e1de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e1e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1e8:	e841 2300 	strex	r3, r2, [r1]
 800e1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e1ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d1e6      	bne.n	800e1c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2220      	movs	r2, #32
 800e1f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2200      	movs	r2, #0
 800e200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e204:	2303      	movs	r3, #3
 800e206:	e063      	b.n	800e2d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 0304 	and.w	r3, r3, #4
 800e212:	2b04      	cmp	r3, #4
 800e214:	d149      	bne.n	800e2aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e216:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e21a:	9300      	str	r3, [sp, #0]
 800e21c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e21e:	2200      	movs	r2, #0
 800e220:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 f857 	bl	800e2d8 <UART_WaitOnFlagUntilTimeout>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d03c      	beq.n	800e2aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e238:	e853 3f00 	ldrex	r3, [r3]
 800e23c:	623b      	str	r3, [r7, #32]
   return(result);
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	461a      	mov	r2, r3
 800e24c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e24e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e250:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e256:	e841 2300 	strex	r3, r2, [r1]
 800e25a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d1e6      	bne.n	800e230 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	3308      	adds	r3, #8
 800e268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	e853 3f00 	ldrex	r3, [r3]
 800e270:	60fb      	str	r3, [r7, #12]
   return(result);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f023 0301 	bic.w	r3, r3, #1
 800e278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	3308      	adds	r3, #8
 800e280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e282:	61fa      	str	r2, [r7, #28]
 800e284:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e286:	69b9      	ldr	r1, [r7, #24]
 800e288:	69fa      	ldr	r2, [r7, #28]
 800e28a:	e841 2300 	strex	r3, r2, [r1]
 800e28e:	617b      	str	r3, [r7, #20]
   return(result);
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1e5      	bne.n	800e262 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2220      	movs	r2, #32
 800e29a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2a6:	2303      	movs	r3, #3
 800e2a8:	e012      	b.n	800e2d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2220      	movs	r2, #32
 800e2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2220      	movs	r2, #32
 800e2b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3758      	adds	r7, #88	@ 0x58
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	603b      	str	r3, [r7, #0]
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2e8:	e04f      	b.n	800e38a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f0:	d04b      	beq.n	800e38a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2f2:	f7f5 fbed 	bl	8003ad0 <HAL_GetTick>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	1ad3      	subs	r3, r2, r3
 800e2fc:	69ba      	ldr	r2, [r7, #24]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d302      	bcc.n	800e308 <UART_WaitOnFlagUntilTimeout+0x30>
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d101      	bne.n	800e30c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e308:	2303      	movs	r3, #3
 800e30a:	e04e      	b.n	800e3aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f003 0304 	and.w	r3, r3, #4
 800e316:	2b00      	cmp	r3, #0
 800e318:	d037      	beq.n	800e38a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2b80      	cmp	r3, #128	@ 0x80
 800e31e:	d034      	beq.n	800e38a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	2b40      	cmp	r3, #64	@ 0x40
 800e324:	d031      	beq.n	800e38a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	69db      	ldr	r3, [r3, #28]
 800e32c:	f003 0308 	and.w	r3, r3, #8
 800e330:	2b08      	cmp	r3, #8
 800e332:	d110      	bne.n	800e356 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2208      	movs	r2, #8
 800e33a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f000 f921 	bl	800e584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2208      	movs	r2, #8
 800e346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e352:	2301      	movs	r3, #1
 800e354:	e029      	b.n	800e3aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	69db      	ldr	r3, [r3, #28]
 800e35c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e364:	d111      	bne.n	800e38a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e36e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 f907 	bl	800e584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2220      	movs	r2, #32
 800e37a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2200      	movs	r2, #0
 800e382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e386:	2303      	movs	r3, #3
 800e388:	e00f      	b.n	800e3aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	69da      	ldr	r2, [r3, #28]
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	4013      	ands	r3, r2
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	429a      	cmp	r2, r3
 800e398:	bf0c      	ite	eq
 800e39a:	2301      	moveq	r3, #1
 800e39c:	2300      	movne	r3, #0
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	79fb      	ldrb	r3, [r7, #7]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d0a0      	beq.n	800e2ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e3a8:	2300      	movs	r3, #0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
	...

0800e3b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b096      	sub	sp, #88	@ 0x58
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	88fa      	ldrh	r2, [r7, #6]
 800e3cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2222      	movs	r2, #34	@ 0x22
 800e3dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d02d      	beq.n	800e446 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3f0:	4a40      	ldr	r2, [pc, #256]	@ (800e4f4 <UART_Start_Receive_DMA+0x140>)
 800e3f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3fa:	4a3f      	ldr	r2, [pc, #252]	@ (800e4f8 <UART_Start_Receive_DMA+0x144>)
 800e3fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e404:	4a3d      	ldr	r2, [pc, #244]	@ (800e4fc <UART_Start_Receive_DMA+0x148>)
 800e406:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e40e:	2200      	movs	r2, #0
 800e410:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3324      	adds	r3, #36	@ 0x24
 800e41e:	4619      	mov	r1, r3
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e424:	461a      	mov	r2, r3
 800e426:	88fb      	ldrh	r3, [r7, #6]
 800e428:	f7f6 f898 	bl	800455c <HAL_DMA_Start_IT>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d009      	beq.n	800e446 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2210      	movs	r2, #16
 800e436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2220      	movs	r2, #32
 800e43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e442:	2301      	movs	r3, #1
 800e444:	e051      	b.n	800e4ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d018      	beq.n	800e480 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e456:	e853 3f00 	ldrex	r3, [r3]
 800e45a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e462:	657b      	str	r3, [r7, #84]	@ 0x54
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	461a      	mov	r2, r3
 800e46a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e46c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e46e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e470:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e472:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e474:	e841 2300 	strex	r3, r2, [r1]
 800e478:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e47a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1e6      	bne.n	800e44e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3308      	adds	r3, #8
 800e486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e48a:	e853 3f00 	ldrex	r3, [r3]
 800e48e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e492:	f043 0301 	orr.w	r3, r3, #1
 800e496:	653b      	str	r3, [r7, #80]	@ 0x50
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3308      	adds	r3, #8
 800e49e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e4a0:	637a      	str	r2, [r7, #52]	@ 0x34
 800e4a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e4a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4a8:	e841 2300 	strex	r3, r2, [r1]
 800e4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d1e5      	bne.n	800e480 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3308      	adds	r3, #8
 800e4ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	e853 3f00 	ldrex	r3, [r3]
 800e4c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	3308      	adds	r3, #8
 800e4d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e4d4:	623a      	str	r2, [r7, #32]
 800e4d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d8:	69f9      	ldr	r1, [r7, #28]
 800e4da:	6a3a      	ldr	r2, [r7, #32]
 800e4dc:	e841 2300 	strex	r3, r2, [r1]
 800e4e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1e5      	bne.n	800e4b4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e4e8:	2300      	movs	r3, #0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3758      	adds	r7, #88	@ 0x58
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	0800e651 	.word	0x0800e651
 800e4f8:	0800e779 	.word	0x0800e779
 800e4fc:	0800e7b7 	.word	0x0800e7b7

0800e500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e500:	b480      	push	{r7}
 800e502:	b08f      	sub	sp, #60	@ 0x3c
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50e:	6a3b      	ldr	r3, [r7, #32]
 800e510:	e853 3f00 	ldrex	r3, [r3]
 800e514:	61fb      	str	r3, [r7, #28]
   return(result);
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e51c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e528:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e52c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e52e:	e841 2300 	strex	r3, r2, [r1]
 800e532:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1e6      	bne.n	800e508 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	60bb      	str	r3, [r7, #8]
   return(result);
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e550:	633b      	str	r3, [r7, #48]	@ 0x30
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	3308      	adds	r3, #8
 800e558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e55a:	61ba      	str	r2, [r7, #24]
 800e55c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55e:	6979      	ldr	r1, [r7, #20]
 800e560:	69ba      	ldr	r2, [r7, #24]
 800e562:	e841 2300 	strex	r3, r2, [r1]
 800e566:	613b      	str	r3, [r7, #16]
   return(result);
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1e5      	bne.n	800e53a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2220      	movs	r2, #32
 800e572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e576:	bf00      	nop
 800e578:	373c      	adds	r7, #60	@ 0x3c
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
	...

0800e584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e584:	b480      	push	{r7}
 800e586:	b095      	sub	sp, #84	@ 0x54
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e594:	e853 3f00 	ldrex	r3, [r3]
 800e598:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e5a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e5b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e5b2:	e841 2300 	strex	r3, r2, [r1]
 800e5b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d1e6      	bne.n	800e58c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	3308      	adds	r3, #8
 800e5c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c6:	6a3b      	ldr	r3, [r7, #32]
 800e5c8:	e853 3f00 	ldrex	r3, [r3]
 800e5cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5ce:	69fa      	ldr	r2, [r7, #28]
 800e5d0:	4b1e      	ldr	r3, [pc, #120]	@ (800e64c <UART_EndRxTransfer+0xc8>)
 800e5d2:	4013      	ands	r3, r2
 800e5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	3308      	adds	r3, #8
 800e5dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e5e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e5e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5e6:	e841 2300 	strex	r3, r2, [r1]
 800e5ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1e5      	bne.n	800e5be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d118      	bne.n	800e62c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	e853 3f00 	ldrex	r3, [r3]
 800e606:	60bb      	str	r3, [r7, #8]
   return(result);
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	f023 0310 	bic.w	r3, r3, #16
 800e60e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	461a      	mov	r2, r3
 800e616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e618:	61bb      	str	r3, [r7, #24]
 800e61a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61c:	6979      	ldr	r1, [r7, #20]
 800e61e:	69ba      	ldr	r2, [r7, #24]
 800e620:	e841 2300 	strex	r3, r2, [r1]
 800e624:	613b      	str	r3, [r7, #16]
   return(result);
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d1e6      	bne.n	800e5fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2220      	movs	r2, #32
 800e630:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e640:	bf00      	nop
 800e642:	3754      	adds	r7, #84	@ 0x54
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr
 800e64c:	effffffe 	.word	0xeffffffe

0800e650 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b09c      	sub	sp, #112	@ 0x70
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e65c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	69db      	ldr	r3, [r3, #28]
 800e662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e666:	d071      	beq.n	800e74c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e66a:	2200      	movs	r2, #0
 800e66c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e678:	e853 3f00 	ldrex	r3, [r3]
 800e67c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e67e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e684:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e68e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e690:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e692:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e694:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e696:	e841 2300 	strex	r3, r2, [r1]
 800e69a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e69c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1e6      	bne.n	800e670 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3308      	adds	r3, #8
 800e6a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ac:	e853 3f00 	ldrex	r3, [r3]
 800e6b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6b4:	f023 0301 	bic.w	r3, r3, #1
 800e6b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800e6ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3308      	adds	r3, #8
 800e6c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e6c2:	647a      	str	r2, [r7, #68]	@ 0x44
 800e6c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6ca:	e841 2300 	strex	r3, r2, [r1]
 800e6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d1e5      	bne.n	800e6a2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	3308      	adds	r3, #8
 800e6dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e0:	e853 3f00 	ldrex	r3, [r3]
 800e6e4:	623b      	str	r3, [r7, #32]
   return(result);
 800e6e6:	6a3b      	ldr	r3, [r7, #32]
 800e6e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800e6ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	3308      	adds	r3, #8
 800e6f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e6f6:	633a      	str	r2, [r7, #48]	@ 0x30
 800e6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6fe:	e841 2300 	strex	r3, r2, [r1]
 800e702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e706:	2b00      	cmp	r3, #0
 800e708:	d1e5      	bne.n	800e6d6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e70a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e70c:	2220      	movs	r2, #32
 800e70e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e716:	2b01      	cmp	r3, #1
 800e718:	d118      	bne.n	800e74c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e71a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	e853 3f00 	ldrex	r3, [r3]
 800e726:	60fb      	str	r3, [r7, #12]
   return(result);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f023 0310 	bic.w	r3, r3, #16
 800e72e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	461a      	mov	r2, r3
 800e736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e738:	61fb      	str	r3, [r7, #28]
 800e73a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e73c:	69b9      	ldr	r1, [r7, #24]
 800e73e:	69fa      	ldr	r2, [r7, #28]
 800e740:	e841 2300 	strex	r3, r2, [r1]
 800e744:	617b      	str	r3, [r7, #20]
   return(result);
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1e6      	bne.n	800e71a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e74c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e74e:	2200      	movs	r2, #0
 800e750:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e756:	2b01      	cmp	r3, #1
 800e758:	d107      	bne.n	800e76a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e75a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e75c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e760:	4619      	mov	r1, r3
 800e762:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e764:	f7fe fdf4 	bl	800d350 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e768:	e002      	b.n	800e770 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e76a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e76c:	f7f4 f812 	bl	8002794 <HAL_UART_RxCpltCallback>
}
 800e770:	bf00      	nop
 800e772:	3770      	adds	r7, #112	@ 0x70
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e784:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2201      	movs	r2, #1
 800e78a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e790:	2b01      	cmp	r3, #1
 800e792:	d109      	bne.n	800e7a8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e79a:	085b      	lsrs	r3, r3, #1
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	4619      	mov	r1, r3
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	f7fe fdd5 	bl	800d350 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7a6:	e002      	b.n	800e7ae <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f7fe fdbd 	bl	800d328 <HAL_UART_RxHalfCpltCallback>
}
 800e7ae:	bf00      	nop
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b086      	sub	sp, #24
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7de:	2b80      	cmp	r3, #128	@ 0x80
 800e7e0:	d109      	bne.n	800e7f6 <UART_DMAError+0x40>
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	2b21      	cmp	r3, #33	@ 0x21
 800e7e6:	d106      	bne.n	800e7f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e7f0:	6978      	ldr	r0, [r7, #20]
 800e7f2:	f7ff fe85 	bl	800e500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e800:	2b40      	cmp	r3, #64	@ 0x40
 800e802:	d109      	bne.n	800e818 <UART_DMAError+0x62>
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2b22      	cmp	r3, #34	@ 0x22
 800e808:	d106      	bne.n	800e818 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	2200      	movs	r2, #0
 800e80e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e812:	6978      	ldr	r0, [r7, #20]
 800e814:	f7ff feb6 	bl	800e584 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e81e:	f043 0210 	orr.w	r2, r3, #16
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e828:	6978      	ldr	r0, [r7, #20]
 800e82a:	f7fe fd87 	bl	800d33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e82e:	bf00      	nop
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b084      	sub	sp, #16
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2200      	movs	r2, #0
 800e848:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2200      	movs	r2, #0
 800e850:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f7fe fd71 	bl	800d33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e85a:	bf00      	nop
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e862:	b580      	push	{r7, lr}
 800e864:	b088      	sub	sp, #32
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	e853 3f00 	ldrex	r3, [r3]
 800e876:	60bb      	str	r3, [r7, #8]
   return(result);
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e87e:	61fb      	str	r3, [r7, #28]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	461a      	mov	r2, r3
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	61bb      	str	r3, [r7, #24]
 800e88a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88c:	6979      	ldr	r1, [r7, #20]
 800e88e:	69ba      	ldr	r2, [r7, #24]
 800e890:	e841 2300 	strex	r3, r2, [r1]
 800e894:	613b      	str	r3, [r7, #16]
   return(result);
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1e6      	bne.n	800e86a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2220      	movs	r2, #32
 800e8a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7fe fd32 	bl	800d314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8b0:	bf00      	nop
 800e8b2:	3720      	adds	r7, #32
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e8d4:	bf00      	nop
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e8e8:	bf00      	nop
 800e8ea:	370c      	adds	r7, #12
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr

0800e8f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e902:	2b01      	cmp	r3, #1
 800e904:	d101      	bne.n	800e90a <HAL_UARTEx_DisableFifoMode+0x16>
 800e906:	2302      	movs	r3, #2
 800e908:	e027      	b.n	800e95a <HAL_UARTEx_DisableFifoMode+0x66>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2201      	movs	r2, #1
 800e90e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2224      	movs	r2, #36	@ 0x24
 800e916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f022 0201 	bic.w	r2, r2, #1
 800e930:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e938:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2220      	movs	r2, #32
 800e94c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3714      	adds	r7, #20
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr

0800e966 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b084      	sub	sp, #16
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e976:	2b01      	cmp	r3, #1
 800e978:	d101      	bne.n	800e97e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e97a:	2302      	movs	r3, #2
 800e97c:	e02d      	b.n	800e9da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2201      	movs	r2, #1
 800e982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2224      	movs	r2, #36	@ 0x24
 800e98a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f022 0201 	bic.w	r2, r2, #1
 800e9a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	683a      	ldr	r2, [r7, #0]
 800e9b6:	430a      	orrs	r2, r1
 800e9b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f850 	bl	800ea60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2220      	movs	r2, #32
 800e9cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e9d8:	2300      	movs	r3, #0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b084      	sub	sp, #16
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d101      	bne.n	800e9fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	e02d      	b.n	800ea56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2224      	movs	r2, #36	@ 0x24
 800ea06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f022 0201 	bic.w	r2, r2, #1
 800ea20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	683a      	ldr	r2, [r7, #0]
 800ea32:	430a      	orrs	r2, r1
 800ea34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 f812 	bl	800ea60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2220      	movs	r2, #32
 800ea48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
	...

0800ea60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d108      	bne.n	800ea82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2201      	movs	r2, #1
 800ea74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea80:	e031      	b.n	800eae6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea82:	2310      	movs	r3, #16
 800ea84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ea86:	2310      	movs	r3, #16
 800ea88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	0e5b      	lsrs	r3, r3, #25
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	f003 0307 	and.w	r3, r3, #7
 800ea98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	0f5b      	lsrs	r3, r3, #29
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	f003 0307 	and.w	r3, r3, #7
 800eaa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eaaa:	7bbb      	ldrb	r3, [r7, #14]
 800eaac:	7b3a      	ldrb	r2, [r7, #12]
 800eaae:	4911      	ldr	r1, [pc, #68]	@ (800eaf4 <UARTEx_SetNbDataToProcess+0x94>)
 800eab0:	5c8a      	ldrb	r2, [r1, r2]
 800eab2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eab6:	7b3a      	ldrb	r2, [r7, #12]
 800eab8:	490f      	ldr	r1, [pc, #60]	@ (800eaf8 <UARTEx_SetNbDataToProcess+0x98>)
 800eaba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eabc:	fb93 f3f2 	sdiv	r3, r3, r2
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
 800eaca:	7b7a      	ldrb	r2, [r7, #13]
 800eacc:	4909      	ldr	r1, [pc, #36]	@ (800eaf4 <UARTEx_SetNbDataToProcess+0x94>)
 800eace:	5c8a      	ldrb	r2, [r1, r2]
 800ead0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ead4:	7b7a      	ldrb	r2, [r7, #13]
 800ead6:	4908      	ldr	r1, [pc, #32]	@ (800eaf8 <UARTEx_SetNbDataToProcess+0x98>)
 800ead8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eada:	fb93 f3f2 	sdiv	r3, r3, r2
 800eade:	b29a      	uxth	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800eae6:	bf00      	nop
 800eae8:	3714      	adds	r7, #20
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	08013240 	.word	0x08013240
 800eaf8:	08013248 	.word	0x08013248

0800eafc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800eb00:	4904      	ldr	r1, [pc, #16]	@ (800eb14 <MX_FATFS_Init+0x18>)
 800eb02:	4805      	ldr	r0, [pc, #20]	@ (800eb18 <MX_FATFS_Init+0x1c>)
 800eb04:	f004 f8c6 	bl	8012c94 <FATFS_LinkDriver>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	4b03      	ldr	r3, [pc, #12]	@ (800eb1c <MX_FATFS_Init+0x20>)
 800eb0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eb10:	bf00      	nop
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	24002a7c 	.word	0x24002a7c
 800eb18:	240000a8 	.word	0x240000a8
 800eb1c:	24002a78 	.word	0x24002a78

0800eb20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800eb20:	b480      	push	{r7}
 800eb22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800eb24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	4603      	mov	r3, r0
 800eb38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800eb3a:	79fb      	ldrb	r3, [r7, #7]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f000 f9fd 	bl	800ef3c <SD_disk_initialize>
 800eb42:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f000 fad5 	bl	800f108 <SD_disk_status>
 800eb5e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60b9      	str	r1, [r7, #8]
 800eb70:	607a      	str	r2, [r7, #4]
 800eb72:	603b      	str	r3, [r7, #0]
 800eb74:	4603      	mov	r3, r0
 800eb76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800eb78:	7bf8      	ldrb	r0, [r7, #15]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	68b9      	ldr	r1, [r7, #8]
 800eb80:	f000 fad8 	bl	800f134 <SD_disk_read>
 800eb84:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b084      	sub	sp, #16
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	603b      	str	r3, [r7, #0]
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800eb9e:	7bf8      	ldrb	r0, [r7, #15]
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	68b9      	ldr	r1, [r7, #8]
 800eba6:	f000 fb2f 	bl	800f208 <SD_disk_write>
 800ebaa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	4603      	mov	r3, r0
 800ebbc:	603a      	str	r2, [r7, #0]
 800ebbe:	71fb      	strb	r3, [r7, #7]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800ebc4:	79b9      	ldrb	r1, [r7, #6]
 800ebc6:	79fb      	ldrb	r3, [r7, #7]
 800ebc8:	683a      	ldr	r2, [r7, #0]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f000 fba0 	bl	800f310 <SD_disk_ioctl>
 800ebd0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3708      	adds	r7, #8
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
	...

0800ebdc <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	2110      	movs	r1, #16
 800ebe4:	4802      	ldr	r0, [pc, #8]	@ (800ebf0 <SELECT+0x14>)
 800ebe6:	f7f8 fd1d 	bl	8007624 <HAL_GPIO_WritePin>
}
 800ebea:	bf00      	nop
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	58020000 	.word	0x58020000

0800ebf4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	2110      	movs	r1, #16
 800ebfc:	4802      	ldr	r0, [pc, #8]	@ (800ec08 <DESELECT+0x14>)
 800ebfe:	f7f8 fd11 	bl	8007624 <HAL_GPIO_WritePin>
}
 800ec02:	bf00      	nop
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	58020000 	.word	0x58020000

0800ec0c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	4603      	mov	r3, r0
 800ec14:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ec16:	bf00      	nop
 800ec18:	4b08      	ldr	r3, [pc, #32]	@ (800ec3c <SPI_TxByte+0x30>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	695b      	ldr	r3, [r3, #20]
 800ec1e:	f003 0302 	and.w	r3, r3, #2
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	d1f8      	bne.n	800ec18 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800ec26:	1df9      	adds	r1, r7, #7
 800ec28:	2364      	movs	r3, #100	@ 0x64
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	4803      	ldr	r0, [pc, #12]	@ (800ec3c <SPI_TxByte+0x30>)
 800ec2e:	f7fb fd43 	bl	800a6b8 <HAL_SPI_Transmit>
}
 800ec32:	bf00      	nop
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	240024a8 	.word	0x240024a8

0800ec40 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ec4c:	bf00      	nop
 800ec4e:	4b08      	ldr	r3, [pc, #32]	@ (800ec70 <SPI_TxBuffer+0x30>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	695b      	ldr	r3, [r3, #20]
 800ec54:	f003 0302 	and.w	r3, r3, #2
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d1f8      	bne.n	800ec4e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800ec5c:	887a      	ldrh	r2, [r7, #2]
 800ec5e:	2364      	movs	r3, #100	@ 0x64
 800ec60:	6879      	ldr	r1, [r7, #4]
 800ec62:	4803      	ldr	r0, [pc, #12]	@ (800ec70 <SPI_TxBuffer+0x30>)
 800ec64:	f7fb fd28 	bl	800a6b8 <HAL_SPI_Transmit>
}
 800ec68:	bf00      	nop
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	240024a8 	.word	0x240024a8

0800ec74 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800ec7a:	23ff      	movs	r3, #255	@ 0xff
 800ec7c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ec7e:	bf00      	nop
 800ec80:	4b09      	ldr	r3, [pc, #36]	@ (800eca8 <SPI_RxByte+0x34>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	695b      	ldr	r3, [r3, #20]
 800ec86:	f003 0302 	and.w	r3, r3, #2
 800ec8a:	2b02      	cmp	r3, #2
 800ec8c:	d1f8      	bne.n	800ec80 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800ec8e:	1dba      	adds	r2, r7, #6
 800ec90:	1df9      	adds	r1, r7, #7
 800ec92:	2364      	movs	r3, #100	@ 0x64
 800ec94:	9300      	str	r3, [sp, #0]
 800ec96:	2301      	movs	r3, #1
 800ec98:	4803      	ldr	r0, [pc, #12]	@ (800eca8 <SPI_RxByte+0x34>)
 800ec9a:	f7fc f96d 	bl	800af78 <HAL_SPI_TransmitReceive>
  return data;
 800ec9e:	79bb      	ldrb	r3, [r7, #6]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	240024a8 	.word	0x240024a8

0800ecac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800ecb4:	f7ff ffde 	bl	800ec74 <SPI_RxByte>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	461a      	mov	r2, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	701a      	strb	r2, [r3, #0]
}
 800ecc0:	bf00      	nop
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800ecce:	4b0a      	ldr	r3, [pc, #40]	@ (800ecf8 <SD_ReadyWait+0x30>)
 800ecd0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800ecd4:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800ecd6:	f7ff ffcd 	bl	800ec74 <SPI_RxByte>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800ecde:	79fb      	ldrb	r3, [r7, #7]
 800ece0:	2bff      	cmp	r3, #255	@ 0xff
 800ece2:	d003      	beq.n	800ecec <SD_ReadyWait+0x24>
 800ece4:	4b04      	ldr	r3, [pc, #16]	@ (800ecf8 <SD_ReadyWait+0x30>)
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d1f4      	bne.n	800ecd6 <SD_ReadyWait+0xe>
  return res;
 800ecec:	79fb      	ldrb	r3, [r7, #7]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	24002a82 	.word	0x24002a82

0800ecfc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800ed02:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800ed06:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800ed08:	f7ff ff74 	bl	800ebf4 <DESELECT>
  for(int i = 0; i < 10; i++)
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	60bb      	str	r3, [r7, #8]
 800ed10:	e005      	b.n	800ed1e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800ed12:	20ff      	movs	r0, #255	@ 0xff
 800ed14:	f7ff ff7a 	bl	800ec0c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	60bb      	str	r3, [r7, #8]
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	2b09      	cmp	r3, #9
 800ed22:	ddf6      	ble.n	800ed12 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800ed24:	f7ff ff5a 	bl	800ebdc <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800ed28:	2340      	movs	r3, #64	@ 0x40
 800ed2a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800ed30:	2300      	movs	r3, #0
 800ed32:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800ed34:	2300      	movs	r3, #0
 800ed36:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800ed3c:	2395      	movs	r3, #149	@ 0x95
 800ed3e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800ed40:	463b      	mov	r3, r7
 800ed42:	2106      	movs	r1, #6
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7ff ff7b 	bl	800ec40 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800ed4a:	e002      	b.n	800ed52 <SD_PowerOn+0x56>
  {
    cnt--;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800ed52:	f7ff ff8f 	bl	800ec74 <SPI_RxByte>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d002      	beq.n	800ed62 <SD_PowerOn+0x66>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1f4      	bne.n	800ed4c <SD_PowerOn+0x50>
  }
  DESELECT();
 800ed62:	f7ff ff47 	bl	800ebf4 <DESELECT>
  SPI_TxByte(0XFF);
 800ed66:	20ff      	movs	r0, #255	@ 0xff
 800ed68:	f7ff ff50 	bl	800ec0c <SPI_TxByte>
  PowerFlag = 1;
 800ed6c:	4b03      	ldr	r3, [pc, #12]	@ (800ed7c <SD_PowerOn+0x80>)
 800ed6e:	2201      	movs	r2, #1
 800ed70:	701a      	strb	r2, [r3, #0]
}
 800ed72:	bf00      	nop
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	24002a85 	.word	0x24002a85

0800ed80 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800ed80:	b480      	push	{r7}
 800ed82:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800ed84:	4b03      	ldr	r3, [pc, #12]	@ (800ed94 <SD_PowerOff+0x14>)
 800ed86:	2200      	movs	r2, #0
 800ed88:	701a      	strb	r2, [r3, #0]
}
 800ed8a:	bf00      	nop
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	24002a85 	.word	0x24002a85

0800ed98 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800ed9c:	4b03      	ldr	r3, [pc, #12]	@ (800edac <SD_CheckPower+0x14>)
 800ed9e:	781b      	ldrb	r3, [r3, #0]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop
 800edac:	24002a85 	.word	0x24002a85

0800edb0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800edba:	4b13      	ldr	r3, [pc, #76]	@ (800ee08 <SD_RxDataBlock+0x58>)
 800edbc:	22c8      	movs	r2, #200	@ 0xc8
 800edbe:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800edc0:	f7ff ff58 	bl	800ec74 <SPI_RxByte>
 800edc4:	4603      	mov	r3, r0
 800edc6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
 800edca:	2bff      	cmp	r3, #255	@ 0xff
 800edcc:	d103      	bne.n	800edd6 <SD_RxDataBlock+0x26>
 800edce:	4b0e      	ldr	r3, [pc, #56]	@ (800ee08 <SD_RxDataBlock+0x58>)
 800edd0:	881b      	ldrh	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1f4      	bne.n	800edc0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800edd6:	7bfb      	ldrb	r3, [r7, #15]
 800edd8:	2bfe      	cmp	r3, #254	@ 0xfe
 800edda:	d001      	beq.n	800ede0 <SD_RxDataBlock+0x30>
 800eddc:	2300      	movs	r3, #0
 800edde:	e00f      	b.n	800ee00 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	1c5a      	adds	r2, r3, #1
 800ede4:	607a      	str	r2, [r7, #4]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7ff ff60 	bl	800ecac <SPI_RxBytePtr>
  } while(len--);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	1e5a      	subs	r2, r3, #1
 800edf0:	603a      	str	r2, [r7, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1f4      	bne.n	800ede0 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800edf6:	f7ff ff3d 	bl	800ec74 <SPI_RxByte>
  SPI_RxByte();
 800edfa:	f7ff ff3b 	bl	800ec74 <SPI_RxByte>
  return TRUE;
 800edfe:	2301      	movs	r3, #1
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	24002a80 	.word	0x24002a80

0800ee0c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	460b      	mov	r3, r1
 800ee16:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800ee1c:	f7ff ff54 	bl	800ecc8 <SD_ReadyWait>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2bff      	cmp	r3, #255	@ 0xff
 800ee24:	d001      	beq.n	800ee2a <SD_TxDataBlock+0x1e>
 800ee26:	2300      	movs	r3, #0
 800ee28:	e02f      	b.n	800ee8a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800ee2a:	78fb      	ldrb	r3, [r7, #3]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff feed 	bl	800ec0c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800ee32:	78fb      	ldrb	r3, [r7, #3]
 800ee34:	2bfd      	cmp	r3, #253	@ 0xfd
 800ee36:	d020      	beq.n	800ee7a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800ee38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7ff feff 	bl	800ec40 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800ee42:	f7ff ff17 	bl	800ec74 <SPI_RxByte>
    SPI_RxByte();
 800ee46:	f7ff ff15 	bl	800ec74 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800ee4a:	e00b      	b.n	800ee64 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800ee4c:	f7ff ff12 	bl	800ec74 <SPI_RxByte>
 800ee50:	4603      	mov	r3, r0
 800ee52:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800ee54:	7bfb      	ldrb	r3, [r7, #15]
 800ee56:	f003 031f 	and.w	r3, r3, #31
 800ee5a:	2b05      	cmp	r3, #5
 800ee5c:	d006      	beq.n	800ee6c <SD_TxDataBlock+0x60>
      i++;
 800ee5e:	7bbb      	ldrb	r3, [r7, #14]
 800ee60:	3301      	adds	r3, #1
 800ee62:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800ee64:	7bbb      	ldrb	r3, [r7, #14]
 800ee66:	2b40      	cmp	r3, #64	@ 0x40
 800ee68:	d9f0      	bls.n	800ee4c <SD_TxDataBlock+0x40>
 800ee6a:	e000      	b.n	800ee6e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800ee6c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800ee6e:	bf00      	nop
 800ee70:	f7ff ff00 	bl	800ec74 <SPI_RxByte>
 800ee74:	4603      	mov	r3, r0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d0fa      	beq.n	800ee70 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800ee7a:	7bfb      	ldrb	r3, [r7, #15]
 800ee7c:	f003 031f 	and.w	r3, r3, #31
 800ee80:	2b05      	cmp	r3, #5
 800ee82:	d101      	bne.n	800ee88 <SD_TxDataBlock+0x7c>
 800ee84:	2301      	movs	r3, #1
 800ee86:	e000      	b.n	800ee8a <SD_TxDataBlock+0x7e>

  return FALSE;
 800ee88:	2300      	movs	r3, #0
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b084      	sub	sp, #16
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	4603      	mov	r3, r0
 800ee9a:	6039      	str	r1, [r7, #0]
 800ee9c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800ee9e:	f7ff ff13 	bl	800ecc8 <SD_ReadyWait>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2bff      	cmp	r3, #255	@ 0xff
 800eea6:	d001      	beq.n	800eeac <SD_SendCmd+0x1a>
 800eea8:	23ff      	movs	r3, #255	@ 0xff
 800eeaa:	e042      	b.n	800ef32 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800eeac:	79fb      	ldrb	r3, [r7, #7]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7ff feac 	bl	800ec0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	0e1b      	lsrs	r3, r3, #24
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7ff fea6 	bl	800ec0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	0c1b      	lsrs	r3, r3, #16
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7ff fea0 	bl	800ec0c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	0a1b      	lsrs	r3, r3, #8
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7ff fe9a 	bl	800ec0c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	4618      	mov	r0, r3
 800eede:	f7ff fe95 	bl	800ec0c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800eee2:	79fb      	ldrb	r3, [r7, #7]
 800eee4:	2b40      	cmp	r3, #64	@ 0x40
 800eee6:	d102      	bne.n	800eeee <SD_SendCmd+0x5c>
 800eee8:	2395      	movs	r3, #149	@ 0x95
 800eeea:	73fb      	strb	r3, [r7, #15]
 800eeec:	e007      	b.n	800eefe <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800eeee:	79fb      	ldrb	r3, [r7, #7]
 800eef0:	2b48      	cmp	r3, #72	@ 0x48
 800eef2:	d102      	bne.n	800eefa <SD_SendCmd+0x68>
 800eef4:	2387      	movs	r3, #135	@ 0x87
 800eef6:	73fb      	strb	r3, [r7, #15]
 800eef8:	e001      	b.n	800eefe <SD_SendCmd+0x6c>
  else crc = 1;
 800eefa:	2301      	movs	r3, #1
 800eefc:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff fe83 	bl	800ec0c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800ef06:	79fb      	ldrb	r3, [r7, #7]
 800ef08:	2b4c      	cmp	r3, #76	@ 0x4c
 800ef0a:	d101      	bne.n	800ef10 <SD_SendCmd+0x7e>
 800ef0c:	f7ff feb2 	bl	800ec74 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800ef10:	230a      	movs	r3, #10
 800ef12:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800ef14:	f7ff feae 	bl	800ec74 <SPI_RxByte>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800ef1c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	da05      	bge.n	800ef30 <SD_SendCmd+0x9e>
 800ef24:	7bbb      	ldrb	r3, [r7, #14]
 800ef26:	3b01      	subs	r3, #1
 800ef28:	73bb      	strb	r3, [r7, #14]
 800ef2a:	7bbb      	ldrb	r3, [r7, #14]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1f1      	bne.n	800ef14 <SD_SendCmd+0x82>

  return res;
 800ef30:	7b7b      	ldrb	r3, [r7, #13]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
	...

0800ef3c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800ef3c:	b590      	push	{r4, r7, lr}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	4603      	mov	r3, r0
 800ef44:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800ef46:	79fb      	ldrb	r3, [r7, #7]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d001      	beq.n	800ef50 <SD_disk_initialize+0x14>
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	e0d1      	b.n	800f0f4 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800ef50:	4b6a      	ldr	r3, [pc, #424]	@ (800f0fc <SD_disk_initialize+0x1c0>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	f003 0302 	and.w	r3, r3, #2
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <SD_disk_initialize+0x2a>
 800ef5e:	4b67      	ldr	r3, [pc, #412]	@ (800f0fc <SD_disk_initialize+0x1c0>)
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	e0c6      	b.n	800f0f4 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800ef66:	f7ff fec9 	bl	800ecfc <SD_PowerOn>
  /* slave select */
  SELECT();
 800ef6a:	f7ff fe37 	bl	800ebdc <SELECT>
  /* check disk type */
  type = 0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800ef72:	2100      	movs	r1, #0
 800ef74:	2040      	movs	r0, #64	@ 0x40
 800ef76:	f7ff ff8c 	bl	800ee92 <SD_SendCmd>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	f040 80a1 	bne.w	800f0c4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800ef82:	4b5f      	ldr	r3, [pc, #380]	@ (800f100 <SD_disk_initialize+0x1c4>)
 800ef84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ef88:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800ef8a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800ef8e:	2048      	movs	r0, #72	@ 0x48
 800ef90:	f7ff ff7f 	bl	800ee92 <SD_SendCmd>
 800ef94:	4603      	mov	r3, r0
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d155      	bne.n	800f046 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	73fb      	strb	r3, [r7, #15]
 800ef9e:	e00c      	b.n	800efba <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800efa0:	7bfc      	ldrb	r4, [r7, #15]
 800efa2:	f7ff fe67 	bl	800ec74 <SPI_RxByte>
 800efa6:	4603      	mov	r3, r0
 800efa8:	461a      	mov	r2, r3
 800efaa:	f104 0310 	add.w	r3, r4, #16
 800efae:	443b      	add	r3, r7
 800efb0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800efb4:	7bfb      	ldrb	r3, [r7, #15]
 800efb6:	3301      	adds	r3, #1
 800efb8:	73fb      	strb	r3, [r7, #15]
 800efba:	7bfb      	ldrb	r3, [r7, #15]
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d9ef      	bls.n	800efa0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800efc0:	7abb      	ldrb	r3, [r7, #10]
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d17e      	bne.n	800f0c4 <SD_disk_initialize+0x188>
 800efc6:	7afb      	ldrb	r3, [r7, #11]
 800efc8:	2baa      	cmp	r3, #170	@ 0xaa
 800efca:	d17b      	bne.n	800f0c4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800efcc:	2100      	movs	r1, #0
 800efce:	2077      	movs	r0, #119	@ 0x77
 800efd0:	f7ff ff5f 	bl	800ee92 <SD_SendCmd>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d807      	bhi.n	800efea <SD_disk_initialize+0xae>
 800efda:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800efde:	2069      	movs	r0, #105	@ 0x69
 800efe0:	f7ff ff57 	bl	800ee92 <SD_SendCmd>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d004      	beq.n	800eff4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800efea:	4b45      	ldr	r3, [pc, #276]	@ (800f100 <SD_disk_initialize+0x1c4>)
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1ec      	bne.n	800efcc <SD_disk_initialize+0x90>
 800eff2:	e000      	b.n	800eff6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800eff4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800eff6:	4b42      	ldr	r3, [pc, #264]	@ (800f100 <SD_disk_initialize+0x1c4>)
 800eff8:	881b      	ldrh	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d062      	beq.n	800f0c4 <SD_disk_initialize+0x188>
 800effe:	2100      	movs	r1, #0
 800f000:	207a      	movs	r0, #122	@ 0x7a
 800f002:	f7ff ff46 	bl	800ee92 <SD_SendCmd>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d15b      	bne.n	800f0c4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800f00c:	2300      	movs	r3, #0
 800f00e:	73fb      	strb	r3, [r7, #15]
 800f010:	e00c      	b.n	800f02c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800f012:	7bfc      	ldrb	r4, [r7, #15]
 800f014:	f7ff fe2e 	bl	800ec74 <SPI_RxByte>
 800f018:	4603      	mov	r3, r0
 800f01a:	461a      	mov	r2, r3
 800f01c:	f104 0310 	add.w	r3, r4, #16
 800f020:	443b      	add	r3, r7
 800f022:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800f026:	7bfb      	ldrb	r3, [r7, #15]
 800f028:	3301      	adds	r3, #1
 800f02a:	73fb      	strb	r3, [r7, #15]
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
 800f02e:	2b03      	cmp	r3, #3
 800f030:	d9ef      	bls.n	800f012 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800f032:	7a3b      	ldrb	r3, [r7, #8]
 800f034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d001      	beq.n	800f040 <SD_disk_initialize+0x104>
 800f03c:	230c      	movs	r3, #12
 800f03e:	e000      	b.n	800f042 <SD_disk_initialize+0x106>
 800f040:	2304      	movs	r3, #4
 800f042:	73bb      	strb	r3, [r7, #14]
 800f044:	e03e      	b.n	800f0c4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800f046:	2100      	movs	r1, #0
 800f048:	2077      	movs	r0, #119	@ 0x77
 800f04a:	f7ff ff22 	bl	800ee92 <SD_SendCmd>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b01      	cmp	r3, #1
 800f052:	d808      	bhi.n	800f066 <SD_disk_initialize+0x12a>
 800f054:	2100      	movs	r1, #0
 800f056:	2069      	movs	r0, #105	@ 0x69
 800f058:	f7ff ff1b 	bl	800ee92 <SD_SendCmd>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d801      	bhi.n	800f066 <SD_disk_initialize+0x12a>
 800f062:	2302      	movs	r3, #2
 800f064:	e000      	b.n	800f068 <SD_disk_initialize+0x12c>
 800f066:	2301      	movs	r3, #1
 800f068:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800f06a:	7bbb      	ldrb	r3, [r7, #14]
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d10e      	bne.n	800f08e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800f070:	2100      	movs	r1, #0
 800f072:	2077      	movs	r0, #119	@ 0x77
 800f074:	f7ff ff0d 	bl	800ee92 <SD_SendCmd>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d80e      	bhi.n	800f09c <SD_disk_initialize+0x160>
 800f07e:	2100      	movs	r1, #0
 800f080:	2069      	movs	r0, #105	@ 0x69
 800f082:	f7ff ff06 	bl	800ee92 <SD_SendCmd>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d107      	bne.n	800f09c <SD_disk_initialize+0x160>
 800f08c:	e00c      	b.n	800f0a8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800f08e:	2100      	movs	r1, #0
 800f090:	2041      	movs	r0, #65	@ 0x41
 800f092:	f7ff fefe 	bl	800ee92 <SD_SendCmd>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d004      	beq.n	800f0a6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800f09c:	4b18      	ldr	r3, [pc, #96]	@ (800f100 <SD_disk_initialize+0x1c4>)
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1e2      	bne.n	800f06a <SD_disk_initialize+0x12e>
 800f0a4:	e000      	b.n	800f0a8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800f0a6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800f0a8:	4b15      	ldr	r3, [pc, #84]	@ (800f100 <SD_disk_initialize+0x1c4>)
 800f0aa:	881b      	ldrh	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d007      	beq.n	800f0c0 <SD_disk_initialize+0x184>
 800f0b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f0b4:	2050      	movs	r0, #80	@ 0x50
 800f0b6:	f7ff feec 	bl	800ee92 <SD_SendCmd>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <SD_disk_initialize+0x188>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800f0c4:	4a0f      	ldr	r2, [pc, #60]	@ (800f104 <SD_disk_initialize+0x1c8>)
 800f0c6:	7bbb      	ldrb	r3, [r7, #14]
 800f0c8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800f0ca:	f7ff fd93 	bl	800ebf4 <DESELECT>
  SPI_RxByte();
 800f0ce:	f7ff fdd1 	bl	800ec74 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800f0d2:	7bbb      	ldrb	r3, [r7, #14]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d008      	beq.n	800f0ea <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800f0d8:	4b08      	ldr	r3, [pc, #32]	@ (800f0fc <SD_disk_initialize+0x1c0>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	f023 0301 	bic.w	r3, r3, #1
 800f0e2:	b2da      	uxtb	r2, r3
 800f0e4:	4b05      	ldr	r3, [pc, #20]	@ (800f0fc <SD_disk_initialize+0x1c0>)
 800f0e6:	701a      	strb	r2, [r3, #0]
 800f0e8:	e001      	b.n	800f0ee <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800f0ea:	f7ff fe49 	bl	800ed80 <SD_PowerOff>
  }
  return Stat;
 800f0ee:	4b03      	ldr	r3, [pc, #12]	@ (800f0fc <SD_disk_initialize+0x1c0>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	b2db      	uxtb	r3, r3
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd90      	pop	{r4, r7, pc}
 800f0fc:	240000bc 	.word	0x240000bc
 800f100:	24002a80 	.word	0x24002a80
 800f104:	24002a84 	.word	0x24002a84

0800f108 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	4603      	mov	r3, r0
 800f110:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d001      	beq.n	800f11c <SD_disk_status+0x14>
 800f118:	2301      	movs	r3, #1
 800f11a:	e002      	b.n	800f122 <SD_disk_status+0x1a>
  return Stat;
 800f11c:	4b04      	ldr	r3, [pc, #16]	@ (800f130 <SD_disk_status+0x28>)
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	b2db      	uxtb	r3, r3
}
 800f122:	4618      	mov	r0, r3
 800f124:	370c      	adds	r7, #12
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop
 800f130:	240000bc 	.word	0x240000bc

0800f134 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60b9      	str	r1, [r7, #8]
 800f13c:	607a      	str	r2, [r7, #4]
 800f13e:	603b      	str	r3, [r7, #0]
 800f140:	4603      	mov	r3, r0
 800f142:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800f144:	7bfb      	ldrb	r3, [r7, #15]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d102      	bne.n	800f150 <SD_disk_read+0x1c>
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d101      	bne.n	800f154 <SD_disk_read+0x20>
 800f150:	2304      	movs	r3, #4
 800f152:	e051      	b.n	800f1f8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f154:	4b2a      	ldr	r3, [pc, #168]	@ (800f200 <SD_disk_read+0xcc>)
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	f003 0301 	and.w	r3, r3, #1
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d001      	beq.n	800f166 <SD_disk_read+0x32>
 800f162:	2303      	movs	r3, #3
 800f164:	e048      	b.n	800f1f8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800f166:	4b27      	ldr	r3, [pc, #156]	@ (800f204 <SD_disk_read+0xd0>)
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	f003 0304 	and.w	r3, r3, #4
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d102      	bne.n	800f178 <SD_disk_read+0x44>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	025b      	lsls	r3, r3, #9
 800f176:	607b      	str	r3, [r7, #4]

  SELECT();
 800f178:	f7ff fd30 	bl	800ebdc <SELECT>

  if (count == 1)
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d111      	bne.n	800f1a6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800f182:	6879      	ldr	r1, [r7, #4]
 800f184:	2051      	movs	r0, #81	@ 0x51
 800f186:	f7ff fe84 	bl	800ee92 <SD_SendCmd>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d129      	bne.n	800f1e4 <SD_disk_read+0xb0>
 800f190:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f194:	68b8      	ldr	r0, [r7, #8]
 800f196:	f7ff fe0b 	bl	800edb0 <SD_RxDataBlock>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d021      	beq.n	800f1e4 <SD_disk_read+0xb0>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	e01e      	b.n	800f1e4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800f1a6:	6879      	ldr	r1, [r7, #4]
 800f1a8:	2052      	movs	r0, #82	@ 0x52
 800f1aa:	f7ff fe72 	bl	800ee92 <SD_SendCmd>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d117      	bne.n	800f1e4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800f1b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f1b8:	68b8      	ldr	r0, [r7, #8]
 800f1ba:	f7ff fdf9 	bl	800edb0 <SD_RxDataBlock>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00a      	beq.n	800f1da <SD_disk_read+0xa6>
        buff += 512;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f1ca:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	603b      	str	r3, [r7, #0]
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1ed      	bne.n	800f1b4 <SD_disk_read+0x80>
 800f1d8:	e000      	b.n	800f1dc <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800f1da:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800f1dc:	2100      	movs	r1, #0
 800f1de:	204c      	movs	r0, #76	@ 0x4c
 800f1e0:	f7ff fe57 	bl	800ee92 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800f1e4:	f7ff fd06 	bl	800ebf4 <DESELECT>
  SPI_RxByte();
 800f1e8:	f7ff fd44 	bl	800ec74 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	bf14      	ite	ne
 800f1f2:	2301      	movne	r3, #1
 800f1f4:	2300      	moveq	r3, #0
 800f1f6:	b2db      	uxtb	r3, r3
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3710      	adds	r7, #16
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	240000bc 	.word	0x240000bc
 800f204:	24002a84 	.word	0x24002a84

0800f208 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60b9      	str	r1, [r7, #8]
 800f210:	607a      	str	r2, [r7, #4]
 800f212:	603b      	str	r3, [r7, #0]
 800f214:	4603      	mov	r3, r0
 800f216:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800f218:	7bfb      	ldrb	r3, [r7, #15]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d102      	bne.n	800f224 <SD_disk_write+0x1c>
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d101      	bne.n	800f228 <SD_disk_write+0x20>
 800f224:	2304      	movs	r3, #4
 800f226:	e06b      	b.n	800f300 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f228:	4b37      	ldr	r3, [pc, #220]	@ (800f308 <SD_disk_write+0x100>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	f003 0301 	and.w	r3, r3, #1
 800f232:	2b00      	cmp	r3, #0
 800f234:	d001      	beq.n	800f23a <SD_disk_write+0x32>
 800f236:	2303      	movs	r3, #3
 800f238:	e062      	b.n	800f300 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800f23a:	4b33      	ldr	r3, [pc, #204]	@ (800f308 <SD_disk_write+0x100>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	f003 0304 	and.w	r3, r3, #4
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <SD_disk_write+0x44>
 800f248:	2302      	movs	r3, #2
 800f24a:	e059      	b.n	800f300 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800f24c:	4b2f      	ldr	r3, [pc, #188]	@ (800f30c <SD_disk_write+0x104>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	f003 0304 	and.w	r3, r3, #4
 800f254:	2b00      	cmp	r3, #0
 800f256:	d102      	bne.n	800f25e <SD_disk_write+0x56>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	025b      	lsls	r3, r3, #9
 800f25c:	607b      	str	r3, [r7, #4]

  SELECT();
 800f25e:	f7ff fcbd 	bl	800ebdc <SELECT>

  if (count == 1)
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d110      	bne.n	800f28a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800f268:	6879      	ldr	r1, [r7, #4]
 800f26a:	2058      	movs	r0, #88	@ 0x58
 800f26c:	f7ff fe11 	bl	800ee92 <SD_SendCmd>
 800f270:	4603      	mov	r3, r0
 800f272:	2b00      	cmp	r3, #0
 800f274:	d13a      	bne.n	800f2ec <SD_disk_write+0xe4>
 800f276:	21fe      	movs	r1, #254	@ 0xfe
 800f278:	68b8      	ldr	r0, [r7, #8]
 800f27a:	f7ff fdc7 	bl	800ee0c <SD_TxDataBlock>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d033      	beq.n	800f2ec <SD_disk_write+0xe4>
      count = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	603b      	str	r3, [r7, #0]
 800f288:	e030      	b.n	800f2ec <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800f28a:	4b20      	ldr	r3, [pc, #128]	@ (800f30c <SD_disk_write+0x104>)
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	f003 0302 	and.w	r3, r3, #2
 800f292:	2b00      	cmp	r3, #0
 800f294:	d007      	beq.n	800f2a6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800f296:	2100      	movs	r1, #0
 800f298:	2077      	movs	r0, #119	@ 0x77
 800f29a:	f7ff fdfa 	bl	800ee92 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800f29e:	6839      	ldr	r1, [r7, #0]
 800f2a0:	2057      	movs	r0, #87	@ 0x57
 800f2a2:	f7ff fdf6 	bl	800ee92 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800f2a6:	6879      	ldr	r1, [r7, #4]
 800f2a8:	2059      	movs	r0, #89	@ 0x59
 800f2aa:	f7ff fdf2 	bl	800ee92 <SD_SendCmd>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d11b      	bne.n	800f2ec <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800f2b4:	21fc      	movs	r1, #252	@ 0xfc
 800f2b6:	68b8      	ldr	r0, [r7, #8]
 800f2b8:	f7ff fda8 	bl	800ee0c <SD_TxDataBlock>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <SD_disk_write+0xd0>
        buff += 512;
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f2c8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	3b01      	subs	r3, #1
 800f2ce:	603b      	str	r3, [r7, #0]
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d1ee      	bne.n	800f2b4 <SD_disk_write+0xac>
 800f2d6:	e000      	b.n	800f2da <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800f2d8:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800f2da:	21fd      	movs	r1, #253	@ 0xfd
 800f2dc:	2000      	movs	r0, #0
 800f2de:	f7ff fd95 	bl	800ee0c <SD_TxDataBlock>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d101      	bne.n	800f2ec <SD_disk_write+0xe4>
      {
        count = 1;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800f2ec:	f7ff fc82 	bl	800ebf4 <DESELECT>
  SPI_RxByte();
 800f2f0:	f7ff fcc0 	bl	800ec74 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	bf14      	ite	ne
 800f2fa:	2301      	movne	r3, #1
 800f2fc:	2300      	moveq	r3, #0
 800f2fe:	b2db      	uxtb	r3, r3
}
 800f300:	4618      	mov	r0, r3
 800f302:	3710      	adds	r7, #16
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	240000bc 	.word	0x240000bc
 800f30c:	24002a84 	.word	0x24002a84

0800f310 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800f310:	b590      	push	{r4, r7, lr}
 800f312:	b08b      	sub	sp, #44	@ 0x2c
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	603a      	str	r2, [r7, #0]
 800f31a:	71fb      	strb	r3, [r7, #7]
 800f31c:	460b      	mov	r3, r1
 800f31e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800f324:	79fb      	ldrb	r3, [r7, #7]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d001      	beq.n	800f32e <SD_disk_ioctl+0x1e>
 800f32a:	2304      	movs	r3, #4
 800f32c:	e113      	b.n	800f556 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800f32e:	2301      	movs	r3, #1
 800f330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800f334:	79bb      	ldrb	r3, [r7, #6]
 800f336:	2b05      	cmp	r3, #5
 800f338:	d124      	bne.n	800f384 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d012      	beq.n	800f368 <SD_disk_ioctl+0x58>
 800f342:	2b02      	cmp	r3, #2
 800f344:	dc1a      	bgt.n	800f37c <SD_disk_ioctl+0x6c>
 800f346:	2b00      	cmp	r3, #0
 800f348:	d002      	beq.n	800f350 <SD_disk_ioctl+0x40>
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d006      	beq.n	800f35c <SD_disk_ioctl+0x4c>
 800f34e:	e015      	b.n	800f37c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800f350:	f7ff fd16 	bl	800ed80 <SD_PowerOff>
      res = RES_OK;
 800f354:	2300      	movs	r3, #0
 800f356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f35a:	e0fa      	b.n	800f552 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800f35c:	f7ff fcce 	bl	800ecfc <SD_PowerOn>
      res = RES_OK;
 800f360:	2300      	movs	r3, #0
 800f362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f366:	e0f4      	b.n	800f552 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800f368:	6a3b      	ldr	r3, [r7, #32]
 800f36a:	1c5c      	adds	r4, r3, #1
 800f36c:	f7ff fd14 	bl	800ed98 <SD_CheckPower>
 800f370:	4603      	mov	r3, r0
 800f372:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800f374:	2300      	movs	r3, #0
 800f376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f37a:	e0ea      	b.n	800f552 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800f37c:	2304      	movs	r3, #4
 800f37e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f382:	e0e6      	b.n	800f552 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800f384:	4b76      	ldr	r3, [pc, #472]	@ (800f560 <SD_disk_ioctl+0x250>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	f003 0301 	and.w	r3, r3, #1
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d001      	beq.n	800f396 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800f392:	2303      	movs	r3, #3
 800f394:	e0df      	b.n	800f556 <SD_disk_ioctl+0x246>
    }
    SELECT();
 800f396:	f7ff fc21 	bl	800ebdc <SELECT>
    switch (ctrl)
 800f39a:	79bb      	ldrb	r3, [r7, #6]
 800f39c:	2b0d      	cmp	r3, #13
 800f39e:	f200 80c9 	bhi.w	800f534 <SD_disk_ioctl+0x224>
 800f3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f3a8 <SD_disk_ioctl+0x98>)
 800f3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a8:	0800f49f 	.word	0x0800f49f
 800f3ac:	0800f3e1 	.word	0x0800f3e1
 800f3b0:	0800f48f 	.word	0x0800f48f
 800f3b4:	0800f535 	.word	0x0800f535
 800f3b8:	0800f535 	.word	0x0800f535
 800f3bc:	0800f535 	.word	0x0800f535
 800f3c0:	0800f535 	.word	0x0800f535
 800f3c4:	0800f535 	.word	0x0800f535
 800f3c8:	0800f535 	.word	0x0800f535
 800f3cc:	0800f535 	.word	0x0800f535
 800f3d0:	0800f535 	.word	0x0800f535
 800f3d4:	0800f4b1 	.word	0x0800f4b1
 800f3d8:	0800f4d5 	.word	0x0800f4d5
 800f3dc:	0800f4f9 	.word	0x0800f4f9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	2049      	movs	r0, #73	@ 0x49
 800f3e4:	f7ff fd55 	bl	800ee92 <SD_SendCmd>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f040 80a6 	bne.w	800f53c <SD_disk_ioctl+0x22c>
 800f3f0:	f107 030c 	add.w	r3, r7, #12
 800f3f4:	2110      	movs	r1, #16
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7ff fcda 	bl	800edb0 <SD_RxDataBlock>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f000 809c 	beq.w	800f53c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800f404:	7b3b      	ldrb	r3, [r7, #12]
 800f406:	099b      	lsrs	r3, r3, #6
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	d10d      	bne.n	800f42a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800f40e:	7d7b      	ldrb	r3, [r7, #21]
 800f410:	461a      	mov	r2, r3
 800f412:	7d3b      	ldrb	r3, [r7, #20]
 800f414:	021b      	lsls	r3, r3, #8
 800f416:	b29b      	uxth	r3, r3
 800f418:	4413      	add	r3, r2
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	3301      	adds	r3, #1
 800f41e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800f420:	8bfb      	ldrh	r3, [r7, #30]
 800f422:	029a      	lsls	r2, r3, #10
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	601a      	str	r2, [r3, #0]
 800f428:	e02d      	b.n	800f486 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800f42a:	7c7b      	ldrb	r3, [r7, #17]
 800f42c:	f003 030f 	and.w	r3, r3, #15
 800f430:	b2da      	uxtb	r2, r3
 800f432:	7dbb      	ldrb	r3, [r7, #22]
 800f434:	09db      	lsrs	r3, r3, #7
 800f436:	b2db      	uxtb	r3, r3
 800f438:	4413      	add	r3, r2
 800f43a:	b2da      	uxtb	r2, r3
 800f43c:	7d7b      	ldrb	r3, [r7, #21]
 800f43e:	005b      	lsls	r3, r3, #1
 800f440:	b2db      	uxtb	r3, r3
 800f442:	f003 0306 	and.w	r3, r3, #6
 800f446:	b2db      	uxtb	r3, r3
 800f448:	4413      	add	r3, r2
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	3302      	adds	r3, #2
 800f44e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800f452:	7d3b      	ldrb	r3, [r7, #20]
 800f454:	099b      	lsrs	r3, r3, #6
 800f456:	b2db      	uxtb	r3, r3
 800f458:	461a      	mov	r2, r3
 800f45a:	7cfb      	ldrb	r3, [r7, #19]
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	b29b      	uxth	r3, r3
 800f460:	4413      	add	r3, r2
 800f462:	b29a      	uxth	r2, r3
 800f464:	7cbb      	ldrb	r3, [r7, #18]
 800f466:	029b      	lsls	r3, r3, #10
 800f468:	b29b      	uxth	r3, r3
 800f46a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f46e:	b29b      	uxth	r3, r3
 800f470:	4413      	add	r3, r2
 800f472:	b29b      	uxth	r3, r3
 800f474:	3301      	adds	r3, #1
 800f476:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800f478:	8bfa      	ldrh	r2, [r7, #30]
 800f47a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f47e:	3b09      	subs	r3, #9
 800f480:	409a      	lsls	r2, r3
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800f486:	2300      	movs	r3, #0
 800f488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800f48c:	e056      	b.n	800f53c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f494:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800f496:	2300      	movs	r3, #0
 800f498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f49c:	e055      	b.n	800f54a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800f49e:	f7ff fc13 	bl	800ecc8 <SD_ReadyWait>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2bff      	cmp	r3, #255	@ 0xff
 800f4a6:	d14b      	bne.n	800f540 <SD_disk_ioctl+0x230>
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f4ae:	e047      	b.n	800f540 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	2049      	movs	r0, #73	@ 0x49
 800f4b4:	f7ff fced 	bl	800ee92 <SD_SendCmd>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d142      	bne.n	800f544 <SD_disk_ioctl+0x234>
 800f4be:	2110      	movs	r1, #16
 800f4c0:	6a38      	ldr	r0, [r7, #32]
 800f4c2:	f7ff fc75 	bl	800edb0 <SD_RxDataBlock>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d03b      	beq.n	800f544 <SD_disk_ioctl+0x234>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f4d2:	e037      	b.n	800f544 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f4d4:	2100      	movs	r1, #0
 800f4d6:	204a      	movs	r0, #74	@ 0x4a
 800f4d8:	f7ff fcdb 	bl	800ee92 <SD_SendCmd>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d132      	bne.n	800f548 <SD_disk_ioctl+0x238>
 800f4e2:	2110      	movs	r1, #16
 800f4e4:	6a38      	ldr	r0, [r7, #32]
 800f4e6:	f7ff fc63 	bl	800edb0 <SD_RxDataBlock>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d02b      	beq.n	800f548 <SD_disk_ioctl+0x238>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f4f6:	e027      	b.n	800f548 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	207a      	movs	r0, #122	@ 0x7a
 800f4fc:	f7ff fcc9 	bl	800ee92 <SD_SendCmd>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d116      	bne.n	800f534 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800f506:	2300      	movs	r3, #0
 800f508:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f50c:	e00b      	b.n	800f526 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800f50e:	6a3c      	ldr	r4, [r7, #32]
 800f510:	1c63      	adds	r3, r4, #1
 800f512:	623b      	str	r3, [r7, #32]
 800f514:	f7ff fbae 	bl	800ec74 <SPI_RxByte>
 800f518:	4603      	mov	r3, r0
 800f51a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800f51c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f520:	3301      	adds	r3, #1
 800f522:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f526:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f52a:	2b03      	cmp	r3, #3
 800f52c:	d9ef      	bls.n	800f50e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800f52e:	2300      	movs	r3, #0
 800f530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800f534:	2304      	movs	r3, #4
 800f536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f53a:	e006      	b.n	800f54a <SD_disk_ioctl+0x23a>
      break;
 800f53c:	bf00      	nop
 800f53e:	e004      	b.n	800f54a <SD_disk_ioctl+0x23a>
      break;
 800f540:	bf00      	nop
 800f542:	e002      	b.n	800f54a <SD_disk_ioctl+0x23a>
      break;
 800f544:	bf00      	nop
 800f546:	e000      	b.n	800f54a <SD_disk_ioctl+0x23a>
      break;
 800f548:	bf00      	nop
    }
    DESELECT();
 800f54a:	f7ff fb53 	bl	800ebf4 <DESELECT>
    SPI_RxByte();
 800f54e:	f7ff fb91 	bl	800ec74 <SPI_RxByte>
  }
  return res;
 800f552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f556:	4618      	mov	r0, r3
 800f558:	372c      	adds	r7, #44	@ 0x2c
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd90      	pop	{r4, r7, pc}
 800f55e:	bf00      	nop
 800f560:	240000bc 	.word	0x240000bc

0800f564 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	4603      	mov	r3, r0
 800f56c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f56e:	79fb      	ldrb	r3, [r7, #7]
 800f570:	4a08      	ldr	r2, [pc, #32]	@ (800f594 <disk_status+0x30>)
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	4413      	add	r3, r2
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	79fa      	ldrb	r2, [r7, #7]
 800f57c:	4905      	ldr	r1, [pc, #20]	@ (800f594 <disk_status+0x30>)
 800f57e:	440a      	add	r2, r1
 800f580:	7a12      	ldrb	r2, [r2, #8]
 800f582:	4610      	mov	r0, r2
 800f584:	4798      	blx	r3
 800f586:	4603      	mov	r3, r0
 800f588:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	24002cb0 	.word	0x24002cb0

0800f598 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	4603      	mov	r3, r0
 800f5a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f5a6:	79fb      	ldrb	r3, [r7, #7]
 800f5a8:	4a0e      	ldr	r2, [pc, #56]	@ (800f5e4 <disk_initialize+0x4c>)
 800f5aa:	5cd3      	ldrb	r3, [r2, r3]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d114      	bne.n	800f5da <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f5b0:	79fb      	ldrb	r3, [r7, #7]
 800f5b2:	4a0c      	ldr	r2, [pc, #48]	@ (800f5e4 <disk_initialize+0x4c>)
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	4413      	add	r3, r2
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	79fa      	ldrb	r2, [r7, #7]
 800f5be:	4909      	ldr	r1, [pc, #36]	@ (800f5e4 <disk_initialize+0x4c>)
 800f5c0:	440a      	add	r2, r1
 800f5c2:	7a12      	ldrb	r2, [r2, #8]
 800f5c4:	4610      	mov	r0, r2
 800f5c6:	4798      	blx	r3
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d103      	bne.n	800f5da <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f5d2:	79fb      	ldrb	r3, [r7, #7]
 800f5d4:	4a03      	ldr	r2, [pc, #12]	@ (800f5e4 <disk_initialize+0x4c>)
 800f5d6:	2101      	movs	r1, #1
 800f5d8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3710      	adds	r7, #16
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	24002cb0 	.word	0x24002cb0

0800f5e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f5e8:	b590      	push	{r4, r7, lr}
 800f5ea:	b087      	sub	sp, #28
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60b9      	str	r1, [r7, #8]
 800f5f0:	607a      	str	r2, [r7, #4]
 800f5f2:	603b      	str	r3, [r7, #0]
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f5f8:	7bfb      	ldrb	r3, [r7, #15]
 800f5fa:	4a0a      	ldr	r2, [pc, #40]	@ (800f624 <disk_read+0x3c>)
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	4413      	add	r3, r2
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	689c      	ldr	r4, [r3, #8]
 800f604:	7bfb      	ldrb	r3, [r7, #15]
 800f606:	4a07      	ldr	r2, [pc, #28]	@ (800f624 <disk_read+0x3c>)
 800f608:	4413      	add	r3, r2
 800f60a:	7a18      	ldrb	r0, [r3, #8]
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	68b9      	ldr	r1, [r7, #8]
 800f612:	47a0      	blx	r4
 800f614:	4603      	mov	r3, r0
 800f616:	75fb      	strb	r3, [r7, #23]
  return res;
 800f618:	7dfb      	ldrb	r3, [r7, #23]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	371c      	adds	r7, #28
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd90      	pop	{r4, r7, pc}
 800f622:	bf00      	nop
 800f624:	24002cb0 	.word	0x24002cb0

0800f628 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f628:	b590      	push	{r4, r7, lr}
 800f62a:	b087      	sub	sp, #28
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60b9      	str	r1, [r7, #8]
 800f630:	607a      	str	r2, [r7, #4]
 800f632:	603b      	str	r3, [r7, #0]
 800f634:	4603      	mov	r3, r0
 800f636:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f638:	7bfb      	ldrb	r3, [r7, #15]
 800f63a:	4a0a      	ldr	r2, [pc, #40]	@ (800f664 <disk_write+0x3c>)
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	68dc      	ldr	r4, [r3, #12]
 800f644:	7bfb      	ldrb	r3, [r7, #15]
 800f646:	4a07      	ldr	r2, [pc, #28]	@ (800f664 <disk_write+0x3c>)
 800f648:	4413      	add	r3, r2
 800f64a:	7a18      	ldrb	r0, [r3, #8]
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	68b9      	ldr	r1, [r7, #8]
 800f652:	47a0      	blx	r4
 800f654:	4603      	mov	r3, r0
 800f656:	75fb      	strb	r3, [r7, #23]
  return res;
 800f658:	7dfb      	ldrb	r3, [r7, #23]
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	371c      	adds	r7, #28
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd90      	pop	{r4, r7, pc}
 800f662:	bf00      	nop
 800f664:	24002cb0 	.word	0x24002cb0

0800f668 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	4603      	mov	r3, r0
 800f670:	603a      	str	r2, [r7, #0]
 800f672:	71fb      	strb	r3, [r7, #7]
 800f674:	460b      	mov	r3, r1
 800f676:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f678:	79fb      	ldrb	r3, [r7, #7]
 800f67a:	4a09      	ldr	r2, [pc, #36]	@ (800f6a0 <disk_ioctl+0x38>)
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	4413      	add	r3, r2
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	691b      	ldr	r3, [r3, #16]
 800f684:	79fa      	ldrb	r2, [r7, #7]
 800f686:	4906      	ldr	r1, [pc, #24]	@ (800f6a0 <disk_ioctl+0x38>)
 800f688:	440a      	add	r2, r1
 800f68a:	7a10      	ldrb	r0, [r2, #8]
 800f68c:	79b9      	ldrb	r1, [r7, #6]
 800f68e:	683a      	ldr	r2, [r7, #0]
 800f690:	4798      	blx	r3
 800f692:	4603      	mov	r3, r0
 800f694:	73fb      	strb	r3, [r7, #15]
  return res;
 800f696:	7bfb      	ldrb	r3, [r7, #15]
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3710      	adds	r7, #16
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	24002cb0 	.word	0x24002cb0

0800f6a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f6b4:	89fb      	ldrh	r3, [r7, #14]
 800f6b6:	021b      	lsls	r3, r3, #8
 800f6b8:	b21a      	sxth	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	b21b      	sxth	r3, r3
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	b21b      	sxth	r3, r3
 800f6c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f6c6:	89fb      	ldrh	r3, [r7, #14]
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3714      	adds	r7, #20
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3303      	adds	r3, #3
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	021b      	lsls	r3, r3, #8
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	3202      	adds	r2, #2
 800f6ec:	7812      	ldrb	r2, [r2, #0]
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	021b      	lsls	r3, r3, #8
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	3201      	adds	r2, #1
 800f6fa:	7812      	ldrb	r2, [r2, #0]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	021b      	lsls	r3, r3, #8
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	7812      	ldrb	r2, [r2, #0]
 800f708:	4313      	orrs	r3, r2
 800f70a:	60fb      	str	r3, [r7, #12]
	return rv;
 800f70c:	68fb      	ldr	r3, [r7, #12]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3714      	adds	r7, #20
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr

0800f71a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f71a:	b480      	push	{r7}
 800f71c:	b083      	sub	sp, #12
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
 800f722:	460b      	mov	r3, r1
 800f724:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	1c5a      	adds	r2, r3, #1
 800f72a:	607a      	str	r2, [r7, #4]
 800f72c:	887a      	ldrh	r2, [r7, #2]
 800f72e:	b2d2      	uxtb	r2, r2
 800f730:	701a      	strb	r2, [r3, #0]
 800f732:	887b      	ldrh	r3, [r7, #2]
 800f734:	0a1b      	lsrs	r3, r3, #8
 800f736:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	1c5a      	adds	r2, r3, #1
 800f73c:	607a      	str	r2, [r7, #4]
 800f73e:	887a      	ldrh	r2, [r7, #2]
 800f740:	b2d2      	uxtb	r2, r2
 800f742:	701a      	strb	r2, [r3, #0]
}
 800f744:	bf00      	nop
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	1c5a      	adds	r2, r3, #1
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	683a      	ldr	r2, [r7, #0]
 800f762:	b2d2      	uxtb	r2, r2
 800f764:	701a      	strb	r2, [r3, #0]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	0a1b      	lsrs	r3, r3, #8
 800f76a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	1c5a      	adds	r2, r3, #1
 800f770:	607a      	str	r2, [r7, #4]
 800f772:	683a      	ldr	r2, [r7, #0]
 800f774:	b2d2      	uxtb	r2, r2
 800f776:	701a      	strb	r2, [r3, #0]
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	0a1b      	lsrs	r3, r3, #8
 800f77c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	1c5a      	adds	r2, r3, #1
 800f782:	607a      	str	r2, [r7, #4]
 800f784:	683a      	ldr	r2, [r7, #0]
 800f786:	b2d2      	uxtb	r2, r2
 800f788:	701a      	strb	r2, [r3, #0]
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	0a1b      	lsrs	r3, r3, #8
 800f78e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	1c5a      	adds	r2, r3, #1
 800f794:	607a      	str	r2, [r7, #4]
 800f796:	683a      	ldr	r2, [r7, #0]
 800f798:	b2d2      	uxtb	r2, r2
 800f79a:	701a      	strb	r2, [r3, #0]
}
 800f79c:	bf00      	nop
 800f79e:	370c      	adds	r7, #12
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr

0800f7a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f7a8:	b480      	push	{r7}
 800f7aa:	b087      	sub	sp, #28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00d      	beq.n	800f7de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f7c2:	693a      	ldr	r2, [r7, #16]
 800f7c4:	1c53      	adds	r3, r2, #1
 800f7c6:	613b      	str	r3, [r7, #16]
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	1c59      	adds	r1, r3, #1
 800f7cc:	6179      	str	r1, [r7, #20]
 800f7ce:	7812      	ldrb	r2, [r2, #0]
 800f7d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	607b      	str	r3, [r7, #4]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d1f1      	bne.n	800f7c2 <mem_cpy+0x1a>
	}
}
 800f7de:	bf00      	nop
 800f7e0:	371c      	adds	r7, #28
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f7ea:	b480      	push	{r7}
 800f7ec:	b087      	sub	sp, #28
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	60f8      	str	r0, [r7, #12]
 800f7f2:	60b9      	str	r1, [r7, #8]
 800f7f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	1c5a      	adds	r2, r3, #1
 800f7fe:	617a      	str	r2, [r7, #20]
 800f800:	68ba      	ldr	r2, [r7, #8]
 800f802:	b2d2      	uxtb	r2, r2
 800f804:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	3b01      	subs	r3, #1
 800f80a:	607b      	str	r3, [r7, #4]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1f3      	bne.n	800f7fa <mem_set+0x10>
}
 800f812:	bf00      	nop
 800f814:	bf00      	nop
 800f816:	371c      	adds	r7, #28
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f820:	b480      	push	{r7}
 800f822:	b089      	sub	sp, #36	@ 0x24
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	61fb      	str	r3, [r7, #28]
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f834:	2300      	movs	r3, #0
 800f836:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	1c5a      	adds	r2, r3, #1
 800f83c:	61fa      	str	r2, [r7, #28]
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	4619      	mov	r1, r3
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	1c5a      	adds	r2, r3, #1
 800f846:	61ba      	str	r2, [r7, #24]
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	1acb      	subs	r3, r1, r3
 800f84c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	3b01      	subs	r3, #1
 800f852:	607b      	str	r3, [r7, #4]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d002      	beq.n	800f860 <mem_cmp+0x40>
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d0eb      	beq.n	800f838 <mem_cmp+0x18>

	return r;
 800f860:	697b      	ldr	r3, [r7, #20]
}
 800f862:	4618      	mov	r0, r3
 800f864:	3724      	adds	r7, #36	@ 0x24
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f86e:	b480      	push	{r7}
 800f870:	b083      	sub	sp, #12
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
 800f876:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f878:	e002      	b.n	800f880 <chk_chr+0x12>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	3301      	adds	r3, #1
 800f87e:	607b      	str	r3, [r7, #4]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d005      	beq.n	800f894 <chk_chr+0x26>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	461a      	mov	r2, r3
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	4293      	cmp	r3, r2
 800f892:	d1f2      	bne.n	800f87a <chk_chr+0xc>
	return *str;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	781b      	ldrb	r3, [r3, #0]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	60bb      	str	r3, [r7, #8]
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	60fb      	str	r3, [r7, #12]
 800f8b6:	e029      	b.n	800f90c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f8b8:	4a27      	ldr	r2, [pc, #156]	@ (800f958 <chk_lock+0xb4>)
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	011b      	lsls	r3, r3, #4
 800f8be:	4413      	add	r3, r2
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d01d      	beq.n	800f902 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f8c6:	4a24      	ldr	r2, [pc, #144]	@ (800f958 <chk_lock+0xb4>)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	011b      	lsls	r3, r3, #4
 800f8cc:	4413      	add	r3, r2
 800f8ce:	681a      	ldr	r2, [r3, #0]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d116      	bne.n	800f906 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f8d8:	4a1f      	ldr	r2, [pc, #124]	@ (800f958 <chk_lock+0xb4>)
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	011b      	lsls	r3, r3, #4
 800f8de:	4413      	add	r3, r2
 800f8e0:	3304      	adds	r3, #4
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d10c      	bne.n	800f906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f8ec:	4a1a      	ldr	r2, [pc, #104]	@ (800f958 <chk_lock+0xb4>)
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	011b      	lsls	r3, r3, #4
 800f8f2:	4413      	add	r3, r2
 800f8f4:	3308      	adds	r3, #8
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d102      	bne.n	800f906 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f900:	e007      	b.n	800f912 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f902:	2301      	movs	r3, #1
 800f904:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	3301      	adds	r3, #1
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d9d2      	bls.n	800f8b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2b02      	cmp	r3, #2
 800f916:	d109      	bne.n	800f92c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d102      	bne.n	800f924 <chk_lock+0x80>
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	2b02      	cmp	r3, #2
 800f922:	d101      	bne.n	800f928 <chk_lock+0x84>
 800f924:	2300      	movs	r3, #0
 800f926:	e010      	b.n	800f94a <chk_lock+0xa6>
 800f928:	2312      	movs	r3, #18
 800f92a:	e00e      	b.n	800f94a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d108      	bne.n	800f944 <chk_lock+0xa0>
 800f932:	4a09      	ldr	r2, [pc, #36]	@ (800f958 <chk_lock+0xb4>)
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	011b      	lsls	r3, r3, #4
 800f938:	4413      	add	r3, r2
 800f93a:	330c      	adds	r3, #12
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f942:	d101      	bne.n	800f948 <chk_lock+0xa4>
 800f944:	2310      	movs	r3, #16
 800f946:	e000      	b.n	800f94a <chk_lock+0xa6>
 800f948:	2300      	movs	r3, #0
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3714      	adds	r7, #20
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	24002a90 	.word	0x24002a90

0800f95c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f962:	2300      	movs	r3, #0
 800f964:	607b      	str	r3, [r7, #4]
 800f966:	e002      	b.n	800f96e <enq_lock+0x12>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	3301      	adds	r3, #1
 800f96c:	607b      	str	r3, [r7, #4]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2b01      	cmp	r3, #1
 800f972:	d806      	bhi.n	800f982 <enq_lock+0x26>
 800f974:	4a09      	ldr	r2, [pc, #36]	@ (800f99c <enq_lock+0x40>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	011b      	lsls	r3, r3, #4
 800f97a:	4413      	add	r3, r2
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1f2      	bne.n	800f968 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2b02      	cmp	r3, #2
 800f986:	bf14      	ite	ne
 800f988:	2301      	movne	r3, #1
 800f98a:	2300      	moveq	r3, #0
 800f98c:	b2db      	uxtb	r3, r3
}
 800f98e:	4618      	mov	r0, r3
 800f990:	370c      	adds	r7, #12
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
 800f99a:	bf00      	nop
 800f99c:	24002a90 	.word	0x24002a90

0800f9a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	60fb      	str	r3, [r7, #12]
 800f9ae:	e01f      	b.n	800f9f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f9b0:	4a41      	ldr	r2, [pc, #260]	@ (800fab8 <inc_lock+0x118>)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	011b      	lsls	r3, r3, #4
 800f9b6:	4413      	add	r3, r2
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d113      	bne.n	800f9ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f9c2:	4a3d      	ldr	r2, [pc, #244]	@ (800fab8 <inc_lock+0x118>)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	011b      	lsls	r3, r3, #4
 800f9c8:	4413      	add	r3, r2
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d109      	bne.n	800f9ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f9d6:	4a38      	ldr	r2, [pc, #224]	@ (800fab8 <inc_lock+0x118>)
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	011b      	lsls	r3, r3, #4
 800f9dc:	4413      	add	r3, r2
 800f9de:	3308      	adds	r3, #8
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d006      	beq.n	800f9f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	60fb      	str	r3, [r7, #12]
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d9dc      	bls.n	800f9b0 <inc_lock+0x10>
 800f9f6:	e000      	b.n	800f9fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f9f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d132      	bne.n	800fa66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fa00:	2300      	movs	r3, #0
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	e002      	b.n	800fa0c <inc_lock+0x6c>
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	60fb      	str	r3, [r7, #12]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d806      	bhi.n	800fa20 <inc_lock+0x80>
 800fa12:	4a29      	ldr	r2, [pc, #164]	@ (800fab8 <inc_lock+0x118>)
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	011b      	lsls	r3, r3, #4
 800fa18:	4413      	add	r3, r2
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1f2      	bne.n	800fa06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2b02      	cmp	r3, #2
 800fa24:	d101      	bne.n	800fa2a <inc_lock+0x8a>
 800fa26:	2300      	movs	r3, #0
 800fa28:	e040      	b.n	800faac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681a      	ldr	r2, [r3, #0]
 800fa2e:	4922      	ldr	r1, [pc, #136]	@ (800fab8 <inc_lock+0x118>)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	011b      	lsls	r3, r3, #4
 800fa34:	440b      	add	r3, r1
 800fa36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	689a      	ldr	r2, [r3, #8]
 800fa3c:	491e      	ldr	r1, [pc, #120]	@ (800fab8 <inc_lock+0x118>)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	011b      	lsls	r3, r3, #4
 800fa42:	440b      	add	r3, r1
 800fa44:	3304      	adds	r3, #4
 800fa46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	695a      	ldr	r2, [r3, #20]
 800fa4c:	491a      	ldr	r1, [pc, #104]	@ (800fab8 <inc_lock+0x118>)
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	011b      	lsls	r3, r3, #4
 800fa52:	440b      	add	r3, r1
 800fa54:	3308      	adds	r3, #8
 800fa56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fa58:	4a17      	ldr	r2, [pc, #92]	@ (800fab8 <inc_lock+0x118>)
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	011b      	lsls	r3, r3, #4
 800fa5e:	4413      	add	r3, r2
 800fa60:	330c      	adds	r3, #12
 800fa62:	2200      	movs	r2, #0
 800fa64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d009      	beq.n	800fa80 <inc_lock+0xe0>
 800fa6c:	4a12      	ldr	r2, [pc, #72]	@ (800fab8 <inc_lock+0x118>)
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	011b      	lsls	r3, r3, #4
 800fa72:	4413      	add	r3, r2
 800fa74:	330c      	adds	r3, #12
 800fa76:	881b      	ldrh	r3, [r3, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d001      	beq.n	800fa80 <inc_lock+0xe0>
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	e015      	b.n	800faac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d108      	bne.n	800fa98 <inc_lock+0xf8>
 800fa86:	4a0c      	ldr	r2, [pc, #48]	@ (800fab8 <inc_lock+0x118>)
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	011b      	lsls	r3, r3, #4
 800fa8c:	4413      	add	r3, r2
 800fa8e:	330c      	adds	r3, #12
 800fa90:	881b      	ldrh	r3, [r3, #0]
 800fa92:	3301      	adds	r3, #1
 800fa94:	b29a      	uxth	r2, r3
 800fa96:	e001      	b.n	800fa9c <inc_lock+0xfc>
 800fa98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fa9c:	4906      	ldr	r1, [pc, #24]	@ (800fab8 <inc_lock+0x118>)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	011b      	lsls	r3, r3, #4
 800faa2:	440b      	add	r3, r1
 800faa4:	330c      	adds	r3, #12
 800faa6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	3301      	adds	r3, #1
}
 800faac:	4618      	mov	r0, r3
 800faae:	3714      	adds	r7, #20
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	24002a90 	.word	0x24002a90

0800fabc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b085      	sub	sp, #20
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	3b01      	subs	r3, #1
 800fac8:	607b      	str	r3, [r7, #4]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2b01      	cmp	r3, #1
 800face:	d825      	bhi.n	800fb1c <dec_lock+0x60>
		n = Files[i].ctr;
 800fad0:	4a17      	ldr	r2, [pc, #92]	@ (800fb30 <dec_lock+0x74>)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	011b      	lsls	r3, r3, #4
 800fad6:	4413      	add	r3, r2
 800fad8:	330c      	adds	r3, #12
 800fada:	881b      	ldrh	r3, [r3, #0]
 800fadc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fade:	89fb      	ldrh	r3, [r7, #14]
 800fae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fae4:	d101      	bne.n	800faea <dec_lock+0x2e>
 800fae6:	2300      	movs	r3, #0
 800fae8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800faea:	89fb      	ldrh	r3, [r7, #14]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d002      	beq.n	800faf6 <dec_lock+0x3a>
 800faf0:	89fb      	ldrh	r3, [r7, #14]
 800faf2:	3b01      	subs	r3, #1
 800faf4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800faf6:	4a0e      	ldr	r2, [pc, #56]	@ (800fb30 <dec_lock+0x74>)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	011b      	lsls	r3, r3, #4
 800fafc:	4413      	add	r3, r2
 800fafe:	330c      	adds	r3, #12
 800fb00:	89fa      	ldrh	r2, [r7, #14]
 800fb02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fb04:	89fb      	ldrh	r3, [r7, #14]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d105      	bne.n	800fb16 <dec_lock+0x5a>
 800fb0a:	4a09      	ldr	r2, [pc, #36]	@ (800fb30 <dec_lock+0x74>)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	011b      	lsls	r3, r3, #4
 800fb10:	4413      	add	r3, r2
 800fb12:	2200      	movs	r2, #0
 800fb14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fb16:	2300      	movs	r3, #0
 800fb18:	737b      	strb	r3, [r7, #13]
 800fb1a:	e001      	b.n	800fb20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fb1c:	2302      	movs	r3, #2
 800fb1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fb20:	7b7b      	ldrb	r3, [r7, #13]
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3714      	adds	r7, #20
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	24002a90 	.word	0x24002a90

0800fb34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b085      	sub	sp, #20
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	60fb      	str	r3, [r7, #12]
 800fb40:	e010      	b.n	800fb64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fb42:	4a0d      	ldr	r2, [pc, #52]	@ (800fb78 <clear_lock+0x44>)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	011b      	lsls	r3, r3, #4
 800fb48:	4413      	add	r3, r2
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d105      	bne.n	800fb5e <clear_lock+0x2a>
 800fb52:	4a09      	ldr	r2, [pc, #36]	@ (800fb78 <clear_lock+0x44>)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	011b      	lsls	r3, r3, #4
 800fb58:	4413      	add	r3, r2
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	3301      	adds	r3, #1
 800fb62:	60fb      	str	r3, [r7, #12]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d9eb      	bls.n	800fb42 <clear_lock+0xe>
	}
}
 800fb6a:	bf00      	nop
 800fb6c:	bf00      	nop
 800fb6e:	3714      	adds	r7, #20
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr
 800fb78:	24002a90 	.word	0x24002a90

0800fb7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b086      	sub	sp, #24
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fb84:	2300      	movs	r3, #0
 800fb86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	78db      	ldrb	r3, [r3, #3]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d034      	beq.n	800fbfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	7858      	ldrb	r0, [r3, #1]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fba0:	2301      	movs	r3, #1
 800fba2:	697a      	ldr	r2, [r7, #20]
 800fba4:	f7ff fd40 	bl	800f628 <disk_write>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d002      	beq.n	800fbb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	73fb      	strb	r3, [r7, #15]
 800fbb2:	e022      	b.n	800fbfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	1ad2      	subs	r2, r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d217      	bcs.n	800fbfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	789b      	ldrb	r3, [r3, #2]
 800fbce:	613b      	str	r3, [r7, #16]
 800fbd0:	e010      	b.n	800fbf4 <sync_window+0x78>
					wsect += fs->fsize;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	4413      	add	r3, r2
 800fbda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	7858      	ldrb	r0, [r3, #1]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	f7ff fd1d 	bl	800f628 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	3b01      	subs	r3, #1
 800fbf2:	613b      	str	r3, [r7, #16]
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d8eb      	bhi.n	800fbd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3718      	adds	r7, #24
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d01b      	beq.n	800fc54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff ffad 	bl	800fb7c <sync_window>
 800fc22:	4603      	mov	r3, r0
 800fc24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fc26:	7bfb      	ldrb	r3, [r7, #15]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d113      	bne.n	800fc54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	7858      	ldrb	r0, [r3, #1]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fc36:	2301      	movs	r3, #1
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	f7ff fcd5 	bl	800f5e8 <disk_read>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d004      	beq.n	800fc4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fc44:	f04f 33ff 	mov.w	r3, #4294967295
 800fc48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	683a      	ldr	r2, [r7, #0]
 800fc52:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800fc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
	...

0800fc60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff ff87 	bl	800fb7c <sync_window>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fc72:	7bfb      	ldrb	r3, [r7, #15]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d159      	bne.n	800fd2c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	2b03      	cmp	r3, #3
 800fc7e:	d149      	bne.n	800fd14 <sync_fs+0xb4>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	791b      	ldrb	r3, [r3, #4]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d145      	bne.n	800fd14 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	899b      	ldrh	r3, [r3, #12]
 800fc92:	461a      	mov	r2, r3
 800fc94:	2100      	movs	r1, #0
 800fc96:	f7ff fda8 	bl	800f7ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	333c      	adds	r3, #60	@ 0x3c
 800fc9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fca2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7ff fd37 	bl	800f71a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	333c      	adds	r3, #60	@ 0x3c
 800fcb0:	4921      	ldr	r1, [pc, #132]	@ (800fd38 <sync_fs+0xd8>)
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7ff fd4c 	bl	800f750 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	333c      	adds	r3, #60	@ 0x3c
 800fcbc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fcc0:	491e      	ldr	r1, [pc, #120]	@ (800fd3c <sync_fs+0xdc>)
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7ff fd44 	bl	800f750 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	333c      	adds	r3, #60	@ 0x3c
 800fccc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	f7ff fd3a 	bl	800f750 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	333c      	adds	r3, #60	@ 0x3c
 800fce0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	695b      	ldr	r3, [r3, #20]
 800fce8:	4619      	mov	r1, r3
 800fcea:	4610      	mov	r0, r2
 800fcec:	f7ff fd30 	bl	800f750 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	7858      	ldrb	r0, [r3, #1]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd08:	2301      	movs	r3, #1
 800fd0a:	f7ff fc8d 	bl	800f628 <disk_write>
			fs->fsi_flag = 0;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2200      	movs	r2, #0
 800fd12:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	785b      	ldrb	r3, [r3, #1]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff fca3 	bl	800f668 <disk_ioctl>
 800fd22:	4603      	mov	r3, r0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d001      	beq.n	800fd2c <sync_fs+0xcc>
 800fd28:	2301      	movs	r3, #1
 800fd2a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3710      	adds	r7, #16
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	41615252 	.word	0x41615252
 800fd3c:	61417272 	.word	0x61417272

0800fd40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	3b02      	subs	r3, #2
 800fd4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6a1b      	ldr	r3, [r3, #32]
 800fd54:	3b02      	subs	r3, #2
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d301      	bcc.n	800fd60 <clust2sect+0x20>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	e008      	b.n	800fd72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	895b      	ldrh	r3, [r3, #10]
 800fd64:	461a      	mov	r2, r3
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	fb03 f202 	mul.w	r2, r3, r2
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd70:	4413      	add	r3, r2
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	370c      	adds	r7, #12
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr

0800fd7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b086      	sub	sp, #24
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
 800fd86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d904      	bls.n	800fd9e <get_fat+0x20>
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	6a1b      	ldr	r3, [r3, #32]
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d302      	bcc.n	800fda4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fd9e:	2301      	movs	r3, #1
 800fda0:	617b      	str	r3, [r7, #20]
 800fda2:	e0ba      	b.n	800ff1a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fda4:	f04f 33ff 	mov.w	r3, #4294967295
 800fda8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	2b03      	cmp	r3, #3
 800fdb0:	f000 8082 	beq.w	800feb8 <get_fat+0x13a>
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	f300 80a6 	bgt.w	800ff06 <get_fat+0x188>
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d002      	beq.n	800fdc4 <get_fat+0x46>
 800fdbe:	2b02      	cmp	r3, #2
 800fdc0:	d055      	beq.n	800fe6e <get_fat+0xf0>
 800fdc2:	e0a0      	b.n	800ff06 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	60fb      	str	r3, [r7, #12]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	085b      	lsrs	r3, r3, #1
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	4413      	add	r3, r2
 800fdd0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	899b      	ldrh	r3, [r3, #12]
 800fdda:	4619      	mov	r1, r3
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	fbb3 f3f1 	udiv	r3, r3, r1
 800fde2:	4413      	add	r3, r2
 800fde4:	4619      	mov	r1, r3
 800fde6:	6938      	ldr	r0, [r7, #16]
 800fde8:	f7ff ff0c 	bl	800fc04 <move_window>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f040 808c 	bne.w	800ff0c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	1c5a      	adds	r2, r3, #1
 800fdf8:	60fa      	str	r2, [r7, #12]
 800fdfa:	693a      	ldr	r2, [r7, #16]
 800fdfc:	8992      	ldrh	r2, [r2, #12]
 800fdfe:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe02:	fb01 f202 	mul.w	r2, r1, r2
 800fe06:	1a9b      	subs	r3, r3, r2
 800fe08:	693a      	ldr	r2, [r7, #16]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	899b      	ldrh	r3, [r3, #12]
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe22:	4413      	add	r3, r2
 800fe24:	4619      	mov	r1, r3
 800fe26:	6938      	ldr	r0, [r7, #16]
 800fe28:	f7ff feec 	bl	800fc04 <move_window>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d16e      	bne.n	800ff10 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	899b      	ldrh	r3, [r3, #12]
 800fe36:	461a      	mov	r2, r3
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe3e:	fb01 f202 	mul.w	r2, r1, r2
 800fe42:	1a9b      	subs	r3, r3, r2
 800fe44:	693a      	ldr	r2, [r7, #16]
 800fe46:	4413      	add	r3, r2
 800fe48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe4c:	021b      	lsls	r3, r3, #8
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	4313      	orrs	r3, r2
 800fe52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	f003 0301 	and.w	r3, r3, #1
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d002      	beq.n	800fe64 <get_fat+0xe6>
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	091b      	lsrs	r3, r3, #4
 800fe62:	e002      	b.n	800fe6a <get_fat+0xec>
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fe6a:	617b      	str	r3, [r7, #20]
			break;
 800fe6c:	e055      	b.n	800ff1a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	899b      	ldrh	r3, [r3, #12]
 800fe76:	085b      	lsrs	r3, r3, #1
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe82:	4413      	add	r3, r2
 800fe84:	4619      	mov	r1, r3
 800fe86:	6938      	ldr	r0, [r7, #16]
 800fe88:	f7ff febc 	bl	800fc04 <move_window>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d140      	bne.n	800ff14 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	005b      	lsls	r3, r3, #1
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	8992      	ldrh	r2, [r2, #12]
 800fea0:	fbb3 f0f2 	udiv	r0, r3, r2
 800fea4:	fb00 f202 	mul.w	r2, r0, r2
 800fea8:	1a9b      	subs	r3, r3, r2
 800feaa:	440b      	add	r3, r1
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff fbf9 	bl	800f6a4 <ld_word>
 800feb2:	4603      	mov	r3, r0
 800feb4:	617b      	str	r3, [r7, #20]
			break;
 800feb6:	e030      	b.n	800ff1a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	899b      	ldrh	r3, [r3, #12]
 800fec0:	089b      	lsrs	r3, r3, #2
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	4619      	mov	r1, r3
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	fbb3 f3f1 	udiv	r3, r3, r1
 800fecc:	4413      	add	r3, r2
 800fece:	4619      	mov	r1, r3
 800fed0:	6938      	ldr	r0, [r7, #16]
 800fed2:	f7ff fe97 	bl	800fc04 <move_window>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d11d      	bne.n	800ff18 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	009b      	lsls	r3, r3, #2
 800fee6:	693a      	ldr	r2, [r7, #16]
 800fee8:	8992      	ldrh	r2, [r2, #12]
 800feea:	fbb3 f0f2 	udiv	r0, r3, r2
 800feee:	fb00 f202 	mul.w	r2, r0, r2
 800fef2:	1a9b      	subs	r3, r3, r2
 800fef4:	440b      	add	r3, r1
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7ff fbec 	bl	800f6d4 <ld_dword>
 800fefc:	4603      	mov	r3, r0
 800fefe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ff02:	617b      	str	r3, [r7, #20]
			break;
 800ff04:	e009      	b.n	800ff1a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ff06:	2301      	movs	r3, #1
 800ff08:	617b      	str	r3, [r7, #20]
 800ff0a:	e006      	b.n	800ff1a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff0c:	bf00      	nop
 800ff0e:	e004      	b.n	800ff1a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff10:	bf00      	nop
 800ff12:	e002      	b.n	800ff1a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ff14:	bf00      	nop
 800ff16:	e000      	b.n	800ff1a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ff18:	bf00      	nop
		}
	}

	return val;
 800ff1a:	697b      	ldr	r3, [r7, #20]
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3718      	adds	r7, #24
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ff24:	b590      	push	{r4, r7, lr}
 800ff26:	b089      	sub	sp, #36	@ 0x24
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ff30:	2302      	movs	r3, #2
 800ff32:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	2b01      	cmp	r3, #1
 800ff38:	f240 8109 	bls.w	801014e <put_fat+0x22a>
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	6a1b      	ldr	r3, [r3, #32]
 800ff40:	68ba      	ldr	r2, [r7, #8]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	f080 8103 	bcs.w	801014e <put_fat+0x22a>
		switch (fs->fs_type) {
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	2b03      	cmp	r3, #3
 800ff4e:	f000 80b6 	beq.w	80100be <put_fat+0x19a>
 800ff52:	2b03      	cmp	r3, #3
 800ff54:	f300 80fb 	bgt.w	801014e <put_fat+0x22a>
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d003      	beq.n	800ff64 <put_fat+0x40>
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	f000 8083 	beq.w	8010068 <put_fat+0x144>
 800ff62:	e0f4      	b.n	801014e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	61bb      	str	r3, [r7, #24]
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	085b      	lsrs	r3, r3, #1
 800ff6c:	69ba      	ldr	r2, [r7, #24]
 800ff6e:	4413      	add	r3, r2
 800ff70:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	899b      	ldrh	r3, [r3, #12]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	69bb      	ldr	r3, [r7, #24]
 800ff7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff82:	4413      	add	r3, r2
 800ff84:	4619      	mov	r1, r3
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f7ff fe3c 	bl	800fc04 <move_window>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ff90:	7ffb      	ldrb	r3, [r7, #31]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	f040 80d4 	bne.w	8010140 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	1c5a      	adds	r2, r3, #1
 800ffa2:	61ba      	str	r2, [r7, #24]
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	8992      	ldrh	r2, [r2, #12]
 800ffa8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ffac:	fb00 f202 	mul.w	r2, r0, r2
 800ffb0:	1a9b      	subs	r3, r3, r2
 800ffb2:	440b      	add	r3, r1
 800ffb4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	f003 0301 	and.w	r3, r3, #1
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d00d      	beq.n	800ffdc <put_fat+0xb8>
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	b25b      	sxtb	r3, r3
 800ffc6:	f003 030f 	and.w	r3, r3, #15
 800ffca:	b25a      	sxtb	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	011b      	lsls	r3, r3, #4
 800ffd2:	b25b      	sxtb	r3, r3
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	b25b      	sxtb	r3, r3
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	e001      	b.n	800ffe0 <put_fat+0xbc>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	697a      	ldr	r2, [r7, #20]
 800ffe2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2201      	movs	r2, #1
 800ffe8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	899b      	ldrh	r3, [r3, #12]
 800fff2:	4619      	mov	r1, r3
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	fbb3 f3f1 	udiv	r3, r3, r1
 800fffa:	4413      	add	r3, r2
 800fffc:	4619      	mov	r1, r3
 800fffe:	68f8      	ldr	r0, [r7, #12]
 8010000:	f7ff fe00 	bl	800fc04 <move_window>
 8010004:	4603      	mov	r3, r0
 8010006:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010008:	7ffb      	ldrb	r3, [r7, #31]
 801000a:	2b00      	cmp	r3, #0
 801000c:	f040 809a 	bne.w	8010144 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	899b      	ldrh	r3, [r3, #12]
 801001a:	461a      	mov	r2, r3
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010022:	fb00 f202 	mul.w	r2, r0, r2
 8010026:	1a9b      	subs	r3, r3, r2
 8010028:	440b      	add	r3, r1
 801002a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	f003 0301 	and.w	r3, r3, #1
 8010032:	2b00      	cmp	r3, #0
 8010034:	d003      	beq.n	801003e <put_fat+0x11a>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	091b      	lsrs	r3, r3, #4
 801003a:	b2db      	uxtb	r3, r3
 801003c:	e00e      	b.n	801005c <put_fat+0x138>
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	b25b      	sxtb	r3, r3
 8010044:	f023 030f 	bic.w	r3, r3, #15
 8010048:	b25a      	sxtb	r2, r3
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	0a1b      	lsrs	r3, r3, #8
 801004e:	b25b      	sxtb	r3, r3
 8010050:	f003 030f 	and.w	r3, r3, #15
 8010054:	b25b      	sxtb	r3, r3
 8010056:	4313      	orrs	r3, r2
 8010058:	b25b      	sxtb	r3, r3
 801005a:	b2db      	uxtb	r3, r3
 801005c:	697a      	ldr	r2, [r7, #20]
 801005e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2201      	movs	r2, #1
 8010064:	70da      	strb	r2, [r3, #3]
			break;
 8010066:	e072      	b.n	801014e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	899b      	ldrh	r3, [r3, #12]
 8010070:	085b      	lsrs	r3, r3, #1
 8010072:	b29b      	uxth	r3, r3
 8010074:	4619      	mov	r1, r3
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	fbb3 f3f1 	udiv	r3, r3, r1
 801007c:	4413      	add	r3, r2
 801007e:	4619      	mov	r1, r3
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f7ff fdbf 	bl	800fc04 <move_window>
 8010086:	4603      	mov	r3, r0
 8010088:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801008a:	7ffb      	ldrb	r3, [r7, #31]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d15b      	bne.n	8010148 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	8992      	ldrh	r2, [r2, #12]
 801009e:	fbb3 f0f2 	udiv	r0, r3, r2
 80100a2:	fb00 f202 	mul.w	r2, r0, r2
 80100a6:	1a9b      	subs	r3, r3, r2
 80100a8:	440b      	add	r3, r1
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	b292      	uxth	r2, r2
 80100ae:	4611      	mov	r1, r2
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7ff fb32 	bl	800f71a <st_word>
			fs->wflag = 1;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2201      	movs	r2, #1
 80100ba:	70da      	strb	r2, [r3, #3]
			break;
 80100bc:	e047      	b.n	801014e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	899b      	ldrh	r3, [r3, #12]
 80100c6:	089b      	lsrs	r3, r3, #2
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	4619      	mov	r1, r3
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80100d2:	4413      	add	r3, r2
 80100d4:	4619      	mov	r1, r3
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	f7ff fd94 	bl	800fc04 <move_window>
 80100dc:	4603      	mov	r3, r0
 80100de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80100e0:	7ffb      	ldrb	r3, [r7, #31]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d132      	bne.n	801014c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	68fa      	ldr	r2, [r7, #12]
 80100f8:	8992      	ldrh	r2, [r2, #12]
 80100fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80100fe:	fb00 f202 	mul.w	r2, r0, r2
 8010102:	1a9b      	subs	r3, r3, r2
 8010104:	440b      	add	r3, r1
 8010106:	4618      	mov	r0, r3
 8010108:	f7ff fae4 	bl	800f6d4 <ld_dword>
 801010c:	4603      	mov	r3, r0
 801010e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010112:	4323      	orrs	r3, r4
 8010114:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	68fa      	ldr	r2, [r7, #12]
 8010122:	8992      	ldrh	r2, [r2, #12]
 8010124:	fbb3 f0f2 	udiv	r0, r3, r2
 8010128:	fb00 f202 	mul.w	r2, r0, r2
 801012c:	1a9b      	subs	r3, r3, r2
 801012e:	440b      	add	r3, r1
 8010130:	6879      	ldr	r1, [r7, #4]
 8010132:	4618      	mov	r0, r3
 8010134:	f7ff fb0c 	bl	800f750 <st_dword>
			fs->wflag = 1;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2201      	movs	r2, #1
 801013c:	70da      	strb	r2, [r3, #3]
			break;
 801013e:	e006      	b.n	801014e <put_fat+0x22a>
			if (res != FR_OK) break;
 8010140:	bf00      	nop
 8010142:	e004      	b.n	801014e <put_fat+0x22a>
			if (res != FR_OK) break;
 8010144:	bf00      	nop
 8010146:	e002      	b.n	801014e <put_fat+0x22a>
			if (res != FR_OK) break;
 8010148:	bf00      	nop
 801014a:	e000      	b.n	801014e <put_fat+0x22a>
			if (res != FR_OK) break;
 801014c:	bf00      	nop
		}
	}
	return res;
 801014e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3724      	adds	r7, #36	@ 0x24
 8010154:	46bd      	mov	sp, r7
 8010156:	bd90      	pop	{r4, r7, pc}

08010158 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b088      	sub	sp, #32
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010164:	2300      	movs	r3, #0
 8010166:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	2b01      	cmp	r3, #1
 8010172:	d904      	bls.n	801017e <remove_chain+0x26>
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	6a1b      	ldr	r3, [r3, #32]
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	429a      	cmp	r2, r3
 801017c:	d301      	bcc.n	8010182 <remove_chain+0x2a>
 801017e:	2302      	movs	r3, #2
 8010180:	e04b      	b.n	801021a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d00c      	beq.n	80101a2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010188:	f04f 32ff 	mov.w	r2, #4294967295
 801018c:	6879      	ldr	r1, [r7, #4]
 801018e:	69b8      	ldr	r0, [r7, #24]
 8010190:	f7ff fec8 	bl	800ff24 <put_fat>
 8010194:	4603      	mov	r3, r0
 8010196:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010198:	7ffb      	ldrb	r3, [r7, #31]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <remove_chain+0x4a>
 801019e:	7ffb      	ldrb	r3, [r7, #31]
 80101a0:	e03b      	b.n	801021a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	f7ff fdea 	bl	800fd7e <get_fat>
 80101aa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d031      	beq.n	8010216 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d101      	bne.n	80101bc <remove_chain+0x64>
 80101b8:	2302      	movs	r3, #2
 80101ba:	e02e      	b.n	801021a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101c2:	d101      	bne.n	80101c8 <remove_chain+0x70>
 80101c4:	2301      	movs	r3, #1
 80101c6:	e028      	b.n	801021a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80101c8:	2200      	movs	r2, #0
 80101ca:	68b9      	ldr	r1, [r7, #8]
 80101cc:	69b8      	ldr	r0, [r7, #24]
 80101ce:	f7ff fea9 	bl	800ff24 <put_fat>
 80101d2:	4603      	mov	r3, r0
 80101d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80101d6:	7ffb      	ldrb	r3, [r7, #31]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d001      	beq.n	80101e0 <remove_chain+0x88>
 80101dc:	7ffb      	ldrb	r3, [r7, #31]
 80101de:	e01c      	b.n	801021a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	699a      	ldr	r2, [r3, #24]
 80101e4:	69bb      	ldr	r3, [r7, #24]
 80101e6:	6a1b      	ldr	r3, [r3, #32]
 80101e8:	3b02      	subs	r3, #2
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d20b      	bcs.n	8010206 <remove_chain+0xae>
			fs->free_clst++;
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	699b      	ldr	r3, [r3, #24]
 80101f2:	1c5a      	adds	r2, r3, #1
 80101f4:	69bb      	ldr	r3, [r7, #24]
 80101f6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	791b      	ldrb	r3, [r3, #4]
 80101fc:	f043 0301 	orr.w	r3, r3, #1
 8010200:	b2da      	uxtb	r2, r3
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	6a1b      	ldr	r3, [r3, #32]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	429a      	cmp	r2, r3
 8010212:	d3c6      	bcc.n	80101a2 <remove_chain+0x4a>
 8010214:	e000      	b.n	8010218 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010216:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010218:	2300      	movs	r3, #0
}
 801021a:	4618      	mov	r0, r3
 801021c:	3720      	adds	r7, #32
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010222:	b580      	push	{r7, lr}
 8010224:	b088      	sub	sp, #32
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
 801022a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d10d      	bne.n	8010254 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	695b      	ldr	r3, [r3, #20]
 801023c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d004      	beq.n	801024e <create_chain+0x2c>
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	6a1b      	ldr	r3, [r3, #32]
 8010248:	69ba      	ldr	r2, [r7, #24]
 801024a:	429a      	cmp	r2, r3
 801024c:	d31b      	bcc.n	8010286 <create_chain+0x64>
 801024e:	2301      	movs	r3, #1
 8010250:	61bb      	str	r3, [r7, #24]
 8010252:	e018      	b.n	8010286 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010254:	6839      	ldr	r1, [r7, #0]
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f7ff fd91 	bl	800fd7e <get_fat>
 801025c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d801      	bhi.n	8010268 <create_chain+0x46>
 8010264:	2301      	movs	r3, #1
 8010266:	e070      	b.n	801034a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801026e:	d101      	bne.n	8010274 <create_chain+0x52>
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	e06a      	b.n	801034a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	6a1b      	ldr	r3, [r3, #32]
 8010278:	68fa      	ldr	r2, [r7, #12]
 801027a:	429a      	cmp	r2, r3
 801027c:	d201      	bcs.n	8010282 <create_chain+0x60>
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	e063      	b.n	801034a <create_chain+0x128>
		scl = clst;
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	3301      	adds	r3, #1
 801028e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	6a1b      	ldr	r3, [r3, #32]
 8010294:	69fa      	ldr	r2, [r7, #28]
 8010296:	429a      	cmp	r2, r3
 8010298:	d307      	bcc.n	80102aa <create_chain+0x88>
				ncl = 2;
 801029a:	2302      	movs	r3, #2
 801029c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801029e:	69fa      	ldr	r2, [r7, #28]
 80102a0:	69bb      	ldr	r3, [r7, #24]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d901      	bls.n	80102aa <create_chain+0x88>
 80102a6:	2300      	movs	r3, #0
 80102a8:	e04f      	b.n	801034a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80102aa:	69f9      	ldr	r1, [r7, #28]
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7ff fd66 	bl	800fd7e <get_fat>
 80102b2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00e      	beq.n	80102d8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d003      	beq.n	80102c8 <create_chain+0xa6>
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c6:	d101      	bne.n	80102cc <create_chain+0xaa>
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	e03e      	b.n	801034a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80102cc:	69fa      	ldr	r2, [r7, #28]
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d1da      	bne.n	801028a <create_chain+0x68>
 80102d4:	2300      	movs	r3, #0
 80102d6:	e038      	b.n	801034a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80102d8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80102da:	f04f 32ff 	mov.w	r2, #4294967295
 80102de:	69f9      	ldr	r1, [r7, #28]
 80102e0:	6938      	ldr	r0, [r7, #16]
 80102e2:	f7ff fe1f 	bl	800ff24 <put_fat>
 80102e6:	4603      	mov	r3, r0
 80102e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80102ea:	7dfb      	ldrb	r3, [r7, #23]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d109      	bne.n	8010304 <create_chain+0xe2>
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d006      	beq.n	8010304 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80102f6:	69fa      	ldr	r2, [r7, #28]
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	6938      	ldr	r0, [r7, #16]
 80102fc:	f7ff fe12 	bl	800ff24 <put_fat>
 8010300:	4603      	mov	r3, r0
 8010302:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010304:	7dfb      	ldrb	r3, [r7, #23]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d116      	bne.n	8010338 <create_chain+0x116>
		fs->last_clst = ncl;
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	69fa      	ldr	r2, [r7, #28]
 801030e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	699a      	ldr	r2, [r3, #24]
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	6a1b      	ldr	r3, [r3, #32]
 8010318:	3b02      	subs	r3, #2
 801031a:	429a      	cmp	r2, r3
 801031c:	d804      	bhi.n	8010328 <create_chain+0x106>
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	1e5a      	subs	r2, r3, #1
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	791b      	ldrb	r3, [r3, #4]
 801032c:	f043 0301 	orr.w	r3, r3, #1
 8010330:	b2da      	uxtb	r2, r3
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	711a      	strb	r2, [r3, #4]
 8010336:	e007      	b.n	8010348 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010338:	7dfb      	ldrb	r3, [r7, #23]
 801033a:	2b01      	cmp	r3, #1
 801033c:	d102      	bne.n	8010344 <create_chain+0x122>
 801033e:	f04f 33ff 	mov.w	r3, #4294967295
 8010342:	e000      	b.n	8010346 <create_chain+0x124>
 8010344:	2301      	movs	r3, #1
 8010346:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010348:	69fb      	ldr	r3, [r7, #28]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3720      	adds	r7, #32
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010352:	b480      	push	{r7}
 8010354:	b087      	sub	sp, #28
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
 801035a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010366:	3304      	adds	r3, #4
 8010368:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	899b      	ldrh	r3, [r3, #12]
 801036e:	461a      	mov	r2, r3
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	fbb3 f3f2 	udiv	r3, r3, r2
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	8952      	ldrh	r2, [r2, #10]
 801037a:	fbb3 f3f2 	udiv	r3, r3, r2
 801037e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	1d1a      	adds	r2, r3, #4
 8010384:	613a      	str	r2, [r7, #16]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <clmt_clust+0x42>
 8010390:	2300      	movs	r3, #0
 8010392:	e010      	b.n	80103b6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010394:	697a      	ldr	r2, [r7, #20]
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	429a      	cmp	r2, r3
 801039a:	d307      	bcc.n	80103ac <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801039c:	697a      	ldr	r2, [r7, #20]
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	617b      	str	r3, [r7, #20]
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	3304      	adds	r3, #4
 80103a8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80103aa:	e7e9      	b.n	8010380 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80103ac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	4413      	add	r3, r2
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	371c      	adds	r7, #28
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr

080103c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b086      	sub	sp, #24
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80103d8:	d204      	bcs.n	80103e4 <dir_sdi+0x22>
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	f003 031f 	and.w	r3, r3, #31
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d001      	beq.n	80103e8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80103e4:	2302      	movs	r3, #2
 80103e6:	e071      	b.n	80104cc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	683a      	ldr	r2, [r7, #0]
 80103ec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d106      	bne.n	8010408 <dir_sdi+0x46>
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	2b02      	cmp	r3, #2
 8010400:	d902      	bls.n	8010408 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010406:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d10c      	bne.n	8010428 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	095b      	lsrs	r3, r3, #5
 8010412:	693a      	ldr	r2, [r7, #16]
 8010414:	8912      	ldrh	r2, [r2, #8]
 8010416:	4293      	cmp	r3, r2
 8010418:	d301      	bcc.n	801041e <dir_sdi+0x5c>
 801041a:	2302      	movs	r3, #2
 801041c:	e056      	b.n	80104cc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	61da      	str	r2, [r3, #28]
 8010426:	e02d      	b.n	8010484 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	895b      	ldrh	r3, [r3, #10]
 801042c:	461a      	mov	r2, r3
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	899b      	ldrh	r3, [r3, #12]
 8010432:	fb02 f303 	mul.w	r3, r2, r3
 8010436:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010438:	e019      	b.n	801046e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6979      	ldr	r1, [r7, #20]
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff fc9d 	bl	800fd7e <get_fat>
 8010444:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044c:	d101      	bne.n	8010452 <dir_sdi+0x90>
 801044e:	2301      	movs	r3, #1
 8010450:	e03c      	b.n	80104cc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d904      	bls.n	8010462 <dir_sdi+0xa0>
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	6a1b      	ldr	r3, [r3, #32]
 801045c:	697a      	ldr	r2, [r7, #20]
 801045e:	429a      	cmp	r2, r3
 8010460:	d301      	bcc.n	8010466 <dir_sdi+0xa4>
 8010462:	2302      	movs	r3, #2
 8010464:	e032      	b.n	80104cc <dir_sdi+0x10a>
			ofs -= csz;
 8010466:	683a      	ldr	r2, [r7, #0]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801046e:	683a      	ldr	r2, [r7, #0]
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	429a      	cmp	r2, r3
 8010474:	d2e1      	bcs.n	801043a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010476:	6979      	ldr	r1, [r7, #20]
 8010478:	6938      	ldr	r0, [r7, #16]
 801047a:	f7ff fc61 	bl	800fd40 <clust2sect>
 801047e:	4602      	mov	r2, r0
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	697a      	ldr	r2, [r7, #20]
 8010488:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	69db      	ldr	r3, [r3, #28]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d101      	bne.n	8010496 <dir_sdi+0xd4>
 8010492:	2302      	movs	r3, #2
 8010494:	e01a      	b.n	80104cc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	69da      	ldr	r2, [r3, #28]
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	899b      	ldrh	r3, [r3, #12]
 801049e:	4619      	mov	r1, r3
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80104a6:	441a      	add	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	899b      	ldrh	r3, [r3, #12]
 80104b6:	461a      	mov	r2, r3
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80104be:	fb00 f202 	mul.w	r2, r0, r2
 80104c2:	1a9b      	subs	r3, r3, r2
 80104c4:	18ca      	adds	r2, r1, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80104ca:	2300      	movs	r3, #0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3718      	adds	r7, #24
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b086      	sub	sp, #24
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	695b      	ldr	r3, [r3, #20]
 80104e8:	3320      	adds	r3, #32
 80104ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	69db      	ldr	r3, [r3, #28]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d003      	beq.n	80104fc <dir_next+0x28>
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80104fa:	d301      	bcc.n	8010500 <dir_next+0x2c>
 80104fc:	2304      	movs	r3, #4
 80104fe:	e0bb      	b.n	8010678 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	899b      	ldrh	r3, [r3, #12]
 8010504:	461a      	mov	r2, r3
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	fbb3 f1f2 	udiv	r1, r3, r2
 801050c:	fb01 f202 	mul.w	r2, r1, r2
 8010510:	1a9b      	subs	r3, r3, r2
 8010512:	2b00      	cmp	r3, #0
 8010514:	f040 809d 	bne.w	8010652 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	69db      	ldr	r3, [r3, #28]
 801051c:	1c5a      	adds	r2, r3, #1
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	699b      	ldr	r3, [r3, #24]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d10b      	bne.n	8010542 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	095b      	lsrs	r3, r3, #5
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	8912      	ldrh	r2, [r2, #8]
 8010532:	4293      	cmp	r3, r2
 8010534:	f0c0 808d 	bcc.w	8010652 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2200      	movs	r2, #0
 801053c:	61da      	str	r2, [r3, #28]
 801053e:	2304      	movs	r3, #4
 8010540:	e09a      	b.n	8010678 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	899b      	ldrh	r3, [r3, #12]
 8010546:	461a      	mov	r2, r3
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	fbb3 f3f2 	udiv	r3, r3, r2
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	8952      	ldrh	r2, [r2, #10]
 8010552:	3a01      	subs	r2, #1
 8010554:	4013      	ands	r3, r2
 8010556:	2b00      	cmp	r3, #0
 8010558:	d17b      	bne.n	8010652 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	699b      	ldr	r3, [r3, #24]
 8010560:	4619      	mov	r1, r3
 8010562:	4610      	mov	r0, r2
 8010564:	f7ff fc0b 	bl	800fd7e <get_fat>
 8010568:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	2b01      	cmp	r3, #1
 801056e:	d801      	bhi.n	8010574 <dir_next+0xa0>
 8010570:	2302      	movs	r3, #2
 8010572:	e081      	b.n	8010678 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801057a:	d101      	bne.n	8010580 <dir_next+0xac>
 801057c:	2301      	movs	r3, #1
 801057e:	e07b      	b.n	8010678 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6a1b      	ldr	r3, [r3, #32]
 8010584:	697a      	ldr	r2, [r7, #20]
 8010586:	429a      	cmp	r2, r3
 8010588:	d359      	bcc.n	801063e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d104      	bne.n	801059a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	61da      	str	r2, [r3, #28]
 8010596:	2304      	movs	r3, #4
 8010598:	e06e      	b.n	8010678 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	699b      	ldr	r3, [r3, #24]
 80105a0:	4619      	mov	r1, r3
 80105a2:	4610      	mov	r0, r2
 80105a4:	f7ff fe3d 	bl	8010222 <create_chain>
 80105a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d101      	bne.n	80105b4 <dir_next+0xe0>
 80105b0:	2307      	movs	r3, #7
 80105b2:	e061      	b.n	8010678 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	2b01      	cmp	r3, #1
 80105b8:	d101      	bne.n	80105be <dir_next+0xea>
 80105ba:	2302      	movs	r3, #2
 80105bc:	e05c      	b.n	8010678 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105c4:	d101      	bne.n	80105ca <dir_next+0xf6>
 80105c6:	2301      	movs	r3, #1
 80105c8:	e056      	b.n	8010678 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	f7ff fad6 	bl	800fb7c <sync_window>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d001      	beq.n	80105da <dir_next+0x106>
 80105d6:	2301      	movs	r3, #1
 80105d8:	e04e      	b.n	8010678 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	899b      	ldrh	r3, [r3, #12]
 80105e4:	461a      	mov	r2, r3
 80105e6:	2100      	movs	r1, #0
 80105e8:	f7ff f8ff 	bl	800f7ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80105ec:	2300      	movs	r3, #0
 80105ee:	613b      	str	r3, [r7, #16]
 80105f0:	6979      	ldr	r1, [r7, #20]
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	f7ff fba4 	bl	800fd40 <clust2sect>
 80105f8:	4602      	mov	r2, r0
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80105fe:	e012      	b.n	8010626 <dir_next+0x152>
						fs->wflag = 1;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2201      	movs	r2, #1
 8010604:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010606:	68f8      	ldr	r0, [r7, #12]
 8010608:	f7ff fab8 	bl	800fb7c <sync_window>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d001      	beq.n	8010616 <dir_next+0x142>
 8010612:	2301      	movs	r3, #1
 8010614:	e030      	b.n	8010678 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	3301      	adds	r3, #1
 801061a:	613b      	str	r3, [r7, #16]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010620:	1c5a      	adds	r2, r3, #1
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	639a      	str	r2, [r3, #56]	@ 0x38
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	895b      	ldrh	r3, [r3, #10]
 801062a:	461a      	mov	r2, r3
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	4293      	cmp	r3, r2
 8010630:	d3e6      	bcc.n	8010600 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	1ad2      	subs	r2, r2, r3
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	697a      	ldr	r2, [r7, #20]
 8010642:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010644:	6979      	ldr	r1, [r7, #20]
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f7ff fb7a 	bl	800fd40 <clust2sect>
 801064c:	4602      	mov	r2, r0
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	68ba      	ldr	r2, [r7, #8]
 8010656:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	899b      	ldrh	r3, [r3, #12]
 8010662:	461a      	mov	r2, r3
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	fbb3 f0f2 	udiv	r0, r3, r2
 801066a:	fb00 f202 	mul.w	r2, r0, r2
 801066e:	1a9b      	subs	r3, r3, r2
 8010670:	18ca      	adds	r2, r1, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010676:	2300      	movs	r3, #0
}
 8010678:	4618      	mov	r0, r3
 801067a:	3718      	adds	r7, #24
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b086      	sub	sp, #24
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010690:	2100      	movs	r1, #0
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f7ff fe95 	bl	80103c2 <dir_sdi>
 8010698:	4603      	mov	r3, r0
 801069a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801069c:	7dfb      	ldrb	r3, [r7, #23]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d12b      	bne.n	80106fa <dir_alloc+0x7a>
		n = 0;
 80106a2:	2300      	movs	r3, #0
 80106a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	69db      	ldr	r3, [r3, #28]
 80106aa:	4619      	mov	r1, r3
 80106ac:	68f8      	ldr	r0, [r7, #12]
 80106ae:	f7ff faa9 	bl	800fc04 <move_window>
 80106b2:	4603      	mov	r3, r0
 80106b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80106b6:	7dfb      	ldrb	r3, [r7, #23]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d11d      	bne.n	80106f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6a1b      	ldr	r3, [r3, #32]
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	2be5      	cmp	r3, #229	@ 0xe5
 80106c4:	d004      	beq.n	80106d0 <dir_alloc+0x50>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6a1b      	ldr	r3, [r3, #32]
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d107      	bne.n	80106e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	3301      	adds	r3, #1
 80106d4:	613b      	str	r3, [r7, #16]
 80106d6:	693a      	ldr	r2, [r7, #16]
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d102      	bne.n	80106e4 <dir_alloc+0x64>
 80106de:	e00c      	b.n	80106fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80106e0:	2300      	movs	r3, #0
 80106e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80106e4:	2101      	movs	r1, #1
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f7ff fef4 	bl	80104d4 <dir_next>
 80106ec:	4603      	mov	r3, r0
 80106ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80106f0:	7dfb      	ldrb	r3, [r7, #23]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d0d7      	beq.n	80106a6 <dir_alloc+0x26>
 80106f6:	e000      	b.n	80106fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80106f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80106fa:	7dfb      	ldrb	r3, [r7, #23]
 80106fc:	2b04      	cmp	r3, #4
 80106fe:	d101      	bne.n	8010704 <dir_alloc+0x84>
 8010700:	2307      	movs	r3, #7
 8010702:	75fb      	strb	r3, [r7, #23]
	return res;
 8010704:	7dfb      	ldrb	r3, [r7, #23]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3718      	adds	r7, #24
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801070e:	b580      	push	{r7, lr}
 8010710:	b084      	sub	sp, #16
 8010712:	af00      	add	r7, sp, #0
 8010714:	6078      	str	r0, [r7, #4]
 8010716:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	331a      	adds	r3, #26
 801071c:	4618      	mov	r0, r3
 801071e:	f7fe ffc1 	bl	800f6a4 <ld_word>
 8010722:	4603      	mov	r3, r0
 8010724:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	2b03      	cmp	r3, #3
 801072c:	d109      	bne.n	8010742 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	3314      	adds	r3, #20
 8010732:	4618      	mov	r0, r3
 8010734:	f7fe ffb6 	bl	800f6a4 <ld_word>
 8010738:	4603      	mov	r3, r0
 801073a:	041b      	lsls	r3, r3, #16
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	4313      	orrs	r3, r2
 8010740:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010742:	68fb      	ldr	r3, [r7, #12]
}
 8010744:	4618      	mov	r0, r3
 8010746:	3710      	adds	r7, #16
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	331a      	adds	r3, #26
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	b292      	uxth	r2, r2
 8010760:	4611      	mov	r1, r2
 8010762:	4618      	mov	r0, r3
 8010764:	f7fe ffd9 	bl	800f71a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	2b03      	cmp	r3, #3
 801076e:	d109      	bne.n	8010784 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	f103 0214 	add.w	r2, r3, #20
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	0c1b      	lsrs	r3, r3, #16
 801077a:	b29b      	uxth	r3, r3
 801077c:	4619      	mov	r1, r3
 801077e:	4610      	mov	r0, r2
 8010780:	f7fe ffcb 	bl	800f71a <st_word>
	}
}
 8010784:	bf00      	nop
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801078c:	b590      	push	{r4, r7, lr}
 801078e:	b087      	sub	sp, #28
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	331a      	adds	r3, #26
 801079a:	4618      	mov	r0, r3
 801079c:	f7fe ff82 	bl	800f6a4 <ld_word>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d001      	beq.n	80107aa <cmp_lfn+0x1e>
 80107a6:	2300      	movs	r3, #0
 80107a8:	e059      	b.n	801085e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80107b2:	1e5a      	subs	r2, r3, #1
 80107b4:	4613      	mov	r3, r2
 80107b6:	005b      	lsls	r3, r3, #1
 80107b8:	4413      	add	r3, r2
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	4413      	add	r3, r2
 80107be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80107c0:	2301      	movs	r3, #1
 80107c2:	81fb      	strh	r3, [r7, #14]
 80107c4:	2300      	movs	r3, #0
 80107c6:	613b      	str	r3, [r7, #16]
 80107c8:	e033      	b.n	8010832 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80107ca:	4a27      	ldr	r2, [pc, #156]	@ (8010868 <cmp_lfn+0xdc>)
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	4413      	add	r3, r2
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	461a      	mov	r2, r3
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	4413      	add	r3, r2
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe ff63 	bl	800f6a4 <ld_word>
 80107de:	4603      	mov	r3, r0
 80107e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80107e2:	89fb      	ldrh	r3, [r7, #14]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d01a      	beq.n	801081e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80107ec:	d812      	bhi.n	8010814 <cmp_lfn+0x88>
 80107ee:	89bb      	ldrh	r3, [r7, #12]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f002 fa9b 	bl	8012d2c <ff_wtoupper>
 80107f6:	4603      	mov	r3, r0
 80107f8:	461c      	mov	r4, r3
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	1c5a      	adds	r2, r3, #1
 80107fe:	617a      	str	r2, [r7, #20]
 8010800:	005b      	lsls	r3, r3, #1
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	4413      	add	r3, r2
 8010806:	881b      	ldrh	r3, [r3, #0]
 8010808:	4618      	mov	r0, r3
 801080a:	f002 fa8f 	bl	8012d2c <ff_wtoupper>
 801080e:	4603      	mov	r3, r0
 8010810:	429c      	cmp	r4, r3
 8010812:	d001      	beq.n	8010818 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010814:	2300      	movs	r3, #0
 8010816:	e022      	b.n	801085e <cmp_lfn+0xd2>
			}
			wc = uc;
 8010818:	89bb      	ldrh	r3, [r7, #12]
 801081a:	81fb      	strh	r3, [r7, #14]
 801081c:	e006      	b.n	801082c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801081e:	89bb      	ldrh	r3, [r7, #12]
 8010820:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010824:	4293      	cmp	r3, r2
 8010826:	d001      	beq.n	801082c <cmp_lfn+0xa0>
 8010828:	2300      	movs	r3, #0
 801082a:	e018      	b.n	801085e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	3301      	adds	r3, #1
 8010830:	613b      	str	r3, [r7, #16]
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	2b0c      	cmp	r3, #12
 8010836:	d9c8      	bls.n	80107ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010840:	2b00      	cmp	r3, #0
 8010842:	d00b      	beq.n	801085c <cmp_lfn+0xd0>
 8010844:	89fb      	ldrh	r3, [r7, #14]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d008      	beq.n	801085c <cmp_lfn+0xd0>
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	005b      	lsls	r3, r3, #1
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	4413      	add	r3, r2
 8010852:	881b      	ldrh	r3, [r3, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d001      	beq.n	801085c <cmp_lfn+0xd0>
 8010858:	2300      	movs	r3, #0
 801085a:	e000      	b.n	801085e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801085c:	2301      	movs	r3, #1
}
 801085e:	4618      	mov	r0, r3
 8010860:	371c      	adds	r7, #28
 8010862:	46bd      	mov	sp, r7
 8010864:	bd90      	pop	{r4, r7, pc}
 8010866:	bf00      	nop
 8010868:	080132d0 	.word	0x080132d0

0801086c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b088      	sub	sp, #32
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	4611      	mov	r1, r2
 8010878:	461a      	mov	r2, r3
 801087a:	460b      	mov	r3, r1
 801087c:	71fb      	strb	r3, [r7, #7]
 801087e:	4613      	mov	r3, r2
 8010880:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	330d      	adds	r3, #13
 8010886:	79ba      	ldrb	r2, [r7, #6]
 8010888:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	330b      	adds	r3, #11
 801088e:	220f      	movs	r2, #15
 8010890:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	330c      	adds	r3, #12
 8010896:	2200      	movs	r2, #0
 8010898:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	331a      	adds	r3, #26
 801089e:	2100      	movs	r1, #0
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fe ff3a 	bl	800f71a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80108a6:	79fb      	ldrb	r3, [r7, #7]
 80108a8:	1e5a      	subs	r2, r3, #1
 80108aa:	4613      	mov	r3, r2
 80108ac:	005b      	lsls	r3, r3, #1
 80108ae:	4413      	add	r3, r2
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	4413      	add	r3, r2
 80108b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80108b6:	2300      	movs	r3, #0
 80108b8:	82fb      	strh	r3, [r7, #22]
 80108ba:	2300      	movs	r3, #0
 80108bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80108be:	8afb      	ldrh	r3, [r7, #22]
 80108c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d007      	beq.n	80108d8 <put_lfn+0x6c>
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	1c5a      	adds	r2, r3, #1
 80108cc:	61fa      	str	r2, [r7, #28]
 80108ce:	005b      	lsls	r3, r3, #1
 80108d0:	68fa      	ldr	r2, [r7, #12]
 80108d2:	4413      	add	r3, r2
 80108d4:	881b      	ldrh	r3, [r3, #0]
 80108d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80108d8:	4a17      	ldr	r2, [pc, #92]	@ (8010938 <put_lfn+0xcc>)
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	4413      	add	r3, r2
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	461a      	mov	r2, r3
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	4413      	add	r3, r2
 80108e6:	8afa      	ldrh	r2, [r7, #22]
 80108e8:	4611      	mov	r1, r2
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fe ff15 	bl	800f71a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80108f0:	8afb      	ldrh	r3, [r7, #22]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d102      	bne.n	80108fc <put_lfn+0x90>
 80108f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80108fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	3301      	adds	r3, #1
 8010900:	61bb      	str	r3, [r7, #24]
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	2b0c      	cmp	r3, #12
 8010906:	d9da      	bls.n	80108be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010908:	8afb      	ldrh	r3, [r7, #22]
 801090a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801090e:	4293      	cmp	r3, r2
 8010910:	d006      	beq.n	8010920 <put_lfn+0xb4>
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	005b      	lsls	r3, r3, #1
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	4413      	add	r3, r2
 801091a:	881b      	ldrh	r3, [r3, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d103      	bne.n	8010928 <put_lfn+0xbc>
 8010920:	79fb      	ldrb	r3, [r7, #7]
 8010922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010926:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	79fa      	ldrb	r2, [r7, #7]
 801092c:	701a      	strb	r2, [r3, #0]
}
 801092e:	bf00      	nop
 8010930:	3720      	adds	r7, #32
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	080132d0 	.word	0x080132d0

0801093c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b08c      	sub	sp, #48	@ 0x30
 8010940:	af00      	add	r7, sp, #0
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
 8010948:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801094a:	220b      	movs	r2, #11
 801094c:	68b9      	ldr	r1, [r7, #8]
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	f7fe ff2a 	bl	800f7a8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	2b05      	cmp	r3, #5
 8010958:	d929      	bls.n	80109ae <gen_numname+0x72>
		sr = seq;
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801095e:	e020      	b.n	80109a2 <gen_numname+0x66>
			wc = *lfn++;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	1c9a      	adds	r2, r3, #2
 8010964:	607a      	str	r2, [r7, #4]
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801096a:	2300      	movs	r3, #0
 801096c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801096e:	e015      	b.n	801099c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8010970:	69fb      	ldr	r3, [r7, #28]
 8010972:	005a      	lsls	r2, r3, #1
 8010974:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010976:	f003 0301 	and.w	r3, r3, #1
 801097a:	4413      	add	r3, r2
 801097c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801097e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010980:	085b      	lsrs	r3, r3, #1
 8010982:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010984:	69fb      	ldr	r3, [r7, #28]
 8010986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801098a:	2b00      	cmp	r3, #0
 801098c:	d003      	beq.n	8010996 <gen_numname+0x5a>
 801098e:	69fa      	ldr	r2, [r7, #28]
 8010990:	4b30      	ldr	r3, [pc, #192]	@ (8010a54 <gen_numname+0x118>)
 8010992:	4053      	eors	r3, r2
 8010994:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010998:	3301      	adds	r3, #1
 801099a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801099c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801099e:	2b0f      	cmp	r3, #15
 80109a0:	d9e6      	bls.n	8010970 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	881b      	ldrh	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d1da      	bne.n	8010960 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80109ae:	2307      	movs	r3, #7
 80109b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	f003 030f 	and.w	r3, r3, #15
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	3330      	adds	r3, #48	@ 0x30
 80109be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80109c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80109c6:	2b39      	cmp	r3, #57	@ 0x39
 80109c8:	d904      	bls.n	80109d4 <gen_numname+0x98>
 80109ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80109ce:	3307      	adds	r3, #7
 80109d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80109d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d6:	1e5a      	subs	r2, r3, #1
 80109d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80109da:	3330      	adds	r3, #48	@ 0x30
 80109dc:	443b      	add	r3, r7
 80109de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80109e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	091b      	lsrs	r3, r3, #4
 80109ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d1df      	bne.n	80109b2 <gen_numname+0x76>
	ns[i] = '~';
 80109f2:	f107 0214 	add.w	r2, r7, #20
 80109f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109f8:	4413      	add	r3, r2
 80109fa:	227e      	movs	r2, #126	@ 0x7e
 80109fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80109fe:	2300      	movs	r3, #0
 8010a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a02:	e002      	b.n	8010a0a <gen_numname+0xce>
 8010a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a06:	3301      	adds	r3, #1
 8010a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d205      	bcs.n	8010a1e <gen_numname+0xe2>
 8010a12:	68fa      	ldr	r2, [r7, #12]
 8010a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a16:	4413      	add	r3, r2
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	2b20      	cmp	r3, #32
 8010a1c:	d1f2      	bne.n	8010a04 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a20:	2b07      	cmp	r3, #7
 8010a22:	d807      	bhi.n	8010a34 <gen_numname+0xf8>
 8010a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010a2a:	3330      	adds	r3, #48	@ 0x30
 8010a2c:	443b      	add	r3, r7
 8010a2e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010a32:	e000      	b.n	8010a36 <gen_numname+0xfa>
 8010a34:	2120      	movs	r1, #32
 8010a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a38:	1c5a      	adds	r2, r3, #1
 8010a3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	4413      	add	r3, r2
 8010a40:	460a      	mov	r2, r1
 8010a42:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a46:	2b07      	cmp	r3, #7
 8010a48:	d9e9      	bls.n	8010a1e <gen_numname+0xe2>
}
 8010a4a:	bf00      	nop
 8010a4c:	bf00      	nop
 8010a4e:	3730      	adds	r7, #48	@ 0x30
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	00011021 	.word	0x00011021

08010a58 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010a60:	2300      	movs	r3, #0
 8010a62:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010a64:	230b      	movs	r3, #11
 8010a66:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010a68:	7bfb      	ldrb	r3, [r7, #15]
 8010a6a:	b2da      	uxtb	r2, r3
 8010a6c:	0852      	lsrs	r2, r2, #1
 8010a6e:	01db      	lsls	r3, r3, #7
 8010a70:	4313      	orrs	r3, r2
 8010a72:	b2da      	uxtb	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	1c59      	adds	r1, r3, #1
 8010a78:	6079      	str	r1, [r7, #4]
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	3b01      	subs	r3, #1
 8010a84:	60bb      	str	r3, [r7, #8]
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1ed      	bne.n	8010a68 <sum_sfn+0x10>
	return sum;
 8010a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3714      	adds	r7, #20
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr

08010a9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010a9a:	b580      	push	{r7, lr}
 8010a9c:	b086      	sub	sp, #24
 8010a9e:	af00      	add	r7, sp, #0
 8010aa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010aa8:	2100      	movs	r1, #0
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7ff fc89 	bl	80103c2 <dir_sdi>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010ab4:	7dfb      	ldrb	r3, [r7, #23]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d001      	beq.n	8010abe <dir_find+0x24>
 8010aba:	7dfb      	ldrb	r3, [r7, #23]
 8010abc:	e0a9      	b.n	8010c12 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010abe:	23ff      	movs	r3, #255	@ 0xff
 8010ac0:	753b      	strb	r3, [r7, #20]
 8010ac2:	7d3b      	ldrb	r3, [r7, #20]
 8010ac4:	757b      	strb	r3, [r7, #21]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8010acc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	69db      	ldr	r3, [r3, #28]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6938      	ldr	r0, [r7, #16]
 8010ad6:	f7ff f895 	bl	800fc04 <move_window>
 8010ada:	4603      	mov	r3, r0
 8010adc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010ade:	7dfb      	ldrb	r3, [r7, #23]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f040 8090 	bne.w	8010c06 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6a1b      	ldr	r3, [r3, #32]
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010aee:	7dbb      	ldrb	r3, [r7, #22]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d102      	bne.n	8010afa <dir_find+0x60>
 8010af4:	2304      	movs	r3, #4
 8010af6:	75fb      	strb	r3, [r7, #23]
 8010af8:	e08a      	b.n	8010c10 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6a1b      	ldr	r3, [r3, #32]
 8010afe:	330b      	adds	r3, #11
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b06:	73fb      	strb	r3, [r7, #15]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	7bfa      	ldrb	r2, [r7, #15]
 8010b0c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010b0e:	7dbb      	ldrb	r3, [r7, #22]
 8010b10:	2be5      	cmp	r3, #229	@ 0xe5
 8010b12:	d007      	beq.n	8010b24 <dir_find+0x8a>
 8010b14:	7bfb      	ldrb	r3, [r7, #15]
 8010b16:	f003 0308 	and.w	r3, r3, #8
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d009      	beq.n	8010b32 <dir_find+0x98>
 8010b1e:	7bfb      	ldrb	r3, [r7, #15]
 8010b20:	2b0f      	cmp	r3, #15
 8010b22:	d006      	beq.n	8010b32 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010b24:	23ff      	movs	r3, #255	@ 0xff
 8010b26:	757b      	strb	r3, [r7, #21]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010b30:	e05e      	b.n	8010bf0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010b32:	7bfb      	ldrb	r3, [r7, #15]
 8010b34:	2b0f      	cmp	r3, #15
 8010b36:	d136      	bne.n	8010ba6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d154      	bne.n	8010bf0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010b46:	7dbb      	ldrb	r3, [r7, #22]
 8010b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d00d      	beq.n	8010b6c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6a1b      	ldr	r3, [r3, #32]
 8010b54:	7b5b      	ldrb	r3, [r3, #13]
 8010b56:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010b58:	7dbb      	ldrb	r3, [r7, #22]
 8010b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b5e:	75bb      	strb	r3, [r7, #22]
 8010b60:	7dbb      	ldrb	r3, [r7, #22]
 8010b62:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	695a      	ldr	r2, [r3, #20]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010b6c:	7dba      	ldrb	r2, [r7, #22]
 8010b6e:	7d7b      	ldrb	r3, [r7, #21]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d115      	bne.n	8010ba0 <dir_find+0x106>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6a1b      	ldr	r3, [r3, #32]
 8010b78:	330d      	adds	r3, #13
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	7d3a      	ldrb	r2, [r7, #20]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d10e      	bne.n	8010ba0 <dir_find+0x106>
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	691a      	ldr	r2, [r3, #16]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6a1b      	ldr	r3, [r3, #32]
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	4610      	mov	r0, r2
 8010b8e:	f7ff fdfd 	bl	801078c <cmp_lfn>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d003      	beq.n	8010ba0 <dir_find+0x106>
 8010b98:	7d7b      	ldrb	r3, [r7, #21]
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	e000      	b.n	8010ba2 <dir_find+0x108>
 8010ba0:	23ff      	movs	r3, #255	@ 0xff
 8010ba2:	757b      	strb	r3, [r7, #21]
 8010ba4:	e024      	b.n	8010bf0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010ba6:	7d7b      	ldrb	r3, [r7, #21]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d109      	bne.n	8010bc0 <dir_find+0x126>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6a1b      	ldr	r3, [r3, #32]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7ff ff51 	bl	8010a58 <sum_sfn>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	461a      	mov	r2, r3
 8010bba:	7d3b      	ldrb	r3, [r7, #20]
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d024      	beq.n	8010c0a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010bc6:	f003 0301 	and.w	r3, r3, #1
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10a      	bne.n	8010be4 <dir_find+0x14a>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a18      	ldr	r0, [r3, #32]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	3324      	adds	r3, #36	@ 0x24
 8010bd6:	220b      	movs	r2, #11
 8010bd8:	4619      	mov	r1, r3
 8010bda:	f7fe fe21 	bl	800f820 <mem_cmp>
 8010bde:	4603      	mov	r3, r0
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d014      	beq.n	8010c0e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010be4:	23ff      	movs	r3, #255	@ 0xff
 8010be6:	757b      	strb	r3, [r7, #21]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f04f 32ff 	mov.w	r2, #4294967295
 8010bee:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f7ff fc6e 	bl	80104d4 <dir_next>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010bfc:	7dfb      	ldrb	r3, [r7, #23]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f43f af65 	beq.w	8010ace <dir_find+0x34>
 8010c04:	e004      	b.n	8010c10 <dir_find+0x176>
		if (res != FR_OK) break;
 8010c06:	bf00      	nop
 8010c08:	e002      	b.n	8010c10 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010c0a:	bf00      	nop
 8010c0c:	e000      	b.n	8010c10 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010c0e:	bf00      	nop

	return res;
 8010c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3718      	adds	r7, #24
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
	...

08010c1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b08c      	sub	sp, #48	@ 0x30
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010c30:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d001      	beq.n	8010c3c <dir_register+0x20>
 8010c38:	2306      	movs	r3, #6
 8010c3a:	e0e0      	b.n	8010dfe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c40:	e002      	b.n	8010c48 <dir_register+0x2c>
 8010c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c44:	3301      	adds	r3, #1
 8010c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	691a      	ldr	r2, [r3, #16]
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4e:	005b      	lsls	r3, r3, #1
 8010c50:	4413      	add	r3, r2
 8010c52:	881b      	ldrh	r3, [r3, #0]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d1f4      	bne.n	8010c42 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010c5e:	f107 030c 	add.w	r3, r7, #12
 8010c62:	220c      	movs	r2, #12
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fe fd9f 	bl	800f7a8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010c6a:	7dfb      	ldrb	r3, [r7, #23]
 8010c6c:	f003 0301 	and.w	r3, r3, #1
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d032      	beq.n	8010cda <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2240      	movs	r2, #64	@ 0x40
 8010c78:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c80:	e016      	b.n	8010cb0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	691a      	ldr	r2, [r3, #16]
 8010c8c:	f107 010c 	add.w	r1, r7, #12
 8010c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c92:	f7ff fe53 	bl	801093c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f7ff feff 	bl	8010a9a <dir_find>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d106      	bne.n	8010cb8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cac:	3301      	adds	r3, #1
 8010cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cb2:	2b63      	cmp	r3, #99	@ 0x63
 8010cb4:	d9e5      	bls.n	8010c82 <dir_register+0x66>
 8010cb6:	e000      	b.n	8010cba <dir_register+0x9e>
			if (res != FR_OK) break;
 8010cb8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cbc:	2b64      	cmp	r3, #100	@ 0x64
 8010cbe:	d101      	bne.n	8010cc4 <dir_register+0xa8>
 8010cc0:	2307      	movs	r3, #7
 8010cc2:	e09c      	b.n	8010dfe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010cc8:	2b04      	cmp	r3, #4
 8010cca:	d002      	beq.n	8010cd2 <dir_register+0xb6>
 8010ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010cd0:	e095      	b.n	8010dfe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010cd2:	7dfa      	ldrb	r2, [r7, #23]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010cda:	7dfb      	ldrb	r3, [r7, #23]
 8010cdc:	f003 0302 	and.w	r3, r3, #2
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d007      	beq.n	8010cf4 <dir_register+0xd8>
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce6:	330c      	adds	r3, #12
 8010ce8:	4a47      	ldr	r2, [pc, #284]	@ (8010e08 <dir_register+0x1ec>)
 8010cea:	fba2 2303 	umull	r2, r3, r2, r3
 8010cee:	089b      	lsrs	r3, r3, #2
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	e000      	b.n	8010cf6 <dir_register+0xda>
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010cf8:	6a39      	ldr	r1, [r7, #32]
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7ff fcc0 	bl	8010680 <dir_alloc>
 8010d00:	4603      	mov	r3, r0
 8010d02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010d06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d148      	bne.n	8010da0 <dir_register+0x184>
 8010d0e:	6a3b      	ldr	r3, [r7, #32]
 8010d10:	3b01      	subs	r3, #1
 8010d12:	623b      	str	r3, [r7, #32]
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d042      	beq.n	8010da0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	695a      	ldr	r2, [r3, #20]
 8010d1e:	6a3b      	ldr	r3, [r7, #32]
 8010d20:	015b      	lsls	r3, r3, #5
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	4619      	mov	r1, r3
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f7ff fb4b 	bl	80103c2 <dir_sdi>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010d32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d132      	bne.n	8010da0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	3324      	adds	r3, #36	@ 0x24
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7ff fe8a 	bl	8010a58 <sum_sfn>
 8010d44:	4603      	mov	r3, r0
 8010d46:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	69db      	ldr	r3, [r3, #28]
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	69f8      	ldr	r0, [r7, #28]
 8010d50:	f7fe ff58 	bl	800fc04 <move_window>
 8010d54:	4603      	mov	r3, r0
 8010d56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8010d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d11d      	bne.n	8010d9e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	6918      	ldr	r0, [r3, #16]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6a19      	ldr	r1, [r3, #32]
 8010d6a:	6a3b      	ldr	r3, [r7, #32]
 8010d6c:	b2da      	uxtb	r2, r3
 8010d6e:	7efb      	ldrb	r3, [r7, #27]
 8010d70:	f7ff fd7c 	bl	801086c <put_lfn>
				fs->wflag = 1;
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	2201      	movs	r2, #1
 8010d78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7ff fba9 	bl	80104d4 <dir_next>
 8010d82:	4603      	mov	r3, r0
 8010d84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010d88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d107      	bne.n	8010da0 <dir_register+0x184>
 8010d90:	6a3b      	ldr	r3, [r7, #32]
 8010d92:	3b01      	subs	r3, #1
 8010d94:	623b      	str	r3, [r7, #32]
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d1d5      	bne.n	8010d48 <dir_register+0x12c>
 8010d9c:	e000      	b.n	8010da0 <dir_register+0x184>
				if (res != FR_OK) break;
 8010d9e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010da0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d128      	bne.n	8010dfa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	69db      	ldr	r3, [r3, #28]
 8010dac:	4619      	mov	r1, r3
 8010dae:	69f8      	ldr	r0, [r7, #28]
 8010db0:	f7fe ff28 	bl	800fc04 <move_window>
 8010db4:	4603      	mov	r3, r0
 8010db6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010dba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d11b      	bne.n	8010dfa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6a1b      	ldr	r3, [r3, #32]
 8010dc6:	2220      	movs	r2, #32
 8010dc8:	2100      	movs	r1, #0
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fe fd0d 	bl	800f7ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6a18      	ldr	r0, [r3, #32]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	3324      	adds	r3, #36	@ 0x24
 8010dd8:	220b      	movs	r2, #11
 8010dda:	4619      	mov	r1, r3
 8010ddc:	f7fe fce4 	bl	800f7a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6a1b      	ldr	r3, [r3, #32]
 8010dea:	330c      	adds	r3, #12
 8010dec:	f002 0218 	and.w	r2, r2, #24
 8010df0:	b2d2      	uxtb	r2, r2
 8010df2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010df4:	69fb      	ldr	r3, [r7, #28]
 8010df6:	2201      	movs	r2, #1
 8010df8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3730      	adds	r7, #48	@ 0x30
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	4ec4ec4f 	.word	0x4ec4ec4f

08010e0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b08a      	sub	sp, #40	@ 0x28
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	613b      	str	r3, [r7, #16]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	691b      	ldr	r3, [r3, #16]
 8010e22:	60fb      	str	r3, [r7, #12]
 8010e24:	2300      	movs	r3, #0
 8010e26:	617b      	str	r3, [r7, #20]
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	61ba      	str	r2, [r7, #24]
 8010e32:	693a      	ldr	r2, [r7, #16]
 8010e34:	4413      	add	r3, r2
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010e3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e3c:	2b1f      	cmp	r3, #31
 8010e3e:	d940      	bls.n	8010ec2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010e40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e42:	2b2f      	cmp	r3, #47	@ 0x2f
 8010e44:	d006      	beq.n	8010e54 <create_name+0x48>
 8010e46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e48:	2b5c      	cmp	r3, #92	@ 0x5c
 8010e4a:	d110      	bne.n	8010e6e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010e4c:	e002      	b.n	8010e54 <create_name+0x48>
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	3301      	adds	r3, #1
 8010e52:	61bb      	str	r3, [r7, #24]
 8010e54:	693a      	ldr	r2, [r7, #16]
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	4413      	add	r3, r2
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8010e5e:	d0f6      	beq.n	8010e4e <create_name+0x42>
 8010e60:	693a      	ldr	r2, [r7, #16]
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	4413      	add	r3, r2
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	2b5c      	cmp	r3, #92	@ 0x5c
 8010e6a:	d0f0      	beq.n	8010e4e <create_name+0x42>
			break;
 8010e6c:	e02a      	b.n	8010ec4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	2bfe      	cmp	r3, #254	@ 0xfe
 8010e72:	d901      	bls.n	8010e78 <create_name+0x6c>
 8010e74:	2306      	movs	r3, #6
 8010e76:	e1ca      	b.n	801120e <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010e78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010e7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e80:	2101      	movs	r1, #1
 8010e82:	4618      	mov	r0, r3
 8010e84:	f001 ff16 	bl	8012cb4 <ff_convert>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010e8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d101      	bne.n	8010e96 <create_name+0x8a>
 8010e92:	2306      	movs	r3, #6
 8010e94:	e1bb      	b.n	801120e <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010e96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e98:	2b7f      	cmp	r3, #127	@ 0x7f
 8010e9a:	d809      	bhi.n	8010eb0 <create_name+0xa4>
 8010e9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	489e      	ldr	r0, [pc, #632]	@ (801111c <create_name+0x310>)
 8010ea2:	f7fe fce4 	bl	800f86e <chk_chr>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d001      	beq.n	8010eb0 <create_name+0xa4>
 8010eac:	2306      	movs	r3, #6
 8010eae:	e1ae      	b.n	801120e <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	1c5a      	adds	r2, r3, #1
 8010eb4:	617a      	str	r2, [r7, #20]
 8010eb6:	005b      	lsls	r3, r3, #1
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	4413      	add	r3, r2
 8010ebc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010ebe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010ec0:	e7b4      	b.n	8010e2c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010ec2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010ec4:	693a      	ldr	r2, [r7, #16]
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	441a      	add	r2, r3
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010ece:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ed0:	2b1f      	cmp	r3, #31
 8010ed2:	d801      	bhi.n	8010ed8 <create_name+0xcc>
 8010ed4:	2304      	movs	r3, #4
 8010ed6:	e000      	b.n	8010eda <create_name+0xce>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d109      	bne.n	8010ef8 <create_name+0xec>
 8010ee4:	697a      	ldr	r2, [r7, #20]
 8010ee6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010eea:	4413      	add	r3, r2
 8010eec:	005b      	lsls	r3, r3, #1
 8010eee:	68fa      	ldr	r2, [r7, #12]
 8010ef0:	4413      	add	r3, r2
 8010ef2:	881b      	ldrh	r3, [r3, #0]
 8010ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ef6:	d015      	beq.n	8010f24 <create_name+0x118>
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	2b02      	cmp	r3, #2
 8010efc:	d14d      	bne.n	8010f9a <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8010efe:	697a      	ldr	r2, [r7, #20]
 8010f00:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010f04:	4413      	add	r3, r2
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	4413      	add	r3, r2
 8010f0c:	881b      	ldrh	r3, [r3, #0]
 8010f0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f10:	d143      	bne.n	8010f9a <create_name+0x18e>
 8010f12:	697a      	ldr	r2, [r7, #20]
 8010f14:	4b82      	ldr	r3, [pc, #520]	@ (8011120 <create_name+0x314>)
 8010f16:	4413      	add	r3, r2
 8010f18:	005b      	lsls	r3, r3, #1
 8010f1a:	68fa      	ldr	r2, [r7, #12]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	881b      	ldrh	r3, [r3, #0]
 8010f20:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f22:	d13a      	bne.n	8010f9a <create_name+0x18e>
		lfn[di] = 0;
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	005b      	lsls	r3, r3, #1
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010f30:	2300      	movs	r3, #0
 8010f32:	623b      	str	r3, [r7, #32]
 8010f34:	e00f      	b.n	8010f56 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8010f36:	6a3a      	ldr	r2, [r7, #32]
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d201      	bcs.n	8010f42 <create_name+0x136>
 8010f3e:	212e      	movs	r1, #46	@ 0x2e
 8010f40:	e000      	b.n	8010f44 <create_name+0x138>
 8010f42:	2120      	movs	r1, #32
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	6a3b      	ldr	r3, [r7, #32]
 8010f48:	4413      	add	r3, r2
 8010f4a:	3324      	adds	r3, #36	@ 0x24
 8010f4c:	460a      	mov	r2, r1
 8010f4e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010f50:	6a3b      	ldr	r3, [r7, #32]
 8010f52:	3301      	adds	r3, #1
 8010f54:	623b      	str	r3, [r7, #32]
 8010f56:	6a3b      	ldr	r3, [r7, #32]
 8010f58:	2b0a      	cmp	r3, #10
 8010f5a:	d9ec      	bls.n	8010f36 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8010f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f60:	f043 0320 	orr.w	r3, r3, #32
 8010f64:	b2d9      	uxtb	r1, r3
 8010f66:	687a      	ldr	r2, [r7, #4]
 8010f68:	6a3b      	ldr	r3, [r7, #32]
 8010f6a:	4413      	add	r3, r2
 8010f6c:	3324      	adds	r3, #36	@ 0x24
 8010f6e:	460a      	mov	r2, r1
 8010f70:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	e14b      	b.n	801120e <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8010f76:	697a      	ldr	r2, [r7, #20]
 8010f78:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010f7c:	4413      	add	r3, r2
 8010f7e:	005b      	lsls	r3, r3, #1
 8010f80:	68fa      	ldr	r2, [r7, #12]
 8010f82:	4413      	add	r3, r2
 8010f84:	881b      	ldrh	r3, [r3, #0]
 8010f86:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010f88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f8a:	2b20      	cmp	r3, #32
 8010f8c:	d002      	beq.n	8010f94 <create_name+0x188>
 8010f8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f92:	d106      	bne.n	8010fa2 <create_name+0x196>
		di--;
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	3b01      	subs	r3, #1
 8010f98:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d1ea      	bne.n	8010f76 <create_name+0x16a>
 8010fa0:	e000      	b.n	8010fa4 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8010fa2:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	005b      	lsls	r3, r3, #1
 8010fa8:	68fa      	ldr	r2, [r7, #12]
 8010faa:	4413      	add	r3, r2
 8010fac:	2200      	movs	r2, #0
 8010fae:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d101      	bne.n	8010fba <create_name+0x1ae>
 8010fb6:	2306      	movs	r3, #6
 8010fb8:	e129      	b.n	801120e <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	3324      	adds	r3, #36	@ 0x24
 8010fbe:	220b      	movs	r2, #11
 8010fc0:	2120      	movs	r1, #32
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe fc11 	bl	800f7ea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010fc8:	2300      	movs	r3, #0
 8010fca:	61bb      	str	r3, [r7, #24]
 8010fcc:	e002      	b.n	8010fd4 <create_name+0x1c8>
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	61bb      	str	r3, [r7, #24]
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	005b      	lsls	r3, r3, #1
 8010fd8:	68fa      	ldr	r2, [r7, #12]
 8010fda:	4413      	add	r3, r2
 8010fdc:	881b      	ldrh	r3, [r3, #0]
 8010fde:	2b20      	cmp	r3, #32
 8010fe0:	d0f5      	beq.n	8010fce <create_name+0x1c2>
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	005b      	lsls	r3, r3, #1
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	4413      	add	r3, r2
 8010fea:	881b      	ldrh	r3, [r3, #0]
 8010fec:	2b2e      	cmp	r3, #46	@ 0x2e
 8010fee:	d0ee      	beq.n	8010fce <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d009      	beq.n	801100a <create_name+0x1fe>
 8010ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ffa:	f043 0303 	orr.w	r3, r3, #3
 8010ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011002:	e002      	b.n	801100a <create_name+0x1fe>
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	3b01      	subs	r3, #1
 8011008:	617b      	str	r3, [r7, #20]
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d009      	beq.n	8011024 <create_name+0x218>
 8011010:	697a      	ldr	r2, [r7, #20]
 8011012:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011016:	4413      	add	r3, r2
 8011018:	005b      	lsls	r3, r3, #1
 801101a:	68fa      	ldr	r2, [r7, #12]
 801101c:	4413      	add	r3, r2
 801101e:	881b      	ldrh	r3, [r3, #0]
 8011020:	2b2e      	cmp	r3, #46	@ 0x2e
 8011022:	d1ef      	bne.n	8011004 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8011024:	2300      	movs	r3, #0
 8011026:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801102a:	2300      	movs	r3, #0
 801102c:	623b      	str	r3, [r7, #32]
 801102e:	2308      	movs	r3, #8
 8011030:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	1c5a      	adds	r2, r3, #1
 8011036:	61ba      	str	r2, [r7, #24]
 8011038:	005b      	lsls	r3, r3, #1
 801103a:	68fa      	ldr	r2, [r7, #12]
 801103c:	4413      	add	r3, r2
 801103e:	881b      	ldrh	r3, [r3, #0]
 8011040:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011044:	2b00      	cmp	r3, #0
 8011046:	f000 8098 	beq.w	801117a <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801104a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801104c:	2b20      	cmp	r3, #32
 801104e:	d006      	beq.n	801105e <create_name+0x252>
 8011050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011052:	2b2e      	cmp	r3, #46	@ 0x2e
 8011054:	d10a      	bne.n	801106c <create_name+0x260>
 8011056:	69ba      	ldr	r2, [r7, #24]
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	429a      	cmp	r2, r3
 801105c:	d006      	beq.n	801106c <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 801105e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011062:	f043 0303 	orr.w	r3, r3, #3
 8011066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801106a:	e085      	b.n	8011178 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801106c:	6a3a      	ldr	r2, [r7, #32]
 801106e:	69fb      	ldr	r3, [r7, #28]
 8011070:	429a      	cmp	r2, r3
 8011072:	d203      	bcs.n	801107c <create_name+0x270>
 8011074:	69ba      	ldr	r2, [r7, #24]
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	429a      	cmp	r2, r3
 801107a:	d123      	bne.n	80110c4 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	2b0b      	cmp	r3, #11
 8011080:	d106      	bne.n	8011090 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8011082:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011086:	f043 0303 	orr.w	r3, r3, #3
 801108a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801108e:	e077      	b.n	8011180 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011090:	69ba      	ldr	r2, [r7, #24]
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	429a      	cmp	r2, r3
 8011096:	d005      	beq.n	80110a4 <create_name+0x298>
 8011098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801109c:	f043 0303 	orr.w	r3, r3, #3
 80110a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80110a4:	69ba      	ldr	r2, [r7, #24]
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d868      	bhi.n	801117e <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	61bb      	str	r3, [r7, #24]
 80110b0:	2308      	movs	r3, #8
 80110b2:	623b      	str	r3, [r7, #32]
 80110b4:	230b      	movs	r3, #11
 80110b6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80110b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80110c2:	e059      	b.n	8011178 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80110c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80110c8:	d914      	bls.n	80110f4 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80110ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110cc:	2100      	movs	r1, #0
 80110ce:	4618      	mov	r0, r3
 80110d0:	f001 fdf0 	bl	8012cb4 <ff_convert>
 80110d4:	4603      	mov	r3, r0
 80110d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80110d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d004      	beq.n	80110e8 <create_name+0x2dc>
 80110de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110e0:	3b80      	subs	r3, #128	@ 0x80
 80110e2:	4a10      	ldr	r2, [pc, #64]	@ (8011124 <create_name+0x318>)
 80110e4:	5cd3      	ldrb	r3, [r2, r3]
 80110e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80110e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110ec:	f043 0302 	orr.w	r3, r3, #2
 80110f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80110f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d007      	beq.n	801110a <create_name+0x2fe>
 80110fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110fc:	4619      	mov	r1, r3
 80110fe:	480a      	ldr	r0, [pc, #40]	@ (8011128 <create_name+0x31c>)
 8011100:	f7fe fbb5 	bl	800f86e <chk_chr>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d010      	beq.n	801112c <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801110a:	235f      	movs	r3, #95	@ 0x5f
 801110c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801110e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011112:	f043 0303 	orr.w	r3, r3, #3
 8011116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801111a:	e023      	b.n	8011164 <create_name+0x358>
 801111c:	080131c8 	.word	0x080131c8
 8011120:	7ffffffe 	.word	0x7ffffffe
 8011124:	08013250 	.word	0x08013250
 8011128:	080131d4 	.word	0x080131d4
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801112c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801112e:	2b40      	cmp	r3, #64	@ 0x40
 8011130:	d909      	bls.n	8011146 <create_name+0x33a>
 8011132:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011134:	2b5a      	cmp	r3, #90	@ 0x5a
 8011136:	d806      	bhi.n	8011146 <create_name+0x33a>
					b |= 2;
 8011138:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801113c:	f043 0302 	orr.w	r3, r3, #2
 8011140:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011144:	e00e      	b.n	8011164 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011146:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011148:	2b60      	cmp	r3, #96	@ 0x60
 801114a:	d90b      	bls.n	8011164 <create_name+0x358>
 801114c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801114e:	2b7a      	cmp	r3, #122	@ 0x7a
 8011150:	d808      	bhi.n	8011164 <create_name+0x358>
						b |= 1; w -= 0x20;
 8011152:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011156:	f043 0301 	orr.w	r3, r3, #1
 801115a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801115e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011160:	3b20      	subs	r3, #32
 8011162:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	1c5a      	adds	r2, r3, #1
 8011168:	623a      	str	r2, [r7, #32]
 801116a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801116c:	b2d1      	uxtb	r1, r2
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	4413      	add	r3, r2
 8011172:	460a      	mov	r2, r1
 8011174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011178:	e75b      	b.n	8011032 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 801117a:	bf00      	nop
 801117c:	e000      	b.n	8011180 <create_name+0x374>
			if (si > di) break;			/* No extension */
 801117e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011186:	2be5      	cmp	r3, #229	@ 0xe5
 8011188:	d103      	bne.n	8011192 <create_name+0x386>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2205      	movs	r2, #5
 801118e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8011192:	69fb      	ldr	r3, [r7, #28]
 8011194:	2b08      	cmp	r3, #8
 8011196:	d104      	bne.n	80111a2 <create_name+0x396>
 8011198:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80111a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80111a6:	f003 030c 	and.w	r3, r3, #12
 80111aa:	2b0c      	cmp	r3, #12
 80111ac:	d005      	beq.n	80111ba <create_name+0x3ae>
 80111ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80111b2:	f003 0303 	and.w	r3, r3, #3
 80111b6:	2b03      	cmp	r3, #3
 80111b8:	d105      	bne.n	80111c6 <create_name+0x3ba>
 80111ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111be:	f043 0302 	orr.w	r3, r3, #2
 80111c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80111c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111ca:	f003 0302 	and.w	r3, r3, #2
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d117      	bne.n	8011202 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80111d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80111d6:	f003 0303 	and.w	r3, r3, #3
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d105      	bne.n	80111ea <create_name+0x3de>
 80111de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111e2:	f043 0310 	orr.w	r3, r3, #16
 80111e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80111ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80111ee:	f003 030c 	and.w	r3, r3, #12
 80111f2:	2b04      	cmp	r3, #4
 80111f4:	d105      	bne.n	8011202 <create_name+0x3f6>
 80111f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111fa:	f043 0308 	orr.w	r3, r3, #8
 80111fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011208:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801120c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801120e:	4618      	mov	r0, r3
 8011210:	3728      	adds	r7, #40	@ 0x28
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop

08011218 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	2b2f      	cmp	r3, #47	@ 0x2f
 8011232:	d00b      	beq.n	801124c <follow_path+0x34>
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	2b5c      	cmp	r3, #92	@ 0x5c
 801123a:	d007      	beq.n	801124c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	69da      	ldr	r2, [r3, #28]
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	609a      	str	r2, [r3, #8]
 8011244:	e00d      	b.n	8011262 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	3301      	adds	r3, #1
 801124a:	603b      	str	r3, [r7, #0]
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	2b2f      	cmp	r3, #47	@ 0x2f
 8011252:	d0f8      	beq.n	8011246 <follow_path+0x2e>
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	2b5c      	cmp	r3, #92	@ 0x5c
 801125a:	d0f4      	beq.n	8011246 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	2200      	movs	r2, #0
 8011260:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	2b1f      	cmp	r3, #31
 8011268:	d80a      	bhi.n	8011280 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2280      	movs	r2, #128	@ 0x80
 801126e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011272:	2100      	movs	r1, #0
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7ff f8a4 	bl	80103c2 <dir_sdi>
 801127a:	4603      	mov	r3, r0
 801127c:	75fb      	strb	r3, [r7, #23]
 801127e:	e05b      	b.n	8011338 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011280:	463b      	mov	r3, r7
 8011282:	4619      	mov	r1, r3
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7ff fdc1 	bl	8010e0c <create_name>
 801128a:	4603      	mov	r3, r0
 801128c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801128e:	7dfb      	ldrb	r3, [r7, #23]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d14c      	bne.n	801132e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f7ff fc00 	bl	8010a9a <dir_find>
 801129a:	4603      	mov	r3, r0
 801129c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80112a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80112a6:	7dfb      	ldrb	r3, [r7, #23]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d01b      	beq.n	80112e4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80112ac:	7dfb      	ldrb	r3, [r7, #23]
 80112ae:	2b04      	cmp	r3, #4
 80112b0:	d13f      	bne.n	8011332 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80112b2:	7afb      	ldrb	r3, [r7, #11]
 80112b4:	f003 0320 	and.w	r3, r3, #32
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d00b      	beq.n	80112d4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80112bc:	7afb      	ldrb	r3, [r7, #11]
 80112be:	f003 0304 	and.w	r3, r3, #4
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d031      	beq.n	801132a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2280      	movs	r2, #128	@ 0x80
 80112ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80112d2:	e02e      	b.n	8011332 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80112d4:	7afb      	ldrb	r3, [r7, #11]
 80112d6:	f003 0304 	and.w	r3, r3, #4
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d129      	bne.n	8011332 <follow_path+0x11a>
 80112de:	2305      	movs	r3, #5
 80112e0:	75fb      	strb	r3, [r7, #23]
				break;
 80112e2:	e026      	b.n	8011332 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80112e4:	7afb      	ldrb	r3, [r7, #11]
 80112e6:	f003 0304 	and.w	r3, r3, #4
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d123      	bne.n	8011336 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	799b      	ldrb	r3, [r3, #6]
 80112f2:	f003 0310 	and.w	r3, r3, #16
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d102      	bne.n	8011300 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80112fa:	2305      	movs	r3, #5
 80112fc:	75fb      	strb	r3, [r7, #23]
 80112fe:	e01b      	b.n	8011338 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	695b      	ldr	r3, [r3, #20]
 801130a:	68fa      	ldr	r2, [r7, #12]
 801130c:	8992      	ldrh	r2, [r2, #12]
 801130e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011312:	fb00 f202 	mul.w	r2, r0, r2
 8011316:	1a9b      	subs	r3, r3, r2
 8011318:	440b      	add	r3, r1
 801131a:	4619      	mov	r1, r3
 801131c:	68f8      	ldr	r0, [r7, #12]
 801131e:	f7ff f9f6 	bl	801070e <ld_clust>
 8011322:	4602      	mov	r2, r0
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	609a      	str	r2, [r3, #8]
 8011328:	e7aa      	b.n	8011280 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801132a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801132c:	e7a8      	b.n	8011280 <follow_path+0x68>
			if (res != FR_OK) break;
 801132e:	bf00      	nop
 8011330:	e002      	b.n	8011338 <follow_path+0x120>
				break;
 8011332:	bf00      	nop
 8011334:	e000      	b.n	8011338 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011336:	bf00      	nop
			}
		}
	}

	return res;
 8011338:	7dfb      	ldrb	r3, [r7, #23]
}
 801133a:	4618      	mov	r0, r3
 801133c:	3718      	adds	r7, #24
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}

08011342 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011342:	b480      	push	{r7}
 8011344:	b087      	sub	sp, #28
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801134a:	f04f 33ff 	mov.w	r3, #4294967295
 801134e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d031      	beq.n	80113bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	617b      	str	r3, [r7, #20]
 801135e:	e002      	b.n	8011366 <get_ldnumber+0x24>
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	3301      	adds	r3, #1
 8011364:	617b      	str	r3, [r7, #20]
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	2b1f      	cmp	r3, #31
 801136c:	d903      	bls.n	8011376 <get_ldnumber+0x34>
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	2b3a      	cmp	r3, #58	@ 0x3a
 8011374:	d1f4      	bne.n	8011360 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	2b3a      	cmp	r3, #58	@ 0x3a
 801137c:	d11c      	bne.n	80113b8 <get_ldnumber+0x76>
			tp = *path;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	1c5a      	adds	r2, r3, #1
 8011388:	60fa      	str	r2, [r7, #12]
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	3b30      	subs	r3, #48	@ 0x30
 801138e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	2b09      	cmp	r3, #9
 8011394:	d80e      	bhi.n	80113b4 <get_ldnumber+0x72>
 8011396:	68fa      	ldr	r2, [r7, #12]
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	429a      	cmp	r2, r3
 801139c:	d10a      	bne.n	80113b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d107      	bne.n	80113b4 <get_ldnumber+0x72>
					vol = (int)i;
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	3301      	adds	r3, #1
 80113ac:	617b      	str	r3, [r7, #20]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	697a      	ldr	r2, [r7, #20]
 80113b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	e002      	b.n	80113be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80113b8:	2300      	movs	r3, #0
 80113ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80113bc:	693b      	ldr	r3, [r7, #16]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	371c      	adds	r7, #28
 80113c2:	46bd      	mov	sp, r7
 80113c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c8:	4770      	bx	lr
	...

080113cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2200      	movs	r2, #0
 80113da:	70da      	strb	r2, [r3, #3]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f04f 32ff 	mov.w	r2, #4294967295
 80113e2:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80113e4:	6839      	ldr	r1, [r7, #0]
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f7fe fc0c 	bl	800fc04 <move_window>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d001      	beq.n	80113f6 <check_fs+0x2a>
 80113f2:	2304      	movs	r3, #4
 80113f4:	e038      	b.n	8011468 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	333c      	adds	r3, #60	@ 0x3c
 80113fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80113fe:	4618      	mov	r0, r3
 8011400:	f7fe f950 	bl	800f6a4 <ld_word>
 8011404:	4603      	mov	r3, r0
 8011406:	461a      	mov	r2, r3
 8011408:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801140c:	429a      	cmp	r2, r3
 801140e:	d001      	beq.n	8011414 <check_fs+0x48>
 8011410:	2303      	movs	r3, #3
 8011412:	e029      	b.n	8011468 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801141a:	2be9      	cmp	r3, #233	@ 0xe9
 801141c:	d009      	beq.n	8011432 <check_fs+0x66>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011424:	2beb      	cmp	r3, #235	@ 0xeb
 8011426:	d11e      	bne.n	8011466 <check_fs+0x9a>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801142e:	2b90      	cmp	r3, #144	@ 0x90
 8011430:	d119      	bne.n	8011466 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	333c      	adds	r3, #60	@ 0x3c
 8011436:	3336      	adds	r3, #54	@ 0x36
 8011438:	4618      	mov	r0, r3
 801143a:	f7fe f94b 	bl	800f6d4 <ld_dword>
 801143e:	4603      	mov	r3, r0
 8011440:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011444:	4a0a      	ldr	r2, [pc, #40]	@ (8011470 <check_fs+0xa4>)
 8011446:	4293      	cmp	r3, r2
 8011448:	d101      	bne.n	801144e <check_fs+0x82>
 801144a:	2300      	movs	r3, #0
 801144c:	e00c      	b.n	8011468 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	333c      	adds	r3, #60	@ 0x3c
 8011452:	3352      	adds	r3, #82	@ 0x52
 8011454:	4618      	mov	r0, r3
 8011456:	f7fe f93d 	bl	800f6d4 <ld_dword>
 801145a:	4603      	mov	r3, r0
 801145c:	4a05      	ldr	r2, [pc, #20]	@ (8011474 <check_fs+0xa8>)
 801145e:	4293      	cmp	r3, r2
 8011460:	d101      	bne.n	8011466 <check_fs+0x9a>
 8011462:	2300      	movs	r3, #0
 8011464:	e000      	b.n	8011468 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011466:	2302      	movs	r3, #2
}
 8011468:	4618      	mov	r0, r3
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}
 8011470:	00544146 	.word	0x00544146
 8011474:	33544146 	.word	0x33544146

08011478 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b096      	sub	sp, #88	@ 0x58
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	60b9      	str	r1, [r7, #8]
 8011482:	4613      	mov	r3, r2
 8011484:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	2200      	movs	r2, #0
 801148a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f7ff ff58 	bl	8011342 <get_ldnumber>
 8011492:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011496:	2b00      	cmp	r3, #0
 8011498:	da01      	bge.n	801149e <find_volume+0x26>
 801149a:	230b      	movs	r3, #11
 801149c:	e268      	b.n	8011970 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801149e:	4a9f      	ldr	r2, [pc, #636]	@ (801171c <find_volume+0x2a4>)
 80114a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80114a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d101      	bne.n	80114b2 <find_volume+0x3a>
 80114ae:	230c      	movs	r3, #12
 80114b0:	e25e      	b.n	8011970 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80114b8:	79fb      	ldrb	r3, [r7, #7]
 80114ba:	f023 0301 	bic.w	r3, r3, #1
 80114be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80114c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d01a      	beq.n	80114fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80114c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ca:	785b      	ldrb	r3, [r3, #1]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fe f849 	bl	800f564 <disk_status>
 80114d2:	4603      	mov	r3, r0
 80114d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80114d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80114dc:	f003 0301 	and.w	r3, r3, #1
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d10c      	bne.n	80114fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80114e4:	79fb      	ldrb	r3, [r7, #7]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d007      	beq.n	80114fa <find_volume+0x82>
 80114ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80114ee:	f003 0304 	and.w	r3, r3, #4
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d001      	beq.n	80114fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80114f6:	230a      	movs	r3, #10
 80114f8:	e23a      	b.n	8011970 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80114fa:	2300      	movs	r3, #0
 80114fc:	e238      	b.n	8011970 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80114fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011500:	2200      	movs	r2, #0
 8011502:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011506:	b2da      	uxtb	r2, r3
 8011508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801150a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801150c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801150e:	785b      	ldrb	r3, [r3, #1]
 8011510:	4618      	mov	r0, r3
 8011512:	f7fe f841 	bl	800f598 <disk_initialize>
 8011516:	4603      	mov	r3, r0
 8011518:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801151c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011520:	f003 0301 	and.w	r3, r3, #1
 8011524:	2b00      	cmp	r3, #0
 8011526:	d001      	beq.n	801152c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011528:	2303      	movs	r3, #3
 801152a:	e221      	b.n	8011970 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801152c:	79fb      	ldrb	r3, [r7, #7]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d007      	beq.n	8011542 <find_volume+0xca>
 8011532:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011536:	f003 0304 	and.w	r3, r3, #4
 801153a:	2b00      	cmp	r3, #0
 801153c:	d001      	beq.n	8011542 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801153e:	230a      	movs	r3, #10
 8011540:	e216      	b.n	8011970 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011544:	7858      	ldrb	r0, [r3, #1]
 8011546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011548:	330c      	adds	r3, #12
 801154a:	461a      	mov	r2, r3
 801154c:	2102      	movs	r1, #2
 801154e:	f7fe f88b 	bl	800f668 <disk_ioctl>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d001      	beq.n	801155c <find_volume+0xe4>
 8011558:	2301      	movs	r3, #1
 801155a:	e209      	b.n	8011970 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801155c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801155e:	899b      	ldrh	r3, [r3, #12]
 8011560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011564:	d80d      	bhi.n	8011582 <find_volume+0x10a>
 8011566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011568:	899b      	ldrh	r3, [r3, #12]
 801156a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801156e:	d308      	bcc.n	8011582 <find_volume+0x10a>
 8011570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011572:	899b      	ldrh	r3, [r3, #12]
 8011574:	461a      	mov	r2, r3
 8011576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011578:	899b      	ldrh	r3, [r3, #12]
 801157a:	3b01      	subs	r3, #1
 801157c:	4013      	ands	r3, r2
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <find_volume+0x10e>
 8011582:	2301      	movs	r3, #1
 8011584:	e1f4      	b.n	8011970 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011586:	2300      	movs	r3, #0
 8011588:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801158a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801158c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801158e:	f7ff ff1d 	bl	80113cc <check_fs>
 8011592:	4603      	mov	r3, r0
 8011594:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011598:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801159c:	2b02      	cmp	r3, #2
 801159e:	d149      	bne.n	8011634 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80115a0:	2300      	movs	r3, #0
 80115a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80115a4:	e01e      	b.n	80115e4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80115a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115a8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80115ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115ae:	011b      	lsls	r3, r3, #4
 80115b0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80115b4:	4413      	add	r3, r2
 80115b6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80115b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115ba:	3304      	adds	r3, #4
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d006      	beq.n	80115d0 <find_volume+0x158>
 80115c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c4:	3308      	adds	r3, #8
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fe f884 	bl	800f6d4 <ld_dword>
 80115cc:	4602      	mov	r2, r0
 80115ce:	e000      	b.n	80115d2 <find_volume+0x15a>
 80115d0:	2200      	movs	r2, #0
 80115d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	3358      	adds	r3, #88	@ 0x58
 80115d8:	443b      	add	r3, r7
 80115da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80115de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115e0:	3301      	adds	r3, #1
 80115e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80115e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115e6:	2b03      	cmp	r3, #3
 80115e8:	d9dd      	bls.n	80115a6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80115ea:	2300      	movs	r3, #0
 80115ec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80115ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d002      	beq.n	80115fa <find_volume+0x182>
 80115f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115f6:	3b01      	subs	r3, #1
 80115f8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80115fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115fc:	009b      	lsls	r3, r3, #2
 80115fe:	3358      	adds	r3, #88	@ 0x58
 8011600:	443b      	add	r3, r7
 8011602:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011606:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801160a:	2b00      	cmp	r3, #0
 801160c:	d005      	beq.n	801161a <find_volume+0x1a2>
 801160e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011610:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011612:	f7ff fedb 	bl	80113cc <check_fs>
 8011616:	4603      	mov	r3, r0
 8011618:	e000      	b.n	801161c <find_volume+0x1a4>
 801161a:	2303      	movs	r3, #3
 801161c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011620:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011624:	2b01      	cmp	r3, #1
 8011626:	d905      	bls.n	8011634 <find_volume+0x1bc>
 8011628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801162a:	3301      	adds	r3, #1
 801162c:	643b      	str	r3, [r7, #64]	@ 0x40
 801162e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011630:	2b03      	cmp	r3, #3
 8011632:	d9e2      	bls.n	80115fa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011634:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011638:	2b04      	cmp	r3, #4
 801163a:	d101      	bne.n	8011640 <find_volume+0x1c8>
 801163c:	2301      	movs	r3, #1
 801163e:	e197      	b.n	8011970 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011640:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011644:	2b01      	cmp	r3, #1
 8011646:	d901      	bls.n	801164c <find_volume+0x1d4>
 8011648:	230d      	movs	r3, #13
 801164a:	e191      	b.n	8011970 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801164c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164e:	333c      	adds	r3, #60	@ 0x3c
 8011650:	330b      	adds	r3, #11
 8011652:	4618      	mov	r0, r3
 8011654:	f7fe f826 	bl	800f6a4 <ld_word>
 8011658:	4603      	mov	r3, r0
 801165a:	461a      	mov	r2, r3
 801165c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801165e:	899b      	ldrh	r3, [r3, #12]
 8011660:	429a      	cmp	r2, r3
 8011662:	d001      	beq.n	8011668 <find_volume+0x1f0>
 8011664:	230d      	movs	r3, #13
 8011666:	e183      	b.n	8011970 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801166a:	333c      	adds	r3, #60	@ 0x3c
 801166c:	3316      	adds	r3, #22
 801166e:	4618      	mov	r0, r3
 8011670:	f7fe f818 	bl	800f6a4 <ld_word>
 8011674:	4603      	mov	r3, r0
 8011676:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801167a:	2b00      	cmp	r3, #0
 801167c:	d106      	bne.n	801168c <find_volume+0x214>
 801167e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011680:	333c      	adds	r3, #60	@ 0x3c
 8011682:	3324      	adds	r3, #36	@ 0x24
 8011684:	4618      	mov	r0, r3
 8011686:	f7fe f825 	bl	800f6d4 <ld_dword>
 801168a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801168c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011690:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011694:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8011698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801169c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169e:	789b      	ldrb	r3, [r3, #2]
 80116a0:	2b01      	cmp	r3, #1
 80116a2:	d005      	beq.n	80116b0 <find_volume+0x238>
 80116a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a6:	789b      	ldrb	r3, [r3, #2]
 80116a8:	2b02      	cmp	r3, #2
 80116aa:	d001      	beq.n	80116b0 <find_volume+0x238>
 80116ac:	230d      	movs	r3, #13
 80116ae:	e15f      	b.n	8011970 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80116b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b2:	789b      	ldrb	r3, [r3, #2]
 80116b4:	461a      	mov	r2, r3
 80116b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116b8:	fb02 f303 	mul.w	r3, r2, r3
 80116bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80116be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80116c4:	461a      	mov	r2, r3
 80116c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80116ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116cc:	895b      	ldrh	r3, [r3, #10]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d008      	beq.n	80116e4 <find_volume+0x26c>
 80116d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d4:	895b      	ldrh	r3, [r3, #10]
 80116d6:	461a      	mov	r2, r3
 80116d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116da:	895b      	ldrh	r3, [r3, #10]
 80116dc:	3b01      	subs	r3, #1
 80116de:	4013      	ands	r3, r2
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d001      	beq.n	80116e8 <find_volume+0x270>
 80116e4:	230d      	movs	r3, #13
 80116e6:	e143      	b.n	8011970 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80116e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ea:	333c      	adds	r3, #60	@ 0x3c
 80116ec:	3311      	adds	r3, #17
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fd ffd8 	bl	800f6a4 <ld_word>
 80116f4:	4603      	mov	r3, r0
 80116f6:	461a      	mov	r2, r3
 80116f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80116fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116fe:	891b      	ldrh	r3, [r3, #8]
 8011700:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011702:	8992      	ldrh	r2, [r2, #12]
 8011704:	0952      	lsrs	r2, r2, #5
 8011706:	b292      	uxth	r2, r2
 8011708:	fbb3 f1f2 	udiv	r1, r3, r2
 801170c:	fb01 f202 	mul.w	r2, r1, r2
 8011710:	1a9b      	subs	r3, r3, r2
 8011712:	b29b      	uxth	r3, r3
 8011714:	2b00      	cmp	r3, #0
 8011716:	d003      	beq.n	8011720 <find_volume+0x2a8>
 8011718:	230d      	movs	r3, #13
 801171a:	e129      	b.n	8011970 <find_volume+0x4f8>
 801171c:	24002a88 	.word	0x24002a88

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011722:	333c      	adds	r3, #60	@ 0x3c
 8011724:	3313      	adds	r3, #19
 8011726:	4618      	mov	r0, r3
 8011728:	f7fd ffbc 	bl	800f6a4 <ld_word>
 801172c:	4603      	mov	r3, r0
 801172e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <find_volume+0x2cc>
 8011736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011738:	333c      	adds	r3, #60	@ 0x3c
 801173a:	3320      	adds	r3, #32
 801173c:	4618      	mov	r0, r3
 801173e:	f7fd ffc9 	bl	800f6d4 <ld_dword>
 8011742:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011746:	333c      	adds	r3, #60	@ 0x3c
 8011748:	330e      	adds	r3, #14
 801174a:	4618      	mov	r0, r3
 801174c:	f7fd ffaa 	bl	800f6a4 <ld_word>
 8011750:	4603      	mov	r3, r0
 8011752:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011754:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011756:	2b00      	cmp	r3, #0
 8011758:	d101      	bne.n	801175e <find_volume+0x2e6>
 801175a:	230d      	movs	r3, #13
 801175c:	e108      	b.n	8011970 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801175e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011762:	4413      	add	r3, r2
 8011764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011766:	8911      	ldrh	r1, [r2, #8]
 8011768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801176a:	8992      	ldrh	r2, [r2, #12]
 801176c:	0952      	lsrs	r2, r2, #5
 801176e:	b292      	uxth	r2, r2
 8011770:	fbb1 f2f2 	udiv	r2, r1, r2
 8011774:	b292      	uxth	r2, r2
 8011776:	4413      	add	r3, r2
 8011778:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801177a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801177c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801177e:	429a      	cmp	r2, r3
 8011780:	d201      	bcs.n	8011786 <find_volume+0x30e>
 8011782:	230d      	movs	r3, #13
 8011784:	e0f4      	b.n	8011970 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801178e:	8952      	ldrh	r2, [r2, #10]
 8011790:	fbb3 f3f2 	udiv	r3, r3, r2
 8011794:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011798:	2b00      	cmp	r3, #0
 801179a:	d101      	bne.n	80117a0 <find_volume+0x328>
 801179c:	230d      	movs	r3, #13
 801179e:	e0e7      	b.n	8011970 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80117a0:	2303      	movs	r3, #3
 80117a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80117a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d802      	bhi.n	80117b6 <find_volume+0x33e>
 80117b0:	2302      	movs	r3, #2
 80117b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80117b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80117bc:	4293      	cmp	r3, r2
 80117be:	d802      	bhi.n	80117c6 <find_volume+0x34e>
 80117c0:	2301      	movs	r3, #1
 80117c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80117c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c8:	1c9a      	adds	r2, r3, #2
 80117ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117cc:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80117ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80117d2:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80117d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80117d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117d8:	441a      	add	r2, r3
 80117da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117dc:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80117de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80117e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117e2:	441a      	add	r2, r3
 80117e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e6:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 80117e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80117ec:	2b03      	cmp	r3, #3
 80117ee:	d11e      	bne.n	801182e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80117f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117f2:	333c      	adds	r3, #60	@ 0x3c
 80117f4:	332a      	adds	r3, #42	@ 0x2a
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7fd ff54 	bl	800f6a4 <ld_word>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d001      	beq.n	8011806 <find_volume+0x38e>
 8011802:	230d      	movs	r3, #13
 8011804:	e0b4      	b.n	8011970 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011808:	891b      	ldrh	r3, [r3, #8]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d001      	beq.n	8011812 <find_volume+0x39a>
 801180e:	230d      	movs	r3, #13
 8011810:	e0ae      	b.n	8011970 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011814:	333c      	adds	r3, #60	@ 0x3c
 8011816:	332c      	adds	r3, #44	@ 0x2c
 8011818:	4618      	mov	r0, r3
 801181a:	f7fd ff5b 	bl	800f6d4 <ld_dword>
 801181e:	4602      	mov	r2, r0
 8011820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011822:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011826:	6a1b      	ldr	r3, [r3, #32]
 8011828:	009b      	lsls	r3, r3, #2
 801182a:	647b      	str	r3, [r7, #68]	@ 0x44
 801182c:	e01f      	b.n	801186e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801182e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011830:	891b      	ldrh	r3, [r3, #8]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <find_volume+0x3c2>
 8011836:	230d      	movs	r3, #13
 8011838:	e09a      	b.n	8011970 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801183a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801183c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801183e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011840:	441a      	add	r2, r3
 8011842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011844:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011846:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801184a:	2b02      	cmp	r3, #2
 801184c:	d103      	bne.n	8011856 <find_volume+0x3de>
 801184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011850:	6a1b      	ldr	r3, [r3, #32]
 8011852:	005b      	lsls	r3, r3, #1
 8011854:	e00a      	b.n	801186c <find_volume+0x3f4>
 8011856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011858:	6a1a      	ldr	r2, [r3, #32]
 801185a:	4613      	mov	r3, r2
 801185c:	005b      	lsls	r3, r3, #1
 801185e:	4413      	add	r3, r2
 8011860:	085a      	lsrs	r2, r3, #1
 8011862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011864:	6a1b      	ldr	r3, [r3, #32]
 8011866:	f003 0301 	and.w	r3, r3, #1
 801186a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801186c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801186e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011874:	899b      	ldrh	r3, [r3, #12]
 8011876:	4619      	mov	r1, r3
 8011878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801187a:	440b      	add	r3, r1
 801187c:	3b01      	subs	r3, #1
 801187e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011880:	8989      	ldrh	r1, [r1, #12]
 8011882:	fbb3 f3f1 	udiv	r3, r3, r1
 8011886:	429a      	cmp	r2, r3
 8011888:	d201      	bcs.n	801188e <find_volume+0x416>
 801188a:	230d      	movs	r3, #13
 801188c:	e070      	b.n	8011970 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011890:	f04f 32ff 	mov.w	r2, #4294967295
 8011894:	619a      	str	r2, [r3, #24]
 8011896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011898:	699a      	ldr	r2, [r3, #24]
 801189a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801189c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801189e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a0:	2280      	movs	r2, #128	@ 0x80
 80118a2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80118a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118a8:	2b03      	cmp	r3, #3
 80118aa:	d149      	bne.n	8011940 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80118ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ae:	333c      	adds	r3, #60	@ 0x3c
 80118b0:	3330      	adds	r3, #48	@ 0x30
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fd fef6 	bl	800f6a4 <ld_word>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d140      	bne.n	8011940 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80118be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118c0:	3301      	adds	r3, #1
 80118c2:	4619      	mov	r1, r3
 80118c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80118c6:	f7fe f99d 	bl	800fc04 <move_window>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d137      	bne.n	8011940 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80118d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d2:	2200      	movs	r2, #0
 80118d4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80118d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d8:	333c      	adds	r3, #60	@ 0x3c
 80118da:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fd fee0 	bl	800f6a4 <ld_word>
 80118e4:	4603      	mov	r3, r0
 80118e6:	461a      	mov	r2, r3
 80118e8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d127      	bne.n	8011940 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80118f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f2:	333c      	adds	r3, #60	@ 0x3c
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fd feed 	bl	800f6d4 <ld_dword>
 80118fa:	4603      	mov	r3, r0
 80118fc:	4a1e      	ldr	r2, [pc, #120]	@ (8011978 <find_volume+0x500>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	d11e      	bne.n	8011940 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011904:	333c      	adds	r3, #60	@ 0x3c
 8011906:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801190a:	4618      	mov	r0, r3
 801190c:	f7fd fee2 	bl	800f6d4 <ld_dword>
 8011910:	4603      	mov	r3, r0
 8011912:	4a1a      	ldr	r2, [pc, #104]	@ (801197c <find_volume+0x504>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d113      	bne.n	8011940 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801191a:	333c      	adds	r3, #60	@ 0x3c
 801191c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011920:	4618      	mov	r0, r3
 8011922:	f7fd fed7 	bl	800f6d4 <ld_dword>
 8011926:	4602      	mov	r2, r0
 8011928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801192c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192e:	333c      	adds	r3, #60	@ 0x3c
 8011930:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011934:	4618      	mov	r0, r3
 8011936:	f7fd fecd 	bl	800f6d4 <ld_dword>
 801193a:	4602      	mov	r2, r0
 801193c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801193e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011942:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011946:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011948:	4b0d      	ldr	r3, [pc, #52]	@ (8011980 <find_volume+0x508>)
 801194a:	881b      	ldrh	r3, [r3, #0]
 801194c:	3301      	adds	r3, #1
 801194e:	b29a      	uxth	r2, r3
 8011950:	4b0b      	ldr	r3, [pc, #44]	@ (8011980 <find_volume+0x508>)
 8011952:	801a      	strh	r2, [r3, #0]
 8011954:	4b0a      	ldr	r3, [pc, #40]	@ (8011980 <find_volume+0x508>)
 8011956:	881a      	ldrh	r2, [r3, #0]
 8011958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801195a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801195c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801195e:	4a09      	ldr	r2, [pc, #36]	@ (8011984 <find_volume+0x50c>)
 8011960:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8011962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011964:	2200      	movs	r2, #0
 8011966:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011968:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801196a:	f7fe f8e3 	bl	800fb34 <clear_lock>
#endif
	return FR_OK;
 801196e:	2300      	movs	r3, #0
}
 8011970:	4618      	mov	r0, r3
 8011972:	3758      	adds	r7, #88	@ 0x58
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}
 8011978:	41615252 	.word	0x41615252
 801197c:	61417272 	.word	0x61417272
 8011980:	24002a8c 	.word	0x24002a8c
 8011984:	24002ab0 	.word	0x24002ab0

08011988 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011992:	2309      	movs	r3, #9
 8011994:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d01c      	beq.n	80119d6 <validate+0x4e>
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d018      	beq.n	80119d6 <validate+0x4e>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d013      	beq.n	80119d6 <validate+0x4e>
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	889a      	ldrh	r2, [r3, #4]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	88db      	ldrh	r3, [r3, #6]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d10c      	bne.n	80119d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	785b      	ldrb	r3, [r3, #1]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fd fdce 	bl	800f564 <disk_status>
 80119c8:	4603      	mov	r3, r0
 80119ca:	f003 0301 	and.w	r3, r3, #1
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d101      	bne.n	80119d6 <validate+0x4e>
			res = FR_OK;
 80119d2:	2300      	movs	r3, #0
 80119d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80119d6:	7bfb      	ldrb	r3, [r7, #15]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d102      	bne.n	80119e2 <validate+0x5a>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	e000      	b.n	80119e4 <validate+0x5c>
 80119e2:	2300      	movs	r3, #0
 80119e4:	683a      	ldr	r2, [r7, #0]
 80119e6:	6013      	str	r3, [r2, #0]
	return res;
 80119e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
	...

080119f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b088      	sub	sp, #32
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	60f8      	str	r0, [r7, #12]
 80119fc:	60b9      	str	r1, [r7, #8]
 80119fe:	4613      	mov	r3, r2
 8011a00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011a06:	f107 0310 	add.w	r3, r7, #16
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff fc99 	bl	8011342 <get_ldnumber>
 8011a10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011a12:	69fb      	ldr	r3, [r7, #28]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	da01      	bge.n	8011a1c <f_mount+0x28>
 8011a18:	230b      	movs	r3, #11
 8011a1a:	e02b      	b.n	8011a74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011a1c:	4a17      	ldr	r2, [pc, #92]	@ (8011a7c <f_mount+0x88>)
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d005      	beq.n	8011a38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011a2c:	69b8      	ldr	r0, [r7, #24]
 8011a2e:	f7fe f881 	bl	800fb34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	2200      	movs	r2, #0
 8011a36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d002      	beq.n	8011a44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	2200      	movs	r2, #0
 8011a42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011a44:	68fa      	ldr	r2, [r7, #12]
 8011a46:	490d      	ldr	r1, [pc, #52]	@ (8011a7c <f_mount+0x88>)
 8011a48:	69fb      	ldr	r3, [r7, #28]
 8011a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d002      	beq.n	8011a5a <f_mount+0x66>
 8011a54:	79fb      	ldrb	r3, [r7, #7]
 8011a56:	2b01      	cmp	r3, #1
 8011a58:	d001      	beq.n	8011a5e <f_mount+0x6a>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	e00a      	b.n	8011a74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011a5e:	f107 010c 	add.w	r1, r7, #12
 8011a62:	f107 0308 	add.w	r3, r7, #8
 8011a66:	2200      	movs	r2, #0
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7ff fd05 	bl	8011478 <find_volume>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3720      	adds	r7, #32
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	24002a88 	.word	0x24002a88

08011a80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b09a      	sub	sp, #104	@ 0x68
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	4613      	mov	r3, r2
 8011a8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d101      	bne.n	8011a98 <f_open+0x18>
 8011a94:	2309      	movs	r3, #9
 8011a96:	e1b7      	b.n	8011e08 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011a98:	79fb      	ldrb	r3, [r7, #7]
 8011a9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011aa0:	79fa      	ldrb	r2, [r7, #7]
 8011aa2:	f107 0114 	add.w	r1, r7, #20
 8011aa6:	f107 0308 	add.w	r3, r7, #8
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7ff fce4 	bl	8011478 <find_volume>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011ab6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	f040 819b 	bne.w	8011df6 <f_open+0x376>
		dj.obj.fs = fs;
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011ac4:	68ba      	ldr	r2, [r7, #8]
 8011ac6:	f107 0318 	add.w	r3, r7, #24
 8011aca:	4611      	mov	r1, r2
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7ff fba3 	bl	8011218 <follow_path>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011ad8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d118      	bne.n	8011b12 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011ae4:	b25b      	sxtb	r3, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	da03      	bge.n	8011af2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8011aea:	2306      	movs	r3, #6
 8011aec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011af0:	e00f      	b.n	8011b12 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011af2:	79fb      	ldrb	r3, [r7, #7]
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	bf8c      	ite	hi
 8011af8:	2301      	movhi	r3, #1
 8011afa:	2300      	movls	r3, #0
 8011afc:	b2db      	uxtb	r3, r3
 8011afe:	461a      	mov	r2, r3
 8011b00:	f107 0318 	add.w	r3, r7, #24
 8011b04:	4611      	mov	r1, r2
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fd fecc 	bl	800f8a4 <chk_lock>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011b12:	79fb      	ldrb	r3, [r7, #7]
 8011b14:	f003 031c 	and.w	r3, r3, #28
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d07f      	beq.n	8011c1c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011b1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d017      	beq.n	8011b54 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011b24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b28:	2b04      	cmp	r3, #4
 8011b2a:	d10e      	bne.n	8011b4a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011b2c:	f7fd ff16 	bl	800f95c <enq_lock>
 8011b30:	4603      	mov	r3, r0
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d006      	beq.n	8011b44 <f_open+0xc4>
 8011b36:	f107 0318 	add.w	r3, r7, #24
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7ff f86e 	bl	8010c1c <dir_register>
 8011b40:	4603      	mov	r3, r0
 8011b42:	e000      	b.n	8011b46 <f_open+0xc6>
 8011b44:	2312      	movs	r3, #18
 8011b46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011b4a:	79fb      	ldrb	r3, [r7, #7]
 8011b4c:	f043 0308 	orr.w	r3, r3, #8
 8011b50:	71fb      	strb	r3, [r7, #7]
 8011b52:	e010      	b.n	8011b76 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011b54:	7fbb      	ldrb	r3, [r7, #30]
 8011b56:	f003 0311 	and.w	r3, r3, #17
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d003      	beq.n	8011b66 <f_open+0xe6>
					res = FR_DENIED;
 8011b5e:	2307      	movs	r3, #7
 8011b60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011b64:	e007      	b.n	8011b76 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011b66:	79fb      	ldrb	r3, [r7, #7]
 8011b68:	f003 0304 	and.w	r3, r3, #4
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d002      	beq.n	8011b76 <f_open+0xf6>
 8011b70:	2308      	movs	r3, #8
 8011b72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011b76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d168      	bne.n	8011c50 <f_open+0x1d0>
 8011b7e:	79fb      	ldrb	r3, [r7, #7]
 8011b80:	f003 0308 	and.w	r3, r3, #8
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d063      	beq.n	8011c50 <f_open+0x1d0>
				dw = GET_FATTIME();
 8011b88:	f7fc ffca 	bl	800eb20 <get_fattime>
 8011b8c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b90:	330e      	adds	r3, #14
 8011b92:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7fd fddb 	bl	800f750 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b9c:	3316      	adds	r3, #22
 8011b9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fd fdd5 	bl	800f750 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ba8:	330b      	adds	r3, #11
 8011baa:	2220      	movs	r2, #32
 8011bac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011bb2:	4611      	mov	r1, r2
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fe fdaa 	bl	801070e <ld_clust>
 8011bba:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7fe fdc2 	bl	801074c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bca:	331c      	adds	r3, #28
 8011bcc:	2100      	movs	r1, #0
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7fd fdbe 	bl	800f750 <st_dword>
					fs->wflag = 1;
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d037      	beq.n	8011c50 <f_open+0x1d0>
						dw = fs->winsect;
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011be4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011be6:	f107 0318 	add.w	r3, r7, #24
 8011bea:	2200      	movs	r2, #0
 8011bec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fe fab2 	bl	8010158 <remove_chain>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8011bfa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d126      	bne.n	8011c50 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fd fffc 	bl	800fc04 <move_window>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011c16:	3a01      	subs	r2, #1
 8011c18:	615a      	str	r2, [r3, #20]
 8011c1a:	e019      	b.n	8011c50 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011c1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d115      	bne.n	8011c50 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011c24:	7fbb      	ldrb	r3, [r7, #30]
 8011c26:	f003 0310 	and.w	r3, r3, #16
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <f_open+0x1b6>
					res = FR_NO_FILE;
 8011c2e:	2304      	movs	r3, #4
 8011c30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011c34:	e00c      	b.n	8011c50 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011c36:	79fb      	ldrb	r3, [r7, #7]
 8011c38:	f003 0302 	and.w	r3, r3, #2
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d007      	beq.n	8011c50 <f_open+0x1d0>
 8011c40:	7fbb      	ldrb	r3, [r7, #30]
 8011c42:	f003 0301 	and.w	r3, r3, #1
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d002      	beq.n	8011c50 <f_open+0x1d0>
						res = FR_DENIED;
 8011c4a:	2307      	movs	r3, #7
 8011c4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011c50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d126      	bne.n	8011ca6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011c58:	79fb      	ldrb	r3, [r7, #7]
 8011c5a:	f003 0308 	and.w	r3, r3, #8
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d003      	beq.n	8011c6a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011c62:	79fb      	ldrb	r3, [r7, #7]
 8011c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011c72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011c78:	79fb      	ldrb	r3, [r7, #7]
 8011c7a:	2b01      	cmp	r3, #1
 8011c7c:	bf8c      	ite	hi
 8011c7e:	2301      	movhi	r3, #1
 8011c80:	2300      	movls	r3, #0
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	461a      	mov	r2, r3
 8011c86:	f107 0318 	add.w	r3, r7, #24
 8011c8a:	4611      	mov	r1, r2
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7fd fe87 	bl	800f9a0 <inc_lock>
 8011c92:	4602      	mov	r2, r0
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	691b      	ldr	r3, [r3, #16]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d102      	bne.n	8011ca6 <f_open+0x226>
 8011ca0:	2302      	movs	r3, #2
 8011ca2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	f040 80a3 	bne.w	8011df6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011cb4:	4611      	mov	r1, r2
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fe fd29 	bl	801070e <ld_clust>
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cc4:	331c      	adds	r3, #28
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7fd fd04 	bl	800f6d4 <ld_dword>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011cd8:	697a      	ldr	r2, [r7, #20]
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	88da      	ldrh	r2, [r3, #6]
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	79fa      	ldrb	r2, [r7, #7]
 8011cea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3330      	adds	r3, #48	@ 0x30
 8011d02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011d06:	2100      	movs	r1, #0
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7fd fd6e 	bl	800f7ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011d0e:	79fb      	ldrb	r3, [r7, #7]
 8011d10:	f003 0320 	and.w	r3, r3, #32
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d06e      	beq.n	8011df6 <f_open+0x376>
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	68db      	ldr	r3, [r3, #12]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d06a      	beq.n	8011df6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	68da      	ldr	r2, [r3, #12]
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	895b      	ldrh	r3, [r3, #10]
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	899b      	ldrh	r3, [r3, #12]
 8011d32:	fb02 f303 	mul.w	r3, r2, r3
 8011d36:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d44:	e016      	b.n	8011d74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7fe f817 	bl	800fd7e <get_fat>
 8011d50:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011d52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d802      	bhi.n	8011d5e <f_open+0x2de>
 8011d58:	2302      	movs	r3, #2
 8011d5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011d5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d64:	d102      	bne.n	8011d6c <f_open+0x2ec>
 8011d66:	2301      	movs	r3, #1
 8011d68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011d6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d103      	bne.n	8011d84 <f_open+0x304>
 8011d7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d8e0      	bhi.n	8011d46 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011d88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011d8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d131      	bne.n	8011df6 <f_open+0x376>
 8011d92:	697b      	ldr	r3, [r7, #20]
 8011d94:	899b      	ldrh	r3, [r3, #12]
 8011d96:	461a      	mov	r2, r3
 8011d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d9e:	fb01 f202 	mul.w	r2, r1, r2
 8011da2:	1a9b      	subs	r3, r3, r2
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d026      	beq.n	8011df6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fd ffc7 	bl	800fd40 <clust2sect>
 8011db2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d103      	bne.n	8011dc2 <f_open+0x342>
						res = FR_INT_ERR;
 8011dba:	2302      	movs	r3, #2
 8011dbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011dc0:	e019      	b.n	8011df6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	899b      	ldrh	r3, [r3, #12]
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011dca:	fbb3 f2f2 	udiv	r2, r3, r2
 8011dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dd0:	441a      	add	r2, r3
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	7858      	ldrb	r0, [r3, #1]
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	6a1a      	ldr	r2, [r3, #32]
 8011de4:	2301      	movs	r3, #1
 8011de6:	f7fd fbff 	bl	800f5e8 <disk_read>
 8011dea:	4603      	mov	r3, r0
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d002      	beq.n	8011df6 <f_open+0x376>
 8011df0:	2301      	movs	r3, #1
 8011df2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011df6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d002      	beq.n	8011e04 <f_open+0x384>
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	2200      	movs	r2, #0
 8011e02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011e04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3768      	adds	r7, #104	@ 0x68
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b08c      	sub	sp, #48	@ 0x30
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	607a      	str	r2, [r7, #4]
 8011e1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	2200      	movs	r2, #0
 8011e26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f107 0210 	add.w	r2, r7, #16
 8011e2e:	4611      	mov	r1, r2
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7ff fda9 	bl	8011988 <validate>
 8011e36:	4603      	mov	r3, r0
 8011e38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d107      	bne.n	8011e54 <f_write+0x44>
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	7d5b      	ldrb	r3, [r3, #21]
 8011e48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d002      	beq.n	8011e5a <f_write+0x4a>
 8011e54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e58:	e16a      	b.n	8012130 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	7d1b      	ldrb	r3, [r3, #20]
 8011e5e:	f003 0302 	and.w	r3, r3, #2
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d101      	bne.n	8011e6a <f_write+0x5a>
 8011e66:	2307      	movs	r3, #7
 8011e68:	e162      	b.n	8012130 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	699a      	ldr	r2, [r3, #24]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	441a      	add	r2, r3
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	699b      	ldr	r3, [r3, #24]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	f080 814c 	bcs.w	8012114 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	699b      	ldr	r3, [r3, #24]
 8011e80:	43db      	mvns	r3, r3
 8011e82:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011e84:	e146      	b.n	8012114 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	699b      	ldr	r3, [r3, #24]
 8011e8a:	693a      	ldr	r2, [r7, #16]
 8011e8c:	8992      	ldrh	r2, [r2, #12]
 8011e8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e92:	fb01 f202 	mul.w	r2, r1, r2
 8011e96:	1a9b      	subs	r3, r3, r2
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f040 80f1 	bne.w	8012080 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	699b      	ldr	r3, [r3, #24]
 8011ea2:	693a      	ldr	r2, [r7, #16]
 8011ea4:	8992      	ldrh	r2, [r2, #12]
 8011ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011eaa:	693a      	ldr	r2, [r7, #16]
 8011eac:	8952      	ldrh	r2, [r2, #10]
 8011eae:	3a01      	subs	r2, #1
 8011eb0:	4013      	ands	r3, r2
 8011eb2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011eb4:	69bb      	ldr	r3, [r7, #24]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d143      	bne.n	8011f42 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	699b      	ldr	r3, [r3, #24]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d10c      	bne.n	8011edc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	689b      	ldr	r3, [r3, #8]
 8011ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d11a      	bne.n	8011f04 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2100      	movs	r1, #0
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fe f9a5 	bl	8010222 <create_chain>
 8011ed8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011eda:	e013      	b.n	8011f04 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d007      	beq.n	8011ef4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	699b      	ldr	r3, [r3, #24]
 8011ee8:	4619      	mov	r1, r3
 8011eea:	68f8      	ldr	r0, [r7, #12]
 8011eec:	f7fe fa31 	bl	8010352 <clmt_clust>
 8011ef0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011ef2:	e007      	b.n	8011f04 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011ef4:	68fa      	ldr	r2, [r7, #12]
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	69db      	ldr	r3, [r3, #28]
 8011efa:	4619      	mov	r1, r3
 8011efc:	4610      	mov	r0, r2
 8011efe:	f7fe f990 	bl	8010222 <create_chain>
 8011f02:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f000 8109 	beq.w	801211e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d104      	bne.n	8011f1c <f_write+0x10c>
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	2202      	movs	r2, #2
 8011f16:	755a      	strb	r2, [r3, #21]
 8011f18:	2302      	movs	r3, #2
 8011f1a:	e109      	b.n	8012130 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f22:	d104      	bne.n	8011f2e <f_write+0x11e>
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	2201      	movs	r2, #1
 8011f28:	755a      	strb	r2, [r3, #21]
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e100      	b.n	8012130 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f32:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	689b      	ldr	r3, [r3, #8]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d102      	bne.n	8011f42 <f_write+0x132>
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f40:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	7d1b      	ldrb	r3, [r3, #20]
 8011f46:	b25b      	sxtb	r3, r3
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	da18      	bge.n	8011f7e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	7858      	ldrb	r0, [r3, #1]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6a1a      	ldr	r2, [r3, #32]
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	f7fd fb64 	bl	800f628 <disk_write>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d004      	beq.n	8011f70 <f_write+0x160>
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2201      	movs	r2, #1
 8011f6a:	755a      	strb	r2, [r3, #21]
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	e0df      	b.n	8012130 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	7d1b      	ldrb	r3, [r3, #20]
 8011f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f78:	b2da      	uxtb	r2, r3
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011f7e:	693a      	ldr	r2, [r7, #16]
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	69db      	ldr	r3, [r3, #28]
 8011f84:	4619      	mov	r1, r3
 8011f86:	4610      	mov	r0, r2
 8011f88:	f7fd feda 	bl	800fd40 <clust2sect>
 8011f8c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d104      	bne.n	8011f9e <f_write+0x18e>
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2202      	movs	r2, #2
 8011f98:	755a      	strb	r2, [r3, #21]
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	e0c8      	b.n	8012130 <f_write+0x320>
			sect += csect;
 8011f9e:	697a      	ldr	r2, [r7, #20]
 8011fa0:	69bb      	ldr	r3, [r7, #24]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	899b      	ldrh	r3, [r3, #12]
 8011faa:	461a      	mov	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fb2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011fb4:	6a3b      	ldr	r3, [r7, #32]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d043      	beq.n	8012042 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011fba:	69ba      	ldr	r2, [r7, #24]
 8011fbc:	6a3b      	ldr	r3, [r7, #32]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	693a      	ldr	r2, [r7, #16]
 8011fc2:	8952      	ldrh	r2, [r2, #10]
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d905      	bls.n	8011fd4 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	895b      	ldrh	r3, [r3, #10]
 8011fcc:	461a      	mov	r2, r3
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	1ad3      	subs	r3, r2, r3
 8011fd2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	7858      	ldrb	r0, [r3, #1]
 8011fd8:	6a3b      	ldr	r3, [r7, #32]
 8011fda:	697a      	ldr	r2, [r7, #20]
 8011fdc:	69f9      	ldr	r1, [r7, #28]
 8011fde:	f7fd fb23 	bl	800f628 <disk_write>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d004      	beq.n	8011ff2 <f_write+0x1e2>
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	2201      	movs	r2, #1
 8011fec:	755a      	strb	r2, [r3, #21]
 8011fee:	2301      	movs	r3, #1
 8011ff0:	e09e      	b.n	8012130 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	6a1a      	ldr	r2, [r3, #32]
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	1ad3      	subs	r3, r2, r3
 8011ffa:	6a3a      	ldr	r2, [r7, #32]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d918      	bls.n	8012032 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	6a1a      	ldr	r2, [r3, #32]
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	1ad3      	subs	r3, r2, r3
 801200e:	693a      	ldr	r2, [r7, #16]
 8012010:	8992      	ldrh	r2, [r2, #12]
 8012012:	fb02 f303 	mul.w	r3, r2, r3
 8012016:	69fa      	ldr	r2, [r7, #28]
 8012018:	18d1      	adds	r1, r2, r3
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	899b      	ldrh	r3, [r3, #12]
 801201e:	461a      	mov	r2, r3
 8012020:	f7fd fbc2 	bl	800f7a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	7d1b      	ldrb	r3, [r3, #20]
 8012028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801202c:	b2da      	uxtb	r2, r3
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	899b      	ldrh	r3, [r3, #12]
 8012036:	461a      	mov	r2, r3
 8012038:	6a3b      	ldr	r3, [r7, #32]
 801203a:	fb02 f303 	mul.w	r3, r2, r3
 801203e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8012040:	e04b      	b.n	80120da <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	6a1b      	ldr	r3, [r3, #32]
 8012046:	697a      	ldr	r2, [r7, #20]
 8012048:	429a      	cmp	r2, r3
 801204a:	d016      	beq.n	801207a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	699a      	ldr	r2, [r3, #24]
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012054:	429a      	cmp	r2, r3
 8012056:	d210      	bcs.n	801207a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	7858      	ldrb	r0, [r3, #1]
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012062:	2301      	movs	r3, #1
 8012064:	697a      	ldr	r2, [r7, #20]
 8012066:	f7fd fabf 	bl	800f5e8 <disk_read>
 801206a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801206c:	2b00      	cmp	r3, #0
 801206e:	d004      	beq.n	801207a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2201      	movs	r2, #1
 8012074:	755a      	strb	r2, [r3, #21]
 8012076:	2301      	movs	r3, #1
 8012078:	e05a      	b.n	8012130 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	697a      	ldr	r2, [r7, #20]
 801207e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	899b      	ldrh	r3, [r3, #12]
 8012084:	4618      	mov	r0, r3
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	699b      	ldr	r3, [r3, #24]
 801208a:	693a      	ldr	r2, [r7, #16]
 801208c:	8992      	ldrh	r2, [r2, #12]
 801208e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012092:	fb01 f202 	mul.w	r2, r1, r2
 8012096:	1a9b      	subs	r3, r3, r2
 8012098:	1ac3      	subs	r3, r0, r3
 801209a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801209c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d901      	bls.n	80120a8 <f_write+0x298>
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	699b      	ldr	r3, [r3, #24]
 80120b2:	693a      	ldr	r2, [r7, #16]
 80120b4:	8992      	ldrh	r2, [r2, #12]
 80120b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80120ba:	fb00 f202 	mul.w	r2, r0, r2
 80120be:	1a9b      	subs	r3, r3, r2
 80120c0:	440b      	add	r3, r1
 80120c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120c4:	69f9      	ldr	r1, [r7, #28]
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7fd fb6e 	bl	800f7a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	7d1b      	ldrb	r3, [r3, #20]
 80120d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80120da:	69fa      	ldr	r2, [r7, #28]
 80120dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120de:	4413      	add	r3, r2
 80120e0:	61fb      	str	r3, [r7, #28]
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	699a      	ldr	r2, [r3, #24]
 80120e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e8:	441a      	add	r2, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	619a      	str	r2, [r3, #24]
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	68da      	ldr	r2, [r3, #12]
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	699b      	ldr	r3, [r3, #24]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	bf38      	it	cc
 80120fa:	461a      	movcc	r2, r3
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	60da      	str	r2, [r3, #12]
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012106:	441a      	add	r2, r3
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	601a      	str	r2, [r3, #0]
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012110:	1ad3      	subs	r3, r2, r3
 8012112:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2b00      	cmp	r3, #0
 8012118:	f47f aeb5 	bne.w	8011e86 <f_write+0x76>
 801211c:	e000      	b.n	8012120 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801211e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	7d1b      	ldrb	r3, [r3, #20]
 8012124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012128:	b2da      	uxtb	r2, r3
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801212e:	2300      	movs	r3, #0
}
 8012130:	4618      	mov	r0, r3
 8012132:	3730      	adds	r7, #48	@ 0x30
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f107 0208 	add.w	r2, r7, #8
 8012146:	4611      	mov	r1, r2
 8012148:	4618      	mov	r0, r3
 801214a:	f7ff fc1d 	bl	8011988 <validate>
 801214e:	4603      	mov	r3, r0
 8012150:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012152:	7dfb      	ldrb	r3, [r7, #23]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d168      	bne.n	801222a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	7d1b      	ldrb	r3, [r3, #20]
 801215c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012160:	2b00      	cmp	r3, #0
 8012162:	d062      	beq.n	801222a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	7d1b      	ldrb	r3, [r3, #20]
 8012168:	b25b      	sxtb	r3, r3
 801216a:	2b00      	cmp	r3, #0
 801216c:	da15      	bge.n	801219a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	7858      	ldrb	r0, [r3, #1]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a1a      	ldr	r2, [r3, #32]
 801217c:	2301      	movs	r3, #1
 801217e:	f7fd fa53 	bl	800f628 <disk_write>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d001      	beq.n	801218c <f_sync+0x54>
 8012188:	2301      	movs	r3, #1
 801218a:	e04f      	b.n	801222c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	7d1b      	ldrb	r3, [r3, #20]
 8012190:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012194:	b2da      	uxtb	r2, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801219a:	f7fc fcc1 	bl	800eb20 <get_fattime>
 801219e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121a6:	4619      	mov	r1, r3
 80121a8:	4610      	mov	r0, r2
 80121aa:	f7fd fd2b 	bl	800fc04 <move_window>
 80121ae:	4603      	mov	r3, r0
 80121b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80121b2:	7dfb      	ldrb	r3, [r7, #23]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d138      	bne.n	801222a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	330b      	adds	r3, #11
 80121c2:	781a      	ldrb	r2, [r3, #0]
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	330b      	adds	r3, #11
 80121c8:	f042 0220 	orr.w	r2, r2, #32
 80121cc:	b2d2      	uxtb	r2, r2
 80121ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6818      	ldr	r0, [r3, #0]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	689b      	ldr	r3, [r3, #8]
 80121d8:	461a      	mov	r2, r3
 80121da:	68f9      	ldr	r1, [r7, #12]
 80121dc:	f7fe fab6 	bl	801074c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	f103 021c 	add.w	r2, r3, #28
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	68db      	ldr	r3, [r3, #12]
 80121ea:	4619      	mov	r1, r3
 80121ec:	4610      	mov	r0, r2
 80121ee:	f7fd faaf 	bl	800f750 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	3316      	adds	r3, #22
 80121f6:	6939      	ldr	r1, [r7, #16]
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fd faa9 	bl	800f750 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	3312      	adds	r3, #18
 8012202:	2100      	movs	r1, #0
 8012204:	4618      	mov	r0, r3
 8012206:	f7fd fa88 	bl	800f71a <st_word>
					fs->wflag = 1;
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	2201      	movs	r2, #1
 801220e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	4618      	mov	r0, r3
 8012214:	f7fd fd24 	bl	800fc60 <sync_fs>
 8012218:	4603      	mov	r3, r0
 801221a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	7d1b      	ldrb	r3, [r3, #20]
 8012220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012224:	b2da      	uxtb	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801222a:	7dfb      	ldrb	r3, [r7, #23]
}
 801222c:	4618      	mov	r0, r3
 801222e:	3718      	adds	r7, #24
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7ff ff7b 	bl	8012138 <f_sync>
 8012242:	4603      	mov	r3, r0
 8012244:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012246:	7bfb      	ldrb	r3, [r7, #15]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d118      	bne.n	801227e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f107 0208 	add.w	r2, r7, #8
 8012252:	4611      	mov	r1, r2
 8012254:	4618      	mov	r0, r3
 8012256:	f7ff fb97 	bl	8011988 <validate>
 801225a:	4603      	mov	r3, r0
 801225c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801225e:	7bfb      	ldrb	r3, [r7, #15]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d10c      	bne.n	801227e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	691b      	ldr	r3, [r3, #16]
 8012268:	4618      	mov	r0, r3
 801226a:	f7fd fc27 	bl	800fabc <dec_lock>
 801226e:	4603      	mov	r3, r0
 8012270:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012272:	7bfb      	ldrb	r3, [r7, #15]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d102      	bne.n	801227e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2200      	movs	r2, #0
 801227c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012280:	4618      	mov	r0, r3
 8012282:	3710      	adds	r7, #16
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}

08012288 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b090      	sub	sp, #64	@ 0x40
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f107 0208 	add.w	r2, r7, #8
 8012298:	4611      	mov	r1, r2
 801229a:	4618      	mov	r0, r3
 801229c:	f7ff fb74 	bl	8011988 <validate>
 80122a0:	4603      	mov	r3, r0
 80122a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80122a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d103      	bne.n	80122b6 <f_lseek+0x2e>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	7d5b      	ldrb	r3, [r3, #21]
 80122b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80122b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d002      	beq.n	80122c4 <f_lseek+0x3c>
 80122be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80122c2:	e201      	b.n	80126c8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 80d9 	beq.w	8012480 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122d4:	d15a      	bne.n	801238c <f_lseek+0x104>
			tbl = fp->cltbl;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122da:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80122dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122de:	1d1a      	adds	r2, r3, #4
 80122e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	617b      	str	r3, [r7, #20]
 80122e6:	2302      	movs	r3, #2
 80122e8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	689b      	ldr	r3, [r3, #8]
 80122ee:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80122f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d03a      	beq.n	801236c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80122f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f8:	613b      	str	r3, [r7, #16]
 80122fa:	2300      	movs	r3, #0
 80122fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80122fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012300:	3302      	adds	r3, #2
 8012302:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8012304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012306:	60fb      	str	r3, [r7, #12]
 8012308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801230a:	3301      	adds	r3, #1
 801230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012312:	4618      	mov	r0, r3
 8012314:	f7fd fd33 	bl	800fd7e <get_fat>
 8012318:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801231a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801231c:	2b01      	cmp	r3, #1
 801231e:	d804      	bhi.n	801232a <f_lseek+0xa2>
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2202      	movs	r2, #2
 8012324:	755a      	strb	r2, [r3, #21]
 8012326:	2302      	movs	r3, #2
 8012328:	e1ce      	b.n	80126c8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012330:	d104      	bne.n	801233c <f_lseek+0xb4>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2201      	movs	r2, #1
 8012336:	755a      	strb	r2, [r3, #21]
 8012338:	2301      	movs	r3, #1
 801233a:	e1c5      	b.n	80126c8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	3301      	adds	r3, #1
 8012340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012342:	429a      	cmp	r2, r3
 8012344:	d0de      	beq.n	8012304 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	429a      	cmp	r2, r3
 801234c:	d809      	bhi.n	8012362 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012350:	1d1a      	adds	r2, r3, #4
 8012352:	627a      	str	r2, [r7, #36]	@ 0x24
 8012354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012356:	601a      	str	r2, [r3, #0]
 8012358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801235a:	1d1a      	adds	r2, r3, #4
 801235c:	627a      	str	r2, [r7, #36]	@ 0x24
 801235e:	693a      	ldr	r2, [r7, #16]
 8012360:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	6a1b      	ldr	r3, [r3, #32]
 8012366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012368:	429a      	cmp	r2, r3
 801236a:	d3c4      	bcc.n	80122f6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012372:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	429a      	cmp	r2, r3
 801237a:	d803      	bhi.n	8012384 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801237e:	2200      	movs	r2, #0
 8012380:	601a      	str	r2, [r3, #0]
 8012382:	e19f      	b.n	80126c4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012384:	2311      	movs	r3, #17
 8012386:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801238a:	e19b      	b.n	80126c4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	68db      	ldr	r3, [r3, #12]
 8012390:	683a      	ldr	r2, [r7, #0]
 8012392:	429a      	cmp	r2, r3
 8012394:	d902      	bls.n	801239c <f_lseek+0x114>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	68db      	ldr	r3, [r3, #12]
 801239a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	683a      	ldr	r2, [r7, #0]
 80123a0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	f000 818d 	beq.w	80126c4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	3b01      	subs	r3, #1
 80123ae:	4619      	mov	r1, r3
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7fd ffce 	bl	8010352 <clmt_clust>
 80123b6:	4602      	mov	r2, r0
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80123bc:	68ba      	ldr	r2, [r7, #8]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	69db      	ldr	r3, [r3, #28]
 80123c2:	4619      	mov	r1, r3
 80123c4:	4610      	mov	r0, r2
 80123c6:	f7fd fcbb 	bl	800fd40 <clust2sect>
 80123ca:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80123cc:	69bb      	ldr	r3, [r7, #24]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d104      	bne.n	80123dc <f_lseek+0x154>
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2202      	movs	r2, #2
 80123d6:	755a      	strb	r2, [r3, #21]
 80123d8:	2302      	movs	r3, #2
 80123da:	e175      	b.n	80126c8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	3b01      	subs	r3, #1
 80123e0:	68ba      	ldr	r2, [r7, #8]
 80123e2:	8992      	ldrh	r2, [r2, #12]
 80123e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80123e8:	68ba      	ldr	r2, [r7, #8]
 80123ea:	8952      	ldrh	r2, [r2, #10]
 80123ec:	3a01      	subs	r2, #1
 80123ee:	4013      	ands	r3, r2
 80123f0:	69ba      	ldr	r2, [r7, #24]
 80123f2:	4413      	add	r3, r2
 80123f4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	699b      	ldr	r3, [r3, #24]
 80123fa:	68ba      	ldr	r2, [r7, #8]
 80123fc:	8992      	ldrh	r2, [r2, #12]
 80123fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8012402:	fb01 f202 	mul.w	r2, r1, r2
 8012406:	1a9b      	subs	r3, r3, r2
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 815b 	beq.w	80126c4 <f_lseek+0x43c>
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6a1b      	ldr	r3, [r3, #32]
 8012412:	69ba      	ldr	r2, [r7, #24]
 8012414:	429a      	cmp	r2, r3
 8012416:	f000 8155 	beq.w	80126c4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	7d1b      	ldrb	r3, [r3, #20]
 801241e:	b25b      	sxtb	r3, r3
 8012420:	2b00      	cmp	r3, #0
 8012422:	da18      	bge.n	8012456 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	7858      	ldrb	r0, [r3, #1]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6a1a      	ldr	r2, [r3, #32]
 8012432:	2301      	movs	r3, #1
 8012434:	f7fd f8f8 	bl	800f628 <disk_write>
 8012438:	4603      	mov	r3, r0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d004      	beq.n	8012448 <f_lseek+0x1c0>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2201      	movs	r2, #1
 8012442:	755a      	strb	r2, [r3, #21]
 8012444:	2301      	movs	r3, #1
 8012446:	e13f      	b.n	80126c8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	7d1b      	ldrb	r3, [r3, #20]
 801244c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012450:	b2da      	uxtb	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	7858      	ldrb	r0, [r3, #1]
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012460:	2301      	movs	r3, #1
 8012462:	69ba      	ldr	r2, [r7, #24]
 8012464:	f7fd f8c0 	bl	800f5e8 <disk_read>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d004      	beq.n	8012478 <f_lseek+0x1f0>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2201      	movs	r2, #1
 8012472:	755a      	strb	r2, [r3, #21]
 8012474:	2301      	movs	r3, #1
 8012476:	e127      	b.n	80126c8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	69ba      	ldr	r2, [r7, #24]
 801247c:	621a      	str	r2, [r3, #32]
 801247e:	e121      	b.n	80126c4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	683a      	ldr	r2, [r7, #0]
 8012486:	429a      	cmp	r2, r3
 8012488:	d908      	bls.n	801249c <f_lseek+0x214>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	7d1b      	ldrb	r3, [r3, #20]
 801248e:	f003 0302 	and.w	r3, r3, #2
 8012492:	2b00      	cmp	r3, #0
 8012494:	d102      	bne.n	801249c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	699b      	ldr	r3, [r3, #24]
 80124a0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80124a2:	2300      	movs	r3, #0
 80124a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124aa:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	f000 80b5 	beq.w	801261e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	895b      	ldrh	r3, [r3, #10]
 80124b8:	461a      	mov	r2, r3
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	899b      	ldrh	r3, [r3, #12]
 80124be:	fb02 f303 	mul.w	r3, r2, r3
 80124c2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80124c4:	6a3b      	ldr	r3, [r7, #32]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d01b      	beq.n	8012502 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	1e5a      	subs	r2, r3, #1
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80124d4:	6a3b      	ldr	r3, [r7, #32]
 80124d6:	1e59      	subs	r1, r3, #1
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80124de:	429a      	cmp	r2, r3
 80124e0:	d30f      	bcc.n	8012502 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80124e2:	6a3b      	ldr	r3, [r7, #32]
 80124e4:	1e5a      	subs	r2, r3, #1
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	425b      	negs	r3, r3
 80124ea:	401a      	ands	r2, r3
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	699b      	ldr	r3, [r3, #24]
 80124f4:	683a      	ldr	r2, [r7, #0]
 80124f6:	1ad3      	subs	r3, r2, r3
 80124f8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	69db      	ldr	r3, [r3, #28]
 80124fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012500:	e022      	b.n	8012548 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	689b      	ldr	r3, [r3, #8]
 8012506:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801250a:	2b00      	cmp	r3, #0
 801250c:	d119      	bne.n	8012542 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2100      	movs	r1, #0
 8012512:	4618      	mov	r0, r3
 8012514:	f7fd fe85 	bl	8010222 <create_chain>
 8012518:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801251a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801251c:	2b01      	cmp	r3, #1
 801251e:	d104      	bne.n	801252a <f_lseek+0x2a2>
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2202      	movs	r2, #2
 8012524:	755a      	strb	r2, [r3, #21]
 8012526:	2302      	movs	r3, #2
 8012528:	e0ce      	b.n	80126c8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012530:	d104      	bne.n	801253c <f_lseek+0x2b4>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2201      	movs	r2, #1
 8012536:	755a      	strb	r2, [r3, #21]
 8012538:	2301      	movs	r3, #1
 801253a:	e0c5      	b.n	80126c8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012540:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012546:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801254a:	2b00      	cmp	r3, #0
 801254c:	d067      	beq.n	801261e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801254e:	e03a      	b.n	80125c6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8012550:	683a      	ldr	r2, [r7, #0]
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	1ad3      	subs	r3, r2, r3
 8012556:	603b      	str	r3, [r7, #0]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	699a      	ldr	r2, [r3, #24]
 801255c:	69fb      	ldr	r3, [r7, #28]
 801255e:	441a      	add	r2, r3
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	7d1b      	ldrb	r3, [r3, #20]
 8012568:	f003 0302 	and.w	r3, r3, #2
 801256c:	2b00      	cmp	r3, #0
 801256e:	d00b      	beq.n	8012588 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012574:	4618      	mov	r0, r3
 8012576:	f7fd fe54 	bl	8010222 <create_chain>
 801257a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801257c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801257e:	2b00      	cmp	r3, #0
 8012580:	d108      	bne.n	8012594 <f_lseek+0x30c>
							ofs = 0; break;
 8012582:	2300      	movs	r3, #0
 8012584:	603b      	str	r3, [r7, #0]
 8012586:	e022      	b.n	80125ce <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801258c:	4618      	mov	r0, r3
 801258e:	f7fd fbf6 	bl	800fd7e <get_fat>
 8012592:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801259a:	d104      	bne.n	80125a6 <f_lseek+0x31e>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2201      	movs	r2, #1
 80125a0:	755a      	strb	r2, [r3, #21]
 80125a2:	2301      	movs	r3, #1
 80125a4:	e090      	b.n	80126c8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80125a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d904      	bls.n	80125b6 <f_lseek+0x32e>
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	6a1b      	ldr	r3, [r3, #32]
 80125b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d304      	bcc.n	80125c0 <f_lseek+0x338>
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2202      	movs	r2, #2
 80125ba:	755a      	strb	r2, [r3, #21]
 80125bc:	2302      	movs	r3, #2
 80125be:	e083      	b.n	80126c8 <f_lseek+0x440>
					fp->clust = clst;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80125c4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80125c6:	683a      	ldr	r2, [r7, #0]
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d8c0      	bhi.n	8012550 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	699a      	ldr	r2, [r3, #24]
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	441a      	add	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	899b      	ldrh	r3, [r3, #12]
 80125de:	461a      	mov	r2, r3
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80125e6:	fb01 f202 	mul.w	r2, r1, r2
 80125ea:	1a9b      	subs	r3, r3, r2
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d016      	beq.n	801261e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7fd fba3 	bl	800fd40 <clust2sect>
 80125fa:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80125fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d104      	bne.n	801260c <f_lseek+0x384>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2202      	movs	r2, #2
 8012606:	755a      	strb	r2, [r3, #21]
 8012608:	2302      	movs	r3, #2
 801260a:	e05d      	b.n	80126c8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	899b      	ldrh	r3, [r3, #12]
 8012610:	461a      	mov	r2, r3
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	fbb3 f3f2 	udiv	r3, r3, r2
 8012618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801261a:	4413      	add	r3, r2
 801261c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	699a      	ldr	r2, [r3, #24]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	68db      	ldr	r3, [r3, #12]
 8012626:	429a      	cmp	r2, r3
 8012628:	d90a      	bls.n	8012640 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	699a      	ldr	r2, [r3, #24]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	7d1b      	ldrb	r3, [r3, #20]
 8012636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801263a:	b2da      	uxtb	r2, r3
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	699b      	ldr	r3, [r3, #24]
 8012644:	68ba      	ldr	r2, [r7, #8]
 8012646:	8992      	ldrh	r2, [r2, #12]
 8012648:	fbb3 f1f2 	udiv	r1, r3, r2
 801264c:	fb01 f202 	mul.w	r2, r1, r2
 8012650:	1a9b      	subs	r3, r3, r2
 8012652:	2b00      	cmp	r3, #0
 8012654:	d036      	beq.n	80126c4 <f_lseek+0x43c>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6a1b      	ldr	r3, [r3, #32]
 801265a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801265c:	429a      	cmp	r2, r3
 801265e:	d031      	beq.n	80126c4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	7d1b      	ldrb	r3, [r3, #20]
 8012664:	b25b      	sxtb	r3, r3
 8012666:	2b00      	cmp	r3, #0
 8012668:	da18      	bge.n	801269c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	7858      	ldrb	r0, [r3, #1]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6a1a      	ldr	r2, [r3, #32]
 8012678:	2301      	movs	r3, #1
 801267a:	f7fc ffd5 	bl	800f628 <disk_write>
 801267e:	4603      	mov	r3, r0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d004      	beq.n	801268e <f_lseek+0x406>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2201      	movs	r2, #1
 8012688:	755a      	strb	r2, [r3, #21]
 801268a:	2301      	movs	r3, #1
 801268c:	e01c      	b.n	80126c8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	7d1b      	ldrb	r3, [r3, #20]
 8012692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012696:	b2da      	uxtb	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	7858      	ldrb	r0, [r3, #1]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80126a6:	2301      	movs	r3, #1
 80126a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126aa:	f7fc ff9d 	bl	800f5e8 <disk_read>
 80126ae:	4603      	mov	r3, r0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d004      	beq.n	80126be <f_lseek+0x436>
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	755a      	strb	r2, [r3, #21]
 80126ba:	2301      	movs	r3, #1
 80126bc:	e004      	b.n	80126c8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126c2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80126c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3740      	adds	r7, #64	@ 0x40
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	460b      	mov	r3, r1
 80126da:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80126dc:	78fb      	ldrb	r3, [r7, #3]
 80126de:	2b0a      	cmp	r3, #10
 80126e0:	d103      	bne.n	80126ea <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80126e2:	210d      	movs	r1, #13
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff fff3 	bl	80126d0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	db25      	blt.n	8012742 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	1c5a      	adds	r2, r3, #1
 80126fa:	60fa      	str	r2, [r7, #12]
 80126fc:	687a      	ldr	r2, [r7, #4]
 80126fe:	4413      	add	r3, r2
 8012700:	78fa      	ldrb	r2, [r7, #3]
 8012702:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	2b3c      	cmp	r3, #60	@ 0x3c
 8012708:	dd12      	ble.n	8012730 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6818      	ldr	r0, [r3, #0]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f103 010c 	add.w	r1, r3, #12
 8012714:	68fa      	ldr	r2, [r7, #12]
 8012716:	f107 0308 	add.w	r3, r7, #8
 801271a:	f7ff fb79 	bl	8011e10 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801271e:	68ba      	ldr	r2, [r7, #8]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	429a      	cmp	r2, r3
 8012724:	d101      	bne.n	801272a <putc_bfd+0x5a>
 8012726:	2300      	movs	r3, #0
 8012728:	e001      	b.n	801272e <putc_bfd+0x5e>
 801272a:	f04f 33ff 	mov.w	r3, #4294967295
 801272e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	68fa      	ldr	r2, [r7, #12]
 8012734:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	689b      	ldr	r3, [r3, #8]
 801273a:	1c5a      	adds	r2, r3, #1
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	609a      	str	r2, [r3, #8]
 8012740:	e000      	b.n	8012744 <putc_bfd+0x74>
	if (i < 0) return;
 8012742:	bf00      	nop
}
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}

0801274a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801274a:	b580      	push	{r7, lr}
 801274c:	b084      	sub	sp, #16
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	db16      	blt.n	8012788 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6818      	ldr	r0, [r3, #0]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f103 010c 	add.w	r1, r3, #12
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	461a      	mov	r2, r3
 801276a:	f107 030c 	add.w	r3, r7, #12
 801276e:	f7ff fb4f 	bl	8011e10 <f_write>
 8012772:	4603      	mov	r3, r0
 8012774:	2b00      	cmp	r3, #0
 8012776:	d107      	bne.n	8012788 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	68fa      	ldr	r2, [r7, #12]
 801277e:	4293      	cmp	r3, r2
 8012780:	d102      	bne.n	8012788 <putc_flush+0x3e>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	689b      	ldr	r3, [r3, #8]
 8012786:	e001      	b.n	801278c <putc_flush+0x42>
	return EOF;
 8012788:	f04f 33ff 	mov.w	r3, #4294967295
}
 801278c:	4618      	mov	r0, r3
 801278e:	3710      	adds	r7, #16
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	683a      	ldr	r2, [r7, #0]
 80127a2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	605a      	str	r2, [r3, #4]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	685a      	ldr	r2, [r3, #4]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	609a      	str	r2, [r3, #8]
}
 80127b2:	bf00      	nop
 80127b4:	370c      	adds	r7, #12
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
	...

080127c0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80127c0:	b40e      	push	{r1, r2, r3}
 80127c2:	b580      	push	{r7, lr}
 80127c4:	b0a7      	sub	sp, #156	@ 0x9c
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80127ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80127ce:	6879      	ldr	r1, [r7, #4]
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7ff ffdf 	bl	8012794 <putc_init>

	va_start(arp, fmt);
 80127d6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80127da:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 80127dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80127e0:	1c5a      	adds	r2, r3, #1
 80127e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 80127ec:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	f000 81f2 	beq.w	8012bda <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80127f6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80127fa:	2b25      	cmp	r3, #37	@ 0x25
 80127fc:	d008      	beq.n	8012810 <f_printf+0x50>
			putc_bfd(&pb, c);
 80127fe:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8012802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012806:	4611      	mov	r1, r2
 8012808:	4618      	mov	r0, r3
 801280a:	f7ff ff61 	bl	80126d0 <putc_bfd>
			continue;
 801280e:	e1e3      	b.n	8012bd8 <f_printf+0x418>
		}
		w = f = 0;
 8012810:	2300      	movs	r3, #0
 8012812:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012816:	2300      	movs	r3, #0
 8012818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 801281c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012820:	1c5a      	adds	r2, r3, #1
 8012822:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 801282c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012830:	2b30      	cmp	r3, #48	@ 0x30
 8012832:	d10b      	bne.n	801284c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8012834:	2301      	movs	r3, #1
 8012836:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801283a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801283e:	1c5a      	adds	r2, r3, #1
 8012840:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 801284a:	e024      	b.n	8012896 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801284c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012850:	2b2d      	cmp	r3, #45	@ 0x2d
 8012852:	d120      	bne.n	8012896 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8012854:	2302      	movs	r3, #2
 8012856:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801285a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801285e:	1c5a      	adds	r2, r3, #1
 8012860:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801286a:	e014      	b.n	8012896 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801286c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012870:	4613      	mov	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	005b      	lsls	r3, r3, #1
 8012878:	461a      	mov	r2, r3
 801287a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801287e:	4413      	add	r3, r2
 8012880:	3b30      	subs	r3, #48	@ 0x30
 8012882:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8012886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801288a:	1c5a      	adds	r2, r3, #1
 801288c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8012896:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801289a:	2b2f      	cmp	r3, #47	@ 0x2f
 801289c:	d903      	bls.n	80128a6 <f_printf+0xe6>
 801289e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80128a2:	2b39      	cmp	r3, #57	@ 0x39
 80128a4:	d9e2      	bls.n	801286c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80128a6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80128aa:	2b6c      	cmp	r3, #108	@ 0x6c
 80128ac:	d003      	beq.n	80128b6 <f_printf+0xf6>
 80128ae:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80128b2:	2b4c      	cmp	r3, #76	@ 0x4c
 80128b4:	d10d      	bne.n	80128d2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80128b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80128ba:	f043 0304 	orr.w	r3, r3, #4
 80128be:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80128c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80128c6:	1c5a      	adds	r2, r3, #1
 80128c8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80128d2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	f000 8181 	beq.w	8012bde <f_printf+0x41e>
		d = c;
 80128dc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80128e0:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 80128e4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80128e8:	2b60      	cmp	r3, #96	@ 0x60
 80128ea:	d908      	bls.n	80128fe <f_printf+0x13e>
 80128ec:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80128f0:	2b7a      	cmp	r3, #122	@ 0x7a
 80128f2:	d804      	bhi.n	80128fe <f_printf+0x13e>
 80128f4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80128f8:	3b20      	subs	r3, #32
 80128fa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 80128fe:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012902:	3b42      	subs	r3, #66	@ 0x42
 8012904:	2b16      	cmp	r3, #22
 8012906:	f200 8098 	bhi.w	8012a3a <f_printf+0x27a>
 801290a:	a201      	add	r2, pc, #4	@ (adr r2, 8012910 <f_printf+0x150>)
 801290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012910:	08012a1b 	.word	0x08012a1b
 8012914:	08012a03 	.word	0x08012a03
 8012918:	08012a2b 	.word	0x08012a2b
 801291c:	08012a3b 	.word	0x08012a3b
 8012920:	08012a3b 	.word	0x08012a3b
 8012924:	08012a3b 	.word	0x08012a3b
 8012928:	08012a3b 	.word	0x08012a3b
 801292c:	08012a3b 	.word	0x08012a3b
 8012930:	08012a3b 	.word	0x08012a3b
 8012934:	08012a3b 	.word	0x08012a3b
 8012938:	08012a3b 	.word	0x08012a3b
 801293c:	08012a3b 	.word	0x08012a3b
 8012940:	08012a3b 	.word	0x08012a3b
 8012944:	08012a23 	.word	0x08012a23
 8012948:	08012a3b 	.word	0x08012a3b
 801294c:	08012a3b 	.word	0x08012a3b
 8012950:	08012a3b 	.word	0x08012a3b
 8012954:	0801296d 	.word	0x0801296d
 8012958:	08012a3b 	.word	0x08012a3b
 801295c:	08012a2b 	.word	0x08012a2b
 8012960:	08012a3b 	.word	0x08012a3b
 8012964:	08012a3b 	.word	0x08012a3b
 8012968:	08012a33 	.word	0x08012a33
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801296c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801296e:	1d1a      	adds	r2, r3, #4
 8012970:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8012976:	2300      	movs	r3, #0
 8012978:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801297c:	e004      	b.n	8012988 <f_printf+0x1c8>
 801297e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012982:	3301      	adds	r3, #1
 8012984:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012988:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801298a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801298e:	4413      	add	r3, r2
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d1f3      	bne.n	801297e <f_printf+0x1be>
			if (!(f & 2)) {
 8012996:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801299a:	f003 0302 	and.w	r3, r3, #2
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d11a      	bne.n	80129d8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80129a2:	e005      	b.n	80129b0 <f_printf+0x1f0>
 80129a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80129a8:	2120      	movs	r1, #32
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7ff fe90 	bl	80126d0 <putc_bfd>
 80129b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80129b4:	1c5a      	adds	r2, r3, #1
 80129b6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80129ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80129be:	429a      	cmp	r2, r3
 80129c0:	d8f0      	bhi.n	80129a4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80129c2:	e009      	b.n	80129d8 <f_printf+0x218>
 80129c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80129c6:	1c5a      	adds	r2, r3, #1
 80129c8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80129ca:	781a      	ldrb	r2, [r3, #0]
 80129cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80129d0:	4611      	mov	r1, r2
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7ff fe7c 	bl	80126d0 <putc_bfd>
 80129d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d1f1      	bne.n	80129c4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80129e0:	e005      	b.n	80129ee <f_printf+0x22e>
 80129e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80129e6:	2120      	movs	r1, #32
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7ff fe71 	bl	80126d0 <putc_bfd>
 80129ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80129f2:	1c5a      	adds	r2, r3, #1
 80129f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80129f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d8f0      	bhi.n	80129e2 <f_printf+0x222>
			continue;
 8012a00:	e0ea      	b.n	8012bd8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8012a02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a04:	1d1a      	adds	r2, r3, #4
 8012a06:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	b2da      	uxtb	r2, r3
 8012a0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012a10:	4611      	mov	r1, r2
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7ff fe5c 	bl	80126d0 <putc_bfd>
 8012a18:	e0de      	b.n	8012bd8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8012a1a:	2302      	movs	r3, #2
 8012a1c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012a20:	e014      	b.n	8012a4c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8012a22:	2308      	movs	r3, #8
 8012a24:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012a28:	e010      	b.n	8012a4c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8012a2a:	230a      	movs	r3, #10
 8012a2c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012a30:	e00c      	b.n	8012a4c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8012a32:	2310      	movs	r3, #16
 8012a34:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012a38:	e008      	b.n	8012a4c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8012a3a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8012a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012a42:	4611      	mov	r1, r2
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7ff fe43 	bl	80126d0 <putc_bfd>
 8012a4a:	e0c5      	b.n	8012bd8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8012a4c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012a50:	f003 0304 	and.w	r3, r3, #4
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d004      	beq.n	8012a62 <f_printf+0x2a2>
 8012a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a5a:	1d1a      	adds	r2, r3, #4
 8012a5c:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	e00c      	b.n	8012a7c <f_printf+0x2bc>
 8012a62:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012a66:	2b44      	cmp	r3, #68	@ 0x44
 8012a68:	d104      	bne.n	8012a74 <f_printf+0x2b4>
 8012a6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a6c:	1d1a      	adds	r2, r3, #4
 8012a6e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	e003      	b.n	8012a7c <f_printf+0x2bc>
 8012a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a76:	1d1a      	adds	r2, r3, #4
 8012a78:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8012a80:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012a84:	2b44      	cmp	r3, #68	@ 0x44
 8012a86:	d10e      	bne.n	8012aa6 <f_printf+0x2e6>
 8012a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	da0a      	bge.n	8012aa6 <f_printf+0x2e6>
			v = 0 - v;
 8012a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012a94:	425b      	negs	r3, r3
 8012a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8012a9a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012a9e:	f043 0308 	orr.w	r3, r3, #8
 8012aa2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8012aac:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8012ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012ab4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ab8:	fb01 f202 	mul.w	r2, r1, r2
 8012abc:	1a9b      	subs	r3, r3, r2
 8012abe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8012ac2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8012ac6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ace:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8012ad2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012ad6:	2b09      	cmp	r3, #9
 8012ad8:	d90b      	bls.n	8012af2 <f_printf+0x332>
 8012ada:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012ade:	2b78      	cmp	r3, #120	@ 0x78
 8012ae0:	d101      	bne.n	8012ae6 <f_printf+0x326>
 8012ae2:	2227      	movs	r2, #39	@ 0x27
 8012ae4:	e000      	b.n	8012ae8 <f_printf+0x328>
 8012ae6:	2207      	movs	r2, #7
 8012ae8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012aec:	4413      	add	r3, r2
 8012aee:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8012af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012af6:	1c5a      	adds	r2, r3, #1
 8012af8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012afc:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012b00:	3230      	adds	r2, #48	@ 0x30
 8012b02:	b2d2      	uxtb	r2, r2
 8012b04:	3398      	adds	r3, #152	@ 0x98
 8012b06:	443b      	add	r3, r7
 8012b08:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8012b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d003      	beq.n	8012b1c <f_printf+0x35c>
 8012b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012b18:	2b1f      	cmp	r3, #31
 8012b1a:	d9c7      	bls.n	8012aac <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8012b1c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012b20:	f003 0308 	and.w	r3, r3, #8
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d009      	beq.n	8012b3c <f_printf+0x37c>
 8012b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012b2c:	1c5a      	adds	r2, r3, #1
 8012b2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012b32:	3398      	adds	r3, #152	@ 0x98
 8012b34:	443b      	add	r3, r7
 8012b36:	222d      	movs	r2, #45	@ 0x2d
 8012b38:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8012b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012b44:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012b48:	f003 0301 	and.w	r3, r3, #1
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d001      	beq.n	8012b54 <f_printf+0x394>
 8012b50:	2330      	movs	r3, #48	@ 0x30
 8012b52:	e000      	b.n	8012b56 <f_printf+0x396>
 8012b54:	2320      	movs	r3, #32
 8012b56:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8012b5a:	e007      	b.n	8012b6c <f_printf+0x3ac>
 8012b5c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b64:	4611      	mov	r1, r2
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7ff fdb2 	bl	80126d0 <putc_bfd>
 8012b6c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012b70:	f003 0302 	and.w	r3, r3, #2
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d108      	bne.n	8012b8a <f_printf+0x3ca>
 8012b78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012b7c:	1c5a      	adds	r2, r3, #1
 8012b7e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012b82:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d8e8      	bhi.n	8012b5c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8012b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012b94:	f107 020c 	add.w	r2, r7, #12
 8012b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012b9c:	4413      	add	r3, r2
 8012b9e:	781a      	ldrb	r2, [r3, #0]
 8012ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012ba4:	4611      	mov	r1, r2
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7ff fd92 	bl	80126d0 <putc_bfd>
		} while (i);
 8012bac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d1ea      	bne.n	8012b8a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8012bb4:	e007      	b.n	8012bc6 <f_printf+0x406>
 8012bb6:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012bba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012bbe:	4611      	mov	r1, r2
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7ff fd85 	bl	80126d0 <putc_bfd>
 8012bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012bca:	1c5a      	adds	r2, r3, #1
 8012bcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012bd0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d8ee      	bhi.n	8012bb6 <f_printf+0x3f6>
		c = *fmt++;
 8012bd8:	e600      	b.n	80127dc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8012bda:	bf00      	nop
 8012bdc:	e000      	b.n	8012be0 <f_printf+0x420>
		if (!c) break;
 8012bde:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8012be0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7ff fdb0 	bl	801274a <putc_flush>
 8012bea:	4603      	mov	r3, r0
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	379c      	adds	r7, #156	@ 0x9c
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012bf6:	b003      	add	sp, #12
 8012bf8:	4770      	bx	lr
 8012bfa:	bf00      	nop

08012bfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b087      	sub	sp, #28
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	4613      	mov	r3, r2
 8012c08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012c12:	4b1f      	ldr	r3, [pc, #124]	@ (8012c90 <FATFS_LinkDriverEx+0x94>)
 8012c14:	7a5b      	ldrb	r3, [r3, #9]
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d131      	bne.n	8012c80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8012c90 <FATFS_LinkDriverEx+0x94>)
 8012c1e:	7a5b      	ldrb	r3, [r3, #9]
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	461a      	mov	r2, r3
 8012c24:	4b1a      	ldr	r3, [pc, #104]	@ (8012c90 <FATFS_LinkDriverEx+0x94>)
 8012c26:	2100      	movs	r1, #0
 8012c28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012c2a:	4b19      	ldr	r3, [pc, #100]	@ (8012c90 <FATFS_LinkDriverEx+0x94>)
 8012c2c:	7a5b      	ldrb	r3, [r3, #9]
 8012c2e:	b2db      	uxtb	r3, r3
 8012c30:	4a17      	ldr	r2, [pc, #92]	@ (8012c90 <FATFS_LinkDriverEx+0x94>)
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4413      	add	r3, r2
 8012c36:	68fa      	ldr	r2, [r7, #12]
 8012c38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012c3a:	4b15      	ldr	r3, [pc, #84]	@ (8012c90 <FATFS_LinkDriverEx+0x94>)
 8012c3c:	7a5b      	ldrb	r3, [r3, #9]
 8012c3e:	b2db      	uxtb	r3, r3
 8012c40:	461a      	mov	r2, r3
 8012c42:	4b13      	ldr	r3, [pc, #76]	@ (8012c90 <FATFS_LinkDriverEx+0x94>)
 8012c44:	4413      	add	r3, r2
 8012c46:	79fa      	ldrb	r2, [r7, #7]
 8012c48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012c4a:	4b11      	ldr	r3, [pc, #68]	@ (8012c90 <FATFS_LinkDriverEx+0x94>)
 8012c4c:	7a5b      	ldrb	r3, [r3, #9]
 8012c4e:	b2db      	uxtb	r3, r3
 8012c50:	1c5a      	adds	r2, r3, #1
 8012c52:	b2d1      	uxtb	r1, r2
 8012c54:	4a0e      	ldr	r2, [pc, #56]	@ (8012c90 <FATFS_LinkDriverEx+0x94>)
 8012c56:	7251      	strb	r1, [r2, #9]
 8012c58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012c5a:	7dbb      	ldrb	r3, [r7, #22]
 8012c5c:	3330      	adds	r3, #48	@ 0x30
 8012c5e:	b2da      	uxtb	r2, r3
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	3301      	adds	r3, #1
 8012c68:	223a      	movs	r2, #58	@ 0x3a
 8012c6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	3302      	adds	r3, #2
 8012c70:	222f      	movs	r2, #47	@ 0x2f
 8012c72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	3303      	adds	r3, #3
 8012c78:	2200      	movs	r2, #0
 8012c7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	371c      	adds	r7, #28
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr
 8012c8e:	bf00      	nop
 8012c90:	24002cb0 	.word	0x24002cb0

08012c94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	6839      	ldr	r1, [r7, #0]
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7ff ffaa 	bl	8012bfc <FATFS_LinkDriverEx>
 8012ca8:	4603      	mov	r3, r0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3708      	adds	r7, #8
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
	...

08012cb4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b085      	sub	sp, #20
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	4603      	mov	r3, r0
 8012cbc:	6039      	str	r1, [r7, #0]
 8012cbe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012cc0:	88fb      	ldrh	r3, [r7, #6]
 8012cc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8012cc4:	d802      	bhi.n	8012ccc <ff_convert+0x18>
		c = chr;
 8012cc6:	88fb      	ldrh	r3, [r7, #6]
 8012cc8:	81fb      	strh	r3, [r7, #14]
 8012cca:	e025      	b.n	8012d18 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d00b      	beq.n	8012cea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012cd2:	88fb      	ldrh	r3, [r7, #6]
 8012cd4:	2bff      	cmp	r3, #255	@ 0xff
 8012cd6:	d805      	bhi.n	8012ce4 <ff_convert+0x30>
 8012cd8:	88fb      	ldrh	r3, [r7, #6]
 8012cda:	3b80      	subs	r3, #128	@ 0x80
 8012cdc:	4a12      	ldr	r2, [pc, #72]	@ (8012d28 <ff_convert+0x74>)
 8012cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ce2:	e000      	b.n	8012ce6 <ff_convert+0x32>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	81fb      	strh	r3, [r7, #14]
 8012ce8:	e016      	b.n	8012d18 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012cea:	2300      	movs	r3, #0
 8012cec:	81fb      	strh	r3, [r7, #14]
 8012cee:	e009      	b.n	8012d04 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012cf0:	89fb      	ldrh	r3, [r7, #14]
 8012cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8012d28 <ff_convert+0x74>)
 8012cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012cf8:	88fa      	ldrh	r2, [r7, #6]
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	d006      	beq.n	8012d0c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012cfe:	89fb      	ldrh	r3, [r7, #14]
 8012d00:	3301      	adds	r3, #1
 8012d02:	81fb      	strh	r3, [r7, #14]
 8012d04:	89fb      	ldrh	r3, [r7, #14]
 8012d06:	2b7f      	cmp	r3, #127	@ 0x7f
 8012d08:	d9f2      	bls.n	8012cf0 <ff_convert+0x3c>
 8012d0a:	e000      	b.n	8012d0e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012d0c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012d0e:	89fb      	ldrh	r3, [r7, #14]
 8012d10:	3380      	adds	r3, #128	@ 0x80
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012d18:	89fb      	ldrh	r3, [r7, #14]
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	3714      	adds	r7, #20
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d24:	4770      	bx	lr
 8012d26:	bf00      	nop
 8012d28:	080132e0 	.word	0x080132e0

08012d2c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b087      	sub	sp, #28
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	4603      	mov	r3, r0
 8012d34:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012d36:	88fb      	ldrh	r3, [r7, #6]
 8012d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d3c:	d201      	bcs.n	8012d42 <ff_wtoupper+0x16>
 8012d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8012e38 <ff_wtoupper+0x10c>)
 8012d40:	e000      	b.n	8012d44 <ff_wtoupper+0x18>
 8012d42:	4b3e      	ldr	r3, [pc, #248]	@ (8012e3c <ff_wtoupper+0x110>)
 8012d44:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	1c9a      	adds	r2, r3, #2
 8012d4a:	617a      	str	r2, [r7, #20]
 8012d4c:	881b      	ldrh	r3, [r3, #0]
 8012d4e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012d50:	8a7b      	ldrh	r3, [r7, #18]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d068      	beq.n	8012e28 <ff_wtoupper+0xfc>
 8012d56:	88fa      	ldrh	r2, [r7, #6]
 8012d58:	8a7b      	ldrh	r3, [r7, #18]
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d364      	bcc.n	8012e28 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	1c9a      	adds	r2, r3, #2
 8012d62:	617a      	str	r2, [r7, #20]
 8012d64:	881b      	ldrh	r3, [r3, #0]
 8012d66:	823b      	strh	r3, [r7, #16]
 8012d68:	8a3b      	ldrh	r3, [r7, #16]
 8012d6a:	0a1b      	lsrs	r3, r3, #8
 8012d6c:	81fb      	strh	r3, [r7, #14]
 8012d6e:	8a3b      	ldrh	r3, [r7, #16]
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012d74:	88fa      	ldrh	r2, [r7, #6]
 8012d76:	8a79      	ldrh	r1, [r7, #18]
 8012d78:	8a3b      	ldrh	r3, [r7, #16]
 8012d7a:	440b      	add	r3, r1
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	da49      	bge.n	8012e14 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012d80:	89fb      	ldrh	r3, [r7, #14]
 8012d82:	2b08      	cmp	r3, #8
 8012d84:	d84f      	bhi.n	8012e26 <ff_wtoupper+0xfa>
 8012d86:	a201      	add	r2, pc, #4	@ (adr r2, 8012d8c <ff_wtoupper+0x60>)
 8012d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d8c:	08012db1 	.word	0x08012db1
 8012d90:	08012dc3 	.word	0x08012dc3
 8012d94:	08012dd9 	.word	0x08012dd9
 8012d98:	08012de1 	.word	0x08012de1
 8012d9c:	08012de9 	.word	0x08012de9
 8012da0:	08012df1 	.word	0x08012df1
 8012da4:	08012df9 	.word	0x08012df9
 8012da8:	08012e01 	.word	0x08012e01
 8012dac:	08012e09 	.word	0x08012e09
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012db0:	88fa      	ldrh	r2, [r7, #6]
 8012db2:	8a7b      	ldrh	r3, [r7, #18]
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	005b      	lsls	r3, r3, #1
 8012db8:	697a      	ldr	r2, [r7, #20]
 8012dba:	4413      	add	r3, r2
 8012dbc:	881b      	ldrh	r3, [r3, #0]
 8012dbe:	80fb      	strh	r3, [r7, #6]
 8012dc0:	e027      	b.n	8012e12 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012dc2:	88fa      	ldrh	r2, [r7, #6]
 8012dc4:	8a7b      	ldrh	r3, [r7, #18]
 8012dc6:	1ad3      	subs	r3, r2, r3
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	f003 0301 	and.w	r3, r3, #1
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	88fa      	ldrh	r2, [r7, #6]
 8012dd2:	1ad3      	subs	r3, r2, r3
 8012dd4:	80fb      	strh	r3, [r7, #6]
 8012dd6:	e01c      	b.n	8012e12 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012dd8:	88fb      	ldrh	r3, [r7, #6]
 8012dda:	3b10      	subs	r3, #16
 8012ddc:	80fb      	strh	r3, [r7, #6]
 8012dde:	e018      	b.n	8012e12 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012de0:	88fb      	ldrh	r3, [r7, #6]
 8012de2:	3b20      	subs	r3, #32
 8012de4:	80fb      	strh	r3, [r7, #6]
 8012de6:	e014      	b.n	8012e12 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012de8:	88fb      	ldrh	r3, [r7, #6]
 8012dea:	3b30      	subs	r3, #48	@ 0x30
 8012dec:	80fb      	strh	r3, [r7, #6]
 8012dee:	e010      	b.n	8012e12 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012df0:	88fb      	ldrh	r3, [r7, #6]
 8012df2:	3b1a      	subs	r3, #26
 8012df4:	80fb      	strh	r3, [r7, #6]
 8012df6:	e00c      	b.n	8012e12 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012df8:	88fb      	ldrh	r3, [r7, #6]
 8012dfa:	3308      	adds	r3, #8
 8012dfc:	80fb      	strh	r3, [r7, #6]
 8012dfe:	e008      	b.n	8012e12 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012e00:	88fb      	ldrh	r3, [r7, #6]
 8012e02:	3b50      	subs	r3, #80	@ 0x50
 8012e04:	80fb      	strh	r3, [r7, #6]
 8012e06:	e004      	b.n	8012e12 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012e08:	88fb      	ldrh	r3, [r7, #6]
 8012e0a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8012e0e:	80fb      	strh	r3, [r7, #6]
 8012e10:	bf00      	nop
			}
			break;
 8012e12:	e008      	b.n	8012e26 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012e14:	89fb      	ldrh	r3, [r7, #14]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d195      	bne.n	8012d46 <ff_wtoupper+0x1a>
 8012e1a:	8a3b      	ldrh	r3, [r7, #16]
 8012e1c:	005b      	lsls	r3, r3, #1
 8012e1e:	697a      	ldr	r2, [r7, #20]
 8012e20:	4413      	add	r3, r2
 8012e22:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012e24:	e78f      	b.n	8012d46 <ff_wtoupper+0x1a>
			break;
 8012e26:	bf00      	nop
	}

	return chr;
 8012e28:	88fb      	ldrh	r3, [r7, #6]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	371c      	adds	r7, #28
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e34:	4770      	bx	lr
 8012e36:	bf00      	nop
 8012e38:	080133e0 	.word	0x080133e0
 8012e3c:	080135d4 	.word	0x080135d4

08012e40 <memset>:
 8012e40:	4402      	add	r2, r0
 8012e42:	4603      	mov	r3, r0
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d100      	bne.n	8012e4a <memset+0xa>
 8012e48:	4770      	bx	lr
 8012e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8012e4e:	e7f9      	b.n	8012e44 <memset+0x4>

08012e50 <__errno>:
 8012e50:	4b01      	ldr	r3, [pc, #4]	@ (8012e58 <__errno+0x8>)
 8012e52:	6818      	ldr	r0, [r3, #0]
 8012e54:	4770      	bx	lr
 8012e56:	bf00      	nop
 8012e58:	240000c0 	.word	0x240000c0

08012e5c <__libc_init_array>:
 8012e5c:	b570      	push	{r4, r5, r6, lr}
 8012e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8012e94 <__libc_init_array+0x38>)
 8012e60:	4c0d      	ldr	r4, [pc, #52]	@ (8012e98 <__libc_init_array+0x3c>)
 8012e62:	1b64      	subs	r4, r4, r5
 8012e64:	10a4      	asrs	r4, r4, #2
 8012e66:	2600      	movs	r6, #0
 8012e68:	42a6      	cmp	r6, r4
 8012e6a:	d109      	bne.n	8012e80 <__libc_init_array+0x24>
 8012e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8012e9c <__libc_init_array+0x40>)
 8012e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8012ea0 <__libc_init_array+0x44>)
 8012e70:	f000 f952 	bl	8013118 <_init>
 8012e74:	1b64      	subs	r4, r4, r5
 8012e76:	10a4      	asrs	r4, r4, #2
 8012e78:	2600      	movs	r6, #0
 8012e7a:	42a6      	cmp	r6, r4
 8012e7c:	d105      	bne.n	8012e8a <__libc_init_array+0x2e>
 8012e7e:	bd70      	pop	{r4, r5, r6, pc}
 8012e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e84:	4798      	blx	r3
 8012e86:	3601      	adds	r6, #1
 8012e88:	e7ee      	b.n	8012e68 <__libc_init_array+0xc>
 8012e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e8e:	4798      	blx	r3
 8012e90:	3601      	adds	r6, #1
 8012e92:	e7f2      	b.n	8012e7a <__libc_init_array+0x1e>
 8012e94:	08013f28 	.word	0x08013f28
 8012e98:	08013f28 	.word	0x08013f28
 8012e9c:	08013f28 	.word	0x08013f28
 8012ea0:	08013f2c 	.word	0x08013f2c

08012ea4 <memcpy>:
 8012ea4:	440a      	add	r2, r1
 8012ea6:	4291      	cmp	r1, r2
 8012ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8012eac:	d100      	bne.n	8012eb0 <memcpy+0xc>
 8012eae:	4770      	bx	lr
 8012eb0:	b510      	push	{r4, lr}
 8012eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012eba:	4291      	cmp	r1, r2
 8012ebc:	d1f9      	bne.n	8012eb2 <memcpy+0xe>
 8012ebe:	bd10      	pop	{r4, pc}

08012ec0 <log>:
 8012ec0:	b4f0      	push	{r4, r5, r6, r7}
 8012ec2:	ee10 0a90 	vmov	r0, s1
 8012ec6:	ee10 3a10 	vmov	r3, s0
 8012eca:	f04f 34ff 	mov.w	r4, #4294967295
 8012ece:	429c      	cmp	r4, r3
 8012ed0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8012ed4:	4c70      	ldr	r4, [pc, #448]	@ (8013098 <log+0x1d8>)
 8012ed6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8012eda:	418c      	sbcs	r4, r1
 8012edc:	ed2d 8b02 	vpush	{d8}
 8012ee0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012ee4:	d35a      	bcc.n	8012f9c <log+0xdc>
 8012ee6:	4a6d      	ldr	r2, [pc, #436]	@ (801309c <log+0x1dc>)
 8012ee8:	4290      	cmp	r0, r2
 8012eea:	bf08      	it	eq
 8012eec:	2b00      	cmpeq	r3, #0
 8012eee:	f000 80c4 	beq.w	801307a <log+0x1ba>
 8012ef2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012ef6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012efa:	4b69      	ldr	r3, [pc, #420]	@ (80130a0 <log+0x1e0>)
 8012efc:	ee20 2b00 	vmul.f64	d2, d0, d0
 8012f00:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8012f04:	ee20 4b02 	vmul.f64	d4, d0, d2
 8012f08:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8012f0c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8012f10:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8012f14:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8012f18:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012f1c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8012f20:	eea5 6b00 	vfma.f64	d6, d5, d0
 8012f24:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8012f28:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8012f2c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8012f30:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8012f34:	eea3 5b00 	vfma.f64	d5, d3, d0
 8012f38:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8012f3c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8012f40:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8012f44:	eea3 5b04 	vfma.f64	d5, d3, d4
 8012f48:	eea5 6b04 	vfma.f64	d6, d5, d4
 8012f4c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8012f50:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012f54:	eeb0 2b47 	vmov.f64	d2, d7
 8012f58:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8013080 <log+0x1c0>
 8012f5c:	eeb0 6b40 	vmov.f64	d6, d0
 8012f60:	eeb0 3b40 	vmov.f64	d3, d0
 8012f64:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012f68:	eea0 6b47 	vfms.f64	d6, d0, d7
 8012f6c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8012f70:	ee26 1b06 	vmul.f64	d1, d6, d6
 8012f74:	eea1 3b05 	vfma.f64	d3, d1, d5
 8012f78:	ee30 7b43 	vsub.f64	d7, d0, d3
 8012f7c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8012f80:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012f84:	ee25 5b08 	vmul.f64	d5, d5, d8
 8012f88:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012f8c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8012f90:	ee33 0b07 	vadd.f64	d0, d3, d7
 8012f94:	ecbd 8b02 	vpop	{d8}
 8012f98:	bcf0      	pop	{r4, r5, r6, r7}
 8012f9a:	4770      	bx	lr
 8012f9c:	f1a2 0410 	sub.w	r4, r2, #16
 8012fa0:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8012fa4:	428c      	cmp	r4, r1
 8012fa6:	d923      	bls.n	8012ff0 <log+0x130>
 8012fa8:	18d9      	adds	r1, r3, r3
 8012faa:	eb40 0400 	adc.w	r4, r0, r0
 8012fae:	4321      	orrs	r1, r4
 8012fb0:	d105      	bne.n	8012fbe <log+0xfe>
 8012fb2:	ecbd 8b02 	vpop	{d8}
 8012fb6:	2001      	movs	r0, #1
 8012fb8:	bcf0      	pop	{r4, r5, r6, r7}
 8012fba:	f000 b885 	b.w	80130c8 <__math_divzero>
 8012fbe:	4939      	ldr	r1, [pc, #228]	@ (80130a4 <log+0x1e4>)
 8012fc0:	4288      	cmp	r0, r1
 8012fc2:	bf08      	it	eq
 8012fc4:	2b00      	cmpeq	r3, #0
 8012fc6:	d0e5      	beq.n	8012f94 <log+0xd4>
 8012fc8:	0413      	lsls	r3, r2, #16
 8012fca:	d403      	bmi.n	8012fd4 <log+0x114>
 8012fcc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8012fd0:	4393      	bics	r3, r2
 8012fd2:	d104      	bne.n	8012fde <log+0x11e>
 8012fd4:	ecbd 8b02 	vpop	{d8}
 8012fd8:	bcf0      	pop	{r4, r5, r6, r7}
 8012fda:	f000 b88d 	b.w	80130f8 <__math_invalid>
 8012fde:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013088 <log+0x1c8>
 8012fe2:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012fe6:	ec53 2b17 	vmov	r2, r3, d7
 8012fea:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8012fee:	4613      	mov	r3, r2
 8012ff0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8012ff4:	492a      	ldr	r1, [pc, #168]	@ (80130a0 <log+0x1e0>)
 8012ff6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8012ffa:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8012ffe:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8013002:	0d15      	lsrs	r5, r2, #20
 8013004:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8013008:	052d      	lsls	r5, r5, #20
 801300a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 801300e:	1e1e      	subs	r6, r3, #0
 8013010:	1b47      	subs	r7, r0, r5
 8013012:	ec47 6b16 	vmov	d6, r6, r7
 8013016:	1512      	asrs	r2, r2, #20
 8013018:	eea7 5b06 	vfma.f64	d5, d7, d6
 801301c:	ee07 2a90 	vmov	s15, r2
 8013020:	ee25 2b05 	vmul.f64	d2, d5, d5
 8013024:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8013028:	ed91 4b00 	vldr	d4, [r1]
 801302c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8013030:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8013034:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013038:	ee35 4b07 	vadd.f64	d4, d5, d7
 801303c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8013040:	ed91 7b02 	vldr	d7, [r1, #8]
 8013044:	ee30 0b05 	vadd.f64	d0, d0, d5
 8013048:	eea7 0b06 	vfma.f64	d0, d7, d6
 801304c:	ed91 7b04 	vldr	d7, [r1, #16]
 8013050:	ed91 6b08 	vldr	d6, [r1, #32]
 8013054:	eea7 0b02 	vfma.f64	d0, d7, d2
 8013058:	ed91 7b06 	vldr	d7, [r1, #24]
 801305c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8013060:	eea6 7b05 	vfma.f64	d7, d6, d5
 8013064:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8013068:	eea3 6b05 	vfma.f64	d6, d3, d5
 801306c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013070:	eea1 0b07 	vfma.f64	d0, d1, d7
 8013074:	ee30 0b04 	vadd.f64	d0, d0, d4
 8013078:	e78c      	b.n	8012f94 <log+0xd4>
 801307a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8013090 <log+0x1d0>
 801307e:	e789      	b.n	8012f94 <log+0xd4>
 8013080:	00000000 	.word	0x00000000
 8013084:	41a00000 	.word	0x41a00000
 8013088:	00000000 	.word	0x00000000
 801308c:	43300000 	.word	0x43300000
	...
 8013098:	000308ff 	.word	0x000308ff
 801309c:	3ff00000 	.word	0x3ff00000
 80130a0:	08013690 	.word	0x08013690
 80130a4:	7ff00000 	.word	0x7ff00000

080130a8 <with_errno>:
 80130a8:	b510      	push	{r4, lr}
 80130aa:	ed2d 8b02 	vpush	{d8}
 80130ae:	eeb0 8b40 	vmov.f64	d8, d0
 80130b2:	4604      	mov	r4, r0
 80130b4:	f7ff fecc 	bl	8012e50 <__errno>
 80130b8:	eeb0 0b48 	vmov.f64	d0, d8
 80130bc:	ecbd 8b02 	vpop	{d8}
 80130c0:	6004      	str	r4, [r0, #0]
 80130c2:	bd10      	pop	{r4, pc}
 80130c4:	0000      	movs	r0, r0
	...

080130c8 <__math_divzero>:
 80130c8:	b082      	sub	sp, #8
 80130ca:	2800      	cmp	r0, #0
 80130cc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80130d0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80130d4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80130d8:	ed8d 7b00 	vstr	d7, [sp]
 80130dc:	ed9d 0b00 	vldr	d0, [sp]
 80130e0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80130f0 <__math_divzero+0x28>
 80130e4:	2022      	movs	r0, #34	@ 0x22
 80130e6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80130ea:	b002      	add	sp, #8
 80130ec:	f7ff bfdc 	b.w	80130a8 <with_errno>
	...

080130f8 <__math_invalid>:
 80130f8:	eeb0 7b40 	vmov.f64	d7, d0
 80130fc:	eeb4 7b47 	vcmp.f64	d7, d7
 8013100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013104:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013108:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801310c:	d602      	bvs.n	8013114 <__math_invalid+0x1c>
 801310e:	2021      	movs	r0, #33	@ 0x21
 8013110:	f7ff bfca 	b.w	80130a8 <with_errno>
 8013114:	4770      	bx	lr
	...

08013118 <_init>:
 8013118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801311a:	bf00      	nop
 801311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801311e:	bc08      	pop	{r3}
 8013120:	469e      	mov	lr, r3
 8013122:	4770      	bx	lr

08013124 <_fini>:
 8013124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013126:	bf00      	nop
 8013128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801312a:	bc08      	pop	{r3}
 801312c:	469e      	mov	lr, r3
 801312e:	4770      	bx	lr
